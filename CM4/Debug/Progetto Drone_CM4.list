
Progetto Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df70  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0810e210  0810e210  0000f210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec30  0810ec30  0000fc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ec38  0810ec38  0000fc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810ec3c  0810ec3c  0000fc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  10000000  0810ec40  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  100001f8  0810ee38  000101f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100005c4  0810ee38  000105c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c6be  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032fa  00000000  00000000  0002c8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001720  00000000  00000000  0002fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001242  00000000  00000000  00031300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc97  00000000  00000000  00032542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d191  00000000  00000000  0006f1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018cc03  00000000  00000000  0008c36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218f6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007914  00000000  00000000  00218fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  002208c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f8 	.word	0x100001f8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e1f8 	.word	0x0810e1f8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001fc 	.word	0x100001fc
 81002dc:	0810e1f8 	.word	0x0810e1f8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00
 8101124:	00000000 	.word	0x00000000

08101128 <rangeDuty>:
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
}

float rangeDuty(float duty){
 8101128:	b580      	push	{r7, lr}
 810112a:	b082      	sub	sp, #8
 810112c:	af00      	add	r7, sp, #0
 810112e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(duty<MIN_DUTY){
 8101132:	6878      	ldr	r0, [r7, #4]
 8101134:	f7ff fa90 	bl	8100658 <__aeabi_f2d>
 8101138:	a311      	add	r3, pc, #68	@ (adr r3, 8101180 <rangeDuty+0x58>)
 810113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810113e:	f7ff fd55 	bl	8100bec <__aeabi_dcmplt>
 8101142:	4603      	mov	r3, r0
 8101144:	2b00      	cmp	r3, #0
 8101146:	d001      	beq.n	810114c <rangeDuty+0x24>
		return MIN_DUTY;
 8101148:	4b0b      	ldr	r3, [pc, #44]	@ (8101178 <rangeDuty+0x50>)
 810114a:	e00b      	b.n	8101164 <rangeDuty+0x3c>
	}
	else if (duty>MAX_DUTY){
 810114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8101150:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 8101154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810115c:	dd01      	ble.n	8101162 <rangeDuty+0x3a>
		return MAX_DUTY;
 810115e:	4b07      	ldr	r3, [pc, #28]	@ (810117c <rangeDuty+0x54>)
 8101160:	e000      	b.n	8101164 <rangeDuty+0x3c>
	}
	return duty;
 8101162:	687b      	ldr	r3, [r7, #4]
}
 8101164:	ee07 3a90 	vmov	s15, r3
 8101168:	eeb0 0a67 	vmov.f32	s0, s15
 810116c:	3708      	adds	r7, #8
 810116e:	46bd      	mov	sp, r7
 8101170:	bd80      	pop	{r7, pc}
 8101172:	bf00      	nop
 8101174:	f3af 8000 	nop.w
 8101178:	40accccd 	.word	0x40accccd
 810117c:	40d00000 	.word	0x40d00000
 8101180:	9999999a 	.word	0x9999999a
 8101184:	40159999 	.word	0x40159999

08101188 <setPWM>:

void setPWM(float pwm1, float pwm2, float pwm3, float pwm4){
 8101188:	b580      	push	{r7, lr}
 810118a:	ed2d 8b02 	vpush	{d8}
 810118e:	b084      	sub	sp, #16
 8101190:	af00      	add	r7, sp, #0
 8101192:	ed87 0a03 	vstr	s0, [r7, #12]
 8101196:	edc7 0a02 	vstr	s1, [r7, #8]
 810119a:	ed87 1a01 	vstr	s2, [r7, #4]
 810119e:	edc7 1a00 	vstr	s3, [r7]
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * rangeDuty(pwm1) / 100);
 81011a2:	4b33      	ldr	r3, [pc, #204]	@ (8101270 <setPWM+0xe8>)
 81011a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81011a6:	ee07 3a90 	vmov	s15, r3
 81011aa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 81011ae:	ed97 0a03 	vldr	s0, [r7, #12]
 81011b2:	f7ff ffb9 	bl	8101128 <rangeDuty>
 81011b6:	eef0 7a40 	vmov.f32	s15, s0
 81011ba:	ee28 7a27 	vmul.f32	s14, s16, s15
 81011be:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8101274 <setPWM+0xec>
 81011c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81011c6:	4b2a      	ldr	r3, [pc, #168]	@ (8101270 <setPWM+0xe8>)
 81011c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81011cc:	ee17 2a90 	vmov	r2, s15
 81011d0:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * rangeDuty(pwm2) / 100);
 81011d2:	4b27      	ldr	r3, [pc, #156]	@ (8101270 <setPWM+0xe8>)
 81011d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81011d6:	ee07 3a90 	vmov	s15, r3
 81011da:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 81011de:	ed97 0a02 	vldr	s0, [r7, #8]
 81011e2:	f7ff ffa1 	bl	8101128 <rangeDuty>
 81011e6:	eef0 7a40 	vmov.f32	s15, s0
 81011ea:	ee28 7a27 	vmul.f32	s14, s16, s15
 81011ee:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8101274 <setPWM+0xec>
 81011f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81011f6:	4b1e      	ldr	r3, [pc, #120]	@ (8101270 <setPWM+0xe8>)
 81011f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81011fc:	ee17 2a90 	vmov	r2, s15
 8101200:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * rangeDuty(pwm3) / 100);
 8101202:	4b1b      	ldr	r3, [pc, #108]	@ (8101270 <setPWM+0xe8>)
 8101204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101206:	ee07 3a90 	vmov	s15, r3
 810120a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 810120e:	ed97 0a01 	vldr	s0, [r7, #4]
 8101212:	f7ff ff89 	bl	8101128 <rangeDuty>
 8101216:	eef0 7a40 	vmov.f32	s15, s0
 810121a:	ee28 7a27 	vmul.f32	s14, s16, s15
 810121e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8101274 <setPWM+0xec>
 8101222:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101226:	4b12      	ldr	r3, [pc, #72]	@ (8101270 <setPWM+0xe8>)
 8101228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810122c:	ee17 2a90 	vmov	r2, s15
 8101230:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * rangeDuty(pwm4) / 100);
 8101232:	4b0f      	ldr	r3, [pc, #60]	@ (8101270 <setPWM+0xe8>)
 8101234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101236:	ee07 3a90 	vmov	s15, r3
 810123a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 810123e:	ed97 0a00 	vldr	s0, [r7]
 8101242:	f7ff ff71 	bl	8101128 <rangeDuty>
 8101246:	eef0 7a40 	vmov.f32	s15, s0
 810124a:	ee28 7a27 	vmul.f32	s14, s16, s15
 810124e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8101274 <setPWM+0xec>
 8101252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101256:	4b06      	ldr	r3, [pc, #24]	@ (8101270 <setPWM+0xe8>)
 8101258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810125c:	ee17 2a90 	vmov	r2, s15
 8101260:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8101262:	bf00      	nop
 8101264:	3710      	adds	r7, #16
 8101266:	46bd      	mov	sp, r7
 8101268:	ecbd 8b02 	vpop	{d8}
 810126c:	bd80      	pop	{r7, pc}
 810126e:	bf00      	nop
 8101270:	40000400 	.word	0x40000400
 8101274:	42c80000 	.word	0x42c80000

08101278 <SpeedCompute>:

float* SpeedCompute(float virtualInputs[])
{
 8101278:	b5b0      	push	{r4, r5, r7, lr}
 810127a:	b082      	sub	sp, #8
 810127c:	af00      	add	r7, sp, #0
 810127e:	6078      	str	r0, [r7, #4]
    static float Speeds_quad[4];
    static float Speeds[4];

    Speeds_quad[0] = (1/(4*b))*virtualInputs[0] 							   - (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 8101280:	687b      	ldr	r3, [r7, #4]
 8101282:	681b      	ldr	r3, [r3, #0]
 8101284:	4618      	mov	r0, r3
 8101286:	f7ff f9e7 	bl	8100658 <__aeabi_f2d>
 810128a:	a3a3      	add	r3, pc, #652	@ (adr r3, 8101518 <SpeedCompute+0x2a0>)
 810128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101290:	f7ff fa3a 	bl	8100708 <__aeabi_dmul>
 8101294:	4602      	mov	r2, r0
 8101296:	460b      	mov	r3, r1
 8101298:	4614      	mov	r4, r2
 810129a:	461d      	mov	r5, r3
 810129c:	687b      	ldr	r3, [r7, #4]
 810129e:	3308      	adds	r3, #8
 81012a0:	681b      	ldr	r3, [r3, #0]
 81012a2:	4618      	mov	r0, r3
 81012a4:	f7ff f9d8 	bl	8100658 <__aeabi_f2d>
 81012a8:	a39d      	add	r3, pc, #628	@ (adr r3, 8101520 <SpeedCompute+0x2a8>)
 81012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81012ae:	f7ff fa2b 	bl	8100708 <__aeabi_dmul>
 81012b2:	4602      	mov	r2, r0
 81012b4:	460b      	mov	r3, r1
 81012b6:	4620      	mov	r0, r4
 81012b8:	4629      	mov	r1, r5
 81012ba:	f7ff f86d 	bl	8100398 <__aeabi_dsub>
 81012be:	4602      	mov	r2, r0
 81012c0:	460b      	mov	r3, r1
 81012c2:	4614      	mov	r4, r2
 81012c4:	461d      	mov	r5, r3
 81012c6:	687b      	ldr	r3, [r7, #4]
 81012c8:	330c      	adds	r3, #12
 81012ca:	681b      	ldr	r3, [r3, #0]
 81012cc:	4618      	mov	r0, r3
 81012ce:	f7ff f9c3 	bl	8100658 <__aeabi_f2d>
 81012d2:	a395      	add	r3, pc, #596	@ (adr r3, 8101528 <SpeedCompute+0x2b0>)
 81012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81012d8:	f7ff fa16 	bl	8100708 <__aeabi_dmul>
 81012dc:	4602      	mov	r2, r0
 81012de:	460b      	mov	r3, r1
 81012e0:	4620      	mov	r0, r4
 81012e2:	4629      	mov	r1, r5
 81012e4:	f7ff f85a 	bl	810039c <__adddf3>
 81012e8:	4602      	mov	r2, r0
 81012ea:	460b      	mov	r3, r1
 81012ec:	4610      	mov	r0, r2
 81012ee:	4619      	mov	r1, r3
 81012f0:	f7ff fd02 	bl	8100cf8 <__aeabi_d2f>
 81012f4:	4603      	mov	r3, r0
 81012f6:	4a8e      	ldr	r2, [pc, #568]	@ (8101530 <SpeedCompute+0x2b8>)
 81012f8:	6013      	str	r3, [r2, #0]
    Speeds_quad[1] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[1] 								  - (1/(4*d))*virtualInputs[3];
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	681b      	ldr	r3, [r3, #0]
 81012fe:	4618      	mov	r0, r3
 8101300:	f7ff f9aa 	bl	8100658 <__aeabi_f2d>
 8101304:	a384      	add	r3, pc, #528	@ (adr r3, 8101518 <SpeedCompute+0x2a0>)
 8101306:	e9d3 2300 	ldrd	r2, r3, [r3]
 810130a:	f7ff f9fd 	bl	8100708 <__aeabi_dmul>
 810130e:	4602      	mov	r2, r0
 8101310:	460b      	mov	r3, r1
 8101312:	4614      	mov	r4, r2
 8101314:	461d      	mov	r5, r3
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	3304      	adds	r3, #4
 810131a:	681b      	ldr	r3, [r3, #0]
 810131c:	4618      	mov	r0, r3
 810131e:	f7ff f99b 	bl	8100658 <__aeabi_f2d>
 8101322:	a37f      	add	r3, pc, #508	@ (adr r3, 8101520 <SpeedCompute+0x2a8>)
 8101324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101328:	f7ff f9ee 	bl	8100708 <__aeabi_dmul>
 810132c:	4602      	mov	r2, r0
 810132e:	460b      	mov	r3, r1
 8101330:	4620      	mov	r0, r4
 8101332:	4629      	mov	r1, r5
 8101334:	f7ff f830 	bl	8100398 <__aeabi_dsub>
 8101338:	4602      	mov	r2, r0
 810133a:	460b      	mov	r3, r1
 810133c:	4614      	mov	r4, r2
 810133e:	461d      	mov	r5, r3
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	330c      	adds	r3, #12
 8101344:	681b      	ldr	r3, [r3, #0]
 8101346:	4618      	mov	r0, r3
 8101348:	f7ff f986 	bl	8100658 <__aeabi_f2d>
 810134c:	a376      	add	r3, pc, #472	@ (adr r3, 8101528 <SpeedCompute+0x2b0>)
 810134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101352:	f7ff f9d9 	bl	8100708 <__aeabi_dmul>
 8101356:	4602      	mov	r2, r0
 8101358:	460b      	mov	r3, r1
 810135a:	4620      	mov	r0, r4
 810135c:	4629      	mov	r1, r5
 810135e:	f7ff f81b 	bl	8100398 <__aeabi_dsub>
 8101362:	4602      	mov	r2, r0
 8101364:	460b      	mov	r3, r1
 8101366:	4610      	mov	r0, r2
 8101368:	4619      	mov	r1, r3
 810136a:	f7ff fcc5 	bl	8100cf8 <__aeabi_d2f>
 810136e:	4603      	mov	r3, r0
 8101370:	4a6f      	ldr	r2, [pc, #444]	@ (8101530 <SpeedCompute+0x2b8>)
 8101372:	6053      	str	r3, [r2, #4]
    Speeds_quad[2] = (1/(4*b))*virtualInputs[0] 							   + (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	681b      	ldr	r3, [r3, #0]
 8101378:	4618      	mov	r0, r3
 810137a:	f7ff f96d 	bl	8100658 <__aeabi_f2d>
 810137e:	a366      	add	r3, pc, #408	@ (adr r3, 8101518 <SpeedCompute+0x2a0>)
 8101380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101384:	f7ff f9c0 	bl	8100708 <__aeabi_dmul>
 8101388:	4602      	mov	r2, r0
 810138a:	460b      	mov	r3, r1
 810138c:	4614      	mov	r4, r2
 810138e:	461d      	mov	r5, r3
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	3308      	adds	r3, #8
 8101394:	681b      	ldr	r3, [r3, #0]
 8101396:	4618      	mov	r0, r3
 8101398:	f7ff f95e 	bl	8100658 <__aeabi_f2d>
 810139c:	a360      	add	r3, pc, #384	@ (adr r3, 8101520 <SpeedCompute+0x2a8>)
 810139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013a2:	f7ff f9b1 	bl	8100708 <__aeabi_dmul>
 81013a6:	4602      	mov	r2, r0
 81013a8:	460b      	mov	r3, r1
 81013aa:	4620      	mov	r0, r4
 81013ac:	4629      	mov	r1, r5
 81013ae:	f7fe fff5 	bl	810039c <__adddf3>
 81013b2:	4602      	mov	r2, r0
 81013b4:	460b      	mov	r3, r1
 81013b6:	4614      	mov	r4, r2
 81013b8:	461d      	mov	r5, r3
 81013ba:	687b      	ldr	r3, [r7, #4]
 81013bc:	330c      	adds	r3, #12
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	4618      	mov	r0, r3
 81013c2:	f7ff f949 	bl	8100658 <__aeabi_f2d>
 81013c6:	a358      	add	r3, pc, #352	@ (adr r3, 8101528 <SpeedCompute+0x2b0>)
 81013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013cc:	f7ff f99c 	bl	8100708 <__aeabi_dmul>
 81013d0:	4602      	mov	r2, r0
 81013d2:	460b      	mov	r3, r1
 81013d4:	4620      	mov	r0, r4
 81013d6:	4629      	mov	r1, r5
 81013d8:	f7fe ffe0 	bl	810039c <__adddf3>
 81013dc:	4602      	mov	r2, r0
 81013de:	460b      	mov	r3, r1
 81013e0:	4610      	mov	r0, r2
 81013e2:	4619      	mov	r1, r3
 81013e4:	f7ff fc88 	bl	8100cf8 <__aeabi_d2f>
 81013e8:	4603      	mov	r3, r0
 81013ea:	4a51      	ldr	r2, [pc, #324]	@ (8101530 <SpeedCompute+0x2b8>)
 81013ec:	6093      	str	r3, [r2, #8]
    Speeds_quad[3] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[1] 								  - (1/(4*d))*virtualInputs[3];
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	681b      	ldr	r3, [r3, #0]
 81013f2:	4618      	mov	r0, r3
 81013f4:	f7ff f930 	bl	8100658 <__aeabi_f2d>
 81013f8:	a347      	add	r3, pc, #284	@ (adr r3, 8101518 <SpeedCompute+0x2a0>)
 81013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013fe:	f7ff f983 	bl	8100708 <__aeabi_dmul>
 8101402:	4602      	mov	r2, r0
 8101404:	460b      	mov	r3, r1
 8101406:	4614      	mov	r4, r2
 8101408:	461d      	mov	r5, r3
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	3304      	adds	r3, #4
 810140e:	681b      	ldr	r3, [r3, #0]
 8101410:	4618      	mov	r0, r3
 8101412:	f7ff f921 	bl	8100658 <__aeabi_f2d>
 8101416:	a342      	add	r3, pc, #264	@ (adr r3, 8101520 <SpeedCompute+0x2a8>)
 8101418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810141c:	f7ff f974 	bl	8100708 <__aeabi_dmul>
 8101420:	4602      	mov	r2, r0
 8101422:	460b      	mov	r3, r1
 8101424:	4620      	mov	r0, r4
 8101426:	4629      	mov	r1, r5
 8101428:	f7fe ffb8 	bl	810039c <__adddf3>
 810142c:	4602      	mov	r2, r0
 810142e:	460b      	mov	r3, r1
 8101430:	4614      	mov	r4, r2
 8101432:	461d      	mov	r5, r3
 8101434:	687b      	ldr	r3, [r7, #4]
 8101436:	330c      	adds	r3, #12
 8101438:	681b      	ldr	r3, [r3, #0]
 810143a:	4618      	mov	r0, r3
 810143c:	f7ff f90c 	bl	8100658 <__aeabi_f2d>
 8101440:	a339      	add	r3, pc, #228	@ (adr r3, 8101528 <SpeedCompute+0x2b0>)
 8101442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101446:	f7ff f95f 	bl	8100708 <__aeabi_dmul>
 810144a:	4602      	mov	r2, r0
 810144c:	460b      	mov	r3, r1
 810144e:	4620      	mov	r0, r4
 8101450:	4629      	mov	r1, r5
 8101452:	f7fe ffa1 	bl	8100398 <__aeabi_dsub>
 8101456:	4602      	mov	r2, r0
 8101458:	460b      	mov	r3, r1
 810145a:	4610      	mov	r0, r2
 810145c:	4619      	mov	r1, r3
 810145e:	f7ff fc4b 	bl	8100cf8 <__aeabi_d2f>
 8101462:	4603      	mov	r3, r0
 8101464:	4a32      	ldr	r2, [pc, #200]	@ (8101530 <SpeedCompute+0x2b8>)
 8101466:	60d3      	str	r3, [r2, #12]
     * Calcoliamo le velocità dei motori al quadrato, poiché non possono essere negative.
     * Partendo dal valore di throttle e seguendo le matrici di controllo dei droni andiamo
     * a sommare e sottrarre le variabili date tramite il PID per il controllo delle velocità.
     */

    Speeds[0] = sqrt(Speeds_quad[0]);
 8101468:	4b31      	ldr	r3, [pc, #196]	@ (8101530 <SpeedCompute+0x2b8>)
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	4618      	mov	r0, r3
 810146e:	f7ff f8f3 	bl	8100658 <__aeabi_f2d>
 8101472:	4602      	mov	r2, r0
 8101474:	460b      	mov	r3, r1
 8101476:	ec43 2b10 	vmov	d0, r2, r3
 810147a:	f00c fdb7 	bl	810dfec <sqrt>
 810147e:	ec53 2b10 	vmov	r2, r3, d0
 8101482:	4610      	mov	r0, r2
 8101484:	4619      	mov	r1, r3
 8101486:	f7ff fc37 	bl	8100cf8 <__aeabi_d2f>
 810148a:	4603      	mov	r3, r0
 810148c:	4a29      	ldr	r2, [pc, #164]	@ (8101534 <SpeedCompute+0x2bc>)
 810148e:	6013      	str	r3, [r2, #0]
    Speeds[1] = sqrt(Speeds_quad[1]);
 8101490:	4b27      	ldr	r3, [pc, #156]	@ (8101530 <SpeedCompute+0x2b8>)
 8101492:	685b      	ldr	r3, [r3, #4]
 8101494:	4618      	mov	r0, r3
 8101496:	f7ff f8df 	bl	8100658 <__aeabi_f2d>
 810149a:	4602      	mov	r2, r0
 810149c:	460b      	mov	r3, r1
 810149e:	ec43 2b10 	vmov	d0, r2, r3
 81014a2:	f00c fda3 	bl	810dfec <sqrt>
 81014a6:	ec53 2b10 	vmov	r2, r3, d0
 81014aa:	4610      	mov	r0, r2
 81014ac:	4619      	mov	r1, r3
 81014ae:	f7ff fc23 	bl	8100cf8 <__aeabi_d2f>
 81014b2:	4603      	mov	r3, r0
 81014b4:	4a1f      	ldr	r2, [pc, #124]	@ (8101534 <SpeedCompute+0x2bc>)
 81014b6:	6053      	str	r3, [r2, #4]
    Speeds[2] = sqrt(Speeds_quad[2]);
 81014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8101530 <SpeedCompute+0x2b8>)
 81014ba:	689b      	ldr	r3, [r3, #8]
 81014bc:	4618      	mov	r0, r3
 81014be:	f7ff f8cb 	bl	8100658 <__aeabi_f2d>
 81014c2:	4602      	mov	r2, r0
 81014c4:	460b      	mov	r3, r1
 81014c6:	ec43 2b10 	vmov	d0, r2, r3
 81014ca:	f00c fd8f 	bl	810dfec <sqrt>
 81014ce:	ec53 2b10 	vmov	r2, r3, d0
 81014d2:	4610      	mov	r0, r2
 81014d4:	4619      	mov	r1, r3
 81014d6:	f7ff fc0f 	bl	8100cf8 <__aeabi_d2f>
 81014da:	4603      	mov	r3, r0
 81014dc:	4a15      	ldr	r2, [pc, #84]	@ (8101534 <SpeedCompute+0x2bc>)
 81014de:	6093      	str	r3, [r2, #8]
    Speeds[3] = sqrt(Speeds_quad[3]);
 81014e0:	4b13      	ldr	r3, [pc, #76]	@ (8101530 <SpeedCompute+0x2b8>)
 81014e2:	68db      	ldr	r3, [r3, #12]
 81014e4:	4618      	mov	r0, r3
 81014e6:	f7ff f8b7 	bl	8100658 <__aeabi_f2d>
 81014ea:	4602      	mov	r2, r0
 81014ec:	460b      	mov	r3, r1
 81014ee:	ec43 2b10 	vmov	d0, r2, r3
 81014f2:	f00c fd7b 	bl	810dfec <sqrt>
 81014f6:	ec53 2b10 	vmov	r2, r3, d0
 81014fa:	4610      	mov	r0, r2
 81014fc:	4619      	mov	r1, r3
 81014fe:	f7ff fbfb 	bl	8100cf8 <__aeabi_d2f>
 8101502:	4603      	mov	r3, r0
 8101504:	4a0b      	ldr	r2, [pc, #44]	@ (8101534 <SpeedCompute+0x2bc>)
 8101506:	60d3      	str	r3, [r2, #12]

    // Una volta calcolata la velocità dei motori al quadrato, viene eseguita la radice

    return Speeds;
 8101508:	4b0a      	ldr	r3, [pc, #40]	@ (8101534 <SpeedCompute+0x2bc>)
}
 810150a:	4618      	mov	r0, r3
 810150c:	3708      	adds	r7, #8
 810150e:	46bd      	mov	sp, r7
 8101510:	bdb0      	pop	{r4, r5, r7, pc}
 8101512:	bf00      	nop
 8101514:	f3af 8000 	nop.w
 8101518:	5d54bf10 	.word	0x5d54bf10
 810151c:	40d4fe08 	.word	0x40d4fe08
 8101520:	4dc69f38 	.word	0x4dc69f38
 8101524:	41017e5c 	.word	0x41017e5c
 8101528:	ffffffff 	.word	0xffffffff
 810152c:	40a869ff 	.word	0x40a869ff
 8101530:	10000214 	.word	0x10000214
 8101534:	10000224 	.word	0x10000224

08101538 <map>:


float map(float val){
 8101538:	b580      	push	{r7, lr}
 810153a:	b084      	sub	sp, #16
 810153c:	af00      	add	r7, sp, #0
 810153e:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty = (((MAX_DUTY-MIN_DUTY)*val) + ((MIN_DUTY * MAX_SPEED)-(MAX_DUTY*MIN_SPEED)))/(MAX_SPEED-MIN_SPEED);
 8101542:	6878      	ldr	r0, [r7, #4]
 8101544:	f7ff f888 	bl	8100658 <__aeabi_f2d>
 8101548:	a321      	add	r3, pc, #132	@ (adr r3, 81015d0 <map+0x98>)
 810154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810154e:	f7ff f8db 	bl	8100708 <__aeabi_dmul>
 8101552:	4602      	mov	r2, r0
 8101554:	460b      	mov	r3, r1
 8101556:	4610      	mov	r0, r2
 8101558:	4619      	mov	r1, r3
 810155a:	a31f      	add	r3, pc, #124	@ (adr r3, 81015d8 <map+0xa0>)
 810155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101560:	f7fe ff1c 	bl	810039c <__adddf3>
 8101564:	4602      	mov	r2, r0
 8101566:	460b      	mov	r3, r1
 8101568:	4610      	mov	r0, r2
 810156a:	4619      	mov	r1, r3
 810156c:	a31c      	add	r3, pc, #112	@ (adr r3, 81015e0 <map+0xa8>)
 810156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101572:	f7ff f9f3 	bl	810095c <__aeabi_ddiv>
 8101576:	4602      	mov	r2, r0
 8101578:	460b      	mov	r3, r1
 810157a:	4610      	mov	r0, r2
 810157c:	4619      	mov	r1, r3
 810157e:	f7ff fbbb 	bl	8100cf8 <__aeabi_d2f>
 8101582:	4603      	mov	r3, r0
 8101584:	60fb      	str	r3, [r7, #12]

	if (duty<MIN_DUTY) duty=MIN_DUTY;
 8101586:	68f8      	ldr	r0, [r7, #12]
 8101588:	f7ff f866 	bl	8100658 <__aeabi_f2d>
 810158c:	a316      	add	r3, pc, #88	@ (adr r3, 81015e8 <map+0xb0>)
 810158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101592:	f7ff fb2b 	bl	8100bec <__aeabi_dcmplt>
 8101596:	4603      	mov	r3, r0
 8101598:	2b00      	cmp	r3, #0
 810159a:	d002      	beq.n	81015a2 <map+0x6a>
 810159c:	4b0a      	ldr	r3, [pc, #40]	@ (81015c8 <map+0x90>)
 810159e:	60fb      	str	r3, [r7, #12]
 81015a0:	e00a      	b.n	81015b8 <map+0x80>
	else if (duty>MAX_DUTY) duty = MAX_DUTY;
 81015a2:	edd7 7a03 	vldr	s15, [r7, #12]
 81015a6:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 81015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 81015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81015b2:	dd01      	ble.n	81015b8 <map+0x80>
 81015b4:	4b05      	ldr	r3, [pc, #20]	@ (81015cc <map+0x94>)
 81015b6:	60fb      	str	r3, [r7, #12]
	return duty;
 81015b8:	68fb      	ldr	r3, [r7, #12]
 81015ba:	ee07 3a90 	vmov	s15, r3
}
 81015be:	eeb0 0a67 	vmov.f32	s0, s15
 81015c2:	3710      	adds	r7, #16
 81015c4:	46bd      	mov	sp, r7
 81015c6:	bd80      	pop	{r7, pc}
 81015c8:	40accccd 	.word	0x40accccd
 81015cc:	40d00000 	.word	0x40d00000
 81015d0:	99999998 	.word	0x99999998
 81015d4:	3ff19999 	.word	0x3ff19999
 81015d8:	00000000 	.word	0x00000000
 81015dc:	409e5400 	.word	0x409e5400
 81015e0:	00000000 	.word	0x00000000
 81015e4:	407b2000 	.word	0x407b2000
 81015e8:	9999999a 	.word	0x9999999a
 81015ec:	40159999 	.word	0x40159999

081015f0 <init_PID>:
#include <PID.h>

void init_PID(PID* p, float Kp, float Ki, float Kd, float dt, float u_max, float u_min){
 81015f0:	b480      	push	{r7}
 81015f2:	b089      	sub	sp, #36	@ 0x24
 81015f4:	af00      	add	r7, sp, #0
 81015f6:	61f8      	str	r0, [r7, #28]
 81015f8:	ed87 0a06 	vstr	s0, [r7, #24]
 81015fc:	edc7 0a05 	vstr	s1, [r7, #20]
 8101600:	ed87 1a04 	vstr	s2, [r7, #16]
 8101604:	edc7 1a03 	vstr	s3, [r7, #12]
 8101608:	ed87 2a02 	vstr	s4, [r7, #8]
 810160c:	edc7 2a01 	vstr	s5, [r7, #4]
	p->Kp=Kp;
 8101610:	69fb      	ldr	r3, [r7, #28]
 8101612:	69ba      	ldr	r2, [r7, #24]
 8101614:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 8101616:	69fb      	ldr	r3, [r7, #28]
 8101618:	697a      	ldr	r2, [r7, #20]
 810161a:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 810161c:	69fb      	ldr	r3, [r7, #28]
 810161e:	693a      	ldr	r2, [r7, #16]
 8101620:	609a      	str	r2, [r3, #8]
	p->dt = dt;
 8101622:	69fb      	ldr	r3, [r7, #28]
 8101624:	68fa      	ldr	r2, [r7, #12]
 8101626:	60da      	str	r2, [r3, #12]
	p->Iterm = 0;
 8101628:	69fb      	ldr	r3, [r7, #28]
 810162a:	f04f 0200 	mov.w	r2, #0
 810162e:	611a      	str	r2, [r3, #16]
	p->lastError = 0;
 8101630:	69fb      	ldr	r3, [r7, #28]
 8101632:	f04f 0200 	mov.w	r2, #0
 8101636:	615a      	str	r2, [r3, #20]
	p->u_max=u_max;
 8101638:	69fb      	ldr	r3, [r7, #28]
 810163a:	68ba      	ldr	r2, [r7, #8]
 810163c:	619a      	str	r2, [r3, #24]
	p->u_min=u_min;
 810163e:	69fb      	ldr	r3, [r7, #28]
 8101640:	687a      	ldr	r2, [r7, #4]
 8101642:	61da      	str	r2, [r3, #28]
}
 8101644:	bf00      	nop
 8101646:	3724      	adds	r7, #36	@ 0x24
 8101648:	46bd      	mov	sp, r7
 810164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810164e:	4770      	bx	lr

08101650 <PID_controller>:

float PID_controller(PID* p, float input, float setPoint){
 8101650:	b480      	push	{r7}
 8101652:	b08b      	sub	sp, #44	@ 0x2c
 8101654:	af00      	add	r7, sp, #0
 8101656:	60f8      	str	r0, [r7, #12]
 8101658:	ed87 0a02 	vstr	s0, [r7, #8]
 810165c:	edc7 0a01 	vstr	s1, [r7, #4]
    float u;
    float newIterm;

    float e = setPoint - input;
 8101660:	ed97 7a01 	vldr	s14, [r7, #4]
 8101664:	edd7 7a02 	vldr	s15, [r7, #8]
 8101668:	ee77 7a67 	vsub.f32	s15, s14, s15
 810166c:	edc7 7a08 	vstr	s15, [r7, #32]

    float Pterm = p->Kp * e;
 8101670:	68fb      	ldr	r3, [r7, #12]
 8101672:	edd3 7a00 	vldr	s15, [r3]
 8101676:	ed97 7a08 	vldr	s14, [r7, #32]
 810167a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810167e:	edc7 7a07 	vstr	s15, [r7, #28]
    newIterm = p->Iterm + (p->Ki)*p->dt * p->lastError;
 8101682:	68fb      	ldr	r3, [r7, #12]
 8101684:	ed93 7a04 	vldr	s14, [r3, #16]
 8101688:	68fb      	ldr	r3, [r7, #12]
 810168a:	edd3 6a01 	vldr	s13, [r3, #4]
 810168e:	68fb      	ldr	r3, [r7, #12]
 8101690:	edd3 7a03 	vldr	s15, [r3, #12]
 8101694:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8101698:	68fb      	ldr	r3, [r7, #12]
 810169a:	edd3 7a05 	vldr	s15, [r3, #20]
 810169e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81016a6:	edc7 7a06 	vstr	s15, [r7, #24]
    float Dterm = (p->Kd/p->dt) * (e - p->lastError);
 81016aa:	68fb      	ldr	r3, [r7, #12]
 81016ac:	edd3 6a02 	vldr	s13, [r3, #8]
 81016b0:	68fb      	ldr	r3, [r7, #12]
 81016b2:	edd3 7a03 	vldr	s15, [r3, #12]
 81016b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016ba:	68fb      	ldr	r3, [r7, #12]
 81016bc:	edd3 7a05 	vldr	s15, [r3, #20]
 81016c0:	edd7 6a08 	vldr	s13, [r7, #32]
 81016c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81016c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81016cc:	edc7 7a05 	vstr	s15, [r7, #20]

    p->lastError = e;
 81016d0:	68fb      	ldr	r3, [r7, #12]
 81016d2:	6a3a      	ldr	r2, [r7, #32]
 81016d4:	615a      	str	r2, [r3, #20]

    u = Pterm + newIterm + Dterm;
 81016d6:	ed97 7a07 	vldr	s14, [r7, #28]
 81016da:	edd7 7a06 	vldr	s15, [r7, #24]
 81016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 81016e2:	ed97 7a05 	vldr	s14, [r7, #20]
 81016e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 81016ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(u > p->u_max){
 81016ee:	68fb      	ldr	r3, [r7, #12]
 81016f0:	edd3 7a06 	vldr	s15, [r3, #24]
 81016f4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 81016f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101700:	dd03      	ble.n	810170a <PID_controller+0xba>
        u = p->u_max; // upper limit saturation
 8101702:	68fb      	ldr	r3, [r7, #12]
 8101704:	699b      	ldr	r3, [r3, #24]
 8101706:	627b      	str	r3, [r7, #36]	@ 0x24
 8101708:	e010      	b.n	810172c <PID_controller+0xdc>
    } else if (u < p->u_min){
 810170a:	68fb      	ldr	r3, [r7, #12]
 810170c:	edd3 7a07 	vldr	s15, [r3, #28]
 8101710:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8101714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810171c:	d503      	bpl.n	8101726 <PID_controller+0xd6>
        u = p->u_min; // lower limit saturation
 810171e:	68fb      	ldr	r3, [r7, #12]
 8101720:	69db      	ldr	r3, [r3, #28]
 8101722:	627b      	str	r3, [r7, #36]	@ 0x24
 8101724:	e002      	b.n	810172c <PID_controller+0xdc>
    } else {
        p->Iterm= newIterm; // clamping anti-windup
 8101726:	68fb      	ldr	r3, [r7, #12]
 8101728:	69ba      	ldr	r2, [r7, #24]
 810172a:	611a      	str	r2, [r3, #16]
    }

    return u;
 810172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810172e:	ee07 3a90 	vmov	s15, r3
}
 8101732:	eeb0 0a67 	vmov.f32	s0, s15
 8101736:	372c      	adds	r7, #44	@ 0x2c
 8101738:	46bd      	mov	sp, r7
 810173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810173e:	4770      	bx	lr

08101740 <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101740:	b580      	push	{r7, lr}
 8101742:	b082      	sub	sp, #8
 8101744:	af00      	add	r7, sp, #0
 8101746:	4603      	mov	r3, r0
 8101748:	71fb      	strb	r3, [r7, #7]
 810174a:	79fb      	ldrb	r3, [r7, #7]
 810174c:	4619      	mov	r1, r3
 810174e:	2007      	movs	r0, #7
 8101750:	f000 fa02 	bl	8101b58 <bno055_writeData>
 8101754:	bf00      	nop
 8101756:	3708      	adds	r7, #8
 8101758:	46bd      	mov	sp, r7
 810175a:	bd80      	pop	{r7, pc}

0810175c <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 810175c:	b580      	push	{r7, lr}
 810175e:	b082      	sub	sp, #8
 8101760:	af00      	add	r7, sp, #0
 8101762:	4603      	mov	r3, r0
 8101764:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8101766:	79fb      	ldrb	r3, [r7, #7]
 8101768:	4619      	mov	r1, r3
 810176a:	203d      	movs	r0, #61	@ 0x3d
 810176c:	f000 f9f4 	bl	8101b58 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101770:	79fb      	ldrb	r3, [r7, #7]
 8101772:	2b00      	cmp	r3, #0
 8101774:	d103      	bne.n	810177e <bno055_setOperationMode+0x22>
    bno055_delay(100);
 8101776:	2064      	movs	r0, #100	@ 0x64
 8101778:	f000 f9e2 	bl	8101b40 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 810177c:	e002      	b.n	8101784 <bno055_setOperationMode+0x28>
    bno055_delay(80);
 810177e:	2050      	movs	r0, #80	@ 0x50
 8101780:	f000 f9de 	bl	8101b40 <bno055_delay>
}
 8101784:	bf00      	nop
 8101786:	3708      	adds	r7, #8
 8101788:	46bd      	mov	sp, r7
 810178a:	bd80      	pop	{r7, pc}

0810178c <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 810178c:	b580      	push	{r7, lr}
 810178e:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101790:	2000      	movs	r0, #0
 8101792:	f7ff ffe3 	bl	810175c <bno055_setOperationMode>
}
 8101796:	bf00      	nop
 8101798:	bd80      	pop	{r7, pc}

0810179a <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 810179a:	b580      	push	{r7, lr}
 810179c:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 810179e:	200c      	movs	r0, #12
 81017a0:	f7ff ffdc 	bl	810175c <bno055_setOperationMode>
}
 81017a4:	bf00      	nop
 81017a6:	bd80      	pop	{r7, pc}

081017a8 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 81017a8:	b580      	push	{r7, lr}
 81017aa:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 81017ac:	2120      	movs	r1, #32
 81017ae:	203f      	movs	r0, #63	@ 0x3f
 81017b0:	f000 f9d2 	bl	8101b58 <bno055_writeData>
  bno055_delay(700);
 81017b4:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 81017b8:	f000 f9c2 	bl	8101b40 <bno055_delay>
}
 81017bc:	bf00      	nop
 81017be:	bd80      	pop	{r7, pc}

081017c0 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 81017c0:	b580      	push	{r7, lr}
 81017c2:	b082      	sub	sp, #8
 81017c4:	af00      	add	r7, sp, #0
  bno055_reset();
 81017c6:	f7ff ffef 	bl	81017a8 <bno055_reset>

  uint8_t id = 0;
 81017ca:	2300      	movs	r3, #0
 81017cc:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81017ce:	1dfb      	adds	r3, r7, #7
 81017d0:	2201      	movs	r2, #1
 81017d2:	4619      	mov	r1, r3
 81017d4:	2000      	movs	r0, #0
 81017d6:	f000 fa99 	bl	8101d0c <bno055_readData>
  if (id != BNO055_ID) {
 81017da:	79fb      	ldrb	r3, [r7, #7]
 81017dc:	2ba0      	cmp	r3, #160	@ 0xa0
 81017de:	d004      	beq.n	81017ea <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81017e0:	79fb      	ldrb	r3, [r7, #7]
 81017e2:	4619      	mov	r1, r3
 81017e4:	4809      	ldr	r0, [pc, #36]	@ (810180c <bno055_setup+0x4c>)
 81017e6:	f008 ff57 	bl	810a698 <iprintf>
  }
  bno055_setPage(0);
 81017ea:	2000      	movs	r0, #0
 81017ec:	f7ff ffa8 	bl	8101740 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81017f0:	2100      	movs	r1, #0
 81017f2:	203f      	movs	r0, #63	@ 0x3f
 81017f4:	f000 f9b0 	bl	8101b58 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81017f8:	f7ff ffc8 	bl	810178c <bno055_setOperationModeConfig>
  bno055_delay(10);
 81017fc:	200a      	movs	r0, #10
 81017fe:	f000 f99f 	bl	8101b40 <bno055_delay>
}
 8101802:	bf00      	nop
 8101804:	3708      	adds	r7, #8
 8101806:	46bd      	mov	sp, r7
 8101808:	bd80      	pop	{r7, pc}
 810180a:	bf00      	nop
 810180c:	0810e210 	.word	0x0810e210

08101810 <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 8101810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101814:	b09e      	sub	sp, #120	@ 0x78
 8101816:	af00      	add	r7, sp, #0
 8101818:	4603      	mov	r3, r0
 810181a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 810181e:	2000      	movs	r0, #0
 8101820:	f7ff ff8e 	bl	8101740 <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 8101824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101828:	2b20      	cmp	r3, #32
 810182a:	d108      	bne.n	810183e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 810182c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101834:	2208      	movs	r2, #8
 8101836:	4618      	mov	r0, r3
 8101838:	f000 fa68 	bl	8101d0c <bno055_readData>
 810183c:	e007      	b.n	810184e <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 810183e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101846:	2206      	movs	r2, #6
 8101848:	4618      	mov	r0, r3
 810184a:	f000 fa5f 	bl	8101d0c <bno055_readData>

  double scale = 1;
 810184e:	f04f 0200 	mov.w	r2, #0
 8101852:	4b8b      	ldr	r3, [pc, #556]	@ (8101a80 <bno055_getVector+0x270>)
 8101854:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810185c:	2b0e      	cmp	r3, #14
 810185e:	d109      	bne.n	8101874 <bno055_getVector+0x64>
    scale = magScale;
 8101860:	4b88      	ldr	r3, [pc, #544]	@ (8101a84 <bno055_getVector+0x274>)
 8101862:	881b      	ldrh	r3, [r3, #0]
 8101864:	4618      	mov	r0, r3
 8101866:	f7fe fed5 	bl	8100614 <__aeabi_ui2d>
 810186a:	4602      	mov	r2, r0
 810186c:	460b      	mov	r3, r1
 810186e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101872:	e03e      	b.n	81018f2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8101874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101878:	2b08      	cmp	r3, #8
 810187a:	d007      	beq.n	810188c <bno055_getVector+0x7c>
 810187c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101880:	2b28      	cmp	r3, #40	@ 0x28
 8101882:	d003      	beq.n	810188c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8101884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101888:	2b2e      	cmp	r3, #46	@ 0x2e
 810188a:	d109      	bne.n	81018a0 <bno055_getVector+0x90>
    scale = accelScale;
 810188c:	4b7e      	ldr	r3, [pc, #504]	@ (8101a88 <bno055_getVector+0x278>)
 810188e:	881b      	ldrh	r3, [r3, #0]
 8101890:	4618      	mov	r0, r3
 8101892:	f7fe febf 	bl	8100614 <__aeabi_ui2d>
 8101896:	4602      	mov	r2, r0
 8101898:	460b      	mov	r3, r1
 810189a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810189e:	e028      	b.n	81018f2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 81018a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81018a4:	2b14      	cmp	r3, #20
 81018a6:	d109      	bne.n	81018bc <bno055_getVector+0xac>
    scale = angularRateScale;
 81018a8:	4b78      	ldr	r3, [pc, #480]	@ (8101a8c <bno055_getVector+0x27c>)
 81018aa:	881b      	ldrh	r3, [r3, #0]
 81018ac:	4618      	mov	r0, r3
 81018ae:	f7fe feb1 	bl	8100614 <__aeabi_ui2d>
 81018b2:	4602      	mov	r2, r0
 81018b4:	460b      	mov	r3, r1
 81018b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81018ba:	e01a      	b.n	81018f2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 81018bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81018c0:	2b1a      	cmp	r3, #26
 81018c2:	d109      	bne.n	81018d8 <bno055_getVector+0xc8>
    scale = eulerScale;
 81018c4:	4b72      	ldr	r3, [pc, #456]	@ (8101a90 <bno055_getVector+0x280>)
 81018c6:	881b      	ldrh	r3, [r3, #0]
 81018c8:	4618      	mov	r0, r3
 81018ca:	f7fe fea3 	bl	8100614 <__aeabi_ui2d>
 81018ce:	4602      	mov	r2, r0
 81018d0:	460b      	mov	r3, r1
 81018d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81018d6:	e00c      	b.n	81018f2 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81018d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81018dc:	2b20      	cmp	r3, #32
 81018de:	d108      	bne.n	81018f2 <bno055_getVector+0xe2>
    scale = quaScale;
 81018e0:	4b6c      	ldr	r3, [pc, #432]	@ (8101a94 <bno055_getVector+0x284>)
 81018e2:	881b      	ldrh	r3, [r3, #0]
 81018e4:	4618      	mov	r0, r3
 81018e6:	f7fe fe95 	bl	8100614 <__aeabi_ui2d>
 81018ea:	4602      	mov	r2, r0
 81018ec:	460b      	mov	r3, r1
 81018ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81018f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81018f6:	2220      	movs	r2, #32
 81018f8:	2100      	movs	r1, #0
 81018fa:	4618      	mov	r0, r3
 81018fc:	f009 f834 	bl	810a968 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8101900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101904:	2b20      	cmp	r3, #32
 8101906:	d150      	bne.n	81019aa <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101908:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 810190c:	021b      	lsls	r3, r3, #8
 810190e:	b21a      	sxth	r2, r3
 8101910:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101914:	b21b      	sxth	r3, r3
 8101916:	4313      	orrs	r3, r2
 8101918:	b21b      	sxth	r3, r3
 810191a:	4618      	mov	r0, r3
 810191c:	f7fe fe8a 	bl	8100634 <__aeabi_i2d>
 8101920:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101924:	f7ff f81a 	bl	810095c <__aeabi_ddiv>
 8101928:	4602      	mov	r2, r0
 810192a:	460b      	mov	r3, r1
 810192c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101930:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101934:	021b      	lsls	r3, r3, #8
 8101936:	b21a      	sxth	r2, r3
 8101938:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 810193c:	b21b      	sxth	r3, r3
 810193e:	4313      	orrs	r3, r2
 8101940:	b21b      	sxth	r3, r3
 8101942:	4618      	mov	r0, r3
 8101944:	f7fe fe76 	bl	8100634 <__aeabi_i2d>
 8101948:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810194c:	f7ff f806 	bl	810095c <__aeabi_ddiv>
 8101950:	4602      	mov	r2, r0
 8101952:	460b      	mov	r3, r1
 8101954:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101958:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 810195c:	021b      	lsls	r3, r3, #8
 810195e:	b21a      	sxth	r2, r3
 8101960:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101964:	b21b      	sxth	r3, r3
 8101966:	4313      	orrs	r3, r2
 8101968:	b21b      	sxth	r3, r3
 810196a:	4618      	mov	r0, r3
 810196c:	f7fe fe62 	bl	8100634 <__aeabi_i2d>
 8101970:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101974:	f7fe fff2 	bl	810095c <__aeabi_ddiv>
 8101978:	4602      	mov	r2, r0
 810197a:	460b      	mov	r3, r1
 810197c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101980:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8101984:	021b      	lsls	r3, r3, #8
 8101986:	b21a      	sxth	r2, r3
 8101988:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 810198c:	b21b      	sxth	r3, r3
 810198e:	4313      	orrs	r3, r2
 8101990:	b21b      	sxth	r3, r3
 8101992:	4618      	mov	r0, r3
 8101994:	f7fe fe4e 	bl	8100634 <__aeabi_i2d>
 8101998:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 810199c:	f7fe ffde 	bl	810095c <__aeabi_ddiv>
 81019a0:	4602      	mov	r2, r0
 81019a2:	460b      	mov	r3, r1
 81019a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 81019a8:	e03b      	b.n	8101a22 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81019aa:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 81019ae:	021b      	lsls	r3, r3, #8
 81019b0:	b21a      	sxth	r2, r3
 81019b2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81019b6:	b21b      	sxth	r3, r3
 81019b8:	4313      	orrs	r3, r2
 81019ba:	b21b      	sxth	r3, r3
 81019bc:	4618      	mov	r0, r3
 81019be:	f7fe fe39 	bl	8100634 <__aeabi_i2d>
 81019c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81019c6:	f7fe ffc9 	bl	810095c <__aeabi_ddiv>
 81019ca:	4602      	mov	r2, r0
 81019cc:	460b      	mov	r3, r1
 81019ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 81019d2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 81019d6:	021b      	lsls	r3, r3, #8
 81019d8:	b21a      	sxth	r2, r3
 81019da:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 81019de:	b21b      	sxth	r3, r3
 81019e0:	4313      	orrs	r3, r2
 81019e2:	b21b      	sxth	r3, r3
 81019e4:	4618      	mov	r0, r3
 81019e6:	f7fe fe25 	bl	8100634 <__aeabi_i2d>
 81019ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81019ee:	f7fe ffb5 	bl	810095c <__aeabi_ddiv>
 81019f2:	4602      	mov	r2, r0
 81019f4:	460b      	mov	r3, r1
 81019f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 81019fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 81019fe:	021b      	lsls	r3, r3, #8
 8101a00:	b21a      	sxth	r2, r3
 8101a02:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101a06:	b21b      	sxth	r3, r3
 8101a08:	4313      	orrs	r3, r2
 8101a0a:	b21b      	sxth	r3, r3
 8101a0c:	4618      	mov	r0, r3
 8101a0e:	f7fe fe11 	bl	8100634 <__aeabi_i2d>
 8101a12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a16:	f7fe ffa1 	bl	810095c <__aeabi_ddiv>
 8101a1a:	4602      	mov	r2, r0
 8101a1c:	460b      	mov	r3, r1
 8101a1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8101a22:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101a26:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101a2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101a36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101a3a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8101a3e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8101a42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8101a46:	ec49 8b14 	vmov	d4, r8, r9
 8101a4a:	ec45 4b15 	vmov	d5, r4, r5
 8101a4e:	ec41 0b16 	vmov	d6, r0, r1
 8101a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8101a56:	eeb0 0a44 	vmov.f32	s0, s8
 8101a5a:	eef0 0a64 	vmov.f32	s1, s9
 8101a5e:	eeb0 1a45 	vmov.f32	s2, s10
 8101a62:	eef0 1a65 	vmov.f32	s3, s11
 8101a66:	eeb0 2a46 	vmov.f32	s4, s12
 8101a6a:	eef0 2a66 	vmov.f32	s5, s13
 8101a6e:	eeb0 3a47 	vmov.f32	s6, s14
 8101a72:	eef0 3a67 	vmov.f32	s7, s15
 8101a76:	3778      	adds	r7, #120	@ 0x78
 8101a78:	46bd      	mov	sp, r7
 8101a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101a7e:	bf00      	nop
 8101a80:	3ff00000 	.word	0x3ff00000
 8101a84:	1000000e 	.word	0x1000000e
 8101a88:	10000008 	.word	0x10000008
 8101a8c:	1000000a 	.word	0x1000000a
 8101a90:	1000000c 	.word	0x1000000c
 8101a94:	10000010 	.word	0x10000010

08101a98 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 8101a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101a9c:	b090      	sub	sp, #64	@ 0x40
 8101a9e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101aa0:	201a      	movs	r0, #26
 8101aa2:	f7ff feb5 	bl	8101810 <bno055_getVector>
 8101aa6:	eeb0 4a40 	vmov.f32	s8, s0
 8101aaa:	eef0 4a60 	vmov.f32	s9, s1
 8101aae:	eeb0 5a41 	vmov.f32	s10, s2
 8101ab2:	eef0 5a61 	vmov.f32	s11, s3
 8101ab6:	eeb0 6a42 	vmov.f32	s12, s4
 8101aba:	eef0 6a62 	vmov.f32	s13, s5
 8101abe:	eeb0 7a43 	vmov.f32	s14, s6
 8101ac2:	eef0 7a63 	vmov.f32	s15, s7
 8101ac6:	ed87 4b08 	vstr	d4, [r7, #32]
 8101aca:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8101ace:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8101ad2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101ad6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101ada:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8101ade:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101ae2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101ae6:	ec49 8b14 	vmov	d4, r8, r9
 8101aea:	ec45 4b15 	vmov	d5, r4, r5
 8101aee:	ec41 0b16 	vmov	d6, r0, r1
 8101af2:	ec43 2b17 	vmov	d7, r2, r3
}
 8101af6:	eeb0 0a44 	vmov.f32	s0, s8
 8101afa:	eef0 0a64 	vmov.f32	s1, s9
 8101afe:	eeb0 1a45 	vmov.f32	s2, s10
 8101b02:	eef0 1a65 	vmov.f32	s3, s11
 8101b06:	eeb0 2a46 	vmov.f32	s4, s12
 8101b0a:	eef0 2a66 	vmov.f32	s5, s13
 8101b0e:	eeb0 3a47 	vmov.f32	s6, s14
 8101b12:	eef0 3a67 	vmov.f32	s7, s15
 8101b16:	3740      	adds	r7, #64	@ 0x40
 8101b18:	46bd      	mov	sp, r7
 8101b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101b20 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101b20:	b480      	push	{r7}
 8101b22:	b083      	sub	sp, #12
 8101b24:	af00      	add	r7, sp, #0
 8101b26:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101b28:	4a04      	ldr	r2, [pc, #16]	@ (8101b3c <bno055_assignI2C+0x1c>)
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	6013      	str	r3, [r2, #0]
}
 8101b2e:	bf00      	nop
 8101b30:	370c      	adds	r7, #12
 8101b32:	46bd      	mov	sp, r7
 8101b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b38:	4770      	bx	lr
 8101b3a:	bf00      	nop
 8101b3c:	10000234 	.word	0x10000234

08101b40 <bno055_delay>:

void bno055_delay(int time) {
 8101b40:	b580      	push	{r7, lr}
 8101b42:	b082      	sub	sp, #8
 8101b44:	af00      	add	r7, sp, #0
 8101b46:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101b48:	687b      	ldr	r3, [r7, #4]
 8101b4a:	4618      	mov	r0, r3
 8101b4c:	f001 fb2e 	bl	81031ac <HAL_Delay>
#endif
}
 8101b50:	bf00      	nop
 8101b52:	3708      	adds	r7, #8
 8101b54:	46bd      	mov	sp, r7
 8101b56:	bd80      	pop	{r7, pc}

08101b58 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101b58:	b580      	push	{r7, lr}
 8101b5a:	b088      	sub	sp, #32
 8101b5c:	af02      	add	r7, sp, #8
 8101b5e:	4603      	mov	r3, r0
 8101b60:	460a      	mov	r2, r1
 8101b62:	71fb      	strb	r3, [r7, #7]
 8101b64:	4613      	mov	r3, r2
 8101b66:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101b68:	79fb      	ldrb	r3, [r7, #7]
 8101b6a:	733b      	strb	r3, [r7, #12]
 8101b6c:	79bb      	ldrb	r3, [r7, #6]
 8101b6e:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8101b70:	4b53      	ldr	r3, [pc, #332]	@ (8101cc0 <bno055_writeData+0x168>)
 8101b72:	6818      	ldr	r0, [r3, #0]
 8101b74:	f107 020c 	add.w	r2, r7, #12
 8101b78:	230a      	movs	r3, #10
 8101b7a:	9300      	str	r3, [sp, #0]
 8101b7c:	2302      	movs	r3, #2
 8101b7e:	2150      	movs	r1, #80	@ 0x50
 8101b80:	f001 feba 	bl	81038f8 <HAL_I2C_Master_Transmit>
 8101b84:	4603      	mov	r3, r0
 8101b86:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 8101b88:	7dfb      	ldrb	r3, [r7, #23]
 8101b8a:	2b00      	cmp	r3, #0
 8101b8c:	f000 8092 	beq.w	8101cb4 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 8101b90:	7dfb      	ldrb	r3, [r7, #23]
 8101b92:	2b01      	cmp	r3, #1
 8101b94:	d103      	bne.n	8101b9e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101b96:	484b      	ldr	r0, [pc, #300]	@ (8101cc4 <bno055_writeData+0x16c>)
 8101b98:	f008 fde6 	bl	810a768 <puts>
 8101b9c:	e012      	b.n	8101bc4 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101b9e:	7dfb      	ldrb	r3, [r7, #23]
 8101ba0:	2b03      	cmp	r3, #3
 8101ba2:	d103      	bne.n	8101bac <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101ba4:	4848      	ldr	r0, [pc, #288]	@ (8101cc8 <bno055_writeData+0x170>)
 8101ba6:	f008 fddf 	bl	810a768 <puts>
 8101baa:	e00b      	b.n	8101bc4 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101bac:	7dfb      	ldrb	r3, [r7, #23]
 8101bae:	2b02      	cmp	r3, #2
 8101bb0:	d103      	bne.n	8101bba <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101bb2:	4846      	ldr	r0, [pc, #280]	@ (8101ccc <bno055_writeData+0x174>)
 8101bb4:	f008 fdd8 	bl	810a768 <puts>
 8101bb8:	e004      	b.n	8101bc4 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101bba:	7dfb      	ldrb	r3, [r7, #23]
 8101bbc:	4619      	mov	r1, r3
 8101bbe:	4844      	ldr	r0, [pc, #272]	@ (8101cd0 <bno055_writeData+0x178>)
 8101bc0:	f008 fd6a 	bl	810a698 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8101cc0 <bno055_writeData+0x168>)
 8101bc6:	681b      	ldr	r3, [r3, #0]
 8101bc8:	4618      	mov	r0, r3
 8101bca:	f002 f8b1 	bl	8103d30 <HAL_I2C_GetError>
 8101bce:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101bd0:	693b      	ldr	r3, [r7, #16]
 8101bd2:	2b00      	cmp	r3, #0
 8101bd4:	d070      	beq.n	8101cb8 <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101bd6:	693b      	ldr	r3, [r7, #16]
 8101bd8:	2b01      	cmp	r3, #1
 8101bda:	d103      	bne.n	8101be4 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101bdc:	483d      	ldr	r0, [pc, #244]	@ (8101cd4 <bno055_writeData+0x17c>)
 8101bde:	f008 fdc3 	bl	810a768 <puts>
 8101be2:	e021      	b.n	8101c28 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101be4:	693b      	ldr	r3, [r7, #16]
 8101be6:	2b02      	cmp	r3, #2
 8101be8:	d103      	bne.n	8101bf2 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101bea:	483b      	ldr	r0, [pc, #236]	@ (8101cd8 <bno055_writeData+0x180>)
 8101bec:	f008 fdbc 	bl	810a768 <puts>
 8101bf0:	e01a      	b.n	8101c28 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101bf2:	693b      	ldr	r3, [r7, #16]
 8101bf4:	2b04      	cmp	r3, #4
 8101bf6:	d103      	bne.n	8101c00 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101bf8:	4838      	ldr	r0, [pc, #224]	@ (8101cdc <bno055_writeData+0x184>)
 8101bfa:	f008 fdb5 	bl	810a768 <puts>
 8101bfe:	e013      	b.n	8101c28 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101c00:	693b      	ldr	r3, [r7, #16]
 8101c02:	2b08      	cmp	r3, #8
 8101c04:	d103      	bne.n	8101c0e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101c06:	4836      	ldr	r0, [pc, #216]	@ (8101ce0 <bno055_writeData+0x188>)
 8101c08:	f008 fdae 	bl	810a768 <puts>
 8101c0c:	e00c      	b.n	8101c28 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101c0e:	693b      	ldr	r3, [r7, #16]
 8101c10:	2b10      	cmp	r3, #16
 8101c12:	d103      	bne.n	8101c1c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101c14:	4833      	ldr	r0, [pc, #204]	@ (8101ce4 <bno055_writeData+0x18c>)
 8101c16:	f008 fda7 	bl	810a768 <puts>
 8101c1a:	e005      	b.n	8101c28 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101c1c:	693b      	ldr	r3, [r7, #16]
 8101c1e:	2b20      	cmp	r3, #32
 8101c20:	d102      	bne.n	8101c28 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101c22:	4831      	ldr	r0, [pc, #196]	@ (8101ce8 <bno055_writeData+0x190>)
 8101c24:	f008 fda0 	bl	810a768 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101c28:	4b25      	ldr	r3, [pc, #148]	@ (8101cc0 <bno055_writeData+0x168>)
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	4618      	mov	r0, r3
 8101c2e:	f002 f871 	bl	8103d14 <HAL_I2C_GetState>
 8101c32:	4603      	mov	r3, r0
 8101c34:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101c36:	7bfb      	ldrb	r3, [r7, #15]
 8101c38:	2b00      	cmp	r3, #0
 8101c3a:	d103      	bne.n	8101c44 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101c3c:	482b      	ldr	r0, [pc, #172]	@ (8101cec <bno055_writeData+0x194>)
 8101c3e:	f008 fd93 	bl	810a768 <puts>
 8101c42:	e03a      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 8101c44:	7bfb      	ldrb	r3, [r7, #15]
 8101c46:	2b20      	cmp	r3, #32
 8101c48:	d103      	bne.n	8101c52 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101c4a:	4828      	ldr	r0, [pc, #160]	@ (8101cec <bno055_writeData+0x194>)
 8101c4c:	f008 fd8c 	bl	810a768 <puts>
 8101c50:	e033      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101c52:	7bfb      	ldrb	r3, [r7, #15]
 8101c54:	2b24      	cmp	r3, #36	@ 0x24
 8101c56:	d103      	bne.n	8101c60 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101c58:	4825      	ldr	r0, [pc, #148]	@ (8101cf0 <bno055_writeData+0x198>)
 8101c5a:	f008 fd85 	bl	810a768 <puts>
 8101c5e:	e02c      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101c60:	7bfb      	ldrb	r3, [r7, #15]
 8101c62:	2b21      	cmp	r3, #33	@ 0x21
 8101c64:	d103      	bne.n	8101c6e <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101c66:	4823      	ldr	r0, [pc, #140]	@ (8101cf4 <bno055_writeData+0x19c>)
 8101c68:	f008 fd7e 	bl	810a768 <puts>
 8101c6c:	e025      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101c6e:	7bfb      	ldrb	r3, [r7, #15]
 8101c70:	2b22      	cmp	r3, #34	@ 0x22
 8101c72:	d103      	bne.n	8101c7c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101c74:	4820      	ldr	r0, [pc, #128]	@ (8101cf8 <bno055_writeData+0x1a0>)
 8101c76:	f008 fd77 	bl	810a768 <puts>
 8101c7a:	e01e      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101c7c:	7bfb      	ldrb	r3, [r7, #15]
 8101c7e:	2b28      	cmp	r3, #40	@ 0x28
 8101c80:	d103      	bne.n	8101c8a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101c82:	481e      	ldr	r0, [pc, #120]	@ (8101cfc <bno055_writeData+0x1a4>)
 8101c84:	f008 fd70 	bl	810a768 <puts>
 8101c88:	e017      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101c8a:	7bfb      	ldrb	r3, [r7, #15]
 8101c8c:	2b29      	cmp	r3, #41	@ 0x29
 8101c8e:	d103      	bne.n	8101c98 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101c90:	481b      	ldr	r0, [pc, #108]	@ (8101d00 <bno055_writeData+0x1a8>)
 8101c92:	f008 fd69 	bl	810a768 <puts>
 8101c96:	e010      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101c98:	7bfb      	ldrb	r3, [r7, #15]
 8101c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8101c9c:	d103      	bne.n	8101ca6 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101c9e:	4819      	ldr	r0, [pc, #100]	@ (8101d04 <bno055_writeData+0x1ac>)
 8101ca0:	f008 fd62 	bl	810a768 <puts>
 8101ca4:	e009      	b.n	8101cba <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101ca6:	7bfb      	ldrb	r3, [r7, #15]
 8101ca8:	2b60      	cmp	r3, #96	@ 0x60
 8101caa:	d106      	bne.n	8101cba <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101cac:	4816      	ldr	r0, [pc, #88]	@ (8101d08 <bno055_writeData+0x1b0>)
 8101cae:	f008 fd5b 	bl	810a768 <puts>
 8101cb2:	e002      	b.n	8101cba <bno055_writeData+0x162>
    return;
 8101cb4:	bf00      	nop
 8101cb6:	e000      	b.n	8101cba <bno055_writeData+0x162>
    return;
 8101cb8:	bf00      	nop
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
}
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101cba:	3718      	adds	r7, #24
 8101cbc:	46bd      	mov	sp, r7
 8101cbe:	bd80      	pop	{r7, pc}
 8101cc0:	10000234 	.word	0x10000234
 8101cc4:	0810e2b0 	.word	0x0810e2b0
 8101cc8:	0810e2d4 	.word	0x0810e2d4
 8101ccc:	0810e2fc 	.word	0x0810e2fc
 8101cd0:	0810e320 	.word	0x0810e320
 8101cd4:	0810e338 	.word	0x0810e338
 8101cd8:	0810e34c 	.word	0x0810e34c
 8101cdc:	0810e360 	.word	0x0810e360
 8101ce0:	0810e374 	.word	0x0810e374
 8101ce4:	0810e388 	.word	0x0810e388
 8101ce8:	0810e39c 	.word	0x0810e39c
 8101cec:	0810e3b4 	.word	0x0810e3b4
 8101cf0:	0810e3cc 	.word	0x0810e3cc
 8101cf4:	0810e3e0 	.word	0x0810e3e0
 8101cf8:	0810e3f8 	.word	0x0810e3f8
 8101cfc:	0810e410 	.word	0x0810e410
 8101d00:	0810e428 	.word	0x0810e428
 8101d04:	0810e448 	.word	0x0810e448
 8101d08:	0810e468 	.word	0x0810e468

08101d0c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101d0c:	b580      	push	{r7, lr}
 8101d0e:	b086      	sub	sp, #24
 8101d10:	af02      	add	r7, sp, #8
 8101d12:	4603      	mov	r3, r0
 8101d14:	6039      	str	r1, [r7, #0]
 8101d16:	71fb      	strb	r3, [r7, #7]
 8101d18:	4613      	mov	r3, r2
 8101d1a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8101d90 <bno055_readData+0x84>)
 8101d1e:	6818      	ldr	r0, [r3, #0]
 8101d20:	1dfa      	adds	r2, r7, #7
 8101d22:	2364      	movs	r3, #100	@ 0x64
 8101d24:	9300      	str	r3, [sp, #0]
 8101d26:	2301      	movs	r3, #1
 8101d28:	2150      	movs	r1, #80	@ 0x50
 8101d2a:	f001 fde5 	bl	81038f8 <HAL_I2C_Master_Transmit>
 8101d2e:	4603      	mov	r3, r0
 8101d30:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101d32:	4b17      	ldr	r3, [pc, #92]	@ (8101d90 <bno055_readData+0x84>)
 8101d34:	6818      	ldr	r0, [r3, #0]
 8101d36:	79bb      	ldrb	r3, [r7, #6]
 8101d38:	b29b      	uxth	r3, r3
 8101d3a:	2264      	movs	r2, #100	@ 0x64
 8101d3c:	9200      	str	r2, [sp, #0]
 8101d3e:	683a      	ldr	r2, [r7, #0]
 8101d40:	2150      	movs	r1, #80	@ 0x50
 8101d42:	f001 fef1 	bl	8103b28 <HAL_I2C_Master_Receive>
 8101d46:	4603      	mov	r3, r0
 8101d48:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 8101d4a:	7bfb      	ldrb	r3, [r7, #15]
 8101d4c:	2b00      	cmp	r3, #0
 8101d4e:	d01a      	beq.n	8101d86 <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 8101d50:	7bfb      	ldrb	r3, [r7, #15]
 8101d52:	2b01      	cmp	r3, #1
 8101d54:	d103      	bne.n	8101d5e <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101d56:	480f      	ldr	r0, [pc, #60]	@ (8101d94 <bno055_readData+0x88>)
 8101d58:	f008 fd06 	bl	810a768 <puts>
 8101d5c:	e014      	b.n	8101d88 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 8101d5e:	7bfb      	ldrb	r3, [r7, #15]
 8101d60:	2b03      	cmp	r3, #3
 8101d62:	d103      	bne.n	8101d6c <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101d64:	480c      	ldr	r0, [pc, #48]	@ (8101d98 <bno055_readData+0x8c>)
 8101d66:	f008 fcff 	bl	810a768 <puts>
 8101d6a:	e00d      	b.n	8101d88 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 8101d6c:	7bfb      	ldrb	r3, [r7, #15]
 8101d6e:	2b02      	cmp	r3, #2
 8101d70:	d103      	bne.n	8101d7a <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101d72:	480a      	ldr	r0, [pc, #40]	@ (8101d9c <bno055_readData+0x90>)
 8101d74:	f008 fcf8 	bl	810a768 <puts>
 8101d78:	e006      	b.n	8101d88 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 8101d7a:	7bfb      	ldrb	r3, [r7, #15]
 8101d7c:	4619      	mov	r1, r3
 8101d7e:	4808      	ldr	r0, [pc, #32]	@ (8101da0 <bno055_readData+0x94>)
 8101d80:	f008 fc8a 	bl	810a698 <iprintf>
 8101d84:	e000      	b.n	8101d88 <bno055_readData+0x7c>
	    return;
 8101d86:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101d88:	3710      	adds	r7, #16
 8101d8a:	46bd      	mov	sp, r7
 8101d8c:	bd80      	pop	{r7, pc}
 8101d8e:	bf00      	nop
 8101d90:	10000234 	.word	0x10000234
 8101d94:	0810e2b0 	.word	0x0810e2b0
 8101d98:	0810e2d4 	.word	0x0810e2d4
 8101d9c:	0810e2fc 	.word	0x0810e2fc
 8101da0:	0810e320 	.word	0x0810e320

08101da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101da4:	b580      	push	{r7, lr}
 8101da6:	b082      	sub	sp, #8
 8101da8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101daa:	4b63      	ldr	r3, [pc, #396]	@ (8101f38 <main+0x194>)
 8101dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101db0:	4a61      	ldr	r2, [pc, #388]	@ (8101f38 <main+0x194>)
 8101db2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101dba:	4b5f      	ldr	r3, [pc, #380]	@ (8101f38 <main+0x194>)
 8101dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101dc4:	607b      	str	r3, [r7, #4]
 8101dc6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101dc8:	2001      	movs	r0, #1
 8101dca:	f001 fce7 	bl	810379c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101dce:	f002 fb73 	bl	81044b8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101dd2:	2201      	movs	r2, #1
 8101dd4:	2102      	movs	r1, #2
 8101dd6:	2000      	movs	r0, #0
 8101dd8:	f002 faf4 	bl	81043c4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101ddc:	4b57      	ldr	r3, [pc, #348]	@ (8101f3c <main+0x198>)
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	091b      	lsrs	r3, r3, #4
 8101de2:	f003 030f 	and.w	r3, r3, #15
 8101de6:	2b07      	cmp	r3, #7
 8101de8:	d108      	bne.n	8101dfc <main+0x58>
 8101dea:	4b55      	ldr	r3, [pc, #340]	@ (8101f40 <main+0x19c>)
 8101dec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101df0:	4a53      	ldr	r2, [pc, #332]	@ (8101f40 <main+0x19c>)
 8101df2:	f043 0301 	orr.w	r3, r3, #1
 8101df6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101dfa:	e007      	b.n	8101e0c <main+0x68>
 8101dfc:	4b50      	ldr	r3, [pc, #320]	@ (8101f40 <main+0x19c>)
 8101dfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101e02:	4a4f      	ldr	r2, [pc, #316]	@ (8101f40 <main+0x19c>)
 8101e04:	f043 0301 	orr.w	r3, r3, #1
 8101e08:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e0c:	f001 f91a 	bl	8103044 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101e10:	f000 face 	bl	81023b0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8101e14:	f000 f8f6 	bl	8102004 <MX_TIM1_Init>
  MX_I2C1_Init();
 8101e18:	f000 f8b4 	bl	8101f84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8101e1c:	f000 f946 	bl	81020ac <MX_TIM3_Init>
  MX_TIM5_Init();
 8101e20:	f000 f9dc 	bl	81021dc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 8101e24:	f000 fa78 	bl	8102318 <MX_USART3_UART_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8101e28:	4846      	ldr	r0, [pc, #280]	@ (8101f44 <main+0x1a0>)
 8101e2a:	f004 fbaf 	bl	810658c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8101e2e:	2100      	movs	r1, #0
 8101e30:	4845      	ldr	r0, [pc, #276]	@ (8101f48 <main+0x1a4>)
 8101e32:	f004 fc85 	bl	8106740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8101e36:	2104      	movs	r1, #4
 8101e38:	4843      	ldr	r0, [pc, #268]	@ (8101f48 <main+0x1a4>)
 8101e3a:	f004 fc81 	bl	8106740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8101e3e:	2108      	movs	r1, #8
 8101e40:	4841      	ldr	r0, [pc, #260]	@ (8101f48 <main+0x1a4>)
 8101e42:	f004 fc7d 	bl	8106740 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8101e46:	210c      	movs	r1, #12
 8101e48:	483f      	ldr	r0, [pc, #252]	@ (8101f48 <main+0x1a4>)
 8101e4a:	f004 fc79 	bl	8106740 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8101f4c <main+0x1a8>)
 8101e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101e52:	4613      	mov	r3, r2
 8101e54:	009b      	lsls	r3, r3, #2
 8101e56:	4413      	add	r3, r2
 8101e58:	4a3c      	ldr	r2, [pc, #240]	@ (8101f4c <main+0x1a8>)
 8101e5a:	493d      	ldr	r1, [pc, #244]	@ (8101f50 <main+0x1ac>)
 8101e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8101e60:	095b      	lsrs	r3, r3, #5
 8101e62:	6353      	str	r3, [r2, #52]	@ 0x34
  	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101e64:	4b39      	ldr	r3, [pc, #228]	@ (8101f4c <main+0x1a8>)
 8101e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101e68:	4613      	mov	r3, r2
 8101e6a:	009b      	lsls	r3, r3, #2
 8101e6c:	4413      	add	r3, r2
 8101e6e:	4a37      	ldr	r2, [pc, #220]	@ (8101f4c <main+0x1a8>)
 8101e70:	4937      	ldr	r1, [pc, #220]	@ (8101f50 <main+0x1ac>)
 8101e72:	fba1 1303 	umull	r1, r3, r1, r3
 8101e76:	095b      	lsrs	r3, r3, #5
 8101e78:	6393      	str	r3, [r2, #56]	@ 0x38
  	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101e7a:	4b34      	ldr	r3, [pc, #208]	@ (8101f4c <main+0x1a8>)
 8101e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101e7e:	4613      	mov	r3, r2
 8101e80:	009b      	lsls	r3, r3, #2
 8101e82:	4413      	add	r3, r2
 8101e84:	4a31      	ldr	r2, [pc, #196]	@ (8101f4c <main+0x1a8>)
 8101e86:	4932      	ldr	r1, [pc, #200]	@ (8101f50 <main+0x1ac>)
 8101e88:	fba1 1303 	umull	r1, r3, r1, r3
 8101e8c:	095b      	lsrs	r3, r3, #5
 8101e8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101e90:	4b2e      	ldr	r3, [pc, #184]	@ (8101f4c <main+0x1a8>)
 8101e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101e94:	4613      	mov	r3, r2
 8101e96:	009b      	lsls	r3, r3, #2
 8101e98:	4413      	add	r3, r2
 8101e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8101f4c <main+0x1a8>)
 8101e9c:	492c      	ldr	r1, [pc, #176]	@ (8101f50 <main+0x1ac>)
 8101e9e:	fba1 1303 	umull	r1, r3, r1, r3
 8101ea2:	095b      	lsrs	r3, r3, #5
 8101ea4:	6413      	str	r3, [r2, #64]	@ 0x40
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);   // main channel
 8101ea6:	2100      	movs	r1, #0
 8101ea8:	482a      	ldr	r0, [pc, #168]	@ (8101f54 <main+0x1b0>)
 8101eaa:	f004 febd 	bl	8106c28 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);   // indirect channel
 8101eae:	2104      	movs	r1, #4
 8101eb0:	4828      	ldr	r0, [pc, #160]	@ (8101f54 <main+0x1b0>)
 8101eb2:	f004 fdb5 	bl	8106a20 <HAL_TIM_IC_Start>

#ifdef CALIBRATE
  //ESC_Calibrate();
#endif
#ifdef DEFAULT
  bno055_assignI2C(&hi2c1);
 8101eb6:	4828      	ldr	r0, [pc, #160]	@ (8101f58 <main+0x1b4>)
 8101eb8:	f7ff fe32 	bl	8101b20 <bno055_assignI2C>
  bno055_setup();
 8101ebc:	f7ff fc80 	bl	81017c0 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101ec0:	f7ff fc6b 	bl	810179a <bno055_setOperationModeNDOF>
  init_PID(&PitchPID, KPP, KIP, KDP, 0.01, 1.3, -1.3);
 8101ec4:	eddf 2a25 	vldr	s5, [pc, #148]	@ 8101f5c <main+0x1b8>
 8101ec8:	ed9f 2a25 	vldr	s4, [pc, #148]	@ 8101f60 <main+0x1bc>
 8101ecc:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8101f64 <main+0x1c0>
 8101ed0:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 8101f68 <main+0x1c4>
 8101ed4:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8101f68 <main+0x1c4>
 8101ed8:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8101f6c <main+0x1c8>
 8101edc:	4824      	ldr	r0, [pc, #144]	@ (8101f70 <main+0x1cc>)
 8101ede:	f7ff fb87 	bl	81015f0 <init_PID>
  init_PID(&RollPID, KPR, KIR, KDR, 0.01, 1.3, -1.3);
 8101ee2:	eddf 2a1e 	vldr	s5, [pc, #120]	@ 8101f5c <main+0x1b8>
 8101ee6:	ed9f 2a1e 	vldr	s4, [pc, #120]	@ 8101f60 <main+0x1bc>
 8101eea:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 8101f64 <main+0x1c0>
 8101eee:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8101f68 <main+0x1c4>
 8101ef2:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8101f68 <main+0x1c4>
 8101ef6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8101f74 <main+0x1d0>
 8101efa:	481f      	ldr	r0, [pc, #124]	@ (8101f78 <main+0x1d4>)
 8101efc:	f7ff fb78 	bl	81015f0 <init_PID>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_Tc){
 8101f00:	4b1e      	ldr	r3, [pc, #120]	@ (8101f7c <main+0x1d8>)
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	2b00      	cmp	r3, #0
 8101f06:	d0fb      	beq.n	8101f00 <main+0x15c>
		  switch(mode){
 8101f08:	4b1d      	ldr	r3, [pc, #116]	@ (8101f80 <main+0x1dc>)
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	2b02      	cmp	r3, #2
 8101f0e:	d00c      	beq.n	8101f2a <main+0x186>
 8101f10:	2b02      	cmp	r3, #2
 8101f12:	dc0d      	bgt.n	8101f30 <main+0x18c>
 8101f14:	2b00      	cmp	r3, #0
 8101f16:	d002      	beq.n	8101f1e <main+0x17a>
 8101f18:	2b01      	cmp	r3, #1
 8101f1a:	d003      	beq.n	8101f24 <main+0x180>
 8101f1c:	e008      	b.n	8101f30 <main+0x18c>
		  case 0:
			   stopMotors(); break;
 8101f1e:	f000 fa8f 	bl	8102440 <stopMotors>
 8101f22:	e008      	b.n	8101f36 <main+0x192>
		  case 1:
			  armingMotors(); break;
 8101f24:	f000 fb0c 	bl	8102540 <armingMotors>
 8101f28:	e005      	b.n	8101f36 <main+0x192>
		  case 2:
			  stabilize(); break;
 8101f2a:	f000 fbc5 	bl	81026b8 <stabilize>
 8101f2e:	e002      	b.n	8101f36 <main+0x192>
		  default:
			  stopMotors(); break;
 8101f30:	f000 fa86 	bl	8102440 <stopMotors>
 8101f34:	bf00      	nop
	  if(flag_Tc){
 8101f36:	e7e3      	b.n	8101f00 <main+0x15c>
 8101f38:	58024400 	.word	0x58024400
 8101f3c:	e000ed00 	.word	0xe000ed00
 8101f40:	58026400 	.word	0x58026400
 8101f44:	1000028c 	.word	0x1000028c
 8101f48:	100002d8 	.word	0x100002d8
 8101f4c:	40000400 	.word	0x40000400
 8101f50:	51eb851f 	.word	0x51eb851f
 8101f54:	10000324 	.word	0x10000324
 8101f58:	10000238 	.word	0x10000238
 8101f5c:	bfa66666 	.word	0xbfa66666
 8101f60:	3fa66666 	.word	0x3fa66666
 8101f64:	3c23d70a 	.word	0x3c23d70a
 8101f68:	00000000 	.word	0x00000000
 8101f6c:	3c63bcd3 	.word	0x3c63bcd3
 8101f70:	1000040c 	.word	0x1000040c
 8101f74:	3c83126f 	.word	0x3c83126f
 8101f78:	1000042c 	.word	0x1000042c
 8101f7c:	10000404 	.word	0x10000404
 8101f80:	10000408 	.word	0x10000408

08101f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101f84:	b580      	push	{r7, lr}
 8101f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8101f88:	4b1b      	ldr	r3, [pc, #108]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8101ffc <MX_I2C1_Init+0x78>)
 8101f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 8101f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101f90:	4a1b      	ldr	r2, [pc, #108]	@ (8102000 <MX_I2C1_Init+0x7c>)
 8101f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101f94:	4b18      	ldr	r3, [pc, #96]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101f96:	2200      	movs	r2, #0
 8101f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8101f9a:	4b17      	ldr	r3, [pc, #92]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101f9c:	2201      	movs	r2, #1
 8101f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101fa0:	4b15      	ldr	r3, [pc, #84]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fa2:	2200      	movs	r2, #0
 8101fa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101fa6:	4b14      	ldr	r3, [pc, #80]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fa8:	2200      	movs	r2, #0
 8101faa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101fac:	4b12      	ldr	r3, [pc, #72]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fae:	2200      	movs	r2, #0
 8101fb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101fb2:	4b11      	ldr	r3, [pc, #68]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fba:	2200      	movs	r2, #0
 8101fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8101fbe:	480e      	ldr	r0, [pc, #56]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fc0:	f001 fbfe 	bl	81037c0 <HAL_I2C_Init>
 8101fc4:	4603      	mov	r3, r0
 8101fc6:	2b00      	cmp	r3, #0
 8101fc8:	d001      	beq.n	8101fce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8101fca:	f000 fd0f 	bl	81029ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101fce:	2100      	movs	r1, #0
 8101fd0:	4809      	ldr	r0, [pc, #36]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fd2:	f002 f95f 	bl	8104294 <HAL_I2CEx_ConfigAnalogFilter>
 8101fd6:	4603      	mov	r3, r0
 8101fd8:	2b00      	cmp	r3, #0
 8101fda:	d001      	beq.n	8101fe0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101fdc:	f000 fd06 	bl	81029ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101fe0:	2100      	movs	r1, #0
 8101fe2:	4805      	ldr	r0, [pc, #20]	@ (8101ff8 <MX_I2C1_Init+0x74>)
 8101fe4:	f002 f9a1 	bl	810432a <HAL_I2CEx_ConfigDigitalFilter>
 8101fe8:	4603      	mov	r3, r0
 8101fea:	2b00      	cmp	r3, #0
 8101fec:	d001      	beq.n	8101ff2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101fee:	f000 fcfd 	bl	81029ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101ff2:	bf00      	nop
 8101ff4:	bd80      	pop	{r7, pc}
 8101ff6:	bf00      	nop
 8101ff8:	10000238 	.word	0x10000238
 8101ffc:	40005400 	.word	0x40005400
 8102000:	00301242 	.word	0x00301242

08102004 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8102004:	b580      	push	{r7, lr}
 8102006:	b088      	sub	sp, #32
 8102008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810200a:	f107 0310 	add.w	r3, r7, #16
 810200e:	2200      	movs	r2, #0
 8102010:	601a      	str	r2, [r3, #0]
 8102012:	605a      	str	r2, [r3, #4]
 8102014:	609a      	str	r2, [r3, #8]
 8102016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102018:	1d3b      	adds	r3, r7, #4
 810201a:	2200      	movs	r2, #0
 810201c:	601a      	str	r2, [r3, #0]
 810201e:	605a      	str	r2, [r3, #4]
 8102020:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102022:	4b20      	ldr	r3, [pc, #128]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 8102024:	4a20      	ldr	r2, [pc, #128]	@ (81020a8 <MX_TIM1_Init+0xa4>)
 8102026:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8102028:	4b1e      	ldr	r3, [pc, #120]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 810202a:	224a      	movs	r2, #74	@ 0x4a
 810202c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810202e:	4b1d      	ldr	r3, [pc, #116]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 8102030:	2200      	movs	r2, #0
 8102032:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8102034:	4b1b      	ldr	r3, [pc, #108]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 8102036:	f242 720f 	movw	r2, #9999	@ 0x270f
 810203a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810203c:	4b19      	ldr	r3, [pc, #100]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 810203e:	2200      	movs	r2, #0
 8102040:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8102042:	4b18      	ldr	r3, [pc, #96]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 8102044:	2200      	movs	r2, #0
 8102046:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102048:	4b16      	ldr	r3, [pc, #88]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 810204a:	2200      	movs	r2, #0
 810204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810204e:	4815      	ldr	r0, [pc, #84]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 8102050:	f004 fa44 	bl	81064dc <HAL_TIM_Base_Init>
 8102054:	4603      	mov	r3, r0
 8102056:	2b00      	cmp	r3, #0
 8102058:	d001      	beq.n	810205e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 810205a:	f000 fcc7 	bl	81029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810205e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102062:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102064:	f107 0310 	add.w	r3, r7, #16
 8102068:	4619      	mov	r1, r3
 810206a:	480e      	ldr	r0, [pc, #56]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 810206c:	f005 f9e4 	bl	8107438 <HAL_TIM_ConfigClockSource>
 8102070:	4603      	mov	r3, r0
 8102072:	2b00      	cmp	r3, #0
 8102074:	d001      	beq.n	810207a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8102076:	f000 fcb9 	bl	81029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810207a:	2300      	movs	r3, #0
 810207c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810207e:	2300      	movs	r3, #0
 8102080:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102082:	2300      	movs	r3, #0
 8102084:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102086:	1d3b      	adds	r3, r7, #4
 8102088:	4619      	mov	r1, r3
 810208a:	4806      	ldr	r0, [pc, #24]	@ (81020a4 <MX_TIM1_Init+0xa0>)
 810208c:	f006 f9c2 	bl	8108414 <HAL_TIMEx_MasterConfigSynchronization>
 8102090:	4603      	mov	r3, r0
 8102092:	2b00      	cmp	r3, #0
 8102094:	d001      	beq.n	810209a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8102096:	f000 fca9 	bl	81029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 810209a:	bf00      	nop
 810209c:	3720      	adds	r7, #32
 810209e:	46bd      	mov	sp, r7
 81020a0:	bd80      	pop	{r7, pc}
 81020a2:	bf00      	nop
 81020a4:	1000028c 	.word	0x1000028c
 81020a8:	40010000 	.word	0x40010000

081020ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81020ac:	b580      	push	{r7, lr}
 81020ae:	b08e      	sub	sp, #56	@ 0x38
 81020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81020b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81020b6:	2200      	movs	r2, #0
 81020b8:	601a      	str	r2, [r3, #0]
 81020ba:	605a      	str	r2, [r3, #4]
 81020bc:	609a      	str	r2, [r3, #8]
 81020be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81020c0:	f107 031c 	add.w	r3, r7, #28
 81020c4:	2200      	movs	r2, #0
 81020c6:	601a      	str	r2, [r3, #0]
 81020c8:	605a      	str	r2, [r3, #4]
 81020ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81020cc:	463b      	mov	r3, r7
 81020ce:	2200      	movs	r2, #0
 81020d0:	601a      	str	r2, [r3, #0]
 81020d2:	605a      	str	r2, [r3, #4]
 81020d4:	609a      	str	r2, [r3, #8]
 81020d6:	60da      	str	r2, [r3, #12]
 81020d8:	611a      	str	r2, [r3, #16]
 81020da:	615a      	str	r2, [r3, #20]
 81020dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81020de:	4b3d      	ldr	r3, [pc, #244]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81020e0:	4a3d      	ldr	r2, [pc, #244]	@ (81021d8 <MX_TIM3_Init+0x12c>)
 81020e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75-1;
 81020e4:	4b3b      	ldr	r3, [pc, #236]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81020e6:	224a      	movs	r2, #74	@ 0x4a
 81020e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81020ea:	4b3a      	ldr	r3, [pc, #232]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81020ec:	2200      	movs	r2, #0
 81020ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81020f0:	4b38      	ldr	r3, [pc, #224]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81020f2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 81020f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81020f8:	4b36      	ldr	r3, [pc, #216]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81020fa:	2200      	movs	r2, #0
 81020fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81020fe:	4b35      	ldr	r3, [pc, #212]	@ (81021d4 <MX_TIM3_Init+0x128>)
 8102100:	2200      	movs	r2, #0
 8102102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102104:	4833      	ldr	r0, [pc, #204]	@ (81021d4 <MX_TIM3_Init+0x128>)
 8102106:	f004 f9e9 	bl	81064dc <HAL_TIM_Base_Init>
 810210a:	4603      	mov	r3, r0
 810210c:	2b00      	cmp	r3, #0
 810210e:	d001      	beq.n	8102114 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8102110:	f000 fc6c 	bl	81029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102118:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 810211a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810211e:	4619      	mov	r1, r3
 8102120:	482c      	ldr	r0, [pc, #176]	@ (81021d4 <MX_TIM3_Init+0x128>)
 8102122:	f005 f989 	bl	8107438 <HAL_TIM_ConfigClockSource>
 8102126:	4603      	mov	r3, r0
 8102128:	2b00      	cmp	r3, #0
 810212a:	d001      	beq.n	8102130 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 810212c:	f000 fc5e 	bl	81029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102130:	4828      	ldr	r0, [pc, #160]	@ (81021d4 <MX_TIM3_Init+0x128>)
 8102132:	f004 faa3 	bl	810667c <HAL_TIM_PWM_Init>
 8102136:	4603      	mov	r3, r0
 8102138:	2b00      	cmp	r3, #0
 810213a:	d001      	beq.n	8102140 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 810213c:	f000 fc56 	bl	81029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102140:	2300      	movs	r3, #0
 8102142:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102144:	2300      	movs	r3, #0
 8102146:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102148:	f107 031c 	add.w	r3, r7, #28
 810214c:	4619      	mov	r1, r3
 810214e:	4821      	ldr	r0, [pc, #132]	@ (81021d4 <MX_TIM3_Init+0x128>)
 8102150:	f006 f960 	bl	8108414 <HAL_TIMEx_MasterConfigSynchronization>
 8102154:	4603      	mov	r3, r0
 8102156:	2b00      	cmp	r3, #0
 8102158:	d001      	beq.n	810215e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 810215a:	f000 fc47 	bl	81029ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810215e:	2360      	movs	r3, #96	@ 0x60
 8102160:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8102162:	2300      	movs	r3, #0
 8102164:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102166:	2300      	movs	r3, #0
 8102168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810216a:	2300      	movs	r3, #0
 810216c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810216e:	463b      	mov	r3, r7
 8102170:	2200      	movs	r2, #0
 8102172:	4619      	mov	r1, r3
 8102174:	4817      	ldr	r0, [pc, #92]	@ (81021d4 <MX_TIM3_Init+0x128>)
 8102176:	f005 f84b 	bl	8107210 <HAL_TIM_PWM_ConfigChannel>
 810217a:	4603      	mov	r3, r0
 810217c:	2b00      	cmp	r3, #0
 810217e:	d001      	beq.n	8102184 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8102180:	f000 fc34 	bl	81029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102184:	463b      	mov	r3, r7
 8102186:	2204      	movs	r2, #4
 8102188:	4619      	mov	r1, r3
 810218a:	4812      	ldr	r0, [pc, #72]	@ (81021d4 <MX_TIM3_Init+0x128>)
 810218c:	f005 f840 	bl	8107210 <HAL_TIM_PWM_ConfigChannel>
 8102190:	4603      	mov	r3, r0
 8102192:	2b00      	cmp	r3, #0
 8102194:	d001      	beq.n	810219a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8102196:	f000 fc29 	bl	81029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810219a:	463b      	mov	r3, r7
 810219c:	2208      	movs	r2, #8
 810219e:	4619      	mov	r1, r3
 81021a0:	480c      	ldr	r0, [pc, #48]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81021a2:	f005 f835 	bl	8107210 <HAL_TIM_PWM_ConfigChannel>
 81021a6:	4603      	mov	r3, r0
 81021a8:	2b00      	cmp	r3, #0
 81021aa:	d001      	beq.n	81021b0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 81021ac:	f000 fc1e 	bl	81029ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81021b0:	463b      	mov	r3, r7
 81021b2:	220c      	movs	r2, #12
 81021b4:	4619      	mov	r1, r3
 81021b6:	4807      	ldr	r0, [pc, #28]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81021b8:	f005 f82a 	bl	8107210 <HAL_TIM_PWM_ConfigChannel>
 81021bc:	4603      	mov	r3, r0
 81021be:	2b00      	cmp	r3, #0
 81021c0:	d001      	beq.n	81021c6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 81021c2:	f000 fc13 	bl	81029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 81021c6:	4803      	ldr	r0, [pc, #12]	@ (81021d4 <MX_TIM3_Init+0x128>)
 81021c8:	f000 fd20 	bl	8102c0c <HAL_TIM_MspPostInit>

}
 81021cc:	bf00      	nop
 81021ce:	3738      	adds	r7, #56	@ 0x38
 81021d0:	46bd      	mov	sp, r7
 81021d2:	bd80      	pop	{r7, pc}
 81021d4:	100002d8 	.word	0x100002d8
 81021d8:	40000400 	.word	0x40000400

081021dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 81021dc:	b580      	push	{r7, lr}
 81021de:	b090      	sub	sp, #64	@ 0x40
 81021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81021e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81021e6:	2200      	movs	r2, #0
 81021e8:	601a      	str	r2, [r3, #0]
 81021ea:	605a      	str	r2, [r3, #4]
 81021ec:	609a      	str	r2, [r3, #8]
 81021ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 81021f0:	f107 031c 	add.w	r3, r7, #28
 81021f4:	2200      	movs	r2, #0
 81021f6:	601a      	str	r2, [r3, #0]
 81021f8:	605a      	str	r2, [r3, #4]
 81021fa:	609a      	str	r2, [r3, #8]
 81021fc:	60da      	str	r2, [r3, #12]
 81021fe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8102200:	f107 030c 	add.w	r3, r7, #12
 8102204:	2200      	movs	r2, #0
 8102206:	601a      	str	r2, [r3, #0]
 8102208:	605a      	str	r2, [r3, #4]
 810220a:	609a      	str	r2, [r3, #8]
 810220c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810220e:	463b      	mov	r3, r7
 8102210:	2200      	movs	r2, #0
 8102212:	601a      	str	r2, [r3, #0]
 8102214:	605a      	str	r2, [r3, #4]
 8102216:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8102218:	4b3d      	ldr	r3, [pc, #244]	@ (8102310 <MX_TIM5_Init+0x134>)
 810221a:	4a3e      	ldr	r2, [pc, #248]	@ (8102314 <MX_TIM5_Init+0x138>)
 810221c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 75-1;
 810221e:	4b3c      	ldr	r3, [pc, #240]	@ (8102310 <MX_TIM5_Init+0x134>)
 8102220:	224a      	movs	r2, #74	@ 0x4a
 8102222:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102224:	4b3a      	ldr	r3, [pc, #232]	@ (8102310 <MX_TIM5_Init+0x134>)
 8102226:	2200      	movs	r2, #0
 8102228:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 810222a:	4b39      	ldr	r3, [pc, #228]	@ (8102310 <MX_TIM5_Init+0x134>)
 810222c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8102230:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102232:	4b37      	ldr	r3, [pc, #220]	@ (8102310 <MX_TIM5_Init+0x134>)
 8102234:	2200      	movs	r2, #0
 8102236:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102238:	4b35      	ldr	r3, [pc, #212]	@ (8102310 <MX_TIM5_Init+0x134>)
 810223a:	2200      	movs	r2, #0
 810223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 810223e:	4834      	ldr	r0, [pc, #208]	@ (8102310 <MX_TIM5_Init+0x134>)
 8102240:	f004 f94c 	bl	81064dc <HAL_TIM_Base_Init>
 8102244:	4603      	mov	r3, r0
 8102246:	2b00      	cmp	r3, #0
 8102248:	d001      	beq.n	810224e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 810224a:	f000 fbcf 	bl	81029ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810224e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102252:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8102254:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102258:	4619      	mov	r1, r3
 810225a:	482d      	ldr	r0, [pc, #180]	@ (8102310 <MX_TIM5_Init+0x134>)
 810225c:	f005 f8ec 	bl	8107438 <HAL_TIM_ConfigClockSource>
 8102260:	4603      	mov	r3, r0
 8102262:	2b00      	cmp	r3, #0
 8102264:	d001      	beq.n	810226a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8102266:	f000 fbc1 	bl	81029ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 810226a:	4829      	ldr	r0, [pc, #164]	@ (8102310 <MX_TIM5_Init+0x134>)
 810226c:	f004 fb76 	bl	810695c <HAL_TIM_IC_Init>
 8102270:	4603      	mov	r3, r0
 8102272:	2b00      	cmp	r3, #0
 8102274:	d001      	beq.n	810227a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8102276:	f000 fbb9 	bl	81029ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 810227a:	2304      	movs	r3, #4
 810227c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 810227e:	2350      	movs	r3, #80	@ 0x50
 8102280:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102282:	2300      	movs	r3, #0
 8102284:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8102286:	2300      	movs	r3, #0
 8102288:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 810228a:	2300      	movs	r3, #0
 810228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 810228e:	f107 031c 	add.w	r3, r7, #28
 8102292:	4619      	mov	r1, r3
 8102294:	481e      	ldr	r0, [pc, #120]	@ (8102310 <MX_TIM5_Init+0x134>)
 8102296:	f005 f9c7 	bl	8107628 <HAL_TIM_SlaveConfigSynchro>
 810229a:	4603      	mov	r3, r0
 810229c:	2b00      	cmp	r3, #0
 810229e:	d001      	beq.n	81022a4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 81022a0:	f000 fba4 	bl	81029ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 81022a4:	2300      	movs	r3, #0
 81022a6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 81022a8:	2301      	movs	r3, #1
 81022aa:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 81022ac:	2300      	movs	r3, #0
 81022ae:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 81022b0:	2300      	movs	r3, #0
 81022b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81022b4:	f107 030c 	add.w	r3, r7, #12
 81022b8:	2200      	movs	r2, #0
 81022ba:	4619      	mov	r1, r3
 81022bc:	4814      	ldr	r0, [pc, #80]	@ (8102310 <MX_TIM5_Init+0x134>)
 81022be:	f004 ff0a 	bl	81070d6 <HAL_TIM_IC_ConfigChannel>
 81022c2:	4603      	mov	r3, r0
 81022c4:	2b00      	cmp	r3, #0
 81022c6:	d001      	beq.n	81022cc <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 81022c8:	f000 fb90 	bl	81029ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 81022cc:	2302      	movs	r3, #2
 81022ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 81022d0:	2302      	movs	r3, #2
 81022d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 81022d4:	f107 030c 	add.w	r3, r7, #12
 81022d8:	2204      	movs	r2, #4
 81022da:	4619      	mov	r1, r3
 81022dc:	480c      	ldr	r0, [pc, #48]	@ (8102310 <MX_TIM5_Init+0x134>)
 81022de:	f004 fefa 	bl	81070d6 <HAL_TIM_IC_ConfigChannel>
 81022e2:	4603      	mov	r3, r0
 81022e4:	2b00      	cmp	r3, #0
 81022e6:	d001      	beq.n	81022ec <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 81022e8:	f000 fb80 	bl	81029ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81022ec:	2300      	movs	r3, #0
 81022ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81022f0:	2300      	movs	r3, #0
 81022f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 81022f4:	463b      	mov	r3, r7
 81022f6:	4619      	mov	r1, r3
 81022f8:	4805      	ldr	r0, [pc, #20]	@ (8102310 <MX_TIM5_Init+0x134>)
 81022fa:	f006 f88b 	bl	8108414 <HAL_TIMEx_MasterConfigSynchronization>
 81022fe:	4603      	mov	r3, r0
 8102300:	2b00      	cmp	r3, #0
 8102302:	d001      	beq.n	8102308 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8102304:	f000 fb72 	bl	81029ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8102308:	bf00      	nop
 810230a:	3740      	adds	r7, #64	@ 0x40
 810230c:	46bd      	mov	sp, r7
 810230e:	bd80      	pop	{r7, pc}
 8102310:	10000324 	.word	0x10000324
 8102314:	40000c00 	.word	0x40000c00

08102318 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8102318:	b580      	push	{r7, lr}
 810231a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810231c:	4b22      	ldr	r3, [pc, #136]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 810231e:	4a23      	ldr	r2, [pc, #140]	@ (81023ac <MX_USART3_UART_Init+0x94>)
 8102320:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102322:	4b21      	ldr	r3, [pc, #132]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102324:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8102328:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810232a:	4b1f      	ldr	r3, [pc, #124]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 810232c:	2200      	movs	r2, #0
 810232e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102330:	4b1d      	ldr	r3, [pc, #116]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102332:	2200      	movs	r2, #0
 8102334:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102336:	4b1c      	ldr	r3, [pc, #112]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102338:	2200      	movs	r2, #0
 810233a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810233c:	4b1a      	ldr	r3, [pc, #104]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 810233e:	220c      	movs	r2, #12
 8102340:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102342:	4b19      	ldr	r3, [pc, #100]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102344:	2200      	movs	r2, #0
 8102346:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102348:	4b17      	ldr	r3, [pc, #92]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 810234a:	2200      	movs	r2, #0
 810234c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810234e:	4b16      	ldr	r3, [pc, #88]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102350:	2200      	movs	r2, #0
 8102352:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102354:	4b14      	ldr	r3, [pc, #80]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102356:	2200      	movs	r2, #0
 8102358:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810235a:	4b13      	ldr	r3, [pc, #76]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 810235c:	2200      	movs	r2, #0
 810235e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102360:	4811      	ldr	r0, [pc, #68]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102362:	f006 f903 	bl	810856c <HAL_UART_Init>
 8102366:	4603      	mov	r3, r0
 8102368:	2b00      	cmp	r3, #0
 810236a:	d001      	beq.n	8102370 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810236c:	f000 fb3e 	bl	81029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102370:	2100      	movs	r1, #0
 8102372:	480d      	ldr	r0, [pc, #52]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102374:	f007 f998 	bl	81096a8 <HAL_UARTEx_SetTxFifoThreshold>
 8102378:	4603      	mov	r3, r0
 810237a:	2b00      	cmp	r3, #0
 810237c:	d001      	beq.n	8102382 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810237e:	f000 fb35 	bl	81029ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102382:	2100      	movs	r1, #0
 8102384:	4808      	ldr	r0, [pc, #32]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102386:	f007 f9cd 	bl	8109724 <HAL_UARTEx_SetRxFifoThreshold>
 810238a:	4603      	mov	r3, r0
 810238c:	2b00      	cmp	r3, #0
 810238e:	d001      	beq.n	8102394 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102390:	f000 fb2c 	bl	81029ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102394:	4804      	ldr	r0, [pc, #16]	@ (81023a8 <MX_USART3_UART_Init+0x90>)
 8102396:	f007 f94e 	bl	8109636 <HAL_UARTEx_DisableFifoMode>
 810239a:	4603      	mov	r3, r0
 810239c:	2b00      	cmp	r3, #0
 810239e:	d001      	beq.n	81023a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81023a0:	f000 fb24 	bl	81029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81023a4:	bf00      	nop
 81023a6:	bd80      	pop	{r7, pc}
 81023a8:	10000370 	.word	0x10000370
 81023ac:	40004800 	.word	0x40004800

081023b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81023b0:	b480      	push	{r7}
 81023b2:	b085      	sub	sp, #20
 81023b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81023b6:	4b21      	ldr	r3, [pc, #132]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023bc:	4a1f      	ldr	r2, [pc, #124]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023be:	f043 0301 	orr.w	r3, r3, #1
 81023c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81023c6:	4b1d      	ldr	r3, [pc, #116]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023cc:	f003 0301 	and.w	r3, r3, #1
 81023d0:	60fb      	str	r3, [r7, #12]
 81023d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81023d4:	4b19      	ldr	r3, [pc, #100]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023da:	4a18      	ldr	r2, [pc, #96]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023dc:	f043 0302 	orr.w	r3, r3, #2
 81023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81023e4:	4b15      	ldr	r3, [pc, #84]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023ea:	f003 0302 	and.w	r3, r3, #2
 81023ee:	60bb      	str	r3, [r7, #8]
 81023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81023f2:	4b12      	ldr	r3, [pc, #72]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81023f8:	4a10      	ldr	r2, [pc, #64]	@ (810243c <MX_GPIO_Init+0x8c>)
 81023fa:	f043 0308 	orr.w	r3, r3, #8
 81023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102402:	4b0e      	ldr	r3, [pc, #56]	@ (810243c <MX_GPIO_Init+0x8c>)
 8102404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102408:	f003 0308 	and.w	r3, r3, #8
 810240c:	607b      	str	r3, [r7, #4]
 810240e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102410:	4b0a      	ldr	r3, [pc, #40]	@ (810243c <MX_GPIO_Init+0x8c>)
 8102412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102416:	4a09      	ldr	r2, [pc, #36]	@ (810243c <MX_GPIO_Init+0x8c>)
 8102418:	f043 0304 	orr.w	r3, r3, #4
 810241c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102420:	4b06      	ldr	r3, [pc, #24]	@ (810243c <MX_GPIO_Init+0x8c>)
 8102422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102426:	f003 0304 	and.w	r3, r3, #4
 810242a:	603b      	str	r3, [r7, #0]
 810242c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810242e:	bf00      	nop
 8102430:	3714      	adds	r7, #20
 8102432:	46bd      	mov	sp, r7
 8102434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102438:	4770      	bx	lr
 810243a:	bf00      	nop
 810243c:	58024400 	.word	0x58024400

08102440 <stopMotors>:

/* USER CODE BEGIN 4 */
void stopMotors(){
 8102440:	b5b0      	push	{r4, r5, r7, lr}
 8102442:	b092      	sub	sp, #72	@ 0x48
 8102444:	af12      	add	r7, sp, #72	@ 0x48
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8102446:	4b37      	ldr	r3, [pc, #220]	@ (8102524 <stopMotors+0xe4>)
 8102448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810244a:	4613      	mov	r3, r2
 810244c:	009b      	lsls	r3, r3, #2
 810244e:	4413      	add	r3, r2
 8102450:	4a34      	ldr	r2, [pc, #208]	@ (8102524 <stopMotors+0xe4>)
 8102452:	4935      	ldr	r1, [pc, #212]	@ (8102528 <stopMotors+0xe8>)
 8102454:	fba1 1303 	umull	r1, r3, r1, r3
 8102458:	095b      	lsrs	r3, r3, #5
 810245a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 810245c:	4b31      	ldr	r3, [pc, #196]	@ (8102524 <stopMotors+0xe4>)
 810245e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102460:	4613      	mov	r3, r2
 8102462:	009b      	lsls	r3, r3, #2
 8102464:	4413      	add	r3, r2
 8102466:	4a2f      	ldr	r2, [pc, #188]	@ (8102524 <stopMotors+0xe4>)
 8102468:	492f      	ldr	r1, [pc, #188]	@ (8102528 <stopMotors+0xe8>)
 810246a:	fba1 1303 	umull	r1, r3, r1, r3
 810246e:	095b      	lsrs	r3, r3, #5
 8102470:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8102472:	4b2c      	ldr	r3, [pc, #176]	@ (8102524 <stopMotors+0xe4>)
 8102474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102476:	4613      	mov	r3, r2
 8102478:	009b      	lsls	r3, r3, #2
 810247a:	4413      	add	r3, r2
 810247c:	4a29      	ldr	r2, [pc, #164]	@ (8102524 <stopMotors+0xe4>)
 810247e:	492a      	ldr	r1, [pc, #168]	@ (8102528 <stopMotors+0xe8>)
 8102480:	fba1 1303 	umull	r1, r3, r1, r3
 8102484:	095b      	lsrs	r3, r3, #5
 8102486:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8102488:	4b26      	ldr	r3, [pc, #152]	@ (8102524 <stopMotors+0xe4>)
 810248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810248c:	4613      	mov	r3, r2
 810248e:	009b      	lsls	r3, r3, #2
 8102490:	4413      	add	r3, r2
 8102492:	4a24      	ldr	r2, [pc, #144]	@ (8102524 <stopMotors+0xe4>)
 8102494:	4924      	ldr	r1, [pc, #144]	@ (8102528 <stopMotors+0xe8>)
 8102496:	fba1 1303 	umull	r1, r3, r1, r3
 810249a:	095b      	lsrs	r3, r3, #5
 810249c:	6413      	str	r3, [r2, #64]	@ 0x40
	readImu();
 810249e:	f000 f8ad 	bl	81025fc <readImu>
	if(flag_print){
 81024a2:	4b22      	ldr	r3, [pc, #136]	@ (810252c <stopMotors+0xec>)
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	2b00      	cmp	r3, #0
 81024a8:	d039      	beq.n	810251e <stopMotors+0xde>
		printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f \r\n", (double) OFF_DUTY, (double) OFF_DUTY,(double) OFF_DUTY, (double) OFF_DUTY, (double) roll, (double) pitch, 0.0, 0.0, 0.0, 0.0);
 81024aa:	4b21      	ldr	r3, [pc, #132]	@ (8102530 <stopMotors+0xf0>)
 81024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024b0:	4920      	ldr	r1, [pc, #128]	@ (8102534 <stopMotors+0xf4>)
 81024b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 81024b6:	f04f 0400 	mov.w	r4, #0
 81024ba:	f04f 0500 	mov.w	r5, #0
 81024be:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 81024c2:	f04f 0400 	mov.w	r4, #0
 81024c6:	f04f 0500 	mov.w	r5, #0
 81024ca:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 81024ce:	f04f 0400 	mov.w	r4, #0
 81024d2:	f04f 0500 	mov.w	r5, #0
 81024d6:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 81024da:	f04f 0400 	mov.w	r4, #0
 81024de:	f04f 0500 	mov.w	r5, #0
 81024e2:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 81024e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81024ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 81024ee:	f04f 0200 	mov.w	r2, #0
 81024f2:	4b11      	ldr	r3, [pc, #68]	@ (8102538 <stopMotors+0xf8>)
 81024f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81024f8:	f04f 0200 	mov.w	r2, #0
 81024fc:	4b0e      	ldr	r3, [pc, #56]	@ (8102538 <stopMotors+0xf8>)
 81024fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102502:	f04f 0200 	mov.w	r2, #0
 8102506:	4b0c      	ldr	r3, [pc, #48]	@ (8102538 <stopMotors+0xf8>)
 8102508:	e9cd 2300 	strd	r2, r3, [sp]
 810250c:	f04f 0200 	mov.w	r2, #0
 8102510:	4b09      	ldr	r3, [pc, #36]	@ (8102538 <stopMotors+0xf8>)
 8102512:	480a      	ldr	r0, [pc, #40]	@ (810253c <stopMotors+0xfc>)
 8102514:	f008 f8c0 	bl	810a698 <iprintf>
		flag_print=0;
 8102518:	4b04      	ldr	r3, [pc, #16]	@ (810252c <stopMotors+0xec>)
 810251a:	2200      	movs	r2, #0
 810251c:	601a      	str	r2, [r3, #0]
	}

}
 810251e:	bf00      	nop
 8102520:	46bd      	mov	sp, r7
 8102522:	bdb0      	pop	{r4, r5, r7, pc}
 8102524:	40000400 	.word	0x40000400
 8102528:	51eb851f 	.word	0x51eb851f
 810252c:	1000046c 	.word	0x1000046c
 8102530:	10000458 	.word	0x10000458
 8102534:	10000450 	.word	0x10000450
 8102538:	40140000 	.word	0x40140000
 810253c:	0810e764 	.word	0x0810e764

08102540 <armingMotors>:

void armingMotors(){
 8102540:	b5b0      	push	{r4, r5, r7, lr}
 8102542:	b092      	sub	sp, #72	@ 0x48
 8102544:	af12      	add	r7, sp, #72	@ 0x48
	setPWM(MIN_DUTY, MIN_DUTY, MIN_DUTY, MIN_DUTY);
 8102546:	eddf 1a28 	vldr	s3, [pc, #160]	@ 81025e8 <armingMotors+0xa8>
 810254a:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 81025e8 <armingMotors+0xa8>
 810254e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 81025e8 <armingMotors+0xa8>
 8102552:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 81025e8 <armingMotors+0xa8>
 8102556:	f7fe fe17 	bl	8101188 <setPWM>
	readImu();
 810255a:	f000 f84f 	bl	81025fc <readImu>
	if(flag_print) {
 810255e:	4b23      	ldr	r3, [pc, #140]	@ (81025ec <armingMotors+0xac>)
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	2b00      	cmp	r3, #0
 8102564:	d039      	beq.n	81025da <armingMotors+0x9a>
		printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f\r\n", (double) MIN_DUTY, (double) MIN_DUTY, (double) MIN_DUTY, (double) MIN_DUTY, (double) roll, (double) pitch, 0.0, 0.0, 0.0, 0.0);
 8102566:	4b22      	ldr	r3, [pc, #136]	@ (81025f0 <armingMotors+0xb0>)
 8102568:	e9d3 2300 	ldrd	r2, r3, [r3]
 810256c:	4921      	ldr	r1, [pc, #132]	@ (81025f4 <armingMotors+0xb4>)
 810256e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8102572:	f04f 0400 	mov.w	r4, #0
 8102576:	f04f 0500 	mov.w	r5, #0
 810257a:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 810257e:	f04f 0400 	mov.w	r4, #0
 8102582:	f04f 0500 	mov.w	r5, #0
 8102586:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 810258a:	f04f 0400 	mov.w	r4, #0
 810258e:	f04f 0500 	mov.w	r5, #0
 8102592:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8102596:	f04f 0400 	mov.w	r4, #0
 810259a:	f04f 0500 	mov.w	r5, #0
 810259e:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 81025a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81025a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 81025aa:	a30d      	add	r3, pc, #52	@ (adr r3, 81025e0 <armingMotors+0xa0>)
 81025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81025b4:	a30a      	add	r3, pc, #40	@ (adr r3, 81025e0 <armingMotors+0xa0>)
 81025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81025be:	a308      	add	r3, pc, #32	@ (adr r3, 81025e0 <armingMotors+0xa0>)
 81025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025c4:	e9cd 2300 	strd	r2, r3, [sp]
 81025c8:	a305      	add	r3, pc, #20	@ (adr r3, 81025e0 <armingMotors+0xa0>)
 81025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025ce:	480a      	ldr	r0, [pc, #40]	@ (81025f8 <armingMotors+0xb8>)
 81025d0:	f008 f862 	bl	810a698 <iprintf>
		flag_print=0;
 81025d4:	4b05      	ldr	r3, [pc, #20]	@ (81025ec <armingMotors+0xac>)
 81025d6:	2200      	movs	r2, #0
 81025d8:	601a      	str	r2, [r3, #0]
	}
}
 81025da:	bf00      	nop
 81025dc:	46bd      	mov	sp, r7
 81025de:	bdb0      	pop	{r4, r5, r7, pc}
 81025e0:	9999999a 	.word	0x9999999a
 81025e4:	40159999 	.word	0x40159999
 81025e8:	40accccd 	.word	0x40accccd
 81025ec:	1000046c 	.word	0x1000046c
 81025f0:	10000458 	.word	0x10000458
 81025f4:	10000450 	.word	0x10000450
 81025f8:	0810e798 	.word	0x0810e798

081025fc <readImu>:


void readImu(){
 81025fc:	b5b0      	push	{r4, r5, r7, lr}
 81025fe:	b088      	sub	sp, #32
 8102600:	af00      	add	r7, sp, #0
	bno055_vector_t v = bno055_getVectorEuler();
 8102602:	f7ff fa49 	bl	8101a98 <bno055_getVectorEuler>
 8102606:	eeb0 4a40 	vmov.f32	s8, s0
 810260a:	eef0 4a60 	vmov.f32	s9, s1
 810260e:	eeb0 5a41 	vmov.f32	s10, s2
 8102612:	eef0 5a61 	vmov.f32	s11, s3
 8102616:	eeb0 6a42 	vmov.f32	s12, s4
 810261a:	eef0 6a62 	vmov.f32	s13, s5
 810261e:	eeb0 7a43 	vmov.f32	s14, s6
 8102622:	eef0 7a63 	vmov.f32	s15, s7
 8102626:	ed87 4b00 	vstr	d4, [r7]
 810262a:	ed87 5b02 	vstr	d5, [r7, #8]
 810262e:	ed87 6b04 	vstr	d6, [r7, #16]
 8102632:	ed87 7b06 	vstr	d7, [r7, #24]
		  roll = v.y;
 8102636:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 810263a:	491a      	ldr	r1, [pc, #104]	@ (81026a4 <readImu+0xa8>)
 810263c:	e9c1 2300 	strd	r2, r3, [r1]
		  if (v.z < 0){
 8102640:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8102644:	f04f 0200 	mov.w	r2, #0
 8102648:	f04f 0300 	mov.w	r3, #0
 810264c:	f7fe face 	bl	8100bec <__aeabi_dcmplt>
 8102650:	4603      	mov	r3, r0
 8102652:	2b00      	cmp	r3, #0
 8102654:	d011      	beq.n	810267a <readImu+0x7e>
			  pitch = -v.z - 180;
 8102656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810265a:	4614      	mov	r4, r2
 810265c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8102660:	f04f 0200 	mov.w	r2, #0
 8102664:	4b10      	ldr	r3, [pc, #64]	@ (81026a8 <readImu+0xac>)
 8102666:	4620      	mov	r0, r4
 8102668:	4629      	mov	r1, r5
 810266a:	f7fd fe95 	bl	8100398 <__aeabi_dsub>
 810266e:	4602      	mov	r2, r0
 8102670:	460b      	mov	r3, r1
 8102672:	490e      	ldr	r1, [pc, #56]	@ (81026ac <readImu+0xb0>)
 8102674:	e9c1 2300 	strd	r2, r3, [r1]
 8102678:	e00b      	b.n	8102692 <readImu+0x96>
		  }
		  else{
			  pitch = -v.z + 180;
 810267a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810267e:	f04f 0000 	mov.w	r0, #0
 8102682:	4909      	ldr	r1, [pc, #36]	@ (81026a8 <readImu+0xac>)
 8102684:	f7fd fe88 	bl	8100398 <__aeabi_dsub>
 8102688:	4602      	mov	r2, r0
 810268a:	460b      	mov	r3, r1
 810268c:	4907      	ldr	r1, [pc, #28]	@ (81026ac <readImu+0xb0>)
 810268e:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  yaw=v.x;
 8102692:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8102696:	4906      	ldr	r1, [pc, #24]	@ (81026b0 <readImu+0xb4>)
 8102698:	e9c1 2300 	strd	r2, r3, [r1]

}
 810269c:	bf00      	nop
 810269e:	3720      	adds	r7, #32
 81026a0:	46bd      	mov	sp, r7
 81026a2:	bdb0      	pop	{r4, r5, r7, pc}
 81026a4:	10000458 	.word	0x10000458
 81026a8:	40668000 	.word	0x40668000
 81026ac:	10000450 	.word	0x10000450
 81026b0:	10000460 	.word	0x10000460
 81026b4:	00000000 	.word	0x00000000

081026b8 <stabilize>:

void stabilize(){
 81026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81026bc:	ed2d 8b02 	vpush	{d8}
 81026c0:	b0a6      	sub	sp, #152	@ 0x98
 81026c2:	af12      	add	r7, sp, #72	@ 0x48
	float virtualInputs[4];
	readImu();
 81026c4:	f7ff ff9a 	bl	81025fc <readImu>
	  virtualInputs[0] = 9;
 81026c8:	4b85      	ldr	r3, [pc, #532]	@ (81028e0 <stabilize+0x228>)
 81026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  virtualInputs[1] = PID_controller(&RollPID, roll, 0);
 81026cc:	4b85      	ldr	r3, [pc, #532]	@ (81028e4 <stabilize+0x22c>)
 81026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026d2:	4610      	mov	r0, r2
 81026d4:	4619      	mov	r1, r3
 81026d6:	f7fe fb0f 	bl	8100cf8 <__aeabi_d2f>
 81026da:	4603      	mov	r3, r0
 81026dc:	eddf 0a82 	vldr	s1, [pc, #520]	@ 81028e8 <stabilize+0x230>
 81026e0:	ee00 3a10 	vmov	s0, r3
 81026e4:	4881      	ldr	r0, [pc, #516]	@ (81028ec <stabilize+0x234>)
 81026e6:	f7fe ffb3 	bl	8101650 <PID_controller>
 81026ea:	eef0 7a40 	vmov.f32	s15, s0
 81026ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  virtualInputs[2] = PID_controller(&PitchPID, pitch, 0);
 81026f2:	4b7f      	ldr	r3, [pc, #508]	@ (81028f0 <stabilize+0x238>)
 81026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026f8:	4610      	mov	r0, r2
 81026fa:	4619      	mov	r1, r3
 81026fc:	f7fe fafc 	bl	8100cf8 <__aeabi_d2f>
 8102700:	4603      	mov	r3, r0
 8102702:	eddf 0a79 	vldr	s1, [pc, #484]	@ 81028e8 <stabilize+0x230>
 8102706:	ee00 3a10 	vmov	s0, r3
 810270a:	487a      	ldr	r0, [pc, #488]	@ (81028f4 <stabilize+0x23c>)
 810270c:	f7fe ffa0 	bl	8101650 <PID_controller>
 8102710:	eef0 7a40 	vmov.f32	s15, s0
 8102714:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  virtualInputs[3] = 0;
 8102718:	f04f 0300 	mov.w	r3, #0
 810271c:	63bb      	str	r3, [r7, #56]	@ 0x38

	  float* Speeds;
	  Speeds = SpeedCompute(virtualInputs);
 810271e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102722:	4618      	mov	r0, r3
 8102724:	f7fe fda8 	bl	8101278 <SpeedCompute>
 8102728:	64f8      	str	r0, [r7, #76]	@ 0x4c

	  float avgMotor1 = map(*(Speeds+0)) + 0.04/*+ 0.019*/;
 810272a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810272c:	edd3 7a00 	vldr	s15, [r3]
 8102730:	eeb0 0a67 	vmov.f32	s0, s15
 8102734:	f7fe ff00 	bl	8101538 <map>
 8102738:	ee10 3a10 	vmov	r3, s0
 810273c:	4618      	mov	r0, r3
 810273e:	f7fd ff8b 	bl	8100658 <__aeabi_f2d>
 8102742:	a363      	add	r3, pc, #396	@ (adr r3, 81028d0 <stabilize+0x218>)
 8102744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102748:	f7fd fe28 	bl	810039c <__adddf3>
 810274c:	4602      	mov	r2, r0
 810274e:	460b      	mov	r3, r1
 8102750:	4610      	mov	r0, r2
 8102752:	4619      	mov	r1, r3
 8102754:	f7fe fad0 	bl	8100cf8 <__aeabi_d2f>
 8102758:	4603      	mov	r3, r0
 810275a:	64bb      	str	r3, [r7, #72]	@ 0x48
	  float avgMotor2 = map(*(Speeds+1)) + 0.0295;
 810275c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810275e:	3304      	adds	r3, #4
 8102760:	edd3 7a00 	vldr	s15, [r3]
 8102764:	eeb0 0a67 	vmov.f32	s0, s15
 8102768:	f7fe fee6 	bl	8101538 <map>
 810276c:	ee10 3a10 	vmov	r3, s0
 8102770:	4618      	mov	r0, r3
 8102772:	f7fd ff71 	bl	8100658 <__aeabi_f2d>
 8102776:	a358      	add	r3, pc, #352	@ (adr r3, 81028d8 <stabilize+0x220>)
 8102778:	e9d3 2300 	ldrd	r2, r3, [r3]
 810277c:	f7fd fe0e 	bl	810039c <__adddf3>
 8102780:	4602      	mov	r2, r0
 8102782:	460b      	mov	r3, r1
 8102784:	4610      	mov	r0, r2
 8102786:	4619      	mov	r1, r3
 8102788:	f7fe fab6 	bl	8100cf8 <__aeabi_d2f>
 810278c:	4603      	mov	r3, r0
 810278e:	647b      	str	r3, [r7, #68]	@ 0x44
	  float avgMotor3 = map(*(Speeds+2)) - 0.0295;
 8102790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102792:	3308      	adds	r3, #8
 8102794:	edd3 7a00 	vldr	s15, [r3]
 8102798:	eeb0 0a67 	vmov.f32	s0, s15
 810279c:	f7fe fecc 	bl	8101538 <map>
 81027a0:	ee10 3a10 	vmov	r3, s0
 81027a4:	4618      	mov	r0, r3
 81027a6:	f7fd ff57 	bl	8100658 <__aeabi_f2d>
 81027aa:	a34b      	add	r3, pc, #300	@ (adr r3, 81028d8 <stabilize+0x220>)
 81027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027b0:	f7fd fdf2 	bl	8100398 <__aeabi_dsub>
 81027b4:	4602      	mov	r2, r0
 81027b6:	460b      	mov	r3, r1
 81027b8:	4610      	mov	r0, r2
 81027ba:	4619      	mov	r1, r3
 81027bc:	f7fe fa9c 	bl	8100cf8 <__aeabi_d2f>
 81027c0:	4603      	mov	r3, r0
 81027c2:	643b      	str	r3, [r7, #64]	@ 0x40
	  float avgMotor4 = map(*(Speeds+3)) - 0.0295;
 81027c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81027c6:	330c      	adds	r3, #12
 81027c8:	edd3 7a00 	vldr	s15, [r3]
 81027cc:	eeb0 0a67 	vmov.f32	s0, s15
 81027d0:	f7fe feb2 	bl	8101538 <map>
 81027d4:	ee10 3a10 	vmov	r3, s0
 81027d8:	4618      	mov	r0, r3
 81027da:	f7fd ff3d 	bl	8100658 <__aeabi_f2d>
 81027de:	a33e      	add	r3, pc, #248	@ (adr r3, 81028d8 <stabilize+0x220>)
 81027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027e4:	f7fd fdd8 	bl	8100398 <__aeabi_dsub>
 81027e8:	4602      	mov	r2, r0
 81027ea:	460b      	mov	r3, r1
 81027ec:	4610      	mov	r0, r2
 81027ee:	4619      	mov	r1, r3
 81027f0:	f7fe fa82 	bl	8100cf8 <__aeabi_d2f>
 81027f4:	4603      	mov	r3, r0
 81027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  if(flag_print) {
 81027f8:	4b3f      	ldr	r3, [pc, #252]	@ (81028f8 <stabilize+0x240>)
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	2b00      	cmp	r3, #0
 81027fe:	d053      	beq.n	81028a8 <stabilize+0x1f0>
		  printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f\r\n", avgMotor1, avgMotor2, avgMotor3, avgMotor4, roll, pitch, virtualInputs[0], virtualInputs[1], virtualInputs[2], virtualInputs[3]);
 8102800:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8102802:	f7fd ff29 	bl	8100658 <__aeabi_f2d>
 8102806:	e9c7 0108 	strd	r0, r1, [r7, #32]
 810280a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810280c:	f7fd ff24 	bl	8100658 <__aeabi_f2d>
 8102810:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8102814:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8102816:	f7fd ff1f 	bl	8100658 <__aeabi_f2d>
 810281a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 810281e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8102820:	f7fd ff1a 	bl	8100658 <__aeabi_f2d>
 8102824:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8102828:	4b2e      	ldr	r3, [pc, #184]	@ (81028e4 <stabilize+0x22c>)
 810282a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 810282e:	4b30      	ldr	r3, [pc, #192]	@ (81028f0 <stabilize+0x238>)
 8102830:	ed93 8b00 	vldr	d8, [r3]
 8102834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8102836:	4618      	mov	r0, r3
 8102838:	f7fd ff0e 	bl	8100658 <__aeabi_f2d>
 810283c:	e9c7 0100 	strd	r0, r1, [r7]
 8102840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8102842:	4618      	mov	r0, r3
 8102844:	f7fd ff08 	bl	8100658 <__aeabi_f2d>
 8102848:	4680      	mov	r8, r0
 810284a:	4689      	mov	r9, r1
 810284c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810284e:	4618      	mov	r0, r3
 8102850:	f7fd ff02 	bl	8100658 <__aeabi_f2d>
 8102854:	4604      	mov	r4, r0
 8102856:	460d      	mov	r5, r1
 8102858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810285a:	4618      	mov	r0, r3
 810285c:	f7fd fefc 	bl	8100658 <__aeabi_f2d>
 8102860:	4602      	mov	r2, r0
 8102862:	460b      	mov	r3, r1
 8102864:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8102868:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 810286c:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8102870:	ed97 7b00 	vldr	d7, [r7]
 8102874:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8102878:	ed8d 8b08 	vstr	d8, [sp, #32]
 810287c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8102880:	ed97 7b02 	vldr	d7, [r7, #8]
 8102884:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102888:	ed97 7b04 	vldr	d7, [r7, #16]
 810288c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102890:	ed97 7b06 	vldr	d7, [r7, #24]
 8102894:	ed8d 7b00 	vstr	d7, [sp]
 8102898:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 810289c:	4817      	ldr	r0, [pc, #92]	@ (81028fc <stabilize+0x244>)
 810289e:	f007 fefb 	bl	810a698 <iprintf>
		  flag_print=0;
 81028a2:	4b15      	ldr	r3, [pc, #84]	@ (81028f8 <stabilize+0x240>)
 81028a4:	2200      	movs	r2, #0
 81028a6:	601a      	str	r2, [r3, #0]
	  }

	  setPWM(avgMotor1, avgMotor2, avgMotor3, avgMotor4);
 81028a8:	edd7 1a0f 	vldr	s3, [r7, #60]	@ 0x3c
 81028ac:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 81028b0:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 81028b4:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 81028b8:	f7fe fc66 	bl	8101188 <setPWM>

}
 81028bc:	bf00      	nop
 81028be:	3750      	adds	r7, #80	@ 0x50
 81028c0:	46bd      	mov	sp, r7
 81028c2:	ecbd 8b02 	vpop	{d8}
 81028c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81028ca:	bf00      	nop
 81028cc:	f3af 8000 	nop.w
 81028d0:	47ae147b 	.word	0x47ae147b
 81028d4:	3fa47ae1 	.word	0x3fa47ae1
 81028d8:	7ced9168 	.word	0x7ced9168
 81028dc:	3f9e353f 	.word	0x3f9e353f
 81028e0:	41100000 	.word	0x41100000
 81028e4:	10000458 	.word	0x10000458
 81028e8:	00000000 	.word	0x00000000
 81028ec:	1000042c 	.word	0x1000042c
 81028f0:	10000450 	.word	0x10000450
 81028f4:	1000040c 	.word	0x1000040c
 81028f8:	1000046c 	.word	0x1000046c
 81028fc:	0810e798 	.word	0x0810e798

08102900 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8102900:	b480      	push	{r7}
 8102902:	b083      	sub	sp, #12
 8102904:	af00      	add	r7, sp, #0
 8102906:	6078      	str	r0, [r7, #4]
	flag_Tc=1;
 8102908:	4b0e      	ldr	r3, [pc, #56]	@ (8102944 <HAL_TIM_PeriodElapsedCallback+0x44>)
 810290a:	2201      	movs	r2, #1
 810290c:	601a      	str	r2, [r3, #0]
	if(htim==&htim1){
 810290e:	687b      	ldr	r3, [r7, #4]
 8102910:	4a0d      	ldr	r2, [pc, #52]	@ (8102948 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102912:	4293      	cmp	r3, r2
 8102914:	d10f      	bne.n	8102936 <HAL_TIM_PeriodElapsedCallback+0x36>
		if(n==10){
 8102916:	4b0d      	ldr	r3, [pc, #52]	@ (810294c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102918:	681b      	ldr	r3, [r3, #0]
 810291a:	2b0a      	cmp	r3, #10
 810291c:	d106      	bne.n	810292c <HAL_TIM_PeriodElapsedCallback+0x2c>
			n=0;
 810291e:	4b0b      	ldr	r3, [pc, #44]	@ (810294c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102920:	2200      	movs	r2, #0
 8102922:	601a      	str	r2, [r3, #0]
			flag_print=1;
 8102924:	4b0a      	ldr	r3, [pc, #40]	@ (8102950 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102926:	2201      	movs	r2, #1
 8102928:	601a      	str	r2, [r3, #0]
		}
		else{
			n++;
		}
	}
}
 810292a:	e004      	b.n	8102936 <HAL_TIM_PeriodElapsedCallback+0x36>
			n++;
 810292c:	4b07      	ldr	r3, [pc, #28]	@ (810294c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	3301      	adds	r3, #1
 8102932:	4a06      	ldr	r2, [pc, #24]	@ (810294c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102934:	6013      	str	r3, [r2, #0]
}
 8102936:	bf00      	nop
 8102938:	370c      	adds	r7, #12
 810293a:	46bd      	mov	sp, r7
 810293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102940:	4770      	bx	lr
 8102942:	bf00      	nop
 8102944:	10000404 	.word	0x10000404
 8102948:	1000028c 	.word	0x1000028c
 810294c:	10000468 	.word	0x10000468
 8102950:	1000046c 	.word	0x1000046c

08102954 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102954:	b580      	push	{r7, lr}
 8102956:	b084      	sub	sp, #16
 8102958:	af00      	add	r7, sp, #0
 810295a:	6078      	str	r0, [r7, #4]
	if(htim==&htim5){
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	4a18      	ldr	r2, [pc, #96]	@ (81029c0 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8102960:	4293      	cmp	r3, r2
 8102962:	d128      	bne.n	81029b6 <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	7f1b      	ldrb	r3, [r3, #28]
 8102968:	2b01      	cmp	r3, #1
 810296a:	d124      	bne.n	81029b6 <HAL_TIM_IC_CaptureCallback+0x62>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 810296c:	2100      	movs	r1, #0
 810296e:	6878      	ldr	r0, [r7, #4]
 8102970:	f004 fe9c 	bl	81076ac <HAL_TIM_ReadCapturedValue>
 8102974:	60f8      	str	r0, [r7, #12]

			if (ICValue != 0)
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	2b00      	cmp	r3, #0
 810297a:	d01c      	beq.n	81029b6 <HAL_TIM_IC_CaptureCallback+0x62>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 810297c:	2104      	movs	r1, #4
 810297e:	6878      	ldr	r0, [r7, #4]
 8102980:	f004 fe94 	bl	81076ac <HAL_TIM_ReadCapturedValue>
 8102984:	4603      	mov	r3, r0
 8102986:	2264      	movs	r2, #100	@ 0x64
 8102988:	fb03 f202 	mul.w	r2, r3, r2
 810298c:	68fb      	ldr	r3, [r7, #12]
 810298e:	fbb2 f3f3 	udiv	r3, r2, r3
 8102992:	60bb      	str	r3, [r7, #8]
				if(duty_received >= 11){
 8102994:	68bb      	ldr	r3, [r7, #8]
 8102996:	2b0a      	cmp	r3, #10
 8102998:	d903      	bls.n	81029a2 <HAL_TIM_IC_CaptureCallback+0x4e>
					mode = 0;
 810299a:	4b0a      	ldr	r3, [pc, #40]	@ (81029c4 <HAL_TIM_IC_CaptureCallback+0x70>)
 810299c:	2200      	movs	r2, #0
 810299e:	601a      	str	r2, [r3, #0]
					mode = 1;
				}
			}
		}
	}
}
 81029a0:	e009      	b.n	81029b6 <HAL_TIM_IC_CaptureCallback+0x62>
				else if (duty_received <= 8){
 81029a2:	68bb      	ldr	r3, [r7, #8]
 81029a4:	2b08      	cmp	r3, #8
 81029a6:	d803      	bhi.n	81029b0 <HAL_TIM_IC_CaptureCallback+0x5c>
					mode = 2;
 81029a8:	4b06      	ldr	r3, [pc, #24]	@ (81029c4 <HAL_TIM_IC_CaptureCallback+0x70>)
 81029aa:	2202      	movs	r2, #2
 81029ac:	601a      	str	r2, [r3, #0]
}
 81029ae:	e002      	b.n	81029b6 <HAL_TIM_IC_CaptureCallback+0x62>
					mode = 1;
 81029b0:	4b04      	ldr	r3, [pc, #16]	@ (81029c4 <HAL_TIM_IC_CaptureCallback+0x70>)
 81029b2:	2201      	movs	r2, #1
 81029b4:	601a      	str	r2, [r3, #0]
}
 81029b6:	bf00      	nop
 81029b8:	3710      	adds	r7, #16
 81029ba:	46bd      	mov	sp, r7
 81029bc:	bd80      	pop	{r7, pc}
 81029be:	bf00      	nop
 81029c0:	10000324 	.word	0x10000324
 81029c4:	10000408 	.word	0x10000408

081029c8 <__io_putchar>:


int __io_putchar(int ch){
 81029c8:	b580      	push	{r7, lr}
 81029ca:	b082      	sub	sp, #8
 81029cc:	af00      	add	r7, sp, #0
 81029ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xffff);
 81029d0:	1d39      	adds	r1, r7, #4
 81029d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 81029d6:	2201      	movs	r2, #1
 81029d8:	4803      	ldr	r0, [pc, #12]	@ (81029e8 <__io_putchar+0x20>)
 81029da:	f005 fe17 	bl	810860c <HAL_UART_Transmit>
	return ch;
 81029de:	687b      	ldr	r3, [r7, #4]
}
 81029e0:	4618      	mov	r0, r3
 81029e2:	3708      	adds	r7, #8
 81029e4:	46bd      	mov	sp, r7
 81029e6:	bd80      	pop	{r7, pc}
 81029e8:	10000370 	.word	0x10000370

081029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81029ec:	b480      	push	{r7}
 81029ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81029f0:	b672      	cpsid	i
}
 81029f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81029f4:	bf00      	nop
 81029f6:	e7fd      	b.n	81029f4 <Error_Handler+0x8>

081029f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81029f8:	b480      	push	{r7}
 81029fa:	b083      	sub	sp, #12
 81029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81029fe:	4b0a      	ldr	r3, [pc, #40]	@ (8102a28 <HAL_MspInit+0x30>)
 8102a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102a04:	4a08      	ldr	r2, [pc, #32]	@ (8102a28 <HAL_MspInit+0x30>)
 8102a06:	f043 0302 	orr.w	r3, r3, #2
 8102a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102a0e:	4b06      	ldr	r3, [pc, #24]	@ (8102a28 <HAL_MspInit+0x30>)
 8102a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102a14:	f003 0302 	and.w	r3, r3, #2
 8102a18:	607b      	str	r3, [r7, #4]
 8102a1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102a1c:	bf00      	nop
 8102a1e:	370c      	adds	r7, #12
 8102a20:	46bd      	mov	sp, r7
 8102a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a26:	4770      	bx	lr
 8102a28:	58024400 	.word	0x58024400

08102a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102a2c:	b580      	push	{r7, lr}
 8102a2e:	b0ba      	sub	sp, #232	@ 0xe8
 8102a30:	af00      	add	r7, sp, #0
 8102a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102a38:	2200      	movs	r2, #0
 8102a3a:	601a      	str	r2, [r3, #0]
 8102a3c:	605a      	str	r2, [r3, #4]
 8102a3e:	609a      	str	r2, [r3, #8]
 8102a40:	60da      	str	r2, [r3, #12]
 8102a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102a44:	f107 0310 	add.w	r3, r7, #16
 8102a48:	22c0      	movs	r2, #192	@ 0xc0
 8102a4a:	2100      	movs	r1, #0
 8102a4c:	4618      	mov	r0, r3
 8102a4e:	f007 ff8b 	bl	810a968 <memset>
  if(hi2c->Instance==I2C1)
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	4a26      	ldr	r2, [pc, #152]	@ (8102af0 <HAL_I2C_MspInit+0xc4>)
 8102a58:	4293      	cmp	r3, r2
 8102a5a:	d145      	bne.n	8102ae8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102a5c:	f04f 0208 	mov.w	r2, #8
 8102a60:	f04f 0300 	mov.w	r3, #0
 8102a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102a68:	2300      	movs	r3, #0
 8102a6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a6e:	f107 0310 	add.w	r3, r7, #16
 8102a72:	4618      	mov	r0, r3
 8102a74:	f001 ff06 	bl	8104884 <HAL_RCCEx_PeriphCLKConfig>
 8102a78:	4603      	mov	r3, r0
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d001      	beq.n	8102a82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102a7e:	f7ff ffb5 	bl	81029ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102a82:	4b1c      	ldr	r3, [pc, #112]	@ (8102af4 <HAL_I2C_MspInit+0xc8>)
 8102a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102a88:	4a1a      	ldr	r2, [pc, #104]	@ (8102af4 <HAL_I2C_MspInit+0xc8>)
 8102a8a:	f043 0302 	orr.w	r3, r3, #2
 8102a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102a92:	4b18      	ldr	r3, [pc, #96]	@ (8102af4 <HAL_I2C_MspInit+0xc8>)
 8102a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102a98:	f003 0302 	and.w	r3, r3, #2
 8102a9c:	60fb      	str	r3, [r7, #12]
 8102a9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102aa0:	23c0      	movs	r3, #192	@ 0xc0
 8102aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102aa6:	2312      	movs	r3, #18
 8102aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102aac:	2300      	movs	r3, #0
 8102aae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102ab2:	2300      	movs	r3, #0
 8102ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102ab8:	2304      	movs	r3, #4
 8102aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102abe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102ac2:	4619      	mov	r1, r3
 8102ac4:	480c      	ldr	r0, [pc, #48]	@ (8102af8 <HAL_I2C_MspInit+0xcc>)
 8102ac6:	f000 fcb9 	bl	810343c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102aca:	4b0a      	ldr	r3, [pc, #40]	@ (8102af4 <HAL_I2C_MspInit+0xc8>)
 8102acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102ad0:	4a08      	ldr	r2, [pc, #32]	@ (8102af4 <HAL_I2C_MspInit+0xc8>)
 8102ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102ada:	4b06      	ldr	r3, [pc, #24]	@ (8102af4 <HAL_I2C_MspInit+0xc8>)
 8102adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102ae4:	60bb      	str	r3, [r7, #8]
 8102ae6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8102ae8:	bf00      	nop
 8102aea:	37e8      	adds	r7, #232	@ 0xe8
 8102aec:	46bd      	mov	sp, r7
 8102aee:	bd80      	pop	{r7, pc}
 8102af0:	40005400 	.word	0x40005400
 8102af4:	58024400 	.word	0x58024400
 8102af8:	58020400 	.word	0x58020400

08102afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102afc:	b580      	push	{r7, lr}
 8102afe:	b08c      	sub	sp, #48	@ 0x30
 8102b00:	af00      	add	r7, sp, #0
 8102b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b04:	f107 031c 	add.w	r3, r7, #28
 8102b08:	2200      	movs	r2, #0
 8102b0a:	601a      	str	r2, [r3, #0]
 8102b0c:	605a      	str	r2, [r3, #4]
 8102b0e:	609a      	str	r2, [r3, #8]
 8102b10:	60da      	str	r2, [r3, #12]
 8102b12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	4a37      	ldr	r2, [pc, #220]	@ (8102bf8 <HAL_TIM_Base_MspInit+0xfc>)
 8102b1a:	4293      	cmp	r3, r2
 8102b1c:	d117      	bne.n	8102b4e <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102b1e:	4b37      	ldr	r3, [pc, #220]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102b24:	4a35      	ldr	r2, [pc, #212]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b26:	f043 0301 	orr.w	r3, r3, #1
 8102b2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102b2e:	4b33      	ldr	r3, [pc, #204]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102b34:	f003 0301 	and.w	r3, r3, #1
 8102b38:	61bb      	str	r3, [r7, #24]
 8102b3a:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8102b3c:	2200      	movs	r2, #0
 8102b3e:	2100      	movs	r1, #0
 8102b40:	2019      	movs	r0, #25
 8102b42:	f000 fc32 	bl	81033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8102b46:	2019      	movs	r0, #25
 8102b48:	f000 fc49 	bl	81033de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8102b4c:	e04f      	b.n	8102bee <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8102b4e:	687b      	ldr	r3, [r7, #4]
 8102b50:	681b      	ldr	r3, [r3, #0]
 8102b52:	4a2b      	ldr	r2, [pc, #172]	@ (8102c00 <HAL_TIM_Base_MspInit+0x104>)
 8102b54:	4293      	cmp	r3, r2
 8102b56:	d10f      	bne.n	8102b78 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102b58:	4b28      	ldr	r3, [pc, #160]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b5e:	4a27      	ldr	r2, [pc, #156]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b60:	f043 0302 	orr.w	r3, r3, #2
 8102b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102b68:	4b24      	ldr	r3, [pc, #144]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b6e:	f003 0302 	and.w	r3, r3, #2
 8102b72:	617b      	str	r3, [r7, #20]
 8102b74:	697b      	ldr	r3, [r7, #20]
}
 8102b76:	e03a      	b.n	8102bee <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM5)
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	4a21      	ldr	r2, [pc, #132]	@ (8102c04 <HAL_TIM_Base_MspInit+0x108>)
 8102b7e:	4293      	cmp	r3, r2
 8102b80:	d135      	bne.n	8102bee <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8102b82:	4b1e      	ldr	r3, [pc, #120]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b88:	4a1c      	ldr	r2, [pc, #112]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b8a:	f043 0308 	orr.w	r3, r3, #8
 8102b8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102b92:	4b1a      	ldr	r3, [pc, #104]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102b94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b98:	f003 0308 	and.w	r3, r3, #8
 8102b9c:	613b      	str	r3, [r7, #16]
 8102b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102ba0:	4b16      	ldr	r3, [pc, #88]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102ba6:	4a15      	ldr	r2, [pc, #84]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102ba8:	f043 0301 	orr.w	r3, r3, #1
 8102bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102bb0:	4b12      	ldr	r3, [pc, #72]	@ (8102bfc <HAL_TIM_Base_MspInit+0x100>)
 8102bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102bb6:	f003 0301 	and.w	r3, r3, #1
 8102bba:	60fb      	str	r3, [r7, #12]
 8102bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102bbe:	2301      	movs	r3, #1
 8102bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102bc2:	2302      	movs	r3, #2
 8102bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102bc6:	2300      	movs	r3, #0
 8102bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102bca:	2300      	movs	r3, #0
 8102bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8102bce:	2302      	movs	r3, #2
 8102bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102bd2:	f107 031c 	add.w	r3, r7, #28
 8102bd6:	4619      	mov	r1, r3
 8102bd8:	480b      	ldr	r0, [pc, #44]	@ (8102c08 <HAL_TIM_Base_MspInit+0x10c>)
 8102bda:	f000 fc2f 	bl	810343c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8102bde:	2200      	movs	r2, #0
 8102be0:	2100      	movs	r1, #0
 8102be2:	2032      	movs	r0, #50	@ 0x32
 8102be4:	f000 fbe1 	bl	81033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102be8:	2032      	movs	r0, #50	@ 0x32
 8102bea:	f000 fbf8 	bl	81033de <HAL_NVIC_EnableIRQ>
}
 8102bee:	bf00      	nop
 8102bf0:	3730      	adds	r7, #48	@ 0x30
 8102bf2:	46bd      	mov	sp, r7
 8102bf4:	bd80      	pop	{r7, pc}
 8102bf6:	bf00      	nop
 8102bf8:	40010000 	.word	0x40010000
 8102bfc:	58024400 	.word	0x58024400
 8102c00:	40000400 	.word	0x40000400
 8102c04:	40000c00 	.word	0x40000c00
 8102c08:	58020000 	.word	0x58020000

08102c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102c0c:	b580      	push	{r7, lr}
 8102c0e:	b08a      	sub	sp, #40	@ 0x28
 8102c10:	af00      	add	r7, sp, #0
 8102c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c14:	f107 0314 	add.w	r3, r7, #20
 8102c18:	2200      	movs	r2, #0
 8102c1a:	601a      	str	r2, [r3, #0]
 8102c1c:	605a      	str	r2, [r3, #4]
 8102c1e:	609a      	str	r2, [r3, #8]
 8102c20:	60da      	str	r2, [r3, #12]
 8102c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	4a32      	ldr	r2, [pc, #200]	@ (8102cf4 <HAL_TIM_MspPostInit+0xe8>)
 8102c2a:	4293      	cmp	r3, r2
 8102c2c:	d15d      	bne.n	8102cea <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102c2e:	4b32      	ldr	r3, [pc, #200]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c34:	4a30      	ldr	r2, [pc, #192]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c36:	f043 0301 	orr.w	r3, r3, #1
 8102c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c44:	f003 0301 	and.w	r3, r3, #1
 8102c48:	613b      	str	r3, [r7, #16]
 8102c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c52:	4a29      	ldr	r2, [pc, #164]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c54:	f043 0302 	orr.w	r3, r3, #2
 8102c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c5c:	4b26      	ldr	r3, [pc, #152]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c62:	f003 0302 	and.w	r3, r3, #2
 8102c66:	60fb      	str	r3, [r7, #12]
 8102c68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102c6a:	4b23      	ldr	r3, [pc, #140]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c70:	4a21      	ldr	r2, [pc, #132]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c72:	f043 0304 	orr.w	r3, r3, #4
 8102c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8102cf8 <HAL_TIM_MspPostInit+0xec>)
 8102c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c80:	f003 0304 	and.w	r3, r3, #4
 8102c84:	60bb      	str	r3, [r7, #8]
 8102c86:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8102c88:	2340      	movs	r3, #64	@ 0x40
 8102c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c8c:	2302      	movs	r3, #2
 8102c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c90:	2300      	movs	r3, #0
 8102c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c94:	2300      	movs	r3, #0
 8102c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102c98:	2302      	movs	r3, #2
 8102c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102c9c:	f107 0314 	add.w	r3, r7, #20
 8102ca0:	4619      	mov	r1, r3
 8102ca2:	4816      	ldr	r0, [pc, #88]	@ (8102cfc <HAL_TIM_MspPostInit+0xf0>)
 8102ca4:	f000 fbca 	bl	810343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8102ca8:	2302      	movs	r3, #2
 8102caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102cac:	2302      	movs	r3, #2
 8102cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cb0:	2300      	movs	r3, #0
 8102cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cb4:	2300      	movs	r3, #0
 8102cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102cb8:	2302      	movs	r3, #2
 8102cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102cbc:	f107 0314 	add.w	r3, r7, #20
 8102cc0:	4619      	mov	r1, r3
 8102cc2:	480f      	ldr	r0, [pc, #60]	@ (8102d00 <HAL_TIM_MspPostInit+0xf4>)
 8102cc4:	f000 fbba 	bl	810343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8102cc8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8102ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102cce:	2302      	movs	r3, #2
 8102cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cd2:	2300      	movs	r3, #0
 8102cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cd6:	2300      	movs	r3, #0
 8102cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102cda:	2302      	movs	r3, #2
 8102cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102cde:	f107 0314 	add.w	r3, r7, #20
 8102ce2:	4619      	mov	r1, r3
 8102ce4:	4807      	ldr	r0, [pc, #28]	@ (8102d04 <HAL_TIM_MspPostInit+0xf8>)
 8102ce6:	f000 fba9 	bl	810343c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102cea:	bf00      	nop
 8102cec:	3728      	adds	r7, #40	@ 0x28
 8102cee:	46bd      	mov	sp, r7
 8102cf0:	bd80      	pop	{r7, pc}
 8102cf2:	bf00      	nop
 8102cf4:	40000400 	.word	0x40000400
 8102cf8:	58024400 	.word	0x58024400
 8102cfc:	58020000 	.word	0x58020000
 8102d00:	58020400 	.word	0x58020400
 8102d04:	58020800 	.word	0x58020800

08102d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102d08:	b580      	push	{r7, lr}
 8102d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8102d0c:	af00      	add	r7, sp, #0
 8102d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102d14:	2200      	movs	r2, #0
 8102d16:	601a      	str	r2, [r3, #0]
 8102d18:	605a      	str	r2, [r3, #4]
 8102d1a:	609a      	str	r2, [r3, #8]
 8102d1c:	60da      	str	r2, [r3, #12]
 8102d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102d20:	f107 0310 	add.w	r3, r7, #16
 8102d24:	22c0      	movs	r2, #192	@ 0xc0
 8102d26:	2100      	movs	r1, #0
 8102d28:	4618      	mov	r0, r3
 8102d2a:	f007 fe1d 	bl	810a968 <memset>
  if(huart->Instance==USART3)
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	4a27      	ldr	r2, [pc, #156]	@ (8102dd0 <HAL_UART_MspInit+0xc8>)
 8102d34:	4293      	cmp	r3, r2
 8102d36:	d146      	bne.n	8102dc6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102d38:	f04f 0202 	mov.w	r2, #2
 8102d3c:	f04f 0300 	mov.w	r3, #0
 8102d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102d44:	2300      	movs	r3, #0
 8102d46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102d4a:	f107 0310 	add.w	r3, r7, #16
 8102d4e:	4618      	mov	r0, r3
 8102d50:	f001 fd98 	bl	8104884 <HAL_RCCEx_PeriphCLKConfig>
 8102d54:	4603      	mov	r3, r0
 8102d56:	2b00      	cmp	r3, #0
 8102d58:	d001      	beq.n	8102d5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102d5a:	f7ff fe47 	bl	81029ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8102dd4 <HAL_UART_MspInit+0xcc>)
 8102d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d64:	4a1b      	ldr	r2, [pc, #108]	@ (8102dd4 <HAL_UART_MspInit+0xcc>)
 8102d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8102d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102d6e:	4b19      	ldr	r3, [pc, #100]	@ (8102dd4 <HAL_UART_MspInit+0xcc>)
 8102d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102d78:	60fb      	str	r3, [r7, #12]
 8102d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102d7c:	4b15      	ldr	r3, [pc, #84]	@ (8102dd4 <HAL_UART_MspInit+0xcc>)
 8102d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d82:	4a14      	ldr	r2, [pc, #80]	@ (8102dd4 <HAL_UART_MspInit+0xcc>)
 8102d84:	f043 0308 	orr.w	r3, r3, #8
 8102d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d8c:	4b11      	ldr	r3, [pc, #68]	@ (8102dd4 <HAL_UART_MspInit+0xcc>)
 8102d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d92:	f003 0308 	and.w	r3, r3, #8
 8102d96:	60bb      	str	r3, [r7, #8]
 8102d98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102d9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102da2:	2302      	movs	r3, #2
 8102da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102da8:	2300      	movs	r3, #0
 8102daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102dae:	2300      	movs	r3, #0
 8102db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102db4:	2307      	movs	r3, #7
 8102db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102dba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102dbe:	4619      	mov	r1, r3
 8102dc0:	4805      	ldr	r0, [pc, #20]	@ (8102dd8 <HAL_UART_MspInit+0xd0>)
 8102dc2:	f000 fb3b 	bl	810343c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8102dc6:	bf00      	nop
 8102dc8:	37e8      	adds	r7, #232	@ 0xe8
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	bd80      	pop	{r7, pc}
 8102dce:	bf00      	nop
 8102dd0:	40004800 	.word	0x40004800
 8102dd4:	58024400 	.word	0x58024400
 8102dd8:	58020c00 	.word	0x58020c00

08102ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102ddc:	b480      	push	{r7}
 8102dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102de0:	bf00      	nop
 8102de2:	e7fd      	b.n	8102de0 <NMI_Handler+0x4>

08102de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102de4:	b480      	push	{r7}
 8102de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102de8:	bf00      	nop
 8102dea:	e7fd      	b.n	8102de8 <HardFault_Handler+0x4>

08102dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102dec:	b480      	push	{r7}
 8102dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102df0:	bf00      	nop
 8102df2:	e7fd      	b.n	8102df0 <MemManage_Handler+0x4>

08102df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102df4:	b480      	push	{r7}
 8102df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102df8:	bf00      	nop
 8102dfa:	e7fd      	b.n	8102df8 <BusFault_Handler+0x4>

08102dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102dfc:	b480      	push	{r7}
 8102dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102e00:	bf00      	nop
 8102e02:	e7fd      	b.n	8102e00 <UsageFault_Handler+0x4>

08102e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102e04:	b480      	push	{r7}
 8102e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102e08:	bf00      	nop
 8102e0a:	46bd      	mov	sp, r7
 8102e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e10:	4770      	bx	lr

08102e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102e12:	b480      	push	{r7}
 8102e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102e16:	bf00      	nop
 8102e18:	46bd      	mov	sp, r7
 8102e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e1e:	4770      	bx	lr

08102e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102e20:	b480      	push	{r7}
 8102e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102e24:	bf00      	nop
 8102e26:	46bd      	mov	sp, r7
 8102e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2c:	4770      	bx	lr

08102e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102e2e:	b580      	push	{r7, lr}
 8102e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102e32:	f000 f99b 	bl	810316c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102e36:	bf00      	nop
 8102e38:	bd80      	pop	{r7, pc}
	...

08102e3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8102e3c:	b580      	push	{r7, lr}
 8102e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8102e40:	4802      	ldr	r0, [pc, #8]	@ (8102e4c <TIM1_UP_IRQHandler+0x10>)
 8102e42:	f004 f841 	bl	8106ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8102e46:	bf00      	nop
 8102e48:	bd80      	pop	{r7, pc}
 8102e4a:	bf00      	nop
 8102e4c:	1000028c 	.word	0x1000028c

08102e50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8102e50:	b580      	push	{r7, lr}
 8102e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8102e54:	4802      	ldr	r0, [pc, #8]	@ (8102e60 <TIM5_IRQHandler+0x10>)
 8102e56:	f004 f837 	bl	8106ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8102e5a:	bf00      	nop
 8102e5c:	bd80      	pop	{r7, pc}
 8102e5e:	bf00      	nop
 8102e60:	10000324 	.word	0x10000324

08102e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102e64:	b480      	push	{r7}
 8102e66:	af00      	add	r7, sp, #0
  return 1;
 8102e68:	2301      	movs	r3, #1
}
 8102e6a:	4618      	mov	r0, r3
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e72:	4770      	bx	lr

08102e74 <_kill>:

int _kill(int pid, int sig)
{
 8102e74:	b580      	push	{r7, lr}
 8102e76:	b082      	sub	sp, #8
 8102e78:	af00      	add	r7, sp, #0
 8102e7a:	6078      	str	r0, [r7, #4]
 8102e7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102e7e:	f007 fdc5 	bl	810aa0c <__errno>
 8102e82:	4603      	mov	r3, r0
 8102e84:	2216      	movs	r2, #22
 8102e86:	601a      	str	r2, [r3, #0]
  return -1;
 8102e88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8102e8c:	4618      	mov	r0, r3
 8102e8e:	3708      	adds	r7, #8
 8102e90:	46bd      	mov	sp, r7
 8102e92:	bd80      	pop	{r7, pc}

08102e94 <_exit>:

void _exit (int status)
{
 8102e94:	b580      	push	{r7, lr}
 8102e96:	b082      	sub	sp, #8
 8102e98:	af00      	add	r7, sp, #0
 8102e9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8102ea0:	6878      	ldr	r0, [r7, #4]
 8102ea2:	f7ff ffe7 	bl	8102e74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8102ea6:	bf00      	nop
 8102ea8:	e7fd      	b.n	8102ea6 <_exit+0x12>

08102eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102eaa:	b580      	push	{r7, lr}
 8102eac:	b086      	sub	sp, #24
 8102eae:	af00      	add	r7, sp, #0
 8102eb0:	60f8      	str	r0, [r7, #12]
 8102eb2:	60b9      	str	r1, [r7, #8]
 8102eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102eb6:	2300      	movs	r3, #0
 8102eb8:	617b      	str	r3, [r7, #20]
 8102eba:	e00a      	b.n	8102ed2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102ebc:	f3af 8000 	nop.w
 8102ec0:	4601      	mov	r1, r0
 8102ec2:	68bb      	ldr	r3, [r7, #8]
 8102ec4:	1c5a      	adds	r2, r3, #1
 8102ec6:	60ba      	str	r2, [r7, #8]
 8102ec8:	b2ca      	uxtb	r2, r1
 8102eca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102ecc:	697b      	ldr	r3, [r7, #20]
 8102ece:	3301      	adds	r3, #1
 8102ed0:	617b      	str	r3, [r7, #20]
 8102ed2:	697a      	ldr	r2, [r7, #20]
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	429a      	cmp	r2, r3
 8102ed8:	dbf0      	blt.n	8102ebc <_read+0x12>
  }

  return len;
 8102eda:	687b      	ldr	r3, [r7, #4]
}
 8102edc:	4618      	mov	r0, r3
 8102ede:	3718      	adds	r7, #24
 8102ee0:	46bd      	mov	sp, r7
 8102ee2:	bd80      	pop	{r7, pc}

08102ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102ee4:	b580      	push	{r7, lr}
 8102ee6:	b086      	sub	sp, #24
 8102ee8:	af00      	add	r7, sp, #0
 8102eea:	60f8      	str	r0, [r7, #12]
 8102eec:	60b9      	str	r1, [r7, #8]
 8102eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102ef0:	2300      	movs	r3, #0
 8102ef2:	617b      	str	r3, [r7, #20]
 8102ef4:	e009      	b.n	8102f0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102ef6:	68bb      	ldr	r3, [r7, #8]
 8102ef8:	1c5a      	adds	r2, r3, #1
 8102efa:	60ba      	str	r2, [r7, #8]
 8102efc:	781b      	ldrb	r3, [r3, #0]
 8102efe:	4618      	mov	r0, r3
 8102f00:	f7ff fd62 	bl	81029c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102f04:	697b      	ldr	r3, [r7, #20]
 8102f06:	3301      	adds	r3, #1
 8102f08:	617b      	str	r3, [r7, #20]
 8102f0a:	697a      	ldr	r2, [r7, #20]
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	429a      	cmp	r2, r3
 8102f10:	dbf1      	blt.n	8102ef6 <_write+0x12>
  }
  return len;
 8102f12:	687b      	ldr	r3, [r7, #4]
}
 8102f14:	4618      	mov	r0, r3
 8102f16:	3718      	adds	r7, #24
 8102f18:	46bd      	mov	sp, r7
 8102f1a:	bd80      	pop	{r7, pc}

08102f1c <_close>:

int _close(int file)
{
 8102f1c:	b480      	push	{r7}
 8102f1e:	b083      	sub	sp, #12
 8102f20:	af00      	add	r7, sp, #0
 8102f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8102f28:	4618      	mov	r0, r3
 8102f2a:	370c      	adds	r7, #12
 8102f2c:	46bd      	mov	sp, r7
 8102f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f32:	4770      	bx	lr

08102f34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102f34:	b480      	push	{r7}
 8102f36:	b083      	sub	sp, #12
 8102f38:	af00      	add	r7, sp, #0
 8102f3a:	6078      	str	r0, [r7, #4]
 8102f3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102f3e:	683b      	ldr	r3, [r7, #0]
 8102f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8102f44:	605a      	str	r2, [r3, #4]
  return 0;
 8102f46:	2300      	movs	r3, #0
}
 8102f48:	4618      	mov	r0, r3
 8102f4a:	370c      	adds	r7, #12
 8102f4c:	46bd      	mov	sp, r7
 8102f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f52:	4770      	bx	lr

08102f54 <_isatty>:

int _isatty(int file)
{
 8102f54:	b480      	push	{r7}
 8102f56:	b083      	sub	sp, #12
 8102f58:	af00      	add	r7, sp, #0
 8102f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102f5c:	2301      	movs	r3, #1
}
 8102f5e:	4618      	mov	r0, r3
 8102f60:	370c      	adds	r7, #12
 8102f62:	46bd      	mov	sp, r7
 8102f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f68:	4770      	bx	lr

08102f6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102f6a:	b480      	push	{r7}
 8102f6c:	b085      	sub	sp, #20
 8102f6e:	af00      	add	r7, sp, #0
 8102f70:	60f8      	str	r0, [r7, #12]
 8102f72:	60b9      	str	r1, [r7, #8]
 8102f74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102f76:	2300      	movs	r3, #0
}
 8102f78:	4618      	mov	r0, r3
 8102f7a:	3714      	adds	r7, #20
 8102f7c:	46bd      	mov	sp, r7
 8102f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f82:	4770      	bx	lr

08102f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102f84:	b580      	push	{r7, lr}
 8102f86:	b086      	sub	sp, #24
 8102f88:	af00      	add	r7, sp, #0
 8102f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102f8c:	4a14      	ldr	r2, [pc, #80]	@ (8102fe0 <_sbrk+0x5c>)
 8102f8e:	4b15      	ldr	r3, [pc, #84]	@ (8102fe4 <_sbrk+0x60>)
 8102f90:	1ad3      	subs	r3, r2, r3
 8102f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102f94:	697b      	ldr	r3, [r7, #20]
 8102f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102f98:	4b13      	ldr	r3, [pc, #76]	@ (8102fe8 <_sbrk+0x64>)
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	2b00      	cmp	r3, #0
 8102f9e:	d102      	bne.n	8102fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102fa0:	4b11      	ldr	r3, [pc, #68]	@ (8102fe8 <_sbrk+0x64>)
 8102fa2:	4a12      	ldr	r2, [pc, #72]	@ (8102fec <_sbrk+0x68>)
 8102fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102fa6:	4b10      	ldr	r3, [pc, #64]	@ (8102fe8 <_sbrk+0x64>)
 8102fa8:	681a      	ldr	r2, [r3, #0]
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	4413      	add	r3, r2
 8102fae:	693a      	ldr	r2, [r7, #16]
 8102fb0:	429a      	cmp	r2, r3
 8102fb2:	d207      	bcs.n	8102fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102fb4:	f007 fd2a 	bl	810aa0c <__errno>
 8102fb8:	4603      	mov	r3, r0
 8102fba:	220c      	movs	r2, #12
 8102fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8102fc2:	e009      	b.n	8102fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102fc4:	4b08      	ldr	r3, [pc, #32]	@ (8102fe8 <_sbrk+0x64>)
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102fca:	4b07      	ldr	r3, [pc, #28]	@ (8102fe8 <_sbrk+0x64>)
 8102fcc:	681a      	ldr	r2, [r3, #0]
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	4413      	add	r3, r2
 8102fd2:	4a05      	ldr	r2, [pc, #20]	@ (8102fe8 <_sbrk+0x64>)
 8102fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102fd6:	68fb      	ldr	r3, [r7, #12]
}
 8102fd8:	4618      	mov	r0, r3
 8102fda:	3718      	adds	r7, #24
 8102fdc:	46bd      	mov	sp, r7
 8102fde:	bd80      	pop	{r7, pc}
 8102fe0:	10048000 	.word	0x10048000
 8102fe4:	00000400 	.word	0x00000400
 8102fe8:	10000470 	.word	0x10000470
 8102fec:	100005c8 	.word	0x100005c8

08102ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102ff0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103028 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102ff4:	f7fe f87e 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102ff8:	480c      	ldr	r0, [pc, #48]	@ (810302c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102ffa:	490d      	ldr	r1, [pc, #52]	@ (8103030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8103034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103000:	e002      	b.n	8103008 <LoopCopyDataInit>

08103002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103006:	3304      	adds	r3, #4

08103008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810300c:	d3f9      	bcc.n	8103002 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810300e:	4a0a      	ldr	r2, [pc, #40]	@ (8103038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103010:	4c0a      	ldr	r4, [pc, #40]	@ (810303c <LoopFillZerobss+0x22>)
  movs r3, #0
 8103012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103014:	e001      	b.n	810301a <LoopFillZerobss>

08103016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103018:	3204      	adds	r2, #4

0810301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810301c:	d3fb      	bcc.n	8103016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810301e:	f007 fcfb 	bl	810aa18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103022:	f7fe febf 	bl	8101da4 <main>
  bx  lr
 8103026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103028:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810302c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103030:	100001f8 	.word	0x100001f8
  ldr r2, =_sidata
 8103034:	0810ec40 	.word	0x0810ec40
  ldr r2, =_sbss
 8103038:	100001f8 	.word	0x100001f8
  ldr r4, =_ebss
 810303c:	100005c4 	.word	0x100005c4

08103040 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103040:	e7fe      	b.n	8103040 <ADC3_IRQHandler>
	...

08103044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103044:	b580      	push	{r7, lr}
 8103046:	b082      	sub	sp, #8
 8103048:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810304a:	4b28      	ldr	r3, [pc, #160]	@ (81030ec <HAL_Init+0xa8>)
 810304c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103050:	4a26      	ldr	r2, [pc, #152]	@ (81030ec <HAL_Init+0xa8>)
 8103052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103056:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810305a:	4b24      	ldr	r3, [pc, #144]	@ (81030ec <HAL_Init+0xa8>)
 810305c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8103064:	603b      	str	r3, [r7, #0]
 8103066:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103068:	4b21      	ldr	r3, [pc, #132]	@ (81030f0 <HAL_Init+0xac>)
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103070:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8103074:	4a1e      	ldr	r2, [pc, #120]	@ (81030f0 <HAL_Init+0xac>)
 8103076:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810307a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810307c:	4b1c      	ldr	r3, [pc, #112]	@ (81030f0 <HAL_Init+0xac>)
 810307e:	681b      	ldr	r3, [r3, #0]
 8103080:	4a1b      	ldr	r2, [pc, #108]	@ (81030f0 <HAL_Init+0xac>)
 8103082:	f043 0301 	orr.w	r3, r3, #1
 8103086:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103088:	2003      	movs	r0, #3
 810308a:	f000 f983 	bl	8103394 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810308e:	f001 fa21 	bl	81044d4 <HAL_RCC_GetSysClockFreq>
 8103092:	4602      	mov	r2, r0
 8103094:	4b15      	ldr	r3, [pc, #84]	@ (81030ec <HAL_Init+0xa8>)
 8103096:	699b      	ldr	r3, [r3, #24]
 8103098:	0a1b      	lsrs	r3, r3, #8
 810309a:	f003 030f 	and.w	r3, r3, #15
 810309e:	4915      	ldr	r1, [pc, #84]	@ (81030f4 <HAL_Init+0xb0>)
 81030a0:	5ccb      	ldrb	r3, [r1, r3]
 81030a2:	f003 031f 	and.w	r3, r3, #31
 81030a6:	fa22 f303 	lsr.w	r3, r2, r3
 81030aa:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81030ac:	4b0f      	ldr	r3, [pc, #60]	@ (81030ec <HAL_Init+0xa8>)
 81030ae:	699b      	ldr	r3, [r3, #24]
 81030b0:	f003 030f 	and.w	r3, r3, #15
 81030b4:	4a0f      	ldr	r2, [pc, #60]	@ (81030f4 <HAL_Init+0xb0>)
 81030b6:	5cd3      	ldrb	r3, [r2, r3]
 81030b8:	f003 031f 	and.w	r3, r3, #31
 81030bc:	687a      	ldr	r2, [r7, #4]
 81030be:	fa22 f303 	lsr.w	r3, r2, r3
 81030c2:	4a0d      	ldr	r2, [pc, #52]	@ (81030f8 <HAL_Init+0xb4>)
 81030c4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81030c6:	4b0c      	ldr	r3, [pc, #48]	@ (81030f8 <HAL_Init+0xb4>)
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	4a0c      	ldr	r2, [pc, #48]	@ (81030fc <HAL_Init+0xb8>)
 81030cc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81030ce:	2000      	movs	r0, #0
 81030d0:	f000 f816 	bl	8103100 <HAL_InitTick>
 81030d4:	4603      	mov	r3, r0
 81030d6:	2b00      	cmp	r3, #0
 81030d8:	d001      	beq.n	81030de <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81030da:	2301      	movs	r3, #1
 81030dc:	e002      	b.n	81030e4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81030de:	f7ff fc8b 	bl	81029f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81030e2:	2300      	movs	r3, #0
}
 81030e4:	4618      	mov	r0, r3
 81030e6:	3708      	adds	r7, #8
 81030e8:	46bd      	mov	sp, r7
 81030ea:	bd80      	pop	{r7, pc}
 81030ec:	58024400 	.word	0x58024400
 81030f0:	40024400 	.word	0x40024400
 81030f4:	0810e7cc 	.word	0x0810e7cc
 81030f8:	10000004 	.word	0x10000004
 81030fc:	10000000 	.word	0x10000000

08103100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103100:	b580      	push	{r7, lr}
 8103102:	b082      	sub	sp, #8
 8103104:	af00      	add	r7, sp, #0
 8103106:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103108:	4b15      	ldr	r3, [pc, #84]	@ (8103160 <HAL_InitTick+0x60>)
 810310a:	781b      	ldrb	r3, [r3, #0]
 810310c:	2b00      	cmp	r3, #0
 810310e:	d101      	bne.n	8103114 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103110:	2301      	movs	r3, #1
 8103112:	e021      	b.n	8103158 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103114:	4b13      	ldr	r3, [pc, #76]	@ (8103164 <HAL_InitTick+0x64>)
 8103116:	681a      	ldr	r2, [r3, #0]
 8103118:	4b11      	ldr	r3, [pc, #68]	@ (8103160 <HAL_InitTick+0x60>)
 810311a:	781b      	ldrb	r3, [r3, #0]
 810311c:	4619      	mov	r1, r3
 810311e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8103122:	fbb3 f3f1 	udiv	r3, r3, r1
 8103126:	fbb2 f3f3 	udiv	r3, r2, r3
 810312a:	4618      	mov	r0, r3
 810312c:	f000 f965 	bl	81033fa <HAL_SYSTICK_Config>
 8103130:	4603      	mov	r3, r0
 8103132:	2b00      	cmp	r3, #0
 8103134:	d001      	beq.n	810313a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103136:	2301      	movs	r3, #1
 8103138:	e00e      	b.n	8103158 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	2b0f      	cmp	r3, #15
 810313e:	d80a      	bhi.n	8103156 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103140:	2200      	movs	r2, #0
 8103142:	6879      	ldr	r1, [r7, #4]
 8103144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103148:	f000 f92f 	bl	81033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810314c:	4a06      	ldr	r2, [pc, #24]	@ (8103168 <HAL_InitTick+0x68>)
 810314e:	687b      	ldr	r3, [r7, #4]
 8103150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103152:	2300      	movs	r3, #0
 8103154:	e000      	b.n	8103158 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103156:	2301      	movs	r3, #1
}
 8103158:	4618      	mov	r0, r3
 810315a:	3708      	adds	r7, #8
 810315c:	46bd      	mov	sp, r7
 810315e:	bd80      	pop	{r7, pc}
 8103160:	10000018 	.word	0x10000018
 8103164:	10000000 	.word	0x10000000
 8103168:	10000014 	.word	0x10000014

0810316c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810316c:	b480      	push	{r7}
 810316e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103170:	4b06      	ldr	r3, [pc, #24]	@ (810318c <HAL_IncTick+0x20>)
 8103172:	781b      	ldrb	r3, [r3, #0]
 8103174:	461a      	mov	r2, r3
 8103176:	4b06      	ldr	r3, [pc, #24]	@ (8103190 <HAL_IncTick+0x24>)
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	4413      	add	r3, r2
 810317c:	4a04      	ldr	r2, [pc, #16]	@ (8103190 <HAL_IncTick+0x24>)
 810317e:	6013      	str	r3, [r2, #0]
}
 8103180:	bf00      	nop
 8103182:	46bd      	mov	sp, r7
 8103184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103188:	4770      	bx	lr
 810318a:	bf00      	nop
 810318c:	10000018 	.word	0x10000018
 8103190:	10000474 	.word	0x10000474

08103194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8103194:	b480      	push	{r7}
 8103196:	af00      	add	r7, sp, #0
  return uwTick;
 8103198:	4b03      	ldr	r3, [pc, #12]	@ (81031a8 <HAL_GetTick+0x14>)
 810319a:	681b      	ldr	r3, [r3, #0]
}
 810319c:	4618      	mov	r0, r3
 810319e:	46bd      	mov	sp, r7
 81031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a4:	4770      	bx	lr
 81031a6:	bf00      	nop
 81031a8:	10000474 	.word	0x10000474

081031ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81031ac:	b580      	push	{r7, lr}
 81031ae:	b084      	sub	sp, #16
 81031b0:	af00      	add	r7, sp, #0
 81031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81031b4:	f7ff ffee 	bl	8103194 <HAL_GetTick>
 81031b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81031ba:	687b      	ldr	r3, [r7, #4]
 81031bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81031be:	68fb      	ldr	r3, [r7, #12]
 81031c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81031c4:	d005      	beq.n	81031d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81031c6:	4b0a      	ldr	r3, [pc, #40]	@ (81031f0 <HAL_Delay+0x44>)
 81031c8:	781b      	ldrb	r3, [r3, #0]
 81031ca:	461a      	mov	r2, r3
 81031cc:	68fb      	ldr	r3, [r7, #12]
 81031ce:	4413      	add	r3, r2
 81031d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81031d2:	bf00      	nop
 81031d4:	f7ff ffde 	bl	8103194 <HAL_GetTick>
 81031d8:	4602      	mov	r2, r0
 81031da:	68bb      	ldr	r3, [r7, #8]
 81031dc:	1ad3      	subs	r3, r2, r3
 81031de:	68fa      	ldr	r2, [r7, #12]
 81031e0:	429a      	cmp	r2, r3
 81031e2:	d8f7      	bhi.n	81031d4 <HAL_Delay+0x28>
  {
  }
}
 81031e4:	bf00      	nop
 81031e6:	bf00      	nop
 81031e8:	3710      	adds	r7, #16
 81031ea:	46bd      	mov	sp, r7
 81031ec:	bd80      	pop	{r7, pc}
 81031ee:	bf00      	nop
 81031f0:	10000018 	.word	0x10000018

081031f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81031f4:	b480      	push	{r7}
 81031f6:	b085      	sub	sp, #20
 81031f8:	af00      	add	r7, sp, #0
 81031fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	f003 0307 	and.w	r3, r3, #7
 8103202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103204:	4b0c      	ldr	r3, [pc, #48]	@ (8103238 <__NVIC_SetPriorityGrouping+0x44>)
 8103206:	68db      	ldr	r3, [r3, #12]
 8103208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810320a:	68ba      	ldr	r2, [r7, #8]
 810320c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103210:	4013      	ands	r3, r2
 8103212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103214:	68fb      	ldr	r3, [r7, #12]
 8103216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103218:	68bb      	ldr	r3, [r7, #8]
 810321a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810321c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103226:	4a04      	ldr	r2, [pc, #16]	@ (8103238 <__NVIC_SetPriorityGrouping+0x44>)
 8103228:	68bb      	ldr	r3, [r7, #8]
 810322a:	60d3      	str	r3, [r2, #12]
}
 810322c:	bf00      	nop
 810322e:	3714      	adds	r7, #20
 8103230:	46bd      	mov	sp, r7
 8103232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103236:	4770      	bx	lr
 8103238:	e000ed00 	.word	0xe000ed00

0810323c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810323c:	b480      	push	{r7}
 810323e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103240:	4b04      	ldr	r3, [pc, #16]	@ (8103254 <__NVIC_GetPriorityGrouping+0x18>)
 8103242:	68db      	ldr	r3, [r3, #12]
 8103244:	0a1b      	lsrs	r3, r3, #8
 8103246:	f003 0307 	and.w	r3, r3, #7
}
 810324a:	4618      	mov	r0, r3
 810324c:	46bd      	mov	sp, r7
 810324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103252:	4770      	bx	lr
 8103254:	e000ed00 	.word	0xe000ed00

08103258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103258:	b480      	push	{r7}
 810325a:	b083      	sub	sp, #12
 810325c:	af00      	add	r7, sp, #0
 810325e:	4603      	mov	r3, r0
 8103260:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103266:	2b00      	cmp	r3, #0
 8103268:	db0b      	blt.n	8103282 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810326a:	88fb      	ldrh	r3, [r7, #6]
 810326c:	f003 021f 	and.w	r2, r3, #31
 8103270:	4907      	ldr	r1, [pc, #28]	@ (8103290 <__NVIC_EnableIRQ+0x38>)
 8103272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103276:	095b      	lsrs	r3, r3, #5
 8103278:	2001      	movs	r0, #1
 810327a:	fa00 f202 	lsl.w	r2, r0, r2
 810327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8103282:	bf00      	nop
 8103284:	370c      	adds	r7, #12
 8103286:	46bd      	mov	sp, r7
 8103288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810328c:	4770      	bx	lr
 810328e:	bf00      	nop
 8103290:	e000e100 	.word	0xe000e100

08103294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103294:	b480      	push	{r7}
 8103296:	b083      	sub	sp, #12
 8103298:	af00      	add	r7, sp, #0
 810329a:	4603      	mov	r3, r0
 810329c:	6039      	str	r1, [r7, #0]
 810329e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81032a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032a4:	2b00      	cmp	r3, #0
 81032a6:	db0a      	blt.n	81032be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81032a8:	683b      	ldr	r3, [r7, #0]
 81032aa:	b2da      	uxtb	r2, r3
 81032ac:	490c      	ldr	r1, [pc, #48]	@ (81032e0 <__NVIC_SetPriority+0x4c>)
 81032ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032b2:	0112      	lsls	r2, r2, #4
 81032b4:	b2d2      	uxtb	r2, r2
 81032b6:	440b      	add	r3, r1
 81032b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81032bc:	e00a      	b.n	81032d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81032be:	683b      	ldr	r3, [r7, #0]
 81032c0:	b2da      	uxtb	r2, r3
 81032c2:	4908      	ldr	r1, [pc, #32]	@ (81032e4 <__NVIC_SetPriority+0x50>)
 81032c4:	88fb      	ldrh	r3, [r7, #6]
 81032c6:	f003 030f 	and.w	r3, r3, #15
 81032ca:	3b04      	subs	r3, #4
 81032cc:	0112      	lsls	r2, r2, #4
 81032ce:	b2d2      	uxtb	r2, r2
 81032d0:	440b      	add	r3, r1
 81032d2:	761a      	strb	r2, [r3, #24]
}
 81032d4:	bf00      	nop
 81032d6:	370c      	adds	r7, #12
 81032d8:	46bd      	mov	sp, r7
 81032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032de:	4770      	bx	lr
 81032e0:	e000e100 	.word	0xe000e100
 81032e4:	e000ed00 	.word	0xe000ed00

081032e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81032e8:	b480      	push	{r7}
 81032ea:	b089      	sub	sp, #36	@ 0x24
 81032ec:	af00      	add	r7, sp, #0
 81032ee:	60f8      	str	r0, [r7, #12]
 81032f0:	60b9      	str	r1, [r7, #8]
 81032f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81032f4:	68fb      	ldr	r3, [r7, #12]
 81032f6:	f003 0307 	and.w	r3, r3, #7
 81032fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81032fc:	69fb      	ldr	r3, [r7, #28]
 81032fe:	f1c3 0307 	rsb	r3, r3, #7
 8103302:	2b04      	cmp	r3, #4
 8103304:	bf28      	it	cs
 8103306:	2304      	movcs	r3, #4
 8103308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810330a:	69fb      	ldr	r3, [r7, #28]
 810330c:	3304      	adds	r3, #4
 810330e:	2b06      	cmp	r3, #6
 8103310:	d902      	bls.n	8103318 <NVIC_EncodePriority+0x30>
 8103312:	69fb      	ldr	r3, [r7, #28]
 8103314:	3b03      	subs	r3, #3
 8103316:	e000      	b.n	810331a <NVIC_EncodePriority+0x32>
 8103318:	2300      	movs	r3, #0
 810331a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810331c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103320:	69bb      	ldr	r3, [r7, #24]
 8103322:	fa02 f303 	lsl.w	r3, r2, r3
 8103326:	43da      	mvns	r2, r3
 8103328:	68bb      	ldr	r3, [r7, #8]
 810332a:	401a      	ands	r2, r3
 810332c:	697b      	ldr	r3, [r7, #20]
 810332e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103330:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8103334:	697b      	ldr	r3, [r7, #20]
 8103336:	fa01 f303 	lsl.w	r3, r1, r3
 810333a:	43d9      	mvns	r1, r3
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103340:	4313      	orrs	r3, r2
         );
}
 8103342:	4618      	mov	r0, r3
 8103344:	3724      	adds	r7, #36	@ 0x24
 8103346:	46bd      	mov	sp, r7
 8103348:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334c:	4770      	bx	lr
	...

08103350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103350:	b580      	push	{r7, lr}
 8103352:	b082      	sub	sp, #8
 8103354:	af00      	add	r7, sp, #0
 8103356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	3b01      	subs	r3, #1
 810335c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103360:	d301      	bcc.n	8103366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8103362:	2301      	movs	r3, #1
 8103364:	e00f      	b.n	8103386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8103366:	4a0a      	ldr	r2, [pc, #40]	@ (8103390 <SysTick_Config+0x40>)
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	3b01      	subs	r3, #1
 810336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810336e:	210f      	movs	r1, #15
 8103370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103374:	f7ff ff8e 	bl	8103294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103378:	4b05      	ldr	r3, [pc, #20]	@ (8103390 <SysTick_Config+0x40>)
 810337a:	2200      	movs	r2, #0
 810337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810337e:	4b04      	ldr	r3, [pc, #16]	@ (8103390 <SysTick_Config+0x40>)
 8103380:	2207      	movs	r2, #7
 8103382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8103384:	2300      	movs	r3, #0
}
 8103386:	4618      	mov	r0, r3
 8103388:	3708      	adds	r7, #8
 810338a:	46bd      	mov	sp, r7
 810338c:	bd80      	pop	{r7, pc}
 810338e:	bf00      	nop
 8103390:	e000e010 	.word	0xe000e010

08103394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103394:	b580      	push	{r7, lr}
 8103396:	b082      	sub	sp, #8
 8103398:	af00      	add	r7, sp, #0
 810339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810339c:	6878      	ldr	r0, [r7, #4]
 810339e:	f7ff ff29 	bl	81031f4 <__NVIC_SetPriorityGrouping>
}
 81033a2:	bf00      	nop
 81033a4:	3708      	adds	r7, #8
 81033a6:	46bd      	mov	sp, r7
 81033a8:	bd80      	pop	{r7, pc}

081033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81033aa:	b580      	push	{r7, lr}
 81033ac:	b086      	sub	sp, #24
 81033ae:	af00      	add	r7, sp, #0
 81033b0:	4603      	mov	r3, r0
 81033b2:	60b9      	str	r1, [r7, #8]
 81033b4:	607a      	str	r2, [r7, #4]
 81033b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81033b8:	f7ff ff40 	bl	810323c <__NVIC_GetPriorityGrouping>
 81033bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81033be:	687a      	ldr	r2, [r7, #4]
 81033c0:	68b9      	ldr	r1, [r7, #8]
 81033c2:	6978      	ldr	r0, [r7, #20]
 81033c4:	f7ff ff90 	bl	81032e8 <NVIC_EncodePriority>
 81033c8:	4602      	mov	r2, r0
 81033ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81033ce:	4611      	mov	r1, r2
 81033d0:	4618      	mov	r0, r3
 81033d2:	f7ff ff5f 	bl	8103294 <__NVIC_SetPriority>
}
 81033d6:	bf00      	nop
 81033d8:	3718      	adds	r7, #24
 81033da:	46bd      	mov	sp, r7
 81033dc:	bd80      	pop	{r7, pc}

081033de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81033de:	b580      	push	{r7, lr}
 81033e0:	b082      	sub	sp, #8
 81033e2:	af00      	add	r7, sp, #0
 81033e4:	4603      	mov	r3, r0
 81033e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81033e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81033ec:	4618      	mov	r0, r3
 81033ee:	f7ff ff33 	bl	8103258 <__NVIC_EnableIRQ>
}
 81033f2:	bf00      	nop
 81033f4:	3708      	adds	r7, #8
 81033f6:	46bd      	mov	sp, r7
 81033f8:	bd80      	pop	{r7, pc}

081033fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81033fa:	b580      	push	{r7, lr}
 81033fc:	b082      	sub	sp, #8
 81033fe:	af00      	add	r7, sp, #0
 8103400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103402:	6878      	ldr	r0, [r7, #4]
 8103404:	f7ff ffa4 	bl	8103350 <SysTick_Config>
 8103408:	4603      	mov	r3, r0
}
 810340a:	4618      	mov	r0, r3
 810340c:	3708      	adds	r7, #8
 810340e:	46bd      	mov	sp, r7
 8103410:	bd80      	pop	{r7, pc}
	...

08103414 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103414:	b480      	push	{r7}
 8103416:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103418:	4b07      	ldr	r3, [pc, #28]	@ (8103438 <HAL_GetCurrentCPUID+0x24>)
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	091b      	lsrs	r3, r3, #4
 810341e:	f003 030f 	and.w	r3, r3, #15
 8103422:	2b07      	cmp	r3, #7
 8103424:	d101      	bne.n	810342a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103426:	2303      	movs	r3, #3
 8103428:	e000      	b.n	810342c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810342a:	2301      	movs	r3, #1
  }
}
 810342c:	4618      	mov	r0, r3
 810342e:	46bd      	mov	sp, r7
 8103430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103434:	4770      	bx	lr
 8103436:	bf00      	nop
 8103438:	e000ed00 	.word	0xe000ed00

0810343c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810343c:	b480      	push	{r7}
 810343e:	b089      	sub	sp, #36	@ 0x24
 8103440:	af00      	add	r7, sp, #0
 8103442:	6078      	str	r0, [r7, #4]
 8103444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103446:	2300      	movs	r3, #0
 8103448:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810344a:	4b89      	ldr	r3, [pc, #548]	@ (8103670 <HAL_GPIO_Init+0x234>)
 810344c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810344e:	e194      	b.n	810377a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103450:	683b      	ldr	r3, [r7, #0]
 8103452:	681a      	ldr	r2, [r3, #0]
 8103454:	2101      	movs	r1, #1
 8103456:	69fb      	ldr	r3, [r7, #28]
 8103458:	fa01 f303 	lsl.w	r3, r1, r3
 810345c:	4013      	ands	r3, r2
 810345e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103460:	693b      	ldr	r3, [r7, #16]
 8103462:	2b00      	cmp	r3, #0
 8103464:	f000 8186 	beq.w	8103774 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103468:	683b      	ldr	r3, [r7, #0]
 810346a:	685b      	ldr	r3, [r3, #4]
 810346c:	f003 0303 	and.w	r3, r3, #3
 8103470:	2b01      	cmp	r3, #1
 8103472:	d005      	beq.n	8103480 <HAL_GPIO_Init+0x44>
 8103474:	683b      	ldr	r3, [r7, #0]
 8103476:	685b      	ldr	r3, [r3, #4]
 8103478:	f003 0303 	and.w	r3, r3, #3
 810347c:	2b02      	cmp	r3, #2
 810347e:	d130      	bne.n	81034e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	689b      	ldr	r3, [r3, #8]
 8103484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103486:	69fb      	ldr	r3, [r7, #28]
 8103488:	005b      	lsls	r3, r3, #1
 810348a:	2203      	movs	r2, #3
 810348c:	fa02 f303 	lsl.w	r3, r2, r3
 8103490:	43db      	mvns	r3, r3
 8103492:	69ba      	ldr	r2, [r7, #24]
 8103494:	4013      	ands	r3, r2
 8103496:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103498:	683b      	ldr	r3, [r7, #0]
 810349a:	68da      	ldr	r2, [r3, #12]
 810349c:	69fb      	ldr	r3, [r7, #28]
 810349e:	005b      	lsls	r3, r3, #1
 81034a0:	fa02 f303 	lsl.w	r3, r2, r3
 81034a4:	69ba      	ldr	r2, [r7, #24]
 81034a6:	4313      	orrs	r3, r2
 81034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	69ba      	ldr	r2, [r7, #24]
 81034ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	685b      	ldr	r3, [r3, #4]
 81034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81034b6:	2201      	movs	r2, #1
 81034b8:	69fb      	ldr	r3, [r7, #28]
 81034ba:	fa02 f303 	lsl.w	r3, r2, r3
 81034be:	43db      	mvns	r3, r3
 81034c0:	69ba      	ldr	r2, [r7, #24]
 81034c2:	4013      	ands	r3, r2
 81034c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81034c6:	683b      	ldr	r3, [r7, #0]
 81034c8:	685b      	ldr	r3, [r3, #4]
 81034ca:	091b      	lsrs	r3, r3, #4
 81034cc:	f003 0201 	and.w	r2, r3, #1
 81034d0:	69fb      	ldr	r3, [r7, #28]
 81034d2:	fa02 f303 	lsl.w	r3, r2, r3
 81034d6:	69ba      	ldr	r2, [r7, #24]
 81034d8:	4313      	orrs	r3, r2
 81034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81034dc:	687b      	ldr	r3, [r7, #4]
 81034de:	69ba      	ldr	r2, [r7, #24]
 81034e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81034e2:	683b      	ldr	r3, [r7, #0]
 81034e4:	685b      	ldr	r3, [r3, #4]
 81034e6:	f003 0303 	and.w	r3, r3, #3
 81034ea:	2b03      	cmp	r3, #3
 81034ec:	d017      	beq.n	810351e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	68db      	ldr	r3, [r3, #12]
 81034f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81034f4:	69fb      	ldr	r3, [r7, #28]
 81034f6:	005b      	lsls	r3, r3, #1
 81034f8:	2203      	movs	r2, #3
 81034fa:	fa02 f303 	lsl.w	r3, r2, r3
 81034fe:	43db      	mvns	r3, r3
 8103500:	69ba      	ldr	r2, [r7, #24]
 8103502:	4013      	ands	r3, r2
 8103504:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103506:	683b      	ldr	r3, [r7, #0]
 8103508:	689a      	ldr	r2, [r3, #8]
 810350a:	69fb      	ldr	r3, [r7, #28]
 810350c:	005b      	lsls	r3, r3, #1
 810350e:	fa02 f303 	lsl.w	r3, r2, r3
 8103512:	69ba      	ldr	r2, [r7, #24]
 8103514:	4313      	orrs	r3, r2
 8103516:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103518:	687b      	ldr	r3, [r7, #4]
 810351a:	69ba      	ldr	r2, [r7, #24]
 810351c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810351e:	683b      	ldr	r3, [r7, #0]
 8103520:	685b      	ldr	r3, [r3, #4]
 8103522:	f003 0303 	and.w	r3, r3, #3
 8103526:	2b02      	cmp	r3, #2
 8103528:	d123      	bne.n	8103572 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810352a:	69fb      	ldr	r3, [r7, #28]
 810352c:	08da      	lsrs	r2, r3, #3
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	3208      	adds	r2, #8
 8103532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103538:	69fb      	ldr	r3, [r7, #28]
 810353a:	f003 0307 	and.w	r3, r3, #7
 810353e:	009b      	lsls	r3, r3, #2
 8103540:	220f      	movs	r2, #15
 8103542:	fa02 f303 	lsl.w	r3, r2, r3
 8103546:	43db      	mvns	r3, r3
 8103548:	69ba      	ldr	r2, [r7, #24]
 810354a:	4013      	ands	r3, r2
 810354c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810354e:	683b      	ldr	r3, [r7, #0]
 8103550:	691a      	ldr	r2, [r3, #16]
 8103552:	69fb      	ldr	r3, [r7, #28]
 8103554:	f003 0307 	and.w	r3, r3, #7
 8103558:	009b      	lsls	r3, r3, #2
 810355a:	fa02 f303 	lsl.w	r3, r2, r3
 810355e:	69ba      	ldr	r2, [r7, #24]
 8103560:	4313      	orrs	r3, r2
 8103562:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103564:	69fb      	ldr	r3, [r7, #28]
 8103566:	08da      	lsrs	r2, r3, #3
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	3208      	adds	r2, #8
 810356c:	69b9      	ldr	r1, [r7, #24]
 810356e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103578:	69fb      	ldr	r3, [r7, #28]
 810357a:	005b      	lsls	r3, r3, #1
 810357c:	2203      	movs	r2, #3
 810357e:	fa02 f303 	lsl.w	r3, r2, r3
 8103582:	43db      	mvns	r3, r3
 8103584:	69ba      	ldr	r2, [r7, #24]
 8103586:	4013      	ands	r3, r2
 8103588:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810358a:	683b      	ldr	r3, [r7, #0]
 810358c:	685b      	ldr	r3, [r3, #4]
 810358e:	f003 0203 	and.w	r2, r3, #3
 8103592:	69fb      	ldr	r3, [r7, #28]
 8103594:	005b      	lsls	r3, r3, #1
 8103596:	fa02 f303 	lsl.w	r3, r2, r3
 810359a:	69ba      	ldr	r2, [r7, #24]
 810359c:	4313      	orrs	r3, r2
 810359e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	69ba      	ldr	r2, [r7, #24]
 81035a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81035a6:	683b      	ldr	r3, [r7, #0]
 81035a8:	685b      	ldr	r3, [r3, #4]
 81035aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81035ae:	2b00      	cmp	r3, #0
 81035b0:	f000 80e0 	beq.w	8103774 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81035b4:	4b2f      	ldr	r3, [pc, #188]	@ (8103674 <HAL_GPIO_Init+0x238>)
 81035b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81035ba:	4a2e      	ldr	r2, [pc, #184]	@ (8103674 <HAL_GPIO_Init+0x238>)
 81035bc:	f043 0302 	orr.w	r3, r3, #2
 81035c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8103674 <HAL_GPIO_Init+0x238>)
 81035c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81035ca:	f003 0302 	and.w	r3, r3, #2
 81035ce:	60fb      	str	r3, [r7, #12]
 81035d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81035d2:	4a29      	ldr	r2, [pc, #164]	@ (8103678 <HAL_GPIO_Init+0x23c>)
 81035d4:	69fb      	ldr	r3, [r7, #28]
 81035d6:	089b      	lsrs	r3, r3, #2
 81035d8:	3302      	adds	r3, #2
 81035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81035e0:	69fb      	ldr	r3, [r7, #28]
 81035e2:	f003 0303 	and.w	r3, r3, #3
 81035e6:	009b      	lsls	r3, r3, #2
 81035e8:	220f      	movs	r2, #15
 81035ea:	fa02 f303 	lsl.w	r3, r2, r3
 81035ee:	43db      	mvns	r3, r3
 81035f0:	69ba      	ldr	r2, [r7, #24]
 81035f2:	4013      	ands	r3, r2
 81035f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	4a20      	ldr	r2, [pc, #128]	@ (810367c <HAL_GPIO_Init+0x240>)
 81035fa:	4293      	cmp	r3, r2
 81035fc:	d052      	beq.n	81036a4 <HAL_GPIO_Init+0x268>
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	4a1f      	ldr	r2, [pc, #124]	@ (8103680 <HAL_GPIO_Init+0x244>)
 8103602:	4293      	cmp	r3, r2
 8103604:	d031      	beq.n	810366a <HAL_GPIO_Init+0x22e>
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	4a1e      	ldr	r2, [pc, #120]	@ (8103684 <HAL_GPIO_Init+0x248>)
 810360a:	4293      	cmp	r3, r2
 810360c:	d02b      	beq.n	8103666 <HAL_GPIO_Init+0x22a>
 810360e:	687b      	ldr	r3, [r7, #4]
 8103610:	4a1d      	ldr	r2, [pc, #116]	@ (8103688 <HAL_GPIO_Init+0x24c>)
 8103612:	4293      	cmp	r3, r2
 8103614:	d025      	beq.n	8103662 <HAL_GPIO_Init+0x226>
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	4a1c      	ldr	r2, [pc, #112]	@ (810368c <HAL_GPIO_Init+0x250>)
 810361a:	4293      	cmp	r3, r2
 810361c:	d01f      	beq.n	810365e <HAL_GPIO_Init+0x222>
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	4a1b      	ldr	r2, [pc, #108]	@ (8103690 <HAL_GPIO_Init+0x254>)
 8103622:	4293      	cmp	r3, r2
 8103624:	d019      	beq.n	810365a <HAL_GPIO_Init+0x21e>
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	4a1a      	ldr	r2, [pc, #104]	@ (8103694 <HAL_GPIO_Init+0x258>)
 810362a:	4293      	cmp	r3, r2
 810362c:	d013      	beq.n	8103656 <HAL_GPIO_Init+0x21a>
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	4a19      	ldr	r2, [pc, #100]	@ (8103698 <HAL_GPIO_Init+0x25c>)
 8103632:	4293      	cmp	r3, r2
 8103634:	d00d      	beq.n	8103652 <HAL_GPIO_Init+0x216>
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	4a18      	ldr	r2, [pc, #96]	@ (810369c <HAL_GPIO_Init+0x260>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d007      	beq.n	810364e <HAL_GPIO_Init+0x212>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	4a17      	ldr	r2, [pc, #92]	@ (81036a0 <HAL_GPIO_Init+0x264>)
 8103642:	4293      	cmp	r3, r2
 8103644:	d101      	bne.n	810364a <HAL_GPIO_Init+0x20e>
 8103646:	2309      	movs	r3, #9
 8103648:	e02d      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 810364a:	230a      	movs	r3, #10
 810364c:	e02b      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 810364e:	2308      	movs	r3, #8
 8103650:	e029      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 8103652:	2307      	movs	r3, #7
 8103654:	e027      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 8103656:	2306      	movs	r3, #6
 8103658:	e025      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 810365a:	2305      	movs	r3, #5
 810365c:	e023      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 810365e:	2304      	movs	r3, #4
 8103660:	e021      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 8103662:	2303      	movs	r3, #3
 8103664:	e01f      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 8103666:	2302      	movs	r3, #2
 8103668:	e01d      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 810366a:	2301      	movs	r3, #1
 810366c:	e01b      	b.n	81036a6 <HAL_GPIO_Init+0x26a>
 810366e:	bf00      	nop
 8103670:	580000c0 	.word	0x580000c0
 8103674:	58024400 	.word	0x58024400
 8103678:	58000400 	.word	0x58000400
 810367c:	58020000 	.word	0x58020000
 8103680:	58020400 	.word	0x58020400
 8103684:	58020800 	.word	0x58020800
 8103688:	58020c00 	.word	0x58020c00
 810368c:	58021000 	.word	0x58021000
 8103690:	58021400 	.word	0x58021400
 8103694:	58021800 	.word	0x58021800
 8103698:	58021c00 	.word	0x58021c00
 810369c:	58022000 	.word	0x58022000
 81036a0:	58022400 	.word	0x58022400
 81036a4:	2300      	movs	r3, #0
 81036a6:	69fa      	ldr	r2, [r7, #28]
 81036a8:	f002 0203 	and.w	r2, r2, #3
 81036ac:	0092      	lsls	r2, r2, #2
 81036ae:	4093      	lsls	r3, r2
 81036b0:	69ba      	ldr	r2, [r7, #24]
 81036b2:	4313      	orrs	r3, r2
 81036b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81036b6:	4938      	ldr	r1, [pc, #224]	@ (8103798 <HAL_GPIO_Init+0x35c>)
 81036b8:	69fb      	ldr	r3, [r7, #28]
 81036ba:	089b      	lsrs	r3, r3, #2
 81036bc:	3302      	adds	r3, #2
 81036be:	69ba      	ldr	r2, [r7, #24]
 81036c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81036c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036cc:	693b      	ldr	r3, [r7, #16]
 81036ce:	43db      	mvns	r3, r3
 81036d0:	69ba      	ldr	r2, [r7, #24]
 81036d2:	4013      	ands	r3, r2
 81036d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81036d6:	683b      	ldr	r3, [r7, #0]
 81036d8:	685b      	ldr	r3, [r3, #4]
 81036da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81036de:	2b00      	cmp	r3, #0
 81036e0:	d003      	beq.n	81036ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81036e2:	69ba      	ldr	r2, [r7, #24]
 81036e4:	693b      	ldr	r3, [r7, #16]
 81036e6:	4313      	orrs	r3, r2
 81036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81036ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81036ee:	69bb      	ldr	r3, [r7, #24]
 81036f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81036f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81036f6:	685b      	ldr	r3, [r3, #4]
 81036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81036fa:	693b      	ldr	r3, [r7, #16]
 81036fc:	43db      	mvns	r3, r3
 81036fe:	69ba      	ldr	r2, [r7, #24]
 8103700:	4013      	ands	r3, r2
 8103702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103704:	683b      	ldr	r3, [r7, #0]
 8103706:	685b      	ldr	r3, [r3, #4]
 8103708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810370c:	2b00      	cmp	r3, #0
 810370e:	d003      	beq.n	8103718 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103710:	69ba      	ldr	r2, [r7, #24]
 8103712:	693b      	ldr	r3, [r7, #16]
 8103714:	4313      	orrs	r3, r2
 8103716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103718:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810371c:	69bb      	ldr	r3, [r7, #24]
 810371e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103720:	697b      	ldr	r3, [r7, #20]
 8103722:	685b      	ldr	r3, [r3, #4]
 8103724:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103726:	693b      	ldr	r3, [r7, #16]
 8103728:	43db      	mvns	r3, r3
 810372a:	69ba      	ldr	r2, [r7, #24]
 810372c:	4013      	ands	r3, r2
 810372e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103730:	683b      	ldr	r3, [r7, #0]
 8103732:	685b      	ldr	r3, [r3, #4]
 8103734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103738:	2b00      	cmp	r3, #0
 810373a:	d003      	beq.n	8103744 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810373c:	69ba      	ldr	r2, [r7, #24]
 810373e:	693b      	ldr	r3, [r7, #16]
 8103740:	4313      	orrs	r3, r2
 8103742:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103744:	697b      	ldr	r3, [r7, #20]
 8103746:	69ba      	ldr	r2, [r7, #24]
 8103748:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810374a:	697b      	ldr	r3, [r7, #20]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103750:	693b      	ldr	r3, [r7, #16]
 8103752:	43db      	mvns	r3, r3
 8103754:	69ba      	ldr	r2, [r7, #24]
 8103756:	4013      	ands	r3, r2
 8103758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810375a:	683b      	ldr	r3, [r7, #0]
 810375c:	685b      	ldr	r3, [r3, #4]
 810375e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103762:	2b00      	cmp	r3, #0
 8103764:	d003      	beq.n	810376e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103766:	69ba      	ldr	r2, [r7, #24]
 8103768:	693b      	ldr	r3, [r7, #16]
 810376a:	4313      	orrs	r3, r2
 810376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810376e:	697b      	ldr	r3, [r7, #20]
 8103770:	69ba      	ldr	r2, [r7, #24]
 8103772:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103774:	69fb      	ldr	r3, [r7, #28]
 8103776:	3301      	adds	r3, #1
 8103778:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810377a:	683b      	ldr	r3, [r7, #0]
 810377c:	681a      	ldr	r2, [r3, #0]
 810377e:	69fb      	ldr	r3, [r7, #28]
 8103780:	fa22 f303 	lsr.w	r3, r2, r3
 8103784:	2b00      	cmp	r3, #0
 8103786:	f47f ae63 	bne.w	8103450 <HAL_GPIO_Init+0x14>
  }
}
 810378a:	bf00      	nop
 810378c:	bf00      	nop
 810378e:	3724      	adds	r7, #36	@ 0x24
 8103790:	46bd      	mov	sp, r7
 8103792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103796:	4770      	bx	lr
 8103798:	58000400 	.word	0x58000400

0810379c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810379c:	b480      	push	{r7}
 810379e:	b083      	sub	sp, #12
 81037a0:	af00      	add	r7, sp, #0
 81037a2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81037a4:	4b05      	ldr	r3, [pc, #20]	@ (81037bc <HAL_HSEM_ActivateNotification+0x20>)
 81037a6:	681a      	ldr	r2, [r3, #0]
 81037a8:	4904      	ldr	r1, [pc, #16]	@ (81037bc <HAL_HSEM_ActivateNotification+0x20>)
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	4313      	orrs	r3, r2
 81037ae:	600b      	str	r3, [r1, #0]
#endif
}
 81037b0:	bf00      	nop
 81037b2:	370c      	adds	r7, #12
 81037b4:	46bd      	mov	sp, r7
 81037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037ba:	4770      	bx	lr
 81037bc:	58026510 	.word	0x58026510

081037c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81037c0:	b580      	push	{r7, lr}
 81037c2:	b082      	sub	sp, #8
 81037c4:	af00      	add	r7, sp, #0
 81037c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	2b00      	cmp	r3, #0
 81037cc:	d101      	bne.n	81037d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81037ce:	2301      	movs	r3, #1
 81037d0:	e08d      	b.n	81038ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81037d8:	b2db      	uxtb	r3, r3
 81037da:	2b00      	cmp	r3, #0
 81037dc:	d106      	bne.n	81037ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	2200      	movs	r2, #0
 81037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81037e6:	6878      	ldr	r0, [r7, #4]
 81037e8:	f7ff f920 	bl	8102a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	2224      	movs	r2, #36	@ 0x24
 81037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	681a      	ldr	r2, [r3, #0]
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	681b      	ldr	r3, [r3, #0]
 81037fe:	f022 0201 	bic.w	r2, r2, #1
 8103802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	685a      	ldr	r2, [r3, #4]
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8103810:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	689a      	ldr	r2, [r3, #8]
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8103820:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	68db      	ldr	r3, [r3, #12]
 8103826:	2b01      	cmp	r3, #1
 8103828:	d107      	bne.n	810383a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810382a:	687b      	ldr	r3, [r7, #4]
 810382c:	689a      	ldr	r2, [r3, #8]
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	681b      	ldr	r3, [r3, #0]
 8103832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8103836:	609a      	str	r2, [r3, #8]
 8103838:	e006      	b.n	8103848 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	689a      	ldr	r2, [r3, #8]
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	681b      	ldr	r3, [r3, #0]
 8103842:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8103846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	68db      	ldr	r3, [r3, #12]
 810384c:	2b02      	cmp	r3, #2
 810384e:	d108      	bne.n	8103862 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	685a      	ldr	r2, [r3, #4]
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	681b      	ldr	r3, [r3, #0]
 810385a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810385e:	605a      	str	r2, [r3, #4]
 8103860:	e007      	b.n	8103872 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	685a      	ldr	r2, [r3, #4]
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8103870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	685b      	ldr	r3, [r3, #4]
 8103878:	687a      	ldr	r2, [r7, #4]
 810387a:	6812      	ldr	r2, [r2, #0]
 810387c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8103880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8103884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	68da      	ldr	r2, [r3, #12]
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	681b      	ldr	r3, [r3, #0]
 8103890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8103894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	691a      	ldr	r2, [r3, #16]
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	695b      	ldr	r3, [r3, #20]
 810389e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	699b      	ldr	r3, [r3, #24]
 81038a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	430a      	orrs	r2, r1
 81038ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	69d9      	ldr	r1, [r3, #28]
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	6a1a      	ldr	r2, [r3, #32]
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	430a      	orrs	r2, r1
 81038be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	681a      	ldr	r2, [r3, #0]
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	f042 0201 	orr.w	r2, r2, #1
 81038ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	2200      	movs	r2, #0
 81038d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	2220      	movs	r2, #32
 81038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	2200      	movs	r2, #0
 81038e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	2200      	movs	r2, #0
 81038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 81038ec:	2300      	movs	r3, #0
}
 81038ee:	4618      	mov	r0, r3
 81038f0:	3708      	adds	r7, #8
 81038f2:	46bd      	mov	sp, r7
 81038f4:	bd80      	pop	{r7, pc}
	...

081038f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 81038f8:	b580      	push	{r7, lr}
 81038fa:	b088      	sub	sp, #32
 81038fc:	af02      	add	r7, sp, #8
 81038fe:	60f8      	str	r0, [r7, #12]
 8103900:	607a      	str	r2, [r7, #4]
 8103902:	461a      	mov	r2, r3
 8103904:	460b      	mov	r3, r1
 8103906:	817b      	strh	r3, [r7, #10]
 8103908:	4613      	mov	r3, r2
 810390a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810390c:	68fb      	ldr	r3, [r7, #12]
 810390e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103912:	b2db      	uxtb	r3, r3
 8103914:	2b20      	cmp	r3, #32
 8103916:	f040 80fd 	bne.w	8103b14 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810391a:	68fb      	ldr	r3, [r7, #12]
 810391c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103920:	2b01      	cmp	r3, #1
 8103922:	d101      	bne.n	8103928 <HAL_I2C_Master_Transmit+0x30>
 8103924:	2302      	movs	r3, #2
 8103926:	e0f6      	b.n	8103b16 <HAL_I2C_Master_Transmit+0x21e>
 8103928:	68fb      	ldr	r3, [r7, #12]
 810392a:	2201      	movs	r2, #1
 810392c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103930:	f7ff fc30 	bl	8103194 <HAL_GetTick>
 8103934:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103936:	693b      	ldr	r3, [r7, #16]
 8103938:	9300      	str	r3, [sp, #0]
 810393a:	2319      	movs	r3, #25
 810393c:	2201      	movs	r2, #1
 810393e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8103942:	68f8      	ldr	r0, [r7, #12]
 8103944:	f000 fa24 	bl	8103d90 <I2C_WaitOnFlagUntilTimeout>
 8103948:	4603      	mov	r3, r0
 810394a:	2b00      	cmp	r3, #0
 810394c:	d001      	beq.n	8103952 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 810394e:	2301      	movs	r3, #1
 8103950:	e0e1      	b.n	8103b16 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103952:	68fb      	ldr	r3, [r7, #12]
 8103954:	2221      	movs	r2, #33	@ 0x21
 8103956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810395a:	68fb      	ldr	r3, [r7, #12]
 810395c:	2210      	movs	r2, #16
 810395e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103962:	68fb      	ldr	r3, [r7, #12]
 8103964:	2200      	movs	r2, #0
 8103966:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103968:	68fb      	ldr	r3, [r7, #12]
 810396a:	687a      	ldr	r2, [r7, #4]
 810396c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 810396e:	68fb      	ldr	r3, [r7, #12]
 8103970:	893a      	ldrh	r2, [r7, #8]
 8103972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8103974:	68fb      	ldr	r3, [r7, #12]
 8103976:	2200      	movs	r2, #0
 8103978:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810397a:	68fb      	ldr	r3, [r7, #12]
 810397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810397e:	b29b      	uxth	r3, r3
 8103980:	2bff      	cmp	r3, #255	@ 0xff
 8103982:	d906      	bls.n	8103992 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103984:	68fb      	ldr	r3, [r7, #12]
 8103986:	22ff      	movs	r2, #255	@ 0xff
 8103988:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 810398a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810398e:	617b      	str	r3, [r7, #20]
 8103990:	e007      	b.n	81039a2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103992:	68fb      	ldr	r3, [r7, #12]
 8103994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103996:	b29a      	uxth	r2, r3
 8103998:	68fb      	ldr	r3, [r7, #12]
 810399a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 810399c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81039a0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	d024      	beq.n	81039f4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81039aa:	68fb      	ldr	r3, [r7, #12]
 81039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81039ae:	781a      	ldrb	r2, [r3, #0]
 81039b0:	68fb      	ldr	r3, [r7, #12]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81039b6:	68fb      	ldr	r3, [r7, #12]
 81039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81039ba:	1c5a      	adds	r2, r3, #1
 81039bc:	68fb      	ldr	r3, [r7, #12]
 81039be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81039c0:	68fb      	ldr	r3, [r7, #12]
 81039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81039c4:	b29b      	uxth	r3, r3
 81039c6:	3b01      	subs	r3, #1
 81039c8:	b29a      	uxth	r2, r3
 81039ca:	68fb      	ldr	r3, [r7, #12]
 81039cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81039ce:	68fb      	ldr	r3, [r7, #12]
 81039d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81039d2:	3b01      	subs	r3, #1
 81039d4:	b29a      	uxth	r2, r3
 81039d6:	68fb      	ldr	r3, [r7, #12]
 81039d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 81039da:	68fb      	ldr	r3, [r7, #12]
 81039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81039de:	b2db      	uxtb	r3, r3
 81039e0:	3301      	adds	r3, #1
 81039e2:	b2da      	uxtb	r2, r3
 81039e4:	8979      	ldrh	r1, [r7, #10]
 81039e6:	4b4e      	ldr	r3, [pc, #312]	@ (8103b20 <HAL_I2C_Master_Transmit+0x228>)
 81039e8:	9300      	str	r3, [sp, #0]
 81039ea:	697b      	ldr	r3, [r7, #20]
 81039ec:	68f8      	ldr	r0, [r7, #12]
 81039ee:	f000 fc1f 	bl	8104230 <I2C_TransferConfig>
 81039f2:	e066      	b.n	8103ac2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 81039f4:	68fb      	ldr	r3, [r7, #12]
 81039f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81039f8:	b2da      	uxtb	r2, r3
 81039fa:	8979      	ldrh	r1, [r7, #10]
 81039fc:	4b48      	ldr	r3, [pc, #288]	@ (8103b20 <HAL_I2C_Master_Transmit+0x228>)
 81039fe:	9300      	str	r3, [sp, #0]
 8103a00:	697b      	ldr	r3, [r7, #20]
 8103a02:	68f8      	ldr	r0, [r7, #12]
 8103a04:	f000 fc14 	bl	8104230 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8103a08:	e05b      	b.n	8103ac2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103a0a:	693a      	ldr	r2, [r7, #16]
 8103a0c:	6a39      	ldr	r1, [r7, #32]
 8103a0e:	68f8      	ldr	r0, [r7, #12]
 8103a10:	f000 fa17 	bl	8103e42 <I2C_WaitOnTXISFlagUntilTimeout>
 8103a14:	4603      	mov	r3, r0
 8103a16:	2b00      	cmp	r3, #0
 8103a18:	d001      	beq.n	8103a1e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8103a1a:	2301      	movs	r3, #1
 8103a1c:	e07b      	b.n	8103b16 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103a1e:	68fb      	ldr	r3, [r7, #12]
 8103a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103a22:	781a      	ldrb	r2, [r3, #0]
 8103a24:	68fb      	ldr	r3, [r7, #12]
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103a2a:	68fb      	ldr	r3, [r7, #12]
 8103a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103a2e:	1c5a      	adds	r2, r3, #1
 8103a30:	68fb      	ldr	r3, [r7, #12]
 8103a32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8103a34:	68fb      	ldr	r3, [r7, #12]
 8103a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103a38:	b29b      	uxth	r3, r3
 8103a3a:	3b01      	subs	r3, #1
 8103a3c:	b29a      	uxth	r2, r3
 8103a3e:	68fb      	ldr	r3, [r7, #12]
 8103a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8103a42:	68fb      	ldr	r3, [r7, #12]
 8103a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a46:	3b01      	subs	r3, #1
 8103a48:	b29a      	uxth	r2, r3
 8103a4a:	68fb      	ldr	r3, [r7, #12]
 8103a4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103a4e:	68fb      	ldr	r3, [r7, #12]
 8103a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103a52:	b29b      	uxth	r3, r3
 8103a54:	2b00      	cmp	r3, #0
 8103a56:	d034      	beq.n	8103ac2 <HAL_I2C_Master_Transmit+0x1ca>
 8103a58:	68fb      	ldr	r3, [r7, #12]
 8103a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	d130      	bne.n	8103ac2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103a60:	693b      	ldr	r3, [r7, #16]
 8103a62:	9300      	str	r3, [sp, #0]
 8103a64:	6a3b      	ldr	r3, [r7, #32]
 8103a66:	2200      	movs	r2, #0
 8103a68:	2180      	movs	r1, #128	@ 0x80
 8103a6a:	68f8      	ldr	r0, [r7, #12]
 8103a6c:	f000 f990 	bl	8103d90 <I2C_WaitOnFlagUntilTimeout>
 8103a70:	4603      	mov	r3, r0
 8103a72:	2b00      	cmp	r3, #0
 8103a74:	d001      	beq.n	8103a7a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8103a76:	2301      	movs	r3, #1
 8103a78:	e04d      	b.n	8103b16 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103a7a:	68fb      	ldr	r3, [r7, #12]
 8103a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103a7e:	b29b      	uxth	r3, r3
 8103a80:	2bff      	cmp	r3, #255	@ 0xff
 8103a82:	d90e      	bls.n	8103aa2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103a84:	68fb      	ldr	r3, [r7, #12]
 8103a86:	22ff      	movs	r2, #255	@ 0xff
 8103a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103a8a:	68fb      	ldr	r3, [r7, #12]
 8103a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a8e:	b2da      	uxtb	r2, r3
 8103a90:	8979      	ldrh	r1, [r7, #10]
 8103a92:	2300      	movs	r3, #0
 8103a94:	9300      	str	r3, [sp, #0]
 8103a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103a9a:	68f8      	ldr	r0, [r7, #12]
 8103a9c:	f000 fbc8 	bl	8104230 <I2C_TransferConfig>
 8103aa0:	e00f      	b.n	8103ac2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103aa6:	b29a      	uxth	r2, r3
 8103aa8:	68fb      	ldr	r3, [r7, #12]
 8103aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103aac:	68fb      	ldr	r3, [r7, #12]
 8103aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103ab0:	b2da      	uxtb	r2, r3
 8103ab2:	8979      	ldrh	r1, [r7, #10]
 8103ab4:	2300      	movs	r3, #0
 8103ab6:	9300      	str	r3, [sp, #0]
 8103ab8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103abc:	68f8      	ldr	r0, [r7, #12]
 8103abe:	f000 fbb7 	bl	8104230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103ac2:	68fb      	ldr	r3, [r7, #12]
 8103ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103ac6:	b29b      	uxth	r3, r3
 8103ac8:	2b00      	cmp	r3, #0
 8103aca:	d19e      	bne.n	8103a0a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103acc:	693a      	ldr	r2, [r7, #16]
 8103ace:	6a39      	ldr	r1, [r7, #32]
 8103ad0:	68f8      	ldr	r0, [r7, #12]
 8103ad2:	f000 f9fd 	bl	8103ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103ad6:	4603      	mov	r3, r0
 8103ad8:	2b00      	cmp	r3, #0
 8103ada:	d001      	beq.n	8103ae0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8103adc:	2301      	movs	r3, #1
 8103ade:	e01a      	b.n	8103b16 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103ae0:	68fb      	ldr	r3, [r7, #12]
 8103ae2:	681b      	ldr	r3, [r3, #0]
 8103ae4:	2220      	movs	r2, #32
 8103ae6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103ae8:	68fb      	ldr	r3, [r7, #12]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	6859      	ldr	r1, [r3, #4]
 8103aee:	68fb      	ldr	r3, [r7, #12]
 8103af0:	681a      	ldr	r2, [r3, #0]
 8103af2:	4b0c      	ldr	r3, [pc, #48]	@ (8103b24 <HAL_I2C_Master_Transmit+0x22c>)
 8103af4:	400b      	ands	r3, r1
 8103af6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103af8:	68fb      	ldr	r3, [r7, #12]
 8103afa:	2220      	movs	r2, #32
 8103afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103b00:	68fb      	ldr	r3, [r7, #12]
 8103b02:	2200      	movs	r2, #0
 8103b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103b08:	68fb      	ldr	r3, [r7, #12]
 8103b0a:	2200      	movs	r2, #0
 8103b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103b10:	2300      	movs	r3, #0
 8103b12:	e000      	b.n	8103b16 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8103b14:	2302      	movs	r3, #2
  }
}
 8103b16:	4618      	mov	r0, r3
 8103b18:	3718      	adds	r7, #24
 8103b1a:	46bd      	mov	sp, r7
 8103b1c:	bd80      	pop	{r7, pc}
 8103b1e:	bf00      	nop
 8103b20:	80002000 	.word	0x80002000
 8103b24:	fe00e800 	.word	0xfe00e800

08103b28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8103b28:	b580      	push	{r7, lr}
 8103b2a:	b088      	sub	sp, #32
 8103b2c:	af02      	add	r7, sp, #8
 8103b2e:	60f8      	str	r0, [r7, #12]
 8103b30:	607a      	str	r2, [r7, #4]
 8103b32:	461a      	mov	r2, r3
 8103b34:	460b      	mov	r3, r1
 8103b36:	817b      	strh	r3, [r7, #10]
 8103b38:	4613      	mov	r3, r2
 8103b3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103b42:	b2db      	uxtb	r3, r3
 8103b44:	2b20      	cmp	r3, #32
 8103b46:	f040 80db 	bne.w	8103d00 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103b4a:	68fb      	ldr	r3, [r7, #12]
 8103b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103b50:	2b01      	cmp	r3, #1
 8103b52:	d101      	bne.n	8103b58 <HAL_I2C_Master_Receive+0x30>
 8103b54:	2302      	movs	r3, #2
 8103b56:	e0d4      	b.n	8103d02 <HAL_I2C_Master_Receive+0x1da>
 8103b58:	68fb      	ldr	r3, [r7, #12]
 8103b5a:	2201      	movs	r2, #1
 8103b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103b60:	f7ff fb18 	bl	8103194 <HAL_GetTick>
 8103b64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103b66:	697b      	ldr	r3, [r7, #20]
 8103b68:	9300      	str	r3, [sp, #0]
 8103b6a:	2319      	movs	r3, #25
 8103b6c:	2201      	movs	r2, #1
 8103b6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8103b72:	68f8      	ldr	r0, [r7, #12]
 8103b74:	f000 f90c 	bl	8103d90 <I2C_WaitOnFlagUntilTimeout>
 8103b78:	4603      	mov	r3, r0
 8103b7a:	2b00      	cmp	r3, #0
 8103b7c:	d001      	beq.n	8103b82 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8103b7e:	2301      	movs	r3, #1
 8103b80:	e0bf      	b.n	8103d02 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103b82:	68fb      	ldr	r3, [r7, #12]
 8103b84:	2222      	movs	r2, #34	@ 0x22
 8103b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103b8a:	68fb      	ldr	r3, [r7, #12]
 8103b8c:	2210      	movs	r2, #16
 8103b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103b92:	68fb      	ldr	r3, [r7, #12]
 8103b94:	2200      	movs	r2, #0
 8103b96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	687a      	ldr	r2, [r7, #4]
 8103b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	893a      	ldrh	r2, [r7, #8]
 8103ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8103ba4:	68fb      	ldr	r3, [r7, #12]
 8103ba6:	2200      	movs	r2, #0
 8103ba8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103baa:	68fb      	ldr	r3, [r7, #12]
 8103bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103bae:	b29b      	uxth	r3, r3
 8103bb0:	2bff      	cmp	r3, #255	@ 0xff
 8103bb2:	d90e      	bls.n	8103bd2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103bb4:	68fb      	ldr	r3, [r7, #12]
 8103bb6:	22ff      	movs	r2, #255	@ 0xff
 8103bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103bbe:	b2da      	uxtb	r2, r3
 8103bc0:	8979      	ldrh	r1, [r7, #10]
 8103bc2:	4b52      	ldr	r3, [pc, #328]	@ (8103d0c <HAL_I2C_Master_Receive+0x1e4>)
 8103bc4:	9300      	str	r3, [sp, #0]
 8103bc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103bca:	68f8      	ldr	r0, [r7, #12]
 8103bcc:	f000 fb30 	bl	8104230 <I2C_TransferConfig>
 8103bd0:	e06d      	b.n	8103cae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103bd6:	b29a      	uxth	r2, r3
 8103bd8:	68fb      	ldr	r3, [r7, #12]
 8103bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103bdc:	68fb      	ldr	r3, [r7, #12]
 8103bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103be0:	b2da      	uxtb	r2, r3
 8103be2:	8979      	ldrh	r1, [r7, #10]
 8103be4:	4b49      	ldr	r3, [pc, #292]	@ (8103d0c <HAL_I2C_Master_Receive+0x1e4>)
 8103be6:	9300      	str	r3, [sp, #0]
 8103be8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103bec:	68f8      	ldr	r0, [r7, #12]
 8103bee:	f000 fb1f 	bl	8104230 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8103bf2:	e05c      	b.n	8103cae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103bf4:	697a      	ldr	r2, [r7, #20]
 8103bf6:	6a39      	ldr	r1, [r7, #32]
 8103bf8:	68f8      	ldr	r0, [r7, #12]
 8103bfa:	f000 f9ad 	bl	8103f58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8103bfe:	4603      	mov	r3, r0
 8103c00:	2b00      	cmp	r3, #0
 8103c02:	d001      	beq.n	8103c08 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103c04:	2301      	movs	r3, #1
 8103c06:	e07c      	b.n	8103d02 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103c08:	68fb      	ldr	r3, [r7, #12]
 8103c0a:	681b      	ldr	r3, [r3, #0]
 8103c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103c0e:	68fb      	ldr	r3, [r7, #12]
 8103c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c12:	b2d2      	uxtb	r2, r2
 8103c14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c1a:	1c5a      	adds	r2, r3, #1
 8103c1c:	68fb      	ldr	r3, [r7, #12]
 8103c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8103c20:	68fb      	ldr	r3, [r7, #12]
 8103c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c24:	3b01      	subs	r3, #1
 8103c26:	b29a      	uxth	r2, r3
 8103c28:	68fb      	ldr	r3, [r7, #12]
 8103c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8103c2c:	68fb      	ldr	r3, [r7, #12]
 8103c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c30:	b29b      	uxth	r3, r3
 8103c32:	3b01      	subs	r3, #1
 8103c34:	b29a      	uxth	r2, r3
 8103c36:	68fb      	ldr	r3, [r7, #12]
 8103c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103c3a:	68fb      	ldr	r3, [r7, #12]
 8103c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c3e:	b29b      	uxth	r3, r3
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	d034      	beq.n	8103cae <HAL_I2C_Master_Receive+0x186>
 8103c44:	68fb      	ldr	r3, [r7, #12]
 8103c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c48:	2b00      	cmp	r3, #0
 8103c4a:	d130      	bne.n	8103cae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103c4c:	697b      	ldr	r3, [r7, #20]
 8103c4e:	9300      	str	r3, [sp, #0]
 8103c50:	6a3b      	ldr	r3, [r7, #32]
 8103c52:	2200      	movs	r2, #0
 8103c54:	2180      	movs	r1, #128	@ 0x80
 8103c56:	68f8      	ldr	r0, [r7, #12]
 8103c58:	f000 f89a 	bl	8103d90 <I2C_WaitOnFlagUntilTimeout>
 8103c5c:	4603      	mov	r3, r0
 8103c5e:	2b00      	cmp	r3, #0
 8103c60:	d001      	beq.n	8103c66 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8103c62:	2301      	movs	r3, #1
 8103c64:	e04d      	b.n	8103d02 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103c66:	68fb      	ldr	r3, [r7, #12]
 8103c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c6a:	b29b      	uxth	r3, r3
 8103c6c:	2bff      	cmp	r3, #255	@ 0xff
 8103c6e:	d90e      	bls.n	8103c8e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103c70:	68fb      	ldr	r3, [r7, #12]
 8103c72:	22ff      	movs	r2, #255	@ 0xff
 8103c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103c76:	68fb      	ldr	r3, [r7, #12]
 8103c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c7a:	b2da      	uxtb	r2, r3
 8103c7c:	8979      	ldrh	r1, [r7, #10]
 8103c7e:	2300      	movs	r3, #0
 8103c80:	9300      	str	r3, [sp, #0]
 8103c82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103c86:	68f8      	ldr	r0, [r7, #12]
 8103c88:	f000 fad2 	bl	8104230 <I2C_TransferConfig>
 8103c8c:	e00f      	b.n	8103cae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103c8e:	68fb      	ldr	r3, [r7, #12]
 8103c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c92:	b29a      	uxth	r2, r3
 8103c94:	68fb      	ldr	r3, [r7, #12]
 8103c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103c98:	68fb      	ldr	r3, [r7, #12]
 8103c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c9c:	b2da      	uxtb	r2, r3
 8103c9e:	8979      	ldrh	r1, [r7, #10]
 8103ca0:	2300      	movs	r3, #0
 8103ca2:	9300      	str	r3, [sp, #0]
 8103ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103ca8:	68f8      	ldr	r0, [r7, #12]
 8103caa:	f000 fac1 	bl	8104230 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103cae:	68fb      	ldr	r3, [r7, #12]
 8103cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103cb2:	b29b      	uxth	r3, r3
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d19d      	bne.n	8103bf4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103cb8:	697a      	ldr	r2, [r7, #20]
 8103cba:	6a39      	ldr	r1, [r7, #32]
 8103cbc:	68f8      	ldr	r0, [r7, #12]
 8103cbe:	f000 f907 	bl	8103ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103cc2:	4603      	mov	r3, r0
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	d001      	beq.n	8103ccc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8103cc8:	2301      	movs	r3, #1
 8103cca:	e01a      	b.n	8103d02 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103ccc:	68fb      	ldr	r3, [r7, #12]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	2220      	movs	r2, #32
 8103cd2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103cd4:	68fb      	ldr	r3, [r7, #12]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	6859      	ldr	r1, [r3, #4]
 8103cda:	68fb      	ldr	r3, [r7, #12]
 8103cdc:	681a      	ldr	r2, [r3, #0]
 8103cde:	4b0c      	ldr	r3, [pc, #48]	@ (8103d10 <HAL_I2C_Master_Receive+0x1e8>)
 8103ce0:	400b      	ands	r3, r1
 8103ce2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103ce4:	68fb      	ldr	r3, [r7, #12]
 8103ce6:	2220      	movs	r2, #32
 8103ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103cec:	68fb      	ldr	r3, [r7, #12]
 8103cee:	2200      	movs	r2, #0
 8103cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103cf4:	68fb      	ldr	r3, [r7, #12]
 8103cf6:	2200      	movs	r2, #0
 8103cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103cfc:	2300      	movs	r3, #0
 8103cfe:	e000      	b.n	8103d02 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103d00:	2302      	movs	r3, #2
  }
}
 8103d02:	4618      	mov	r0, r3
 8103d04:	3718      	adds	r7, #24
 8103d06:	46bd      	mov	sp, r7
 8103d08:	bd80      	pop	{r7, pc}
 8103d0a:	bf00      	nop
 8103d0c:	80002400 	.word	0x80002400
 8103d10:	fe00e800 	.word	0xfe00e800

08103d14 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8103d14:	b480      	push	{r7}
 8103d16:	b083      	sub	sp, #12
 8103d18:	af00      	add	r7, sp, #0
 8103d1a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103d22:	b2db      	uxtb	r3, r3
}
 8103d24:	4618      	mov	r0, r3
 8103d26:	370c      	adds	r7, #12
 8103d28:	46bd      	mov	sp, r7
 8103d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d2e:	4770      	bx	lr

08103d30 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8103d30:	b480      	push	{r7}
 8103d32:	b083      	sub	sp, #12
 8103d34:	af00      	add	r7, sp, #0
 8103d36:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8103d3c:	4618      	mov	r0, r3
 8103d3e:	370c      	adds	r7, #12
 8103d40:	46bd      	mov	sp, r7
 8103d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d46:	4770      	bx	lr

08103d48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103d48:	b480      	push	{r7}
 8103d4a:	b083      	sub	sp, #12
 8103d4c:	af00      	add	r7, sp, #0
 8103d4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	699b      	ldr	r3, [r3, #24]
 8103d56:	f003 0302 	and.w	r3, r3, #2
 8103d5a:	2b02      	cmp	r3, #2
 8103d5c:	d103      	bne.n	8103d66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	681b      	ldr	r3, [r3, #0]
 8103d62:	2200      	movs	r2, #0
 8103d64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	699b      	ldr	r3, [r3, #24]
 8103d6c:	f003 0301 	and.w	r3, r3, #1
 8103d70:	2b01      	cmp	r3, #1
 8103d72:	d007      	beq.n	8103d84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	699a      	ldr	r2, [r3, #24]
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	f042 0201 	orr.w	r2, r2, #1
 8103d82:	619a      	str	r2, [r3, #24]
  }
}
 8103d84:	bf00      	nop
 8103d86:	370c      	adds	r7, #12
 8103d88:	46bd      	mov	sp, r7
 8103d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d8e:	4770      	bx	lr

08103d90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103d90:	b580      	push	{r7, lr}
 8103d92:	b084      	sub	sp, #16
 8103d94:	af00      	add	r7, sp, #0
 8103d96:	60f8      	str	r0, [r7, #12]
 8103d98:	60b9      	str	r1, [r7, #8]
 8103d9a:	603b      	str	r3, [r7, #0]
 8103d9c:	4613      	mov	r3, r2
 8103d9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103da0:	e03b      	b.n	8103e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103da2:	69ba      	ldr	r2, [r7, #24]
 8103da4:	6839      	ldr	r1, [r7, #0]
 8103da6:	68f8      	ldr	r0, [r7, #12]
 8103da8:	f000 f962 	bl	8104070 <I2C_IsErrorOccurred>
 8103dac:	4603      	mov	r3, r0
 8103dae:	2b00      	cmp	r3, #0
 8103db0:	d001      	beq.n	8103db6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8103db2:	2301      	movs	r3, #1
 8103db4:	e041      	b.n	8103e3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103db6:	683b      	ldr	r3, [r7, #0]
 8103db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103dbc:	d02d      	beq.n	8103e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103dbe:	f7ff f9e9 	bl	8103194 <HAL_GetTick>
 8103dc2:	4602      	mov	r2, r0
 8103dc4:	69bb      	ldr	r3, [r7, #24]
 8103dc6:	1ad3      	subs	r3, r2, r3
 8103dc8:	683a      	ldr	r2, [r7, #0]
 8103dca:	429a      	cmp	r2, r3
 8103dcc:	d302      	bcc.n	8103dd4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8103dce:	683b      	ldr	r3, [r7, #0]
 8103dd0:	2b00      	cmp	r3, #0
 8103dd2:	d122      	bne.n	8103e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	699a      	ldr	r2, [r3, #24]
 8103dda:	68bb      	ldr	r3, [r7, #8]
 8103ddc:	4013      	ands	r3, r2
 8103dde:	68ba      	ldr	r2, [r7, #8]
 8103de0:	429a      	cmp	r2, r3
 8103de2:	bf0c      	ite	eq
 8103de4:	2301      	moveq	r3, #1
 8103de6:	2300      	movne	r3, #0
 8103de8:	b2db      	uxtb	r3, r3
 8103dea:	461a      	mov	r2, r3
 8103dec:	79fb      	ldrb	r3, [r7, #7]
 8103dee:	429a      	cmp	r2, r3
 8103df0:	d113      	bne.n	8103e1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103df2:	68fb      	ldr	r3, [r7, #12]
 8103df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103df6:	f043 0220 	orr.w	r2, r3, #32
 8103dfa:	68fb      	ldr	r3, [r7, #12]
 8103dfc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103dfe:	68fb      	ldr	r3, [r7, #12]
 8103e00:	2220      	movs	r2, #32
 8103e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103e06:	68fb      	ldr	r3, [r7, #12]
 8103e08:	2200      	movs	r2, #0
 8103e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103e0e:	68fb      	ldr	r3, [r7, #12]
 8103e10:	2200      	movs	r2, #0
 8103e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8103e16:	2301      	movs	r3, #1
 8103e18:	e00f      	b.n	8103e3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	699a      	ldr	r2, [r3, #24]
 8103e20:	68bb      	ldr	r3, [r7, #8]
 8103e22:	4013      	ands	r3, r2
 8103e24:	68ba      	ldr	r2, [r7, #8]
 8103e26:	429a      	cmp	r2, r3
 8103e28:	bf0c      	ite	eq
 8103e2a:	2301      	moveq	r3, #1
 8103e2c:	2300      	movne	r3, #0
 8103e2e:	b2db      	uxtb	r3, r3
 8103e30:	461a      	mov	r2, r3
 8103e32:	79fb      	ldrb	r3, [r7, #7]
 8103e34:	429a      	cmp	r2, r3
 8103e36:	d0b4      	beq.n	8103da2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103e38:	2300      	movs	r3, #0
}
 8103e3a:	4618      	mov	r0, r3
 8103e3c:	3710      	adds	r7, #16
 8103e3e:	46bd      	mov	sp, r7
 8103e40:	bd80      	pop	{r7, pc}

08103e42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103e42:	b580      	push	{r7, lr}
 8103e44:	b084      	sub	sp, #16
 8103e46:	af00      	add	r7, sp, #0
 8103e48:	60f8      	str	r0, [r7, #12]
 8103e4a:	60b9      	str	r1, [r7, #8]
 8103e4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103e4e:	e033      	b.n	8103eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103e50:	687a      	ldr	r2, [r7, #4]
 8103e52:	68b9      	ldr	r1, [r7, #8]
 8103e54:	68f8      	ldr	r0, [r7, #12]
 8103e56:	f000 f90b 	bl	8104070 <I2C_IsErrorOccurred>
 8103e5a:	4603      	mov	r3, r0
 8103e5c:	2b00      	cmp	r3, #0
 8103e5e:	d001      	beq.n	8103e64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103e60:	2301      	movs	r3, #1
 8103e62:	e031      	b.n	8103ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103e64:	68bb      	ldr	r3, [r7, #8]
 8103e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103e6a:	d025      	beq.n	8103eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103e6c:	f7ff f992 	bl	8103194 <HAL_GetTick>
 8103e70:	4602      	mov	r2, r0
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	1ad3      	subs	r3, r2, r3
 8103e76:	68ba      	ldr	r2, [r7, #8]
 8103e78:	429a      	cmp	r2, r3
 8103e7a:	d302      	bcc.n	8103e82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8103e7c:	68bb      	ldr	r3, [r7, #8]
 8103e7e:	2b00      	cmp	r3, #0
 8103e80:	d11a      	bne.n	8103eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8103e82:	68fb      	ldr	r3, [r7, #12]
 8103e84:	681b      	ldr	r3, [r3, #0]
 8103e86:	699b      	ldr	r3, [r3, #24]
 8103e88:	f003 0302 	and.w	r3, r3, #2
 8103e8c:	2b02      	cmp	r3, #2
 8103e8e:	d013      	beq.n	8103eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103e94:	f043 0220 	orr.w	r2, r3, #32
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	2220      	movs	r2, #32
 8103ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	2200      	movs	r2, #0
 8103ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	2200      	movs	r2, #0
 8103eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8103eb4:	2301      	movs	r3, #1
 8103eb6:	e007      	b.n	8103ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	699b      	ldr	r3, [r3, #24]
 8103ebe:	f003 0302 	and.w	r3, r3, #2
 8103ec2:	2b02      	cmp	r3, #2
 8103ec4:	d1c4      	bne.n	8103e50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8103ec6:	2300      	movs	r3, #0
}
 8103ec8:	4618      	mov	r0, r3
 8103eca:	3710      	adds	r7, #16
 8103ecc:	46bd      	mov	sp, r7
 8103ece:	bd80      	pop	{r7, pc}

08103ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103ed0:	b580      	push	{r7, lr}
 8103ed2:	b084      	sub	sp, #16
 8103ed4:	af00      	add	r7, sp, #0
 8103ed6:	60f8      	str	r0, [r7, #12]
 8103ed8:	60b9      	str	r1, [r7, #8]
 8103eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103edc:	e02f      	b.n	8103f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103ede:	687a      	ldr	r2, [r7, #4]
 8103ee0:	68b9      	ldr	r1, [r7, #8]
 8103ee2:	68f8      	ldr	r0, [r7, #12]
 8103ee4:	f000 f8c4 	bl	8104070 <I2C_IsErrorOccurred>
 8103ee8:	4603      	mov	r3, r0
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	d001      	beq.n	8103ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103eee:	2301      	movs	r3, #1
 8103ef0:	e02d      	b.n	8103f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103ef2:	f7ff f94f 	bl	8103194 <HAL_GetTick>
 8103ef6:	4602      	mov	r2, r0
 8103ef8:	687b      	ldr	r3, [r7, #4]
 8103efa:	1ad3      	subs	r3, r2, r3
 8103efc:	68ba      	ldr	r2, [r7, #8]
 8103efe:	429a      	cmp	r2, r3
 8103f00:	d302      	bcc.n	8103f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8103f02:	68bb      	ldr	r3, [r7, #8]
 8103f04:	2b00      	cmp	r3, #0
 8103f06:	d11a      	bne.n	8103f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	699b      	ldr	r3, [r3, #24]
 8103f0e:	f003 0320 	and.w	r3, r3, #32
 8103f12:	2b20      	cmp	r3, #32
 8103f14:	d013      	beq.n	8103f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103f16:	68fb      	ldr	r3, [r7, #12]
 8103f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103f1a:	f043 0220 	orr.w	r2, r3, #32
 8103f1e:	68fb      	ldr	r3, [r7, #12]
 8103f20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103f22:	68fb      	ldr	r3, [r7, #12]
 8103f24:	2220      	movs	r2, #32
 8103f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103f2a:	68fb      	ldr	r3, [r7, #12]
 8103f2c:	2200      	movs	r2, #0
 8103f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103f32:	68fb      	ldr	r3, [r7, #12]
 8103f34:	2200      	movs	r2, #0
 8103f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8103f3a:	2301      	movs	r3, #1
 8103f3c:	e007      	b.n	8103f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103f3e:	68fb      	ldr	r3, [r7, #12]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	699b      	ldr	r3, [r3, #24]
 8103f44:	f003 0320 	and.w	r3, r3, #32
 8103f48:	2b20      	cmp	r3, #32
 8103f4a:	d1c8      	bne.n	8103ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103f4c:	2300      	movs	r3, #0
}
 8103f4e:	4618      	mov	r0, r3
 8103f50:	3710      	adds	r7, #16
 8103f52:	46bd      	mov	sp, r7
 8103f54:	bd80      	pop	{r7, pc}
	...

08103f58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103f58:	b580      	push	{r7, lr}
 8103f5a:	b086      	sub	sp, #24
 8103f5c:	af00      	add	r7, sp, #0
 8103f5e:	60f8      	str	r0, [r7, #12]
 8103f60:	60b9      	str	r1, [r7, #8]
 8103f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103f64:	2300      	movs	r3, #0
 8103f66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8103f68:	e071      	b.n	810404e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103f6a:	687a      	ldr	r2, [r7, #4]
 8103f6c:	68b9      	ldr	r1, [r7, #8]
 8103f6e:	68f8      	ldr	r0, [r7, #12]
 8103f70:	f000 f87e 	bl	8104070 <I2C_IsErrorOccurred>
 8103f74:	4603      	mov	r3, r0
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	d001      	beq.n	8103f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8103f7a:	2301      	movs	r3, #1
 8103f7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8103f7e:	68fb      	ldr	r3, [r7, #12]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	699b      	ldr	r3, [r3, #24]
 8103f84:	f003 0320 	and.w	r3, r3, #32
 8103f88:	2b20      	cmp	r3, #32
 8103f8a:	d13b      	bne.n	8104004 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8103f8c:	7dfb      	ldrb	r3, [r7, #23]
 8103f8e:	2b00      	cmp	r3, #0
 8103f90:	d138      	bne.n	8104004 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8103f92:	68fb      	ldr	r3, [r7, #12]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	699b      	ldr	r3, [r3, #24]
 8103f98:	f003 0304 	and.w	r3, r3, #4
 8103f9c:	2b04      	cmp	r3, #4
 8103f9e:	d105      	bne.n	8103fac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103fa4:	2b00      	cmp	r3, #0
 8103fa6:	d001      	beq.n	8103fac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8103fa8:	2300      	movs	r3, #0
 8103faa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	681b      	ldr	r3, [r3, #0]
 8103fb0:	699b      	ldr	r3, [r3, #24]
 8103fb2:	f003 0310 	and.w	r3, r3, #16
 8103fb6:	2b10      	cmp	r3, #16
 8103fb8:	d121      	bne.n	8103ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103fba:	68fb      	ldr	r3, [r7, #12]
 8103fbc:	681b      	ldr	r3, [r3, #0]
 8103fbe:	2210      	movs	r2, #16
 8103fc0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8103fc2:	68fb      	ldr	r3, [r7, #12]
 8103fc4:	2204      	movs	r2, #4
 8103fc6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103fc8:	68fb      	ldr	r3, [r7, #12]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	2220      	movs	r2, #32
 8103fce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8103fd0:	68fb      	ldr	r3, [r7, #12]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	6859      	ldr	r1, [r3, #4]
 8103fd6:	68fb      	ldr	r3, [r7, #12]
 8103fd8:	681a      	ldr	r2, [r3, #0]
 8103fda:	4b24      	ldr	r3, [pc, #144]	@ (810406c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8103fdc:	400b      	ands	r3, r1
 8103fde:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	2220      	movs	r2, #32
 8103fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	2200      	movs	r2, #0
 8103fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	2200      	movs	r2, #0
 8103ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8103ff8:	2301      	movs	r3, #1
 8103ffa:	75fb      	strb	r3, [r7, #23]
 8103ffc:	e002      	b.n	8104004 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	2200      	movs	r2, #0
 8104002:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8104004:	f7ff f8c6 	bl	8103194 <HAL_GetTick>
 8104008:	4602      	mov	r2, r0
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	1ad3      	subs	r3, r2, r3
 810400e:	68ba      	ldr	r2, [r7, #8]
 8104010:	429a      	cmp	r2, r3
 8104012:	d302      	bcc.n	810401a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8104014:	68bb      	ldr	r3, [r7, #8]
 8104016:	2b00      	cmp	r3, #0
 8104018:	d119      	bne.n	810404e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 810401a:	7dfb      	ldrb	r3, [r7, #23]
 810401c:	2b00      	cmp	r3, #0
 810401e:	d116      	bne.n	810404e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	699b      	ldr	r3, [r3, #24]
 8104026:	f003 0304 	and.w	r3, r3, #4
 810402a:	2b04      	cmp	r3, #4
 810402c:	d00f      	beq.n	810404e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104032:	f043 0220 	orr.w	r2, r3, #32
 8104036:	68fb      	ldr	r3, [r7, #12]
 8104038:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	2220      	movs	r2, #32
 810403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104042:	68fb      	ldr	r3, [r7, #12]
 8104044:	2200      	movs	r2, #0
 8104046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 810404a:	2301      	movs	r3, #1
 810404c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	699b      	ldr	r3, [r3, #24]
 8104054:	f003 0304 	and.w	r3, r3, #4
 8104058:	2b04      	cmp	r3, #4
 810405a:	d002      	beq.n	8104062 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 810405c:	7dfb      	ldrb	r3, [r7, #23]
 810405e:	2b00      	cmp	r3, #0
 8104060:	d083      	beq.n	8103f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8104062:	7dfb      	ldrb	r3, [r7, #23]
}
 8104064:	4618      	mov	r0, r3
 8104066:	3718      	adds	r7, #24
 8104068:	46bd      	mov	sp, r7
 810406a:	bd80      	pop	{r7, pc}
 810406c:	fe00e800 	.word	0xfe00e800

08104070 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104070:	b580      	push	{r7, lr}
 8104072:	b08a      	sub	sp, #40	@ 0x28
 8104074:	af00      	add	r7, sp, #0
 8104076:	60f8      	str	r0, [r7, #12]
 8104078:	60b9      	str	r1, [r7, #8]
 810407a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810407c:	2300      	movs	r3, #0
 810407e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	699b      	ldr	r3, [r3, #24]
 8104088:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 810408a:	2300      	movs	r3, #0
 810408c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8104092:	69bb      	ldr	r3, [r7, #24]
 8104094:	f003 0310 	and.w	r3, r3, #16
 8104098:	2b00      	cmp	r3, #0
 810409a:	d068      	beq.n	810416e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 810409c:	68fb      	ldr	r3, [r7, #12]
 810409e:	681b      	ldr	r3, [r3, #0]
 81040a0:	2210      	movs	r2, #16
 81040a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81040a4:	e049      	b.n	810413a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81040a6:	68bb      	ldr	r3, [r7, #8]
 81040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81040ac:	d045      	beq.n	810413a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81040ae:	f7ff f871 	bl	8103194 <HAL_GetTick>
 81040b2:	4602      	mov	r2, r0
 81040b4:	69fb      	ldr	r3, [r7, #28]
 81040b6:	1ad3      	subs	r3, r2, r3
 81040b8:	68ba      	ldr	r2, [r7, #8]
 81040ba:	429a      	cmp	r2, r3
 81040bc:	d302      	bcc.n	81040c4 <I2C_IsErrorOccurred+0x54>
 81040be:	68bb      	ldr	r3, [r7, #8]
 81040c0:	2b00      	cmp	r3, #0
 81040c2:	d13a      	bne.n	810413a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	685b      	ldr	r3, [r3, #4]
 81040ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81040ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81040d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81040d8:	68fb      	ldr	r3, [r7, #12]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	699b      	ldr	r3, [r3, #24]
 81040de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81040e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81040e6:	d121      	bne.n	810412c <I2C_IsErrorOccurred+0xbc>
 81040e8:	697b      	ldr	r3, [r7, #20]
 81040ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81040ee:	d01d      	beq.n	810412c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81040f0:	7cfb      	ldrb	r3, [r7, #19]
 81040f2:	2b20      	cmp	r3, #32
 81040f4:	d01a      	beq.n	810412c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	685a      	ldr	r2, [r3, #4]
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8104104:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104106:	f7ff f845 	bl	8103194 <HAL_GetTick>
 810410a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810410c:	e00e      	b.n	810412c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810410e:	f7ff f841 	bl	8103194 <HAL_GetTick>
 8104112:	4602      	mov	r2, r0
 8104114:	69fb      	ldr	r3, [r7, #28]
 8104116:	1ad3      	subs	r3, r2, r3
 8104118:	2b19      	cmp	r3, #25
 810411a:	d907      	bls.n	810412c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810411c:	6a3b      	ldr	r3, [r7, #32]
 810411e:	f043 0320 	orr.w	r3, r3, #32
 8104122:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8104124:	2301      	movs	r3, #1
 8104126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810412a:	e006      	b.n	810413a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	681b      	ldr	r3, [r3, #0]
 8104130:	699b      	ldr	r3, [r3, #24]
 8104132:	f003 0320 	and.w	r3, r3, #32
 8104136:	2b20      	cmp	r3, #32
 8104138:	d1e9      	bne.n	810410e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810413a:	68fb      	ldr	r3, [r7, #12]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	699b      	ldr	r3, [r3, #24]
 8104140:	f003 0320 	and.w	r3, r3, #32
 8104144:	2b20      	cmp	r3, #32
 8104146:	d003      	beq.n	8104150 <I2C_IsErrorOccurred+0xe0>
 8104148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810414c:	2b00      	cmp	r3, #0
 810414e:	d0aa      	beq.n	81040a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8104150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104154:	2b00      	cmp	r3, #0
 8104156:	d103      	bne.n	8104160 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104158:	68fb      	ldr	r3, [r7, #12]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	2220      	movs	r2, #32
 810415e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8104160:	6a3b      	ldr	r3, [r7, #32]
 8104162:	f043 0304 	orr.w	r3, r3, #4
 8104166:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8104168:	2301      	movs	r3, #1
 810416a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810416e:	68fb      	ldr	r3, [r7, #12]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	699b      	ldr	r3, [r3, #24]
 8104174:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8104176:	69bb      	ldr	r3, [r7, #24]
 8104178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810417c:	2b00      	cmp	r3, #0
 810417e:	d00b      	beq.n	8104198 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8104180:	6a3b      	ldr	r3, [r7, #32]
 8104182:	f043 0301 	orr.w	r3, r3, #1
 8104186:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	681b      	ldr	r3, [r3, #0]
 810418c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8104190:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104192:	2301      	movs	r3, #1
 8104194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8104198:	69bb      	ldr	r3, [r7, #24]
 810419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810419e:	2b00      	cmp	r3, #0
 81041a0:	d00b      	beq.n	81041ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81041a2:	6a3b      	ldr	r3, [r7, #32]
 81041a4:	f043 0308 	orr.w	r3, r3, #8
 81041a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81041aa:	68fb      	ldr	r3, [r7, #12]
 81041ac:	681b      	ldr	r3, [r3, #0]
 81041ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81041b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81041b4:	2301      	movs	r3, #1
 81041b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81041ba:	69bb      	ldr	r3, [r7, #24]
 81041bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	d00b      	beq.n	81041dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 81041c4:	6a3b      	ldr	r3, [r7, #32]
 81041c6:	f043 0302 	orr.w	r3, r3, #2
 81041ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81041cc:	68fb      	ldr	r3, [r7, #12]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81041d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81041d6:	2301      	movs	r3, #1
 81041d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 81041dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d01c      	beq.n	810421e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81041e4:	68f8      	ldr	r0, [r7, #12]
 81041e6:	f7ff fdaf 	bl	8103d48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	6859      	ldr	r1, [r3, #4]
 81041f0:	68fb      	ldr	r3, [r7, #12]
 81041f2:	681a      	ldr	r2, [r3, #0]
 81041f4:	4b0d      	ldr	r3, [pc, #52]	@ (810422c <I2C_IsErrorOccurred+0x1bc>)
 81041f6:	400b      	ands	r3, r1
 81041f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81041fa:	68fb      	ldr	r3, [r7, #12]
 81041fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81041fe:	6a3b      	ldr	r3, [r7, #32]
 8104200:	431a      	orrs	r2, r3
 8104202:	68fb      	ldr	r3, [r7, #12]
 8104204:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	2220      	movs	r2, #32
 810420a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	2200      	movs	r2, #0
 8104212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104216:	68fb      	ldr	r3, [r7, #12]
 8104218:	2200      	movs	r2, #0
 810421a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810421e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8104222:	4618      	mov	r0, r3
 8104224:	3728      	adds	r7, #40	@ 0x28
 8104226:	46bd      	mov	sp, r7
 8104228:	bd80      	pop	{r7, pc}
 810422a:	bf00      	nop
 810422c:	fe00e800 	.word	0xfe00e800

08104230 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104230:	b480      	push	{r7}
 8104232:	b087      	sub	sp, #28
 8104234:	af00      	add	r7, sp, #0
 8104236:	60f8      	str	r0, [r7, #12]
 8104238:	607b      	str	r3, [r7, #4]
 810423a:	460b      	mov	r3, r1
 810423c:	817b      	strh	r3, [r7, #10]
 810423e:	4613      	mov	r3, r2
 8104240:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104242:	897b      	ldrh	r3, [r7, #10]
 8104244:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104248:	7a7b      	ldrb	r3, [r7, #9]
 810424a:	041b      	lsls	r3, r3, #16
 810424c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104250:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104256:	6a3b      	ldr	r3, [r7, #32]
 8104258:	4313      	orrs	r3, r2
 810425a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810425e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	685a      	ldr	r2, [r3, #4]
 8104266:	6a3b      	ldr	r3, [r7, #32]
 8104268:	0d5b      	lsrs	r3, r3, #21
 810426a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 810426e:	4b08      	ldr	r3, [pc, #32]	@ (8104290 <I2C_TransferConfig+0x60>)
 8104270:	430b      	orrs	r3, r1
 8104272:	43db      	mvns	r3, r3
 8104274:	ea02 0103 	and.w	r1, r2, r3
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	697a      	ldr	r2, [r7, #20]
 810427e:	430a      	orrs	r2, r1
 8104280:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8104282:	bf00      	nop
 8104284:	371c      	adds	r7, #28
 8104286:	46bd      	mov	sp, r7
 8104288:	f85d 7b04 	ldr.w	r7, [sp], #4
 810428c:	4770      	bx	lr
 810428e:	bf00      	nop
 8104290:	03ff63ff 	.word	0x03ff63ff

08104294 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104294:	b480      	push	{r7}
 8104296:	b083      	sub	sp, #12
 8104298:	af00      	add	r7, sp, #0
 810429a:	6078      	str	r0, [r7, #4]
 810429c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810429e:	687b      	ldr	r3, [r7, #4]
 81042a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81042a4:	b2db      	uxtb	r3, r3
 81042a6:	2b20      	cmp	r3, #32
 81042a8:	d138      	bne.n	810431c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81042b0:	2b01      	cmp	r3, #1
 81042b2:	d101      	bne.n	81042b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81042b4:	2302      	movs	r3, #2
 81042b6:	e032      	b.n	810431e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81042b8:	687b      	ldr	r3, [r7, #4]
 81042ba:	2201      	movs	r2, #1
 81042bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	2224      	movs	r2, #36	@ 0x24
 81042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	681a      	ldr	r2, [r3, #0]
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	f022 0201 	bic.w	r2, r2, #1
 81042d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	681a      	ldr	r2, [r3, #0]
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 81042e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	6819      	ldr	r1, [r3, #0]
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	683a      	ldr	r2, [r7, #0]
 81042f4:	430a      	orrs	r2, r1
 81042f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	681a      	ldr	r2, [r3, #0]
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	681b      	ldr	r3, [r3, #0]
 8104302:	f042 0201 	orr.w	r2, r2, #1
 8104306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	2220      	movs	r2, #32
 810430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	2200      	movs	r2, #0
 8104314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104318:	2300      	movs	r3, #0
 810431a:	e000      	b.n	810431e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810431c:	2302      	movs	r3, #2
  }
}
 810431e:	4618      	mov	r0, r3
 8104320:	370c      	adds	r7, #12
 8104322:	46bd      	mov	sp, r7
 8104324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104328:	4770      	bx	lr

0810432a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810432a:	b480      	push	{r7}
 810432c:	b085      	sub	sp, #20
 810432e:	af00      	add	r7, sp, #0
 8104330:	6078      	str	r0, [r7, #4]
 8104332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810433a:	b2db      	uxtb	r3, r3
 810433c:	2b20      	cmp	r3, #32
 810433e:	d139      	bne.n	81043b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104346:	2b01      	cmp	r3, #1
 8104348:	d101      	bne.n	810434e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810434a:	2302      	movs	r3, #2
 810434c:	e033      	b.n	81043b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	2201      	movs	r2, #1
 8104352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	2224      	movs	r2, #36	@ 0x24
 810435a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	681a      	ldr	r2, [r3, #0]
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	f022 0201 	bic.w	r2, r2, #1
 810436c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104376:	68fb      	ldr	r3, [r7, #12]
 8104378:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810437c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810437e:	683b      	ldr	r3, [r7, #0]
 8104380:	021b      	lsls	r3, r3, #8
 8104382:	68fa      	ldr	r2, [r7, #12]
 8104384:	4313      	orrs	r3, r2
 8104386:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	68fa      	ldr	r2, [r7, #12]
 810438e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	681b      	ldr	r3, [r3, #0]
 8104394:	681a      	ldr	r2, [r3, #0]
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	f042 0201 	orr.w	r2, r2, #1
 810439e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	2220      	movs	r2, #32
 81043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	2200      	movs	r2, #0
 81043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81043b0:	2300      	movs	r3, #0
 81043b2:	e000      	b.n	81043b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81043b4:	2302      	movs	r3, #2
  }
}
 81043b6:	4618      	mov	r0, r3
 81043b8:	3714      	adds	r7, #20
 81043ba:	46bd      	mov	sp, r7
 81043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043c0:	4770      	bx	lr
	...

081043c4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81043c4:	b580      	push	{r7, lr}
 81043c6:	b084      	sub	sp, #16
 81043c8:	af00      	add	r7, sp, #0
 81043ca:	60f8      	str	r0, [r7, #12]
 81043cc:	460b      	mov	r3, r1
 81043ce:	607a      	str	r2, [r7, #4]
 81043d0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81043d2:	4b37      	ldr	r3, [pc, #220]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	f023 0201 	bic.w	r2, r3, #1
 81043da:	4935      	ldr	r1, [pc, #212]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81043dc:	68fb      	ldr	r3, [r7, #12]
 81043de:	4313      	orrs	r3, r2
 81043e0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d123      	bne.n	8104430 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81043e8:	f7ff f814 	bl	8103414 <HAL_GetCurrentCPUID>
 81043ec:	4603      	mov	r3, r0
 81043ee:	2b03      	cmp	r3, #3
 81043f0:	d158      	bne.n	81044a4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81043f2:	4b2f      	ldr	r3, [pc, #188]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81043f4:	691b      	ldr	r3, [r3, #16]
 81043f6:	4a2e      	ldr	r2, [pc, #184]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81043f8:	f023 0301 	bic.w	r3, r3, #1
 81043fc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81043fe:	4b2d      	ldr	r3, [pc, #180]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104400:	691b      	ldr	r3, [r3, #16]
 8104402:	4a2c      	ldr	r2, [pc, #176]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104404:	f043 0304 	orr.w	r3, r3, #4
 8104408:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810440a:	f3bf 8f4f 	dsb	sy
}
 810440e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104410:	f3bf 8f6f 	isb	sy
}
 8104414:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104416:	7afb      	ldrb	r3, [r7, #11]
 8104418:	2b01      	cmp	r3, #1
 810441a:	d101      	bne.n	8104420 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810441c:	bf30      	wfi
 810441e:	e000      	b.n	8104422 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104420:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104422:	4b24      	ldr	r3, [pc, #144]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104424:	691b      	ldr	r3, [r3, #16]
 8104426:	4a23      	ldr	r2, [pc, #140]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104428:	f023 0304 	bic.w	r3, r3, #4
 810442c:	6113      	str	r3, [r2, #16]
 810442e:	e03c      	b.n	81044aa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	2b01      	cmp	r3, #1
 8104434:	d123      	bne.n	810447e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104436:	f7fe ffed 	bl	8103414 <HAL_GetCurrentCPUID>
 810443a:	4603      	mov	r3, r0
 810443c:	2b01      	cmp	r3, #1
 810443e:	d133      	bne.n	81044a8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104440:	4b1b      	ldr	r3, [pc, #108]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104442:	695b      	ldr	r3, [r3, #20]
 8104444:	4a1a      	ldr	r2, [pc, #104]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104446:	f023 0302 	bic.w	r3, r3, #2
 810444a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810444c:	4b19      	ldr	r3, [pc, #100]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810444e:	691b      	ldr	r3, [r3, #16]
 8104450:	4a18      	ldr	r2, [pc, #96]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104452:	f043 0304 	orr.w	r3, r3, #4
 8104456:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104458:	f3bf 8f4f 	dsb	sy
}
 810445c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810445e:	f3bf 8f6f 	isb	sy
}
 8104462:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104464:	7afb      	ldrb	r3, [r7, #11]
 8104466:	2b01      	cmp	r3, #1
 8104468:	d101      	bne.n	810446e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810446a:	bf30      	wfi
 810446c:	e000      	b.n	8104470 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810446e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104470:	4b10      	ldr	r3, [pc, #64]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104472:	691b      	ldr	r3, [r3, #16]
 8104474:	4a0f      	ldr	r2, [pc, #60]	@ (81044b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104476:	f023 0304 	bic.w	r3, r3, #4
 810447a:	6113      	str	r3, [r2, #16]
 810447c:	e015      	b.n	81044aa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810447e:	f7fe ffc9 	bl	8103414 <HAL_GetCurrentCPUID>
 8104482:	4603      	mov	r3, r0
 8104484:	2b03      	cmp	r3, #3
 8104486:	d106      	bne.n	8104496 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104488:	4b09      	ldr	r3, [pc, #36]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810448a:	691b      	ldr	r3, [r3, #16]
 810448c:	4a08      	ldr	r2, [pc, #32]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810448e:	f023 0304 	bic.w	r3, r3, #4
 8104492:	6113      	str	r3, [r2, #16]
 8104494:	e009      	b.n	81044aa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104496:	4b06      	ldr	r3, [pc, #24]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104498:	695b      	ldr	r3, [r3, #20]
 810449a:	4a05      	ldr	r2, [pc, #20]	@ (81044b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810449c:	f023 0304 	bic.w	r3, r3, #4
 81044a0:	6153      	str	r3, [r2, #20]
 81044a2:	e002      	b.n	81044aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81044a4:	bf00      	nop
 81044a6:	e000      	b.n	81044aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81044a8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81044aa:	3710      	adds	r7, #16
 81044ac:	46bd      	mov	sp, r7
 81044ae:	bd80      	pop	{r7, pc}
 81044b0:	58024800 	.word	0x58024800
 81044b4:	e000ed00 	.word	0xe000ed00

081044b8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81044b8:	b580      	push	{r7, lr}
 81044ba:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81044bc:	f7fe ffaa 	bl	8103414 <HAL_GetCurrentCPUID>
 81044c0:	4603      	mov	r3, r0
 81044c2:	2b03      	cmp	r3, #3
 81044c4:	d101      	bne.n	81044ca <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81044c6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81044c8:	e001      	b.n	81044ce <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81044ca:	bf40      	sev
    __WFE ();
 81044cc:	bf20      	wfe
}
 81044ce:	bf00      	nop
 81044d0:	bd80      	pop	{r7, pc}
	...

081044d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81044d4:	b480      	push	{r7}
 81044d6:	b089      	sub	sp, #36	@ 0x24
 81044d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81044da:	4bb3      	ldr	r3, [pc, #716]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81044dc:	691b      	ldr	r3, [r3, #16]
 81044de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81044e2:	2b18      	cmp	r3, #24
 81044e4:	f200 8155 	bhi.w	8104792 <HAL_RCC_GetSysClockFreq+0x2be>
 81044e8:	a201      	add	r2, pc, #4	@ (adr r2, 81044f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044ee:	bf00      	nop
 81044f0:	08104555 	.word	0x08104555
 81044f4:	08104793 	.word	0x08104793
 81044f8:	08104793 	.word	0x08104793
 81044fc:	08104793 	.word	0x08104793
 8104500:	08104793 	.word	0x08104793
 8104504:	08104793 	.word	0x08104793
 8104508:	08104793 	.word	0x08104793
 810450c:	08104793 	.word	0x08104793
 8104510:	0810457b 	.word	0x0810457b
 8104514:	08104793 	.word	0x08104793
 8104518:	08104793 	.word	0x08104793
 810451c:	08104793 	.word	0x08104793
 8104520:	08104793 	.word	0x08104793
 8104524:	08104793 	.word	0x08104793
 8104528:	08104793 	.word	0x08104793
 810452c:	08104793 	.word	0x08104793
 8104530:	08104581 	.word	0x08104581
 8104534:	08104793 	.word	0x08104793
 8104538:	08104793 	.word	0x08104793
 810453c:	08104793 	.word	0x08104793
 8104540:	08104793 	.word	0x08104793
 8104544:	08104793 	.word	0x08104793
 8104548:	08104793 	.word	0x08104793
 810454c:	08104793 	.word	0x08104793
 8104550:	08104587 	.word	0x08104587
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104554:	4b94      	ldr	r3, [pc, #592]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	f003 0320 	and.w	r3, r3, #32
 810455c:	2b00      	cmp	r3, #0
 810455e:	d009      	beq.n	8104574 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104560:	4b91      	ldr	r3, [pc, #580]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	08db      	lsrs	r3, r3, #3
 8104566:	f003 0303 	and.w	r3, r3, #3
 810456a:	4a90      	ldr	r2, [pc, #576]	@ (81047ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 810456c:	fa22 f303 	lsr.w	r3, r2, r3
 8104570:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8104572:	e111      	b.n	8104798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104574:	4b8d      	ldr	r3, [pc, #564]	@ (81047ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104576:	61bb      	str	r3, [r7, #24]
      break;
 8104578:	e10e      	b.n	8104798 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810457a:	4b8d      	ldr	r3, [pc, #564]	@ (81047b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810457c:	61bb      	str	r3, [r7, #24]
      break;
 810457e:	e10b      	b.n	8104798 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104580:	4b8c      	ldr	r3, [pc, #560]	@ (81047b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104582:	61bb      	str	r3, [r7, #24]
      break;
 8104584:	e108      	b.n	8104798 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104586:	4b88      	ldr	r3, [pc, #544]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810458a:	f003 0303 	and.w	r3, r3, #3
 810458e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104590:	4b85      	ldr	r3, [pc, #532]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104594:	091b      	lsrs	r3, r3, #4
 8104596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810459a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810459c:	4b82      	ldr	r3, [pc, #520]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045a0:	f003 0301 	and.w	r3, r3, #1
 81045a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81045a6:	4b80      	ldr	r3, [pc, #512]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045aa:	08db      	lsrs	r3, r3, #3
 81045ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81045b0:	68fa      	ldr	r2, [r7, #12]
 81045b2:	fb02 f303 	mul.w	r3, r2, r3
 81045b6:	ee07 3a90 	vmov	s15, r3
 81045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81045c2:	693b      	ldr	r3, [r7, #16]
 81045c4:	2b00      	cmp	r3, #0
 81045c6:	f000 80e1 	beq.w	810478c <HAL_RCC_GetSysClockFreq+0x2b8>
 81045ca:	697b      	ldr	r3, [r7, #20]
 81045cc:	2b02      	cmp	r3, #2
 81045ce:	f000 8083 	beq.w	81046d8 <HAL_RCC_GetSysClockFreq+0x204>
 81045d2:	697b      	ldr	r3, [r7, #20]
 81045d4:	2b02      	cmp	r3, #2
 81045d6:	f200 80a1 	bhi.w	810471c <HAL_RCC_GetSysClockFreq+0x248>
 81045da:	697b      	ldr	r3, [r7, #20]
 81045dc:	2b00      	cmp	r3, #0
 81045de:	d003      	beq.n	81045e8 <HAL_RCC_GetSysClockFreq+0x114>
 81045e0:	697b      	ldr	r3, [r7, #20]
 81045e2:	2b01      	cmp	r3, #1
 81045e4:	d056      	beq.n	8104694 <HAL_RCC_GetSysClockFreq+0x1c0>
 81045e6:	e099      	b.n	810471c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81045e8:	4b6f      	ldr	r3, [pc, #444]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	f003 0320 	and.w	r3, r3, #32
 81045f0:	2b00      	cmp	r3, #0
 81045f2:	d02d      	beq.n	8104650 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81045f4:	4b6c      	ldr	r3, [pc, #432]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	08db      	lsrs	r3, r3, #3
 81045fa:	f003 0303 	and.w	r3, r3, #3
 81045fe:	4a6b      	ldr	r2, [pc, #428]	@ (81047ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104600:	fa22 f303 	lsr.w	r3, r2, r3
 8104604:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	ee07 3a90 	vmov	s15, r3
 810460c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104610:	693b      	ldr	r3, [r7, #16]
 8104612:	ee07 3a90 	vmov	s15, r3
 8104616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810461e:	4b62      	ldr	r3, [pc, #392]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104626:	ee07 3a90 	vmov	s15, r3
 810462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810462e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104632:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81047b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810463e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104646:	ee67 7a27 	vmul.f32	s15, s14, s15
 810464a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810464e:	e087      	b.n	8104760 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104650:	693b      	ldr	r3, [r7, #16]
 8104652:	ee07 3a90 	vmov	s15, r3
 8104656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810465a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81047bc <HAL_RCC_GetSysClockFreq+0x2e8>
 810465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104662:	4b51      	ldr	r3, [pc, #324]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810466a:	ee07 3a90 	vmov	s15, r3
 810466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104672:	ed97 6a02 	vldr	s12, [r7, #8]
 8104676:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81047b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810468e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104692:	e065      	b.n	8104760 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104694:	693b      	ldr	r3, [r7, #16]
 8104696:	ee07 3a90 	vmov	s15, r3
 810469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810469e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81047c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046a6:	4b40      	ldr	r3, [pc, #256]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046ae:	ee07 3a90 	vmov	s15, r3
 81046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81046ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81047b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81046d6:	e043      	b.n	8104760 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81046d8:	693b      	ldr	r3, [r7, #16]
 81046da:	ee07 3a90 	vmov	s15, r3
 81046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 81047c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046ea:	4b2f      	ldr	r3, [pc, #188]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046f2:	ee07 3a90 	vmov	s15, r3
 81046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81046fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81047b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810470a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104716:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810471a:	e021      	b.n	8104760 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810471c:	693b      	ldr	r3, [r7, #16]
 810471e:	ee07 3a90 	vmov	s15, r3
 8104722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104726:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81047c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810472e:	4b1e      	ldr	r3, [pc, #120]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104736:	ee07 3a90 	vmov	s15, r3
 810473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810473e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104742:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81047b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810474e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104756:	ee67 7a27 	vmul.f32	s15, s14, s15
 810475a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810475e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104760:	4b11      	ldr	r3, [pc, #68]	@ (81047a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104764:	0a5b      	lsrs	r3, r3, #9
 8104766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810476a:	3301      	adds	r3, #1
 810476c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810476e:	683b      	ldr	r3, [r7, #0]
 8104770:	ee07 3a90 	vmov	s15, r3
 8104774:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104778:	edd7 6a07 	vldr	s13, [r7, #28]
 810477c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104784:	ee17 3a90 	vmov	r3, s15
 8104788:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810478a:	e005      	b.n	8104798 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810478c:	2300      	movs	r3, #0
 810478e:	61bb      	str	r3, [r7, #24]
      break;
 8104790:	e002      	b.n	8104798 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8104792:	4b07      	ldr	r3, [pc, #28]	@ (81047b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104794:	61bb      	str	r3, [r7, #24]
      break;
 8104796:	bf00      	nop
  }

  return sysclockfreq;
 8104798:	69bb      	ldr	r3, [r7, #24]
}
 810479a:	4618      	mov	r0, r3
 810479c:	3724      	adds	r7, #36	@ 0x24
 810479e:	46bd      	mov	sp, r7
 81047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a4:	4770      	bx	lr
 81047a6:	bf00      	nop
 81047a8:	58024400 	.word	0x58024400
 81047ac:	03d09000 	.word	0x03d09000
 81047b0:	003d0900 	.word	0x003d0900
 81047b4:	007a1200 	.word	0x007a1200
 81047b8:	46000000 	.word	0x46000000
 81047bc:	4c742400 	.word	0x4c742400
 81047c0:	4a742400 	.word	0x4a742400
 81047c4:	4af42400 	.word	0x4af42400

081047c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81047c8:	b580      	push	{r7, lr}
 81047ca:	b082      	sub	sp, #8
 81047cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81047ce:	f7ff fe81 	bl	81044d4 <HAL_RCC_GetSysClockFreq>
 81047d2:	4602      	mov	r2, r0
 81047d4:	4b11      	ldr	r3, [pc, #68]	@ (810481c <HAL_RCC_GetHCLKFreq+0x54>)
 81047d6:	699b      	ldr	r3, [r3, #24]
 81047d8:	0a1b      	lsrs	r3, r3, #8
 81047da:	f003 030f 	and.w	r3, r3, #15
 81047de:	4910      	ldr	r1, [pc, #64]	@ (8104820 <HAL_RCC_GetHCLKFreq+0x58>)
 81047e0:	5ccb      	ldrb	r3, [r1, r3]
 81047e2:	f003 031f 	and.w	r3, r3, #31
 81047e6:	fa22 f303 	lsr.w	r3, r2, r3
 81047ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81047ec:	4b0b      	ldr	r3, [pc, #44]	@ (810481c <HAL_RCC_GetHCLKFreq+0x54>)
 81047ee:	699b      	ldr	r3, [r3, #24]
 81047f0:	f003 030f 	and.w	r3, r3, #15
 81047f4:	4a0a      	ldr	r2, [pc, #40]	@ (8104820 <HAL_RCC_GetHCLKFreq+0x58>)
 81047f6:	5cd3      	ldrb	r3, [r2, r3]
 81047f8:	f003 031f 	and.w	r3, r3, #31
 81047fc:	687a      	ldr	r2, [r7, #4]
 81047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8104802:	4a08      	ldr	r2, [pc, #32]	@ (8104824 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104804:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104806:	4b07      	ldr	r3, [pc, #28]	@ (8104824 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	4a07      	ldr	r2, [pc, #28]	@ (8104828 <HAL_RCC_GetHCLKFreq+0x60>)
 810480c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810480e:	4b05      	ldr	r3, [pc, #20]	@ (8104824 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104810:	681b      	ldr	r3, [r3, #0]
}
 8104812:	4618      	mov	r0, r3
 8104814:	3708      	adds	r7, #8
 8104816:	46bd      	mov	sp, r7
 8104818:	bd80      	pop	{r7, pc}
 810481a:	bf00      	nop
 810481c:	58024400 	.word	0x58024400
 8104820:	0810e7cc 	.word	0x0810e7cc
 8104824:	10000004 	.word	0x10000004
 8104828:	10000000 	.word	0x10000000

0810482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810482c:	b580      	push	{r7, lr}
 810482e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104830:	f7ff ffca 	bl	81047c8 <HAL_RCC_GetHCLKFreq>
 8104834:	4602      	mov	r2, r0
 8104836:	4b06      	ldr	r3, [pc, #24]	@ (8104850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104838:	69db      	ldr	r3, [r3, #28]
 810483a:	091b      	lsrs	r3, r3, #4
 810483c:	f003 0307 	and.w	r3, r3, #7
 8104840:	4904      	ldr	r1, [pc, #16]	@ (8104854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104842:	5ccb      	ldrb	r3, [r1, r3]
 8104844:	f003 031f 	and.w	r3, r3, #31
 8104848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810484c:	4618      	mov	r0, r3
 810484e:	bd80      	pop	{r7, pc}
 8104850:	58024400 	.word	0x58024400
 8104854:	0810e7cc 	.word	0x0810e7cc

08104858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104858:	b580      	push	{r7, lr}
 810485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810485c:	f7ff ffb4 	bl	81047c8 <HAL_RCC_GetHCLKFreq>
 8104860:	4602      	mov	r2, r0
 8104862:	4b06      	ldr	r3, [pc, #24]	@ (810487c <HAL_RCC_GetPCLK2Freq+0x24>)
 8104864:	69db      	ldr	r3, [r3, #28]
 8104866:	0a1b      	lsrs	r3, r3, #8
 8104868:	f003 0307 	and.w	r3, r3, #7
 810486c:	4904      	ldr	r1, [pc, #16]	@ (8104880 <HAL_RCC_GetPCLK2Freq+0x28>)
 810486e:	5ccb      	ldrb	r3, [r1, r3]
 8104870:	f003 031f 	and.w	r3, r3, #31
 8104874:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104878:	4618      	mov	r0, r3
 810487a:	bd80      	pop	{r7, pc}
 810487c:	58024400 	.word	0x58024400
 8104880:	0810e7cc 	.word	0x0810e7cc

08104884 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104888:	b0ca      	sub	sp, #296	@ 0x128
 810488a:	af00      	add	r7, sp, #0
 810488c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104890:	2300      	movs	r3, #0
 8104892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104896:	2300      	movs	r3, #0
 8104898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810489c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81048a8:	2500      	movs	r5, #0
 81048aa:	ea54 0305 	orrs.w	r3, r4, r5
 81048ae:	d049      	beq.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81048b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81048ba:	d02f      	beq.n	810491c <HAL_RCCEx_PeriphCLKConfig+0x98>
 81048bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81048c0:	d828      	bhi.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81048c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81048c6:	d01a      	beq.n	81048fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81048c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81048cc:	d822      	bhi.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81048ce:	2b00      	cmp	r3, #0
 81048d0:	d003      	beq.n	81048da <HAL_RCCEx_PeriphCLKConfig+0x56>
 81048d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81048d6:	d007      	beq.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81048d8:	e01c      	b.n	8104914 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81048da:	4bb8      	ldr	r3, [pc, #736]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81048de:	4ab7      	ldr	r2, [pc, #732]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81048e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81048e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81048e6:	e01a      	b.n	810491e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81048e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048ec:	3308      	adds	r3, #8
 81048ee:	2102      	movs	r1, #2
 81048f0:	4618      	mov	r0, r3
 81048f2:	f001 fc8f 	bl	8106214 <RCCEx_PLL2_Config>
 81048f6:	4603      	mov	r3, r0
 81048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81048fc:	e00f      	b.n	810491e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104902:	3328      	adds	r3, #40	@ 0x28
 8104904:	2102      	movs	r1, #2
 8104906:	4618      	mov	r0, r3
 8104908:	f001 fd36 	bl	8106378 <RCCEx_PLL3_Config>
 810490c:	4603      	mov	r3, r0
 810490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104912:	e004      	b.n	810491e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104914:	2301      	movs	r3, #1
 8104916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810491a:	e000      	b.n	810491e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810491c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104922:	2b00      	cmp	r3, #0
 8104924:	d10a      	bne.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104926:	4ba5      	ldr	r3, [pc, #660]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810492a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104934:	4aa1      	ldr	r2, [pc, #644]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104936:	430b      	orrs	r3, r1
 8104938:	6513      	str	r3, [r2, #80]	@ 0x50
 810493a:	e003      	b.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810493c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104948:	e9d3 2300 	ldrd	r2, r3, [r3]
 810494c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8104950:	f04f 0900 	mov.w	r9, #0
 8104954:	ea58 0309 	orrs.w	r3, r8, r9
 8104958:	d047      	beq.n	81049ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810495a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810495e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104960:	2b04      	cmp	r3, #4
 8104962:	d82a      	bhi.n	81049ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104964:	a201      	add	r2, pc, #4	@ (adr r2, 810496c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810496a:	bf00      	nop
 810496c:	08104981 	.word	0x08104981
 8104970:	0810498f 	.word	0x0810498f
 8104974:	081049a5 	.word	0x081049a5
 8104978:	081049c3 	.word	0x081049c3
 810497c:	081049c3 	.word	0x081049c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104980:	4b8e      	ldr	r3, [pc, #568]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104984:	4a8d      	ldr	r2, [pc, #564]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810498a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810498c:	e01a      	b.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104992:	3308      	adds	r3, #8
 8104994:	2100      	movs	r1, #0
 8104996:	4618      	mov	r0, r3
 8104998:	f001 fc3c 	bl	8106214 <RCCEx_PLL2_Config>
 810499c:	4603      	mov	r3, r0
 810499e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049a2:	e00f      	b.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049a8:	3328      	adds	r3, #40	@ 0x28
 81049aa:	2100      	movs	r1, #0
 81049ac:	4618      	mov	r0, r3
 81049ae:	f001 fce3 	bl	8106378 <RCCEx_PLL3_Config>
 81049b2:	4603      	mov	r3, r0
 81049b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049b8:	e004      	b.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81049ba:	2301      	movs	r3, #1
 81049bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81049c0:	e000      	b.n	81049c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 81049c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81049c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81049c8:	2b00      	cmp	r3, #0
 81049ca:	d10a      	bne.n	81049e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81049cc:	4b7b      	ldr	r3, [pc, #492]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81049d0:	f023 0107 	bic.w	r1, r3, #7
 81049d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049da:	4a78      	ldr	r2, [pc, #480]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049dc:	430b      	orrs	r3, r1
 81049de:	6513      	str	r3, [r2, #80]	@ 0x50
 81049e0:	e003      	b.n	81049ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81049e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81049ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81049f6:	f04f 0b00 	mov.w	fp, #0
 81049fa:	ea5a 030b 	orrs.w	r3, sl, fp
 81049fe:	d04c      	beq.n	8104a9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a0a:	d030      	beq.n	8104a6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a10:	d829      	bhi.n	8104a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a14:	d02d      	beq.n	8104a72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a18:	d825      	bhi.n	8104a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a1a:	2b80      	cmp	r3, #128	@ 0x80
 8104a1c:	d018      	beq.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104a1e:	2b80      	cmp	r3, #128	@ 0x80
 8104a20:	d821      	bhi.n	8104a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a22:	2b00      	cmp	r3, #0
 8104a24:	d002      	beq.n	8104a2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104a26:	2b40      	cmp	r3, #64	@ 0x40
 8104a28:	d007      	beq.n	8104a3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104a2a:	e01c      	b.n	8104a66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a2c:	4b63      	ldr	r3, [pc, #396]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a30:	4a62      	ldr	r2, [pc, #392]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a38:	e01c      	b.n	8104a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a3e:	3308      	adds	r3, #8
 8104a40:	2100      	movs	r1, #0
 8104a42:	4618      	mov	r0, r3
 8104a44:	f001 fbe6 	bl	8106214 <RCCEx_PLL2_Config>
 8104a48:	4603      	mov	r3, r0
 8104a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a4e:	e011      	b.n	8104a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a54:	3328      	adds	r3, #40	@ 0x28
 8104a56:	2100      	movs	r1, #0
 8104a58:	4618      	mov	r0, r3
 8104a5a:	f001 fc8d 	bl	8106378 <RCCEx_PLL3_Config>
 8104a5e:	4603      	mov	r3, r0
 8104a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a64:	e006      	b.n	8104a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104a66:	2301      	movs	r3, #1
 8104a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104a6c:	e002      	b.n	8104a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104a6e:	bf00      	nop
 8104a70:	e000      	b.n	8104a74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a78:	2b00      	cmp	r3, #0
 8104a7a:	d10a      	bne.n	8104a92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a80:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8104a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a8c:	430b      	orrs	r3, r1
 8104a8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104a90:	e003      	b.n	8104a9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104aa2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104aa6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8104aaa:	2300      	movs	r3, #0
 8104aac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8104ab0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8104ab4:	460b      	mov	r3, r1
 8104ab6:	4313      	orrs	r3, r2
 8104ab8:	d053      	beq.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104ac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104ac6:	d035      	beq.n	8104b34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104ac8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104acc:	d82e      	bhi.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104ace:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104ad2:	d031      	beq.n	8104b38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104ad4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104ad8:	d828      	bhi.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104ade:	d01a      	beq.n	8104b16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104ae0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104ae4:	d822      	bhi.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104ae6:	2b00      	cmp	r3, #0
 8104ae8:	d003      	beq.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104aea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104aee:	d007      	beq.n	8104b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104af0:	e01c      	b.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104af2:	4b32      	ldr	r3, [pc, #200]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104af6:	4a31      	ldr	r2, [pc, #196]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104afc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104afe:	e01c      	b.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b04:	3308      	adds	r3, #8
 8104b06:	2100      	movs	r1, #0
 8104b08:	4618      	mov	r0, r3
 8104b0a:	f001 fb83 	bl	8106214 <RCCEx_PLL2_Config>
 8104b0e:	4603      	mov	r3, r0
 8104b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104b14:	e011      	b.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b1a:	3328      	adds	r3, #40	@ 0x28
 8104b1c:	2100      	movs	r1, #0
 8104b1e:	4618      	mov	r0, r3
 8104b20:	f001 fc2a 	bl	8106378 <RCCEx_PLL3_Config>
 8104b24:	4603      	mov	r3, r0
 8104b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b2a:	e006      	b.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104b2c:	2301      	movs	r3, #1
 8104b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104b32:	e002      	b.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104b34:	bf00      	nop
 8104b36:	e000      	b.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b3e:	2b00      	cmp	r3, #0
 8104b40:	d10b      	bne.n	8104b5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104b42:	4b1e      	ldr	r3, [pc, #120]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8104b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104b52:	4a1a      	ldr	r2, [pc, #104]	@ (8104bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b54:	430b      	orrs	r3, r1
 8104b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8104b58:	e003      	b.n	8104b62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8104b6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8104b72:	2300      	movs	r3, #0
 8104b74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8104b78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8104b7c:	460b      	mov	r3, r1
 8104b7e:	4313      	orrs	r3, r2
 8104b80:	d056      	beq.n	8104c30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104b8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104b8e:	d038      	beq.n	8104c02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104b94:	d831      	bhi.n	8104bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104b96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104b9a:	d034      	beq.n	8104c06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104b9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104ba0:	d82b      	bhi.n	8104bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104ba2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104ba6:	d01d      	beq.n	8104be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104bac:	d825      	bhi.n	8104bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bae:	2b00      	cmp	r3, #0
 8104bb0:	d006      	beq.n	8104bc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104bb6:	d00a      	beq.n	8104bce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104bb8:	e01f      	b.n	8104bfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bba:	bf00      	nop
 8104bbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104bc0:	4ba2      	ldr	r3, [pc, #648]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104bc4:	4aa1      	ldr	r2, [pc, #644]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104bc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104bcc:	e01c      	b.n	8104c08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bd2:	3308      	adds	r3, #8
 8104bd4:	2100      	movs	r1, #0
 8104bd6:	4618      	mov	r0, r3
 8104bd8:	f001 fb1c 	bl	8106214 <RCCEx_PLL2_Config>
 8104bdc:	4603      	mov	r3, r0
 8104bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104be2:	e011      	b.n	8104c08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104be8:	3328      	adds	r3, #40	@ 0x28
 8104bea:	2100      	movs	r1, #0
 8104bec:	4618      	mov	r0, r3
 8104bee:	f001 fbc3 	bl	8106378 <RCCEx_PLL3_Config>
 8104bf2:	4603      	mov	r3, r0
 8104bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104bf8:	e006      	b.n	8104c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104bfa:	2301      	movs	r3, #1
 8104bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104c00:	e002      	b.n	8104c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104c02:	bf00      	nop
 8104c04:	e000      	b.n	8104c08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c0c:	2b00      	cmp	r3, #0
 8104c0e:	d10b      	bne.n	8104c28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104c10:	4b8e      	ldr	r3, [pc, #568]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8104c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104c20:	4a8a      	ldr	r2, [pc, #552]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c22:	430b      	orrs	r3, r1
 8104c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8104c26:	e003      	b.n	8104c30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8104c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8104c40:	2300      	movs	r3, #0
 8104c42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8104c46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8104c4a:	460b      	mov	r3, r1
 8104c4c:	4313      	orrs	r3, r2
 8104c4e:	d03a      	beq.n	8104cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8104c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c56:	2b30      	cmp	r3, #48	@ 0x30
 8104c58:	d01f      	beq.n	8104c9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104c5a:	2b30      	cmp	r3, #48	@ 0x30
 8104c5c:	d819      	bhi.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104c5e:	2b20      	cmp	r3, #32
 8104c60:	d00c      	beq.n	8104c7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104c62:	2b20      	cmp	r3, #32
 8104c64:	d815      	bhi.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104c66:	2b00      	cmp	r3, #0
 8104c68:	d019      	beq.n	8104c9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8104c6a:	2b10      	cmp	r3, #16
 8104c6c:	d111      	bne.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c6e:	4b77      	ldr	r3, [pc, #476]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c72:	4a76      	ldr	r2, [pc, #472]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104c78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104c7a:	e011      	b.n	8104ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c80:	3308      	adds	r3, #8
 8104c82:	2102      	movs	r1, #2
 8104c84:	4618      	mov	r0, r3
 8104c86:	f001 fac5 	bl	8106214 <RCCEx_PLL2_Config>
 8104c8a:	4603      	mov	r3, r0
 8104c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104c90:	e006      	b.n	8104ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104c92:	2301      	movs	r3, #1
 8104c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104c98:	e002      	b.n	8104ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104c9a:	bf00      	nop
 8104c9c:	e000      	b.n	8104ca0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ca4:	2b00      	cmp	r3, #0
 8104ca6:	d10a      	bne.n	8104cbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104ca8:	4b68      	ldr	r3, [pc, #416]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cb6:	4a65      	ldr	r2, [pc, #404]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cb8:	430b      	orrs	r3, r1
 8104cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104cbc:	e003      	b.n	8104cc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104cce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8104cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104cd6:	2300      	movs	r3, #0
 8104cd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8104cdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8104ce0:	460b      	mov	r3, r1
 8104ce2:	4313      	orrs	r3, r2
 8104ce4:	d051      	beq.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104cf0:	d035      	beq.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104cf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104cf6:	d82e      	bhi.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104cf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104cfc:	d031      	beq.n	8104d62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8104cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104d02:	d828      	bhi.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104d08:	d01a      	beq.n	8104d40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104d0e:	d822      	bhi.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d10:	2b00      	cmp	r3, #0
 8104d12:	d003      	beq.n	8104d1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104d18:	d007      	beq.n	8104d2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104d1a:	e01c      	b.n	8104d56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d20:	4a4a      	ldr	r2, [pc, #296]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d28:	e01c      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d2e:	3308      	adds	r3, #8
 8104d30:	2100      	movs	r1, #0
 8104d32:	4618      	mov	r0, r3
 8104d34:	f001 fa6e 	bl	8106214 <RCCEx_PLL2_Config>
 8104d38:	4603      	mov	r3, r0
 8104d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d3e:	e011      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d44:	3328      	adds	r3, #40	@ 0x28
 8104d46:	2100      	movs	r1, #0
 8104d48:	4618      	mov	r0, r3
 8104d4a:	f001 fb15 	bl	8106378 <RCCEx_PLL3_Config>
 8104d4e:	4603      	mov	r3, r0
 8104d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d54:	e006      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d56:	2301      	movs	r3, #1
 8104d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104d5c:	e002      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104d5e:	bf00      	nop
 8104d60:	e000      	b.n	8104d64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d68:	2b00      	cmp	r3, #0
 8104d6a:	d10a      	bne.n	8104d82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104d6c:	4b37      	ldr	r3, [pc, #220]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104d70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8104d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104d7a:	4a34      	ldr	r2, [pc, #208]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d7c:	430b      	orrs	r3, r1
 8104d7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104d80:	e003      	b.n	8104d8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104d96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8104d9a:	2300      	movs	r3, #0
 8104d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8104da0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8104da4:	460b      	mov	r3, r1
 8104da6:	4313      	orrs	r3, r2
 8104da8:	d056      	beq.n	8104e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104db4:	d033      	beq.n	8104e1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104db6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104dba:	d82c      	bhi.n	8104e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104dbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104dc0:	d02f      	beq.n	8104e22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104dc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104dc6:	d826      	bhi.n	8104e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104dc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104dcc:	d02b      	beq.n	8104e26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104dce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104dd2:	d820      	bhi.n	8104e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104dd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104dd8:	d012      	beq.n	8104e00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104dda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104dde:	d81a      	bhi.n	8104e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	d022      	beq.n	8104e2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104de8:	d115      	bne.n	8104e16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dee:	3308      	adds	r3, #8
 8104df0:	2101      	movs	r1, #1
 8104df2:	4618      	mov	r0, r3
 8104df4:	f001 fa0e 	bl	8106214 <RCCEx_PLL2_Config>
 8104df8:	4603      	mov	r3, r0
 8104dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104dfe:	e015      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e04:	3328      	adds	r3, #40	@ 0x28
 8104e06:	2101      	movs	r1, #1
 8104e08:	4618      	mov	r0, r3
 8104e0a:	f001 fab5 	bl	8106378 <RCCEx_PLL3_Config>
 8104e0e:	4603      	mov	r3, r0
 8104e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104e14:	e00a      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e16:	2301      	movs	r3, #1
 8104e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104e1c:	e006      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e1e:	bf00      	nop
 8104e20:	e004      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e22:	bf00      	nop
 8104e24:	e002      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e26:	bf00      	nop
 8104e28:	e000      	b.n	8104e2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e30:	2b00      	cmp	r3, #0
 8104e32:	d10d      	bne.n	8104e50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104e34:	4b05      	ldr	r3, [pc, #20]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8104e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104e42:	4a02      	ldr	r2, [pc, #8]	@ (8104e4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e44:	430b      	orrs	r3, r1
 8104e46:	6513      	str	r3, [r2, #80]	@ 0x50
 8104e48:	e006      	b.n	8104e58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104e4a:	bf00      	nop
 8104e4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e60:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8104e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8104e68:	2300      	movs	r3, #0
 8104e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8104e6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8104e72:	460b      	mov	r3, r1
 8104e74:	4313      	orrs	r3, r2
 8104e76:	d055      	beq.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104e84:	d033      	beq.n	8104eee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104e8a:	d82c      	bhi.n	8104ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104e90:	d02f      	beq.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8104e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104e96:	d826      	bhi.n	8104ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104e98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104e9c:	d02b      	beq.n	8104ef6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8104e9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104ea2:	d820      	bhi.n	8104ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ea8:	d012      	beq.n	8104ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104eae:	d81a      	bhi.n	8104ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104eb0:	2b00      	cmp	r3, #0
 8104eb2:	d022      	beq.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104eb8:	d115      	bne.n	8104ee6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ebe:	3308      	adds	r3, #8
 8104ec0:	2101      	movs	r1, #1
 8104ec2:	4618      	mov	r0, r3
 8104ec4:	f001 f9a6 	bl	8106214 <RCCEx_PLL2_Config>
 8104ec8:	4603      	mov	r3, r0
 8104eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104ece:	e015      	b.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ed4:	3328      	adds	r3, #40	@ 0x28
 8104ed6:	2101      	movs	r1, #1
 8104ed8:	4618      	mov	r0, r3
 8104eda:	f001 fa4d 	bl	8106378 <RCCEx_PLL3_Config>
 8104ede:	4603      	mov	r3, r0
 8104ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104ee4:	e00a      	b.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8104ee6:	2301      	movs	r3, #1
 8104ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104eec:	e006      	b.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104eee:	bf00      	nop
 8104ef0:	e004      	b.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104ef2:	bf00      	nop
 8104ef4:	e002      	b.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104ef6:	bf00      	nop
 8104ef8:	e000      	b.n	8104efc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	d10b      	bne.n	8104f1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104f04:	4ba4      	ldr	r3, [pc, #656]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104f08:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104f14:	4aa0      	ldr	r2, [pc, #640]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f16:	430b      	orrs	r3, r1
 8104f18:	6593      	str	r3, [r2, #88]	@ 0x58
 8104f1a:	e003      	b.n	8104f24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8104f30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8104f34:	2300      	movs	r3, #0
 8104f36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8104f3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8104f3e:	460b      	mov	r3, r1
 8104f40:	4313      	orrs	r3, r2
 8104f42:	d037      	beq.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f4e:	d00e      	beq.n	8104f6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8104f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f54:	d816      	bhi.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8104f56:	2b00      	cmp	r3, #0
 8104f58:	d018      	beq.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104f5e:	d111      	bne.n	8104f84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f60:	4b8d      	ldr	r3, [pc, #564]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104f64:	4a8c      	ldr	r2, [pc, #560]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104f6c:	e00f      	b.n	8104f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f72:	3308      	adds	r3, #8
 8104f74:	2101      	movs	r1, #1
 8104f76:	4618      	mov	r0, r3
 8104f78:	f001 f94c 	bl	8106214 <RCCEx_PLL2_Config>
 8104f7c:	4603      	mov	r3, r0
 8104f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104f82:	e004      	b.n	8104f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f84:	2301      	movs	r3, #1
 8104f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104f8a:	e000      	b.n	8104f8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8104f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f92:	2b00      	cmp	r3, #0
 8104f94:	d10a      	bne.n	8104fac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104f96:	4b80      	ldr	r3, [pc, #512]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104f9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fa6:	430b      	orrs	r3, r1
 8104fa8:	6513      	str	r3, [r2, #80]	@ 0x50
 8104faa:	e003      	b.n	8104fb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fbc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8104fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8104fc4:	2300      	movs	r3, #0
 8104fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8104fca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8104fce:	460b      	mov	r3, r1
 8104fd0:	4313      	orrs	r3, r2
 8104fd2:	d039      	beq.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8104fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104fda:	2b03      	cmp	r3, #3
 8104fdc:	d81c      	bhi.n	8105018 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8104fde:	a201      	add	r2, pc, #4	@ (adr r2, 8104fe4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8104fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fe4:	08105021 	.word	0x08105021
 8104fe8:	08104ff5 	.word	0x08104ff5
 8104fec:	08105003 	.word	0x08105003
 8104ff0:	08105021 	.word	0x08105021
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ff4:	4b68      	ldr	r3, [pc, #416]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ff8:	4a67      	ldr	r2, [pc, #412]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105000:	e00f      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105006:	3308      	adds	r3, #8
 8105008:	2102      	movs	r1, #2
 810500a:	4618      	mov	r0, r3
 810500c:	f001 f902 	bl	8106214 <RCCEx_PLL2_Config>
 8105010:	4603      	mov	r3, r0
 8105012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105016:	e004      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105018:	2301      	movs	r3, #1
 810501a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810501e:	e000      	b.n	8105022 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105026:	2b00      	cmp	r3, #0
 8105028:	d10a      	bne.n	8105040 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810502a:	4b5b      	ldr	r3, [pc, #364]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810502c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810502e:	f023 0103 	bic.w	r1, r3, #3
 8105032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105038:	4a57      	ldr	r2, [pc, #348]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810503a:	430b      	orrs	r3, r1
 810503c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810503e:	e003      	b.n	8105048 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105050:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105054:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105058:	2300      	movs	r3, #0
 810505a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810505e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8105062:	460b      	mov	r3, r1
 8105064:	4313      	orrs	r3, r2
 8105066:	f000 809f 	beq.w	81051a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810506a:	4b4c      	ldr	r3, [pc, #304]	@ (810519c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810506c:	681b      	ldr	r3, [r3, #0]
 810506e:	4a4b      	ldr	r2, [pc, #300]	@ (810519c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8105074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105076:	f7fe f88d 	bl	8103194 <HAL_GetTick>
 810507a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810507e:	e00b      	b.n	8105098 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105080:	f7fe f888 	bl	8103194 <HAL_GetTick>
 8105084:	4602      	mov	r2, r0
 8105086:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810508a:	1ad3      	subs	r3, r2, r3
 810508c:	2b64      	cmp	r3, #100	@ 0x64
 810508e:	d903      	bls.n	8105098 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8105090:	2303      	movs	r3, #3
 8105092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105096:	e005      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105098:	4b40      	ldr	r3, [pc, #256]	@ (810519c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81050a0:	2b00      	cmp	r3, #0
 81050a2:	d0ed      	beq.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81050a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050a8:	2b00      	cmp	r3, #0
 81050aa:	d179      	bne.n	81051a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81050ac:	4b3a      	ldr	r3, [pc, #232]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81050b8:	4053      	eors	r3, r2
 81050ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81050be:	2b00      	cmp	r3, #0
 81050c0:	d015      	beq.n	81050ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81050c2:	4b35      	ldr	r3, [pc, #212]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81050ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81050ce:	4b32      	ldr	r3, [pc, #200]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81050d2:	4a31      	ldr	r2, [pc, #196]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81050d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81050da:	4b2f      	ldr	r3, [pc, #188]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81050de:	4a2e      	ldr	r2, [pc, #184]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81050e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81050e6:	4a2c      	ldr	r2, [pc, #176]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81050ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81050ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81050f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81050fa:	d118      	bne.n	810512e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81050fc:	f7fe f84a 	bl	8103194 <HAL_GetTick>
 8105100:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105104:	e00d      	b.n	8105122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105106:	f7fe f845 	bl	8103194 <HAL_GetTick>
 810510a:	4602      	mov	r2, r0
 810510c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8105110:	1ad2      	subs	r2, r2, r3
 8105112:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105116:	429a      	cmp	r2, r3
 8105118:	d903      	bls.n	8105122 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810511a:	2303      	movs	r3, #3
 810511c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8105120:	e005      	b.n	810512e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105122:	4b1d      	ldr	r3, [pc, #116]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105126:	f003 0302 	and.w	r3, r3, #2
 810512a:	2b00      	cmp	r3, #0
 810512c:	d0eb      	beq.n	8105106 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810512e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105132:	2b00      	cmp	r3, #0
 8105134:	d12b      	bne.n	810518e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810513a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810513e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105142:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105146:	d110      	bne.n	810516a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105148:	4b13      	ldr	r3, [pc, #76]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810514a:	691b      	ldr	r3, [r3, #16]
 810514c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105158:	091b      	lsrs	r3, r3, #4
 810515a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810515e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8105162:	4a0d      	ldr	r2, [pc, #52]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105164:	430b      	orrs	r3, r1
 8105166:	6113      	str	r3, [r2, #16]
 8105168:	e005      	b.n	8105176 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810516a:	4b0b      	ldr	r3, [pc, #44]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810516c:	691b      	ldr	r3, [r3, #16]
 810516e:	4a0a      	ldr	r2, [pc, #40]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105170:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8105174:	6113      	str	r3, [r2, #16]
 8105176:	4b08      	ldr	r3, [pc, #32]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105178:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810517e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105186:	4a04      	ldr	r2, [pc, #16]	@ (8105198 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105188:	430b      	orrs	r3, r1
 810518a:	6713      	str	r3, [r2, #112]	@ 0x70
 810518c:	e00c      	b.n	81051a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810518e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8105196:	e007      	b.n	81051a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8105198:	58024400 	.word	0x58024400
 810519c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051b0:	f002 0301 	and.w	r3, r2, #1
 81051b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81051b8:	2300      	movs	r3, #0
 81051ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81051be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81051c2:	460b      	mov	r3, r1
 81051c4:	4313      	orrs	r3, r2
 81051c6:	f000 8089 	beq.w	81052dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81051ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81051d0:	2b28      	cmp	r3, #40	@ 0x28
 81051d2:	d86b      	bhi.n	81052ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81051d4:	a201      	add	r2, pc, #4	@ (adr r2, 81051dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051da:	bf00      	nop
 81051dc:	081052b5 	.word	0x081052b5
 81051e0:	081052ad 	.word	0x081052ad
 81051e4:	081052ad 	.word	0x081052ad
 81051e8:	081052ad 	.word	0x081052ad
 81051ec:	081052ad 	.word	0x081052ad
 81051f0:	081052ad 	.word	0x081052ad
 81051f4:	081052ad 	.word	0x081052ad
 81051f8:	081052ad 	.word	0x081052ad
 81051fc:	08105281 	.word	0x08105281
 8105200:	081052ad 	.word	0x081052ad
 8105204:	081052ad 	.word	0x081052ad
 8105208:	081052ad 	.word	0x081052ad
 810520c:	081052ad 	.word	0x081052ad
 8105210:	081052ad 	.word	0x081052ad
 8105214:	081052ad 	.word	0x081052ad
 8105218:	081052ad 	.word	0x081052ad
 810521c:	08105297 	.word	0x08105297
 8105220:	081052ad 	.word	0x081052ad
 8105224:	081052ad 	.word	0x081052ad
 8105228:	081052ad 	.word	0x081052ad
 810522c:	081052ad 	.word	0x081052ad
 8105230:	081052ad 	.word	0x081052ad
 8105234:	081052ad 	.word	0x081052ad
 8105238:	081052ad 	.word	0x081052ad
 810523c:	081052b5 	.word	0x081052b5
 8105240:	081052ad 	.word	0x081052ad
 8105244:	081052ad 	.word	0x081052ad
 8105248:	081052ad 	.word	0x081052ad
 810524c:	081052ad 	.word	0x081052ad
 8105250:	081052ad 	.word	0x081052ad
 8105254:	081052ad 	.word	0x081052ad
 8105258:	081052ad 	.word	0x081052ad
 810525c:	081052b5 	.word	0x081052b5
 8105260:	081052ad 	.word	0x081052ad
 8105264:	081052ad 	.word	0x081052ad
 8105268:	081052ad 	.word	0x081052ad
 810526c:	081052ad 	.word	0x081052ad
 8105270:	081052ad 	.word	0x081052ad
 8105274:	081052ad 	.word	0x081052ad
 8105278:	081052ad 	.word	0x081052ad
 810527c:	081052b5 	.word	0x081052b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105284:	3308      	adds	r3, #8
 8105286:	2101      	movs	r1, #1
 8105288:	4618      	mov	r0, r3
 810528a:	f000 ffc3 	bl	8106214 <RCCEx_PLL2_Config>
 810528e:	4603      	mov	r3, r0
 8105290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105294:	e00f      	b.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810529a:	3328      	adds	r3, #40	@ 0x28
 810529c:	2101      	movs	r1, #1
 810529e:	4618      	mov	r0, r3
 81052a0:	f001 f86a 	bl	8106378 <RCCEx_PLL3_Config>
 81052a4:	4603      	mov	r3, r0
 81052a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81052aa:	e004      	b.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052ac:	2301      	movs	r3, #1
 81052ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81052b2:	e000      	b.n	81052b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81052b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81052ba:	2b00      	cmp	r3, #0
 81052bc:	d10a      	bne.n	81052d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81052be:	4bbf      	ldr	r3, [pc, #764]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81052c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81052c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81052cc:	4abb      	ldr	r2, [pc, #748]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81052ce:	430b      	orrs	r3, r1
 81052d0:	6553      	str	r3, [r2, #84]	@ 0x54
 81052d2:	e003      	b.n	81052dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81052d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052e4:	f002 0302 	and.w	r3, r2, #2
 81052e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81052ec:	2300      	movs	r3, #0
 81052ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81052f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81052f6:	460b      	mov	r3, r1
 81052f8:	4313      	orrs	r3, r2
 81052fa:	d041      	beq.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81052fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105302:	2b05      	cmp	r3, #5
 8105304:	d824      	bhi.n	8105350 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105306:	a201      	add	r2, pc, #4	@ (adr r2, 810530c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810530c:	08105359 	.word	0x08105359
 8105310:	08105325 	.word	0x08105325
 8105314:	0810533b 	.word	0x0810533b
 8105318:	08105359 	.word	0x08105359
 810531c:	08105359 	.word	0x08105359
 8105320:	08105359 	.word	0x08105359
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105328:	3308      	adds	r3, #8
 810532a:	2101      	movs	r1, #1
 810532c:	4618      	mov	r0, r3
 810532e:	f000 ff71 	bl	8106214 <RCCEx_PLL2_Config>
 8105332:	4603      	mov	r3, r0
 8105334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105338:	e00f      	b.n	810535a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810533e:	3328      	adds	r3, #40	@ 0x28
 8105340:	2101      	movs	r1, #1
 8105342:	4618      	mov	r0, r3
 8105344:	f001 f818 	bl	8106378 <RCCEx_PLL3_Config>
 8105348:	4603      	mov	r3, r0
 810534a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810534e:	e004      	b.n	810535a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105350:	2301      	movs	r3, #1
 8105352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105356:	e000      	b.n	810535a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105358:	bf00      	nop
    }

    if (ret == HAL_OK)
 810535a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810535e:	2b00      	cmp	r3, #0
 8105360:	d10a      	bne.n	8105378 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105362:	4b96      	ldr	r3, [pc, #600]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105366:	f023 0107 	bic.w	r1, r3, #7
 810536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810536e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105370:	4a92      	ldr	r2, [pc, #584]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105372:	430b      	orrs	r3, r1
 8105374:	6553      	str	r3, [r2, #84]	@ 0x54
 8105376:	e003      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810537c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105388:	f002 0304 	and.w	r3, r2, #4
 810538c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8105390:	2300      	movs	r3, #0
 8105392:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8105396:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810539a:	460b      	mov	r3, r1
 810539c:	4313      	orrs	r3, r2
 810539e:	d044      	beq.n	810542a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81053a8:	2b05      	cmp	r3, #5
 81053aa:	d825      	bhi.n	81053f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81053ac:	a201      	add	r2, pc, #4	@ (adr r2, 81053b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053b2:	bf00      	nop
 81053b4:	08105401 	.word	0x08105401
 81053b8:	081053cd 	.word	0x081053cd
 81053bc:	081053e3 	.word	0x081053e3
 81053c0:	08105401 	.word	0x08105401
 81053c4:	08105401 	.word	0x08105401
 81053c8:	08105401 	.word	0x08105401
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053d0:	3308      	adds	r3, #8
 81053d2:	2101      	movs	r1, #1
 81053d4:	4618      	mov	r0, r3
 81053d6:	f000 ff1d 	bl	8106214 <RCCEx_PLL2_Config>
 81053da:	4603      	mov	r3, r0
 81053dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81053e0:	e00f      	b.n	8105402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81053e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053e6:	3328      	adds	r3, #40	@ 0x28
 81053e8:	2101      	movs	r1, #1
 81053ea:	4618      	mov	r0, r3
 81053ec:	f000 ffc4 	bl	8106378 <RCCEx_PLL3_Config>
 81053f0:	4603      	mov	r3, r0
 81053f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81053f6:	e004      	b.n	8105402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81053f8:	2301      	movs	r3, #1
 81053fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81053fe:	e000      	b.n	8105402 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105406:	2b00      	cmp	r3, #0
 8105408:	d10b      	bne.n	8105422 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810540a:	4b6c      	ldr	r3, [pc, #432]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810540e:	f023 0107 	bic.w	r1, r3, #7
 8105412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810541a:	4a68      	ldr	r2, [pc, #416]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810541c:	430b      	orrs	r3, r1
 810541e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105420:	e003      	b.n	810542a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105432:	f002 0320 	and.w	r3, r2, #32
 8105436:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810543a:	2300      	movs	r3, #0
 810543c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105440:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105444:	460b      	mov	r3, r1
 8105446:	4313      	orrs	r3, r2
 8105448:	d055      	beq.n	81054f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105456:	d033      	beq.n	81054c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810545c:	d82c      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810545e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105462:	d02f      	beq.n	81054c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8105464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105468:	d826      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810546a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810546e:	d02b      	beq.n	81054c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105470:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105474:	d820      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810547a:	d012      	beq.n	81054a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810547c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105480:	d81a      	bhi.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105482:	2b00      	cmp	r3, #0
 8105484:	d022      	beq.n	81054cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8105486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810548a:	d115      	bne.n	81054b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810548c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105490:	3308      	adds	r3, #8
 8105492:	2100      	movs	r1, #0
 8105494:	4618      	mov	r0, r3
 8105496:	f000 febd 	bl	8106214 <RCCEx_PLL2_Config>
 810549a:	4603      	mov	r3, r0
 810549c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81054a0:	e015      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81054a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054a6:	3328      	adds	r3, #40	@ 0x28
 81054a8:	2102      	movs	r1, #2
 81054aa:	4618      	mov	r0, r3
 81054ac:	f000 ff64 	bl	8106378 <RCCEx_PLL3_Config>
 81054b0:	4603      	mov	r3, r0
 81054b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81054b6:	e00a      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81054b8:	2301      	movs	r3, #1
 81054ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81054be:	e006      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81054c0:	bf00      	nop
 81054c2:	e004      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81054c4:	bf00      	nop
 81054c6:	e002      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81054c8:	bf00      	nop
 81054ca:	e000      	b.n	81054ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81054cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81054ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d10b      	bne.n	81054ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81054d6:	4b39      	ldr	r3, [pc, #228]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81054d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81054da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81054e6:	4a35      	ldr	r2, [pc, #212]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81054e8:	430b      	orrs	r3, r1
 81054ea:	6553      	str	r3, [r2, #84]	@ 0x54
 81054ec:	e003      	b.n	81054f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81054f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81054f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8105502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8105506:	2300      	movs	r3, #0
 8105508:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810550c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8105510:	460b      	mov	r3, r1
 8105512:	4313      	orrs	r3, r2
 8105514:	d058      	beq.n	81055c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810551a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810551e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105522:	d033      	beq.n	810558c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8105524:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105528:	d82c      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810552e:	d02f      	beq.n	8105590 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105534:	d826      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105536:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810553a:	d02b      	beq.n	8105594 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810553c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105540:	d820      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105546:	d012      	beq.n	810556e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810554c:	d81a      	bhi.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810554e:	2b00      	cmp	r3, #0
 8105550:	d022      	beq.n	8105598 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8105552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105556:	d115      	bne.n	8105584 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810555c:	3308      	adds	r3, #8
 810555e:	2100      	movs	r1, #0
 8105560:	4618      	mov	r0, r3
 8105562:	f000 fe57 	bl	8106214 <RCCEx_PLL2_Config>
 8105566:	4603      	mov	r3, r0
 8105568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810556c:	e015      	b.n	810559a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105572:	3328      	adds	r3, #40	@ 0x28
 8105574:	2102      	movs	r1, #2
 8105576:	4618      	mov	r0, r3
 8105578:	f000 fefe 	bl	8106378 <RCCEx_PLL3_Config>
 810557c:	4603      	mov	r3, r0
 810557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105582:	e00a      	b.n	810559a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105584:	2301      	movs	r3, #1
 8105586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810558a:	e006      	b.n	810559a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810558c:	bf00      	nop
 810558e:	e004      	b.n	810559a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105590:	bf00      	nop
 8105592:	e002      	b.n	810559a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105594:	bf00      	nop
 8105596:	e000      	b.n	810559a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105598:	bf00      	nop
    }

    if (ret == HAL_OK)
 810559a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810559e:	2b00      	cmp	r3, #0
 81055a0:	d10e      	bne.n	81055c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81055a2:	4b06      	ldr	r3, [pc, #24]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81055b2:	4a02      	ldr	r2, [pc, #8]	@ (81055bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055b4:	430b      	orrs	r3, r1
 81055b6:	6593      	str	r3, [r2, #88]	@ 0x58
 81055b8:	e006      	b.n	81055c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81055ba:	bf00      	nop
 81055bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81055d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81055d8:	2300      	movs	r3, #0
 81055da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81055de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81055e2:	460b      	mov	r3, r1
 81055e4:	4313      	orrs	r3, r2
 81055e6:	d055      	beq.n	8105694 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81055f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81055f4:	d033      	beq.n	810565e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81055f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81055fa:	d82c      	bhi.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81055fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105600:	d02f      	beq.n	8105662 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105602:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105606:	d826      	bhi.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105608:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810560c:	d02b      	beq.n	8105666 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810560e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105612:	d820      	bhi.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105614:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105618:	d012      	beq.n	8105640 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810561a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810561e:	d81a      	bhi.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105620:	2b00      	cmp	r3, #0
 8105622:	d022      	beq.n	810566a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105628:	d115      	bne.n	8105656 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810562e:	3308      	adds	r3, #8
 8105630:	2100      	movs	r1, #0
 8105632:	4618      	mov	r0, r3
 8105634:	f000 fdee 	bl	8106214 <RCCEx_PLL2_Config>
 8105638:	4603      	mov	r3, r0
 810563a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810563e:	e015      	b.n	810566c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105644:	3328      	adds	r3, #40	@ 0x28
 8105646:	2102      	movs	r1, #2
 8105648:	4618      	mov	r0, r3
 810564a:	f000 fe95 	bl	8106378 <RCCEx_PLL3_Config>
 810564e:	4603      	mov	r3, r0
 8105650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105654:	e00a      	b.n	810566c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105656:	2301      	movs	r3, #1
 8105658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810565c:	e006      	b.n	810566c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810565e:	bf00      	nop
 8105660:	e004      	b.n	810566c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105662:	bf00      	nop
 8105664:	e002      	b.n	810566c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105666:	bf00      	nop
 8105668:	e000      	b.n	810566c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810566a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810566c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105670:	2b00      	cmp	r3, #0
 8105672:	d10b      	bne.n	810568c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105674:	4ba1      	ldr	r3, [pc, #644]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105678:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 810567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105684:	4a9d      	ldr	r2, [pc, #628]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105686:	430b      	orrs	r3, r1
 8105688:	6593      	str	r3, [r2, #88]	@ 0x58
 810568a:	e003      	b.n	8105694 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810568c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105698:	e9d3 2300 	ldrd	r2, r3, [r3]
 810569c:	f002 0308 	and.w	r3, r2, #8
 81056a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81056a4:	2300      	movs	r3, #0
 81056a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81056aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81056ae:	460b      	mov	r3, r1
 81056b0:	4313      	orrs	r3, r2
 81056b2:	d01e      	beq.n	81056f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81056b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81056bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81056c0:	d10c      	bne.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056c6:	3328      	adds	r3, #40	@ 0x28
 81056c8:	2102      	movs	r1, #2
 81056ca:	4618      	mov	r0, r3
 81056cc:	f000 fe54 	bl	8106378 <RCCEx_PLL3_Config>
 81056d0:	4603      	mov	r3, r0
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d002      	beq.n	81056dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81056d6:	2301      	movs	r3, #1
 81056d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81056dc:	4b87      	ldr	r3, [pc, #540]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81056e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81056ec:	4a83      	ldr	r2, [pc, #524]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056ee:	430b      	orrs	r3, r1
 81056f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056fa:	f002 0310 	and.w	r3, r2, #16
 81056fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105702:	2300      	movs	r3, #0
 8105704:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105708:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810570c:	460b      	mov	r3, r1
 810570e:	4313      	orrs	r3, r2
 8105710:	d01e      	beq.n	8105750 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105716:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810571a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810571e:	d10c      	bne.n	810573a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105724:	3328      	adds	r3, #40	@ 0x28
 8105726:	2102      	movs	r1, #2
 8105728:	4618      	mov	r0, r3
 810572a:	f000 fe25 	bl	8106378 <RCCEx_PLL3_Config>
 810572e:	4603      	mov	r3, r0
 8105730:	2b00      	cmp	r3, #0
 8105732:	d002      	beq.n	810573a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105734:	2301      	movs	r3, #1
 8105736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810573a:	4b70      	ldr	r3, [pc, #448]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810573c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810573e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810574a:	4a6c      	ldr	r2, [pc, #432]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810574c:	430b      	orrs	r3, r1
 810574e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105758:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810575c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8105760:	2300      	movs	r3, #0
 8105762:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8105766:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 810576a:	460b      	mov	r3, r1
 810576c:	4313      	orrs	r3, r2
 810576e:	d03e      	beq.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810577c:	d022      	beq.n	81057c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810577e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105782:	d81b      	bhi.n	81057bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8105784:	2b00      	cmp	r3, #0
 8105786:	d003      	beq.n	8105790 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810578c:	d00b      	beq.n	81057a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810578e:	e015      	b.n	81057bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105794:	3308      	adds	r3, #8
 8105796:	2100      	movs	r1, #0
 8105798:	4618      	mov	r0, r3
 810579a:	f000 fd3b 	bl	8106214 <RCCEx_PLL2_Config>
 810579e:	4603      	mov	r3, r0
 81057a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81057a4:	e00f      	b.n	81057c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057aa:	3328      	adds	r3, #40	@ 0x28
 81057ac:	2102      	movs	r1, #2
 81057ae:	4618      	mov	r0, r3
 81057b0:	f000 fde2 	bl	8106378 <RCCEx_PLL3_Config>
 81057b4:	4603      	mov	r3, r0
 81057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81057ba:	e004      	b.n	81057c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057bc:	2301      	movs	r3, #1
 81057be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81057c2:	e000      	b.n	81057c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 81057c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81057ca:	2b00      	cmp	r3, #0
 81057cc:	d10b      	bne.n	81057e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81057ce:	4b4b      	ldr	r3, [pc, #300]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81057d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81057d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81057de:	4a47      	ldr	r2, [pc, #284]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81057e0:	430b      	orrs	r3, r1
 81057e2:	6593      	str	r3, [r2, #88]	@ 0x58
 81057e4:	e003      	b.n	81057ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81057ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81057ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81057fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 81057fc:	2300      	movs	r3, #0
 81057fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8105800:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8105804:	460b      	mov	r3, r1
 8105806:	4313      	orrs	r3, r2
 8105808:	d03b      	beq.n	8105882 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810580a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105812:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105816:	d01f      	beq.n	8105858 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105818:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810581c:	d818      	bhi.n	8105850 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810581e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105822:	d003      	beq.n	810582c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105824:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105828:	d007      	beq.n	810583a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810582a:	e011      	b.n	8105850 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810582c:	4b33      	ldr	r3, [pc, #204]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105830:	4a32      	ldr	r2, [pc, #200]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105838:	e00f      	b.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810583e:	3328      	adds	r3, #40	@ 0x28
 8105840:	2101      	movs	r1, #1
 8105842:	4618      	mov	r0, r3
 8105844:	f000 fd98 	bl	8106378 <RCCEx_PLL3_Config>
 8105848:	4603      	mov	r3, r0
 810584a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810584e:	e004      	b.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105850:	2301      	movs	r3, #1
 8105852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105856:	e000      	b.n	810585a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105858:	bf00      	nop
    }

    if (ret == HAL_OK)
 810585a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810585e:	2b00      	cmp	r3, #0
 8105860:	d10b      	bne.n	810587a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105862:	4b26      	ldr	r3, [pc, #152]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105866:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105872:	4a22      	ldr	r2, [pc, #136]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105874:	430b      	orrs	r3, r1
 8105876:	6553      	str	r3, [r2, #84]	@ 0x54
 8105878:	e003      	b.n	8105882 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810587a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810587e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105886:	e9d3 2300 	ldrd	r2, r3, [r3]
 810588a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810588e:	673b      	str	r3, [r7, #112]	@ 0x70
 8105890:	2300      	movs	r3, #0
 8105892:	677b      	str	r3, [r7, #116]	@ 0x74
 8105894:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8105898:	460b      	mov	r3, r1
 810589a:	4313      	orrs	r3, r2
 810589c:	d034      	beq.n	8105908 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81058a4:	2b00      	cmp	r3, #0
 81058a6:	d003      	beq.n	81058b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81058a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81058ac:	d007      	beq.n	81058be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81058ae:	e011      	b.n	81058d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058b0:	4b12      	ldr	r3, [pc, #72]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058b4:	4a11      	ldr	r2, [pc, #68]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81058ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81058bc:	e00e      	b.n	81058dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81058be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058c2:	3308      	adds	r3, #8
 81058c4:	2102      	movs	r1, #2
 81058c6:	4618      	mov	r0, r3
 81058c8:	f000 fca4 	bl	8106214 <RCCEx_PLL2_Config>
 81058cc:	4603      	mov	r3, r0
 81058ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81058d2:	e003      	b.n	81058dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81058d4:	2301      	movs	r3, #1
 81058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81058da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81058dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d10d      	bne.n	8105900 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81058e4:	4b05      	ldr	r3, [pc, #20]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81058e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81058f2:	4a02      	ldr	r2, [pc, #8]	@ (81058fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058f4:	430b      	orrs	r3, r1
 81058f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81058f8:	e006      	b.n	8105908 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81058fa:	bf00      	nop
 81058fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105910:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8105916:	2300      	movs	r3, #0
 8105918:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810591a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810591e:	460b      	mov	r3, r1
 8105920:	4313      	orrs	r3, r2
 8105922:	d00c      	beq.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105928:	3328      	adds	r3, #40	@ 0x28
 810592a:	2102      	movs	r1, #2
 810592c:	4618      	mov	r0, r3
 810592e:	f000 fd23 	bl	8106378 <RCCEx_PLL3_Config>
 8105932:	4603      	mov	r3, r0
 8105934:	2b00      	cmp	r3, #0
 8105936:	d002      	beq.n	810593e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105938:	2301      	movs	r3, #1
 810593a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105946:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810594a:	663b      	str	r3, [r7, #96]	@ 0x60
 810594c:	2300      	movs	r3, #0
 810594e:	667b      	str	r3, [r7, #100]	@ 0x64
 8105950:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105954:	460b      	mov	r3, r1
 8105956:	4313      	orrs	r3, r2
 8105958:	d038      	beq.n	81059cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810595e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8105962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105966:	d018      	beq.n	810599a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810596c:	d811      	bhi.n	8105992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810596e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105972:	d014      	beq.n	810599e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8105974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105978:	d80b      	bhi.n	8105992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810597a:	2b00      	cmp	r3, #0
 810597c:	d011      	beq.n	81059a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810597e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105982:	d106      	bne.n	8105992 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105984:	4bc3      	ldr	r3, [pc, #780]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105988:	4ac2      	ldr	r2, [pc, #776]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810598a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810598e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105990:	e008      	b.n	81059a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105992:	2301      	movs	r3, #1
 8105994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105998:	e004      	b.n	81059a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810599a:	bf00      	nop
 810599c:	e002      	b.n	81059a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810599e:	bf00      	nop
 81059a0:	e000      	b.n	81059a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81059a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81059a8:	2b00      	cmp	r3, #0
 81059aa:	d10b      	bne.n	81059c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81059ac:	4bb9      	ldr	r3, [pc, #740]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81059b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81059bc:	4ab5      	ldr	r2, [pc, #724]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059be:	430b      	orrs	r3, r1
 81059c0:	6553      	str	r3, [r2, #84]	@ 0x54
 81059c2:	e003      	b.n	81059cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81059c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81059c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81059d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 81059da:	2300      	movs	r3, #0
 81059dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81059de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81059e2:	460b      	mov	r3, r1
 81059e4:	4313      	orrs	r3, r2
 81059e6:	d009      	beq.n	81059fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81059e8:	4baa      	ldr	r3, [pc, #680]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81059ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81059f6:	4aa7      	ldr	r2, [pc, #668]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059f8:	430b      	orrs	r3, r1
 81059fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81059fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8105a0a:	2300      	movs	r3, #0
 8105a0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8105a0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8105a12:	460b      	mov	r3, r1
 8105a14:	4313      	orrs	r3, r2
 8105a16:	d00a      	beq.n	8105a2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105a18:	4b9e      	ldr	r3, [pc, #632]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a1a:	691b      	ldr	r3, [r3, #16]
 8105a1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8105a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105a28:	4a9a      	ldr	r2, [pc, #616]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a2a:	430b      	orrs	r3, r1
 8105a2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8105a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105a3c:	2300      	movs	r3, #0
 8105a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105a40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105a44:	460b      	mov	r3, r1
 8105a46:	4313      	orrs	r3, r2
 8105a48:	d009      	beq.n	8105a5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105a4a:	4b92      	ldr	r3, [pc, #584]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8105a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105a58:	4a8e      	ldr	r2, [pc, #568]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a5a:	430b      	orrs	r3, r1
 8105a5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105a6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8105a6c:	2300      	movs	r3, #0
 8105a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8105a70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8105a74:	460b      	mov	r3, r1
 8105a76:	4313      	orrs	r3, r2
 8105a78:	d00e      	beq.n	8105a98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105a7a:	4b86      	ldr	r3, [pc, #536]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a7c:	691b      	ldr	r3, [r3, #16]
 8105a7e:	4a85      	ldr	r2, [pc, #532]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8105a84:	6113      	str	r3, [r2, #16]
 8105a86:	4b83      	ldr	r3, [pc, #524]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a88:	6919      	ldr	r1, [r3, #16]
 8105a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105a92:	4a80      	ldr	r2, [pc, #512]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a94:	430b      	orrs	r3, r1
 8105a96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aa0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8105aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105aa6:	2300      	movs	r3, #0
 8105aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105aaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105aae:	460b      	mov	r3, r1
 8105ab0:	4313      	orrs	r3, r2
 8105ab2:	d009      	beq.n	8105ac8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105ab4:	4b77      	ldr	r3, [pc, #476]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105ab8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ac2:	4a74      	ldr	r2, [pc, #464]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ac4:	430b      	orrs	r3, r1
 8105ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ad0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8105ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8105ad6:	2300      	movs	r3, #0
 8105ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8105ada:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8105ade:	460b      	mov	r3, r1
 8105ae0:	4313      	orrs	r3, r2
 8105ae2:	d00a      	beq.n	8105afa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105ae8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8105aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8105af4:	4a67      	ldr	r2, [pc, #412]	@ (8105c94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105af6:	430b      	orrs	r3, r1
 8105af8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b02:	2100      	movs	r1, #0
 8105b04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8105b06:	f003 0301 	and.w	r3, r3, #1
 8105b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8105b0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8105b10:	460b      	mov	r3, r1
 8105b12:	4313      	orrs	r3, r2
 8105b14:	d011      	beq.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b1a:	3308      	adds	r3, #8
 8105b1c:	2100      	movs	r1, #0
 8105b1e:	4618      	mov	r0, r3
 8105b20:	f000 fb78 	bl	8106214 <RCCEx_PLL2_Config>
 8105b24:	4603      	mov	r3, r0
 8105b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b2e:	2b00      	cmp	r3, #0
 8105b30:	d003      	beq.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b42:	2100      	movs	r1, #0
 8105b44:	6239      	str	r1, [r7, #32]
 8105b46:	f003 0302 	and.w	r3, r3, #2
 8105b4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8105b4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105b50:	460b      	mov	r3, r1
 8105b52:	4313      	orrs	r3, r2
 8105b54:	d011      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b5a:	3308      	adds	r3, #8
 8105b5c:	2101      	movs	r1, #1
 8105b5e:	4618      	mov	r0, r3
 8105b60:	f000 fb58 	bl	8106214 <RCCEx_PLL2_Config>
 8105b64:	4603      	mov	r3, r0
 8105b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b6e:	2b00      	cmp	r3, #0
 8105b70:	d003      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b82:	2100      	movs	r1, #0
 8105b84:	61b9      	str	r1, [r7, #24]
 8105b86:	f003 0304 	and.w	r3, r3, #4
 8105b8a:	61fb      	str	r3, [r7, #28]
 8105b8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105b90:	460b      	mov	r3, r1
 8105b92:	4313      	orrs	r3, r2
 8105b94:	d011      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b9a:	3308      	adds	r3, #8
 8105b9c:	2102      	movs	r1, #2
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f000 fb38 	bl	8106214 <RCCEx_PLL2_Config>
 8105ba4:	4603      	mov	r3, r0
 8105ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bae:	2b00      	cmp	r3, #0
 8105bb0:	d003      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bc2:	2100      	movs	r1, #0
 8105bc4:	6139      	str	r1, [r7, #16]
 8105bc6:	f003 0308 	and.w	r3, r3, #8
 8105bca:	617b      	str	r3, [r7, #20]
 8105bcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8105bd0:	460b      	mov	r3, r1
 8105bd2:	4313      	orrs	r3, r2
 8105bd4:	d011      	beq.n	8105bfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bda:	3328      	adds	r3, #40	@ 0x28
 8105bdc:	2100      	movs	r1, #0
 8105bde:	4618      	mov	r0, r3
 8105be0:	f000 fbca 	bl	8106378 <RCCEx_PLL3_Config>
 8105be4:	4603      	mov	r3, r0
 8105be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8105bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bee:	2b00      	cmp	r3, #0
 8105bf0:	d003      	beq.n	8105bfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c02:	2100      	movs	r1, #0
 8105c04:	60b9      	str	r1, [r7, #8]
 8105c06:	f003 0310 	and.w	r3, r3, #16
 8105c0a:	60fb      	str	r3, [r7, #12]
 8105c0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105c10:	460b      	mov	r3, r1
 8105c12:	4313      	orrs	r3, r2
 8105c14:	d011      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c1a:	3328      	adds	r3, #40	@ 0x28
 8105c1c:	2101      	movs	r1, #1
 8105c1e:	4618      	mov	r0, r3
 8105c20:	f000 fbaa 	bl	8106378 <RCCEx_PLL3_Config>
 8105c24:	4603      	mov	r3, r0
 8105c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c2e:	2b00      	cmp	r3, #0
 8105c30:	d003      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c42:	2100      	movs	r1, #0
 8105c44:	6039      	str	r1, [r7, #0]
 8105c46:	f003 0320 	and.w	r3, r3, #32
 8105c4a:	607b      	str	r3, [r7, #4]
 8105c4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105c50:	460b      	mov	r3, r1
 8105c52:	4313      	orrs	r3, r2
 8105c54:	d011      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c5a:	3328      	adds	r3, #40	@ 0x28
 8105c5c:	2102      	movs	r1, #2
 8105c5e:	4618      	mov	r0, r3
 8105c60:	f000 fb8a 	bl	8106378 <RCCEx_PLL3_Config>
 8105c64:	4603      	mov	r3, r0
 8105c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d003      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8105c7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8105c7e:	2b00      	cmp	r3, #0
 8105c80:	d101      	bne.n	8105c86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105c82:	2300      	movs	r3, #0
 8105c84:	e000      	b.n	8105c88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105c86:	2301      	movs	r3, #1
}
 8105c88:	4618      	mov	r0, r3
 8105c8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8105c8e:	46bd      	mov	sp, r7
 8105c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105c94:	58024400 	.word	0x58024400

08105c98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105c98:	b580      	push	{r7, lr}
 8105c9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105c9c:	f7fe fd94 	bl	81047c8 <HAL_RCC_GetHCLKFreq>
 8105ca0:	4602      	mov	r2, r0
 8105ca2:	4b06      	ldr	r3, [pc, #24]	@ (8105cbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105ca4:	6a1b      	ldr	r3, [r3, #32]
 8105ca6:	091b      	lsrs	r3, r3, #4
 8105ca8:	f003 0307 	and.w	r3, r3, #7
 8105cac:	4904      	ldr	r1, [pc, #16]	@ (8105cc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105cae:	5ccb      	ldrb	r3, [r1, r3]
 8105cb0:	f003 031f 	and.w	r3, r3, #31
 8105cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105cb8:	4618      	mov	r0, r3
 8105cba:	bd80      	pop	{r7, pc}
 8105cbc:	58024400 	.word	0x58024400
 8105cc0:	0810e7cc 	.word	0x0810e7cc

08105cc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105cc4:	b480      	push	{r7}
 8105cc6:	b089      	sub	sp, #36	@ 0x24
 8105cc8:	af00      	add	r7, sp, #0
 8105cca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105ccc:	4ba1      	ldr	r3, [pc, #644]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105cd0:	f003 0303 	and.w	r3, r3, #3
 8105cd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105cd6:	4b9f      	ldr	r3, [pc, #636]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105cda:	0b1b      	lsrs	r3, r3, #12
 8105cdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105ce0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105ce2:	4b9c      	ldr	r3, [pc, #624]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105ce6:	091b      	lsrs	r3, r3, #4
 8105ce8:	f003 0301 	and.w	r3, r3, #1
 8105cec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105cee:	4b99      	ldr	r3, [pc, #612]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105cf2:	08db      	lsrs	r3, r3, #3
 8105cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105cf8:	693a      	ldr	r2, [r7, #16]
 8105cfa:	fb02 f303 	mul.w	r3, r2, r3
 8105cfe:	ee07 3a90 	vmov	s15, r3
 8105d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105d0a:	697b      	ldr	r3, [r7, #20]
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	f000 8111 	beq.w	8105f34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105d12:	69bb      	ldr	r3, [r7, #24]
 8105d14:	2b02      	cmp	r3, #2
 8105d16:	f000 8083 	beq.w	8105e20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105d1a:	69bb      	ldr	r3, [r7, #24]
 8105d1c:	2b02      	cmp	r3, #2
 8105d1e:	f200 80a1 	bhi.w	8105e64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105d22:	69bb      	ldr	r3, [r7, #24]
 8105d24:	2b00      	cmp	r3, #0
 8105d26:	d003      	beq.n	8105d30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105d28:	69bb      	ldr	r3, [r7, #24]
 8105d2a:	2b01      	cmp	r3, #1
 8105d2c:	d056      	beq.n	8105ddc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105d2e:	e099      	b.n	8105e64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105d30:	4b88      	ldr	r3, [pc, #544]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	f003 0320 	and.w	r3, r3, #32
 8105d38:	2b00      	cmp	r3, #0
 8105d3a:	d02d      	beq.n	8105d98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105d3c:	4b85      	ldr	r3, [pc, #532]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	08db      	lsrs	r3, r3, #3
 8105d42:	f003 0303 	and.w	r3, r3, #3
 8105d46:	4a84      	ldr	r2, [pc, #528]	@ (8105f58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105d48:	fa22 f303 	lsr.w	r3, r2, r3
 8105d4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105d4e:	68bb      	ldr	r3, [r7, #8]
 8105d50:	ee07 3a90 	vmov	s15, r3
 8105d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d58:	697b      	ldr	r3, [r7, #20]
 8105d5a:	ee07 3a90 	vmov	s15, r3
 8105d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105d66:	4b7b      	ldr	r3, [pc, #492]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105d6e:	ee07 3a90 	vmov	s15, r3
 8105d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8105d7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105d96:	e087      	b.n	8105ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105d98:	697b      	ldr	r3, [r7, #20]
 8105d9a:	ee07 3a90 	vmov	s15, r3
 8105d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105da2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105f60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105daa:	4b6a      	ldr	r3, [pc, #424]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105db2:	ee07 3a90 	vmov	s15, r3
 8105db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8105dbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105dda:	e065      	b.n	8105ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105ddc:	697b      	ldr	r3, [r7, #20]
 8105dde:	ee07 3a90 	vmov	s15, r3
 8105de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105de6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dee:	4b59      	ldr	r3, [pc, #356]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105df6:	ee07 3a90 	vmov	s15, r3
 8105dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e1e:	e043      	b.n	8105ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105e20:	697b      	ldr	r3, [r7, #20]
 8105e22:	ee07 3a90 	vmov	s15, r3
 8105e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e32:	4b48      	ldr	r3, [pc, #288]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e3a:	ee07 3a90 	vmov	s15, r3
 8105e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e62:	e021      	b.n	8105ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105e64:	697b      	ldr	r3, [r7, #20]
 8105e66:	ee07 3a90 	vmov	s15, r3
 8105e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e76:	4b37      	ldr	r3, [pc, #220]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e7e:	ee07 3a90 	vmov	s15, r3
 8105e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ea6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105eac:	0a5b      	lsrs	r3, r3, #9
 8105eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105eb2:	ee07 3a90 	vmov	s15, r3
 8105eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105eba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ece:	ee17 2a90 	vmov	r2, s15
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105eda:	0c1b      	lsrs	r3, r3, #16
 8105edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105ee0:	ee07 3a90 	vmov	s15, r3
 8105ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ee8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105efc:	ee17 2a90 	vmov	r2, s15
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105f04:	4b13      	ldr	r3, [pc, #76]	@ (8105f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105f08:	0e1b      	lsrs	r3, r3, #24
 8105f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105f0e:	ee07 3a90 	vmov	s15, r3
 8105f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f2a:	ee17 2a90 	vmov	r2, s15
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105f32:	e008      	b.n	8105f46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	2200      	movs	r2, #0
 8105f38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	2200      	movs	r2, #0
 8105f3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	2200      	movs	r2, #0
 8105f44:	609a      	str	r2, [r3, #8]
}
 8105f46:	bf00      	nop
 8105f48:	3724      	adds	r7, #36	@ 0x24
 8105f4a:	46bd      	mov	sp, r7
 8105f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f50:	4770      	bx	lr
 8105f52:	bf00      	nop
 8105f54:	58024400 	.word	0x58024400
 8105f58:	03d09000 	.word	0x03d09000
 8105f5c:	46000000 	.word	0x46000000
 8105f60:	4c742400 	.word	0x4c742400
 8105f64:	4a742400 	.word	0x4a742400
 8105f68:	4af42400 	.word	0x4af42400

08105f6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105f6c:	b480      	push	{r7}
 8105f6e:	b089      	sub	sp, #36	@ 0x24
 8105f70:	af00      	add	r7, sp, #0
 8105f72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105f74:	4ba1      	ldr	r3, [pc, #644]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f78:	f003 0303 	and.w	r3, r3, #3
 8105f7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105f7e:	4b9f      	ldr	r3, [pc, #636]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f82:	0d1b      	lsrs	r3, r3, #20
 8105f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105f88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105f8a:	4b9c      	ldr	r3, [pc, #624]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f8e:	0a1b      	lsrs	r3, r3, #8
 8105f90:	f003 0301 	and.w	r3, r3, #1
 8105f94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105f96:	4b99      	ldr	r3, [pc, #612]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105f9a:	08db      	lsrs	r3, r3, #3
 8105f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105fa0:	693a      	ldr	r2, [r7, #16]
 8105fa2:	fb02 f303 	mul.w	r3, r2, r3
 8105fa6:	ee07 3a90 	vmov	s15, r3
 8105faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105fb2:	697b      	ldr	r3, [r7, #20]
 8105fb4:	2b00      	cmp	r3, #0
 8105fb6:	f000 8111 	beq.w	81061dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105fba:	69bb      	ldr	r3, [r7, #24]
 8105fbc:	2b02      	cmp	r3, #2
 8105fbe:	f000 8083 	beq.w	81060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105fc2:	69bb      	ldr	r3, [r7, #24]
 8105fc4:	2b02      	cmp	r3, #2
 8105fc6:	f200 80a1 	bhi.w	810610c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105fca:	69bb      	ldr	r3, [r7, #24]
 8105fcc:	2b00      	cmp	r3, #0
 8105fce:	d003      	beq.n	8105fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105fd0:	69bb      	ldr	r3, [r7, #24]
 8105fd2:	2b01      	cmp	r3, #1
 8105fd4:	d056      	beq.n	8106084 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105fd6:	e099      	b.n	810610c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105fd8:	4b88      	ldr	r3, [pc, #544]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	f003 0320 	and.w	r3, r3, #32
 8105fe0:	2b00      	cmp	r3, #0
 8105fe2:	d02d      	beq.n	8106040 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105fe4:	4b85      	ldr	r3, [pc, #532]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fe6:	681b      	ldr	r3, [r3, #0]
 8105fe8:	08db      	lsrs	r3, r3, #3
 8105fea:	f003 0303 	and.w	r3, r3, #3
 8105fee:	4a84      	ldr	r2, [pc, #528]	@ (8106200 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8105ff4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105ff6:	68bb      	ldr	r3, [r7, #8]
 8105ff8:	ee07 3a90 	vmov	s15, r3
 8105ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106000:	697b      	ldr	r3, [r7, #20]
 8106002:	ee07 3a90 	vmov	s15, r3
 8106006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810600e:	4b7b      	ldr	r3, [pc, #492]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106016:	ee07 3a90 	vmov	s15, r3
 810601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810601e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106022:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810602e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106036:	ee67 7a27 	vmul.f32	s15, s14, s15
 810603a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810603e:	e087      	b.n	8106150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106040:	697b      	ldr	r3, [r7, #20]
 8106042:	ee07 3a90 	vmov	s15, r3
 8106046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810604a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106208 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106052:	4b6a      	ldr	r3, [pc, #424]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810605a:	ee07 3a90 	vmov	s15, r3
 810605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106062:	ed97 6a03 	vldr	s12, [r7, #12]
 8106066:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810607e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106082:	e065      	b.n	8106150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106084:	697b      	ldr	r3, [r7, #20]
 8106086:	ee07 3a90 	vmov	s15, r3
 810608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810608e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810620c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8106092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106096:	4b59      	ldr	r3, [pc, #356]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810609e:	ee07 3a90 	vmov	s15, r3
 81060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81060aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060c6:	e043      	b.n	8106150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81060c8:	697b      	ldr	r3, [r7, #20]
 81060ca:	ee07 3a90 	vmov	s15, r3
 81060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060da:	4b48      	ldr	r3, [pc, #288]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060e2:	ee07 3a90 	vmov	s15, r3
 81060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81060ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810610a:	e021      	b.n	8106150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810610c:	697b      	ldr	r3, [r7, #20]
 810610e:	ee07 3a90 	vmov	s15, r3
 8106112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106116:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810620c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810611e:	4b37      	ldr	r3, [pc, #220]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106126:	ee07 3a90 	vmov	s15, r3
 810612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106132:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810613e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106146:	ee67 7a27 	vmul.f32	s15, s14, s15
 810614a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810614e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106150:	4b2a      	ldr	r3, [pc, #168]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106154:	0a5b      	lsrs	r3, r3, #9
 8106156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810615a:	ee07 3a90 	vmov	s15, r3
 810615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106166:	ee37 7a87 	vadd.f32	s14, s15, s14
 810616a:	edd7 6a07 	vldr	s13, [r7, #28]
 810616e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106176:	ee17 2a90 	vmov	r2, s15
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810617e:	4b1f      	ldr	r3, [pc, #124]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106182:	0c1b      	lsrs	r3, r3, #16
 8106184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106188:	ee07 3a90 	vmov	s15, r3
 810618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106194:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106198:	edd7 6a07 	vldr	s13, [r7, #28]
 810619c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81061a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81061a4:	ee17 2a90 	vmov	r2, s15
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81061ac:	4b13      	ldr	r3, [pc, #76]	@ (81061fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81061b0:	0e1b      	lsrs	r3, r3, #24
 81061b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81061b6:	ee07 3a90 	vmov	s15, r3
 81061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81061c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81061c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81061ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81061ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81061d2:	ee17 2a90 	vmov	r2, s15
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81061da:	e008      	b.n	81061ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81061dc:	687b      	ldr	r3, [r7, #4]
 81061de:	2200      	movs	r2, #0
 81061e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81061e2:	687b      	ldr	r3, [r7, #4]
 81061e4:	2200      	movs	r2, #0
 81061e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	2200      	movs	r2, #0
 81061ec:	609a      	str	r2, [r3, #8]
}
 81061ee:	bf00      	nop
 81061f0:	3724      	adds	r7, #36	@ 0x24
 81061f2:	46bd      	mov	sp, r7
 81061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061f8:	4770      	bx	lr
 81061fa:	bf00      	nop
 81061fc:	58024400 	.word	0x58024400
 8106200:	03d09000 	.word	0x03d09000
 8106204:	46000000 	.word	0x46000000
 8106208:	4c742400 	.word	0x4c742400
 810620c:	4a742400 	.word	0x4a742400
 8106210:	4af42400 	.word	0x4af42400

08106214 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106214:	b580      	push	{r7, lr}
 8106216:	b084      	sub	sp, #16
 8106218:	af00      	add	r7, sp, #0
 810621a:	6078      	str	r0, [r7, #4]
 810621c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810621e:	2300      	movs	r3, #0
 8106220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106222:	4b54      	ldr	r3, [pc, #336]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106226:	f003 0303 	and.w	r3, r3, #3
 810622a:	2b03      	cmp	r3, #3
 810622c:	d101      	bne.n	8106232 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810622e:	2301      	movs	r3, #1
 8106230:	e09b      	b.n	810636a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106232:	4b50      	ldr	r3, [pc, #320]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	4a4f      	ldr	r2, [pc, #316]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106238:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810623c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810623e:	f7fc ffa9 	bl	8103194 <HAL_GetTick>
 8106242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106244:	e008      	b.n	8106258 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106246:	f7fc ffa5 	bl	8103194 <HAL_GetTick>
 810624a:	4602      	mov	r2, r0
 810624c:	68bb      	ldr	r3, [r7, #8]
 810624e:	1ad3      	subs	r3, r2, r3
 8106250:	2b02      	cmp	r3, #2
 8106252:	d901      	bls.n	8106258 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106254:	2303      	movs	r3, #3
 8106256:	e088      	b.n	810636a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106258:	4b46      	ldr	r3, [pc, #280]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810625a:	681b      	ldr	r3, [r3, #0]
 810625c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106260:	2b00      	cmp	r3, #0
 8106262:	d1f0      	bne.n	8106246 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8106264:	4b43      	ldr	r3, [pc, #268]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106268:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 810626c:	687b      	ldr	r3, [r7, #4]
 810626e:	681b      	ldr	r3, [r3, #0]
 8106270:	031b      	lsls	r3, r3, #12
 8106272:	4940      	ldr	r1, [pc, #256]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106274:	4313      	orrs	r3, r2
 8106276:	628b      	str	r3, [r1, #40]	@ 0x28
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	685b      	ldr	r3, [r3, #4]
 810627c:	3b01      	subs	r3, #1
 810627e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	689b      	ldr	r3, [r3, #8]
 8106286:	3b01      	subs	r3, #1
 8106288:	025b      	lsls	r3, r3, #9
 810628a:	b29b      	uxth	r3, r3
 810628c:	431a      	orrs	r2, r3
 810628e:	687b      	ldr	r3, [r7, #4]
 8106290:	68db      	ldr	r3, [r3, #12]
 8106292:	3b01      	subs	r3, #1
 8106294:	041b      	lsls	r3, r3, #16
 8106296:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810629a:	431a      	orrs	r2, r3
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	691b      	ldr	r3, [r3, #16]
 81062a0:	3b01      	subs	r3, #1
 81062a2:	061b      	lsls	r3, r3, #24
 81062a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81062a8:	4932      	ldr	r1, [pc, #200]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062aa:	4313      	orrs	r3, r2
 81062ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81062ae:	4b31      	ldr	r3, [pc, #196]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	695b      	ldr	r3, [r3, #20]
 81062ba:	492e      	ldr	r1, [pc, #184]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062bc:	4313      	orrs	r3, r2
 81062be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81062c0:	4b2c      	ldr	r3, [pc, #176]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062c4:	f023 0220 	bic.w	r2, r3, #32
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	699b      	ldr	r3, [r3, #24]
 81062cc:	4929      	ldr	r1, [pc, #164]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062ce:	4313      	orrs	r3, r2
 81062d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81062d2:	4b28      	ldr	r3, [pc, #160]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062d6:	4a27      	ldr	r2, [pc, #156]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062d8:	f023 0310 	bic.w	r3, r3, #16
 81062dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81062de:	4b25      	ldr	r3, [pc, #148]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81062e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81062e6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81062ea:	687a      	ldr	r2, [r7, #4]
 81062ec:	69d2      	ldr	r2, [r2, #28]
 81062ee:	00d2      	lsls	r2, r2, #3
 81062f0:	4920      	ldr	r1, [pc, #128]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062f2:	4313      	orrs	r3, r2
 81062f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81062f6:	4b1f      	ldr	r3, [pc, #124]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062fa:	4a1e      	ldr	r2, [pc, #120]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 81062fc:	f043 0310 	orr.w	r3, r3, #16
 8106300:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106302:	683b      	ldr	r3, [r7, #0]
 8106304:	2b00      	cmp	r3, #0
 8106306:	d106      	bne.n	8106316 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106308:	4b1a      	ldr	r3, [pc, #104]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810630c:	4a19      	ldr	r2, [pc, #100]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810630e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8106312:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106314:	e00f      	b.n	8106336 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106316:	683b      	ldr	r3, [r7, #0]
 8106318:	2b01      	cmp	r3, #1
 810631a:	d106      	bne.n	810632a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810631c:	4b15      	ldr	r3, [pc, #84]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810631e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106320:	4a14      	ldr	r2, [pc, #80]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106326:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106328:	e005      	b.n	8106336 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810632a:	4b12      	ldr	r3, [pc, #72]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810632e:	4a11      	ldr	r2, [pc, #68]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106330:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106334:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106336:	4b0f      	ldr	r3, [pc, #60]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	4a0e      	ldr	r2, [pc, #56]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810633c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8106340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106342:	f7fc ff27 	bl	8103194 <HAL_GetTick>
 8106346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106348:	e008      	b.n	810635c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810634a:	f7fc ff23 	bl	8103194 <HAL_GetTick>
 810634e:	4602      	mov	r2, r0
 8106350:	68bb      	ldr	r3, [r7, #8]
 8106352:	1ad3      	subs	r3, r2, r3
 8106354:	2b02      	cmp	r3, #2
 8106356:	d901      	bls.n	810635c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106358:	2303      	movs	r3, #3
 810635a:	e006      	b.n	810636a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810635c:	4b05      	ldr	r3, [pc, #20]	@ (8106374 <RCCEx_PLL2_Config+0x160>)
 810635e:	681b      	ldr	r3, [r3, #0]
 8106360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106364:	2b00      	cmp	r3, #0
 8106366:	d0f0      	beq.n	810634a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106368:	7bfb      	ldrb	r3, [r7, #15]
}
 810636a:	4618      	mov	r0, r3
 810636c:	3710      	adds	r7, #16
 810636e:	46bd      	mov	sp, r7
 8106370:	bd80      	pop	{r7, pc}
 8106372:	bf00      	nop
 8106374:	58024400 	.word	0x58024400

08106378 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106378:	b580      	push	{r7, lr}
 810637a:	b084      	sub	sp, #16
 810637c:	af00      	add	r7, sp, #0
 810637e:	6078      	str	r0, [r7, #4]
 8106380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8106382:	2300      	movs	r3, #0
 8106384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106386:	4b54      	ldr	r3, [pc, #336]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810638a:	f003 0303 	and.w	r3, r3, #3
 810638e:	2b03      	cmp	r3, #3
 8106390:	d101      	bne.n	8106396 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8106392:	2301      	movs	r3, #1
 8106394:	e09b      	b.n	81064ce <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106396:	4b50      	ldr	r3, [pc, #320]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106398:	681b      	ldr	r3, [r3, #0]
 810639a:	4a4f      	ldr	r2, [pc, #316]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 810639c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81063a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81063a2:	f7fc fef7 	bl	8103194 <HAL_GetTick>
 81063a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81063a8:	e008      	b.n	81063bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81063aa:	f7fc fef3 	bl	8103194 <HAL_GetTick>
 81063ae:	4602      	mov	r2, r0
 81063b0:	68bb      	ldr	r3, [r7, #8]
 81063b2:	1ad3      	subs	r3, r2, r3
 81063b4:	2b02      	cmp	r3, #2
 81063b6:	d901      	bls.n	81063bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81063b8:	2303      	movs	r3, #3
 81063ba:	e088      	b.n	81064ce <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81063bc:	4b46      	ldr	r3, [pc, #280]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81063c4:	2b00      	cmp	r3, #0
 81063c6:	d1f0      	bne.n	81063aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81063c8:	4b43      	ldr	r3, [pc, #268]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 81063ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	681b      	ldr	r3, [r3, #0]
 81063d4:	051b      	lsls	r3, r3, #20
 81063d6:	4940      	ldr	r1, [pc, #256]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 81063d8:	4313      	orrs	r3, r2
 81063da:	628b      	str	r3, [r1, #40]	@ 0x28
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	685b      	ldr	r3, [r3, #4]
 81063e0:	3b01      	subs	r3, #1
 81063e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	689b      	ldr	r3, [r3, #8]
 81063ea:	3b01      	subs	r3, #1
 81063ec:	025b      	lsls	r3, r3, #9
 81063ee:	b29b      	uxth	r3, r3
 81063f0:	431a      	orrs	r2, r3
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	68db      	ldr	r3, [r3, #12]
 81063f6:	3b01      	subs	r3, #1
 81063f8:	041b      	lsls	r3, r3, #16
 81063fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81063fe:	431a      	orrs	r2, r3
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	691b      	ldr	r3, [r3, #16]
 8106404:	3b01      	subs	r3, #1
 8106406:	061b      	lsls	r3, r3, #24
 8106408:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810640c:	4932      	ldr	r1, [pc, #200]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 810640e:	4313      	orrs	r3, r2
 8106410:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106412:	4b31      	ldr	r3, [pc, #196]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106416:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	695b      	ldr	r3, [r3, #20]
 810641e:	492e      	ldr	r1, [pc, #184]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106420:	4313      	orrs	r3, r2
 8106422:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106424:	4b2c      	ldr	r3, [pc, #176]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106428:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	699b      	ldr	r3, [r3, #24]
 8106430:	4929      	ldr	r1, [pc, #164]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106432:	4313      	orrs	r3, r2
 8106434:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106436:	4b28      	ldr	r3, [pc, #160]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810643a:	4a27      	ldr	r2, [pc, #156]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 810643c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106440:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106442:	4b25      	ldr	r3, [pc, #148]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106446:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810644a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810644e:	687a      	ldr	r2, [r7, #4]
 8106450:	69d2      	ldr	r2, [r2, #28]
 8106452:	00d2      	lsls	r2, r2, #3
 8106454:	4920      	ldr	r1, [pc, #128]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106456:	4313      	orrs	r3, r2
 8106458:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810645a:	4b1f      	ldr	r3, [pc, #124]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 810645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810645e:	4a1e      	ldr	r2, [pc, #120]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106464:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106466:	683b      	ldr	r3, [r7, #0]
 8106468:	2b00      	cmp	r3, #0
 810646a:	d106      	bne.n	810647a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810646c:	4b1a      	ldr	r3, [pc, #104]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 810646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106470:	4a19      	ldr	r2, [pc, #100]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8106476:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106478:	e00f      	b.n	810649a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810647a:	683b      	ldr	r3, [r7, #0]
 810647c:	2b01      	cmp	r3, #1
 810647e:	d106      	bne.n	810648e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106480:	4b15      	ldr	r3, [pc, #84]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106484:	4a14      	ldr	r2, [pc, #80]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106486:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810648a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 810648c:	e005      	b.n	810649a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810648e:	4b12      	ldr	r3, [pc, #72]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106492:	4a11      	ldr	r2, [pc, #68]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 8106494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106498:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810649a:	4b0f      	ldr	r3, [pc, #60]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	4a0e      	ldr	r2, [pc, #56]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 81064a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81064a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81064a6:	f7fc fe75 	bl	8103194 <HAL_GetTick>
 81064aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81064ac:	e008      	b.n	81064c0 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81064ae:	f7fc fe71 	bl	8103194 <HAL_GetTick>
 81064b2:	4602      	mov	r2, r0
 81064b4:	68bb      	ldr	r3, [r7, #8]
 81064b6:	1ad3      	subs	r3, r2, r3
 81064b8:	2b02      	cmp	r3, #2
 81064ba:	d901      	bls.n	81064c0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81064bc:	2303      	movs	r3, #3
 81064be:	e006      	b.n	81064ce <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81064c0:	4b05      	ldr	r3, [pc, #20]	@ (81064d8 <RCCEx_PLL3_Config+0x160>)
 81064c2:	681b      	ldr	r3, [r3, #0]
 81064c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81064c8:	2b00      	cmp	r3, #0
 81064ca:	d0f0      	beq.n	81064ae <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 81064ce:	4618      	mov	r0, r3
 81064d0:	3710      	adds	r7, #16
 81064d2:	46bd      	mov	sp, r7
 81064d4:	bd80      	pop	{r7, pc}
 81064d6:	bf00      	nop
 81064d8:	58024400 	.word	0x58024400

081064dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81064dc:	b580      	push	{r7, lr}
 81064de:	b082      	sub	sp, #8
 81064e0:	af00      	add	r7, sp, #0
 81064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	2b00      	cmp	r3, #0
 81064e8:	d101      	bne.n	81064ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81064ea:	2301      	movs	r3, #1
 81064ec:	e049      	b.n	8106582 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81064f4:	b2db      	uxtb	r3, r3
 81064f6:	2b00      	cmp	r3, #0
 81064f8:	d106      	bne.n	8106508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	2200      	movs	r2, #0
 81064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106502:	6878      	ldr	r0, [r7, #4]
 8106504:	f7fc fafa 	bl	8102afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	2202      	movs	r2, #2
 810650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681a      	ldr	r2, [r3, #0]
 8106514:	687b      	ldr	r3, [r7, #4]
 8106516:	3304      	adds	r3, #4
 8106518:	4619      	mov	r1, r3
 810651a:	4610      	mov	r0, r2
 810651c:	f001 f928 	bl	8107770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	2201      	movs	r2, #1
 8106524:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	2201      	movs	r2, #1
 810652c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	2201      	movs	r2, #1
 8106534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	2201      	movs	r2, #1
 810653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	2201      	movs	r2, #1
 8106544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	2201      	movs	r2, #1
 810654c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	2201      	movs	r2, #1
 8106554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	2201      	movs	r2, #1
 810655c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	2201      	movs	r2, #1
 8106564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	2201      	movs	r2, #1
 810656c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	2201      	movs	r2, #1
 8106574:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2201      	movs	r2, #1
 810657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106580:	2300      	movs	r3, #0
}
 8106582:	4618      	mov	r0, r3
 8106584:	3708      	adds	r7, #8
 8106586:	46bd      	mov	sp, r7
 8106588:	bd80      	pop	{r7, pc}
	...

0810658c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810658c:	b480      	push	{r7}
 810658e:	b085      	sub	sp, #20
 8106590:	af00      	add	r7, sp, #0
 8106592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810659a:	b2db      	uxtb	r3, r3
 810659c:	2b01      	cmp	r3, #1
 810659e:	d001      	beq.n	81065a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81065a0:	2301      	movs	r3, #1
 81065a2:	e054      	b.n	810664e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	2202      	movs	r2, #2
 81065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	681b      	ldr	r3, [r3, #0]
 81065b0:	68da      	ldr	r2, [r3, #12]
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	f042 0201 	orr.w	r2, r2, #1
 81065ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	681b      	ldr	r3, [r3, #0]
 81065c0:	4a26      	ldr	r2, [pc, #152]	@ (810665c <HAL_TIM_Base_Start_IT+0xd0>)
 81065c2:	4293      	cmp	r3, r2
 81065c4:	d022      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	681b      	ldr	r3, [r3, #0]
 81065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81065ce:	d01d      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	4a22      	ldr	r2, [pc, #136]	@ (8106660 <HAL_TIM_Base_Start_IT+0xd4>)
 81065d6:	4293      	cmp	r3, r2
 81065d8:	d018      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	4a21      	ldr	r2, [pc, #132]	@ (8106664 <HAL_TIM_Base_Start_IT+0xd8>)
 81065e0:	4293      	cmp	r3, r2
 81065e2:	d013      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	681b      	ldr	r3, [r3, #0]
 81065e8:	4a1f      	ldr	r2, [pc, #124]	@ (8106668 <HAL_TIM_Base_Start_IT+0xdc>)
 81065ea:	4293      	cmp	r3, r2
 81065ec:	d00e      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	681b      	ldr	r3, [r3, #0]
 81065f2:	4a1e      	ldr	r2, [pc, #120]	@ (810666c <HAL_TIM_Base_Start_IT+0xe0>)
 81065f4:	4293      	cmp	r3, r2
 81065f6:	d009      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 81065f8:	687b      	ldr	r3, [r7, #4]
 81065fa:	681b      	ldr	r3, [r3, #0]
 81065fc:	4a1c      	ldr	r2, [pc, #112]	@ (8106670 <HAL_TIM_Base_Start_IT+0xe4>)
 81065fe:	4293      	cmp	r3, r2
 8106600:	d004      	beq.n	810660c <HAL_TIM_Base_Start_IT+0x80>
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	681b      	ldr	r3, [r3, #0]
 8106606:	4a1b      	ldr	r2, [pc, #108]	@ (8106674 <HAL_TIM_Base_Start_IT+0xe8>)
 8106608:	4293      	cmp	r3, r2
 810660a:	d115      	bne.n	8106638 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810660c:	687b      	ldr	r3, [r7, #4]
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	689a      	ldr	r2, [r3, #8]
 8106612:	4b19      	ldr	r3, [pc, #100]	@ (8106678 <HAL_TIM_Base_Start_IT+0xec>)
 8106614:	4013      	ands	r3, r2
 8106616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106618:	68fb      	ldr	r3, [r7, #12]
 810661a:	2b06      	cmp	r3, #6
 810661c:	d015      	beq.n	810664a <HAL_TIM_Base_Start_IT+0xbe>
 810661e:	68fb      	ldr	r3, [r7, #12]
 8106620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106624:	d011      	beq.n	810664a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	681b      	ldr	r3, [r3, #0]
 810662a:	681a      	ldr	r2, [r3, #0]
 810662c:	687b      	ldr	r3, [r7, #4]
 810662e:	681b      	ldr	r3, [r3, #0]
 8106630:	f042 0201 	orr.w	r2, r2, #1
 8106634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106636:	e008      	b.n	810664a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	681b      	ldr	r3, [r3, #0]
 810663c:	681a      	ldr	r2, [r3, #0]
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	681b      	ldr	r3, [r3, #0]
 8106642:	f042 0201 	orr.w	r2, r2, #1
 8106646:	601a      	str	r2, [r3, #0]
 8106648:	e000      	b.n	810664c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810664a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810664c:	2300      	movs	r3, #0
}
 810664e:	4618      	mov	r0, r3
 8106650:	3714      	adds	r7, #20
 8106652:	46bd      	mov	sp, r7
 8106654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106658:	4770      	bx	lr
 810665a:	bf00      	nop
 810665c:	40010000 	.word	0x40010000
 8106660:	40000400 	.word	0x40000400
 8106664:	40000800 	.word	0x40000800
 8106668:	40000c00 	.word	0x40000c00
 810666c:	40010400 	.word	0x40010400
 8106670:	40001800 	.word	0x40001800
 8106674:	40014000 	.word	0x40014000
 8106678:	00010007 	.word	0x00010007

0810667c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810667c:	b580      	push	{r7, lr}
 810667e:	b082      	sub	sp, #8
 8106680:	af00      	add	r7, sp, #0
 8106682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106684:	687b      	ldr	r3, [r7, #4]
 8106686:	2b00      	cmp	r3, #0
 8106688:	d101      	bne.n	810668e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810668a:	2301      	movs	r3, #1
 810668c:	e049      	b.n	8106722 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810668e:	687b      	ldr	r3, [r7, #4]
 8106690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106694:	b2db      	uxtb	r3, r3
 8106696:	2b00      	cmp	r3, #0
 8106698:	d106      	bne.n	81066a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	2200      	movs	r2, #0
 810669e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81066a2:	6878      	ldr	r0, [r7, #4]
 81066a4:	f000 f841 	bl	810672a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	2202      	movs	r2, #2
 81066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81066b0:	687b      	ldr	r3, [r7, #4]
 81066b2:	681a      	ldr	r2, [r3, #0]
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	3304      	adds	r3, #4
 81066b8:	4619      	mov	r1, r3
 81066ba:	4610      	mov	r0, r2
 81066bc:	f001 f858 	bl	8107770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	2201      	movs	r2, #1
 81066c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	2201      	movs	r2, #1
 81066cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	2201      	movs	r2, #1
 81066d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	2201      	movs	r2, #1
 81066dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	2201      	movs	r2, #1
 81066e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	2201      	movs	r2, #1
 81066ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	2201      	movs	r2, #1
 81066f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	2201      	movs	r2, #1
 81066fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	2201      	movs	r2, #1
 8106704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	2201      	movs	r2, #1
 810670c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	2201      	movs	r2, #1
 8106714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	2201      	movs	r2, #1
 810671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106720:	2300      	movs	r3, #0
}
 8106722:	4618      	mov	r0, r3
 8106724:	3708      	adds	r7, #8
 8106726:	46bd      	mov	sp, r7
 8106728:	bd80      	pop	{r7, pc}

0810672a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810672a:	b480      	push	{r7}
 810672c:	b083      	sub	sp, #12
 810672e:	af00      	add	r7, sp, #0
 8106730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106732:	bf00      	nop
 8106734:	370c      	adds	r7, #12
 8106736:	46bd      	mov	sp, r7
 8106738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810673c:	4770      	bx	lr
	...

08106740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106740:	b580      	push	{r7, lr}
 8106742:	b084      	sub	sp, #16
 8106744:	af00      	add	r7, sp, #0
 8106746:	6078      	str	r0, [r7, #4]
 8106748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810674a:	683b      	ldr	r3, [r7, #0]
 810674c:	2b00      	cmp	r3, #0
 810674e:	d109      	bne.n	8106764 <HAL_TIM_PWM_Start+0x24>
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106756:	b2db      	uxtb	r3, r3
 8106758:	2b01      	cmp	r3, #1
 810675a:	bf14      	ite	ne
 810675c:	2301      	movne	r3, #1
 810675e:	2300      	moveq	r3, #0
 8106760:	b2db      	uxtb	r3, r3
 8106762:	e03c      	b.n	81067de <HAL_TIM_PWM_Start+0x9e>
 8106764:	683b      	ldr	r3, [r7, #0]
 8106766:	2b04      	cmp	r3, #4
 8106768:	d109      	bne.n	810677e <HAL_TIM_PWM_Start+0x3e>
 810676a:	687b      	ldr	r3, [r7, #4]
 810676c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106770:	b2db      	uxtb	r3, r3
 8106772:	2b01      	cmp	r3, #1
 8106774:	bf14      	ite	ne
 8106776:	2301      	movne	r3, #1
 8106778:	2300      	moveq	r3, #0
 810677a:	b2db      	uxtb	r3, r3
 810677c:	e02f      	b.n	81067de <HAL_TIM_PWM_Start+0x9e>
 810677e:	683b      	ldr	r3, [r7, #0]
 8106780:	2b08      	cmp	r3, #8
 8106782:	d109      	bne.n	8106798 <HAL_TIM_PWM_Start+0x58>
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810678a:	b2db      	uxtb	r3, r3
 810678c:	2b01      	cmp	r3, #1
 810678e:	bf14      	ite	ne
 8106790:	2301      	movne	r3, #1
 8106792:	2300      	moveq	r3, #0
 8106794:	b2db      	uxtb	r3, r3
 8106796:	e022      	b.n	81067de <HAL_TIM_PWM_Start+0x9e>
 8106798:	683b      	ldr	r3, [r7, #0]
 810679a:	2b0c      	cmp	r3, #12
 810679c:	d109      	bne.n	81067b2 <HAL_TIM_PWM_Start+0x72>
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81067a4:	b2db      	uxtb	r3, r3
 81067a6:	2b01      	cmp	r3, #1
 81067a8:	bf14      	ite	ne
 81067aa:	2301      	movne	r3, #1
 81067ac:	2300      	moveq	r3, #0
 81067ae:	b2db      	uxtb	r3, r3
 81067b0:	e015      	b.n	81067de <HAL_TIM_PWM_Start+0x9e>
 81067b2:	683b      	ldr	r3, [r7, #0]
 81067b4:	2b10      	cmp	r3, #16
 81067b6:	d109      	bne.n	81067cc <HAL_TIM_PWM_Start+0x8c>
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81067be:	b2db      	uxtb	r3, r3
 81067c0:	2b01      	cmp	r3, #1
 81067c2:	bf14      	ite	ne
 81067c4:	2301      	movne	r3, #1
 81067c6:	2300      	moveq	r3, #0
 81067c8:	b2db      	uxtb	r3, r3
 81067ca:	e008      	b.n	81067de <HAL_TIM_PWM_Start+0x9e>
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81067d2:	b2db      	uxtb	r3, r3
 81067d4:	2b01      	cmp	r3, #1
 81067d6:	bf14      	ite	ne
 81067d8:	2301      	movne	r3, #1
 81067da:	2300      	moveq	r3, #0
 81067dc:	b2db      	uxtb	r3, r3
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d001      	beq.n	81067e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81067e2:	2301      	movs	r3, #1
 81067e4:	e0a1      	b.n	810692a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81067e6:	683b      	ldr	r3, [r7, #0]
 81067e8:	2b00      	cmp	r3, #0
 81067ea:	d104      	bne.n	81067f6 <HAL_TIM_PWM_Start+0xb6>
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	2202      	movs	r2, #2
 81067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81067f4:	e023      	b.n	810683e <HAL_TIM_PWM_Start+0xfe>
 81067f6:	683b      	ldr	r3, [r7, #0]
 81067f8:	2b04      	cmp	r3, #4
 81067fa:	d104      	bne.n	8106806 <HAL_TIM_PWM_Start+0xc6>
 81067fc:	687b      	ldr	r3, [r7, #4]
 81067fe:	2202      	movs	r2, #2
 8106800:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106804:	e01b      	b.n	810683e <HAL_TIM_PWM_Start+0xfe>
 8106806:	683b      	ldr	r3, [r7, #0]
 8106808:	2b08      	cmp	r3, #8
 810680a:	d104      	bne.n	8106816 <HAL_TIM_PWM_Start+0xd6>
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	2202      	movs	r2, #2
 8106810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106814:	e013      	b.n	810683e <HAL_TIM_PWM_Start+0xfe>
 8106816:	683b      	ldr	r3, [r7, #0]
 8106818:	2b0c      	cmp	r3, #12
 810681a:	d104      	bne.n	8106826 <HAL_TIM_PWM_Start+0xe6>
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	2202      	movs	r2, #2
 8106820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106824:	e00b      	b.n	810683e <HAL_TIM_PWM_Start+0xfe>
 8106826:	683b      	ldr	r3, [r7, #0]
 8106828:	2b10      	cmp	r3, #16
 810682a:	d104      	bne.n	8106836 <HAL_TIM_PWM_Start+0xf6>
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	2202      	movs	r2, #2
 8106830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106834:	e003      	b.n	810683e <HAL_TIM_PWM_Start+0xfe>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2202      	movs	r2, #2
 810683a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	681b      	ldr	r3, [r3, #0]
 8106842:	2201      	movs	r2, #1
 8106844:	6839      	ldr	r1, [r7, #0]
 8106846:	4618      	mov	r0, r3
 8106848:	f001 fdbe 	bl	81083c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	681b      	ldr	r3, [r3, #0]
 8106850:	4a38      	ldr	r2, [pc, #224]	@ (8106934 <HAL_TIM_PWM_Start+0x1f4>)
 8106852:	4293      	cmp	r3, r2
 8106854:	d013      	beq.n	810687e <HAL_TIM_PWM_Start+0x13e>
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	681b      	ldr	r3, [r3, #0]
 810685a:	4a37      	ldr	r2, [pc, #220]	@ (8106938 <HAL_TIM_PWM_Start+0x1f8>)
 810685c:	4293      	cmp	r3, r2
 810685e:	d00e      	beq.n	810687e <HAL_TIM_PWM_Start+0x13e>
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	4a35      	ldr	r2, [pc, #212]	@ (810693c <HAL_TIM_PWM_Start+0x1fc>)
 8106866:	4293      	cmp	r3, r2
 8106868:	d009      	beq.n	810687e <HAL_TIM_PWM_Start+0x13e>
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	4a34      	ldr	r2, [pc, #208]	@ (8106940 <HAL_TIM_PWM_Start+0x200>)
 8106870:	4293      	cmp	r3, r2
 8106872:	d004      	beq.n	810687e <HAL_TIM_PWM_Start+0x13e>
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	681b      	ldr	r3, [r3, #0]
 8106878:	4a32      	ldr	r2, [pc, #200]	@ (8106944 <HAL_TIM_PWM_Start+0x204>)
 810687a:	4293      	cmp	r3, r2
 810687c:	d101      	bne.n	8106882 <HAL_TIM_PWM_Start+0x142>
 810687e:	2301      	movs	r3, #1
 8106880:	e000      	b.n	8106884 <HAL_TIM_PWM_Start+0x144>
 8106882:	2300      	movs	r3, #0
 8106884:	2b00      	cmp	r3, #0
 8106886:	d007      	beq.n	8106898 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	681b      	ldr	r3, [r3, #0]
 810688c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	681b      	ldr	r3, [r3, #0]
 8106892:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8106896:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	681b      	ldr	r3, [r3, #0]
 810689c:	4a25      	ldr	r2, [pc, #148]	@ (8106934 <HAL_TIM_PWM_Start+0x1f4>)
 810689e:	4293      	cmp	r3, r2
 81068a0:	d022      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	681b      	ldr	r3, [r3, #0]
 81068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81068aa:	d01d      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	4a25      	ldr	r2, [pc, #148]	@ (8106948 <HAL_TIM_PWM_Start+0x208>)
 81068b2:	4293      	cmp	r3, r2
 81068b4:	d018      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	4a24      	ldr	r2, [pc, #144]	@ (810694c <HAL_TIM_PWM_Start+0x20c>)
 81068bc:	4293      	cmp	r3, r2
 81068be:	d013      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	4a22      	ldr	r2, [pc, #136]	@ (8106950 <HAL_TIM_PWM_Start+0x210>)
 81068c6:	4293      	cmp	r3, r2
 81068c8:	d00e      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068ca:	687b      	ldr	r3, [r7, #4]
 81068cc:	681b      	ldr	r3, [r3, #0]
 81068ce:	4a1a      	ldr	r2, [pc, #104]	@ (8106938 <HAL_TIM_PWM_Start+0x1f8>)
 81068d0:	4293      	cmp	r3, r2
 81068d2:	d009      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	4a1e      	ldr	r2, [pc, #120]	@ (8106954 <HAL_TIM_PWM_Start+0x214>)
 81068da:	4293      	cmp	r3, r2
 81068dc:	d004      	beq.n	81068e8 <HAL_TIM_PWM_Start+0x1a8>
 81068de:	687b      	ldr	r3, [r7, #4]
 81068e0:	681b      	ldr	r3, [r3, #0]
 81068e2:	4a16      	ldr	r2, [pc, #88]	@ (810693c <HAL_TIM_PWM_Start+0x1fc>)
 81068e4:	4293      	cmp	r3, r2
 81068e6:	d115      	bne.n	8106914 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	689a      	ldr	r2, [r3, #8]
 81068ee:	4b1a      	ldr	r3, [pc, #104]	@ (8106958 <HAL_TIM_PWM_Start+0x218>)
 81068f0:	4013      	ands	r3, r2
 81068f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81068f4:	68fb      	ldr	r3, [r7, #12]
 81068f6:	2b06      	cmp	r3, #6
 81068f8:	d015      	beq.n	8106926 <HAL_TIM_PWM_Start+0x1e6>
 81068fa:	68fb      	ldr	r3, [r7, #12]
 81068fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106900:	d011      	beq.n	8106926 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	681a      	ldr	r2, [r3, #0]
 8106908:	687b      	ldr	r3, [r7, #4]
 810690a:	681b      	ldr	r3, [r3, #0]
 810690c:	f042 0201 	orr.w	r2, r2, #1
 8106910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106912:	e008      	b.n	8106926 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	681b      	ldr	r3, [r3, #0]
 8106918:	681a      	ldr	r2, [r3, #0]
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	f042 0201 	orr.w	r2, r2, #1
 8106922:	601a      	str	r2, [r3, #0]
 8106924:	e000      	b.n	8106928 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106928:	2300      	movs	r3, #0
}
 810692a:	4618      	mov	r0, r3
 810692c:	3710      	adds	r7, #16
 810692e:	46bd      	mov	sp, r7
 8106930:	bd80      	pop	{r7, pc}
 8106932:	bf00      	nop
 8106934:	40010000 	.word	0x40010000
 8106938:	40010400 	.word	0x40010400
 810693c:	40014000 	.word	0x40014000
 8106940:	40014400 	.word	0x40014400
 8106944:	40014800 	.word	0x40014800
 8106948:	40000400 	.word	0x40000400
 810694c:	40000800 	.word	0x40000800
 8106950:	40000c00 	.word	0x40000c00
 8106954:	40001800 	.word	0x40001800
 8106958:	00010007 	.word	0x00010007

0810695c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810695c:	b580      	push	{r7, lr}
 810695e:	b082      	sub	sp, #8
 8106960:	af00      	add	r7, sp, #0
 8106962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	2b00      	cmp	r3, #0
 8106968:	d101      	bne.n	810696e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810696a:	2301      	movs	r3, #1
 810696c:	e049      	b.n	8106a02 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106974:	b2db      	uxtb	r3, r3
 8106976:	2b00      	cmp	r3, #0
 8106978:	d106      	bne.n	8106988 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810697a:	687b      	ldr	r3, [r7, #4]
 810697c:	2200      	movs	r2, #0
 810697e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8106982:	6878      	ldr	r0, [r7, #4]
 8106984:	f000 f841 	bl	8106a0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	2202      	movs	r2, #2
 810698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	681a      	ldr	r2, [r3, #0]
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	3304      	adds	r3, #4
 8106998:	4619      	mov	r1, r3
 810699a:	4610      	mov	r0, r2
 810699c:	f000 fee8 	bl	8107770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	2201      	movs	r2, #1
 81069a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	2201      	movs	r2, #1
 81069ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	2201      	movs	r2, #1
 81069b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	2201      	movs	r2, #1
 81069bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	2201      	movs	r2, #1
 81069c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	2201      	movs	r2, #1
 81069cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	2201      	movs	r2, #1
 81069d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	2201      	movs	r2, #1
 81069dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	2201      	movs	r2, #1
 81069e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	2201      	movs	r2, #1
 81069ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	2201      	movs	r2, #1
 81069f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	2201      	movs	r2, #1
 81069fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106a00:	2300      	movs	r3, #0
}
 8106a02:	4618      	mov	r0, r3
 8106a04:	3708      	adds	r7, #8
 8106a06:	46bd      	mov	sp, r7
 8106a08:	bd80      	pop	{r7, pc}

08106a0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8106a0a:	b480      	push	{r7}
 8106a0c:	b083      	sub	sp, #12
 8106a0e:	af00      	add	r7, sp, #0
 8106a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106a12:	bf00      	nop
 8106a14:	370c      	adds	r7, #12
 8106a16:	46bd      	mov	sp, r7
 8106a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a1c:	4770      	bx	lr
	...

08106a20 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106a20:	b580      	push	{r7, lr}
 8106a22:	b084      	sub	sp, #16
 8106a24:	af00      	add	r7, sp, #0
 8106a26:	6078      	str	r0, [r7, #4]
 8106a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106a2a:	683b      	ldr	r3, [r7, #0]
 8106a2c:	2b00      	cmp	r3, #0
 8106a2e:	d104      	bne.n	8106a3a <HAL_TIM_IC_Start+0x1a>
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106a36:	b2db      	uxtb	r3, r3
 8106a38:	e023      	b.n	8106a82 <HAL_TIM_IC_Start+0x62>
 8106a3a:	683b      	ldr	r3, [r7, #0]
 8106a3c:	2b04      	cmp	r3, #4
 8106a3e:	d104      	bne.n	8106a4a <HAL_TIM_IC_Start+0x2a>
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106a46:	b2db      	uxtb	r3, r3
 8106a48:	e01b      	b.n	8106a82 <HAL_TIM_IC_Start+0x62>
 8106a4a:	683b      	ldr	r3, [r7, #0]
 8106a4c:	2b08      	cmp	r3, #8
 8106a4e:	d104      	bne.n	8106a5a <HAL_TIM_IC_Start+0x3a>
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106a56:	b2db      	uxtb	r3, r3
 8106a58:	e013      	b.n	8106a82 <HAL_TIM_IC_Start+0x62>
 8106a5a:	683b      	ldr	r3, [r7, #0]
 8106a5c:	2b0c      	cmp	r3, #12
 8106a5e:	d104      	bne.n	8106a6a <HAL_TIM_IC_Start+0x4a>
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106a66:	b2db      	uxtb	r3, r3
 8106a68:	e00b      	b.n	8106a82 <HAL_TIM_IC_Start+0x62>
 8106a6a:	683b      	ldr	r3, [r7, #0]
 8106a6c:	2b10      	cmp	r3, #16
 8106a6e:	d104      	bne.n	8106a7a <HAL_TIM_IC_Start+0x5a>
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106a76:	b2db      	uxtb	r3, r3
 8106a78:	e003      	b.n	8106a82 <HAL_TIM_IC_Start+0x62>
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106a80:	b2db      	uxtb	r3, r3
 8106a82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106a84:	683b      	ldr	r3, [r7, #0]
 8106a86:	2b00      	cmp	r3, #0
 8106a88:	d104      	bne.n	8106a94 <HAL_TIM_IC_Start+0x74>
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106a90:	b2db      	uxtb	r3, r3
 8106a92:	e013      	b.n	8106abc <HAL_TIM_IC_Start+0x9c>
 8106a94:	683b      	ldr	r3, [r7, #0]
 8106a96:	2b04      	cmp	r3, #4
 8106a98:	d104      	bne.n	8106aa4 <HAL_TIM_IC_Start+0x84>
 8106a9a:	687b      	ldr	r3, [r7, #4]
 8106a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106aa0:	b2db      	uxtb	r3, r3
 8106aa2:	e00b      	b.n	8106abc <HAL_TIM_IC_Start+0x9c>
 8106aa4:	683b      	ldr	r3, [r7, #0]
 8106aa6:	2b08      	cmp	r3, #8
 8106aa8:	d104      	bne.n	8106ab4 <HAL_TIM_IC_Start+0x94>
 8106aaa:	687b      	ldr	r3, [r7, #4]
 8106aac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106ab0:	b2db      	uxtb	r3, r3
 8106ab2:	e003      	b.n	8106abc <HAL_TIM_IC_Start+0x9c>
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8106aba:	b2db      	uxtb	r3, r3
 8106abc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106abe:	7bfb      	ldrb	r3, [r7, #15]
 8106ac0:	2b01      	cmp	r3, #1
 8106ac2:	d102      	bne.n	8106aca <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106ac4:	7bbb      	ldrb	r3, [r7, #14]
 8106ac6:	2b01      	cmp	r3, #1
 8106ac8:	d001      	beq.n	8106ace <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8106aca:	2301      	movs	r3, #1
 8106acc:	e097      	b.n	8106bfe <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106ace:	683b      	ldr	r3, [r7, #0]
 8106ad0:	2b00      	cmp	r3, #0
 8106ad2:	d104      	bne.n	8106ade <HAL_TIM_IC_Start+0xbe>
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	2202      	movs	r2, #2
 8106ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106adc:	e023      	b.n	8106b26 <HAL_TIM_IC_Start+0x106>
 8106ade:	683b      	ldr	r3, [r7, #0]
 8106ae0:	2b04      	cmp	r3, #4
 8106ae2:	d104      	bne.n	8106aee <HAL_TIM_IC_Start+0xce>
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	2202      	movs	r2, #2
 8106ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106aec:	e01b      	b.n	8106b26 <HAL_TIM_IC_Start+0x106>
 8106aee:	683b      	ldr	r3, [r7, #0]
 8106af0:	2b08      	cmp	r3, #8
 8106af2:	d104      	bne.n	8106afe <HAL_TIM_IC_Start+0xde>
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	2202      	movs	r2, #2
 8106af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106afc:	e013      	b.n	8106b26 <HAL_TIM_IC_Start+0x106>
 8106afe:	683b      	ldr	r3, [r7, #0]
 8106b00:	2b0c      	cmp	r3, #12
 8106b02:	d104      	bne.n	8106b0e <HAL_TIM_IC_Start+0xee>
 8106b04:	687b      	ldr	r3, [r7, #4]
 8106b06:	2202      	movs	r2, #2
 8106b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106b0c:	e00b      	b.n	8106b26 <HAL_TIM_IC_Start+0x106>
 8106b0e:	683b      	ldr	r3, [r7, #0]
 8106b10:	2b10      	cmp	r3, #16
 8106b12:	d104      	bne.n	8106b1e <HAL_TIM_IC_Start+0xfe>
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	2202      	movs	r2, #2
 8106b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106b1c:	e003      	b.n	8106b26 <HAL_TIM_IC_Start+0x106>
 8106b1e:	687b      	ldr	r3, [r7, #4]
 8106b20:	2202      	movs	r2, #2
 8106b22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106b26:	683b      	ldr	r3, [r7, #0]
 8106b28:	2b00      	cmp	r3, #0
 8106b2a:	d104      	bne.n	8106b36 <HAL_TIM_IC_Start+0x116>
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	2202      	movs	r2, #2
 8106b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106b34:	e013      	b.n	8106b5e <HAL_TIM_IC_Start+0x13e>
 8106b36:	683b      	ldr	r3, [r7, #0]
 8106b38:	2b04      	cmp	r3, #4
 8106b3a:	d104      	bne.n	8106b46 <HAL_TIM_IC_Start+0x126>
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	2202      	movs	r2, #2
 8106b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106b44:	e00b      	b.n	8106b5e <HAL_TIM_IC_Start+0x13e>
 8106b46:	683b      	ldr	r3, [r7, #0]
 8106b48:	2b08      	cmp	r3, #8
 8106b4a:	d104      	bne.n	8106b56 <HAL_TIM_IC_Start+0x136>
 8106b4c:	687b      	ldr	r3, [r7, #4]
 8106b4e:	2202      	movs	r2, #2
 8106b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106b54:	e003      	b.n	8106b5e <HAL_TIM_IC_Start+0x13e>
 8106b56:	687b      	ldr	r3, [r7, #4]
 8106b58:	2202      	movs	r2, #2
 8106b5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	681b      	ldr	r3, [r3, #0]
 8106b62:	2201      	movs	r2, #1
 8106b64:	6839      	ldr	r1, [r7, #0]
 8106b66:	4618      	mov	r0, r3
 8106b68:	f001 fc2e 	bl	81083c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	681b      	ldr	r3, [r3, #0]
 8106b70:	4a25      	ldr	r2, [pc, #148]	@ (8106c08 <HAL_TIM_IC_Start+0x1e8>)
 8106b72:	4293      	cmp	r3, r2
 8106b74:	d022      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	681b      	ldr	r3, [r3, #0]
 8106b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b7e:	d01d      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	4a21      	ldr	r2, [pc, #132]	@ (8106c0c <HAL_TIM_IC_Start+0x1ec>)
 8106b86:	4293      	cmp	r3, r2
 8106b88:	d018      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	681b      	ldr	r3, [r3, #0]
 8106b8e:	4a20      	ldr	r2, [pc, #128]	@ (8106c10 <HAL_TIM_IC_Start+0x1f0>)
 8106b90:	4293      	cmp	r3, r2
 8106b92:	d013      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	681b      	ldr	r3, [r3, #0]
 8106b98:	4a1e      	ldr	r2, [pc, #120]	@ (8106c14 <HAL_TIM_IC_Start+0x1f4>)
 8106b9a:	4293      	cmp	r3, r2
 8106b9c:	d00e      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	681b      	ldr	r3, [r3, #0]
 8106ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8106c18 <HAL_TIM_IC_Start+0x1f8>)
 8106ba4:	4293      	cmp	r3, r2
 8106ba6:	d009      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	681b      	ldr	r3, [r3, #0]
 8106bac:	4a1b      	ldr	r2, [pc, #108]	@ (8106c1c <HAL_TIM_IC_Start+0x1fc>)
 8106bae:	4293      	cmp	r3, r2
 8106bb0:	d004      	beq.n	8106bbc <HAL_TIM_IC_Start+0x19c>
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	681b      	ldr	r3, [r3, #0]
 8106bb6:	4a1a      	ldr	r2, [pc, #104]	@ (8106c20 <HAL_TIM_IC_Start+0x200>)
 8106bb8:	4293      	cmp	r3, r2
 8106bba:	d115      	bne.n	8106be8 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	681b      	ldr	r3, [r3, #0]
 8106bc0:	689a      	ldr	r2, [r3, #8]
 8106bc2:	4b18      	ldr	r3, [pc, #96]	@ (8106c24 <HAL_TIM_IC_Start+0x204>)
 8106bc4:	4013      	ands	r3, r2
 8106bc6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106bc8:	68bb      	ldr	r3, [r7, #8]
 8106bca:	2b06      	cmp	r3, #6
 8106bcc:	d015      	beq.n	8106bfa <HAL_TIM_IC_Start+0x1da>
 8106bce:	68bb      	ldr	r3, [r7, #8]
 8106bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106bd4:	d011      	beq.n	8106bfa <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	681a      	ldr	r2, [r3, #0]
 8106bdc:	687b      	ldr	r3, [r7, #4]
 8106bde:	681b      	ldr	r3, [r3, #0]
 8106be0:	f042 0201 	orr.w	r2, r2, #1
 8106be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106be6:	e008      	b.n	8106bfa <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	681a      	ldr	r2, [r3, #0]
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	681b      	ldr	r3, [r3, #0]
 8106bf2:	f042 0201 	orr.w	r2, r2, #1
 8106bf6:	601a      	str	r2, [r3, #0]
 8106bf8:	e000      	b.n	8106bfc <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106bfc:	2300      	movs	r3, #0
}
 8106bfe:	4618      	mov	r0, r3
 8106c00:	3710      	adds	r7, #16
 8106c02:	46bd      	mov	sp, r7
 8106c04:	bd80      	pop	{r7, pc}
 8106c06:	bf00      	nop
 8106c08:	40010000 	.word	0x40010000
 8106c0c:	40000400 	.word	0x40000400
 8106c10:	40000800 	.word	0x40000800
 8106c14:	40000c00 	.word	0x40000c00
 8106c18:	40010400 	.word	0x40010400
 8106c1c:	40001800 	.word	0x40001800
 8106c20:	40014000 	.word	0x40014000
 8106c24:	00010007 	.word	0x00010007

08106c28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106c28:	b580      	push	{r7, lr}
 8106c2a:	b084      	sub	sp, #16
 8106c2c:	af00      	add	r7, sp, #0
 8106c2e:	6078      	str	r0, [r7, #4]
 8106c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8106c32:	2300      	movs	r3, #0
 8106c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106c36:	683b      	ldr	r3, [r7, #0]
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	d104      	bne.n	8106c46 <HAL_TIM_IC_Start_IT+0x1e>
 8106c3c:	687b      	ldr	r3, [r7, #4]
 8106c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106c42:	b2db      	uxtb	r3, r3
 8106c44:	e023      	b.n	8106c8e <HAL_TIM_IC_Start_IT+0x66>
 8106c46:	683b      	ldr	r3, [r7, #0]
 8106c48:	2b04      	cmp	r3, #4
 8106c4a:	d104      	bne.n	8106c56 <HAL_TIM_IC_Start_IT+0x2e>
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106c52:	b2db      	uxtb	r3, r3
 8106c54:	e01b      	b.n	8106c8e <HAL_TIM_IC_Start_IT+0x66>
 8106c56:	683b      	ldr	r3, [r7, #0]
 8106c58:	2b08      	cmp	r3, #8
 8106c5a:	d104      	bne.n	8106c66 <HAL_TIM_IC_Start_IT+0x3e>
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106c62:	b2db      	uxtb	r3, r3
 8106c64:	e013      	b.n	8106c8e <HAL_TIM_IC_Start_IT+0x66>
 8106c66:	683b      	ldr	r3, [r7, #0]
 8106c68:	2b0c      	cmp	r3, #12
 8106c6a:	d104      	bne.n	8106c76 <HAL_TIM_IC_Start_IT+0x4e>
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106c72:	b2db      	uxtb	r3, r3
 8106c74:	e00b      	b.n	8106c8e <HAL_TIM_IC_Start_IT+0x66>
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	2b10      	cmp	r3, #16
 8106c7a:	d104      	bne.n	8106c86 <HAL_TIM_IC_Start_IT+0x5e>
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106c82:	b2db      	uxtb	r3, r3
 8106c84:	e003      	b.n	8106c8e <HAL_TIM_IC_Start_IT+0x66>
 8106c86:	687b      	ldr	r3, [r7, #4]
 8106c88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106c8c:	b2db      	uxtb	r3, r3
 8106c8e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106c90:	683b      	ldr	r3, [r7, #0]
 8106c92:	2b00      	cmp	r3, #0
 8106c94:	d104      	bne.n	8106ca0 <HAL_TIM_IC_Start_IT+0x78>
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106c9c:	b2db      	uxtb	r3, r3
 8106c9e:	e013      	b.n	8106cc8 <HAL_TIM_IC_Start_IT+0xa0>
 8106ca0:	683b      	ldr	r3, [r7, #0]
 8106ca2:	2b04      	cmp	r3, #4
 8106ca4:	d104      	bne.n	8106cb0 <HAL_TIM_IC_Start_IT+0x88>
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106cac:	b2db      	uxtb	r3, r3
 8106cae:	e00b      	b.n	8106cc8 <HAL_TIM_IC_Start_IT+0xa0>
 8106cb0:	683b      	ldr	r3, [r7, #0]
 8106cb2:	2b08      	cmp	r3, #8
 8106cb4:	d104      	bne.n	8106cc0 <HAL_TIM_IC_Start_IT+0x98>
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106cbc:	b2db      	uxtb	r3, r3
 8106cbe:	e003      	b.n	8106cc8 <HAL_TIM_IC_Start_IT+0xa0>
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8106cc6:	b2db      	uxtb	r3, r3
 8106cc8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106cca:	7bbb      	ldrb	r3, [r7, #14]
 8106ccc:	2b01      	cmp	r3, #1
 8106cce:	d102      	bne.n	8106cd6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106cd0:	7b7b      	ldrb	r3, [r7, #13]
 8106cd2:	2b01      	cmp	r3, #1
 8106cd4:	d001      	beq.n	8106cda <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8106cd6:	2301      	movs	r3, #1
 8106cd8:	e0e2      	b.n	8106ea0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106cda:	683b      	ldr	r3, [r7, #0]
 8106cdc:	2b00      	cmp	r3, #0
 8106cde:	d104      	bne.n	8106cea <HAL_TIM_IC_Start_IT+0xc2>
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	2202      	movs	r2, #2
 8106ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106ce8:	e023      	b.n	8106d32 <HAL_TIM_IC_Start_IT+0x10a>
 8106cea:	683b      	ldr	r3, [r7, #0]
 8106cec:	2b04      	cmp	r3, #4
 8106cee:	d104      	bne.n	8106cfa <HAL_TIM_IC_Start_IT+0xd2>
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	2202      	movs	r2, #2
 8106cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106cf8:	e01b      	b.n	8106d32 <HAL_TIM_IC_Start_IT+0x10a>
 8106cfa:	683b      	ldr	r3, [r7, #0]
 8106cfc:	2b08      	cmp	r3, #8
 8106cfe:	d104      	bne.n	8106d0a <HAL_TIM_IC_Start_IT+0xe2>
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	2202      	movs	r2, #2
 8106d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106d08:	e013      	b.n	8106d32 <HAL_TIM_IC_Start_IT+0x10a>
 8106d0a:	683b      	ldr	r3, [r7, #0]
 8106d0c:	2b0c      	cmp	r3, #12
 8106d0e:	d104      	bne.n	8106d1a <HAL_TIM_IC_Start_IT+0xf2>
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	2202      	movs	r2, #2
 8106d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106d18:	e00b      	b.n	8106d32 <HAL_TIM_IC_Start_IT+0x10a>
 8106d1a:	683b      	ldr	r3, [r7, #0]
 8106d1c:	2b10      	cmp	r3, #16
 8106d1e:	d104      	bne.n	8106d2a <HAL_TIM_IC_Start_IT+0x102>
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2202      	movs	r2, #2
 8106d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106d28:	e003      	b.n	8106d32 <HAL_TIM_IC_Start_IT+0x10a>
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	2202      	movs	r2, #2
 8106d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106d32:	683b      	ldr	r3, [r7, #0]
 8106d34:	2b00      	cmp	r3, #0
 8106d36:	d104      	bne.n	8106d42 <HAL_TIM_IC_Start_IT+0x11a>
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	2202      	movs	r2, #2
 8106d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106d40:	e013      	b.n	8106d6a <HAL_TIM_IC_Start_IT+0x142>
 8106d42:	683b      	ldr	r3, [r7, #0]
 8106d44:	2b04      	cmp	r3, #4
 8106d46:	d104      	bne.n	8106d52 <HAL_TIM_IC_Start_IT+0x12a>
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	2202      	movs	r2, #2
 8106d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106d50:	e00b      	b.n	8106d6a <HAL_TIM_IC_Start_IT+0x142>
 8106d52:	683b      	ldr	r3, [r7, #0]
 8106d54:	2b08      	cmp	r3, #8
 8106d56:	d104      	bne.n	8106d62 <HAL_TIM_IC_Start_IT+0x13a>
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	2202      	movs	r2, #2
 8106d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106d60:	e003      	b.n	8106d6a <HAL_TIM_IC_Start_IT+0x142>
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	2202      	movs	r2, #2
 8106d66:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8106d6a:	683b      	ldr	r3, [r7, #0]
 8106d6c:	2b0c      	cmp	r3, #12
 8106d6e:	d841      	bhi.n	8106df4 <HAL_TIM_IC_Start_IT+0x1cc>
 8106d70:	a201      	add	r2, pc, #4	@ (adr r2, 8106d78 <HAL_TIM_IC_Start_IT+0x150>)
 8106d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d76:	bf00      	nop
 8106d78:	08106dad 	.word	0x08106dad
 8106d7c:	08106df5 	.word	0x08106df5
 8106d80:	08106df5 	.word	0x08106df5
 8106d84:	08106df5 	.word	0x08106df5
 8106d88:	08106dbf 	.word	0x08106dbf
 8106d8c:	08106df5 	.word	0x08106df5
 8106d90:	08106df5 	.word	0x08106df5
 8106d94:	08106df5 	.word	0x08106df5
 8106d98:	08106dd1 	.word	0x08106dd1
 8106d9c:	08106df5 	.word	0x08106df5
 8106da0:	08106df5 	.word	0x08106df5
 8106da4:	08106df5 	.word	0x08106df5
 8106da8:	08106de3 	.word	0x08106de3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	68da      	ldr	r2, [r3, #12]
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	681b      	ldr	r3, [r3, #0]
 8106db6:	f042 0202 	orr.w	r2, r2, #2
 8106dba:	60da      	str	r2, [r3, #12]
      break;
 8106dbc:	e01d      	b.n	8106dfa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	681b      	ldr	r3, [r3, #0]
 8106dc2:	68da      	ldr	r2, [r3, #12]
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	f042 0204 	orr.w	r2, r2, #4
 8106dcc:	60da      	str	r2, [r3, #12]
      break;
 8106dce:	e014      	b.n	8106dfa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8106dd0:	687b      	ldr	r3, [r7, #4]
 8106dd2:	681b      	ldr	r3, [r3, #0]
 8106dd4:	68da      	ldr	r2, [r3, #12]
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	f042 0208 	orr.w	r2, r2, #8
 8106dde:	60da      	str	r2, [r3, #12]
      break;
 8106de0:	e00b      	b.n	8106dfa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8106de2:	687b      	ldr	r3, [r7, #4]
 8106de4:	681b      	ldr	r3, [r3, #0]
 8106de6:	68da      	ldr	r2, [r3, #12]
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	f042 0210 	orr.w	r2, r2, #16
 8106df0:	60da      	str	r2, [r3, #12]
      break;
 8106df2:	e002      	b.n	8106dfa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8106df4:	2301      	movs	r3, #1
 8106df6:	73fb      	strb	r3, [r7, #15]
      break;
 8106df8:	bf00      	nop
  }

  if (status == HAL_OK)
 8106dfa:	7bfb      	ldrb	r3, [r7, #15]
 8106dfc:	2b00      	cmp	r3, #0
 8106dfe:	d14e      	bne.n	8106e9e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	2201      	movs	r2, #1
 8106e06:	6839      	ldr	r1, [r7, #0]
 8106e08:	4618      	mov	r0, r3
 8106e0a:	f001 fadd 	bl	81083c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	681b      	ldr	r3, [r3, #0]
 8106e12:	4a25      	ldr	r2, [pc, #148]	@ (8106ea8 <HAL_TIM_IC_Start_IT+0x280>)
 8106e14:	4293      	cmp	r3, r2
 8106e16:	d022      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	681b      	ldr	r3, [r3, #0]
 8106e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106e20:	d01d      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	4a21      	ldr	r2, [pc, #132]	@ (8106eac <HAL_TIM_IC_Start_IT+0x284>)
 8106e28:	4293      	cmp	r3, r2
 8106e2a:	d018      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	4a1f      	ldr	r2, [pc, #124]	@ (8106eb0 <HAL_TIM_IC_Start_IT+0x288>)
 8106e32:	4293      	cmp	r3, r2
 8106e34:	d013      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	681b      	ldr	r3, [r3, #0]
 8106e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8106eb4 <HAL_TIM_IC_Start_IT+0x28c>)
 8106e3c:	4293      	cmp	r3, r2
 8106e3e:	d00e      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	681b      	ldr	r3, [r3, #0]
 8106e44:	4a1c      	ldr	r2, [pc, #112]	@ (8106eb8 <HAL_TIM_IC_Start_IT+0x290>)
 8106e46:	4293      	cmp	r3, r2
 8106e48:	d009      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e4a:	687b      	ldr	r3, [r7, #4]
 8106e4c:	681b      	ldr	r3, [r3, #0]
 8106e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8106ebc <HAL_TIM_IC_Start_IT+0x294>)
 8106e50:	4293      	cmp	r3, r2
 8106e52:	d004      	beq.n	8106e5e <HAL_TIM_IC_Start_IT+0x236>
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	681b      	ldr	r3, [r3, #0]
 8106e58:	4a19      	ldr	r2, [pc, #100]	@ (8106ec0 <HAL_TIM_IC_Start_IT+0x298>)
 8106e5a:	4293      	cmp	r3, r2
 8106e5c:	d115      	bne.n	8106e8a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	689a      	ldr	r2, [r3, #8]
 8106e64:	4b17      	ldr	r3, [pc, #92]	@ (8106ec4 <HAL_TIM_IC_Start_IT+0x29c>)
 8106e66:	4013      	ands	r3, r2
 8106e68:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106e6a:	68bb      	ldr	r3, [r7, #8]
 8106e6c:	2b06      	cmp	r3, #6
 8106e6e:	d015      	beq.n	8106e9c <HAL_TIM_IC_Start_IT+0x274>
 8106e70:	68bb      	ldr	r3, [r7, #8]
 8106e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106e76:	d011      	beq.n	8106e9c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	681b      	ldr	r3, [r3, #0]
 8106e7c:	681a      	ldr	r2, [r3, #0]
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	f042 0201 	orr.w	r2, r2, #1
 8106e86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106e88:	e008      	b.n	8106e9c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	681b      	ldr	r3, [r3, #0]
 8106e8e:	681a      	ldr	r2, [r3, #0]
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	681b      	ldr	r3, [r3, #0]
 8106e94:	f042 0201 	orr.w	r2, r2, #1
 8106e98:	601a      	str	r2, [r3, #0]
 8106e9a:	e000      	b.n	8106e9e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106e9c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8106e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ea0:	4618      	mov	r0, r3
 8106ea2:	3710      	adds	r7, #16
 8106ea4:	46bd      	mov	sp, r7
 8106ea6:	bd80      	pop	{r7, pc}
 8106ea8:	40010000 	.word	0x40010000
 8106eac:	40000400 	.word	0x40000400
 8106eb0:	40000800 	.word	0x40000800
 8106eb4:	40000c00 	.word	0x40000c00
 8106eb8:	40010400 	.word	0x40010400
 8106ebc:	40001800 	.word	0x40001800
 8106ec0:	40014000 	.word	0x40014000
 8106ec4:	00010007 	.word	0x00010007

08106ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106ec8:	b580      	push	{r7, lr}
 8106eca:	b084      	sub	sp, #16
 8106ecc:	af00      	add	r7, sp, #0
 8106ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	68db      	ldr	r3, [r3, #12]
 8106ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	681b      	ldr	r3, [r3, #0]
 8106edc:	691b      	ldr	r3, [r3, #16]
 8106ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8106ee0:	68bb      	ldr	r3, [r7, #8]
 8106ee2:	f003 0302 	and.w	r3, r3, #2
 8106ee6:	2b00      	cmp	r3, #0
 8106ee8:	d020      	beq.n	8106f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106eea:	68fb      	ldr	r3, [r7, #12]
 8106eec:	f003 0302 	and.w	r3, r3, #2
 8106ef0:	2b00      	cmp	r3, #0
 8106ef2:	d01b      	beq.n	8106f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	681b      	ldr	r3, [r3, #0]
 8106ef8:	f06f 0202 	mvn.w	r2, #2
 8106efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106efe:	687b      	ldr	r3, [r7, #4]
 8106f00:	2201      	movs	r2, #1
 8106f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	681b      	ldr	r3, [r3, #0]
 8106f08:	699b      	ldr	r3, [r3, #24]
 8106f0a:	f003 0303 	and.w	r3, r3, #3
 8106f0e:	2b00      	cmp	r3, #0
 8106f10:	d003      	beq.n	8106f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106f12:	6878      	ldr	r0, [r7, #4]
 8106f14:	f7fb fd1e 	bl	8102954 <HAL_TIM_IC_CaptureCallback>
 8106f18:	e005      	b.n	8106f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f1a:	6878      	ldr	r0, [r7, #4]
 8106f1c:	f000 fc0a 	bl	8107734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f20:	6878      	ldr	r0, [r7, #4]
 8106f22:	f000 fc11 	bl	8107748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	2200      	movs	r2, #0
 8106f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106f2c:	68bb      	ldr	r3, [r7, #8]
 8106f2e:	f003 0304 	and.w	r3, r3, #4
 8106f32:	2b00      	cmp	r3, #0
 8106f34:	d020      	beq.n	8106f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106f36:	68fb      	ldr	r3, [r7, #12]
 8106f38:	f003 0304 	and.w	r3, r3, #4
 8106f3c:	2b00      	cmp	r3, #0
 8106f3e:	d01b      	beq.n	8106f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8106f40:	687b      	ldr	r3, [r7, #4]
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	f06f 0204 	mvn.w	r2, #4
 8106f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106f4a:	687b      	ldr	r3, [r7, #4]
 8106f4c:	2202      	movs	r2, #2
 8106f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106f50:	687b      	ldr	r3, [r7, #4]
 8106f52:	681b      	ldr	r3, [r3, #0]
 8106f54:	699b      	ldr	r3, [r3, #24]
 8106f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d003      	beq.n	8106f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f5e:	6878      	ldr	r0, [r7, #4]
 8106f60:	f7fb fcf8 	bl	8102954 <HAL_TIM_IC_CaptureCallback>
 8106f64:	e005      	b.n	8106f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f66:	6878      	ldr	r0, [r7, #4]
 8106f68:	f000 fbe4 	bl	8107734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f6c:	6878      	ldr	r0, [r7, #4]
 8106f6e:	f000 fbeb 	bl	8107748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f72:	687b      	ldr	r3, [r7, #4]
 8106f74:	2200      	movs	r2, #0
 8106f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106f78:	68bb      	ldr	r3, [r7, #8]
 8106f7a:	f003 0308 	and.w	r3, r3, #8
 8106f7e:	2b00      	cmp	r3, #0
 8106f80:	d020      	beq.n	8106fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106f82:	68fb      	ldr	r3, [r7, #12]
 8106f84:	f003 0308 	and.w	r3, r3, #8
 8106f88:	2b00      	cmp	r3, #0
 8106f8a:	d01b      	beq.n	8106fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	681b      	ldr	r3, [r3, #0]
 8106f90:	f06f 0208 	mvn.w	r2, #8
 8106f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	2204      	movs	r2, #4
 8106f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	69db      	ldr	r3, [r3, #28]
 8106fa2:	f003 0303 	and.w	r3, r3, #3
 8106fa6:	2b00      	cmp	r3, #0
 8106fa8:	d003      	beq.n	8106fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106faa:	6878      	ldr	r0, [r7, #4]
 8106fac:	f7fb fcd2 	bl	8102954 <HAL_TIM_IC_CaptureCallback>
 8106fb0:	e005      	b.n	8106fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106fb2:	6878      	ldr	r0, [r7, #4]
 8106fb4:	f000 fbbe 	bl	8107734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106fb8:	6878      	ldr	r0, [r7, #4]
 8106fba:	f000 fbc5 	bl	8107748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	2200      	movs	r2, #0
 8106fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8106fc4:	68bb      	ldr	r3, [r7, #8]
 8106fc6:	f003 0310 	and.w	r3, r3, #16
 8106fca:	2b00      	cmp	r3, #0
 8106fcc:	d020      	beq.n	8107010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8106fce:	68fb      	ldr	r3, [r7, #12]
 8106fd0:	f003 0310 	and.w	r3, r3, #16
 8106fd4:	2b00      	cmp	r3, #0
 8106fd6:	d01b      	beq.n	8107010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	f06f 0210 	mvn.w	r2, #16
 8106fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	2208      	movs	r2, #8
 8106fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	69db      	ldr	r3, [r3, #28]
 8106fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106ff2:	2b00      	cmp	r3, #0
 8106ff4:	d003      	beq.n	8106ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106ff6:	6878      	ldr	r0, [r7, #4]
 8106ff8:	f7fb fcac 	bl	8102954 <HAL_TIM_IC_CaptureCallback>
 8106ffc:	e005      	b.n	810700a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106ffe:	6878      	ldr	r0, [r7, #4]
 8107000:	f000 fb98 	bl	8107734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107004:	6878      	ldr	r0, [r7, #4]
 8107006:	f000 fb9f 	bl	8107748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	2200      	movs	r2, #0
 810700e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8107010:	68bb      	ldr	r3, [r7, #8]
 8107012:	f003 0301 	and.w	r3, r3, #1
 8107016:	2b00      	cmp	r3, #0
 8107018:	d00c      	beq.n	8107034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810701a:	68fb      	ldr	r3, [r7, #12]
 810701c:	f003 0301 	and.w	r3, r3, #1
 8107020:	2b00      	cmp	r3, #0
 8107022:	d007      	beq.n	8107034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	681b      	ldr	r3, [r3, #0]
 8107028:	f06f 0201 	mvn.w	r2, #1
 810702c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810702e:	6878      	ldr	r0, [r7, #4]
 8107030:	f7fb fc66 	bl	8102900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107034:	68bb      	ldr	r3, [r7, #8]
 8107036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810703a:	2b00      	cmp	r3, #0
 810703c:	d104      	bne.n	8107048 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810703e:	68bb      	ldr	r3, [r7, #8]
 8107040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107044:	2b00      	cmp	r3, #0
 8107046:	d00c      	beq.n	8107062 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107048:	68fb      	ldr	r3, [r7, #12]
 810704a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810704e:	2b00      	cmp	r3, #0
 8107050:	d007      	beq.n	8107062 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8107052:	687b      	ldr	r3, [r7, #4]
 8107054:	681b      	ldr	r3, [r3, #0]
 8107056:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810705c:	6878      	ldr	r0, [r7, #4]
 810705e:	f001 fa71 	bl	8108544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8107062:	68bb      	ldr	r3, [r7, #8]
 8107064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107068:	2b00      	cmp	r3, #0
 810706a:	d00c      	beq.n	8107086 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810706c:	68fb      	ldr	r3, [r7, #12]
 810706e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107072:	2b00      	cmp	r3, #0
 8107074:	d007      	beq.n	8107086 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	681b      	ldr	r3, [r3, #0]
 810707a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107080:	6878      	ldr	r0, [r7, #4]
 8107082:	f001 fa69 	bl	8108558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8107086:	68bb      	ldr	r3, [r7, #8]
 8107088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810708c:	2b00      	cmp	r3, #0
 810708e:	d00c      	beq.n	81070aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8107090:	68fb      	ldr	r3, [r7, #12]
 8107092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107096:	2b00      	cmp	r3, #0
 8107098:	d007      	beq.n	81070aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 810709a:	687b      	ldr	r3, [r7, #4]
 810709c:	681b      	ldr	r3, [r3, #0]
 810709e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81070a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81070a4:	6878      	ldr	r0, [r7, #4]
 81070a6:	f000 fb59 	bl	810775c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81070aa:	68bb      	ldr	r3, [r7, #8]
 81070ac:	f003 0320 	and.w	r3, r3, #32
 81070b0:	2b00      	cmp	r3, #0
 81070b2:	d00c      	beq.n	81070ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81070b4:	68fb      	ldr	r3, [r7, #12]
 81070b6:	f003 0320 	and.w	r3, r3, #32
 81070ba:	2b00      	cmp	r3, #0
 81070bc:	d007      	beq.n	81070ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	681b      	ldr	r3, [r3, #0]
 81070c2:	f06f 0220 	mvn.w	r2, #32
 81070c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81070c8:	6878      	ldr	r0, [r7, #4]
 81070ca:	f001 fa31 	bl	8108530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81070ce:	bf00      	nop
 81070d0:	3710      	adds	r7, #16
 81070d2:	46bd      	mov	sp, r7
 81070d4:	bd80      	pop	{r7, pc}

081070d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 81070d6:	b580      	push	{r7, lr}
 81070d8:	b086      	sub	sp, #24
 81070da:	af00      	add	r7, sp, #0
 81070dc:	60f8      	str	r0, [r7, #12]
 81070de:	60b9      	str	r1, [r7, #8]
 81070e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81070e2:	2300      	movs	r3, #0
 81070e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 81070e6:	68fb      	ldr	r3, [r7, #12]
 81070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81070ec:	2b01      	cmp	r3, #1
 81070ee:	d101      	bne.n	81070f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 81070f0:	2302      	movs	r3, #2
 81070f2:	e088      	b.n	8107206 <HAL_TIM_IC_ConfigChannel+0x130>
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	2201      	movs	r2, #1
 81070f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d11b      	bne.n	810713a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8107102:	68fb      	ldr	r3, [r7, #12]
 8107104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107106:	68bb      	ldr	r3, [r7, #8]
 8107108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810710a:	68bb      	ldr	r3, [r7, #8]
 810710c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810710e:	68bb      	ldr	r3, [r7, #8]
 8107110:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8107112:	f000 ff93 	bl	810803c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8107116:	68fb      	ldr	r3, [r7, #12]
 8107118:	681b      	ldr	r3, [r3, #0]
 810711a:	699a      	ldr	r2, [r3, #24]
 810711c:	68fb      	ldr	r3, [r7, #12]
 810711e:	681b      	ldr	r3, [r3, #0]
 8107120:	f022 020c 	bic.w	r2, r2, #12
 8107124:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8107126:	68fb      	ldr	r3, [r7, #12]
 8107128:	681b      	ldr	r3, [r3, #0]
 810712a:	6999      	ldr	r1, [r3, #24]
 810712c:	68bb      	ldr	r3, [r7, #8]
 810712e:	689a      	ldr	r2, [r3, #8]
 8107130:	68fb      	ldr	r3, [r7, #12]
 8107132:	681b      	ldr	r3, [r3, #0]
 8107134:	430a      	orrs	r2, r1
 8107136:	619a      	str	r2, [r3, #24]
 8107138:	e060      	b.n	81071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	2b04      	cmp	r3, #4
 810713e:	d11c      	bne.n	810717a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8107140:	68fb      	ldr	r3, [r7, #12]
 8107142:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107144:	68bb      	ldr	r3, [r7, #8]
 8107146:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107148:	68bb      	ldr	r3, [r7, #8]
 810714a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810714c:	68bb      	ldr	r3, [r7, #8]
 810714e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8107150:	f001 f817 	bl	8108182 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8107154:	68fb      	ldr	r3, [r7, #12]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	699a      	ldr	r2, [r3, #24]
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	681b      	ldr	r3, [r3, #0]
 810715e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8107162:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8107164:	68fb      	ldr	r3, [r7, #12]
 8107166:	681b      	ldr	r3, [r3, #0]
 8107168:	6999      	ldr	r1, [r3, #24]
 810716a:	68bb      	ldr	r3, [r7, #8]
 810716c:	689b      	ldr	r3, [r3, #8]
 810716e:	021a      	lsls	r2, r3, #8
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	430a      	orrs	r2, r1
 8107176:	619a      	str	r2, [r3, #24]
 8107178:	e040      	b.n	81071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	2b08      	cmp	r3, #8
 810717e:	d11b      	bne.n	81071b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8107180:	68fb      	ldr	r3, [r7, #12]
 8107182:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107184:	68bb      	ldr	r3, [r7, #8]
 8107186:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107188:	68bb      	ldr	r3, [r7, #8]
 810718a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810718c:	68bb      	ldr	r3, [r7, #8]
 810718e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8107190:	f001 f864 	bl	810825c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8107194:	68fb      	ldr	r3, [r7, #12]
 8107196:	681b      	ldr	r3, [r3, #0]
 8107198:	69da      	ldr	r2, [r3, #28]
 810719a:	68fb      	ldr	r3, [r7, #12]
 810719c:	681b      	ldr	r3, [r3, #0]
 810719e:	f022 020c 	bic.w	r2, r2, #12
 81071a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 81071a4:	68fb      	ldr	r3, [r7, #12]
 81071a6:	681b      	ldr	r3, [r3, #0]
 81071a8:	69d9      	ldr	r1, [r3, #28]
 81071aa:	68bb      	ldr	r3, [r7, #8]
 81071ac:	689a      	ldr	r2, [r3, #8]
 81071ae:	68fb      	ldr	r3, [r7, #12]
 81071b0:	681b      	ldr	r3, [r3, #0]
 81071b2:	430a      	orrs	r2, r1
 81071b4:	61da      	str	r2, [r3, #28]
 81071b6:	e021      	b.n	81071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 81071b8:	687b      	ldr	r3, [r7, #4]
 81071ba:	2b0c      	cmp	r3, #12
 81071bc:	d11c      	bne.n	81071f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 81071be:	68fb      	ldr	r3, [r7, #12]
 81071c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81071c2:	68bb      	ldr	r3, [r7, #8]
 81071c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81071c6:	68bb      	ldr	r3, [r7, #8]
 81071c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81071ca:	68bb      	ldr	r3, [r7, #8]
 81071cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 81071ce:	f001 f881 	bl	81082d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	681b      	ldr	r3, [r3, #0]
 81071d6:	69da      	ldr	r2, [r3, #28]
 81071d8:	68fb      	ldr	r3, [r7, #12]
 81071da:	681b      	ldr	r3, [r3, #0]
 81071dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 81071e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 81071e2:	68fb      	ldr	r3, [r7, #12]
 81071e4:	681b      	ldr	r3, [r3, #0]
 81071e6:	69d9      	ldr	r1, [r3, #28]
 81071e8:	68bb      	ldr	r3, [r7, #8]
 81071ea:	689b      	ldr	r3, [r3, #8]
 81071ec:	021a      	lsls	r2, r3, #8
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	681b      	ldr	r3, [r3, #0]
 81071f2:	430a      	orrs	r2, r1
 81071f4:	61da      	str	r2, [r3, #28]
 81071f6:	e001      	b.n	81071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 81071f8:	2301      	movs	r3, #1
 81071fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 81071fc:	68fb      	ldr	r3, [r7, #12]
 81071fe:	2200      	movs	r2, #0
 8107200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8107204:	7dfb      	ldrb	r3, [r7, #23]
}
 8107206:	4618      	mov	r0, r3
 8107208:	3718      	adds	r7, #24
 810720a:	46bd      	mov	sp, r7
 810720c:	bd80      	pop	{r7, pc}
	...

08107210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107210:	b580      	push	{r7, lr}
 8107212:	b086      	sub	sp, #24
 8107214:	af00      	add	r7, sp, #0
 8107216:	60f8      	str	r0, [r7, #12]
 8107218:	60b9      	str	r1, [r7, #8]
 810721a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810721c:	2300      	movs	r3, #0
 810721e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107220:	68fb      	ldr	r3, [r7, #12]
 8107222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107226:	2b01      	cmp	r3, #1
 8107228:	d101      	bne.n	810722e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810722a:	2302      	movs	r3, #2
 810722c:	e0ff      	b.n	810742e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	2201      	movs	r2, #1
 8107232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	2b14      	cmp	r3, #20
 810723a:	f200 80f0 	bhi.w	810741e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810723e:	a201      	add	r2, pc, #4	@ (adr r2, 8107244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107244:	08107299 	.word	0x08107299
 8107248:	0810741f 	.word	0x0810741f
 810724c:	0810741f 	.word	0x0810741f
 8107250:	0810741f 	.word	0x0810741f
 8107254:	081072d9 	.word	0x081072d9
 8107258:	0810741f 	.word	0x0810741f
 810725c:	0810741f 	.word	0x0810741f
 8107260:	0810741f 	.word	0x0810741f
 8107264:	0810731b 	.word	0x0810731b
 8107268:	0810741f 	.word	0x0810741f
 810726c:	0810741f 	.word	0x0810741f
 8107270:	0810741f 	.word	0x0810741f
 8107274:	0810735b 	.word	0x0810735b
 8107278:	0810741f 	.word	0x0810741f
 810727c:	0810741f 	.word	0x0810741f
 8107280:	0810741f 	.word	0x0810741f
 8107284:	0810739d 	.word	0x0810739d
 8107288:	0810741f 	.word	0x0810741f
 810728c:	0810741f 	.word	0x0810741f
 8107290:	0810741f 	.word	0x0810741f
 8107294:	081073dd 	.word	0x081073dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	68b9      	ldr	r1, [r7, #8]
 810729e:	4618      	mov	r0, r3
 81072a0:	f000 fb0c 	bl	81078bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81072a4:	68fb      	ldr	r3, [r7, #12]
 81072a6:	681b      	ldr	r3, [r3, #0]
 81072a8:	699a      	ldr	r2, [r3, #24]
 81072aa:	68fb      	ldr	r3, [r7, #12]
 81072ac:	681b      	ldr	r3, [r3, #0]
 81072ae:	f042 0208 	orr.w	r2, r2, #8
 81072b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81072b4:	68fb      	ldr	r3, [r7, #12]
 81072b6:	681b      	ldr	r3, [r3, #0]
 81072b8:	699a      	ldr	r2, [r3, #24]
 81072ba:	68fb      	ldr	r3, [r7, #12]
 81072bc:	681b      	ldr	r3, [r3, #0]
 81072be:	f022 0204 	bic.w	r2, r2, #4
 81072c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81072c4:	68fb      	ldr	r3, [r7, #12]
 81072c6:	681b      	ldr	r3, [r3, #0]
 81072c8:	6999      	ldr	r1, [r3, #24]
 81072ca:	68bb      	ldr	r3, [r7, #8]
 81072cc:	691a      	ldr	r2, [r3, #16]
 81072ce:	68fb      	ldr	r3, [r7, #12]
 81072d0:	681b      	ldr	r3, [r3, #0]
 81072d2:	430a      	orrs	r2, r1
 81072d4:	619a      	str	r2, [r3, #24]
      break;
 81072d6:	e0a5      	b.n	8107424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	68b9      	ldr	r1, [r7, #8]
 81072de:	4618      	mov	r0, r3
 81072e0:	f000 fb7c 	bl	81079dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81072e4:	68fb      	ldr	r3, [r7, #12]
 81072e6:	681b      	ldr	r3, [r3, #0]
 81072e8:	699a      	ldr	r2, [r3, #24]
 81072ea:	68fb      	ldr	r3, [r7, #12]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81072f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	681b      	ldr	r3, [r3, #0]
 81072f8:	699a      	ldr	r2, [r3, #24]
 81072fa:	68fb      	ldr	r3, [r7, #12]
 81072fc:	681b      	ldr	r3, [r3, #0]
 81072fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107304:	68fb      	ldr	r3, [r7, #12]
 8107306:	681b      	ldr	r3, [r3, #0]
 8107308:	6999      	ldr	r1, [r3, #24]
 810730a:	68bb      	ldr	r3, [r7, #8]
 810730c:	691b      	ldr	r3, [r3, #16]
 810730e:	021a      	lsls	r2, r3, #8
 8107310:	68fb      	ldr	r3, [r7, #12]
 8107312:	681b      	ldr	r3, [r3, #0]
 8107314:	430a      	orrs	r2, r1
 8107316:	619a      	str	r2, [r3, #24]
      break;
 8107318:	e084      	b.n	8107424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810731a:	68fb      	ldr	r3, [r7, #12]
 810731c:	681b      	ldr	r3, [r3, #0]
 810731e:	68b9      	ldr	r1, [r7, #8]
 8107320:	4618      	mov	r0, r3
 8107322:	f000 fbe5 	bl	8107af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107326:	68fb      	ldr	r3, [r7, #12]
 8107328:	681b      	ldr	r3, [r3, #0]
 810732a:	69da      	ldr	r2, [r3, #28]
 810732c:	68fb      	ldr	r3, [r7, #12]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	f042 0208 	orr.w	r2, r2, #8
 8107334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	69da      	ldr	r2, [r3, #28]
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	681b      	ldr	r3, [r3, #0]
 8107340:	f022 0204 	bic.w	r2, r2, #4
 8107344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8107346:	68fb      	ldr	r3, [r7, #12]
 8107348:	681b      	ldr	r3, [r3, #0]
 810734a:	69d9      	ldr	r1, [r3, #28]
 810734c:	68bb      	ldr	r3, [r7, #8]
 810734e:	691a      	ldr	r2, [r3, #16]
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	681b      	ldr	r3, [r3, #0]
 8107354:	430a      	orrs	r2, r1
 8107356:	61da      	str	r2, [r3, #28]
      break;
 8107358:	e064      	b.n	8107424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	68b9      	ldr	r1, [r7, #8]
 8107360:	4618      	mov	r0, r3
 8107362:	f000 fc4d 	bl	8107c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	681b      	ldr	r3, [r3, #0]
 810736a:	69da      	ldr	r2, [r3, #28]
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	681b      	ldr	r3, [r3, #0]
 8107370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8107376:	68fb      	ldr	r3, [r7, #12]
 8107378:	681b      	ldr	r3, [r3, #0]
 810737a:	69da      	ldr	r2, [r3, #28]
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	69d9      	ldr	r1, [r3, #28]
 810738c:	68bb      	ldr	r3, [r7, #8]
 810738e:	691b      	ldr	r3, [r3, #16]
 8107390:	021a      	lsls	r2, r3, #8
 8107392:	68fb      	ldr	r3, [r7, #12]
 8107394:	681b      	ldr	r3, [r3, #0]
 8107396:	430a      	orrs	r2, r1
 8107398:	61da      	str	r2, [r3, #28]
      break;
 810739a:	e043      	b.n	8107424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810739c:	68fb      	ldr	r3, [r7, #12]
 810739e:	681b      	ldr	r3, [r3, #0]
 81073a0:	68b9      	ldr	r1, [r7, #8]
 81073a2:	4618      	mov	r0, r3
 81073a4:	f000 fc96 	bl	8107cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81073a8:	68fb      	ldr	r3, [r7, #12]
 81073aa:	681b      	ldr	r3, [r3, #0]
 81073ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81073ae:	68fb      	ldr	r3, [r7, #12]
 81073b0:	681b      	ldr	r3, [r3, #0]
 81073b2:	f042 0208 	orr.w	r2, r2, #8
 81073b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81073b8:	68fb      	ldr	r3, [r7, #12]
 81073ba:	681b      	ldr	r3, [r3, #0]
 81073bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81073be:	68fb      	ldr	r3, [r7, #12]
 81073c0:	681b      	ldr	r3, [r3, #0]
 81073c2:	f022 0204 	bic.w	r2, r2, #4
 81073c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81073c8:	68fb      	ldr	r3, [r7, #12]
 81073ca:	681b      	ldr	r3, [r3, #0]
 81073cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81073ce:	68bb      	ldr	r3, [r7, #8]
 81073d0:	691a      	ldr	r2, [r3, #16]
 81073d2:	68fb      	ldr	r3, [r7, #12]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	430a      	orrs	r2, r1
 81073d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81073da:	e023      	b.n	8107424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81073dc:	68fb      	ldr	r3, [r7, #12]
 81073de:	681b      	ldr	r3, [r3, #0]
 81073e0:	68b9      	ldr	r1, [r7, #8]
 81073e2:	4618      	mov	r0, r3
 81073e4:	f000 fcda 	bl	8107d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81073e8:	68fb      	ldr	r3, [r7, #12]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81073ee:	68fb      	ldr	r3, [r7, #12]
 81073f0:	681b      	ldr	r3, [r3, #0]
 81073f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81073f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	681b      	ldr	r3, [r3, #0]
 81073fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	681b      	ldr	r3, [r3, #0]
 8107402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810740e:	68bb      	ldr	r3, [r7, #8]
 8107410:	691b      	ldr	r3, [r3, #16]
 8107412:	021a      	lsls	r2, r3, #8
 8107414:	68fb      	ldr	r3, [r7, #12]
 8107416:	681b      	ldr	r3, [r3, #0]
 8107418:	430a      	orrs	r2, r1
 810741a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810741c:	e002      	b.n	8107424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810741e:	2301      	movs	r3, #1
 8107420:	75fb      	strb	r3, [r7, #23]
      break;
 8107422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	2200      	movs	r2, #0
 8107428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810742c:	7dfb      	ldrb	r3, [r7, #23]
}
 810742e:	4618      	mov	r0, r3
 8107430:	3718      	adds	r7, #24
 8107432:	46bd      	mov	sp, r7
 8107434:	bd80      	pop	{r7, pc}
 8107436:	bf00      	nop

08107438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8107438:	b580      	push	{r7, lr}
 810743a:	b084      	sub	sp, #16
 810743c:	af00      	add	r7, sp, #0
 810743e:	6078      	str	r0, [r7, #4]
 8107440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8107442:	2300      	movs	r3, #0
 8107444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8107446:	687b      	ldr	r3, [r7, #4]
 8107448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810744c:	2b01      	cmp	r3, #1
 810744e:	d101      	bne.n	8107454 <HAL_TIM_ConfigClockSource+0x1c>
 8107450:	2302      	movs	r3, #2
 8107452:	e0de      	b.n	8107612 <HAL_TIM_ConfigClockSource+0x1da>
 8107454:	687b      	ldr	r3, [r7, #4]
 8107456:	2201      	movs	r2, #1
 8107458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810745c:	687b      	ldr	r3, [r7, #4]
 810745e:	2202      	movs	r2, #2
 8107460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8107464:	687b      	ldr	r3, [r7, #4]
 8107466:	681b      	ldr	r3, [r3, #0]
 8107468:	689b      	ldr	r3, [r3, #8]
 810746a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 810746c:	68bb      	ldr	r3, [r7, #8]
 810746e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8107472:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8107476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107478:	68bb      	ldr	r3, [r7, #8]
 810747a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810747e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	681b      	ldr	r3, [r3, #0]
 8107484:	68ba      	ldr	r2, [r7, #8]
 8107486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8107488:	683b      	ldr	r3, [r7, #0]
 810748a:	681b      	ldr	r3, [r3, #0]
 810748c:	4a63      	ldr	r2, [pc, #396]	@ (810761c <HAL_TIM_ConfigClockSource+0x1e4>)
 810748e:	4293      	cmp	r3, r2
 8107490:	f000 80a9 	beq.w	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8107494:	4a61      	ldr	r2, [pc, #388]	@ (810761c <HAL_TIM_ConfigClockSource+0x1e4>)
 8107496:	4293      	cmp	r3, r2
 8107498:	f200 80ae 	bhi.w	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 810749c:	4a60      	ldr	r2, [pc, #384]	@ (8107620 <HAL_TIM_ConfigClockSource+0x1e8>)
 810749e:	4293      	cmp	r3, r2
 81074a0:	f000 80a1 	beq.w	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 81074a4:	4a5e      	ldr	r2, [pc, #376]	@ (8107620 <HAL_TIM_ConfigClockSource+0x1e8>)
 81074a6:	4293      	cmp	r3, r2
 81074a8:	f200 80a6 	bhi.w	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 81074ac:	4a5d      	ldr	r2, [pc, #372]	@ (8107624 <HAL_TIM_ConfigClockSource+0x1ec>)
 81074ae:	4293      	cmp	r3, r2
 81074b0:	f000 8099 	beq.w	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 81074b4:	4a5b      	ldr	r2, [pc, #364]	@ (8107624 <HAL_TIM_ConfigClockSource+0x1ec>)
 81074b6:	4293      	cmp	r3, r2
 81074b8:	f200 809e 	bhi.w	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 81074bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81074c0:	f000 8091 	beq.w	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 81074c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81074c8:	f200 8096 	bhi.w	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 81074cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81074d0:	f000 8089 	beq.w	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 81074d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81074d8:	f200 808e 	bhi.w	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 81074dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81074e0:	d03e      	beq.n	8107560 <HAL_TIM_ConfigClockSource+0x128>
 81074e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81074e6:	f200 8087 	bhi.w	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 81074ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81074ee:	f000 8086 	beq.w	81075fe <HAL_TIM_ConfigClockSource+0x1c6>
 81074f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81074f6:	d87f      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 81074f8:	2b70      	cmp	r3, #112	@ 0x70
 81074fa:	d01a      	beq.n	8107532 <HAL_TIM_ConfigClockSource+0xfa>
 81074fc:	2b70      	cmp	r3, #112	@ 0x70
 81074fe:	d87b      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8107500:	2b60      	cmp	r3, #96	@ 0x60
 8107502:	d050      	beq.n	81075a6 <HAL_TIM_ConfigClockSource+0x16e>
 8107504:	2b60      	cmp	r3, #96	@ 0x60
 8107506:	d877      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8107508:	2b50      	cmp	r3, #80	@ 0x50
 810750a:	d03c      	beq.n	8107586 <HAL_TIM_ConfigClockSource+0x14e>
 810750c:	2b50      	cmp	r3, #80	@ 0x50
 810750e:	d873      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8107510:	2b40      	cmp	r3, #64	@ 0x40
 8107512:	d058      	beq.n	81075c6 <HAL_TIM_ConfigClockSource+0x18e>
 8107514:	2b40      	cmp	r3, #64	@ 0x40
 8107516:	d86f      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8107518:	2b30      	cmp	r3, #48	@ 0x30
 810751a:	d064      	beq.n	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 810751c:	2b30      	cmp	r3, #48	@ 0x30
 810751e:	d86b      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8107520:	2b20      	cmp	r3, #32
 8107522:	d060      	beq.n	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8107524:	2b20      	cmp	r3, #32
 8107526:	d867      	bhi.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
 8107528:	2b00      	cmp	r3, #0
 810752a:	d05c      	beq.n	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 810752c:	2b10      	cmp	r3, #16
 810752e:	d05a      	beq.n	81075e6 <HAL_TIM_ConfigClockSource+0x1ae>
 8107530:	e062      	b.n	81075f8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8107536:	683b      	ldr	r3, [r7, #0]
 8107538:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810753a:	683b      	ldr	r3, [r7, #0]
 810753c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810753e:	683b      	ldr	r3, [r7, #0]
 8107540:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8107542:	f000 ff21 	bl	8108388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	681b      	ldr	r3, [r3, #0]
 810754a:	689b      	ldr	r3, [r3, #8]
 810754c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810754e:	68bb      	ldr	r3, [r7, #8]
 8107550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8107554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8107556:	687b      	ldr	r3, [r7, #4]
 8107558:	681b      	ldr	r3, [r3, #0]
 810755a:	68ba      	ldr	r2, [r7, #8]
 810755c:	609a      	str	r2, [r3, #8]
      break;
 810755e:	e04f      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8107564:	683b      	ldr	r3, [r7, #0]
 8107566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8107568:	683b      	ldr	r3, [r7, #0]
 810756a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810756c:	683b      	ldr	r3, [r7, #0]
 810756e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8107570:	f000 ff0a 	bl	8108388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8107574:	687b      	ldr	r3, [r7, #4]
 8107576:	681b      	ldr	r3, [r3, #0]
 8107578:	689a      	ldr	r2, [r3, #8]
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	681b      	ldr	r3, [r3, #0]
 810757e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8107582:	609a      	str	r2, [r3, #8]
      break;
 8107584:	e03c      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810758a:	683b      	ldr	r3, [r7, #0]
 810758c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810758e:	683b      	ldr	r3, [r7, #0]
 8107590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107592:	461a      	mov	r2, r3
 8107594:	f000 fdc6 	bl	8108124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	681b      	ldr	r3, [r3, #0]
 810759c:	2150      	movs	r1, #80	@ 0x50
 810759e:	4618      	mov	r0, r3
 81075a0:	f000 fed5 	bl	810834e <TIM_ITRx_SetConfig>
      break;
 81075a4:	e02c      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81075a6:	687b      	ldr	r3, [r7, #4]
 81075a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81075aa:	683b      	ldr	r3, [r7, #0]
 81075ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81075ae:	683b      	ldr	r3, [r7, #0]
 81075b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 81075b2:	461a      	mov	r2, r3
 81075b4:	f000 fe22 	bl	81081fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	681b      	ldr	r3, [r3, #0]
 81075bc:	2160      	movs	r1, #96	@ 0x60
 81075be:	4618      	mov	r0, r3
 81075c0:	f000 fec5 	bl	810834e <TIM_ITRx_SetConfig>
      break;
 81075c4:	e01c      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81075ca:	683b      	ldr	r3, [r7, #0]
 81075cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81075ce:	683b      	ldr	r3, [r7, #0]
 81075d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81075d2:	461a      	mov	r2, r3
 81075d4:	f000 fda6 	bl	8108124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	2140      	movs	r1, #64	@ 0x40
 81075de:	4618      	mov	r0, r3
 81075e0:	f000 feb5 	bl	810834e <TIM_ITRx_SetConfig>
      break;
 81075e4:	e00c      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81075e6:	687b      	ldr	r3, [r7, #4]
 81075e8:	681a      	ldr	r2, [r3, #0]
 81075ea:	683b      	ldr	r3, [r7, #0]
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	4619      	mov	r1, r3
 81075f0:	4610      	mov	r0, r2
 81075f2:	f000 feac 	bl	810834e <TIM_ITRx_SetConfig>
      break;
 81075f6:	e003      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81075f8:	2301      	movs	r3, #1
 81075fa:	73fb      	strb	r3, [r7, #15]
      break;
 81075fc:	e000      	b.n	8107600 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81075fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	2201      	movs	r2, #1
 8107604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	2200      	movs	r2, #0
 810760c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8107610:	7bfb      	ldrb	r3, [r7, #15]
}
 8107612:	4618      	mov	r0, r3
 8107614:	3710      	adds	r7, #16
 8107616:	46bd      	mov	sp, r7
 8107618:	bd80      	pop	{r7, pc}
 810761a:	bf00      	nop
 810761c:	00100040 	.word	0x00100040
 8107620:	00100030 	.word	0x00100030
 8107624:	00100020 	.word	0x00100020

08107628 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107628:	b580      	push	{r7, lr}
 810762a:	b082      	sub	sp, #8
 810762c:	af00      	add	r7, sp, #0
 810762e:	6078      	str	r0, [r7, #4]
 8107630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8107632:	687b      	ldr	r3, [r7, #4]
 8107634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107638:	2b01      	cmp	r3, #1
 810763a:	d101      	bne.n	8107640 <HAL_TIM_SlaveConfigSynchro+0x18>
 810763c:	2302      	movs	r3, #2
 810763e:	e031      	b.n	81076a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	2201      	movs	r2, #1
 8107644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	2202      	movs	r2, #2
 810764c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8107650:	6839      	ldr	r1, [r7, #0]
 8107652:	6878      	ldr	r0, [r7, #4]
 8107654:	f000 fc08 	bl	8107e68 <TIM_SlaveTimer_SetConfig>
 8107658:	4603      	mov	r3, r0
 810765a:	2b00      	cmp	r3, #0
 810765c:	d009      	beq.n	8107672 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	2201      	movs	r2, #1
 8107662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	2200      	movs	r2, #0
 810766a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 810766e:	2301      	movs	r3, #1
 8107670:	e018      	b.n	81076a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	681b      	ldr	r3, [r3, #0]
 8107676:	68da      	ldr	r2, [r3, #12]
 8107678:	687b      	ldr	r3, [r7, #4]
 810767a:	681b      	ldr	r3, [r3, #0]
 810767c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8107680:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8107682:	687b      	ldr	r3, [r7, #4]
 8107684:	681b      	ldr	r3, [r3, #0]
 8107686:	68da      	ldr	r2, [r3, #12]
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	681b      	ldr	r3, [r3, #0]
 810768c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8107690:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8107692:	687b      	ldr	r3, [r7, #4]
 8107694:	2201      	movs	r2, #1
 8107696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810769a:	687b      	ldr	r3, [r7, #4]
 810769c:	2200      	movs	r2, #0
 810769e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81076a2:	2300      	movs	r3, #0
}
 81076a4:	4618      	mov	r0, r3
 81076a6:	3708      	adds	r7, #8
 81076a8:	46bd      	mov	sp, r7
 81076aa:	bd80      	pop	{r7, pc}

081076ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81076ac:	b480      	push	{r7}
 81076ae:	b085      	sub	sp, #20
 81076b0:	af00      	add	r7, sp, #0
 81076b2:	6078      	str	r0, [r7, #4]
 81076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 81076b6:	2300      	movs	r3, #0
 81076b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 81076ba:	683b      	ldr	r3, [r7, #0]
 81076bc:	2b0c      	cmp	r3, #12
 81076be:	d831      	bhi.n	8107724 <HAL_TIM_ReadCapturedValue+0x78>
 81076c0:	a201      	add	r2, pc, #4	@ (adr r2, 81076c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 81076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076c6:	bf00      	nop
 81076c8:	081076fd 	.word	0x081076fd
 81076cc:	08107725 	.word	0x08107725
 81076d0:	08107725 	.word	0x08107725
 81076d4:	08107725 	.word	0x08107725
 81076d8:	08107707 	.word	0x08107707
 81076dc:	08107725 	.word	0x08107725
 81076e0:	08107725 	.word	0x08107725
 81076e4:	08107725 	.word	0x08107725
 81076e8:	08107711 	.word	0x08107711
 81076ec:	08107725 	.word	0x08107725
 81076f0:	08107725 	.word	0x08107725
 81076f4:	08107725 	.word	0x08107725
 81076f8:	0810771b 	.word	0x0810771b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 81076fc:	687b      	ldr	r3, [r7, #4]
 81076fe:	681b      	ldr	r3, [r3, #0]
 8107700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107702:	60fb      	str	r3, [r7, #12]

      break;
 8107704:	e00f      	b.n	8107726 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810770c:	60fb      	str	r3, [r7, #12]

      break;
 810770e:	e00a      	b.n	8107726 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8107710:	687b      	ldr	r3, [r7, #4]
 8107712:	681b      	ldr	r3, [r3, #0]
 8107714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107716:	60fb      	str	r3, [r7, #12]

      break;
 8107718:	e005      	b.n	8107726 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 810771a:	687b      	ldr	r3, [r7, #4]
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107720:	60fb      	str	r3, [r7, #12]

      break;
 8107722:	e000      	b.n	8107726 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8107724:	bf00      	nop
  }

  return tmpreg;
 8107726:	68fb      	ldr	r3, [r7, #12]
}
 8107728:	4618      	mov	r0, r3
 810772a:	3714      	adds	r7, #20
 810772c:	46bd      	mov	sp, r7
 810772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107732:	4770      	bx	lr

08107734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107734:	b480      	push	{r7}
 8107736:	b083      	sub	sp, #12
 8107738:	af00      	add	r7, sp, #0
 810773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810773c:	bf00      	nop
 810773e:	370c      	adds	r7, #12
 8107740:	46bd      	mov	sp, r7
 8107742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107746:	4770      	bx	lr

08107748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107748:	b480      	push	{r7}
 810774a:	b083      	sub	sp, #12
 810774c:	af00      	add	r7, sp, #0
 810774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107750:	bf00      	nop
 8107752:	370c      	adds	r7, #12
 8107754:	46bd      	mov	sp, r7
 8107756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810775a:	4770      	bx	lr

0810775c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810775c:	b480      	push	{r7}
 810775e:	b083      	sub	sp, #12
 8107760:	af00      	add	r7, sp, #0
 8107762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107764:	bf00      	nop
 8107766:	370c      	adds	r7, #12
 8107768:	46bd      	mov	sp, r7
 810776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810776e:	4770      	bx	lr

08107770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107770:	b480      	push	{r7}
 8107772:	b085      	sub	sp, #20
 8107774:	af00      	add	r7, sp, #0
 8107776:	6078      	str	r0, [r7, #4]
 8107778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107780:	687b      	ldr	r3, [r7, #4]
 8107782:	4a46      	ldr	r2, [pc, #280]	@ (810789c <TIM_Base_SetConfig+0x12c>)
 8107784:	4293      	cmp	r3, r2
 8107786:	d013      	beq.n	81077b0 <TIM_Base_SetConfig+0x40>
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810778e:	d00f      	beq.n	81077b0 <TIM_Base_SetConfig+0x40>
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	4a43      	ldr	r2, [pc, #268]	@ (81078a0 <TIM_Base_SetConfig+0x130>)
 8107794:	4293      	cmp	r3, r2
 8107796:	d00b      	beq.n	81077b0 <TIM_Base_SetConfig+0x40>
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	4a42      	ldr	r2, [pc, #264]	@ (81078a4 <TIM_Base_SetConfig+0x134>)
 810779c:	4293      	cmp	r3, r2
 810779e:	d007      	beq.n	81077b0 <TIM_Base_SetConfig+0x40>
 81077a0:	687b      	ldr	r3, [r7, #4]
 81077a2:	4a41      	ldr	r2, [pc, #260]	@ (81078a8 <TIM_Base_SetConfig+0x138>)
 81077a4:	4293      	cmp	r3, r2
 81077a6:	d003      	beq.n	81077b0 <TIM_Base_SetConfig+0x40>
 81077a8:	687b      	ldr	r3, [r7, #4]
 81077aa:	4a40      	ldr	r2, [pc, #256]	@ (81078ac <TIM_Base_SetConfig+0x13c>)
 81077ac:	4293      	cmp	r3, r2
 81077ae:	d108      	bne.n	81077c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81077b0:	68fb      	ldr	r3, [r7, #12]
 81077b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81077b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81077b8:	683b      	ldr	r3, [r7, #0]
 81077ba:	685b      	ldr	r3, [r3, #4]
 81077bc:	68fa      	ldr	r2, [r7, #12]
 81077be:	4313      	orrs	r3, r2
 81077c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	4a35      	ldr	r2, [pc, #212]	@ (810789c <TIM_Base_SetConfig+0x12c>)
 81077c6:	4293      	cmp	r3, r2
 81077c8:	d01f      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81077d0:	d01b      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	4a32      	ldr	r2, [pc, #200]	@ (81078a0 <TIM_Base_SetConfig+0x130>)
 81077d6:	4293      	cmp	r3, r2
 81077d8:	d017      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	4a31      	ldr	r2, [pc, #196]	@ (81078a4 <TIM_Base_SetConfig+0x134>)
 81077de:	4293      	cmp	r3, r2
 81077e0:	d013      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	4a30      	ldr	r2, [pc, #192]	@ (81078a8 <TIM_Base_SetConfig+0x138>)
 81077e6:	4293      	cmp	r3, r2
 81077e8:	d00f      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077ea:	687b      	ldr	r3, [r7, #4]
 81077ec:	4a2f      	ldr	r2, [pc, #188]	@ (81078ac <TIM_Base_SetConfig+0x13c>)
 81077ee:	4293      	cmp	r3, r2
 81077f0:	d00b      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	4a2e      	ldr	r2, [pc, #184]	@ (81078b0 <TIM_Base_SetConfig+0x140>)
 81077f6:	4293      	cmp	r3, r2
 81077f8:	d007      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 81077fa:	687b      	ldr	r3, [r7, #4]
 81077fc:	4a2d      	ldr	r2, [pc, #180]	@ (81078b4 <TIM_Base_SetConfig+0x144>)
 81077fe:	4293      	cmp	r3, r2
 8107800:	d003      	beq.n	810780a <TIM_Base_SetConfig+0x9a>
 8107802:	687b      	ldr	r3, [r7, #4]
 8107804:	4a2c      	ldr	r2, [pc, #176]	@ (81078b8 <TIM_Base_SetConfig+0x148>)
 8107806:	4293      	cmp	r3, r2
 8107808:	d108      	bne.n	810781c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810780a:	68fb      	ldr	r3, [r7, #12]
 810780c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107812:	683b      	ldr	r3, [r7, #0]
 8107814:	68db      	ldr	r3, [r3, #12]
 8107816:	68fa      	ldr	r2, [r7, #12]
 8107818:	4313      	orrs	r3, r2
 810781a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810781c:	68fb      	ldr	r3, [r7, #12]
 810781e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8107822:	683b      	ldr	r3, [r7, #0]
 8107824:	695b      	ldr	r3, [r3, #20]
 8107826:	4313      	orrs	r3, r2
 8107828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	68fa      	ldr	r2, [r7, #12]
 810782e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107830:	683b      	ldr	r3, [r7, #0]
 8107832:	689a      	ldr	r2, [r3, #8]
 8107834:	687b      	ldr	r3, [r7, #4]
 8107836:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107838:	683b      	ldr	r3, [r7, #0]
 810783a:	681a      	ldr	r2, [r3, #0]
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	4a16      	ldr	r2, [pc, #88]	@ (810789c <TIM_Base_SetConfig+0x12c>)
 8107844:	4293      	cmp	r3, r2
 8107846:	d00f      	beq.n	8107868 <TIM_Base_SetConfig+0xf8>
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	4a18      	ldr	r2, [pc, #96]	@ (81078ac <TIM_Base_SetConfig+0x13c>)
 810784c:	4293      	cmp	r3, r2
 810784e:	d00b      	beq.n	8107868 <TIM_Base_SetConfig+0xf8>
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	4a17      	ldr	r2, [pc, #92]	@ (81078b0 <TIM_Base_SetConfig+0x140>)
 8107854:	4293      	cmp	r3, r2
 8107856:	d007      	beq.n	8107868 <TIM_Base_SetConfig+0xf8>
 8107858:	687b      	ldr	r3, [r7, #4]
 810785a:	4a16      	ldr	r2, [pc, #88]	@ (81078b4 <TIM_Base_SetConfig+0x144>)
 810785c:	4293      	cmp	r3, r2
 810785e:	d003      	beq.n	8107868 <TIM_Base_SetConfig+0xf8>
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	4a15      	ldr	r2, [pc, #84]	@ (81078b8 <TIM_Base_SetConfig+0x148>)
 8107864:	4293      	cmp	r3, r2
 8107866:	d103      	bne.n	8107870 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107868:	683b      	ldr	r3, [r7, #0]
 810786a:	691a      	ldr	r2, [r3, #16]
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107870:	687b      	ldr	r3, [r7, #4]
 8107872:	2201      	movs	r2, #1
 8107874:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8107876:	687b      	ldr	r3, [r7, #4]
 8107878:	691b      	ldr	r3, [r3, #16]
 810787a:	f003 0301 	and.w	r3, r3, #1
 810787e:	2b01      	cmp	r3, #1
 8107880:	d105      	bne.n	810788e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	691b      	ldr	r3, [r3, #16]
 8107886:	f023 0201 	bic.w	r2, r3, #1
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	611a      	str	r2, [r3, #16]
  }
}
 810788e:	bf00      	nop
 8107890:	3714      	adds	r7, #20
 8107892:	46bd      	mov	sp, r7
 8107894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107898:	4770      	bx	lr
 810789a:	bf00      	nop
 810789c:	40010000 	.word	0x40010000
 81078a0:	40000400 	.word	0x40000400
 81078a4:	40000800 	.word	0x40000800
 81078a8:	40000c00 	.word	0x40000c00
 81078ac:	40010400 	.word	0x40010400
 81078b0:	40014000 	.word	0x40014000
 81078b4:	40014400 	.word	0x40014400
 81078b8:	40014800 	.word	0x40014800

081078bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81078bc:	b480      	push	{r7}
 81078be:	b087      	sub	sp, #28
 81078c0:	af00      	add	r7, sp, #0
 81078c2:	6078      	str	r0, [r7, #4]
 81078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81078c6:	687b      	ldr	r3, [r7, #4]
 81078c8:	6a1b      	ldr	r3, [r3, #32]
 81078ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81078cc:	687b      	ldr	r3, [r7, #4]
 81078ce:	6a1b      	ldr	r3, [r3, #32]
 81078d0:	f023 0201 	bic.w	r2, r3, #1
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	685b      	ldr	r3, [r3, #4]
 81078dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	699b      	ldr	r3, [r3, #24]
 81078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81078e4:	68fb      	ldr	r3, [r7, #12]
 81078e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81078ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81078f0:	68fb      	ldr	r3, [r7, #12]
 81078f2:	f023 0303 	bic.w	r3, r3, #3
 81078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81078f8:	683b      	ldr	r3, [r7, #0]
 81078fa:	681b      	ldr	r3, [r3, #0]
 81078fc:	68fa      	ldr	r2, [r7, #12]
 81078fe:	4313      	orrs	r3, r2
 8107900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107902:	697b      	ldr	r3, [r7, #20]
 8107904:	f023 0302 	bic.w	r3, r3, #2
 8107908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810790a:	683b      	ldr	r3, [r7, #0]
 810790c:	689b      	ldr	r3, [r3, #8]
 810790e:	697a      	ldr	r2, [r7, #20]
 8107910:	4313      	orrs	r3, r2
 8107912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	4a2c      	ldr	r2, [pc, #176]	@ (81079c8 <TIM_OC1_SetConfig+0x10c>)
 8107918:	4293      	cmp	r3, r2
 810791a:	d00f      	beq.n	810793c <TIM_OC1_SetConfig+0x80>
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	4a2b      	ldr	r2, [pc, #172]	@ (81079cc <TIM_OC1_SetConfig+0x110>)
 8107920:	4293      	cmp	r3, r2
 8107922:	d00b      	beq.n	810793c <TIM_OC1_SetConfig+0x80>
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	4a2a      	ldr	r2, [pc, #168]	@ (81079d0 <TIM_OC1_SetConfig+0x114>)
 8107928:	4293      	cmp	r3, r2
 810792a:	d007      	beq.n	810793c <TIM_OC1_SetConfig+0x80>
 810792c:	687b      	ldr	r3, [r7, #4]
 810792e:	4a29      	ldr	r2, [pc, #164]	@ (81079d4 <TIM_OC1_SetConfig+0x118>)
 8107930:	4293      	cmp	r3, r2
 8107932:	d003      	beq.n	810793c <TIM_OC1_SetConfig+0x80>
 8107934:	687b      	ldr	r3, [r7, #4]
 8107936:	4a28      	ldr	r2, [pc, #160]	@ (81079d8 <TIM_OC1_SetConfig+0x11c>)
 8107938:	4293      	cmp	r3, r2
 810793a:	d10c      	bne.n	8107956 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810793c:	697b      	ldr	r3, [r7, #20]
 810793e:	f023 0308 	bic.w	r3, r3, #8
 8107942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107944:	683b      	ldr	r3, [r7, #0]
 8107946:	68db      	ldr	r3, [r3, #12]
 8107948:	697a      	ldr	r2, [r7, #20]
 810794a:	4313      	orrs	r3, r2
 810794c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810794e:	697b      	ldr	r3, [r7, #20]
 8107950:	f023 0304 	bic.w	r3, r3, #4
 8107954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107956:	687b      	ldr	r3, [r7, #4]
 8107958:	4a1b      	ldr	r2, [pc, #108]	@ (81079c8 <TIM_OC1_SetConfig+0x10c>)
 810795a:	4293      	cmp	r3, r2
 810795c:	d00f      	beq.n	810797e <TIM_OC1_SetConfig+0xc2>
 810795e:	687b      	ldr	r3, [r7, #4]
 8107960:	4a1a      	ldr	r2, [pc, #104]	@ (81079cc <TIM_OC1_SetConfig+0x110>)
 8107962:	4293      	cmp	r3, r2
 8107964:	d00b      	beq.n	810797e <TIM_OC1_SetConfig+0xc2>
 8107966:	687b      	ldr	r3, [r7, #4]
 8107968:	4a19      	ldr	r2, [pc, #100]	@ (81079d0 <TIM_OC1_SetConfig+0x114>)
 810796a:	4293      	cmp	r3, r2
 810796c:	d007      	beq.n	810797e <TIM_OC1_SetConfig+0xc2>
 810796e:	687b      	ldr	r3, [r7, #4]
 8107970:	4a18      	ldr	r2, [pc, #96]	@ (81079d4 <TIM_OC1_SetConfig+0x118>)
 8107972:	4293      	cmp	r3, r2
 8107974:	d003      	beq.n	810797e <TIM_OC1_SetConfig+0xc2>
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	4a17      	ldr	r2, [pc, #92]	@ (81079d8 <TIM_OC1_SetConfig+0x11c>)
 810797a:	4293      	cmp	r3, r2
 810797c:	d111      	bne.n	81079a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810797e:	693b      	ldr	r3, [r7, #16]
 8107980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107986:	693b      	ldr	r3, [r7, #16]
 8107988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810798c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810798e:	683b      	ldr	r3, [r7, #0]
 8107990:	695b      	ldr	r3, [r3, #20]
 8107992:	693a      	ldr	r2, [r7, #16]
 8107994:	4313      	orrs	r3, r2
 8107996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107998:	683b      	ldr	r3, [r7, #0]
 810799a:	699b      	ldr	r3, [r3, #24]
 810799c:	693a      	ldr	r2, [r7, #16]
 810799e:	4313      	orrs	r3, r2
 81079a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	693a      	ldr	r2, [r7, #16]
 81079a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	68fa      	ldr	r2, [r7, #12]
 81079ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81079ae:	683b      	ldr	r3, [r7, #0]
 81079b0:	685a      	ldr	r2, [r3, #4]
 81079b2:	687b      	ldr	r3, [r7, #4]
 81079b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	697a      	ldr	r2, [r7, #20]
 81079ba:	621a      	str	r2, [r3, #32]
}
 81079bc:	bf00      	nop
 81079be:	371c      	adds	r7, #28
 81079c0:	46bd      	mov	sp, r7
 81079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079c6:	4770      	bx	lr
 81079c8:	40010000 	.word	0x40010000
 81079cc:	40010400 	.word	0x40010400
 81079d0:	40014000 	.word	0x40014000
 81079d4:	40014400 	.word	0x40014400
 81079d8:	40014800 	.word	0x40014800

081079dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81079dc:	b480      	push	{r7}
 81079de:	b087      	sub	sp, #28
 81079e0:	af00      	add	r7, sp, #0
 81079e2:	6078      	str	r0, [r7, #4]
 81079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	6a1b      	ldr	r3, [r3, #32]
 81079ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81079ec:	687b      	ldr	r3, [r7, #4]
 81079ee:	6a1b      	ldr	r3, [r3, #32]
 81079f0:	f023 0210 	bic.w	r2, r3, #16
 81079f4:	687b      	ldr	r3, [r7, #4]
 81079f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	685b      	ldr	r3, [r3, #4]
 81079fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	699b      	ldr	r3, [r3, #24]
 8107a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107a10:	68fb      	ldr	r3, [r7, #12]
 8107a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107a18:	683b      	ldr	r3, [r7, #0]
 8107a1a:	681b      	ldr	r3, [r3, #0]
 8107a1c:	021b      	lsls	r3, r3, #8
 8107a1e:	68fa      	ldr	r2, [r7, #12]
 8107a20:	4313      	orrs	r3, r2
 8107a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107a24:	697b      	ldr	r3, [r7, #20]
 8107a26:	f023 0320 	bic.w	r3, r3, #32
 8107a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107a2c:	683b      	ldr	r3, [r7, #0]
 8107a2e:	689b      	ldr	r3, [r3, #8]
 8107a30:	011b      	lsls	r3, r3, #4
 8107a32:	697a      	ldr	r2, [r7, #20]
 8107a34:	4313      	orrs	r3, r2
 8107a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	4a28      	ldr	r2, [pc, #160]	@ (8107adc <TIM_OC2_SetConfig+0x100>)
 8107a3c:	4293      	cmp	r3, r2
 8107a3e:	d003      	beq.n	8107a48 <TIM_OC2_SetConfig+0x6c>
 8107a40:	687b      	ldr	r3, [r7, #4]
 8107a42:	4a27      	ldr	r2, [pc, #156]	@ (8107ae0 <TIM_OC2_SetConfig+0x104>)
 8107a44:	4293      	cmp	r3, r2
 8107a46:	d10d      	bne.n	8107a64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107a48:	697b      	ldr	r3, [r7, #20]
 8107a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107a50:	683b      	ldr	r3, [r7, #0]
 8107a52:	68db      	ldr	r3, [r3, #12]
 8107a54:	011b      	lsls	r3, r3, #4
 8107a56:	697a      	ldr	r2, [r7, #20]
 8107a58:	4313      	orrs	r3, r2
 8107a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107a5c:	697b      	ldr	r3, [r7, #20]
 8107a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	4a1d      	ldr	r2, [pc, #116]	@ (8107adc <TIM_OC2_SetConfig+0x100>)
 8107a68:	4293      	cmp	r3, r2
 8107a6a:	d00f      	beq.n	8107a8c <TIM_OC2_SetConfig+0xb0>
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8107ae0 <TIM_OC2_SetConfig+0x104>)
 8107a70:	4293      	cmp	r3, r2
 8107a72:	d00b      	beq.n	8107a8c <TIM_OC2_SetConfig+0xb0>
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	4a1b      	ldr	r2, [pc, #108]	@ (8107ae4 <TIM_OC2_SetConfig+0x108>)
 8107a78:	4293      	cmp	r3, r2
 8107a7a:	d007      	beq.n	8107a8c <TIM_OC2_SetConfig+0xb0>
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8107ae8 <TIM_OC2_SetConfig+0x10c>)
 8107a80:	4293      	cmp	r3, r2
 8107a82:	d003      	beq.n	8107a8c <TIM_OC2_SetConfig+0xb0>
 8107a84:	687b      	ldr	r3, [r7, #4]
 8107a86:	4a19      	ldr	r2, [pc, #100]	@ (8107aec <TIM_OC2_SetConfig+0x110>)
 8107a88:	4293      	cmp	r3, r2
 8107a8a:	d113      	bne.n	8107ab4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107a8c:	693b      	ldr	r3, [r7, #16]
 8107a8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107a94:	693b      	ldr	r3, [r7, #16]
 8107a96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107a9c:	683b      	ldr	r3, [r7, #0]
 8107a9e:	695b      	ldr	r3, [r3, #20]
 8107aa0:	009b      	lsls	r3, r3, #2
 8107aa2:	693a      	ldr	r2, [r7, #16]
 8107aa4:	4313      	orrs	r3, r2
 8107aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107aa8:	683b      	ldr	r3, [r7, #0]
 8107aaa:	699b      	ldr	r3, [r3, #24]
 8107aac:	009b      	lsls	r3, r3, #2
 8107aae:	693a      	ldr	r2, [r7, #16]
 8107ab0:	4313      	orrs	r3, r2
 8107ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	693a      	ldr	r2, [r7, #16]
 8107ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107aba:	687b      	ldr	r3, [r7, #4]
 8107abc:	68fa      	ldr	r2, [r7, #12]
 8107abe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107ac0:	683b      	ldr	r3, [r7, #0]
 8107ac2:	685a      	ldr	r2, [r3, #4]
 8107ac4:	687b      	ldr	r3, [r7, #4]
 8107ac6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	697a      	ldr	r2, [r7, #20]
 8107acc:	621a      	str	r2, [r3, #32]
}
 8107ace:	bf00      	nop
 8107ad0:	371c      	adds	r7, #28
 8107ad2:	46bd      	mov	sp, r7
 8107ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ad8:	4770      	bx	lr
 8107ada:	bf00      	nop
 8107adc:	40010000 	.word	0x40010000
 8107ae0:	40010400 	.word	0x40010400
 8107ae4:	40014000 	.word	0x40014000
 8107ae8:	40014400 	.word	0x40014400
 8107aec:	40014800 	.word	0x40014800

08107af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107af0:	b480      	push	{r7}
 8107af2:	b087      	sub	sp, #28
 8107af4:	af00      	add	r7, sp, #0
 8107af6:	6078      	str	r0, [r7, #4]
 8107af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	6a1b      	ldr	r3, [r3, #32]
 8107afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	6a1b      	ldr	r3, [r3, #32]
 8107b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	685b      	ldr	r3, [r3, #4]
 8107b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	69db      	ldr	r3, [r3, #28]
 8107b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107b18:	68fb      	ldr	r3, [r7, #12]
 8107b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107b24:	68fb      	ldr	r3, [r7, #12]
 8107b26:	f023 0303 	bic.w	r3, r3, #3
 8107b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107b2c:	683b      	ldr	r3, [r7, #0]
 8107b2e:	681b      	ldr	r3, [r3, #0]
 8107b30:	68fa      	ldr	r2, [r7, #12]
 8107b32:	4313      	orrs	r3, r2
 8107b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107b36:	697b      	ldr	r3, [r7, #20]
 8107b38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107b3e:	683b      	ldr	r3, [r7, #0]
 8107b40:	689b      	ldr	r3, [r3, #8]
 8107b42:	021b      	lsls	r3, r3, #8
 8107b44:	697a      	ldr	r2, [r7, #20]
 8107b46:	4313      	orrs	r3, r2
 8107b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107b4a:	687b      	ldr	r3, [r7, #4]
 8107b4c:	4a27      	ldr	r2, [pc, #156]	@ (8107bec <TIM_OC3_SetConfig+0xfc>)
 8107b4e:	4293      	cmp	r3, r2
 8107b50:	d003      	beq.n	8107b5a <TIM_OC3_SetConfig+0x6a>
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	4a26      	ldr	r2, [pc, #152]	@ (8107bf0 <TIM_OC3_SetConfig+0x100>)
 8107b56:	4293      	cmp	r3, r2
 8107b58:	d10d      	bne.n	8107b76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107b5a:	697b      	ldr	r3, [r7, #20]
 8107b5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107b60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107b62:	683b      	ldr	r3, [r7, #0]
 8107b64:	68db      	ldr	r3, [r3, #12]
 8107b66:	021b      	lsls	r3, r3, #8
 8107b68:	697a      	ldr	r2, [r7, #20]
 8107b6a:	4313      	orrs	r3, r2
 8107b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107b6e:	697b      	ldr	r3, [r7, #20]
 8107b70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107b76:	687b      	ldr	r3, [r7, #4]
 8107b78:	4a1c      	ldr	r2, [pc, #112]	@ (8107bec <TIM_OC3_SetConfig+0xfc>)
 8107b7a:	4293      	cmp	r3, r2
 8107b7c:	d00f      	beq.n	8107b9e <TIM_OC3_SetConfig+0xae>
 8107b7e:	687b      	ldr	r3, [r7, #4]
 8107b80:	4a1b      	ldr	r2, [pc, #108]	@ (8107bf0 <TIM_OC3_SetConfig+0x100>)
 8107b82:	4293      	cmp	r3, r2
 8107b84:	d00b      	beq.n	8107b9e <TIM_OC3_SetConfig+0xae>
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	4a1a      	ldr	r2, [pc, #104]	@ (8107bf4 <TIM_OC3_SetConfig+0x104>)
 8107b8a:	4293      	cmp	r3, r2
 8107b8c:	d007      	beq.n	8107b9e <TIM_OC3_SetConfig+0xae>
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	4a19      	ldr	r2, [pc, #100]	@ (8107bf8 <TIM_OC3_SetConfig+0x108>)
 8107b92:	4293      	cmp	r3, r2
 8107b94:	d003      	beq.n	8107b9e <TIM_OC3_SetConfig+0xae>
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	4a18      	ldr	r2, [pc, #96]	@ (8107bfc <TIM_OC3_SetConfig+0x10c>)
 8107b9a:	4293      	cmp	r3, r2
 8107b9c:	d113      	bne.n	8107bc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107b9e:	693b      	ldr	r3, [r7, #16]
 8107ba0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107ba6:	693b      	ldr	r3, [r7, #16]
 8107ba8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107bae:	683b      	ldr	r3, [r7, #0]
 8107bb0:	695b      	ldr	r3, [r3, #20]
 8107bb2:	011b      	lsls	r3, r3, #4
 8107bb4:	693a      	ldr	r2, [r7, #16]
 8107bb6:	4313      	orrs	r3, r2
 8107bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107bba:	683b      	ldr	r3, [r7, #0]
 8107bbc:	699b      	ldr	r3, [r3, #24]
 8107bbe:	011b      	lsls	r3, r3, #4
 8107bc0:	693a      	ldr	r2, [r7, #16]
 8107bc2:	4313      	orrs	r3, r2
 8107bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107bc6:	687b      	ldr	r3, [r7, #4]
 8107bc8:	693a      	ldr	r2, [r7, #16]
 8107bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	68fa      	ldr	r2, [r7, #12]
 8107bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107bd2:	683b      	ldr	r3, [r7, #0]
 8107bd4:	685a      	ldr	r2, [r3, #4]
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	697a      	ldr	r2, [r7, #20]
 8107bde:	621a      	str	r2, [r3, #32]
}
 8107be0:	bf00      	nop
 8107be2:	371c      	adds	r7, #28
 8107be4:	46bd      	mov	sp, r7
 8107be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bea:	4770      	bx	lr
 8107bec:	40010000 	.word	0x40010000
 8107bf0:	40010400 	.word	0x40010400
 8107bf4:	40014000 	.word	0x40014000
 8107bf8:	40014400 	.word	0x40014400
 8107bfc:	40014800 	.word	0x40014800

08107c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107c00:	b480      	push	{r7}
 8107c02:	b087      	sub	sp, #28
 8107c04:	af00      	add	r7, sp, #0
 8107c06:	6078      	str	r0, [r7, #4]
 8107c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c0a:	687b      	ldr	r3, [r7, #4]
 8107c0c:	6a1b      	ldr	r3, [r3, #32]
 8107c0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	6a1b      	ldr	r3, [r3, #32]
 8107c14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c1c:	687b      	ldr	r3, [r7, #4]
 8107c1e:	685b      	ldr	r3, [r3, #4]
 8107c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	69db      	ldr	r3, [r3, #28]
 8107c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107c28:	68fb      	ldr	r3, [r7, #12]
 8107c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107c34:	68fb      	ldr	r3, [r7, #12]
 8107c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107c3c:	683b      	ldr	r3, [r7, #0]
 8107c3e:	681b      	ldr	r3, [r3, #0]
 8107c40:	021b      	lsls	r3, r3, #8
 8107c42:	68fa      	ldr	r2, [r7, #12]
 8107c44:	4313      	orrs	r3, r2
 8107c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107c48:	693b      	ldr	r3, [r7, #16]
 8107c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107c50:	683b      	ldr	r3, [r7, #0]
 8107c52:	689b      	ldr	r3, [r3, #8]
 8107c54:	031b      	lsls	r3, r3, #12
 8107c56:	693a      	ldr	r2, [r7, #16]
 8107c58:	4313      	orrs	r3, r2
 8107c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	4a18      	ldr	r2, [pc, #96]	@ (8107cc0 <TIM_OC4_SetConfig+0xc0>)
 8107c60:	4293      	cmp	r3, r2
 8107c62:	d00f      	beq.n	8107c84 <TIM_OC4_SetConfig+0x84>
 8107c64:	687b      	ldr	r3, [r7, #4]
 8107c66:	4a17      	ldr	r2, [pc, #92]	@ (8107cc4 <TIM_OC4_SetConfig+0xc4>)
 8107c68:	4293      	cmp	r3, r2
 8107c6a:	d00b      	beq.n	8107c84 <TIM_OC4_SetConfig+0x84>
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	4a16      	ldr	r2, [pc, #88]	@ (8107cc8 <TIM_OC4_SetConfig+0xc8>)
 8107c70:	4293      	cmp	r3, r2
 8107c72:	d007      	beq.n	8107c84 <TIM_OC4_SetConfig+0x84>
 8107c74:	687b      	ldr	r3, [r7, #4]
 8107c76:	4a15      	ldr	r2, [pc, #84]	@ (8107ccc <TIM_OC4_SetConfig+0xcc>)
 8107c78:	4293      	cmp	r3, r2
 8107c7a:	d003      	beq.n	8107c84 <TIM_OC4_SetConfig+0x84>
 8107c7c:	687b      	ldr	r3, [r7, #4]
 8107c7e:	4a14      	ldr	r2, [pc, #80]	@ (8107cd0 <TIM_OC4_SetConfig+0xd0>)
 8107c80:	4293      	cmp	r3, r2
 8107c82:	d109      	bne.n	8107c98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107c84:	697b      	ldr	r3, [r7, #20]
 8107c86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8107c8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107c8c:	683b      	ldr	r3, [r7, #0]
 8107c8e:	695b      	ldr	r3, [r3, #20]
 8107c90:	019b      	lsls	r3, r3, #6
 8107c92:	697a      	ldr	r2, [r7, #20]
 8107c94:	4313      	orrs	r3, r2
 8107c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107c98:	687b      	ldr	r3, [r7, #4]
 8107c9a:	697a      	ldr	r2, [r7, #20]
 8107c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107c9e:	687b      	ldr	r3, [r7, #4]
 8107ca0:	68fa      	ldr	r2, [r7, #12]
 8107ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107ca4:	683b      	ldr	r3, [r7, #0]
 8107ca6:	685a      	ldr	r2, [r3, #4]
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	693a      	ldr	r2, [r7, #16]
 8107cb0:	621a      	str	r2, [r3, #32]
}
 8107cb2:	bf00      	nop
 8107cb4:	371c      	adds	r7, #28
 8107cb6:	46bd      	mov	sp, r7
 8107cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cbc:	4770      	bx	lr
 8107cbe:	bf00      	nop
 8107cc0:	40010000 	.word	0x40010000
 8107cc4:	40010400 	.word	0x40010400
 8107cc8:	40014000 	.word	0x40014000
 8107ccc:	40014400 	.word	0x40014400
 8107cd0:	40014800 	.word	0x40014800

08107cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107cd4:	b480      	push	{r7}
 8107cd6:	b087      	sub	sp, #28
 8107cd8:	af00      	add	r7, sp, #0
 8107cda:	6078      	str	r0, [r7, #4]
 8107cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107cde:	687b      	ldr	r3, [r7, #4]
 8107ce0:	6a1b      	ldr	r3, [r3, #32]
 8107ce2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	6a1b      	ldr	r3, [r3, #32]
 8107ce8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	685b      	ldr	r3, [r3, #4]
 8107cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107cfc:	68fb      	ldr	r3, [r7, #12]
 8107cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107d08:	683b      	ldr	r3, [r7, #0]
 8107d0a:	681b      	ldr	r3, [r3, #0]
 8107d0c:	68fa      	ldr	r2, [r7, #12]
 8107d0e:	4313      	orrs	r3, r2
 8107d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107d12:	693b      	ldr	r3, [r7, #16]
 8107d14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107d1a:	683b      	ldr	r3, [r7, #0]
 8107d1c:	689b      	ldr	r3, [r3, #8]
 8107d1e:	041b      	lsls	r3, r3, #16
 8107d20:	693a      	ldr	r2, [r7, #16]
 8107d22:	4313      	orrs	r3, r2
 8107d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	4a17      	ldr	r2, [pc, #92]	@ (8107d88 <TIM_OC5_SetConfig+0xb4>)
 8107d2a:	4293      	cmp	r3, r2
 8107d2c:	d00f      	beq.n	8107d4e <TIM_OC5_SetConfig+0x7a>
 8107d2e:	687b      	ldr	r3, [r7, #4]
 8107d30:	4a16      	ldr	r2, [pc, #88]	@ (8107d8c <TIM_OC5_SetConfig+0xb8>)
 8107d32:	4293      	cmp	r3, r2
 8107d34:	d00b      	beq.n	8107d4e <TIM_OC5_SetConfig+0x7a>
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	4a15      	ldr	r2, [pc, #84]	@ (8107d90 <TIM_OC5_SetConfig+0xbc>)
 8107d3a:	4293      	cmp	r3, r2
 8107d3c:	d007      	beq.n	8107d4e <TIM_OC5_SetConfig+0x7a>
 8107d3e:	687b      	ldr	r3, [r7, #4]
 8107d40:	4a14      	ldr	r2, [pc, #80]	@ (8107d94 <TIM_OC5_SetConfig+0xc0>)
 8107d42:	4293      	cmp	r3, r2
 8107d44:	d003      	beq.n	8107d4e <TIM_OC5_SetConfig+0x7a>
 8107d46:	687b      	ldr	r3, [r7, #4]
 8107d48:	4a13      	ldr	r2, [pc, #76]	@ (8107d98 <TIM_OC5_SetConfig+0xc4>)
 8107d4a:	4293      	cmp	r3, r2
 8107d4c:	d109      	bne.n	8107d62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107d4e:	697b      	ldr	r3, [r7, #20]
 8107d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107d54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107d56:	683b      	ldr	r3, [r7, #0]
 8107d58:	695b      	ldr	r3, [r3, #20]
 8107d5a:	021b      	lsls	r3, r3, #8
 8107d5c:	697a      	ldr	r2, [r7, #20]
 8107d5e:	4313      	orrs	r3, r2
 8107d60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107d62:	687b      	ldr	r3, [r7, #4]
 8107d64:	697a      	ldr	r2, [r7, #20]
 8107d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107d68:	687b      	ldr	r3, [r7, #4]
 8107d6a:	68fa      	ldr	r2, [r7, #12]
 8107d6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107d6e:	683b      	ldr	r3, [r7, #0]
 8107d70:	685a      	ldr	r2, [r3, #4]
 8107d72:	687b      	ldr	r3, [r7, #4]
 8107d74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	693a      	ldr	r2, [r7, #16]
 8107d7a:	621a      	str	r2, [r3, #32]
}
 8107d7c:	bf00      	nop
 8107d7e:	371c      	adds	r7, #28
 8107d80:	46bd      	mov	sp, r7
 8107d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d86:	4770      	bx	lr
 8107d88:	40010000 	.word	0x40010000
 8107d8c:	40010400 	.word	0x40010400
 8107d90:	40014000 	.word	0x40014000
 8107d94:	40014400 	.word	0x40014400
 8107d98:	40014800 	.word	0x40014800

08107d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107d9c:	b480      	push	{r7}
 8107d9e:	b087      	sub	sp, #28
 8107da0:	af00      	add	r7, sp, #0
 8107da2:	6078      	str	r0, [r7, #4]
 8107da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107da6:	687b      	ldr	r3, [r7, #4]
 8107da8:	6a1b      	ldr	r3, [r3, #32]
 8107daa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	6a1b      	ldr	r3, [r3, #32]
 8107db0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107db8:	687b      	ldr	r3, [r7, #4]
 8107dba:	685b      	ldr	r3, [r3, #4]
 8107dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107dc4:	68fb      	ldr	r3, [r7, #12]
 8107dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107dd0:	683b      	ldr	r3, [r7, #0]
 8107dd2:	681b      	ldr	r3, [r3, #0]
 8107dd4:	021b      	lsls	r3, r3, #8
 8107dd6:	68fa      	ldr	r2, [r7, #12]
 8107dd8:	4313      	orrs	r3, r2
 8107dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107ddc:	693b      	ldr	r3, [r7, #16]
 8107dde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8107de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107de4:	683b      	ldr	r3, [r7, #0]
 8107de6:	689b      	ldr	r3, [r3, #8]
 8107de8:	051b      	lsls	r3, r3, #20
 8107dea:	693a      	ldr	r2, [r7, #16]
 8107dec:	4313      	orrs	r3, r2
 8107dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	4a18      	ldr	r2, [pc, #96]	@ (8107e54 <TIM_OC6_SetConfig+0xb8>)
 8107df4:	4293      	cmp	r3, r2
 8107df6:	d00f      	beq.n	8107e18 <TIM_OC6_SetConfig+0x7c>
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	4a17      	ldr	r2, [pc, #92]	@ (8107e58 <TIM_OC6_SetConfig+0xbc>)
 8107dfc:	4293      	cmp	r3, r2
 8107dfe:	d00b      	beq.n	8107e18 <TIM_OC6_SetConfig+0x7c>
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	4a16      	ldr	r2, [pc, #88]	@ (8107e5c <TIM_OC6_SetConfig+0xc0>)
 8107e04:	4293      	cmp	r3, r2
 8107e06:	d007      	beq.n	8107e18 <TIM_OC6_SetConfig+0x7c>
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	4a15      	ldr	r2, [pc, #84]	@ (8107e60 <TIM_OC6_SetConfig+0xc4>)
 8107e0c:	4293      	cmp	r3, r2
 8107e0e:	d003      	beq.n	8107e18 <TIM_OC6_SetConfig+0x7c>
 8107e10:	687b      	ldr	r3, [r7, #4]
 8107e12:	4a14      	ldr	r2, [pc, #80]	@ (8107e64 <TIM_OC6_SetConfig+0xc8>)
 8107e14:	4293      	cmp	r3, r2
 8107e16:	d109      	bne.n	8107e2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107e18:	697b      	ldr	r3, [r7, #20]
 8107e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8107e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107e20:	683b      	ldr	r3, [r7, #0]
 8107e22:	695b      	ldr	r3, [r3, #20]
 8107e24:	029b      	lsls	r3, r3, #10
 8107e26:	697a      	ldr	r2, [r7, #20]
 8107e28:	4313      	orrs	r3, r2
 8107e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	697a      	ldr	r2, [r7, #20]
 8107e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107e32:	687b      	ldr	r3, [r7, #4]
 8107e34:	68fa      	ldr	r2, [r7, #12]
 8107e36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107e38:	683b      	ldr	r3, [r7, #0]
 8107e3a:	685a      	ldr	r2, [r3, #4]
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	693a      	ldr	r2, [r7, #16]
 8107e44:	621a      	str	r2, [r3, #32]
}
 8107e46:	bf00      	nop
 8107e48:	371c      	adds	r7, #28
 8107e4a:	46bd      	mov	sp, r7
 8107e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e50:	4770      	bx	lr
 8107e52:	bf00      	nop
 8107e54:	40010000 	.word	0x40010000
 8107e58:	40010400 	.word	0x40010400
 8107e5c:	40014000 	.word	0x40014000
 8107e60:	40014400 	.word	0x40014400
 8107e64:	40014800 	.word	0x40014800

08107e68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107e68:	b580      	push	{r7, lr}
 8107e6a:	b086      	sub	sp, #24
 8107e6c:	af00      	add	r7, sp, #0
 8107e6e:	6078      	str	r0, [r7, #4]
 8107e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8107e72:	2300      	movs	r3, #0
 8107e74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	689b      	ldr	r3, [r3, #8]
 8107e7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107e7e:	693b      	ldr	r3, [r7, #16]
 8107e80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8107e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107e88:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8107e8a:	683b      	ldr	r3, [r7, #0]
 8107e8c:	685b      	ldr	r3, [r3, #4]
 8107e8e:	693a      	ldr	r2, [r7, #16]
 8107e90:	4313      	orrs	r3, r2
 8107e92:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8107e94:	693b      	ldr	r3, [r7, #16]
 8107e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107e9a:	f023 0307 	bic.w	r3, r3, #7
 8107e9e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8107ea0:	683b      	ldr	r3, [r7, #0]
 8107ea2:	681b      	ldr	r3, [r3, #0]
 8107ea4:	693a      	ldr	r2, [r7, #16]
 8107ea6:	4313      	orrs	r3, r2
 8107ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	681b      	ldr	r3, [r3, #0]
 8107eae:	693a      	ldr	r2, [r7, #16]
 8107eb0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8107eb2:	683b      	ldr	r3, [r7, #0]
 8107eb4:	685b      	ldr	r3, [r3, #4]
 8107eb6:	4a5a      	ldr	r2, [pc, #360]	@ (8108020 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8107eb8:	4293      	cmp	r3, r2
 8107eba:	f000 80ab 	beq.w	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107ebe:	4a58      	ldr	r2, [pc, #352]	@ (8108020 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8107ec0:	4293      	cmp	r3, r2
 8107ec2:	f200 80a4 	bhi.w	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107eca:	f000 80a3 	beq.w	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107ed2:	f200 809c 	bhi.w	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107ed6:	4a53      	ldr	r2, [pc, #332]	@ (8108024 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8107ed8:	4293      	cmp	r3, r2
 8107eda:	f000 809b 	beq.w	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107ede:	4a51      	ldr	r2, [pc, #324]	@ (8108024 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8107ee0:	4293      	cmp	r3, r2
 8107ee2:	f200 8094 	bhi.w	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107ee6:	4a50      	ldr	r2, [pc, #320]	@ (8108028 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8107ee8:	4293      	cmp	r3, r2
 8107eea:	f000 8093 	beq.w	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107eee:	4a4e      	ldr	r2, [pc, #312]	@ (8108028 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8107ef0:	4293      	cmp	r3, r2
 8107ef2:	f200 808c 	bhi.w	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107ef6:	4a4d      	ldr	r2, [pc, #308]	@ (810802c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8107ef8:	4293      	cmp	r3, r2
 8107efa:	f000 808b 	beq.w	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107efe:	4a4b      	ldr	r2, [pc, #300]	@ (810802c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8107f00:	4293      	cmp	r3, r2
 8107f02:	f200 8084 	bhi.w	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f06:	4a4a      	ldr	r2, [pc, #296]	@ (8108030 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8107f08:	4293      	cmp	r3, r2
 8107f0a:	f000 8083 	beq.w	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f0e:	4a48      	ldr	r2, [pc, #288]	@ (8108030 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8107f10:	4293      	cmp	r3, r2
 8107f12:	d87c      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f14:	4a47      	ldr	r2, [pc, #284]	@ (8108034 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8107f16:	4293      	cmp	r3, r2
 8107f18:	d07c      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f1a:	4a46      	ldr	r2, [pc, #280]	@ (8108034 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8107f1c:	4293      	cmp	r3, r2
 8107f1e:	d876      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f20:	4a45      	ldr	r2, [pc, #276]	@ (8108038 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8107f22:	4293      	cmp	r3, r2
 8107f24:	d076      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f26:	4a44      	ldr	r2, [pc, #272]	@ (8108038 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8107f28:	4293      	cmp	r3, r2
 8107f2a:	d870      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107f30:	d070      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f32:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107f36:	d86a      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107f3c:	d06a      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107f42:	d864      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f44:	2b70      	cmp	r3, #112	@ 0x70
 8107f46:	d01a      	beq.n	8107f7e <TIM_SlaveTimer_SetConfig+0x116>
 8107f48:	2b70      	cmp	r3, #112	@ 0x70
 8107f4a:	d860      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f4c:	2b60      	cmp	r3, #96	@ 0x60
 8107f4e:	d054      	beq.n	8107ffa <TIM_SlaveTimer_SetConfig+0x192>
 8107f50:	2b60      	cmp	r3, #96	@ 0x60
 8107f52:	d85c      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f54:	2b50      	cmp	r3, #80	@ 0x50
 8107f56:	d046      	beq.n	8107fe6 <TIM_SlaveTimer_SetConfig+0x17e>
 8107f58:	2b50      	cmp	r3, #80	@ 0x50
 8107f5a:	d858      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f5c:	2b40      	cmp	r3, #64	@ 0x40
 8107f5e:	d019      	beq.n	8107f94 <TIM_SlaveTimer_SetConfig+0x12c>
 8107f60:	2b40      	cmp	r3, #64	@ 0x40
 8107f62:	d854      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f64:	2b30      	cmp	r3, #48	@ 0x30
 8107f66:	d055      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f68:	2b30      	cmp	r3, #48	@ 0x30
 8107f6a:	d850      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f6c:	2b20      	cmp	r3, #32
 8107f6e:	d051      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f70:	2b20      	cmp	r3, #32
 8107f72:	d84c      	bhi.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	d04d      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f78:	2b10      	cmp	r3, #16
 8107f7a:	d04b      	beq.n	8108014 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f7c:	e047      	b.n	810800e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8107f82:	683b      	ldr	r3, [r7, #0]
 8107f84:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8107f86:	683b      	ldr	r3, [r7, #0]
 8107f88:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8107f8a:	683b      	ldr	r3, [r7, #0]
 8107f8c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8107f8e:	f000 f9fb 	bl	8108388 <TIM_ETR_SetConfig>
      break;
 8107f92:	e040      	b.n	8108016 <TIM_SlaveTimer_SetConfig+0x1ae>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8107f94:	683b      	ldr	r3, [r7, #0]
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	2b05      	cmp	r3, #5
 8107f9a:	d101      	bne.n	8107fa0 <TIM_SlaveTimer_SetConfig+0x138>
      {
        return HAL_ERROR;
 8107f9c:	2301      	movs	r3, #1
 8107f9e:	e03b      	b.n	8108018 <TIM_SlaveTimer_SetConfig+0x1b0>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8107fa0:	687b      	ldr	r3, [r7, #4]
 8107fa2:	681b      	ldr	r3, [r3, #0]
 8107fa4:	6a1b      	ldr	r3, [r3, #32]
 8107fa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	681b      	ldr	r3, [r3, #0]
 8107fac:	6a1a      	ldr	r2, [r3, #32]
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	f022 0201 	bic.w	r2, r2, #1
 8107fb6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8107fb8:	687b      	ldr	r3, [r7, #4]
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	699b      	ldr	r3, [r3, #24]
 8107fbe:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107fc0:	68bb      	ldr	r3, [r7, #8]
 8107fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8107fc6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8107fc8:	683b      	ldr	r3, [r7, #0]
 8107fca:	691b      	ldr	r3, [r3, #16]
 8107fcc:	011b      	lsls	r3, r3, #4
 8107fce:	68ba      	ldr	r2, [r7, #8]
 8107fd0:	4313      	orrs	r3, r2
 8107fd2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8107fd4:	687b      	ldr	r3, [r7, #4]
 8107fd6:	681b      	ldr	r3, [r3, #0]
 8107fd8:	68ba      	ldr	r2, [r7, #8]
 8107fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8107fdc:	687b      	ldr	r3, [r7, #4]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	68fa      	ldr	r2, [r7, #12]
 8107fe2:	621a      	str	r2, [r3, #32]
      break;
 8107fe4:	e017      	b.n	8108016 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8107fea:	683b      	ldr	r3, [r7, #0]
 8107fec:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8107fee:	683b      	ldr	r3, [r7, #0]
 8107ff0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107ff2:	461a      	mov	r2, r3
 8107ff4:	f000 f896 	bl	8108124 <TIM_TI1_ConfigInputStage>
      break;
 8107ff8:	e00d      	b.n	8108016 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8107ffa:	687b      	ldr	r3, [r7, #4]
 8107ffc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8107ffe:	683b      	ldr	r3, [r7, #0]
 8108000:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8108002:	683b      	ldr	r3, [r7, #0]
 8108004:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8108006:	461a      	mov	r2, r3
 8108008:	f000 f8f8 	bl	81081fc <TIM_TI2_ConfigInputStage>
      break;
 810800c:	e003      	b.n	8108016 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 810800e:	2301      	movs	r3, #1
 8108010:	75fb      	strb	r3, [r7, #23]
      break;
 8108012:	e000      	b.n	8108016 <TIM_SlaveTimer_SetConfig+0x1ae>
      break;
 8108014:	bf00      	nop
  }

  return status;
 8108016:	7dfb      	ldrb	r3, [r7, #23]
}
 8108018:	4618      	mov	r0, r3
 810801a:	3718      	adds	r7, #24
 810801c:	46bd      	mov	sp, r7
 810801e:	bd80      	pop	{r7, pc}
 8108020:	00200010 	.word	0x00200010
 8108024:	00100070 	.word	0x00100070
 8108028:	00100060 	.word	0x00100060
 810802c:	00100050 	.word	0x00100050
 8108030:	00100040 	.word	0x00100040
 8108034:	00100030 	.word	0x00100030
 8108038:	00100020 	.word	0x00100020

0810803c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810803c:	b480      	push	{r7}
 810803e:	b087      	sub	sp, #28
 8108040:	af00      	add	r7, sp, #0
 8108042:	60f8      	str	r0, [r7, #12]
 8108044:	60b9      	str	r1, [r7, #8]
 8108046:	607a      	str	r2, [r7, #4]
 8108048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810804a:	68fb      	ldr	r3, [r7, #12]
 810804c:	6a1b      	ldr	r3, [r3, #32]
 810804e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108050:	68fb      	ldr	r3, [r7, #12]
 8108052:	6a1b      	ldr	r3, [r3, #32]
 8108054:	f023 0201 	bic.w	r2, r3, #1
 8108058:	68fb      	ldr	r3, [r7, #12]
 810805a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810805c:	68fb      	ldr	r3, [r7, #12]
 810805e:	699b      	ldr	r3, [r3, #24]
 8108060:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8108062:	68fb      	ldr	r3, [r7, #12]
 8108064:	4a28      	ldr	r2, [pc, #160]	@ (8108108 <TIM_TI1_SetConfig+0xcc>)
 8108066:	4293      	cmp	r3, r2
 8108068:	d01b      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 810806a:	68fb      	ldr	r3, [r7, #12]
 810806c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108070:	d017      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 8108072:	68fb      	ldr	r3, [r7, #12]
 8108074:	4a25      	ldr	r2, [pc, #148]	@ (810810c <TIM_TI1_SetConfig+0xd0>)
 8108076:	4293      	cmp	r3, r2
 8108078:	d013      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 810807a:	68fb      	ldr	r3, [r7, #12]
 810807c:	4a24      	ldr	r2, [pc, #144]	@ (8108110 <TIM_TI1_SetConfig+0xd4>)
 810807e:	4293      	cmp	r3, r2
 8108080:	d00f      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 8108082:	68fb      	ldr	r3, [r7, #12]
 8108084:	4a23      	ldr	r2, [pc, #140]	@ (8108114 <TIM_TI1_SetConfig+0xd8>)
 8108086:	4293      	cmp	r3, r2
 8108088:	d00b      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 810808a:	68fb      	ldr	r3, [r7, #12]
 810808c:	4a22      	ldr	r2, [pc, #136]	@ (8108118 <TIM_TI1_SetConfig+0xdc>)
 810808e:	4293      	cmp	r3, r2
 8108090:	d007      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 8108092:	68fb      	ldr	r3, [r7, #12]
 8108094:	4a21      	ldr	r2, [pc, #132]	@ (810811c <TIM_TI1_SetConfig+0xe0>)
 8108096:	4293      	cmp	r3, r2
 8108098:	d003      	beq.n	81080a2 <TIM_TI1_SetConfig+0x66>
 810809a:	68fb      	ldr	r3, [r7, #12]
 810809c:	4a20      	ldr	r2, [pc, #128]	@ (8108120 <TIM_TI1_SetConfig+0xe4>)
 810809e:	4293      	cmp	r3, r2
 81080a0:	d101      	bne.n	81080a6 <TIM_TI1_SetConfig+0x6a>
 81080a2:	2301      	movs	r3, #1
 81080a4:	e000      	b.n	81080a8 <TIM_TI1_SetConfig+0x6c>
 81080a6:	2300      	movs	r3, #0
 81080a8:	2b00      	cmp	r3, #0
 81080aa:	d008      	beq.n	81080be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 81080ac:	697b      	ldr	r3, [r7, #20]
 81080ae:	f023 0303 	bic.w	r3, r3, #3
 81080b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 81080b4:	697a      	ldr	r2, [r7, #20]
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	4313      	orrs	r3, r2
 81080ba:	617b      	str	r3, [r7, #20]
 81080bc:	e003      	b.n	81080c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 81080be:	697b      	ldr	r3, [r7, #20]
 81080c0:	f043 0301 	orr.w	r3, r3, #1
 81080c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81080c6:	697b      	ldr	r3, [r7, #20]
 81080c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 81080cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 81080ce:	683b      	ldr	r3, [r7, #0]
 81080d0:	011b      	lsls	r3, r3, #4
 81080d2:	b2db      	uxtb	r3, r3
 81080d4:	697a      	ldr	r2, [r7, #20]
 81080d6:	4313      	orrs	r3, r2
 81080d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81080da:	693b      	ldr	r3, [r7, #16]
 81080dc:	f023 030a 	bic.w	r3, r3, #10
 81080e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81080e2:	68bb      	ldr	r3, [r7, #8]
 81080e4:	f003 030a 	and.w	r3, r3, #10
 81080e8:	693a      	ldr	r2, [r7, #16]
 81080ea:	4313      	orrs	r3, r2
 81080ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81080ee:	68fb      	ldr	r3, [r7, #12]
 81080f0:	697a      	ldr	r2, [r7, #20]
 81080f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81080f4:	68fb      	ldr	r3, [r7, #12]
 81080f6:	693a      	ldr	r2, [r7, #16]
 81080f8:	621a      	str	r2, [r3, #32]
}
 81080fa:	bf00      	nop
 81080fc:	371c      	adds	r7, #28
 81080fe:	46bd      	mov	sp, r7
 8108100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108104:	4770      	bx	lr
 8108106:	bf00      	nop
 8108108:	40010000 	.word	0x40010000
 810810c:	40000400 	.word	0x40000400
 8108110:	40000800 	.word	0x40000800
 8108114:	40000c00 	.word	0x40000c00
 8108118:	40010400 	.word	0x40010400
 810811c:	40001800 	.word	0x40001800
 8108120:	40014000 	.word	0x40014000

08108124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108124:	b480      	push	{r7}
 8108126:	b087      	sub	sp, #28
 8108128:	af00      	add	r7, sp, #0
 810812a:	60f8      	str	r0, [r7, #12]
 810812c:	60b9      	str	r1, [r7, #8]
 810812e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108130:	68fb      	ldr	r3, [r7, #12]
 8108132:	6a1b      	ldr	r3, [r3, #32]
 8108134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108136:	68fb      	ldr	r3, [r7, #12]
 8108138:	6a1b      	ldr	r3, [r3, #32]
 810813a:	f023 0201 	bic.w	r2, r3, #1
 810813e:	68fb      	ldr	r3, [r7, #12]
 8108140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108142:	68fb      	ldr	r3, [r7, #12]
 8108144:	699b      	ldr	r3, [r3, #24]
 8108146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108148:	693b      	ldr	r3, [r7, #16]
 810814a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810814e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	011b      	lsls	r3, r3, #4
 8108154:	693a      	ldr	r2, [r7, #16]
 8108156:	4313      	orrs	r3, r2
 8108158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810815a:	697b      	ldr	r3, [r7, #20]
 810815c:	f023 030a 	bic.w	r3, r3, #10
 8108160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8108162:	697a      	ldr	r2, [r7, #20]
 8108164:	68bb      	ldr	r3, [r7, #8]
 8108166:	4313      	orrs	r3, r2
 8108168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810816a:	68fb      	ldr	r3, [r7, #12]
 810816c:	693a      	ldr	r2, [r7, #16]
 810816e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108170:	68fb      	ldr	r3, [r7, #12]
 8108172:	697a      	ldr	r2, [r7, #20]
 8108174:	621a      	str	r2, [r3, #32]
}
 8108176:	bf00      	nop
 8108178:	371c      	adds	r7, #28
 810817a:	46bd      	mov	sp, r7
 810817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108180:	4770      	bx	lr

08108182 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8108182:	b480      	push	{r7}
 8108184:	b087      	sub	sp, #28
 8108186:	af00      	add	r7, sp, #0
 8108188:	60f8      	str	r0, [r7, #12]
 810818a:	60b9      	str	r1, [r7, #8]
 810818c:	607a      	str	r2, [r7, #4]
 810818e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8108190:	68fb      	ldr	r3, [r7, #12]
 8108192:	6a1b      	ldr	r3, [r3, #32]
 8108194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108196:	68fb      	ldr	r3, [r7, #12]
 8108198:	6a1b      	ldr	r3, [r3, #32]
 810819a:	f023 0210 	bic.w	r2, r3, #16
 810819e:	68fb      	ldr	r3, [r7, #12]
 81081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81081a2:	68fb      	ldr	r3, [r7, #12]
 81081a4:	699b      	ldr	r3, [r3, #24]
 81081a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 81081a8:	693b      	ldr	r3, [r7, #16]
 81081aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 81081b0:	687b      	ldr	r3, [r7, #4]
 81081b2:	021b      	lsls	r3, r3, #8
 81081b4:	693a      	ldr	r2, [r7, #16]
 81081b6:	4313      	orrs	r3, r2
 81081b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81081ba:	693b      	ldr	r3, [r7, #16]
 81081bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81081c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 81081c2:	683b      	ldr	r3, [r7, #0]
 81081c4:	031b      	lsls	r3, r3, #12
 81081c6:	b29b      	uxth	r3, r3
 81081c8:	693a      	ldr	r2, [r7, #16]
 81081ca:	4313      	orrs	r3, r2
 81081cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81081ce:	697b      	ldr	r3, [r7, #20]
 81081d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 81081d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 81081d6:	68bb      	ldr	r3, [r7, #8]
 81081d8:	011b      	lsls	r3, r3, #4
 81081da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 81081de:	697a      	ldr	r2, [r7, #20]
 81081e0:	4313      	orrs	r3, r2
 81081e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81081e4:	68fb      	ldr	r3, [r7, #12]
 81081e6:	693a      	ldr	r2, [r7, #16]
 81081e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81081ea:	68fb      	ldr	r3, [r7, #12]
 81081ec:	697a      	ldr	r2, [r7, #20]
 81081ee:	621a      	str	r2, [r3, #32]
}
 81081f0:	bf00      	nop
 81081f2:	371c      	adds	r7, #28
 81081f4:	46bd      	mov	sp, r7
 81081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081fa:	4770      	bx	lr

081081fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81081fc:	b480      	push	{r7}
 81081fe:	b087      	sub	sp, #28
 8108200:	af00      	add	r7, sp, #0
 8108202:	60f8      	str	r0, [r7, #12]
 8108204:	60b9      	str	r1, [r7, #8]
 8108206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8108208:	68fb      	ldr	r3, [r7, #12]
 810820a:	6a1b      	ldr	r3, [r3, #32]
 810820c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810820e:	68fb      	ldr	r3, [r7, #12]
 8108210:	6a1b      	ldr	r3, [r3, #32]
 8108212:	f023 0210 	bic.w	r2, r3, #16
 8108216:	68fb      	ldr	r3, [r7, #12]
 8108218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810821a:	68fb      	ldr	r3, [r7, #12]
 810821c:	699b      	ldr	r3, [r3, #24]
 810821e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108220:	693b      	ldr	r3, [r7, #16]
 8108222:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108228:	687b      	ldr	r3, [r7, #4]
 810822a:	031b      	lsls	r3, r3, #12
 810822c:	693a      	ldr	r2, [r7, #16]
 810822e:	4313      	orrs	r3, r2
 8108230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108232:	697b      	ldr	r3, [r7, #20]
 8108234:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8108238:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810823a:	68bb      	ldr	r3, [r7, #8]
 810823c:	011b      	lsls	r3, r3, #4
 810823e:	697a      	ldr	r2, [r7, #20]
 8108240:	4313      	orrs	r3, r2
 8108242:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108244:	68fb      	ldr	r3, [r7, #12]
 8108246:	693a      	ldr	r2, [r7, #16]
 8108248:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810824a:	68fb      	ldr	r3, [r7, #12]
 810824c:	697a      	ldr	r2, [r7, #20]
 810824e:	621a      	str	r2, [r3, #32]
}
 8108250:	bf00      	nop
 8108252:	371c      	adds	r7, #28
 8108254:	46bd      	mov	sp, r7
 8108256:	f85d 7b04 	ldr.w	r7, [sp], #4
 810825a:	4770      	bx	lr

0810825c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810825c:	b480      	push	{r7}
 810825e:	b087      	sub	sp, #28
 8108260:	af00      	add	r7, sp, #0
 8108262:	60f8      	str	r0, [r7, #12]
 8108264:	60b9      	str	r1, [r7, #8]
 8108266:	607a      	str	r2, [r7, #4]
 8108268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 810826a:	68fb      	ldr	r3, [r7, #12]
 810826c:	6a1b      	ldr	r3, [r3, #32]
 810826e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108270:	68fb      	ldr	r3, [r7, #12]
 8108272:	6a1b      	ldr	r3, [r3, #32]
 8108274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8108278:	68fb      	ldr	r3, [r7, #12]
 810827a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810827c:	68fb      	ldr	r3, [r7, #12]
 810827e:	69db      	ldr	r3, [r3, #28]
 8108280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8108282:	693b      	ldr	r3, [r7, #16]
 8108284:	f023 0303 	bic.w	r3, r3, #3
 8108288:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 810828a:	693a      	ldr	r2, [r7, #16]
 810828c:	687b      	ldr	r3, [r7, #4]
 810828e:	4313      	orrs	r3, r2
 8108290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8108292:	693b      	ldr	r3, [r7, #16]
 8108294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8108298:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810829a:	683b      	ldr	r3, [r7, #0]
 810829c:	011b      	lsls	r3, r3, #4
 810829e:	b2db      	uxtb	r3, r3
 81082a0:	693a      	ldr	r2, [r7, #16]
 81082a2:	4313      	orrs	r3, r2
 81082a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 81082a6:	697b      	ldr	r3, [r7, #20]
 81082a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 81082ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 81082ae:	68bb      	ldr	r3, [r7, #8]
 81082b0:	021b      	lsls	r3, r3, #8
 81082b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 81082b6:	697a      	ldr	r2, [r7, #20]
 81082b8:	4313      	orrs	r3, r2
 81082ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 81082bc:	68fb      	ldr	r3, [r7, #12]
 81082be:	693a      	ldr	r2, [r7, #16]
 81082c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 81082c2:	68fb      	ldr	r3, [r7, #12]
 81082c4:	697a      	ldr	r2, [r7, #20]
 81082c6:	621a      	str	r2, [r3, #32]
}
 81082c8:	bf00      	nop
 81082ca:	371c      	adds	r7, #28
 81082cc:	46bd      	mov	sp, r7
 81082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082d2:	4770      	bx	lr

081082d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81082d4:	b480      	push	{r7}
 81082d6:	b087      	sub	sp, #28
 81082d8:	af00      	add	r7, sp, #0
 81082da:	60f8      	str	r0, [r7, #12]
 81082dc:	60b9      	str	r1, [r7, #8]
 81082de:	607a      	str	r2, [r7, #4]
 81082e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 81082e2:	68fb      	ldr	r3, [r7, #12]
 81082e4:	6a1b      	ldr	r3, [r3, #32]
 81082e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81082e8:	68fb      	ldr	r3, [r7, #12]
 81082ea:	6a1b      	ldr	r3, [r3, #32]
 81082ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 81082f0:	68fb      	ldr	r3, [r7, #12]
 81082f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81082f4:	68fb      	ldr	r3, [r7, #12]
 81082f6:	69db      	ldr	r3, [r3, #28]
 81082f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 81082fa:	693b      	ldr	r3, [r7, #16]
 81082fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108300:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8108302:	687b      	ldr	r3, [r7, #4]
 8108304:	021b      	lsls	r3, r3, #8
 8108306:	693a      	ldr	r2, [r7, #16]
 8108308:	4313      	orrs	r3, r2
 810830a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810830c:	693b      	ldr	r3, [r7, #16]
 810830e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108312:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8108314:	683b      	ldr	r3, [r7, #0]
 8108316:	031b      	lsls	r3, r3, #12
 8108318:	b29b      	uxth	r3, r3
 810831a:	693a      	ldr	r2, [r7, #16]
 810831c:	4313      	orrs	r3, r2
 810831e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8108320:	697b      	ldr	r3, [r7, #20]
 8108322:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8108326:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8108328:	68bb      	ldr	r3, [r7, #8]
 810832a:	031b      	lsls	r3, r3, #12
 810832c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8108330:	697a      	ldr	r2, [r7, #20]
 8108332:	4313      	orrs	r3, r2
 8108334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8108336:	68fb      	ldr	r3, [r7, #12]
 8108338:	693a      	ldr	r2, [r7, #16]
 810833a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810833c:	68fb      	ldr	r3, [r7, #12]
 810833e:	697a      	ldr	r2, [r7, #20]
 8108340:	621a      	str	r2, [r3, #32]
}
 8108342:	bf00      	nop
 8108344:	371c      	adds	r7, #28
 8108346:	46bd      	mov	sp, r7
 8108348:	f85d 7b04 	ldr.w	r7, [sp], #4
 810834c:	4770      	bx	lr

0810834e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810834e:	b480      	push	{r7}
 8108350:	b085      	sub	sp, #20
 8108352:	af00      	add	r7, sp, #0
 8108354:	6078      	str	r0, [r7, #4]
 8108356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8108358:	687b      	ldr	r3, [r7, #4]
 810835a:	689b      	ldr	r3, [r3, #8]
 810835c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810835e:	68fb      	ldr	r3, [r7, #12]
 8108360:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8108364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 810836a:	683a      	ldr	r2, [r7, #0]
 810836c:	68fb      	ldr	r3, [r7, #12]
 810836e:	4313      	orrs	r3, r2
 8108370:	f043 0307 	orr.w	r3, r3, #7
 8108374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108376:	687b      	ldr	r3, [r7, #4]
 8108378:	68fa      	ldr	r2, [r7, #12]
 810837a:	609a      	str	r2, [r3, #8]
}
 810837c:	bf00      	nop
 810837e:	3714      	adds	r7, #20
 8108380:	46bd      	mov	sp, r7
 8108382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108386:	4770      	bx	lr

08108388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8108388:	b480      	push	{r7}
 810838a:	b087      	sub	sp, #28
 810838c:	af00      	add	r7, sp, #0
 810838e:	60f8      	str	r0, [r7, #12]
 8108390:	60b9      	str	r1, [r7, #8]
 8108392:	607a      	str	r2, [r7, #4]
 8108394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	689b      	ldr	r3, [r3, #8]
 810839a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810839c:	697b      	ldr	r3, [r7, #20]
 810839e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81083a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81083a4:	683b      	ldr	r3, [r7, #0]
 81083a6:	021a      	lsls	r2, r3, #8
 81083a8:	687b      	ldr	r3, [r7, #4]
 81083aa:	431a      	orrs	r2, r3
 81083ac:	68bb      	ldr	r3, [r7, #8]
 81083ae:	4313      	orrs	r3, r2
 81083b0:	697a      	ldr	r2, [r7, #20]
 81083b2:	4313      	orrs	r3, r2
 81083b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81083b6:	68fb      	ldr	r3, [r7, #12]
 81083b8:	697a      	ldr	r2, [r7, #20]
 81083ba:	609a      	str	r2, [r3, #8]
}
 81083bc:	bf00      	nop
 81083be:	371c      	adds	r7, #28
 81083c0:	46bd      	mov	sp, r7
 81083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083c6:	4770      	bx	lr

081083c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81083c8:	b480      	push	{r7}
 81083ca:	b087      	sub	sp, #28
 81083cc:	af00      	add	r7, sp, #0
 81083ce:	60f8      	str	r0, [r7, #12]
 81083d0:	60b9      	str	r1, [r7, #8]
 81083d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81083d4:	68bb      	ldr	r3, [r7, #8]
 81083d6:	f003 031f 	and.w	r3, r3, #31
 81083da:	2201      	movs	r2, #1
 81083dc:	fa02 f303 	lsl.w	r3, r2, r3
 81083e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81083e2:	68fb      	ldr	r3, [r7, #12]
 81083e4:	6a1a      	ldr	r2, [r3, #32]
 81083e6:	697b      	ldr	r3, [r7, #20]
 81083e8:	43db      	mvns	r3, r3
 81083ea:	401a      	ands	r2, r3
 81083ec:	68fb      	ldr	r3, [r7, #12]
 81083ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81083f0:	68fb      	ldr	r3, [r7, #12]
 81083f2:	6a1a      	ldr	r2, [r3, #32]
 81083f4:	68bb      	ldr	r3, [r7, #8]
 81083f6:	f003 031f 	and.w	r3, r3, #31
 81083fa:	6879      	ldr	r1, [r7, #4]
 81083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8108400:	431a      	orrs	r2, r3
 8108402:	68fb      	ldr	r3, [r7, #12]
 8108404:	621a      	str	r2, [r3, #32]
}
 8108406:	bf00      	nop
 8108408:	371c      	adds	r7, #28
 810840a:	46bd      	mov	sp, r7
 810840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108410:	4770      	bx	lr
	...

08108414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108414:	b480      	push	{r7}
 8108416:	b085      	sub	sp, #20
 8108418:	af00      	add	r7, sp, #0
 810841a:	6078      	str	r0, [r7, #4]
 810841c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810841e:	687b      	ldr	r3, [r7, #4]
 8108420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108424:	2b01      	cmp	r3, #1
 8108426:	d101      	bne.n	810842c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108428:	2302      	movs	r3, #2
 810842a:	e06d      	b.n	8108508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	2201      	movs	r2, #1
 8108430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	2202      	movs	r2, #2
 8108438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	681b      	ldr	r3, [r3, #0]
 8108440:	685b      	ldr	r3, [r3, #4]
 8108442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108444:	687b      	ldr	r3, [r7, #4]
 8108446:	681b      	ldr	r3, [r3, #0]
 8108448:	689b      	ldr	r3, [r3, #8]
 810844a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810844c:	687b      	ldr	r3, [r7, #4]
 810844e:	681b      	ldr	r3, [r3, #0]
 8108450:	4a30      	ldr	r2, [pc, #192]	@ (8108514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108452:	4293      	cmp	r3, r2
 8108454:	d004      	beq.n	8108460 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108456:	687b      	ldr	r3, [r7, #4]
 8108458:	681b      	ldr	r3, [r3, #0]
 810845a:	4a2f      	ldr	r2, [pc, #188]	@ (8108518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810845c:	4293      	cmp	r3, r2
 810845e:	d108      	bne.n	8108472 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108460:	68fb      	ldr	r3, [r7, #12]
 8108462:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8108466:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108468:	683b      	ldr	r3, [r7, #0]
 810846a:	685b      	ldr	r3, [r3, #4]
 810846c:	68fa      	ldr	r2, [r7, #12]
 810846e:	4313      	orrs	r3, r2
 8108470:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8108472:	68fb      	ldr	r3, [r7, #12]
 8108474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108478:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810847a:	683b      	ldr	r3, [r7, #0]
 810847c:	681b      	ldr	r3, [r3, #0]
 810847e:	68fa      	ldr	r2, [r7, #12]
 8108480:	4313      	orrs	r3, r2
 8108482:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	681b      	ldr	r3, [r3, #0]
 8108488:	68fa      	ldr	r2, [r7, #12]
 810848a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	4a20      	ldr	r2, [pc, #128]	@ (8108514 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108492:	4293      	cmp	r3, r2
 8108494:	d022      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810849e:	d01d      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084a0:	687b      	ldr	r3, [r7, #4]
 81084a2:	681b      	ldr	r3, [r3, #0]
 81084a4:	4a1d      	ldr	r2, [pc, #116]	@ (810851c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81084a6:	4293      	cmp	r3, r2
 81084a8:	d018      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	681b      	ldr	r3, [r3, #0]
 81084ae:	4a1c      	ldr	r2, [pc, #112]	@ (8108520 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81084b0:	4293      	cmp	r3, r2
 81084b2:	d013      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084b4:	687b      	ldr	r3, [r7, #4]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	4a1a      	ldr	r2, [pc, #104]	@ (8108524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81084ba:	4293      	cmp	r3, r2
 81084bc:	d00e      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084be:	687b      	ldr	r3, [r7, #4]
 81084c0:	681b      	ldr	r3, [r3, #0]
 81084c2:	4a15      	ldr	r2, [pc, #84]	@ (8108518 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81084c4:	4293      	cmp	r3, r2
 81084c6:	d009      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084c8:	687b      	ldr	r3, [r7, #4]
 81084ca:	681b      	ldr	r3, [r3, #0]
 81084cc:	4a16      	ldr	r2, [pc, #88]	@ (8108528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81084ce:	4293      	cmp	r3, r2
 81084d0:	d004      	beq.n	81084dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084d2:	687b      	ldr	r3, [r7, #4]
 81084d4:	681b      	ldr	r3, [r3, #0]
 81084d6:	4a15      	ldr	r2, [pc, #84]	@ (810852c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81084d8:	4293      	cmp	r3, r2
 81084da:	d10c      	bne.n	81084f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81084dc:	68bb      	ldr	r3, [r7, #8]
 81084de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81084e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81084e4:	683b      	ldr	r3, [r7, #0]
 81084e6:	689b      	ldr	r3, [r3, #8]
 81084e8:	68ba      	ldr	r2, [r7, #8]
 81084ea:	4313      	orrs	r3, r2
 81084ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	681b      	ldr	r3, [r3, #0]
 81084f2:	68ba      	ldr	r2, [r7, #8]
 81084f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81084f6:	687b      	ldr	r3, [r7, #4]
 81084f8:	2201      	movs	r2, #1
 81084fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	2200      	movs	r2, #0
 8108502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8108506:	2300      	movs	r3, #0
}
 8108508:	4618      	mov	r0, r3
 810850a:	3714      	adds	r7, #20
 810850c:	46bd      	mov	sp, r7
 810850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108512:	4770      	bx	lr
 8108514:	40010000 	.word	0x40010000
 8108518:	40010400 	.word	0x40010400
 810851c:	40000400 	.word	0x40000400
 8108520:	40000800 	.word	0x40000800
 8108524:	40000c00 	.word	0x40000c00
 8108528:	40001800 	.word	0x40001800
 810852c:	40014000 	.word	0x40014000

08108530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108530:	b480      	push	{r7}
 8108532:	b083      	sub	sp, #12
 8108534:	af00      	add	r7, sp, #0
 8108536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108538:	bf00      	nop
 810853a:	370c      	adds	r7, #12
 810853c:	46bd      	mov	sp, r7
 810853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108542:	4770      	bx	lr

08108544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8108544:	b480      	push	{r7}
 8108546:	b083      	sub	sp, #12
 8108548:	af00      	add	r7, sp, #0
 810854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810854c:	bf00      	nop
 810854e:	370c      	adds	r7, #12
 8108550:	46bd      	mov	sp, r7
 8108552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108556:	4770      	bx	lr

08108558 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108558:	b480      	push	{r7}
 810855a:	b083      	sub	sp, #12
 810855c:	af00      	add	r7, sp, #0
 810855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8108560:	bf00      	nop
 8108562:	370c      	adds	r7, #12
 8108564:	46bd      	mov	sp, r7
 8108566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810856a:	4770      	bx	lr

0810856c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810856c:	b580      	push	{r7, lr}
 810856e:	b082      	sub	sp, #8
 8108570:	af00      	add	r7, sp, #0
 8108572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108574:	687b      	ldr	r3, [r7, #4]
 8108576:	2b00      	cmp	r3, #0
 8108578:	d101      	bne.n	810857e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810857a:	2301      	movs	r3, #1
 810857c:	e042      	b.n	8108604 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108584:	2b00      	cmp	r3, #0
 8108586:	d106      	bne.n	8108596 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108588:	687b      	ldr	r3, [r7, #4]
 810858a:	2200      	movs	r2, #0
 810858c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108590:	6878      	ldr	r0, [r7, #4]
 8108592:	f7fa fbb9 	bl	8102d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	2224      	movs	r2, #36	@ 0x24
 810859a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810859e:	687b      	ldr	r3, [r7, #4]
 81085a0:	681b      	ldr	r3, [r3, #0]
 81085a2:	681a      	ldr	r2, [r3, #0]
 81085a4:	687b      	ldr	r3, [r7, #4]
 81085a6:	681b      	ldr	r3, [r3, #0]
 81085a8:	f022 0201 	bic.w	r2, r2, #1
 81085ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81085b2:	2b00      	cmp	r3, #0
 81085b4:	d002      	beq.n	81085bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81085b6:	6878      	ldr	r0, [r7, #4]
 81085b8:	f000 fe1e 	bl	81091f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81085bc:	6878      	ldr	r0, [r7, #4]
 81085be:	f000 f8b3 	bl	8108728 <UART_SetConfig>
 81085c2:	4603      	mov	r3, r0
 81085c4:	2b01      	cmp	r3, #1
 81085c6:	d101      	bne.n	81085cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81085c8:	2301      	movs	r3, #1
 81085ca:	e01b      	b.n	8108604 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81085cc:	687b      	ldr	r3, [r7, #4]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	685a      	ldr	r2, [r3, #4]
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81085da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81085dc:	687b      	ldr	r3, [r7, #4]
 81085de:	681b      	ldr	r3, [r3, #0]
 81085e0:	689a      	ldr	r2, [r3, #8]
 81085e2:	687b      	ldr	r3, [r7, #4]
 81085e4:	681b      	ldr	r3, [r3, #0]
 81085e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81085ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81085ec:	687b      	ldr	r3, [r7, #4]
 81085ee:	681b      	ldr	r3, [r3, #0]
 81085f0:	681a      	ldr	r2, [r3, #0]
 81085f2:	687b      	ldr	r3, [r7, #4]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	f042 0201 	orr.w	r2, r2, #1
 81085fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81085fc:	6878      	ldr	r0, [r7, #4]
 81085fe:	f000 fe9d 	bl	810933c <UART_CheckIdleState>
 8108602:	4603      	mov	r3, r0
}
 8108604:	4618      	mov	r0, r3
 8108606:	3708      	adds	r7, #8
 8108608:	46bd      	mov	sp, r7
 810860a:	bd80      	pop	{r7, pc}

0810860c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810860c:	b580      	push	{r7, lr}
 810860e:	b08a      	sub	sp, #40	@ 0x28
 8108610:	af02      	add	r7, sp, #8
 8108612:	60f8      	str	r0, [r7, #12]
 8108614:	60b9      	str	r1, [r7, #8]
 8108616:	603b      	str	r3, [r7, #0]
 8108618:	4613      	mov	r3, r2
 810861a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810861c:	68fb      	ldr	r3, [r7, #12]
 810861e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108622:	2b20      	cmp	r3, #32
 8108624:	d17b      	bne.n	810871e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108626:	68bb      	ldr	r3, [r7, #8]
 8108628:	2b00      	cmp	r3, #0
 810862a:	d002      	beq.n	8108632 <HAL_UART_Transmit+0x26>
 810862c:	88fb      	ldrh	r3, [r7, #6]
 810862e:	2b00      	cmp	r3, #0
 8108630:	d101      	bne.n	8108636 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108632:	2301      	movs	r3, #1
 8108634:	e074      	b.n	8108720 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108636:	68fb      	ldr	r3, [r7, #12]
 8108638:	2200      	movs	r2, #0
 810863a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810863e:	68fb      	ldr	r3, [r7, #12]
 8108640:	2221      	movs	r2, #33	@ 0x21
 8108642:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108646:	f7fa fda5 	bl	8103194 <HAL_GetTick>
 810864a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810864c:	68fb      	ldr	r3, [r7, #12]
 810864e:	88fa      	ldrh	r2, [r7, #6]
 8108650:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8108654:	68fb      	ldr	r3, [r7, #12]
 8108656:	88fa      	ldrh	r2, [r7, #6]
 8108658:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810865c:	68fb      	ldr	r3, [r7, #12]
 810865e:	689b      	ldr	r3, [r3, #8]
 8108660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8108664:	d108      	bne.n	8108678 <HAL_UART_Transmit+0x6c>
 8108666:	68fb      	ldr	r3, [r7, #12]
 8108668:	691b      	ldr	r3, [r3, #16]
 810866a:	2b00      	cmp	r3, #0
 810866c:	d104      	bne.n	8108678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810866e:	2300      	movs	r3, #0
 8108670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108672:	68bb      	ldr	r3, [r7, #8]
 8108674:	61bb      	str	r3, [r7, #24]
 8108676:	e003      	b.n	8108680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108678:	68bb      	ldr	r3, [r7, #8]
 810867a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810867c:	2300      	movs	r3, #0
 810867e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108680:	e030      	b.n	81086e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108682:	683b      	ldr	r3, [r7, #0]
 8108684:	9300      	str	r3, [sp, #0]
 8108686:	697b      	ldr	r3, [r7, #20]
 8108688:	2200      	movs	r2, #0
 810868a:	2180      	movs	r1, #128	@ 0x80
 810868c:	68f8      	ldr	r0, [r7, #12]
 810868e:	f000 feff 	bl	8109490 <UART_WaitOnFlagUntilTimeout>
 8108692:	4603      	mov	r3, r0
 8108694:	2b00      	cmp	r3, #0
 8108696:	d005      	beq.n	81086a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108698:	68fb      	ldr	r3, [r7, #12]
 810869a:	2220      	movs	r2, #32
 810869c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81086a0:	2303      	movs	r3, #3
 81086a2:	e03d      	b.n	8108720 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81086a4:	69fb      	ldr	r3, [r7, #28]
 81086a6:	2b00      	cmp	r3, #0
 81086a8:	d10b      	bne.n	81086c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81086aa:	69bb      	ldr	r3, [r7, #24]
 81086ac:	881b      	ldrh	r3, [r3, #0]
 81086ae:	461a      	mov	r2, r3
 81086b0:	68fb      	ldr	r3, [r7, #12]
 81086b2:	681b      	ldr	r3, [r3, #0]
 81086b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81086b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81086ba:	69bb      	ldr	r3, [r7, #24]
 81086bc:	3302      	adds	r3, #2
 81086be:	61bb      	str	r3, [r7, #24]
 81086c0:	e007      	b.n	81086d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81086c2:	69fb      	ldr	r3, [r7, #28]
 81086c4:	781a      	ldrb	r2, [r3, #0]
 81086c6:	68fb      	ldr	r3, [r7, #12]
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81086cc:	69fb      	ldr	r3, [r7, #28]
 81086ce:	3301      	adds	r3, #1
 81086d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81086d2:	68fb      	ldr	r3, [r7, #12]
 81086d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81086d8:	b29b      	uxth	r3, r3
 81086da:	3b01      	subs	r3, #1
 81086dc:	b29a      	uxth	r2, r3
 81086de:	68fb      	ldr	r3, [r7, #12]
 81086e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81086e4:	68fb      	ldr	r3, [r7, #12]
 81086e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81086ea:	b29b      	uxth	r3, r3
 81086ec:	2b00      	cmp	r3, #0
 81086ee:	d1c8      	bne.n	8108682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81086f0:	683b      	ldr	r3, [r7, #0]
 81086f2:	9300      	str	r3, [sp, #0]
 81086f4:	697b      	ldr	r3, [r7, #20]
 81086f6:	2200      	movs	r2, #0
 81086f8:	2140      	movs	r1, #64	@ 0x40
 81086fa:	68f8      	ldr	r0, [r7, #12]
 81086fc:	f000 fec8 	bl	8109490 <UART_WaitOnFlagUntilTimeout>
 8108700:	4603      	mov	r3, r0
 8108702:	2b00      	cmp	r3, #0
 8108704:	d005      	beq.n	8108712 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108706:	68fb      	ldr	r3, [r7, #12]
 8108708:	2220      	movs	r2, #32
 810870a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810870e:	2303      	movs	r3, #3
 8108710:	e006      	b.n	8108720 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108712:	68fb      	ldr	r3, [r7, #12]
 8108714:	2220      	movs	r2, #32
 8108716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810871a:	2300      	movs	r3, #0
 810871c:	e000      	b.n	8108720 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810871e:	2302      	movs	r3, #2
  }
}
 8108720:	4618      	mov	r0, r3
 8108722:	3720      	adds	r7, #32
 8108724:	46bd      	mov	sp, r7
 8108726:	bd80      	pop	{r7, pc}

08108728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810872c:	b092      	sub	sp, #72	@ 0x48
 810872e:	af00      	add	r7, sp, #0
 8108730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108732:	2300      	movs	r3, #0
 8108734:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108738:	697b      	ldr	r3, [r7, #20]
 810873a:	689a      	ldr	r2, [r3, #8]
 810873c:	697b      	ldr	r3, [r7, #20]
 810873e:	691b      	ldr	r3, [r3, #16]
 8108740:	431a      	orrs	r2, r3
 8108742:	697b      	ldr	r3, [r7, #20]
 8108744:	695b      	ldr	r3, [r3, #20]
 8108746:	431a      	orrs	r2, r3
 8108748:	697b      	ldr	r3, [r7, #20]
 810874a:	69db      	ldr	r3, [r3, #28]
 810874c:	4313      	orrs	r3, r2
 810874e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108750:	697b      	ldr	r3, [r7, #20]
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	681a      	ldr	r2, [r3, #0]
 8108756:	4bbd      	ldr	r3, [pc, #756]	@ (8108a4c <UART_SetConfig+0x324>)
 8108758:	4013      	ands	r3, r2
 810875a:	697a      	ldr	r2, [r7, #20]
 810875c:	6812      	ldr	r2, [r2, #0]
 810875e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108760:	430b      	orrs	r3, r1
 8108762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108764:	697b      	ldr	r3, [r7, #20]
 8108766:	681b      	ldr	r3, [r3, #0]
 8108768:	685b      	ldr	r3, [r3, #4]
 810876a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810876e:	697b      	ldr	r3, [r7, #20]
 8108770:	68da      	ldr	r2, [r3, #12]
 8108772:	697b      	ldr	r3, [r7, #20]
 8108774:	681b      	ldr	r3, [r3, #0]
 8108776:	430a      	orrs	r2, r1
 8108778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810877a:	697b      	ldr	r3, [r7, #20]
 810877c:	699b      	ldr	r3, [r3, #24]
 810877e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108780:	697b      	ldr	r3, [r7, #20]
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	4ab2      	ldr	r2, [pc, #712]	@ (8108a50 <UART_SetConfig+0x328>)
 8108786:	4293      	cmp	r3, r2
 8108788:	d004      	beq.n	8108794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810878a:	697b      	ldr	r3, [r7, #20]
 810878c:	6a1b      	ldr	r3, [r3, #32]
 810878e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108790:	4313      	orrs	r3, r2
 8108792:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108794:	697b      	ldr	r3, [r7, #20]
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	689b      	ldr	r3, [r3, #8]
 810879a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810879e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81087a2:	697a      	ldr	r2, [r7, #20]
 81087a4:	6812      	ldr	r2, [r2, #0]
 81087a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81087a8:	430b      	orrs	r3, r1
 81087aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81087ac:	697b      	ldr	r3, [r7, #20]
 81087ae:	681b      	ldr	r3, [r3, #0]
 81087b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81087b2:	f023 010f 	bic.w	r1, r3, #15
 81087b6:	697b      	ldr	r3, [r7, #20]
 81087b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81087ba:	697b      	ldr	r3, [r7, #20]
 81087bc:	681b      	ldr	r3, [r3, #0]
 81087be:	430a      	orrs	r2, r1
 81087c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81087c2:	697b      	ldr	r3, [r7, #20]
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	4aa3      	ldr	r2, [pc, #652]	@ (8108a54 <UART_SetConfig+0x32c>)
 81087c8:	4293      	cmp	r3, r2
 81087ca:	d177      	bne.n	81088bc <UART_SetConfig+0x194>
 81087cc:	4ba2      	ldr	r3, [pc, #648]	@ (8108a58 <UART_SetConfig+0x330>)
 81087ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81087d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81087d4:	2b28      	cmp	r3, #40	@ 0x28
 81087d6:	d86d      	bhi.n	81088b4 <UART_SetConfig+0x18c>
 81087d8:	a201      	add	r2, pc, #4	@ (adr r2, 81087e0 <UART_SetConfig+0xb8>)
 81087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087de:	bf00      	nop
 81087e0:	08108885 	.word	0x08108885
 81087e4:	081088b5 	.word	0x081088b5
 81087e8:	081088b5 	.word	0x081088b5
 81087ec:	081088b5 	.word	0x081088b5
 81087f0:	081088b5 	.word	0x081088b5
 81087f4:	081088b5 	.word	0x081088b5
 81087f8:	081088b5 	.word	0x081088b5
 81087fc:	081088b5 	.word	0x081088b5
 8108800:	0810888d 	.word	0x0810888d
 8108804:	081088b5 	.word	0x081088b5
 8108808:	081088b5 	.word	0x081088b5
 810880c:	081088b5 	.word	0x081088b5
 8108810:	081088b5 	.word	0x081088b5
 8108814:	081088b5 	.word	0x081088b5
 8108818:	081088b5 	.word	0x081088b5
 810881c:	081088b5 	.word	0x081088b5
 8108820:	08108895 	.word	0x08108895
 8108824:	081088b5 	.word	0x081088b5
 8108828:	081088b5 	.word	0x081088b5
 810882c:	081088b5 	.word	0x081088b5
 8108830:	081088b5 	.word	0x081088b5
 8108834:	081088b5 	.word	0x081088b5
 8108838:	081088b5 	.word	0x081088b5
 810883c:	081088b5 	.word	0x081088b5
 8108840:	0810889d 	.word	0x0810889d
 8108844:	081088b5 	.word	0x081088b5
 8108848:	081088b5 	.word	0x081088b5
 810884c:	081088b5 	.word	0x081088b5
 8108850:	081088b5 	.word	0x081088b5
 8108854:	081088b5 	.word	0x081088b5
 8108858:	081088b5 	.word	0x081088b5
 810885c:	081088b5 	.word	0x081088b5
 8108860:	081088a5 	.word	0x081088a5
 8108864:	081088b5 	.word	0x081088b5
 8108868:	081088b5 	.word	0x081088b5
 810886c:	081088b5 	.word	0x081088b5
 8108870:	081088b5 	.word	0x081088b5
 8108874:	081088b5 	.word	0x081088b5
 8108878:	081088b5 	.word	0x081088b5
 810887c:	081088b5 	.word	0x081088b5
 8108880:	081088ad 	.word	0x081088ad
 8108884:	2301      	movs	r3, #1
 8108886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810888a:	e220      	b.n	8108cce <UART_SetConfig+0x5a6>
 810888c:	2304      	movs	r3, #4
 810888e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108892:	e21c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108894:	2308      	movs	r3, #8
 8108896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810889a:	e218      	b.n	8108cce <UART_SetConfig+0x5a6>
 810889c:	2310      	movs	r3, #16
 810889e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088a2:	e214      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088a4:	2320      	movs	r3, #32
 81088a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088aa:	e210      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088ac:	2340      	movs	r3, #64	@ 0x40
 81088ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088b2:	e20c      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088b4:	2380      	movs	r3, #128	@ 0x80
 81088b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088ba:	e208      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088bc:	697b      	ldr	r3, [r7, #20]
 81088be:	681b      	ldr	r3, [r3, #0]
 81088c0:	4a66      	ldr	r2, [pc, #408]	@ (8108a5c <UART_SetConfig+0x334>)
 81088c2:	4293      	cmp	r3, r2
 81088c4:	d130      	bne.n	8108928 <UART_SetConfig+0x200>
 81088c6:	4b64      	ldr	r3, [pc, #400]	@ (8108a58 <UART_SetConfig+0x330>)
 81088c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81088ca:	f003 0307 	and.w	r3, r3, #7
 81088ce:	2b05      	cmp	r3, #5
 81088d0:	d826      	bhi.n	8108920 <UART_SetConfig+0x1f8>
 81088d2:	a201      	add	r2, pc, #4	@ (adr r2, 81088d8 <UART_SetConfig+0x1b0>)
 81088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81088d8:	081088f1 	.word	0x081088f1
 81088dc:	081088f9 	.word	0x081088f9
 81088e0:	08108901 	.word	0x08108901
 81088e4:	08108909 	.word	0x08108909
 81088e8:	08108911 	.word	0x08108911
 81088ec:	08108919 	.word	0x08108919
 81088f0:	2300      	movs	r3, #0
 81088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088f6:	e1ea      	b.n	8108cce <UART_SetConfig+0x5a6>
 81088f8:	2304      	movs	r3, #4
 81088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088fe:	e1e6      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108900:	2308      	movs	r3, #8
 8108902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108906:	e1e2      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108908:	2310      	movs	r3, #16
 810890a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810890e:	e1de      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108910:	2320      	movs	r3, #32
 8108912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108916:	e1da      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108918:	2340      	movs	r3, #64	@ 0x40
 810891a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810891e:	e1d6      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108920:	2380      	movs	r3, #128	@ 0x80
 8108922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108926:	e1d2      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108928:	697b      	ldr	r3, [r7, #20]
 810892a:	681b      	ldr	r3, [r3, #0]
 810892c:	4a4c      	ldr	r2, [pc, #304]	@ (8108a60 <UART_SetConfig+0x338>)
 810892e:	4293      	cmp	r3, r2
 8108930:	d130      	bne.n	8108994 <UART_SetConfig+0x26c>
 8108932:	4b49      	ldr	r3, [pc, #292]	@ (8108a58 <UART_SetConfig+0x330>)
 8108934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108936:	f003 0307 	and.w	r3, r3, #7
 810893a:	2b05      	cmp	r3, #5
 810893c:	d826      	bhi.n	810898c <UART_SetConfig+0x264>
 810893e:	a201      	add	r2, pc, #4	@ (adr r2, 8108944 <UART_SetConfig+0x21c>)
 8108940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108944:	0810895d 	.word	0x0810895d
 8108948:	08108965 	.word	0x08108965
 810894c:	0810896d 	.word	0x0810896d
 8108950:	08108975 	.word	0x08108975
 8108954:	0810897d 	.word	0x0810897d
 8108958:	08108985 	.word	0x08108985
 810895c:	2300      	movs	r3, #0
 810895e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108962:	e1b4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108964:	2304      	movs	r3, #4
 8108966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810896a:	e1b0      	b.n	8108cce <UART_SetConfig+0x5a6>
 810896c:	2308      	movs	r3, #8
 810896e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108972:	e1ac      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108974:	2310      	movs	r3, #16
 8108976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810897a:	e1a8      	b.n	8108cce <UART_SetConfig+0x5a6>
 810897c:	2320      	movs	r3, #32
 810897e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108982:	e1a4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108984:	2340      	movs	r3, #64	@ 0x40
 8108986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810898a:	e1a0      	b.n	8108cce <UART_SetConfig+0x5a6>
 810898c:	2380      	movs	r3, #128	@ 0x80
 810898e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108992:	e19c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108994:	697b      	ldr	r3, [r7, #20]
 8108996:	681b      	ldr	r3, [r3, #0]
 8108998:	4a32      	ldr	r2, [pc, #200]	@ (8108a64 <UART_SetConfig+0x33c>)
 810899a:	4293      	cmp	r3, r2
 810899c:	d130      	bne.n	8108a00 <UART_SetConfig+0x2d8>
 810899e:	4b2e      	ldr	r3, [pc, #184]	@ (8108a58 <UART_SetConfig+0x330>)
 81089a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81089a2:	f003 0307 	and.w	r3, r3, #7
 81089a6:	2b05      	cmp	r3, #5
 81089a8:	d826      	bhi.n	81089f8 <UART_SetConfig+0x2d0>
 81089aa:	a201      	add	r2, pc, #4	@ (adr r2, 81089b0 <UART_SetConfig+0x288>)
 81089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089b0:	081089c9 	.word	0x081089c9
 81089b4:	081089d1 	.word	0x081089d1
 81089b8:	081089d9 	.word	0x081089d9
 81089bc:	081089e1 	.word	0x081089e1
 81089c0:	081089e9 	.word	0x081089e9
 81089c4:	081089f1 	.word	0x081089f1
 81089c8:	2300      	movs	r3, #0
 81089ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089ce:	e17e      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089d0:	2304      	movs	r3, #4
 81089d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089d6:	e17a      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089d8:	2308      	movs	r3, #8
 81089da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089de:	e176      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089e0:	2310      	movs	r3, #16
 81089e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089e6:	e172      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089e8:	2320      	movs	r3, #32
 81089ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089ee:	e16e      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089f0:	2340      	movs	r3, #64	@ 0x40
 81089f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089f6:	e16a      	b.n	8108cce <UART_SetConfig+0x5a6>
 81089f8:	2380      	movs	r3, #128	@ 0x80
 81089fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089fe:	e166      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a00:	697b      	ldr	r3, [r7, #20]
 8108a02:	681b      	ldr	r3, [r3, #0]
 8108a04:	4a18      	ldr	r2, [pc, #96]	@ (8108a68 <UART_SetConfig+0x340>)
 8108a06:	4293      	cmp	r3, r2
 8108a08:	d140      	bne.n	8108a8c <UART_SetConfig+0x364>
 8108a0a:	4b13      	ldr	r3, [pc, #76]	@ (8108a58 <UART_SetConfig+0x330>)
 8108a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a0e:	f003 0307 	and.w	r3, r3, #7
 8108a12:	2b05      	cmp	r3, #5
 8108a14:	d836      	bhi.n	8108a84 <UART_SetConfig+0x35c>
 8108a16:	a201      	add	r2, pc, #4	@ (adr r2, 8108a1c <UART_SetConfig+0x2f4>)
 8108a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a1c:	08108a35 	.word	0x08108a35
 8108a20:	08108a3d 	.word	0x08108a3d
 8108a24:	08108a45 	.word	0x08108a45
 8108a28:	08108a6d 	.word	0x08108a6d
 8108a2c:	08108a75 	.word	0x08108a75
 8108a30:	08108a7d 	.word	0x08108a7d
 8108a34:	2300      	movs	r3, #0
 8108a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a3a:	e148      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a3c:	2304      	movs	r3, #4
 8108a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a42:	e144      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a44:	2308      	movs	r3, #8
 8108a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a4a:	e140      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a4c:	cfff69f3 	.word	0xcfff69f3
 8108a50:	58000c00 	.word	0x58000c00
 8108a54:	40011000 	.word	0x40011000
 8108a58:	58024400 	.word	0x58024400
 8108a5c:	40004400 	.word	0x40004400
 8108a60:	40004800 	.word	0x40004800
 8108a64:	40004c00 	.word	0x40004c00
 8108a68:	40005000 	.word	0x40005000
 8108a6c:	2310      	movs	r3, #16
 8108a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a72:	e12c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a74:	2320      	movs	r3, #32
 8108a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a7a:	e128      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a7c:	2340      	movs	r3, #64	@ 0x40
 8108a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a82:	e124      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a84:	2380      	movs	r3, #128	@ 0x80
 8108a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a8a:	e120      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108a8c:	697b      	ldr	r3, [r7, #20]
 8108a8e:	681b      	ldr	r3, [r3, #0]
 8108a90:	4acb      	ldr	r2, [pc, #812]	@ (8108dc0 <UART_SetConfig+0x698>)
 8108a92:	4293      	cmp	r3, r2
 8108a94:	d176      	bne.n	8108b84 <UART_SetConfig+0x45c>
 8108a96:	4bcb      	ldr	r3, [pc, #812]	@ (8108dc4 <UART_SetConfig+0x69c>)
 8108a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108a9e:	2b28      	cmp	r3, #40	@ 0x28
 8108aa0:	d86c      	bhi.n	8108b7c <UART_SetConfig+0x454>
 8108aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8108aa8 <UART_SetConfig+0x380>)
 8108aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108aa8:	08108b4d 	.word	0x08108b4d
 8108aac:	08108b7d 	.word	0x08108b7d
 8108ab0:	08108b7d 	.word	0x08108b7d
 8108ab4:	08108b7d 	.word	0x08108b7d
 8108ab8:	08108b7d 	.word	0x08108b7d
 8108abc:	08108b7d 	.word	0x08108b7d
 8108ac0:	08108b7d 	.word	0x08108b7d
 8108ac4:	08108b7d 	.word	0x08108b7d
 8108ac8:	08108b55 	.word	0x08108b55
 8108acc:	08108b7d 	.word	0x08108b7d
 8108ad0:	08108b7d 	.word	0x08108b7d
 8108ad4:	08108b7d 	.word	0x08108b7d
 8108ad8:	08108b7d 	.word	0x08108b7d
 8108adc:	08108b7d 	.word	0x08108b7d
 8108ae0:	08108b7d 	.word	0x08108b7d
 8108ae4:	08108b7d 	.word	0x08108b7d
 8108ae8:	08108b5d 	.word	0x08108b5d
 8108aec:	08108b7d 	.word	0x08108b7d
 8108af0:	08108b7d 	.word	0x08108b7d
 8108af4:	08108b7d 	.word	0x08108b7d
 8108af8:	08108b7d 	.word	0x08108b7d
 8108afc:	08108b7d 	.word	0x08108b7d
 8108b00:	08108b7d 	.word	0x08108b7d
 8108b04:	08108b7d 	.word	0x08108b7d
 8108b08:	08108b65 	.word	0x08108b65
 8108b0c:	08108b7d 	.word	0x08108b7d
 8108b10:	08108b7d 	.word	0x08108b7d
 8108b14:	08108b7d 	.word	0x08108b7d
 8108b18:	08108b7d 	.word	0x08108b7d
 8108b1c:	08108b7d 	.word	0x08108b7d
 8108b20:	08108b7d 	.word	0x08108b7d
 8108b24:	08108b7d 	.word	0x08108b7d
 8108b28:	08108b6d 	.word	0x08108b6d
 8108b2c:	08108b7d 	.word	0x08108b7d
 8108b30:	08108b7d 	.word	0x08108b7d
 8108b34:	08108b7d 	.word	0x08108b7d
 8108b38:	08108b7d 	.word	0x08108b7d
 8108b3c:	08108b7d 	.word	0x08108b7d
 8108b40:	08108b7d 	.word	0x08108b7d
 8108b44:	08108b7d 	.word	0x08108b7d
 8108b48:	08108b75 	.word	0x08108b75
 8108b4c:	2301      	movs	r3, #1
 8108b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b52:	e0bc      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b54:	2304      	movs	r3, #4
 8108b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b5a:	e0b8      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b5c:	2308      	movs	r3, #8
 8108b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b62:	e0b4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b64:	2310      	movs	r3, #16
 8108b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b6a:	e0b0      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b6c:	2320      	movs	r3, #32
 8108b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b72:	e0ac      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b74:	2340      	movs	r3, #64	@ 0x40
 8108b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b7a:	e0a8      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b7c:	2380      	movs	r3, #128	@ 0x80
 8108b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b82:	e0a4      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108b84:	697b      	ldr	r3, [r7, #20]
 8108b86:	681b      	ldr	r3, [r3, #0]
 8108b88:	4a8f      	ldr	r2, [pc, #572]	@ (8108dc8 <UART_SetConfig+0x6a0>)
 8108b8a:	4293      	cmp	r3, r2
 8108b8c:	d130      	bne.n	8108bf0 <UART_SetConfig+0x4c8>
 8108b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8108dc4 <UART_SetConfig+0x69c>)
 8108b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108b92:	f003 0307 	and.w	r3, r3, #7
 8108b96:	2b05      	cmp	r3, #5
 8108b98:	d826      	bhi.n	8108be8 <UART_SetConfig+0x4c0>
 8108b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8108ba0 <UART_SetConfig+0x478>)
 8108b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ba0:	08108bb9 	.word	0x08108bb9
 8108ba4:	08108bc1 	.word	0x08108bc1
 8108ba8:	08108bc9 	.word	0x08108bc9
 8108bac:	08108bd1 	.word	0x08108bd1
 8108bb0:	08108bd9 	.word	0x08108bd9
 8108bb4:	08108be1 	.word	0x08108be1
 8108bb8:	2300      	movs	r3, #0
 8108bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bbe:	e086      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bc0:	2304      	movs	r3, #4
 8108bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bc6:	e082      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bc8:	2308      	movs	r3, #8
 8108bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bce:	e07e      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bd0:	2310      	movs	r3, #16
 8108bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bd6:	e07a      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bd8:	2320      	movs	r3, #32
 8108bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bde:	e076      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108be0:	2340      	movs	r3, #64	@ 0x40
 8108be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108be6:	e072      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108be8:	2380      	movs	r3, #128	@ 0x80
 8108bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bee:	e06e      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108bf0:	697b      	ldr	r3, [r7, #20]
 8108bf2:	681b      	ldr	r3, [r3, #0]
 8108bf4:	4a75      	ldr	r2, [pc, #468]	@ (8108dcc <UART_SetConfig+0x6a4>)
 8108bf6:	4293      	cmp	r3, r2
 8108bf8:	d130      	bne.n	8108c5c <UART_SetConfig+0x534>
 8108bfa:	4b72      	ldr	r3, [pc, #456]	@ (8108dc4 <UART_SetConfig+0x69c>)
 8108bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108bfe:	f003 0307 	and.w	r3, r3, #7
 8108c02:	2b05      	cmp	r3, #5
 8108c04:	d826      	bhi.n	8108c54 <UART_SetConfig+0x52c>
 8108c06:	a201      	add	r2, pc, #4	@ (adr r2, 8108c0c <UART_SetConfig+0x4e4>)
 8108c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c0c:	08108c25 	.word	0x08108c25
 8108c10:	08108c2d 	.word	0x08108c2d
 8108c14:	08108c35 	.word	0x08108c35
 8108c18:	08108c3d 	.word	0x08108c3d
 8108c1c:	08108c45 	.word	0x08108c45
 8108c20:	08108c4d 	.word	0x08108c4d
 8108c24:	2300      	movs	r3, #0
 8108c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c2a:	e050      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c2c:	2304      	movs	r3, #4
 8108c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c32:	e04c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c34:	2308      	movs	r3, #8
 8108c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c3a:	e048      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c3c:	2310      	movs	r3, #16
 8108c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c42:	e044      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c44:	2320      	movs	r3, #32
 8108c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c4a:	e040      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c4c:	2340      	movs	r3, #64	@ 0x40
 8108c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c52:	e03c      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c54:	2380      	movs	r3, #128	@ 0x80
 8108c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c5a:	e038      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c5c:	697b      	ldr	r3, [r7, #20]
 8108c5e:	681b      	ldr	r3, [r3, #0]
 8108c60:	4a5b      	ldr	r2, [pc, #364]	@ (8108dd0 <UART_SetConfig+0x6a8>)
 8108c62:	4293      	cmp	r3, r2
 8108c64:	d130      	bne.n	8108cc8 <UART_SetConfig+0x5a0>
 8108c66:	4b57      	ldr	r3, [pc, #348]	@ (8108dc4 <UART_SetConfig+0x69c>)
 8108c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108c6a:	f003 0307 	and.w	r3, r3, #7
 8108c6e:	2b05      	cmp	r3, #5
 8108c70:	d826      	bhi.n	8108cc0 <UART_SetConfig+0x598>
 8108c72:	a201      	add	r2, pc, #4	@ (adr r2, 8108c78 <UART_SetConfig+0x550>)
 8108c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c78:	08108c91 	.word	0x08108c91
 8108c7c:	08108c99 	.word	0x08108c99
 8108c80:	08108ca1 	.word	0x08108ca1
 8108c84:	08108ca9 	.word	0x08108ca9
 8108c88:	08108cb1 	.word	0x08108cb1
 8108c8c:	08108cb9 	.word	0x08108cb9
 8108c90:	2302      	movs	r3, #2
 8108c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c96:	e01a      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108c98:	2304      	movs	r3, #4
 8108c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c9e:	e016      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108ca0:	2308      	movs	r3, #8
 8108ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ca6:	e012      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108ca8:	2310      	movs	r3, #16
 8108caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cae:	e00e      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cb0:	2320      	movs	r3, #32
 8108cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cb6:	e00a      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cb8:	2340      	movs	r3, #64	@ 0x40
 8108cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cbe:	e006      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cc0:	2380      	movs	r3, #128	@ 0x80
 8108cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cc6:	e002      	b.n	8108cce <UART_SetConfig+0x5a6>
 8108cc8:	2380      	movs	r3, #128	@ 0x80
 8108cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108cce:	697b      	ldr	r3, [r7, #20]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	4a3f      	ldr	r2, [pc, #252]	@ (8108dd0 <UART_SetConfig+0x6a8>)
 8108cd4:	4293      	cmp	r3, r2
 8108cd6:	f040 80f8 	bne.w	8108eca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108cda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108cde:	2b20      	cmp	r3, #32
 8108ce0:	dc46      	bgt.n	8108d70 <UART_SetConfig+0x648>
 8108ce2:	2b02      	cmp	r3, #2
 8108ce4:	f2c0 8082 	blt.w	8108dec <UART_SetConfig+0x6c4>
 8108ce8:	3b02      	subs	r3, #2
 8108cea:	2b1e      	cmp	r3, #30
 8108cec:	d87e      	bhi.n	8108dec <UART_SetConfig+0x6c4>
 8108cee:	a201      	add	r2, pc, #4	@ (adr r2, 8108cf4 <UART_SetConfig+0x5cc>)
 8108cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108cf4:	08108d77 	.word	0x08108d77
 8108cf8:	08108ded 	.word	0x08108ded
 8108cfc:	08108d7f 	.word	0x08108d7f
 8108d00:	08108ded 	.word	0x08108ded
 8108d04:	08108ded 	.word	0x08108ded
 8108d08:	08108ded 	.word	0x08108ded
 8108d0c:	08108d8f 	.word	0x08108d8f
 8108d10:	08108ded 	.word	0x08108ded
 8108d14:	08108ded 	.word	0x08108ded
 8108d18:	08108ded 	.word	0x08108ded
 8108d1c:	08108ded 	.word	0x08108ded
 8108d20:	08108ded 	.word	0x08108ded
 8108d24:	08108ded 	.word	0x08108ded
 8108d28:	08108ded 	.word	0x08108ded
 8108d2c:	08108d9f 	.word	0x08108d9f
 8108d30:	08108ded 	.word	0x08108ded
 8108d34:	08108ded 	.word	0x08108ded
 8108d38:	08108ded 	.word	0x08108ded
 8108d3c:	08108ded 	.word	0x08108ded
 8108d40:	08108ded 	.word	0x08108ded
 8108d44:	08108ded 	.word	0x08108ded
 8108d48:	08108ded 	.word	0x08108ded
 8108d4c:	08108ded 	.word	0x08108ded
 8108d50:	08108ded 	.word	0x08108ded
 8108d54:	08108ded 	.word	0x08108ded
 8108d58:	08108ded 	.word	0x08108ded
 8108d5c:	08108ded 	.word	0x08108ded
 8108d60:	08108ded 	.word	0x08108ded
 8108d64:	08108ded 	.word	0x08108ded
 8108d68:	08108ded 	.word	0x08108ded
 8108d6c:	08108ddf 	.word	0x08108ddf
 8108d70:	2b40      	cmp	r3, #64	@ 0x40
 8108d72:	d037      	beq.n	8108de4 <UART_SetConfig+0x6bc>
 8108d74:	e03a      	b.n	8108dec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108d76:	f7fc ff8f 	bl	8105c98 <HAL_RCCEx_GetD3PCLK1Freq>
 8108d7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108d7c:	e03c      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108d82:	4618      	mov	r0, r3
 8108d84:	f7fc ff9e 	bl	8105cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108d8c:	e034      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108d8e:	f107 0318 	add.w	r3, r7, #24
 8108d92:	4618      	mov	r0, r3
 8108d94:	f7fd f8ea 	bl	8105f6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108d98:	69fb      	ldr	r3, [r7, #28]
 8108d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108d9c:	e02c      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108d9e:	4b09      	ldr	r3, [pc, #36]	@ (8108dc4 <UART_SetConfig+0x69c>)
 8108da0:	681b      	ldr	r3, [r3, #0]
 8108da2:	f003 0320 	and.w	r3, r3, #32
 8108da6:	2b00      	cmp	r3, #0
 8108da8:	d016      	beq.n	8108dd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108daa:	4b06      	ldr	r3, [pc, #24]	@ (8108dc4 <UART_SetConfig+0x69c>)
 8108dac:	681b      	ldr	r3, [r3, #0]
 8108dae:	08db      	lsrs	r3, r3, #3
 8108db0:	f003 0303 	and.w	r3, r3, #3
 8108db4:	4a07      	ldr	r2, [pc, #28]	@ (8108dd4 <UART_SetConfig+0x6ac>)
 8108db6:	fa22 f303 	lsr.w	r3, r2, r3
 8108dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108dbc:	e01c      	b.n	8108df8 <UART_SetConfig+0x6d0>
 8108dbe:	bf00      	nop
 8108dc0:	40011400 	.word	0x40011400
 8108dc4:	58024400 	.word	0x58024400
 8108dc8:	40007800 	.word	0x40007800
 8108dcc:	40007c00 	.word	0x40007c00
 8108dd0:	58000c00 	.word	0x58000c00
 8108dd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108dd8:	4b9d      	ldr	r3, [pc, #628]	@ (8109050 <UART_SetConfig+0x928>)
 8108dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108ddc:	e00c      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108dde:	4b9d      	ldr	r3, [pc, #628]	@ (8109054 <UART_SetConfig+0x92c>)
 8108de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108de2:	e009      	b.n	8108df8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108dea:	e005      	b.n	8108df8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108dec:	2300      	movs	r3, #0
 8108dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108df0:	2301      	movs	r3, #1
 8108df2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108df6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108dfa:	2b00      	cmp	r3, #0
 8108dfc:	f000 81de 	beq.w	81091bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108e00:	697b      	ldr	r3, [r7, #20]
 8108e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e04:	4a94      	ldr	r2, [pc, #592]	@ (8109058 <UART_SetConfig+0x930>)
 8108e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e0a:	461a      	mov	r2, r3
 8108e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108e12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108e14:	697b      	ldr	r3, [r7, #20]
 8108e16:	685a      	ldr	r2, [r3, #4]
 8108e18:	4613      	mov	r3, r2
 8108e1a:	005b      	lsls	r3, r3, #1
 8108e1c:	4413      	add	r3, r2
 8108e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108e20:	429a      	cmp	r2, r3
 8108e22:	d305      	bcc.n	8108e30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108e24:	697b      	ldr	r3, [r7, #20]
 8108e26:	685b      	ldr	r3, [r3, #4]
 8108e28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108e2c:	429a      	cmp	r2, r3
 8108e2e:	d903      	bls.n	8108e38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108e30:	2301      	movs	r3, #1
 8108e32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108e36:	e1c1      	b.n	81091bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e3a:	2200      	movs	r2, #0
 8108e3c:	60bb      	str	r3, [r7, #8]
 8108e3e:	60fa      	str	r2, [r7, #12]
 8108e40:	697b      	ldr	r3, [r7, #20]
 8108e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e44:	4a84      	ldr	r2, [pc, #528]	@ (8109058 <UART_SetConfig+0x930>)
 8108e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e4a:	b29b      	uxth	r3, r3
 8108e4c:	2200      	movs	r2, #0
 8108e4e:	603b      	str	r3, [r7, #0]
 8108e50:	607a      	str	r2, [r7, #4]
 8108e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108e5a:	f7f7 ff9d 	bl	8100d98 <__aeabi_uldivmod>
 8108e5e:	4602      	mov	r2, r0
 8108e60:	460b      	mov	r3, r1
 8108e62:	4610      	mov	r0, r2
 8108e64:	4619      	mov	r1, r3
 8108e66:	f04f 0200 	mov.w	r2, #0
 8108e6a:	f04f 0300 	mov.w	r3, #0
 8108e6e:	020b      	lsls	r3, r1, #8
 8108e70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108e74:	0202      	lsls	r2, r0, #8
 8108e76:	6979      	ldr	r1, [r7, #20]
 8108e78:	6849      	ldr	r1, [r1, #4]
 8108e7a:	0849      	lsrs	r1, r1, #1
 8108e7c:	2000      	movs	r0, #0
 8108e7e:	460c      	mov	r4, r1
 8108e80:	4605      	mov	r5, r0
 8108e82:	eb12 0804 	adds.w	r8, r2, r4
 8108e86:	eb43 0905 	adc.w	r9, r3, r5
 8108e8a:	697b      	ldr	r3, [r7, #20]
 8108e8c:	685b      	ldr	r3, [r3, #4]
 8108e8e:	2200      	movs	r2, #0
 8108e90:	469a      	mov	sl, r3
 8108e92:	4693      	mov	fp, r2
 8108e94:	4652      	mov	r2, sl
 8108e96:	465b      	mov	r3, fp
 8108e98:	4640      	mov	r0, r8
 8108e9a:	4649      	mov	r1, r9
 8108e9c:	f7f7 ff7c 	bl	8100d98 <__aeabi_uldivmod>
 8108ea0:	4602      	mov	r2, r0
 8108ea2:	460b      	mov	r3, r1
 8108ea4:	4613      	mov	r3, r2
 8108ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108eaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108eae:	d308      	bcc.n	8108ec2 <UART_SetConfig+0x79a>
 8108eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108eb6:	d204      	bcs.n	8108ec2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108eb8:	697b      	ldr	r3, [r7, #20]
 8108eba:	681b      	ldr	r3, [r3, #0]
 8108ebc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108ebe:	60da      	str	r2, [r3, #12]
 8108ec0:	e17c      	b.n	81091bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108ec2:	2301      	movs	r3, #1
 8108ec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108ec8:	e178      	b.n	81091bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108eca:	697b      	ldr	r3, [r7, #20]
 8108ecc:	69db      	ldr	r3, [r3, #28]
 8108ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108ed2:	f040 80c5 	bne.w	8109060 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108eda:	2b20      	cmp	r3, #32
 8108edc:	dc48      	bgt.n	8108f70 <UART_SetConfig+0x848>
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	db7b      	blt.n	8108fda <UART_SetConfig+0x8b2>
 8108ee2:	2b20      	cmp	r3, #32
 8108ee4:	d879      	bhi.n	8108fda <UART_SetConfig+0x8b2>
 8108ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8108eec <UART_SetConfig+0x7c4>)
 8108ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108eec:	08108f77 	.word	0x08108f77
 8108ef0:	08108f7f 	.word	0x08108f7f
 8108ef4:	08108fdb 	.word	0x08108fdb
 8108ef8:	08108fdb 	.word	0x08108fdb
 8108efc:	08108f87 	.word	0x08108f87
 8108f00:	08108fdb 	.word	0x08108fdb
 8108f04:	08108fdb 	.word	0x08108fdb
 8108f08:	08108fdb 	.word	0x08108fdb
 8108f0c:	08108f97 	.word	0x08108f97
 8108f10:	08108fdb 	.word	0x08108fdb
 8108f14:	08108fdb 	.word	0x08108fdb
 8108f18:	08108fdb 	.word	0x08108fdb
 8108f1c:	08108fdb 	.word	0x08108fdb
 8108f20:	08108fdb 	.word	0x08108fdb
 8108f24:	08108fdb 	.word	0x08108fdb
 8108f28:	08108fdb 	.word	0x08108fdb
 8108f2c:	08108fa7 	.word	0x08108fa7
 8108f30:	08108fdb 	.word	0x08108fdb
 8108f34:	08108fdb 	.word	0x08108fdb
 8108f38:	08108fdb 	.word	0x08108fdb
 8108f3c:	08108fdb 	.word	0x08108fdb
 8108f40:	08108fdb 	.word	0x08108fdb
 8108f44:	08108fdb 	.word	0x08108fdb
 8108f48:	08108fdb 	.word	0x08108fdb
 8108f4c:	08108fdb 	.word	0x08108fdb
 8108f50:	08108fdb 	.word	0x08108fdb
 8108f54:	08108fdb 	.word	0x08108fdb
 8108f58:	08108fdb 	.word	0x08108fdb
 8108f5c:	08108fdb 	.word	0x08108fdb
 8108f60:	08108fdb 	.word	0x08108fdb
 8108f64:	08108fdb 	.word	0x08108fdb
 8108f68:	08108fdb 	.word	0x08108fdb
 8108f6c:	08108fcd 	.word	0x08108fcd
 8108f70:	2b40      	cmp	r3, #64	@ 0x40
 8108f72:	d02e      	beq.n	8108fd2 <UART_SetConfig+0x8aa>
 8108f74:	e031      	b.n	8108fda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108f76:	f7fb fc59 	bl	810482c <HAL_RCC_GetPCLK1Freq>
 8108f7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108f7c:	e033      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108f7e:	f7fb fc6b 	bl	8104858 <HAL_RCC_GetPCLK2Freq>
 8108f82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108f84:	e02f      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108f8a:	4618      	mov	r0, r3
 8108f8c:	f7fc fe9a 	bl	8105cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108f94:	e027      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108f96:	f107 0318 	add.w	r3, r7, #24
 8108f9a:	4618      	mov	r0, r3
 8108f9c:	f7fc ffe6 	bl	8105f6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108fa0:	69fb      	ldr	r3, [r7, #28]
 8108fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fa4:	e01f      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fa6:	4b2d      	ldr	r3, [pc, #180]	@ (810905c <UART_SetConfig+0x934>)
 8108fa8:	681b      	ldr	r3, [r3, #0]
 8108faa:	f003 0320 	and.w	r3, r3, #32
 8108fae:	2b00      	cmp	r3, #0
 8108fb0:	d009      	beq.n	8108fc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108fb2:	4b2a      	ldr	r3, [pc, #168]	@ (810905c <UART_SetConfig+0x934>)
 8108fb4:	681b      	ldr	r3, [r3, #0]
 8108fb6:	08db      	lsrs	r3, r3, #3
 8108fb8:	f003 0303 	and.w	r3, r3, #3
 8108fbc:	4a24      	ldr	r2, [pc, #144]	@ (8109050 <UART_SetConfig+0x928>)
 8108fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8108fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108fc4:	e00f      	b.n	8108fe6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8108fc6:	4b22      	ldr	r3, [pc, #136]	@ (8109050 <UART_SetConfig+0x928>)
 8108fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fca:	e00c      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108fcc:	4b21      	ldr	r3, [pc, #132]	@ (8109054 <UART_SetConfig+0x92c>)
 8108fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fd0:	e009      	b.n	8108fe6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108fd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fd8:	e005      	b.n	8108fe6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8108fda:	2300      	movs	r3, #0
 8108fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108fde:	2301      	movs	r3, #1
 8108fe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108fe8:	2b00      	cmp	r3, #0
 8108fea:	f000 80e7 	beq.w	81091bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108fee:	697b      	ldr	r3, [r7, #20]
 8108ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108ff2:	4a19      	ldr	r2, [pc, #100]	@ (8109058 <UART_SetConfig+0x930>)
 8108ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108ff8:	461a      	mov	r2, r3
 8108ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8109000:	005a      	lsls	r2, r3, #1
 8109002:	697b      	ldr	r3, [r7, #20]
 8109004:	685b      	ldr	r3, [r3, #4]
 8109006:	085b      	lsrs	r3, r3, #1
 8109008:	441a      	add	r2, r3
 810900a:	697b      	ldr	r3, [r7, #20]
 810900c:	685b      	ldr	r3, [r3, #4]
 810900e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109012:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109016:	2b0f      	cmp	r3, #15
 8109018:	d916      	bls.n	8109048 <UART_SetConfig+0x920>
 810901a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810901c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109020:	d212      	bcs.n	8109048 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109024:	b29b      	uxth	r3, r3
 8109026:	f023 030f 	bic.w	r3, r3, #15
 810902a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810902c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810902e:	085b      	lsrs	r3, r3, #1
 8109030:	b29b      	uxth	r3, r3
 8109032:	f003 0307 	and.w	r3, r3, #7
 8109036:	b29a      	uxth	r2, r3
 8109038:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810903a:	4313      	orrs	r3, r2
 810903c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810903e:	697b      	ldr	r3, [r7, #20]
 8109040:	681b      	ldr	r3, [r3, #0]
 8109042:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8109044:	60da      	str	r2, [r3, #12]
 8109046:	e0b9      	b.n	81091bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109048:	2301      	movs	r3, #1
 810904a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810904e:	e0b5      	b.n	81091bc <UART_SetConfig+0xa94>
 8109050:	03d09000 	.word	0x03d09000
 8109054:	003d0900 	.word	0x003d0900
 8109058:	0810e7dc 	.word	0x0810e7dc
 810905c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109060:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8109064:	2b20      	cmp	r3, #32
 8109066:	dc49      	bgt.n	81090fc <UART_SetConfig+0x9d4>
 8109068:	2b00      	cmp	r3, #0
 810906a:	db7c      	blt.n	8109166 <UART_SetConfig+0xa3e>
 810906c:	2b20      	cmp	r3, #32
 810906e:	d87a      	bhi.n	8109166 <UART_SetConfig+0xa3e>
 8109070:	a201      	add	r2, pc, #4	@ (adr r2, 8109078 <UART_SetConfig+0x950>)
 8109072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109076:	bf00      	nop
 8109078:	08109103 	.word	0x08109103
 810907c:	0810910b 	.word	0x0810910b
 8109080:	08109167 	.word	0x08109167
 8109084:	08109167 	.word	0x08109167
 8109088:	08109113 	.word	0x08109113
 810908c:	08109167 	.word	0x08109167
 8109090:	08109167 	.word	0x08109167
 8109094:	08109167 	.word	0x08109167
 8109098:	08109123 	.word	0x08109123
 810909c:	08109167 	.word	0x08109167
 81090a0:	08109167 	.word	0x08109167
 81090a4:	08109167 	.word	0x08109167
 81090a8:	08109167 	.word	0x08109167
 81090ac:	08109167 	.word	0x08109167
 81090b0:	08109167 	.word	0x08109167
 81090b4:	08109167 	.word	0x08109167
 81090b8:	08109133 	.word	0x08109133
 81090bc:	08109167 	.word	0x08109167
 81090c0:	08109167 	.word	0x08109167
 81090c4:	08109167 	.word	0x08109167
 81090c8:	08109167 	.word	0x08109167
 81090cc:	08109167 	.word	0x08109167
 81090d0:	08109167 	.word	0x08109167
 81090d4:	08109167 	.word	0x08109167
 81090d8:	08109167 	.word	0x08109167
 81090dc:	08109167 	.word	0x08109167
 81090e0:	08109167 	.word	0x08109167
 81090e4:	08109167 	.word	0x08109167
 81090e8:	08109167 	.word	0x08109167
 81090ec:	08109167 	.word	0x08109167
 81090f0:	08109167 	.word	0x08109167
 81090f4:	08109167 	.word	0x08109167
 81090f8:	08109159 	.word	0x08109159
 81090fc:	2b40      	cmp	r3, #64	@ 0x40
 81090fe:	d02e      	beq.n	810915e <UART_SetConfig+0xa36>
 8109100:	e031      	b.n	8109166 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109102:	f7fb fb93 	bl	810482c <HAL_RCC_GetPCLK1Freq>
 8109106:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109108:	e033      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810910a:	f7fb fba5 	bl	8104858 <HAL_RCC_GetPCLK2Freq>
 810910e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109110:	e02f      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109116:	4618      	mov	r0, r3
 8109118:	f7fc fdd4 	bl	8105cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810911c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109120:	e027      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109122:	f107 0318 	add.w	r3, r7, #24
 8109126:	4618      	mov	r0, r3
 8109128:	f7fc ff20 	bl	8105f6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810912c:	69fb      	ldr	r3, [r7, #28]
 810912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109130:	e01f      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109132:	4b2d      	ldr	r3, [pc, #180]	@ (81091e8 <UART_SetConfig+0xac0>)
 8109134:	681b      	ldr	r3, [r3, #0]
 8109136:	f003 0320 	and.w	r3, r3, #32
 810913a:	2b00      	cmp	r3, #0
 810913c:	d009      	beq.n	8109152 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810913e:	4b2a      	ldr	r3, [pc, #168]	@ (81091e8 <UART_SetConfig+0xac0>)
 8109140:	681b      	ldr	r3, [r3, #0]
 8109142:	08db      	lsrs	r3, r3, #3
 8109144:	f003 0303 	and.w	r3, r3, #3
 8109148:	4a28      	ldr	r2, [pc, #160]	@ (81091ec <UART_SetConfig+0xac4>)
 810914a:	fa22 f303 	lsr.w	r3, r2, r3
 810914e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109150:	e00f      	b.n	8109172 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109152:	4b26      	ldr	r3, [pc, #152]	@ (81091ec <UART_SetConfig+0xac4>)
 8109154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109156:	e00c      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109158:	4b25      	ldr	r3, [pc, #148]	@ (81091f0 <UART_SetConfig+0xac8>)
 810915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810915c:	e009      	b.n	8109172 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810915e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109164:	e005      	b.n	8109172 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109166:	2300      	movs	r3, #0
 8109168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810916a:	2301      	movs	r3, #1
 810916c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109170:	bf00      	nop
    }

    if (pclk != 0U)
 8109172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109174:	2b00      	cmp	r3, #0
 8109176:	d021      	beq.n	81091bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109178:	697b      	ldr	r3, [r7, #20]
 810917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810917c:	4a1d      	ldr	r2, [pc, #116]	@ (81091f4 <UART_SetConfig+0xacc>)
 810917e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109182:	461a      	mov	r2, r3
 8109184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109186:	fbb3 f2f2 	udiv	r2, r3, r2
 810918a:	697b      	ldr	r3, [r7, #20]
 810918c:	685b      	ldr	r3, [r3, #4]
 810918e:	085b      	lsrs	r3, r3, #1
 8109190:	441a      	add	r2, r3
 8109192:	697b      	ldr	r3, [r7, #20]
 8109194:	685b      	ldr	r3, [r3, #4]
 8109196:	fbb2 f3f3 	udiv	r3, r2, r3
 810919a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810919e:	2b0f      	cmp	r3, #15
 81091a0:	d909      	bls.n	81091b6 <UART_SetConfig+0xa8e>
 81091a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81091a8:	d205      	bcs.n	81091b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81091aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091ac:	b29a      	uxth	r2, r3
 81091ae:	697b      	ldr	r3, [r7, #20]
 81091b0:	681b      	ldr	r3, [r3, #0]
 81091b2:	60da      	str	r2, [r3, #12]
 81091b4:	e002      	b.n	81091bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81091b6:	2301      	movs	r3, #1
 81091b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81091bc:	697b      	ldr	r3, [r7, #20]
 81091be:	2201      	movs	r2, #1
 81091c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 81091c4:	697b      	ldr	r3, [r7, #20]
 81091c6:	2201      	movs	r2, #1
 81091c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81091cc:	697b      	ldr	r3, [r7, #20]
 81091ce:	2200      	movs	r2, #0
 81091d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 81091d2:	697b      	ldr	r3, [r7, #20]
 81091d4:	2200      	movs	r2, #0
 81091d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 81091d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 81091dc:	4618      	mov	r0, r3
 81091de:	3748      	adds	r7, #72	@ 0x48
 81091e0:	46bd      	mov	sp, r7
 81091e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81091e6:	bf00      	nop
 81091e8:	58024400 	.word	0x58024400
 81091ec:	03d09000 	.word	0x03d09000
 81091f0:	003d0900 	.word	0x003d0900
 81091f4:	0810e7dc 	.word	0x0810e7dc

081091f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81091f8:	b480      	push	{r7}
 81091fa:	b083      	sub	sp, #12
 81091fc:	af00      	add	r7, sp, #0
 81091fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109200:	687b      	ldr	r3, [r7, #4]
 8109202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109204:	f003 0308 	and.w	r3, r3, #8
 8109208:	2b00      	cmp	r3, #0
 810920a:	d00a      	beq.n	8109222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810920c:	687b      	ldr	r3, [r7, #4]
 810920e:	681b      	ldr	r3, [r3, #0]
 8109210:	685b      	ldr	r3, [r3, #4]
 8109212:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8109216:	687b      	ldr	r3, [r7, #4]
 8109218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	681b      	ldr	r3, [r3, #0]
 810921e:	430a      	orrs	r2, r1
 8109220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109226:	f003 0301 	and.w	r3, r3, #1
 810922a:	2b00      	cmp	r3, #0
 810922c:	d00a      	beq.n	8109244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	681b      	ldr	r3, [r3, #0]
 8109232:	685b      	ldr	r3, [r3, #4]
 8109234:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8109238:	687b      	ldr	r3, [r7, #4]
 810923a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	430a      	orrs	r2, r1
 8109242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109248:	f003 0302 	and.w	r3, r3, #2
 810924c:	2b00      	cmp	r3, #0
 810924e:	d00a      	beq.n	8109266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109250:	687b      	ldr	r3, [r7, #4]
 8109252:	681b      	ldr	r3, [r3, #0]
 8109254:	685b      	ldr	r3, [r3, #4]
 8109256:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810925e:	687b      	ldr	r3, [r7, #4]
 8109260:	681b      	ldr	r3, [r3, #0]
 8109262:	430a      	orrs	r2, r1
 8109264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810926a:	f003 0304 	and.w	r3, r3, #4
 810926e:	2b00      	cmp	r3, #0
 8109270:	d00a      	beq.n	8109288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	681b      	ldr	r3, [r3, #0]
 8109276:	685b      	ldr	r3, [r3, #4]
 8109278:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810927c:	687b      	ldr	r3, [r7, #4]
 810927e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	681b      	ldr	r3, [r3, #0]
 8109284:	430a      	orrs	r2, r1
 8109286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109288:	687b      	ldr	r3, [r7, #4]
 810928a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810928c:	f003 0310 	and.w	r3, r3, #16
 8109290:	2b00      	cmp	r3, #0
 8109292:	d00a      	beq.n	81092aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	689b      	ldr	r3, [r3, #8]
 810929a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81092a2:	687b      	ldr	r3, [r7, #4]
 81092a4:	681b      	ldr	r3, [r3, #0]
 81092a6:	430a      	orrs	r2, r1
 81092a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092ae:	f003 0320 	and.w	r3, r3, #32
 81092b2:	2b00      	cmp	r3, #0
 81092b4:	d00a      	beq.n	81092cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	681b      	ldr	r3, [r3, #0]
 81092ba:	689b      	ldr	r3, [r3, #8]
 81092bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 81092c4:	687b      	ldr	r3, [r7, #4]
 81092c6:	681b      	ldr	r3, [r3, #0]
 81092c8:	430a      	orrs	r2, r1
 81092ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81092cc:	687b      	ldr	r3, [r7, #4]
 81092ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81092d4:	2b00      	cmp	r3, #0
 81092d6:	d01a      	beq.n	810930e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81092d8:	687b      	ldr	r3, [r7, #4]
 81092da:	681b      	ldr	r3, [r3, #0]
 81092dc:	685b      	ldr	r3, [r3, #4]
 81092de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	681b      	ldr	r3, [r3, #0]
 81092ea:	430a      	orrs	r2, r1
 81092ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81092ee:	687b      	ldr	r3, [r7, #4]
 81092f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81092f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81092f6:	d10a      	bne.n	810930e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81092f8:	687b      	ldr	r3, [r7, #4]
 81092fa:	681b      	ldr	r3, [r3, #0]
 81092fc:	685b      	ldr	r3, [r3, #4]
 81092fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8109302:	687b      	ldr	r3, [r7, #4]
 8109304:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109306:	687b      	ldr	r3, [r7, #4]
 8109308:	681b      	ldr	r3, [r3, #0]
 810930a:	430a      	orrs	r2, r1
 810930c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810930e:	687b      	ldr	r3, [r7, #4]
 8109310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109316:	2b00      	cmp	r3, #0
 8109318:	d00a      	beq.n	8109330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	685b      	ldr	r3, [r3, #4]
 8109320:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109328:	687b      	ldr	r3, [r7, #4]
 810932a:	681b      	ldr	r3, [r3, #0]
 810932c:	430a      	orrs	r2, r1
 810932e:	605a      	str	r2, [r3, #4]
  }
}
 8109330:	bf00      	nop
 8109332:	370c      	adds	r7, #12
 8109334:	46bd      	mov	sp, r7
 8109336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810933a:	4770      	bx	lr

0810933c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810933c:	b580      	push	{r7, lr}
 810933e:	b098      	sub	sp, #96	@ 0x60
 8109340:	af02      	add	r7, sp, #8
 8109342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109344:	687b      	ldr	r3, [r7, #4]
 8109346:	2200      	movs	r2, #0
 8109348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810934c:	f7f9 ff22 	bl	8103194 <HAL_GetTick>
 8109350:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8109352:	687b      	ldr	r3, [r7, #4]
 8109354:	681b      	ldr	r3, [r3, #0]
 8109356:	681b      	ldr	r3, [r3, #0]
 8109358:	f003 0308 	and.w	r3, r3, #8
 810935c:	2b08      	cmp	r3, #8
 810935e:	d12f      	bne.n	81093c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109364:	9300      	str	r3, [sp, #0]
 8109366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109368:	2200      	movs	r2, #0
 810936a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810936e:	6878      	ldr	r0, [r7, #4]
 8109370:	f000 f88e 	bl	8109490 <UART_WaitOnFlagUntilTimeout>
 8109374:	4603      	mov	r3, r0
 8109376:	2b00      	cmp	r3, #0
 8109378:	d022      	beq.n	81093c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810937a:	687b      	ldr	r3, [r7, #4]
 810937c:	681b      	ldr	r3, [r3, #0]
 810937e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109382:	e853 3f00 	ldrex	r3, [r3]
 8109386:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8109388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810938a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810938e:	653b      	str	r3, [r7, #80]	@ 0x50
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	681b      	ldr	r3, [r3, #0]
 8109394:	461a      	mov	r2, r3
 8109396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109398:	647b      	str	r3, [r7, #68]	@ 0x44
 810939a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810939c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810939e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81093a0:	e841 2300 	strex	r3, r2, [r1]
 81093a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81093a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81093a8:	2b00      	cmp	r3, #0
 81093aa:	d1e6      	bne.n	810937a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 81093ac:	687b      	ldr	r3, [r7, #4]
 81093ae:	2220      	movs	r2, #32
 81093b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 81093b4:	687b      	ldr	r3, [r7, #4]
 81093b6:	2200      	movs	r2, #0
 81093b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81093bc:	2303      	movs	r3, #3
 81093be:	e063      	b.n	8109488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	681b      	ldr	r3, [r3, #0]
 81093c4:	681b      	ldr	r3, [r3, #0]
 81093c6:	f003 0304 	and.w	r3, r3, #4
 81093ca:	2b04      	cmp	r3, #4
 81093cc:	d149      	bne.n	8109462 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81093ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81093d2:	9300      	str	r3, [sp, #0]
 81093d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81093d6:	2200      	movs	r2, #0
 81093d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 81093dc:	6878      	ldr	r0, [r7, #4]
 81093de:	f000 f857 	bl	8109490 <UART_WaitOnFlagUntilTimeout>
 81093e2:	4603      	mov	r3, r0
 81093e4:	2b00      	cmp	r3, #0
 81093e6:	d03c      	beq.n	8109462 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	681b      	ldr	r3, [r3, #0]
 81093ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81093ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81093f0:	e853 3f00 	ldrex	r3, [r3]
 81093f4:	623b      	str	r3, [r7, #32]
   return(result);
 81093f6:	6a3b      	ldr	r3, [r7, #32]
 81093f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81093fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81093fe:	687b      	ldr	r3, [r7, #4]
 8109400:	681b      	ldr	r3, [r3, #0]
 8109402:	461a      	mov	r2, r3
 8109404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109406:	633b      	str	r3, [r7, #48]	@ 0x30
 8109408:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810940a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810940c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810940e:	e841 2300 	strex	r3, r2, [r1]
 8109412:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8109414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109416:	2b00      	cmp	r3, #0
 8109418:	d1e6      	bne.n	81093e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	681b      	ldr	r3, [r3, #0]
 810941e:	3308      	adds	r3, #8
 8109420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109422:	693b      	ldr	r3, [r7, #16]
 8109424:	e853 3f00 	ldrex	r3, [r3]
 8109428:	60fb      	str	r3, [r7, #12]
   return(result);
 810942a:	68fb      	ldr	r3, [r7, #12]
 810942c:	f023 0301 	bic.w	r3, r3, #1
 8109430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	681b      	ldr	r3, [r3, #0]
 8109436:	3308      	adds	r3, #8
 8109438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810943a:	61fa      	str	r2, [r7, #28]
 810943c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810943e:	69b9      	ldr	r1, [r7, #24]
 8109440:	69fa      	ldr	r2, [r7, #28]
 8109442:	e841 2300 	strex	r3, r2, [r1]
 8109446:	617b      	str	r3, [r7, #20]
   return(result);
 8109448:	697b      	ldr	r3, [r7, #20]
 810944a:	2b00      	cmp	r3, #0
 810944c:	d1e5      	bne.n	810941a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810944e:	687b      	ldr	r3, [r7, #4]
 8109450:	2220      	movs	r2, #32
 8109452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8109456:	687b      	ldr	r3, [r7, #4]
 8109458:	2200      	movs	r2, #0
 810945a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810945e:	2303      	movs	r3, #3
 8109460:	e012      	b.n	8109488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	2220      	movs	r2, #32
 8109466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810946a:	687b      	ldr	r3, [r7, #4]
 810946c:	2220      	movs	r2, #32
 810946e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	2200      	movs	r2, #0
 8109476:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8109478:	687b      	ldr	r3, [r7, #4]
 810947a:	2200      	movs	r2, #0
 810947c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810947e:	687b      	ldr	r3, [r7, #4]
 8109480:	2200      	movs	r2, #0
 8109482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109486:	2300      	movs	r3, #0
}
 8109488:	4618      	mov	r0, r3
 810948a:	3758      	adds	r7, #88	@ 0x58
 810948c:	46bd      	mov	sp, r7
 810948e:	bd80      	pop	{r7, pc}

08109490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109490:	b580      	push	{r7, lr}
 8109492:	b084      	sub	sp, #16
 8109494:	af00      	add	r7, sp, #0
 8109496:	60f8      	str	r0, [r7, #12]
 8109498:	60b9      	str	r1, [r7, #8]
 810949a:	603b      	str	r3, [r7, #0]
 810949c:	4613      	mov	r3, r2
 810949e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81094a0:	e04f      	b.n	8109542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81094a2:	69bb      	ldr	r3, [r7, #24]
 81094a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81094a8:	d04b      	beq.n	8109542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81094aa:	f7f9 fe73 	bl	8103194 <HAL_GetTick>
 81094ae:	4602      	mov	r2, r0
 81094b0:	683b      	ldr	r3, [r7, #0]
 81094b2:	1ad3      	subs	r3, r2, r3
 81094b4:	69ba      	ldr	r2, [r7, #24]
 81094b6:	429a      	cmp	r2, r3
 81094b8:	d302      	bcc.n	81094c0 <UART_WaitOnFlagUntilTimeout+0x30>
 81094ba:	69bb      	ldr	r3, [r7, #24]
 81094bc:	2b00      	cmp	r3, #0
 81094be:	d101      	bne.n	81094c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 81094c0:	2303      	movs	r3, #3
 81094c2:	e04e      	b.n	8109562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 81094c4:	68fb      	ldr	r3, [r7, #12]
 81094c6:	681b      	ldr	r3, [r3, #0]
 81094c8:	681b      	ldr	r3, [r3, #0]
 81094ca:	f003 0304 	and.w	r3, r3, #4
 81094ce:	2b00      	cmp	r3, #0
 81094d0:	d037      	beq.n	8109542 <UART_WaitOnFlagUntilTimeout+0xb2>
 81094d2:	68bb      	ldr	r3, [r7, #8]
 81094d4:	2b80      	cmp	r3, #128	@ 0x80
 81094d6:	d034      	beq.n	8109542 <UART_WaitOnFlagUntilTimeout+0xb2>
 81094d8:	68bb      	ldr	r3, [r7, #8]
 81094da:	2b40      	cmp	r3, #64	@ 0x40
 81094dc:	d031      	beq.n	8109542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 81094de:	68fb      	ldr	r3, [r7, #12]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	69db      	ldr	r3, [r3, #28]
 81094e4:	f003 0308 	and.w	r3, r3, #8
 81094e8:	2b08      	cmp	r3, #8
 81094ea:	d110      	bne.n	810950e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81094ec:	68fb      	ldr	r3, [r7, #12]
 81094ee:	681b      	ldr	r3, [r3, #0]
 81094f0:	2208      	movs	r2, #8
 81094f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81094f4:	68f8      	ldr	r0, [r7, #12]
 81094f6:	f000 f838 	bl	810956a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 81094fa:	68fb      	ldr	r3, [r7, #12]
 81094fc:	2208      	movs	r2, #8
 81094fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109502:	68fb      	ldr	r3, [r7, #12]
 8109504:	2200      	movs	r2, #0
 8109506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810950a:	2301      	movs	r3, #1
 810950c:	e029      	b.n	8109562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810950e:	68fb      	ldr	r3, [r7, #12]
 8109510:	681b      	ldr	r3, [r3, #0]
 8109512:	69db      	ldr	r3, [r3, #28]
 8109514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810951c:	d111      	bne.n	8109542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810951e:	68fb      	ldr	r3, [r7, #12]
 8109520:	681b      	ldr	r3, [r3, #0]
 8109522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8109526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109528:	68f8      	ldr	r0, [r7, #12]
 810952a:	f000 f81e 	bl	810956a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810952e:	68fb      	ldr	r3, [r7, #12]
 8109530:	2220      	movs	r2, #32
 8109532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109536:	68fb      	ldr	r3, [r7, #12]
 8109538:	2200      	movs	r2, #0
 810953a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810953e:	2303      	movs	r3, #3
 8109540:	e00f      	b.n	8109562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109542:	68fb      	ldr	r3, [r7, #12]
 8109544:	681b      	ldr	r3, [r3, #0]
 8109546:	69da      	ldr	r2, [r3, #28]
 8109548:	68bb      	ldr	r3, [r7, #8]
 810954a:	4013      	ands	r3, r2
 810954c:	68ba      	ldr	r2, [r7, #8]
 810954e:	429a      	cmp	r2, r3
 8109550:	bf0c      	ite	eq
 8109552:	2301      	moveq	r3, #1
 8109554:	2300      	movne	r3, #0
 8109556:	b2db      	uxtb	r3, r3
 8109558:	461a      	mov	r2, r3
 810955a:	79fb      	ldrb	r3, [r7, #7]
 810955c:	429a      	cmp	r2, r3
 810955e:	d0a0      	beq.n	81094a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109560:	2300      	movs	r3, #0
}
 8109562:	4618      	mov	r0, r3
 8109564:	3710      	adds	r7, #16
 8109566:	46bd      	mov	sp, r7
 8109568:	bd80      	pop	{r7, pc}

0810956a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810956a:	b480      	push	{r7}
 810956c:	b095      	sub	sp, #84	@ 0x54
 810956e:	af00      	add	r7, sp, #0
 8109570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109572:	687b      	ldr	r3, [r7, #4]
 8109574:	681b      	ldr	r3, [r3, #0]
 8109576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810957a:	e853 3f00 	ldrex	r3, [r3]
 810957e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8109580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8109586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	681b      	ldr	r3, [r3, #0]
 810958c:	461a      	mov	r2, r3
 810958e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109590:	643b      	str	r3, [r7, #64]	@ 0x40
 8109592:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8109598:	e841 2300 	strex	r3, r2, [r1]
 810959c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81095a0:	2b00      	cmp	r3, #0
 81095a2:	d1e6      	bne.n	8109572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81095a4:	687b      	ldr	r3, [r7, #4]
 81095a6:	681b      	ldr	r3, [r3, #0]
 81095a8:	3308      	adds	r3, #8
 81095aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095ac:	6a3b      	ldr	r3, [r7, #32]
 81095ae:	e853 3f00 	ldrex	r3, [r3]
 81095b2:	61fb      	str	r3, [r7, #28]
   return(result);
 81095b4:	69fb      	ldr	r3, [r7, #28]
 81095b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81095ba:	f023 0301 	bic.w	r3, r3, #1
 81095be:	64bb      	str	r3, [r7, #72]	@ 0x48
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	681b      	ldr	r3, [r3, #0]
 81095c4:	3308      	adds	r3, #8
 81095c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81095c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81095ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81095cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81095ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81095d0:	e841 2300 	strex	r3, r2, [r1]
 81095d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81095d8:	2b00      	cmp	r3, #0
 81095da:	d1e3      	bne.n	81095a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81095dc:	687b      	ldr	r3, [r7, #4]
 81095de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81095e0:	2b01      	cmp	r3, #1
 81095e2:	d118      	bne.n	8109616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81095e4:	687b      	ldr	r3, [r7, #4]
 81095e6:	681b      	ldr	r3, [r3, #0]
 81095e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095ea:	68fb      	ldr	r3, [r7, #12]
 81095ec:	e853 3f00 	ldrex	r3, [r3]
 81095f0:	60bb      	str	r3, [r7, #8]
   return(result);
 81095f2:	68bb      	ldr	r3, [r7, #8]
 81095f4:	f023 0310 	bic.w	r3, r3, #16
 81095f8:	647b      	str	r3, [r7, #68]	@ 0x44
 81095fa:	687b      	ldr	r3, [r7, #4]
 81095fc:	681b      	ldr	r3, [r3, #0]
 81095fe:	461a      	mov	r2, r3
 8109600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109602:	61bb      	str	r3, [r7, #24]
 8109604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109606:	6979      	ldr	r1, [r7, #20]
 8109608:	69ba      	ldr	r2, [r7, #24]
 810960a:	e841 2300 	strex	r3, r2, [r1]
 810960e:	613b      	str	r3, [r7, #16]
   return(result);
 8109610:	693b      	ldr	r3, [r7, #16]
 8109612:	2b00      	cmp	r3, #0
 8109614:	d1e6      	bne.n	81095e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109616:	687b      	ldr	r3, [r7, #4]
 8109618:	2220      	movs	r2, #32
 810961a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	2200      	movs	r2, #0
 8109622:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109624:	687b      	ldr	r3, [r7, #4]
 8109626:	2200      	movs	r2, #0
 8109628:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810962a:	bf00      	nop
 810962c:	3754      	adds	r7, #84	@ 0x54
 810962e:	46bd      	mov	sp, r7
 8109630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109634:	4770      	bx	lr

08109636 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109636:	b480      	push	{r7}
 8109638:	b085      	sub	sp, #20
 810963a:	af00      	add	r7, sp, #0
 810963c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810963e:	687b      	ldr	r3, [r7, #4]
 8109640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109644:	2b01      	cmp	r3, #1
 8109646:	d101      	bne.n	810964c <HAL_UARTEx_DisableFifoMode+0x16>
 8109648:	2302      	movs	r3, #2
 810964a:	e027      	b.n	810969c <HAL_UARTEx_DisableFifoMode+0x66>
 810964c:	687b      	ldr	r3, [r7, #4]
 810964e:	2201      	movs	r2, #1
 8109650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	2224      	movs	r2, #36	@ 0x24
 8109658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810965c:	687b      	ldr	r3, [r7, #4]
 810965e:	681b      	ldr	r3, [r3, #0]
 8109660:	681b      	ldr	r3, [r3, #0]
 8109662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	681b      	ldr	r3, [r3, #0]
 8109668:	681a      	ldr	r2, [r3, #0]
 810966a:	687b      	ldr	r3, [r7, #4]
 810966c:	681b      	ldr	r3, [r3, #0]
 810966e:	f022 0201 	bic.w	r2, r2, #1
 8109672:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109674:	68fb      	ldr	r3, [r7, #12]
 8109676:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810967a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	2200      	movs	r2, #0
 8109680:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	681b      	ldr	r3, [r3, #0]
 8109686:	68fa      	ldr	r2, [r7, #12]
 8109688:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810968a:	687b      	ldr	r3, [r7, #4]
 810968c:	2220      	movs	r2, #32
 810968e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109692:	687b      	ldr	r3, [r7, #4]
 8109694:	2200      	movs	r2, #0
 8109696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810969a:	2300      	movs	r3, #0
}
 810969c:	4618      	mov	r0, r3
 810969e:	3714      	adds	r7, #20
 81096a0:	46bd      	mov	sp, r7
 81096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096a6:	4770      	bx	lr

081096a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81096a8:	b580      	push	{r7, lr}
 81096aa:	b084      	sub	sp, #16
 81096ac:	af00      	add	r7, sp, #0
 81096ae:	6078      	str	r0, [r7, #4]
 81096b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81096b8:	2b01      	cmp	r3, #1
 81096ba:	d101      	bne.n	81096c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81096bc:	2302      	movs	r3, #2
 81096be:	e02d      	b.n	810971c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81096c0:	687b      	ldr	r3, [r7, #4]
 81096c2:	2201      	movs	r2, #1
 81096c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81096c8:	687b      	ldr	r3, [r7, #4]
 81096ca:	2224      	movs	r2, #36	@ 0x24
 81096cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	681b      	ldr	r3, [r3, #0]
 81096d4:	681b      	ldr	r3, [r3, #0]
 81096d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81096d8:	687b      	ldr	r3, [r7, #4]
 81096da:	681b      	ldr	r3, [r3, #0]
 81096dc:	681a      	ldr	r2, [r3, #0]
 81096de:	687b      	ldr	r3, [r7, #4]
 81096e0:	681b      	ldr	r3, [r3, #0]
 81096e2:	f022 0201 	bic.w	r2, r2, #1
 81096e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81096e8:	687b      	ldr	r3, [r7, #4]
 81096ea:	681b      	ldr	r3, [r3, #0]
 81096ec:	689b      	ldr	r3, [r3, #8]
 81096ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 81096f2:	687b      	ldr	r3, [r7, #4]
 81096f4:	681b      	ldr	r3, [r3, #0]
 81096f6:	683a      	ldr	r2, [r7, #0]
 81096f8:	430a      	orrs	r2, r1
 81096fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81096fc:	6878      	ldr	r0, [r7, #4]
 81096fe:	f000 f84f 	bl	81097a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109702:	687b      	ldr	r3, [r7, #4]
 8109704:	681b      	ldr	r3, [r3, #0]
 8109706:	68fa      	ldr	r2, [r7, #12]
 8109708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810970a:	687b      	ldr	r3, [r7, #4]
 810970c:	2220      	movs	r2, #32
 810970e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109712:	687b      	ldr	r3, [r7, #4]
 8109714:	2200      	movs	r2, #0
 8109716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810971a:	2300      	movs	r3, #0
}
 810971c:	4618      	mov	r0, r3
 810971e:	3710      	adds	r7, #16
 8109720:	46bd      	mov	sp, r7
 8109722:	bd80      	pop	{r7, pc}

08109724 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109724:	b580      	push	{r7, lr}
 8109726:	b084      	sub	sp, #16
 8109728:	af00      	add	r7, sp, #0
 810972a:	6078      	str	r0, [r7, #4]
 810972c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109734:	2b01      	cmp	r3, #1
 8109736:	d101      	bne.n	810973c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109738:	2302      	movs	r3, #2
 810973a:	e02d      	b.n	8109798 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	2201      	movs	r2, #1
 8109740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109744:	687b      	ldr	r3, [r7, #4]
 8109746:	2224      	movs	r2, #36	@ 0x24
 8109748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810974c:	687b      	ldr	r3, [r7, #4]
 810974e:	681b      	ldr	r3, [r3, #0]
 8109750:	681b      	ldr	r3, [r3, #0]
 8109752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	681b      	ldr	r3, [r3, #0]
 8109758:	681a      	ldr	r2, [r3, #0]
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	681b      	ldr	r3, [r3, #0]
 810975e:	f022 0201 	bic.w	r2, r2, #1
 8109762:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	681b      	ldr	r3, [r3, #0]
 8109768:	689b      	ldr	r3, [r3, #8]
 810976a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	681b      	ldr	r3, [r3, #0]
 8109772:	683a      	ldr	r2, [r7, #0]
 8109774:	430a      	orrs	r2, r1
 8109776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109778:	6878      	ldr	r0, [r7, #4]
 810977a:	f000 f811 	bl	81097a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810977e:	687b      	ldr	r3, [r7, #4]
 8109780:	681b      	ldr	r3, [r3, #0]
 8109782:	68fa      	ldr	r2, [r7, #12]
 8109784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109786:	687b      	ldr	r3, [r7, #4]
 8109788:	2220      	movs	r2, #32
 810978a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810978e:	687b      	ldr	r3, [r7, #4]
 8109790:	2200      	movs	r2, #0
 8109792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109796:	2300      	movs	r3, #0
}
 8109798:	4618      	mov	r0, r3
 810979a:	3710      	adds	r7, #16
 810979c:	46bd      	mov	sp, r7
 810979e:	bd80      	pop	{r7, pc}

081097a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81097a0:	b480      	push	{r7}
 81097a2:	b085      	sub	sp, #20
 81097a4:	af00      	add	r7, sp, #0
 81097a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81097a8:	687b      	ldr	r3, [r7, #4]
 81097aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81097ac:	2b00      	cmp	r3, #0
 81097ae:	d108      	bne.n	81097c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81097b0:	687b      	ldr	r3, [r7, #4]
 81097b2:	2201      	movs	r2, #1
 81097b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 81097b8:	687b      	ldr	r3, [r7, #4]
 81097ba:	2201      	movs	r2, #1
 81097bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81097c0:	e031      	b.n	8109826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81097c2:	2310      	movs	r3, #16
 81097c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81097c6:	2310      	movs	r3, #16
 81097c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81097ca:	687b      	ldr	r3, [r7, #4]
 81097cc:	681b      	ldr	r3, [r3, #0]
 81097ce:	689b      	ldr	r3, [r3, #8]
 81097d0:	0e5b      	lsrs	r3, r3, #25
 81097d2:	b2db      	uxtb	r3, r3
 81097d4:	f003 0307 	and.w	r3, r3, #7
 81097d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81097da:	687b      	ldr	r3, [r7, #4]
 81097dc:	681b      	ldr	r3, [r3, #0]
 81097de:	689b      	ldr	r3, [r3, #8]
 81097e0:	0f5b      	lsrs	r3, r3, #29
 81097e2:	b2db      	uxtb	r3, r3
 81097e4:	f003 0307 	and.w	r3, r3, #7
 81097e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81097ea:	7bbb      	ldrb	r3, [r7, #14]
 81097ec:	7b3a      	ldrb	r2, [r7, #12]
 81097ee:	4911      	ldr	r1, [pc, #68]	@ (8109834 <UARTEx_SetNbDataToProcess+0x94>)
 81097f0:	5c8a      	ldrb	r2, [r1, r2]
 81097f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81097f6:	7b3a      	ldrb	r2, [r7, #12]
 81097f8:	490f      	ldr	r1, [pc, #60]	@ (8109838 <UARTEx_SetNbDataToProcess+0x98>)
 81097fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81097fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8109800:	b29a      	uxth	r2, r3
 8109802:	687b      	ldr	r3, [r7, #4]
 8109804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109808:	7bfb      	ldrb	r3, [r7, #15]
 810980a:	7b7a      	ldrb	r2, [r7, #13]
 810980c:	4909      	ldr	r1, [pc, #36]	@ (8109834 <UARTEx_SetNbDataToProcess+0x94>)
 810980e:	5c8a      	ldrb	r2, [r1, r2]
 8109810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109814:	7b7a      	ldrb	r2, [r7, #13]
 8109816:	4908      	ldr	r1, [pc, #32]	@ (8109838 <UARTEx_SetNbDataToProcess+0x98>)
 8109818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810981a:	fb93 f3f2 	sdiv	r3, r3, r2
 810981e:	b29a      	uxth	r2, r3
 8109820:	687b      	ldr	r3, [r7, #4]
 8109822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8109826:	bf00      	nop
 8109828:	3714      	adds	r7, #20
 810982a:	46bd      	mov	sp, r7
 810982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109830:	4770      	bx	lr
 8109832:	bf00      	nop
 8109834:	0810e7f4 	.word	0x0810e7f4
 8109838:	0810e7fc 	.word	0x0810e7fc

0810983c <__cvt>:
 810983c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109840:	ec57 6b10 	vmov	r6, r7, d0
 8109844:	2f00      	cmp	r7, #0
 8109846:	460c      	mov	r4, r1
 8109848:	4619      	mov	r1, r3
 810984a:	463b      	mov	r3, r7
 810984c:	bfbb      	ittet	lt
 810984e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8109852:	461f      	movlt	r7, r3
 8109854:	2300      	movge	r3, #0
 8109856:	232d      	movlt	r3, #45	@ 0x2d
 8109858:	700b      	strb	r3, [r1, #0]
 810985a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810985c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8109860:	4691      	mov	r9, r2
 8109862:	f023 0820 	bic.w	r8, r3, #32
 8109866:	bfbc      	itt	lt
 8109868:	4632      	movlt	r2, r6
 810986a:	4616      	movlt	r6, r2
 810986c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8109870:	d005      	beq.n	810987e <__cvt+0x42>
 8109872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8109876:	d100      	bne.n	810987a <__cvt+0x3e>
 8109878:	3401      	adds	r4, #1
 810987a:	2102      	movs	r1, #2
 810987c:	e000      	b.n	8109880 <__cvt+0x44>
 810987e:	2103      	movs	r1, #3
 8109880:	ab03      	add	r3, sp, #12
 8109882:	9301      	str	r3, [sp, #4]
 8109884:	ab02      	add	r3, sp, #8
 8109886:	9300      	str	r3, [sp, #0]
 8109888:	ec47 6b10 	vmov	d0, r6, r7
 810988c:	4653      	mov	r3, sl
 810988e:	4622      	mov	r2, r4
 8109890:	f001 f986 	bl	810aba0 <_dtoa_r>
 8109894:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8109898:	4605      	mov	r5, r0
 810989a:	d119      	bne.n	81098d0 <__cvt+0x94>
 810989c:	f019 0f01 	tst.w	r9, #1
 81098a0:	d00e      	beq.n	81098c0 <__cvt+0x84>
 81098a2:	eb00 0904 	add.w	r9, r0, r4
 81098a6:	2200      	movs	r2, #0
 81098a8:	2300      	movs	r3, #0
 81098aa:	4630      	mov	r0, r6
 81098ac:	4639      	mov	r1, r7
 81098ae:	f7f7 f993 	bl	8100bd8 <__aeabi_dcmpeq>
 81098b2:	b108      	cbz	r0, 81098b8 <__cvt+0x7c>
 81098b4:	f8cd 900c 	str.w	r9, [sp, #12]
 81098b8:	2230      	movs	r2, #48	@ 0x30
 81098ba:	9b03      	ldr	r3, [sp, #12]
 81098bc:	454b      	cmp	r3, r9
 81098be:	d31e      	bcc.n	81098fe <__cvt+0xc2>
 81098c0:	9b03      	ldr	r3, [sp, #12]
 81098c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81098c4:	1b5b      	subs	r3, r3, r5
 81098c6:	4628      	mov	r0, r5
 81098c8:	6013      	str	r3, [r2, #0]
 81098ca:	b004      	add	sp, #16
 81098cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81098d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81098d4:	eb00 0904 	add.w	r9, r0, r4
 81098d8:	d1e5      	bne.n	81098a6 <__cvt+0x6a>
 81098da:	7803      	ldrb	r3, [r0, #0]
 81098dc:	2b30      	cmp	r3, #48	@ 0x30
 81098de:	d10a      	bne.n	81098f6 <__cvt+0xba>
 81098e0:	2200      	movs	r2, #0
 81098e2:	2300      	movs	r3, #0
 81098e4:	4630      	mov	r0, r6
 81098e6:	4639      	mov	r1, r7
 81098e8:	f7f7 f976 	bl	8100bd8 <__aeabi_dcmpeq>
 81098ec:	b918      	cbnz	r0, 81098f6 <__cvt+0xba>
 81098ee:	f1c4 0401 	rsb	r4, r4, #1
 81098f2:	f8ca 4000 	str.w	r4, [sl]
 81098f6:	f8da 3000 	ldr.w	r3, [sl]
 81098fa:	4499      	add	r9, r3
 81098fc:	e7d3      	b.n	81098a6 <__cvt+0x6a>
 81098fe:	1c59      	adds	r1, r3, #1
 8109900:	9103      	str	r1, [sp, #12]
 8109902:	701a      	strb	r2, [r3, #0]
 8109904:	e7d9      	b.n	81098ba <__cvt+0x7e>

08109906 <__exponent>:
 8109906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109908:	2900      	cmp	r1, #0
 810990a:	bfba      	itte	lt
 810990c:	4249      	neglt	r1, r1
 810990e:	232d      	movlt	r3, #45	@ 0x2d
 8109910:	232b      	movge	r3, #43	@ 0x2b
 8109912:	2909      	cmp	r1, #9
 8109914:	7002      	strb	r2, [r0, #0]
 8109916:	7043      	strb	r3, [r0, #1]
 8109918:	dd29      	ble.n	810996e <__exponent+0x68>
 810991a:	f10d 0307 	add.w	r3, sp, #7
 810991e:	461d      	mov	r5, r3
 8109920:	270a      	movs	r7, #10
 8109922:	461a      	mov	r2, r3
 8109924:	fbb1 f6f7 	udiv	r6, r1, r7
 8109928:	fb07 1416 	mls	r4, r7, r6, r1
 810992c:	3430      	adds	r4, #48	@ 0x30
 810992e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8109932:	460c      	mov	r4, r1
 8109934:	2c63      	cmp	r4, #99	@ 0x63
 8109936:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 810993a:	4631      	mov	r1, r6
 810993c:	dcf1      	bgt.n	8109922 <__exponent+0x1c>
 810993e:	3130      	adds	r1, #48	@ 0x30
 8109940:	1e94      	subs	r4, r2, #2
 8109942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8109946:	1c41      	adds	r1, r0, #1
 8109948:	4623      	mov	r3, r4
 810994a:	42ab      	cmp	r3, r5
 810994c:	d30a      	bcc.n	8109964 <__exponent+0x5e>
 810994e:	f10d 0309 	add.w	r3, sp, #9
 8109952:	1a9b      	subs	r3, r3, r2
 8109954:	42ac      	cmp	r4, r5
 8109956:	bf88      	it	hi
 8109958:	2300      	movhi	r3, #0
 810995a:	3302      	adds	r3, #2
 810995c:	4403      	add	r3, r0
 810995e:	1a18      	subs	r0, r3, r0
 8109960:	b003      	add	sp, #12
 8109962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109964:	f813 6b01 	ldrb.w	r6, [r3], #1
 8109968:	f801 6f01 	strb.w	r6, [r1, #1]!
 810996c:	e7ed      	b.n	810994a <__exponent+0x44>
 810996e:	2330      	movs	r3, #48	@ 0x30
 8109970:	3130      	adds	r1, #48	@ 0x30
 8109972:	7083      	strb	r3, [r0, #2]
 8109974:	70c1      	strb	r1, [r0, #3]
 8109976:	1d03      	adds	r3, r0, #4
 8109978:	e7f1      	b.n	810995e <__exponent+0x58>
	...

0810997c <_printf_float>:
 810997c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109980:	b08d      	sub	sp, #52	@ 0x34
 8109982:	460c      	mov	r4, r1
 8109984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8109988:	4616      	mov	r6, r2
 810998a:	461f      	mov	r7, r3
 810998c:	4605      	mov	r5, r0
 810998e:	f000 fff3 	bl	810a978 <_localeconv_r>
 8109992:	6803      	ldr	r3, [r0, #0]
 8109994:	9304      	str	r3, [sp, #16]
 8109996:	4618      	mov	r0, r3
 8109998:	f7f6 fcf2 	bl	8100380 <strlen>
 810999c:	2300      	movs	r3, #0
 810999e:	930a      	str	r3, [sp, #40]	@ 0x28
 81099a0:	f8d8 3000 	ldr.w	r3, [r8]
 81099a4:	9005      	str	r0, [sp, #20]
 81099a6:	3307      	adds	r3, #7
 81099a8:	f023 0307 	bic.w	r3, r3, #7
 81099ac:	f103 0208 	add.w	r2, r3, #8
 81099b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 81099b4:	f8d4 b000 	ldr.w	fp, [r4]
 81099b8:	f8c8 2000 	str.w	r2, [r8]
 81099bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 81099c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 81099c4:	9307      	str	r3, [sp, #28]
 81099c6:	f8cd 8018 	str.w	r8, [sp, #24]
 81099ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 81099ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81099d2:	4b9c      	ldr	r3, [pc, #624]	@ (8109c44 <_printf_float+0x2c8>)
 81099d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81099d8:	f7f7 f930 	bl	8100c3c <__aeabi_dcmpun>
 81099dc:	bb70      	cbnz	r0, 8109a3c <_printf_float+0xc0>
 81099de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81099e2:	4b98      	ldr	r3, [pc, #608]	@ (8109c44 <_printf_float+0x2c8>)
 81099e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81099e8:	f7f7 f90a 	bl	8100c00 <__aeabi_dcmple>
 81099ec:	bb30      	cbnz	r0, 8109a3c <_printf_float+0xc0>
 81099ee:	2200      	movs	r2, #0
 81099f0:	2300      	movs	r3, #0
 81099f2:	4640      	mov	r0, r8
 81099f4:	4649      	mov	r1, r9
 81099f6:	f7f7 f8f9 	bl	8100bec <__aeabi_dcmplt>
 81099fa:	b110      	cbz	r0, 8109a02 <_printf_float+0x86>
 81099fc:	232d      	movs	r3, #45	@ 0x2d
 81099fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109a02:	4a91      	ldr	r2, [pc, #580]	@ (8109c48 <_printf_float+0x2cc>)
 8109a04:	4b91      	ldr	r3, [pc, #580]	@ (8109c4c <_printf_float+0x2d0>)
 8109a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8109a0a:	bf94      	ite	ls
 8109a0c:	4690      	movls	r8, r2
 8109a0e:	4698      	movhi	r8, r3
 8109a10:	2303      	movs	r3, #3
 8109a12:	6123      	str	r3, [r4, #16]
 8109a14:	f02b 0304 	bic.w	r3, fp, #4
 8109a18:	6023      	str	r3, [r4, #0]
 8109a1a:	f04f 0900 	mov.w	r9, #0
 8109a1e:	9700      	str	r7, [sp, #0]
 8109a20:	4633      	mov	r3, r6
 8109a22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8109a24:	4621      	mov	r1, r4
 8109a26:	4628      	mov	r0, r5
 8109a28:	f000 f9d2 	bl	8109dd0 <_printf_common>
 8109a2c:	3001      	adds	r0, #1
 8109a2e:	f040 808d 	bne.w	8109b4c <_printf_float+0x1d0>
 8109a32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109a36:	b00d      	add	sp, #52	@ 0x34
 8109a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a3c:	4642      	mov	r2, r8
 8109a3e:	464b      	mov	r3, r9
 8109a40:	4640      	mov	r0, r8
 8109a42:	4649      	mov	r1, r9
 8109a44:	f7f7 f8fa 	bl	8100c3c <__aeabi_dcmpun>
 8109a48:	b140      	cbz	r0, 8109a5c <_printf_float+0xe0>
 8109a4a:	464b      	mov	r3, r9
 8109a4c:	2b00      	cmp	r3, #0
 8109a4e:	bfbc      	itt	lt
 8109a50:	232d      	movlt	r3, #45	@ 0x2d
 8109a52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8109a56:	4a7e      	ldr	r2, [pc, #504]	@ (8109c50 <_printf_float+0x2d4>)
 8109a58:	4b7e      	ldr	r3, [pc, #504]	@ (8109c54 <_printf_float+0x2d8>)
 8109a5a:	e7d4      	b.n	8109a06 <_printf_float+0x8a>
 8109a5c:	6863      	ldr	r3, [r4, #4]
 8109a5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8109a62:	9206      	str	r2, [sp, #24]
 8109a64:	1c5a      	adds	r2, r3, #1
 8109a66:	d13b      	bne.n	8109ae0 <_printf_float+0x164>
 8109a68:	2306      	movs	r3, #6
 8109a6a:	6063      	str	r3, [r4, #4]
 8109a6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8109a70:	2300      	movs	r3, #0
 8109a72:	6022      	str	r2, [r4, #0]
 8109a74:	9303      	str	r3, [sp, #12]
 8109a76:	ab0a      	add	r3, sp, #40	@ 0x28
 8109a78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8109a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8109a7e:	9300      	str	r3, [sp, #0]
 8109a80:	6861      	ldr	r1, [r4, #4]
 8109a82:	ec49 8b10 	vmov	d0, r8, r9
 8109a86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8109a8a:	4628      	mov	r0, r5
 8109a8c:	f7ff fed6 	bl	810983c <__cvt>
 8109a90:	9b06      	ldr	r3, [sp, #24]
 8109a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109a94:	2b47      	cmp	r3, #71	@ 0x47
 8109a96:	4680      	mov	r8, r0
 8109a98:	d129      	bne.n	8109aee <_printf_float+0x172>
 8109a9a:	1cc8      	adds	r0, r1, #3
 8109a9c:	db02      	blt.n	8109aa4 <_printf_float+0x128>
 8109a9e:	6863      	ldr	r3, [r4, #4]
 8109aa0:	4299      	cmp	r1, r3
 8109aa2:	dd41      	ble.n	8109b28 <_printf_float+0x1ac>
 8109aa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8109aa8:	fa5f fa8a 	uxtb.w	sl, sl
 8109aac:	3901      	subs	r1, #1
 8109aae:	4652      	mov	r2, sl
 8109ab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8109ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8109ab6:	f7ff ff26 	bl	8109906 <__exponent>
 8109aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109abc:	1813      	adds	r3, r2, r0
 8109abe:	2a01      	cmp	r2, #1
 8109ac0:	4681      	mov	r9, r0
 8109ac2:	6123      	str	r3, [r4, #16]
 8109ac4:	dc02      	bgt.n	8109acc <_printf_float+0x150>
 8109ac6:	6822      	ldr	r2, [r4, #0]
 8109ac8:	07d2      	lsls	r2, r2, #31
 8109aca:	d501      	bpl.n	8109ad0 <_printf_float+0x154>
 8109acc:	3301      	adds	r3, #1
 8109ace:	6123      	str	r3, [r4, #16]
 8109ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8109ad4:	2b00      	cmp	r3, #0
 8109ad6:	d0a2      	beq.n	8109a1e <_printf_float+0xa2>
 8109ad8:	232d      	movs	r3, #45	@ 0x2d
 8109ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109ade:	e79e      	b.n	8109a1e <_printf_float+0xa2>
 8109ae0:	9a06      	ldr	r2, [sp, #24]
 8109ae2:	2a47      	cmp	r2, #71	@ 0x47
 8109ae4:	d1c2      	bne.n	8109a6c <_printf_float+0xf0>
 8109ae6:	2b00      	cmp	r3, #0
 8109ae8:	d1c0      	bne.n	8109a6c <_printf_float+0xf0>
 8109aea:	2301      	movs	r3, #1
 8109aec:	e7bd      	b.n	8109a6a <_printf_float+0xee>
 8109aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109af2:	d9db      	bls.n	8109aac <_printf_float+0x130>
 8109af4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8109af8:	d118      	bne.n	8109b2c <_printf_float+0x1b0>
 8109afa:	2900      	cmp	r1, #0
 8109afc:	6863      	ldr	r3, [r4, #4]
 8109afe:	dd0b      	ble.n	8109b18 <_printf_float+0x19c>
 8109b00:	6121      	str	r1, [r4, #16]
 8109b02:	b913      	cbnz	r3, 8109b0a <_printf_float+0x18e>
 8109b04:	6822      	ldr	r2, [r4, #0]
 8109b06:	07d0      	lsls	r0, r2, #31
 8109b08:	d502      	bpl.n	8109b10 <_printf_float+0x194>
 8109b0a:	3301      	adds	r3, #1
 8109b0c:	440b      	add	r3, r1
 8109b0e:	6123      	str	r3, [r4, #16]
 8109b10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8109b12:	f04f 0900 	mov.w	r9, #0
 8109b16:	e7db      	b.n	8109ad0 <_printf_float+0x154>
 8109b18:	b913      	cbnz	r3, 8109b20 <_printf_float+0x1a4>
 8109b1a:	6822      	ldr	r2, [r4, #0]
 8109b1c:	07d2      	lsls	r2, r2, #31
 8109b1e:	d501      	bpl.n	8109b24 <_printf_float+0x1a8>
 8109b20:	3302      	adds	r3, #2
 8109b22:	e7f4      	b.n	8109b0e <_printf_float+0x192>
 8109b24:	2301      	movs	r3, #1
 8109b26:	e7f2      	b.n	8109b0e <_printf_float+0x192>
 8109b28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8109b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109b2e:	4299      	cmp	r1, r3
 8109b30:	db05      	blt.n	8109b3e <_printf_float+0x1c2>
 8109b32:	6823      	ldr	r3, [r4, #0]
 8109b34:	6121      	str	r1, [r4, #16]
 8109b36:	07d8      	lsls	r0, r3, #31
 8109b38:	d5ea      	bpl.n	8109b10 <_printf_float+0x194>
 8109b3a:	1c4b      	adds	r3, r1, #1
 8109b3c:	e7e7      	b.n	8109b0e <_printf_float+0x192>
 8109b3e:	2900      	cmp	r1, #0
 8109b40:	bfd4      	ite	le
 8109b42:	f1c1 0202 	rsble	r2, r1, #2
 8109b46:	2201      	movgt	r2, #1
 8109b48:	4413      	add	r3, r2
 8109b4a:	e7e0      	b.n	8109b0e <_printf_float+0x192>
 8109b4c:	6823      	ldr	r3, [r4, #0]
 8109b4e:	055a      	lsls	r2, r3, #21
 8109b50:	d407      	bmi.n	8109b62 <_printf_float+0x1e6>
 8109b52:	6923      	ldr	r3, [r4, #16]
 8109b54:	4642      	mov	r2, r8
 8109b56:	4631      	mov	r1, r6
 8109b58:	4628      	mov	r0, r5
 8109b5a:	47b8      	blx	r7
 8109b5c:	3001      	adds	r0, #1
 8109b5e:	d12b      	bne.n	8109bb8 <_printf_float+0x23c>
 8109b60:	e767      	b.n	8109a32 <_printf_float+0xb6>
 8109b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109b66:	f240 80dd 	bls.w	8109d24 <_printf_float+0x3a8>
 8109b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109b6e:	2200      	movs	r2, #0
 8109b70:	2300      	movs	r3, #0
 8109b72:	f7f7 f831 	bl	8100bd8 <__aeabi_dcmpeq>
 8109b76:	2800      	cmp	r0, #0
 8109b78:	d033      	beq.n	8109be2 <_printf_float+0x266>
 8109b7a:	4a37      	ldr	r2, [pc, #220]	@ (8109c58 <_printf_float+0x2dc>)
 8109b7c:	2301      	movs	r3, #1
 8109b7e:	4631      	mov	r1, r6
 8109b80:	4628      	mov	r0, r5
 8109b82:	47b8      	blx	r7
 8109b84:	3001      	adds	r0, #1
 8109b86:	f43f af54 	beq.w	8109a32 <_printf_float+0xb6>
 8109b8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8109b8e:	4543      	cmp	r3, r8
 8109b90:	db02      	blt.n	8109b98 <_printf_float+0x21c>
 8109b92:	6823      	ldr	r3, [r4, #0]
 8109b94:	07d8      	lsls	r0, r3, #31
 8109b96:	d50f      	bpl.n	8109bb8 <_printf_float+0x23c>
 8109b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109b9c:	4631      	mov	r1, r6
 8109b9e:	4628      	mov	r0, r5
 8109ba0:	47b8      	blx	r7
 8109ba2:	3001      	adds	r0, #1
 8109ba4:	f43f af45 	beq.w	8109a32 <_printf_float+0xb6>
 8109ba8:	f04f 0900 	mov.w	r9, #0
 8109bac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8109bb0:	f104 0a1a 	add.w	sl, r4, #26
 8109bb4:	45c8      	cmp	r8, r9
 8109bb6:	dc09      	bgt.n	8109bcc <_printf_float+0x250>
 8109bb8:	6823      	ldr	r3, [r4, #0]
 8109bba:	079b      	lsls	r3, r3, #30
 8109bbc:	f100 8103 	bmi.w	8109dc6 <_printf_float+0x44a>
 8109bc0:	68e0      	ldr	r0, [r4, #12]
 8109bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109bc4:	4298      	cmp	r0, r3
 8109bc6:	bfb8      	it	lt
 8109bc8:	4618      	movlt	r0, r3
 8109bca:	e734      	b.n	8109a36 <_printf_float+0xba>
 8109bcc:	2301      	movs	r3, #1
 8109bce:	4652      	mov	r2, sl
 8109bd0:	4631      	mov	r1, r6
 8109bd2:	4628      	mov	r0, r5
 8109bd4:	47b8      	blx	r7
 8109bd6:	3001      	adds	r0, #1
 8109bd8:	f43f af2b 	beq.w	8109a32 <_printf_float+0xb6>
 8109bdc:	f109 0901 	add.w	r9, r9, #1
 8109be0:	e7e8      	b.n	8109bb4 <_printf_float+0x238>
 8109be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109be4:	2b00      	cmp	r3, #0
 8109be6:	dc39      	bgt.n	8109c5c <_printf_float+0x2e0>
 8109be8:	4a1b      	ldr	r2, [pc, #108]	@ (8109c58 <_printf_float+0x2dc>)
 8109bea:	2301      	movs	r3, #1
 8109bec:	4631      	mov	r1, r6
 8109bee:	4628      	mov	r0, r5
 8109bf0:	47b8      	blx	r7
 8109bf2:	3001      	adds	r0, #1
 8109bf4:	f43f af1d 	beq.w	8109a32 <_printf_float+0xb6>
 8109bf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8109bfc:	ea59 0303 	orrs.w	r3, r9, r3
 8109c00:	d102      	bne.n	8109c08 <_printf_float+0x28c>
 8109c02:	6823      	ldr	r3, [r4, #0]
 8109c04:	07d9      	lsls	r1, r3, #31
 8109c06:	d5d7      	bpl.n	8109bb8 <_printf_float+0x23c>
 8109c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109c0c:	4631      	mov	r1, r6
 8109c0e:	4628      	mov	r0, r5
 8109c10:	47b8      	blx	r7
 8109c12:	3001      	adds	r0, #1
 8109c14:	f43f af0d 	beq.w	8109a32 <_printf_float+0xb6>
 8109c18:	f04f 0a00 	mov.w	sl, #0
 8109c1c:	f104 0b1a 	add.w	fp, r4, #26
 8109c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109c22:	425b      	negs	r3, r3
 8109c24:	4553      	cmp	r3, sl
 8109c26:	dc01      	bgt.n	8109c2c <_printf_float+0x2b0>
 8109c28:	464b      	mov	r3, r9
 8109c2a:	e793      	b.n	8109b54 <_printf_float+0x1d8>
 8109c2c:	2301      	movs	r3, #1
 8109c2e:	465a      	mov	r2, fp
 8109c30:	4631      	mov	r1, r6
 8109c32:	4628      	mov	r0, r5
 8109c34:	47b8      	blx	r7
 8109c36:	3001      	adds	r0, #1
 8109c38:	f43f aefb 	beq.w	8109a32 <_printf_float+0xb6>
 8109c3c:	f10a 0a01 	add.w	sl, sl, #1
 8109c40:	e7ee      	b.n	8109c20 <_printf_float+0x2a4>
 8109c42:	bf00      	nop
 8109c44:	7fefffff 	.word	0x7fefffff
 8109c48:	0810e804 	.word	0x0810e804
 8109c4c:	0810e808 	.word	0x0810e808
 8109c50:	0810e80c 	.word	0x0810e80c
 8109c54:	0810e810 	.word	0x0810e810
 8109c58:	0810e814 	.word	0x0810e814
 8109c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109c5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109c62:	4553      	cmp	r3, sl
 8109c64:	bfa8      	it	ge
 8109c66:	4653      	movge	r3, sl
 8109c68:	2b00      	cmp	r3, #0
 8109c6a:	4699      	mov	r9, r3
 8109c6c:	dc36      	bgt.n	8109cdc <_printf_float+0x360>
 8109c6e:	f04f 0b00 	mov.w	fp, #0
 8109c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109c76:	f104 021a 	add.w	r2, r4, #26
 8109c7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109c7c:	9306      	str	r3, [sp, #24]
 8109c7e:	eba3 0309 	sub.w	r3, r3, r9
 8109c82:	455b      	cmp	r3, fp
 8109c84:	dc31      	bgt.n	8109cea <_printf_float+0x36e>
 8109c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109c88:	459a      	cmp	sl, r3
 8109c8a:	dc3a      	bgt.n	8109d02 <_printf_float+0x386>
 8109c8c:	6823      	ldr	r3, [r4, #0]
 8109c8e:	07da      	lsls	r2, r3, #31
 8109c90:	d437      	bmi.n	8109d02 <_printf_float+0x386>
 8109c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109c94:	ebaa 0903 	sub.w	r9, sl, r3
 8109c98:	9b06      	ldr	r3, [sp, #24]
 8109c9a:	ebaa 0303 	sub.w	r3, sl, r3
 8109c9e:	4599      	cmp	r9, r3
 8109ca0:	bfa8      	it	ge
 8109ca2:	4699      	movge	r9, r3
 8109ca4:	f1b9 0f00 	cmp.w	r9, #0
 8109ca8:	dc33      	bgt.n	8109d12 <_printf_float+0x396>
 8109caa:	f04f 0800 	mov.w	r8, #0
 8109cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109cb2:	f104 0b1a 	add.w	fp, r4, #26
 8109cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8109cbc:	eba3 0309 	sub.w	r3, r3, r9
 8109cc0:	4543      	cmp	r3, r8
 8109cc2:	f77f af79 	ble.w	8109bb8 <_printf_float+0x23c>
 8109cc6:	2301      	movs	r3, #1
 8109cc8:	465a      	mov	r2, fp
 8109cca:	4631      	mov	r1, r6
 8109ccc:	4628      	mov	r0, r5
 8109cce:	47b8      	blx	r7
 8109cd0:	3001      	adds	r0, #1
 8109cd2:	f43f aeae 	beq.w	8109a32 <_printf_float+0xb6>
 8109cd6:	f108 0801 	add.w	r8, r8, #1
 8109cda:	e7ec      	b.n	8109cb6 <_printf_float+0x33a>
 8109cdc:	4642      	mov	r2, r8
 8109cde:	4631      	mov	r1, r6
 8109ce0:	4628      	mov	r0, r5
 8109ce2:	47b8      	blx	r7
 8109ce4:	3001      	adds	r0, #1
 8109ce6:	d1c2      	bne.n	8109c6e <_printf_float+0x2f2>
 8109ce8:	e6a3      	b.n	8109a32 <_printf_float+0xb6>
 8109cea:	2301      	movs	r3, #1
 8109cec:	4631      	mov	r1, r6
 8109cee:	4628      	mov	r0, r5
 8109cf0:	9206      	str	r2, [sp, #24]
 8109cf2:	47b8      	blx	r7
 8109cf4:	3001      	adds	r0, #1
 8109cf6:	f43f ae9c 	beq.w	8109a32 <_printf_float+0xb6>
 8109cfa:	9a06      	ldr	r2, [sp, #24]
 8109cfc:	f10b 0b01 	add.w	fp, fp, #1
 8109d00:	e7bb      	b.n	8109c7a <_printf_float+0x2fe>
 8109d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109d06:	4631      	mov	r1, r6
 8109d08:	4628      	mov	r0, r5
 8109d0a:	47b8      	blx	r7
 8109d0c:	3001      	adds	r0, #1
 8109d0e:	d1c0      	bne.n	8109c92 <_printf_float+0x316>
 8109d10:	e68f      	b.n	8109a32 <_printf_float+0xb6>
 8109d12:	9a06      	ldr	r2, [sp, #24]
 8109d14:	464b      	mov	r3, r9
 8109d16:	4442      	add	r2, r8
 8109d18:	4631      	mov	r1, r6
 8109d1a:	4628      	mov	r0, r5
 8109d1c:	47b8      	blx	r7
 8109d1e:	3001      	adds	r0, #1
 8109d20:	d1c3      	bne.n	8109caa <_printf_float+0x32e>
 8109d22:	e686      	b.n	8109a32 <_printf_float+0xb6>
 8109d24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109d28:	f1ba 0f01 	cmp.w	sl, #1
 8109d2c:	dc01      	bgt.n	8109d32 <_printf_float+0x3b6>
 8109d2e:	07db      	lsls	r3, r3, #31
 8109d30:	d536      	bpl.n	8109da0 <_printf_float+0x424>
 8109d32:	2301      	movs	r3, #1
 8109d34:	4642      	mov	r2, r8
 8109d36:	4631      	mov	r1, r6
 8109d38:	4628      	mov	r0, r5
 8109d3a:	47b8      	blx	r7
 8109d3c:	3001      	adds	r0, #1
 8109d3e:	f43f ae78 	beq.w	8109a32 <_printf_float+0xb6>
 8109d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109d46:	4631      	mov	r1, r6
 8109d48:	4628      	mov	r0, r5
 8109d4a:	47b8      	blx	r7
 8109d4c:	3001      	adds	r0, #1
 8109d4e:	f43f ae70 	beq.w	8109a32 <_printf_float+0xb6>
 8109d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109d56:	2200      	movs	r2, #0
 8109d58:	2300      	movs	r3, #0
 8109d5a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8109d5e:	f7f6 ff3b 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d62:	b9c0      	cbnz	r0, 8109d96 <_printf_float+0x41a>
 8109d64:	4653      	mov	r3, sl
 8109d66:	f108 0201 	add.w	r2, r8, #1
 8109d6a:	4631      	mov	r1, r6
 8109d6c:	4628      	mov	r0, r5
 8109d6e:	47b8      	blx	r7
 8109d70:	3001      	adds	r0, #1
 8109d72:	d10c      	bne.n	8109d8e <_printf_float+0x412>
 8109d74:	e65d      	b.n	8109a32 <_printf_float+0xb6>
 8109d76:	2301      	movs	r3, #1
 8109d78:	465a      	mov	r2, fp
 8109d7a:	4631      	mov	r1, r6
 8109d7c:	4628      	mov	r0, r5
 8109d7e:	47b8      	blx	r7
 8109d80:	3001      	adds	r0, #1
 8109d82:	f43f ae56 	beq.w	8109a32 <_printf_float+0xb6>
 8109d86:	f108 0801 	add.w	r8, r8, #1
 8109d8a:	45d0      	cmp	r8, sl
 8109d8c:	dbf3      	blt.n	8109d76 <_printf_float+0x3fa>
 8109d8e:	464b      	mov	r3, r9
 8109d90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8109d94:	e6df      	b.n	8109b56 <_printf_float+0x1da>
 8109d96:	f04f 0800 	mov.w	r8, #0
 8109d9a:	f104 0b1a 	add.w	fp, r4, #26
 8109d9e:	e7f4      	b.n	8109d8a <_printf_float+0x40e>
 8109da0:	2301      	movs	r3, #1
 8109da2:	4642      	mov	r2, r8
 8109da4:	e7e1      	b.n	8109d6a <_printf_float+0x3ee>
 8109da6:	2301      	movs	r3, #1
 8109da8:	464a      	mov	r2, r9
 8109daa:	4631      	mov	r1, r6
 8109dac:	4628      	mov	r0, r5
 8109dae:	47b8      	blx	r7
 8109db0:	3001      	adds	r0, #1
 8109db2:	f43f ae3e 	beq.w	8109a32 <_printf_float+0xb6>
 8109db6:	f108 0801 	add.w	r8, r8, #1
 8109dba:	68e3      	ldr	r3, [r4, #12]
 8109dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109dbe:	1a5b      	subs	r3, r3, r1
 8109dc0:	4543      	cmp	r3, r8
 8109dc2:	dcf0      	bgt.n	8109da6 <_printf_float+0x42a>
 8109dc4:	e6fc      	b.n	8109bc0 <_printf_float+0x244>
 8109dc6:	f04f 0800 	mov.w	r8, #0
 8109dca:	f104 0919 	add.w	r9, r4, #25
 8109dce:	e7f4      	b.n	8109dba <_printf_float+0x43e>

08109dd0 <_printf_common>:
 8109dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109dd4:	4616      	mov	r6, r2
 8109dd6:	4698      	mov	r8, r3
 8109dd8:	688a      	ldr	r2, [r1, #8]
 8109dda:	690b      	ldr	r3, [r1, #16]
 8109ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8109de0:	4293      	cmp	r3, r2
 8109de2:	bfb8      	it	lt
 8109de4:	4613      	movlt	r3, r2
 8109de6:	6033      	str	r3, [r6, #0]
 8109de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8109dec:	4607      	mov	r7, r0
 8109dee:	460c      	mov	r4, r1
 8109df0:	b10a      	cbz	r2, 8109df6 <_printf_common+0x26>
 8109df2:	3301      	adds	r3, #1
 8109df4:	6033      	str	r3, [r6, #0]
 8109df6:	6823      	ldr	r3, [r4, #0]
 8109df8:	0699      	lsls	r1, r3, #26
 8109dfa:	bf42      	ittt	mi
 8109dfc:	6833      	ldrmi	r3, [r6, #0]
 8109dfe:	3302      	addmi	r3, #2
 8109e00:	6033      	strmi	r3, [r6, #0]
 8109e02:	6825      	ldr	r5, [r4, #0]
 8109e04:	f015 0506 	ands.w	r5, r5, #6
 8109e08:	d106      	bne.n	8109e18 <_printf_common+0x48>
 8109e0a:	f104 0a19 	add.w	sl, r4, #25
 8109e0e:	68e3      	ldr	r3, [r4, #12]
 8109e10:	6832      	ldr	r2, [r6, #0]
 8109e12:	1a9b      	subs	r3, r3, r2
 8109e14:	42ab      	cmp	r3, r5
 8109e16:	dc26      	bgt.n	8109e66 <_printf_common+0x96>
 8109e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8109e1c:	6822      	ldr	r2, [r4, #0]
 8109e1e:	3b00      	subs	r3, #0
 8109e20:	bf18      	it	ne
 8109e22:	2301      	movne	r3, #1
 8109e24:	0692      	lsls	r2, r2, #26
 8109e26:	d42b      	bmi.n	8109e80 <_printf_common+0xb0>
 8109e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8109e2c:	4641      	mov	r1, r8
 8109e2e:	4638      	mov	r0, r7
 8109e30:	47c8      	blx	r9
 8109e32:	3001      	adds	r0, #1
 8109e34:	d01e      	beq.n	8109e74 <_printf_common+0xa4>
 8109e36:	6823      	ldr	r3, [r4, #0]
 8109e38:	6922      	ldr	r2, [r4, #16]
 8109e3a:	f003 0306 	and.w	r3, r3, #6
 8109e3e:	2b04      	cmp	r3, #4
 8109e40:	bf02      	ittt	eq
 8109e42:	68e5      	ldreq	r5, [r4, #12]
 8109e44:	6833      	ldreq	r3, [r6, #0]
 8109e46:	1aed      	subeq	r5, r5, r3
 8109e48:	68a3      	ldr	r3, [r4, #8]
 8109e4a:	bf0c      	ite	eq
 8109e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109e50:	2500      	movne	r5, #0
 8109e52:	4293      	cmp	r3, r2
 8109e54:	bfc4      	itt	gt
 8109e56:	1a9b      	subgt	r3, r3, r2
 8109e58:	18ed      	addgt	r5, r5, r3
 8109e5a:	2600      	movs	r6, #0
 8109e5c:	341a      	adds	r4, #26
 8109e5e:	42b5      	cmp	r5, r6
 8109e60:	d11a      	bne.n	8109e98 <_printf_common+0xc8>
 8109e62:	2000      	movs	r0, #0
 8109e64:	e008      	b.n	8109e78 <_printf_common+0xa8>
 8109e66:	2301      	movs	r3, #1
 8109e68:	4652      	mov	r2, sl
 8109e6a:	4641      	mov	r1, r8
 8109e6c:	4638      	mov	r0, r7
 8109e6e:	47c8      	blx	r9
 8109e70:	3001      	adds	r0, #1
 8109e72:	d103      	bne.n	8109e7c <_printf_common+0xac>
 8109e74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109e7c:	3501      	adds	r5, #1
 8109e7e:	e7c6      	b.n	8109e0e <_printf_common+0x3e>
 8109e80:	18e1      	adds	r1, r4, r3
 8109e82:	1c5a      	adds	r2, r3, #1
 8109e84:	2030      	movs	r0, #48	@ 0x30
 8109e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8109e8a:	4422      	add	r2, r4
 8109e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8109e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8109e94:	3302      	adds	r3, #2
 8109e96:	e7c7      	b.n	8109e28 <_printf_common+0x58>
 8109e98:	2301      	movs	r3, #1
 8109e9a:	4622      	mov	r2, r4
 8109e9c:	4641      	mov	r1, r8
 8109e9e:	4638      	mov	r0, r7
 8109ea0:	47c8      	blx	r9
 8109ea2:	3001      	adds	r0, #1
 8109ea4:	d0e6      	beq.n	8109e74 <_printf_common+0xa4>
 8109ea6:	3601      	adds	r6, #1
 8109ea8:	e7d9      	b.n	8109e5e <_printf_common+0x8e>
	...

08109eac <_printf_i>:
 8109eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109eb0:	7e0f      	ldrb	r7, [r1, #24]
 8109eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8109eb4:	2f78      	cmp	r7, #120	@ 0x78
 8109eb6:	4691      	mov	r9, r2
 8109eb8:	4680      	mov	r8, r0
 8109eba:	460c      	mov	r4, r1
 8109ebc:	469a      	mov	sl, r3
 8109ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8109ec2:	d807      	bhi.n	8109ed4 <_printf_i+0x28>
 8109ec4:	2f62      	cmp	r7, #98	@ 0x62
 8109ec6:	d80a      	bhi.n	8109ede <_printf_i+0x32>
 8109ec8:	2f00      	cmp	r7, #0
 8109eca:	f000 80d2 	beq.w	810a072 <_printf_i+0x1c6>
 8109ece:	2f58      	cmp	r7, #88	@ 0x58
 8109ed0:	f000 80b9 	beq.w	810a046 <_printf_i+0x19a>
 8109ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8109edc:	e03a      	b.n	8109f54 <_printf_i+0xa8>
 8109ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8109ee2:	2b15      	cmp	r3, #21
 8109ee4:	d8f6      	bhi.n	8109ed4 <_printf_i+0x28>
 8109ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8109eec <_printf_i+0x40>)
 8109ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109eec:	08109f45 	.word	0x08109f45
 8109ef0:	08109f59 	.word	0x08109f59
 8109ef4:	08109ed5 	.word	0x08109ed5
 8109ef8:	08109ed5 	.word	0x08109ed5
 8109efc:	08109ed5 	.word	0x08109ed5
 8109f00:	08109ed5 	.word	0x08109ed5
 8109f04:	08109f59 	.word	0x08109f59
 8109f08:	08109ed5 	.word	0x08109ed5
 8109f0c:	08109ed5 	.word	0x08109ed5
 8109f10:	08109ed5 	.word	0x08109ed5
 8109f14:	08109ed5 	.word	0x08109ed5
 8109f18:	0810a059 	.word	0x0810a059
 8109f1c:	08109f83 	.word	0x08109f83
 8109f20:	0810a013 	.word	0x0810a013
 8109f24:	08109ed5 	.word	0x08109ed5
 8109f28:	08109ed5 	.word	0x08109ed5
 8109f2c:	0810a07b 	.word	0x0810a07b
 8109f30:	08109ed5 	.word	0x08109ed5
 8109f34:	08109f83 	.word	0x08109f83
 8109f38:	08109ed5 	.word	0x08109ed5
 8109f3c:	08109ed5 	.word	0x08109ed5
 8109f40:	0810a01b 	.word	0x0810a01b
 8109f44:	6833      	ldr	r3, [r6, #0]
 8109f46:	1d1a      	adds	r2, r3, #4
 8109f48:	681b      	ldr	r3, [r3, #0]
 8109f4a:	6032      	str	r2, [r6, #0]
 8109f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8109f54:	2301      	movs	r3, #1
 8109f56:	e09d      	b.n	810a094 <_printf_i+0x1e8>
 8109f58:	6833      	ldr	r3, [r6, #0]
 8109f5a:	6820      	ldr	r0, [r4, #0]
 8109f5c:	1d19      	adds	r1, r3, #4
 8109f5e:	6031      	str	r1, [r6, #0]
 8109f60:	0606      	lsls	r6, r0, #24
 8109f62:	d501      	bpl.n	8109f68 <_printf_i+0xbc>
 8109f64:	681d      	ldr	r5, [r3, #0]
 8109f66:	e003      	b.n	8109f70 <_printf_i+0xc4>
 8109f68:	0645      	lsls	r5, r0, #25
 8109f6a:	d5fb      	bpl.n	8109f64 <_printf_i+0xb8>
 8109f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8109f70:	2d00      	cmp	r5, #0
 8109f72:	da03      	bge.n	8109f7c <_printf_i+0xd0>
 8109f74:	232d      	movs	r3, #45	@ 0x2d
 8109f76:	426d      	negs	r5, r5
 8109f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109f7c:	4859      	ldr	r0, [pc, #356]	@ (810a0e4 <_printf_i+0x238>)
 8109f7e:	230a      	movs	r3, #10
 8109f80:	e011      	b.n	8109fa6 <_printf_i+0xfa>
 8109f82:	6821      	ldr	r1, [r4, #0]
 8109f84:	6833      	ldr	r3, [r6, #0]
 8109f86:	0608      	lsls	r0, r1, #24
 8109f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8109f8c:	d402      	bmi.n	8109f94 <_printf_i+0xe8>
 8109f8e:	0649      	lsls	r1, r1, #25
 8109f90:	bf48      	it	mi
 8109f92:	b2ad      	uxthmi	r5, r5
 8109f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8109f96:	4853      	ldr	r0, [pc, #332]	@ (810a0e4 <_printf_i+0x238>)
 8109f98:	6033      	str	r3, [r6, #0]
 8109f9a:	bf14      	ite	ne
 8109f9c:	230a      	movne	r3, #10
 8109f9e:	2308      	moveq	r3, #8
 8109fa0:	2100      	movs	r1, #0
 8109fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8109fa6:	6866      	ldr	r6, [r4, #4]
 8109fa8:	60a6      	str	r6, [r4, #8]
 8109faa:	2e00      	cmp	r6, #0
 8109fac:	bfa2      	ittt	ge
 8109fae:	6821      	ldrge	r1, [r4, #0]
 8109fb0:	f021 0104 	bicge.w	r1, r1, #4
 8109fb4:	6021      	strge	r1, [r4, #0]
 8109fb6:	b90d      	cbnz	r5, 8109fbc <_printf_i+0x110>
 8109fb8:	2e00      	cmp	r6, #0
 8109fba:	d04b      	beq.n	810a054 <_printf_i+0x1a8>
 8109fbc:	4616      	mov	r6, r2
 8109fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8109fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8109fc6:	5dc7      	ldrb	r7, [r0, r7]
 8109fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8109fcc:	462f      	mov	r7, r5
 8109fce:	42bb      	cmp	r3, r7
 8109fd0:	460d      	mov	r5, r1
 8109fd2:	d9f4      	bls.n	8109fbe <_printf_i+0x112>
 8109fd4:	2b08      	cmp	r3, #8
 8109fd6:	d10b      	bne.n	8109ff0 <_printf_i+0x144>
 8109fd8:	6823      	ldr	r3, [r4, #0]
 8109fda:	07df      	lsls	r7, r3, #31
 8109fdc:	d508      	bpl.n	8109ff0 <_printf_i+0x144>
 8109fde:	6923      	ldr	r3, [r4, #16]
 8109fe0:	6861      	ldr	r1, [r4, #4]
 8109fe2:	4299      	cmp	r1, r3
 8109fe4:	bfde      	ittt	le
 8109fe6:	2330      	movle	r3, #48	@ 0x30
 8109fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8109fec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8109ff0:	1b92      	subs	r2, r2, r6
 8109ff2:	6122      	str	r2, [r4, #16]
 8109ff4:	f8cd a000 	str.w	sl, [sp]
 8109ff8:	464b      	mov	r3, r9
 8109ffa:	aa03      	add	r2, sp, #12
 8109ffc:	4621      	mov	r1, r4
 8109ffe:	4640      	mov	r0, r8
 810a000:	f7ff fee6 	bl	8109dd0 <_printf_common>
 810a004:	3001      	adds	r0, #1
 810a006:	d14a      	bne.n	810a09e <_printf_i+0x1f2>
 810a008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810a00c:	b004      	add	sp, #16
 810a00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a012:	6823      	ldr	r3, [r4, #0]
 810a014:	f043 0320 	orr.w	r3, r3, #32
 810a018:	6023      	str	r3, [r4, #0]
 810a01a:	4833      	ldr	r0, [pc, #204]	@ (810a0e8 <_printf_i+0x23c>)
 810a01c:	2778      	movs	r7, #120	@ 0x78
 810a01e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810a022:	6823      	ldr	r3, [r4, #0]
 810a024:	6831      	ldr	r1, [r6, #0]
 810a026:	061f      	lsls	r7, r3, #24
 810a028:	f851 5b04 	ldr.w	r5, [r1], #4
 810a02c:	d402      	bmi.n	810a034 <_printf_i+0x188>
 810a02e:	065f      	lsls	r7, r3, #25
 810a030:	bf48      	it	mi
 810a032:	b2ad      	uxthmi	r5, r5
 810a034:	6031      	str	r1, [r6, #0]
 810a036:	07d9      	lsls	r1, r3, #31
 810a038:	bf44      	itt	mi
 810a03a:	f043 0320 	orrmi.w	r3, r3, #32
 810a03e:	6023      	strmi	r3, [r4, #0]
 810a040:	b11d      	cbz	r5, 810a04a <_printf_i+0x19e>
 810a042:	2310      	movs	r3, #16
 810a044:	e7ac      	b.n	8109fa0 <_printf_i+0xf4>
 810a046:	4827      	ldr	r0, [pc, #156]	@ (810a0e4 <_printf_i+0x238>)
 810a048:	e7e9      	b.n	810a01e <_printf_i+0x172>
 810a04a:	6823      	ldr	r3, [r4, #0]
 810a04c:	f023 0320 	bic.w	r3, r3, #32
 810a050:	6023      	str	r3, [r4, #0]
 810a052:	e7f6      	b.n	810a042 <_printf_i+0x196>
 810a054:	4616      	mov	r6, r2
 810a056:	e7bd      	b.n	8109fd4 <_printf_i+0x128>
 810a058:	6833      	ldr	r3, [r6, #0]
 810a05a:	6825      	ldr	r5, [r4, #0]
 810a05c:	6961      	ldr	r1, [r4, #20]
 810a05e:	1d18      	adds	r0, r3, #4
 810a060:	6030      	str	r0, [r6, #0]
 810a062:	062e      	lsls	r6, r5, #24
 810a064:	681b      	ldr	r3, [r3, #0]
 810a066:	d501      	bpl.n	810a06c <_printf_i+0x1c0>
 810a068:	6019      	str	r1, [r3, #0]
 810a06a:	e002      	b.n	810a072 <_printf_i+0x1c6>
 810a06c:	0668      	lsls	r0, r5, #25
 810a06e:	d5fb      	bpl.n	810a068 <_printf_i+0x1bc>
 810a070:	8019      	strh	r1, [r3, #0]
 810a072:	2300      	movs	r3, #0
 810a074:	6123      	str	r3, [r4, #16]
 810a076:	4616      	mov	r6, r2
 810a078:	e7bc      	b.n	8109ff4 <_printf_i+0x148>
 810a07a:	6833      	ldr	r3, [r6, #0]
 810a07c:	1d1a      	adds	r2, r3, #4
 810a07e:	6032      	str	r2, [r6, #0]
 810a080:	681e      	ldr	r6, [r3, #0]
 810a082:	6862      	ldr	r2, [r4, #4]
 810a084:	2100      	movs	r1, #0
 810a086:	4630      	mov	r0, r6
 810a088:	f7f6 f92a 	bl	81002e0 <memchr>
 810a08c:	b108      	cbz	r0, 810a092 <_printf_i+0x1e6>
 810a08e:	1b80      	subs	r0, r0, r6
 810a090:	6060      	str	r0, [r4, #4]
 810a092:	6863      	ldr	r3, [r4, #4]
 810a094:	6123      	str	r3, [r4, #16]
 810a096:	2300      	movs	r3, #0
 810a098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a09c:	e7aa      	b.n	8109ff4 <_printf_i+0x148>
 810a09e:	6923      	ldr	r3, [r4, #16]
 810a0a0:	4632      	mov	r2, r6
 810a0a2:	4649      	mov	r1, r9
 810a0a4:	4640      	mov	r0, r8
 810a0a6:	47d0      	blx	sl
 810a0a8:	3001      	adds	r0, #1
 810a0aa:	d0ad      	beq.n	810a008 <_printf_i+0x15c>
 810a0ac:	6823      	ldr	r3, [r4, #0]
 810a0ae:	079b      	lsls	r3, r3, #30
 810a0b0:	d413      	bmi.n	810a0da <_printf_i+0x22e>
 810a0b2:	68e0      	ldr	r0, [r4, #12]
 810a0b4:	9b03      	ldr	r3, [sp, #12]
 810a0b6:	4298      	cmp	r0, r3
 810a0b8:	bfb8      	it	lt
 810a0ba:	4618      	movlt	r0, r3
 810a0bc:	e7a6      	b.n	810a00c <_printf_i+0x160>
 810a0be:	2301      	movs	r3, #1
 810a0c0:	4632      	mov	r2, r6
 810a0c2:	4649      	mov	r1, r9
 810a0c4:	4640      	mov	r0, r8
 810a0c6:	47d0      	blx	sl
 810a0c8:	3001      	adds	r0, #1
 810a0ca:	d09d      	beq.n	810a008 <_printf_i+0x15c>
 810a0cc:	3501      	adds	r5, #1
 810a0ce:	68e3      	ldr	r3, [r4, #12]
 810a0d0:	9903      	ldr	r1, [sp, #12]
 810a0d2:	1a5b      	subs	r3, r3, r1
 810a0d4:	42ab      	cmp	r3, r5
 810a0d6:	dcf2      	bgt.n	810a0be <_printf_i+0x212>
 810a0d8:	e7eb      	b.n	810a0b2 <_printf_i+0x206>
 810a0da:	2500      	movs	r5, #0
 810a0dc:	f104 0619 	add.w	r6, r4, #25
 810a0e0:	e7f5      	b.n	810a0ce <_printf_i+0x222>
 810a0e2:	bf00      	nop
 810a0e4:	0810e816 	.word	0x0810e816
 810a0e8:	0810e827 	.word	0x0810e827

0810a0ec <_scanf_float>:
 810a0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a0f0:	b087      	sub	sp, #28
 810a0f2:	4617      	mov	r7, r2
 810a0f4:	9303      	str	r3, [sp, #12]
 810a0f6:	688b      	ldr	r3, [r1, #8]
 810a0f8:	1e5a      	subs	r2, r3, #1
 810a0fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810a0fe:	bf81      	itttt	hi
 810a100:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810a104:	eb03 0b05 	addhi.w	fp, r3, r5
 810a108:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810a10c:	608b      	strhi	r3, [r1, #8]
 810a10e:	680b      	ldr	r3, [r1, #0]
 810a110:	460a      	mov	r2, r1
 810a112:	f04f 0500 	mov.w	r5, #0
 810a116:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810a11a:	f842 3b1c 	str.w	r3, [r2], #28
 810a11e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810a122:	4680      	mov	r8, r0
 810a124:	460c      	mov	r4, r1
 810a126:	bf98      	it	ls
 810a128:	f04f 0b00 	movls.w	fp, #0
 810a12c:	9201      	str	r2, [sp, #4]
 810a12e:	4616      	mov	r6, r2
 810a130:	46aa      	mov	sl, r5
 810a132:	46a9      	mov	r9, r5
 810a134:	9502      	str	r5, [sp, #8]
 810a136:	68a2      	ldr	r2, [r4, #8]
 810a138:	b152      	cbz	r2, 810a150 <_scanf_float+0x64>
 810a13a:	683b      	ldr	r3, [r7, #0]
 810a13c:	781b      	ldrb	r3, [r3, #0]
 810a13e:	2b4e      	cmp	r3, #78	@ 0x4e
 810a140:	d864      	bhi.n	810a20c <_scanf_float+0x120>
 810a142:	2b40      	cmp	r3, #64	@ 0x40
 810a144:	d83c      	bhi.n	810a1c0 <_scanf_float+0xd4>
 810a146:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810a14a:	b2c8      	uxtb	r0, r1
 810a14c:	280e      	cmp	r0, #14
 810a14e:	d93a      	bls.n	810a1c6 <_scanf_float+0xda>
 810a150:	f1b9 0f00 	cmp.w	r9, #0
 810a154:	d003      	beq.n	810a15e <_scanf_float+0x72>
 810a156:	6823      	ldr	r3, [r4, #0]
 810a158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a15c:	6023      	str	r3, [r4, #0]
 810a15e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810a162:	f1ba 0f01 	cmp.w	sl, #1
 810a166:	f200 8117 	bhi.w	810a398 <_scanf_float+0x2ac>
 810a16a:	9b01      	ldr	r3, [sp, #4]
 810a16c:	429e      	cmp	r6, r3
 810a16e:	f200 8108 	bhi.w	810a382 <_scanf_float+0x296>
 810a172:	2001      	movs	r0, #1
 810a174:	b007      	add	sp, #28
 810a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a17a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810a17e:	2a0d      	cmp	r2, #13
 810a180:	d8e6      	bhi.n	810a150 <_scanf_float+0x64>
 810a182:	a101      	add	r1, pc, #4	@ (adr r1, 810a188 <_scanf_float+0x9c>)
 810a184:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a188:	0810a2cf 	.word	0x0810a2cf
 810a18c:	0810a151 	.word	0x0810a151
 810a190:	0810a151 	.word	0x0810a151
 810a194:	0810a151 	.word	0x0810a151
 810a198:	0810a32f 	.word	0x0810a32f
 810a19c:	0810a307 	.word	0x0810a307
 810a1a0:	0810a151 	.word	0x0810a151
 810a1a4:	0810a151 	.word	0x0810a151
 810a1a8:	0810a2dd 	.word	0x0810a2dd
 810a1ac:	0810a151 	.word	0x0810a151
 810a1b0:	0810a151 	.word	0x0810a151
 810a1b4:	0810a151 	.word	0x0810a151
 810a1b8:	0810a151 	.word	0x0810a151
 810a1bc:	0810a295 	.word	0x0810a295
 810a1c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810a1c4:	e7db      	b.n	810a17e <_scanf_float+0x92>
 810a1c6:	290e      	cmp	r1, #14
 810a1c8:	d8c2      	bhi.n	810a150 <_scanf_float+0x64>
 810a1ca:	a001      	add	r0, pc, #4	@ (adr r0, 810a1d0 <_scanf_float+0xe4>)
 810a1cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a1d0:	0810a285 	.word	0x0810a285
 810a1d4:	0810a151 	.word	0x0810a151
 810a1d8:	0810a285 	.word	0x0810a285
 810a1dc:	0810a31b 	.word	0x0810a31b
 810a1e0:	0810a151 	.word	0x0810a151
 810a1e4:	0810a22d 	.word	0x0810a22d
 810a1e8:	0810a26b 	.word	0x0810a26b
 810a1ec:	0810a26b 	.word	0x0810a26b
 810a1f0:	0810a26b 	.word	0x0810a26b
 810a1f4:	0810a26b 	.word	0x0810a26b
 810a1f8:	0810a26b 	.word	0x0810a26b
 810a1fc:	0810a26b 	.word	0x0810a26b
 810a200:	0810a26b 	.word	0x0810a26b
 810a204:	0810a26b 	.word	0x0810a26b
 810a208:	0810a26b 	.word	0x0810a26b
 810a20c:	2b6e      	cmp	r3, #110	@ 0x6e
 810a20e:	d809      	bhi.n	810a224 <_scanf_float+0x138>
 810a210:	2b60      	cmp	r3, #96	@ 0x60
 810a212:	d8b2      	bhi.n	810a17a <_scanf_float+0x8e>
 810a214:	2b54      	cmp	r3, #84	@ 0x54
 810a216:	d07b      	beq.n	810a310 <_scanf_float+0x224>
 810a218:	2b59      	cmp	r3, #89	@ 0x59
 810a21a:	d199      	bne.n	810a150 <_scanf_float+0x64>
 810a21c:	2d07      	cmp	r5, #7
 810a21e:	d197      	bne.n	810a150 <_scanf_float+0x64>
 810a220:	2508      	movs	r5, #8
 810a222:	e02c      	b.n	810a27e <_scanf_float+0x192>
 810a224:	2b74      	cmp	r3, #116	@ 0x74
 810a226:	d073      	beq.n	810a310 <_scanf_float+0x224>
 810a228:	2b79      	cmp	r3, #121	@ 0x79
 810a22a:	e7f6      	b.n	810a21a <_scanf_float+0x12e>
 810a22c:	6821      	ldr	r1, [r4, #0]
 810a22e:	05c8      	lsls	r0, r1, #23
 810a230:	d51b      	bpl.n	810a26a <_scanf_float+0x17e>
 810a232:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810a236:	6021      	str	r1, [r4, #0]
 810a238:	f109 0901 	add.w	r9, r9, #1
 810a23c:	f1bb 0f00 	cmp.w	fp, #0
 810a240:	d003      	beq.n	810a24a <_scanf_float+0x15e>
 810a242:	3201      	adds	r2, #1
 810a244:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 810a248:	60a2      	str	r2, [r4, #8]
 810a24a:	68a3      	ldr	r3, [r4, #8]
 810a24c:	3b01      	subs	r3, #1
 810a24e:	60a3      	str	r3, [r4, #8]
 810a250:	6923      	ldr	r3, [r4, #16]
 810a252:	3301      	adds	r3, #1
 810a254:	6123      	str	r3, [r4, #16]
 810a256:	687b      	ldr	r3, [r7, #4]
 810a258:	3b01      	subs	r3, #1
 810a25a:	2b00      	cmp	r3, #0
 810a25c:	607b      	str	r3, [r7, #4]
 810a25e:	f340 8087 	ble.w	810a370 <_scanf_float+0x284>
 810a262:	683b      	ldr	r3, [r7, #0]
 810a264:	3301      	adds	r3, #1
 810a266:	603b      	str	r3, [r7, #0]
 810a268:	e765      	b.n	810a136 <_scanf_float+0x4a>
 810a26a:	eb1a 0105 	adds.w	r1, sl, r5
 810a26e:	f47f af6f 	bne.w	810a150 <_scanf_float+0x64>
 810a272:	6822      	ldr	r2, [r4, #0]
 810a274:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810a278:	6022      	str	r2, [r4, #0]
 810a27a:	460d      	mov	r5, r1
 810a27c:	468a      	mov	sl, r1
 810a27e:	f806 3b01 	strb.w	r3, [r6], #1
 810a282:	e7e2      	b.n	810a24a <_scanf_float+0x15e>
 810a284:	6822      	ldr	r2, [r4, #0]
 810a286:	0610      	lsls	r0, r2, #24
 810a288:	f57f af62 	bpl.w	810a150 <_scanf_float+0x64>
 810a28c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810a290:	6022      	str	r2, [r4, #0]
 810a292:	e7f4      	b.n	810a27e <_scanf_float+0x192>
 810a294:	f1ba 0f00 	cmp.w	sl, #0
 810a298:	d10e      	bne.n	810a2b8 <_scanf_float+0x1cc>
 810a29a:	f1b9 0f00 	cmp.w	r9, #0
 810a29e:	d10e      	bne.n	810a2be <_scanf_float+0x1d2>
 810a2a0:	6822      	ldr	r2, [r4, #0]
 810a2a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a2a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a2aa:	d108      	bne.n	810a2be <_scanf_float+0x1d2>
 810a2ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a2b0:	6022      	str	r2, [r4, #0]
 810a2b2:	f04f 0a01 	mov.w	sl, #1
 810a2b6:	e7e2      	b.n	810a27e <_scanf_float+0x192>
 810a2b8:	f1ba 0f02 	cmp.w	sl, #2
 810a2bc:	d055      	beq.n	810a36a <_scanf_float+0x27e>
 810a2be:	2d01      	cmp	r5, #1
 810a2c0:	d002      	beq.n	810a2c8 <_scanf_float+0x1dc>
 810a2c2:	2d04      	cmp	r5, #4
 810a2c4:	f47f af44 	bne.w	810a150 <_scanf_float+0x64>
 810a2c8:	3501      	adds	r5, #1
 810a2ca:	b2ed      	uxtb	r5, r5
 810a2cc:	e7d7      	b.n	810a27e <_scanf_float+0x192>
 810a2ce:	f1ba 0f01 	cmp.w	sl, #1
 810a2d2:	f47f af3d 	bne.w	810a150 <_scanf_float+0x64>
 810a2d6:	f04f 0a02 	mov.w	sl, #2
 810a2da:	e7d0      	b.n	810a27e <_scanf_float+0x192>
 810a2dc:	b97d      	cbnz	r5, 810a2fe <_scanf_float+0x212>
 810a2de:	f1b9 0f00 	cmp.w	r9, #0
 810a2e2:	f47f af38 	bne.w	810a156 <_scanf_float+0x6a>
 810a2e6:	6822      	ldr	r2, [r4, #0]
 810a2e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a2ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a2f0:	f040 8108 	bne.w	810a504 <_scanf_float+0x418>
 810a2f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a2f8:	6022      	str	r2, [r4, #0]
 810a2fa:	2501      	movs	r5, #1
 810a2fc:	e7bf      	b.n	810a27e <_scanf_float+0x192>
 810a2fe:	2d03      	cmp	r5, #3
 810a300:	d0e2      	beq.n	810a2c8 <_scanf_float+0x1dc>
 810a302:	2d05      	cmp	r5, #5
 810a304:	e7de      	b.n	810a2c4 <_scanf_float+0x1d8>
 810a306:	2d02      	cmp	r5, #2
 810a308:	f47f af22 	bne.w	810a150 <_scanf_float+0x64>
 810a30c:	2503      	movs	r5, #3
 810a30e:	e7b6      	b.n	810a27e <_scanf_float+0x192>
 810a310:	2d06      	cmp	r5, #6
 810a312:	f47f af1d 	bne.w	810a150 <_scanf_float+0x64>
 810a316:	2507      	movs	r5, #7
 810a318:	e7b1      	b.n	810a27e <_scanf_float+0x192>
 810a31a:	6822      	ldr	r2, [r4, #0]
 810a31c:	0591      	lsls	r1, r2, #22
 810a31e:	f57f af17 	bpl.w	810a150 <_scanf_float+0x64>
 810a322:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810a326:	6022      	str	r2, [r4, #0]
 810a328:	f8cd 9008 	str.w	r9, [sp, #8]
 810a32c:	e7a7      	b.n	810a27e <_scanf_float+0x192>
 810a32e:	6822      	ldr	r2, [r4, #0]
 810a330:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810a334:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810a338:	d006      	beq.n	810a348 <_scanf_float+0x25c>
 810a33a:	0550      	lsls	r0, r2, #21
 810a33c:	f57f af08 	bpl.w	810a150 <_scanf_float+0x64>
 810a340:	f1b9 0f00 	cmp.w	r9, #0
 810a344:	f000 80de 	beq.w	810a504 <_scanf_float+0x418>
 810a348:	0591      	lsls	r1, r2, #22
 810a34a:	bf58      	it	pl
 810a34c:	9902      	ldrpl	r1, [sp, #8]
 810a34e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a352:	bf58      	it	pl
 810a354:	eba9 0101 	subpl.w	r1, r9, r1
 810a358:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810a35c:	bf58      	it	pl
 810a35e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a362:	6022      	str	r2, [r4, #0]
 810a364:	f04f 0900 	mov.w	r9, #0
 810a368:	e789      	b.n	810a27e <_scanf_float+0x192>
 810a36a:	f04f 0a03 	mov.w	sl, #3
 810a36e:	e786      	b.n	810a27e <_scanf_float+0x192>
 810a370:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810a374:	4639      	mov	r1, r7
 810a376:	4640      	mov	r0, r8
 810a378:	4798      	blx	r3
 810a37a:	2800      	cmp	r0, #0
 810a37c:	f43f aedb 	beq.w	810a136 <_scanf_float+0x4a>
 810a380:	e6e6      	b.n	810a150 <_scanf_float+0x64>
 810a382:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a38a:	463a      	mov	r2, r7
 810a38c:	4640      	mov	r0, r8
 810a38e:	4798      	blx	r3
 810a390:	6923      	ldr	r3, [r4, #16]
 810a392:	3b01      	subs	r3, #1
 810a394:	6123      	str	r3, [r4, #16]
 810a396:	e6e8      	b.n	810a16a <_scanf_float+0x7e>
 810a398:	1e6b      	subs	r3, r5, #1
 810a39a:	2b06      	cmp	r3, #6
 810a39c:	d824      	bhi.n	810a3e8 <_scanf_float+0x2fc>
 810a39e:	2d02      	cmp	r5, #2
 810a3a0:	d836      	bhi.n	810a410 <_scanf_float+0x324>
 810a3a2:	9b01      	ldr	r3, [sp, #4]
 810a3a4:	429e      	cmp	r6, r3
 810a3a6:	f67f aee4 	bls.w	810a172 <_scanf_float+0x86>
 810a3aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a3ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a3b2:	463a      	mov	r2, r7
 810a3b4:	4640      	mov	r0, r8
 810a3b6:	4798      	blx	r3
 810a3b8:	6923      	ldr	r3, [r4, #16]
 810a3ba:	3b01      	subs	r3, #1
 810a3bc:	6123      	str	r3, [r4, #16]
 810a3be:	e7f0      	b.n	810a3a2 <_scanf_float+0x2b6>
 810a3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a3c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810a3c8:	463a      	mov	r2, r7
 810a3ca:	4640      	mov	r0, r8
 810a3cc:	4798      	blx	r3
 810a3ce:	6923      	ldr	r3, [r4, #16]
 810a3d0:	3b01      	subs	r3, #1
 810a3d2:	6123      	str	r3, [r4, #16]
 810a3d4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810a3d8:	fa5f fa8a 	uxtb.w	sl, sl
 810a3dc:	f1ba 0f02 	cmp.w	sl, #2
 810a3e0:	d1ee      	bne.n	810a3c0 <_scanf_float+0x2d4>
 810a3e2:	3d03      	subs	r5, #3
 810a3e4:	b2ed      	uxtb	r5, r5
 810a3e6:	1b76      	subs	r6, r6, r5
 810a3e8:	6823      	ldr	r3, [r4, #0]
 810a3ea:	05da      	lsls	r2, r3, #23
 810a3ec:	d530      	bpl.n	810a450 <_scanf_float+0x364>
 810a3ee:	055b      	lsls	r3, r3, #21
 810a3f0:	d511      	bpl.n	810a416 <_scanf_float+0x32a>
 810a3f2:	9b01      	ldr	r3, [sp, #4]
 810a3f4:	429e      	cmp	r6, r3
 810a3f6:	f67f aebc 	bls.w	810a172 <_scanf_float+0x86>
 810a3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a3fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a402:	463a      	mov	r2, r7
 810a404:	4640      	mov	r0, r8
 810a406:	4798      	blx	r3
 810a408:	6923      	ldr	r3, [r4, #16]
 810a40a:	3b01      	subs	r3, #1
 810a40c:	6123      	str	r3, [r4, #16]
 810a40e:	e7f0      	b.n	810a3f2 <_scanf_float+0x306>
 810a410:	46aa      	mov	sl, r5
 810a412:	46b3      	mov	fp, r6
 810a414:	e7de      	b.n	810a3d4 <_scanf_float+0x2e8>
 810a416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a41a:	6923      	ldr	r3, [r4, #16]
 810a41c:	2965      	cmp	r1, #101	@ 0x65
 810a41e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 810a422:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 810a426:	6123      	str	r3, [r4, #16]
 810a428:	d00c      	beq.n	810a444 <_scanf_float+0x358>
 810a42a:	2945      	cmp	r1, #69	@ 0x45
 810a42c:	d00a      	beq.n	810a444 <_scanf_float+0x358>
 810a42e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a432:	463a      	mov	r2, r7
 810a434:	4640      	mov	r0, r8
 810a436:	4798      	blx	r3
 810a438:	6923      	ldr	r3, [r4, #16]
 810a43a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a43e:	3b01      	subs	r3, #1
 810a440:	1eb5      	subs	r5, r6, #2
 810a442:	6123      	str	r3, [r4, #16]
 810a444:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a448:	463a      	mov	r2, r7
 810a44a:	4640      	mov	r0, r8
 810a44c:	4798      	blx	r3
 810a44e:	462e      	mov	r6, r5
 810a450:	6822      	ldr	r2, [r4, #0]
 810a452:	f012 0210 	ands.w	r2, r2, #16
 810a456:	d001      	beq.n	810a45c <_scanf_float+0x370>
 810a458:	2000      	movs	r0, #0
 810a45a:	e68b      	b.n	810a174 <_scanf_float+0x88>
 810a45c:	7032      	strb	r2, [r6, #0]
 810a45e:	6823      	ldr	r3, [r4, #0]
 810a460:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810a464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810a468:	d11c      	bne.n	810a4a4 <_scanf_float+0x3b8>
 810a46a:	9b02      	ldr	r3, [sp, #8]
 810a46c:	454b      	cmp	r3, r9
 810a46e:	eba3 0209 	sub.w	r2, r3, r9
 810a472:	d123      	bne.n	810a4bc <_scanf_float+0x3d0>
 810a474:	9901      	ldr	r1, [sp, #4]
 810a476:	2200      	movs	r2, #0
 810a478:	4640      	mov	r0, r8
 810a47a:	f002 fd09 	bl	810ce90 <_strtod_r>
 810a47e:	9b03      	ldr	r3, [sp, #12]
 810a480:	6821      	ldr	r1, [r4, #0]
 810a482:	681b      	ldr	r3, [r3, #0]
 810a484:	f011 0f02 	tst.w	r1, #2
 810a488:	ec57 6b10 	vmov	r6, r7, d0
 810a48c:	f103 0204 	add.w	r2, r3, #4
 810a490:	d01f      	beq.n	810a4d2 <_scanf_float+0x3e6>
 810a492:	9903      	ldr	r1, [sp, #12]
 810a494:	600a      	str	r2, [r1, #0]
 810a496:	681b      	ldr	r3, [r3, #0]
 810a498:	e9c3 6700 	strd	r6, r7, [r3]
 810a49c:	68e3      	ldr	r3, [r4, #12]
 810a49e:	3301      	adds	r3, #1
 810a4a0:	60e3      	str	r3, [r4, #12]
 810a4a2:	e7d9      	b.n	810a458 <_scanf_float+0x36c>
 810a4a4:	9b04      	ldr	r3, [sp, #16]
 810a4a6:	2b00      	cmp	r3, #0
 810a4a8:	d0e4      	beq.n	810a474 <_scanf_float+0x388>
 810a4aa:	9905      	ldr	r1, [sp, #20]
 810a4ac:	230a      	movs	r3, #10
 810a4ae:	3101      	adds	r1, #1
 810a4b0:	4640      	mov	r0, r8
 810a4b2:	f002 fd6d 	bl	810cf90 <_strtol_r>
 810a4b6:	9b04      	ldr	r3, [sp, #16]
 810a4b8:	9e05      	ldr	r6, [sp, #20]
 810a4ba:	1ac2      	subs	r2, r0, r3
 810a4bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810a4c0:	429e      	cmp	r6, r3
 810a4c2:	bf28      	it	cs
 810a4c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810a4c8:	4910      	ldr	r1, [pc, #64]	@ (810a50c <_scanf_float+0x420>)
 810a4ca:	4630      	mov	r0, r6
 810a4cc:	f000 f954 	bl	810a778 <siprintf>
 810a4d0:	e7d0      	b.n	810a474 <_scanf_float+0x388>
 810a4d2:	f011 0f04 	tst.w	r1, #4
 810a4d6:	9903      	ldr	r1, [sp, #12]
 810a4d8:	600a      	str	r2, [r1, #0]
 810a4da:	d1dc      	bne.n	810a496 <_scanf_float+0x3aa>
 810a4dc:	681d      	ldr	r5, [r3, #0]
 810a4de:	4632      	mov	r2, r6
 810a4e0:	463b      	mov	r3, r7
 810a4e2:	4630      	mov	r0, r6
 810a4e4:	4639      	mov	r1, r7
 810a4e6:	f7f6 fba9 	bl	8100c3c <__aeabi_dcmpun>
 810a4ea:	b128      	cbz	r0, 810a4f8 <_scanf_float+0x40c>
 810a4ec:	4808      	ldr	r0, [pc, #32]	@ (810a510 <_scanf_float+0x424>)
 810a4ee:	f000 fac9 	bl	810aa84 <nanf>
 810a4f2:	ed85 0a00 	vstr	s0, [r5]
 810a4f6:	e7d1      	b.n	810a49c <_scanf_float+0x3b0>
 810a4f8:	4630      	mov	r0, r6
 810a4fa:	4639      	mov	r1, r7
 810a4fc:	f7f6 fbfc 	bl	8100cf8 <__aeabi_d2f>
 810a500:	6028      	str	r0, [r5, #0]
 810a502:	e7cb      	b.n	810a49c <_scanf_float+0x3b0>
 810a504:	f04f 0900 	mov.w	r9, #0
 810a508:	e629      	b.n	810a15e <_scanf_float+0x72>
 810a50a:	bf00      	nop
 810a50c:	0810e838 	.word	0x0810e838
 810a510:	0810ebcd 	.word	0x0810ebcd

0810a514 <std>:
 810a514:	2300      	movs	r3, #0
 810a516:	b510      	push	{r4, lr}
 810a518:	4604      	mov	r4, r0
 810a51a:	e9c0 3300 	strd	r3, r3, [r0]
 810a51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a522:	6083      	str	r3, [r0, #8]
 810a524:	8181      	strh	r1, [r0, #12]
 810a526:	6643      	str	r3, [r0, #100]	@ 0x64
 810a528:	81c2      	strh	r2, [r0, #14]
 810a52a:	6183      	str	r3, [r0, #24]
 810a52c:	4619      	mov	r1, r3
 810a52e:	2208      	movs	r2, #8
 810a530:	305c      	adds	r0, #92	@ 0x5c
 810a532:	f000 fa19 	bl	810a968 <memset>
 810a536:	4b0d      	ldr	r3, [pc, #52]	@ (810a56c <std+0x58>)
 810a538:	6263      	str	r3, [r4, #36]	@ 0x24
 810a53a:	4b0d      	ldr	r3, [pc, #52]	@ (810a570 <std+0x5c>)
 810a53c:	62a3      	str	r3, [r4, #40]	@ 0x28
 810a53e:	4b0d      	ldr	r3, [pc, #52]	@ (810a574 <std+0x60>)
 810a540:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810a542:	4b0d      	ldr	r3, [pc, #52]	@ (810a578 <std+0x64>)
 810a544:	6323      	str	r3, [r4, #48]	@ 0x30
 810a546:	4b0d      	ldr	r3, [pc, #52]	@ (810a57c <std+0x68>)
 810a548:	6224      	str	r4, [r4, #32]
 810a54a:	429c      	cmp	r4, r3
 810a54c:	d006      	beq.n	810a55c <std+0x48>
 810a54e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810a552:	4294      	cmp	r4, r2
 810a554:	d002      	beq.n	810a55c <std+0x48>
 810a556:	33d0      	adds	r3, #208	@ 0xd0
 810a558:	429c      	cmp	r4, r3
 810a55a:	d105      	bne.n	810a568 <std+0x54>
 810a55c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810a560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a564:	f000 ba7c 	b.w	810aa60 <__retarget_lock_init_recursive>
 810a568:	bd10      	pop	{r4, pc}
 810a56a:	bf00      	nop
 810a56c:	0810a7b9 	.word	0x0810a7b9
 810a570:	0810a7db 	.word	0x0810a7db
 810a574:	0810a813 	.word	0x0810a813
 810a578:	0810a837 	.word	0x0810a837
 810a57c:	10000478 	.word	0x10000478

0810a580 <stdio_exit_handler>:
 810a580:	4a02      	ldr	r2, [pc, #8]	@ (810a58c <stdio_exit_handler+0xc>)
 810a582:	4903      	ldr	r1, [pc, #12]	@ (810a590 <stdio_exit_handler+0x10>)
 810a584:	4803      	ldr	r0, [pc, #12]	@ (810a594 <stdio_exit_handler+0x14>)
 810a586:	f000 b869 	b.w	810a65c <_fwalk_sglue>
 810a58a:	bf00      	nop
 810a58c:	1000001c 	.word	0x1000001c
 810a590:	0810d5d1 	.word	0x0810d5d1
 810a594:	1000002c 	.word	0x1000002c

0810a598 <cleanup_stdio>:
 810a598:	6841      	ldr	r1, [r0, #4]
 810a59a:	4b0c      	ldr	r3, [pc, #48]	@ (810a5cc <cleanup_stdio+0x34>)
 810a59c:	4299      	cmp	r1, r3
 810a59e:	b510      	push	{r4, lr}
 810a5a0:	4604      	mov	r4, r0
 810a5a2:	d001      	beq.n	810a5a8 <cleanup_stdio+0x10>
 810a5a4:	f003 f814 	bl	810d5d0 <_fflush_r>
 810a5a8:	68a1      	ldr	r1, [r4, #8]
 810a5aa:	4b09      	ldr	r3, [pc, #36]	@ (810a5d0 <cleanup_stdio+0x38>)
 810a5ac:	4299      	cmp	r1, r3
 810a5ae:	d002      	beq.n	810a5b6 <cleanup_stdio+0x1e>
 810a5b0:	4620      	mov	r0, r4
 810a5b2:	f003 f80d 	bl	810d5d0 <_fflush_r>
 810a5b6:	68e1      	ldr	r1, [r4, #12]
 810a5b8:	4b06      	ldr	r3, [pc, #24]	@ (810a5d4 <cleanup_stdio+0x3c>)
 810a5ba:	4299      	cmp	r1, r3
 810a5bc:	d004      	beq.n	810a5c8 <cleanup_stdio+0x30>
 810a5be:	4620      	mov	r0, r4
 810a5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a5c4:	f003 b804 	b.w	810d5d0 <_fflush_r>
 810a5c8:	bd10      	pop	{r4, pc}
 810a5ca:	bf00      	nop
 810a5cc:	10000478 	.word	0x10000478
 810a5d0:	100004e0 	.word	0x100004e0
 810a5d4:	10000548 	.word	0x10000548

0810a5d8 <global_stdio_init.part.0>:
 810a5d8:	b510      	push	{r4, lr}
 810a5da:	4b0b      	ldr	r3, [pc, #44]	@ (810a608 <global_stdio_init.part.0+0x30>)
 810a5dc:	4c0b      	ldr	r4, [pc, #44]	@ (810a60c <global_stdio_init.part.0+0x34>)
 810a5de:	4a0c      	ldr	r2, [pc, #48]	@ (810a610 <global_stdio_init.part.0+0x38>)
 810a5e0:	601a      	str	r2, [r3, #0]
 810a5e2:	4620      	mov	r0, r4
 810a5e4:	2200      	movs	r2, #0
 810a5e6:	2104      	movs	r1, #4
 810a5e8:	f7ff ff94 	bl	810a514 <std>
 810a5ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810a5f0:	2201      	movs	r2, #1
 810a5f2:	2109      	movs	r1, #9
 810a5f4:	f7ff ff8e 	bl	810a514 <std>
 810a5f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810a5fc:	2202      	movs	r2, #2
 810a5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a602:	2112      	movs	r1, #18
 810a604:	f7ff bf86 	b.w	810a514 <std>
 810a608:	100005b0 	.word	0x100005b0
 810a60c:	10000478 	.word	0x10000478
 810a610:	0810a581 	.word	0x0810a581

0810a614 <__sfp_lock_acquire>:
 810a614:	4801      	ldr	r0, [pc, #4]	@ (810a61c <__sfp_lock_acquire+0x8>)
 810a616:	f000 ba24 	b.w	810aa62 <__retarget_lock_acquire_recursive>
 810a61a:	bf00      	nop
 810a61c:	100005b9 	.word	0x100005b9

0810a620 <__sfp_lock_release>:
 810a620:	4801      	ldr	r0, [pc, #4]	@ (810a628 <__sfp_lock_release+0x8>)
 810a622:	f000 ba1f 	b.w	810aa64 <__retarget_lock_release_recursive>
 810a626:	bf00      	nop
 810a628:	100005b9 	.word	0x100005b9

0810a62c <__sinit>:
 810a62c:	b510      	push	{r4, lr}
 810a62e:	4604      	mov	r4, r0
 810a630:	f7ff fff0 	bl	810a614 <__sfp_lock_acquire>
 810a634:	6a23      	ldr	r3, [r4, #32]
 810a636:	b11b      	cbz	r3, 810a640 <__sinit+0x14>
 810a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a63c:	f7ff bff0 	b.w	810a620 <__sfp_lock_release>
 810a640:	4b04      	ldr	r3, [pc, #16]	@ (810a654 <__sinit+0x28>)
 810a642:	6223      	str	r3, [r4, #32]
 810a644:	4b04      	ldr	r3, [pc, #16]	@ (810a658 <__sinit+0x2c>)
 810a646:	681b      	ldr	r3, [r3, #0]
 810a648:	2b00      	cmp	r3, #0
 810a64a:	d1f5      	bne.n	810a638 <__sinit+0xc>
 810a64c:	f7ff ffc4 	bl	810a5d8 <global_stdio_init.part.0>
 810a650:	e7f2      	b.n	810a638 <__sinit+0xc>
 810a652:	bf00      	nop
 810a654:	0810a599 	.word	0x0810a599
 810a658:	100005b0 	.word	0x100005b0

0810a65c <_fwalk_sglue>:
 810a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a660:	4607      	mov	r7, r0
 810a662:	4688      	mov	r8, r1
 810a664:	4614      	mov	r4, r2
 810a666:	2600      	movs	r6, #0
 810a668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a66c:	f1b9 0901 	subs.w	r9, r9, #1
 810a670:	d505      	bpl.n	810a67e <_fwalk_sglue+0x22>
 810a672:	6824      	ldr	r4, [r4, #0]
 810a674:	2c00      	cmp	r4, #0
 810a676:	d1f7      	bne.n	810a668 <_fwalk_sglue+0xc>
 810a678:	4630      	mov	r0, r6
 810a67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a67e:	89ab      	ldrh	r3, [r5, #12]
 810a680:	2b01      	cmp	r3, #1
 810a682:	d907      	bls.n	810a694 <_fwalk_sglue+0x38>
 810a684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a688:	3301      	adds	r3, #1
 810a68a:	d003      	beq.n	810a694 <_fwalk_sglue+0x38>
 810a68c:	4629      	mov	r1, r5
 810a68e:	4638      	mov	r0, r7
 810a690:	47c0      	blx	r8
 810a692:	4306      	orrs	r6, r0
 810a694:	3568      	adds	r5, #104	@ 0x68
 810a696:	e7e9      	b.n	810a66c <_fwalk_sglue+0x10>

0810a698 <iprintf>:
 810a698:	b40f      	push	{r0, r1, r2, r3}
 810a69a:	b507      	push	{r0, r1, r2, lr}
 810a69c:	4906      	ldr	r1, [pc, #24]	@ (810a6b8 <iprintf+0x20>)
 810a69e:	ab04      	add	r3, sp, #16
 810a6a0:	6808      	ldr	r0, [r1, #0]
 810a6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 810a6a6:	6881      	ldr	r1, [r0, #8]
 810a6a8:	9301      	str	r3, [sp, #4]
 810a6aa:	f002 fdf5 	bl	810d298 <_vfiprintf_r>
 810a6ae:	b003      	add	sp, #12
 810a6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 810a6b4:	b004      	add	sp, #16
 810a6b6:	4770      	bx	lr
 810a6b8:	10000028 	.word	0x10000028

0810a6bc <_puts_r>:
 810a6bc:	6a03      	ldr	r3, [r0, #32]
 810a6be:	b570      	push	{r4, r5, r6, lr}
 810a6c0:	6884      	ldr	r4, [r0, #8]
 810a6c2:	4605      	mov	r5, r0
 810a6c4:	460e      	mov	r6, r1
 810a6c6:	b90b      	cbnz	r3, 810a6cc <_puts_r+0x10>
 810a6c8:	f7ff ffb0 	bl	810a62c <__sinit>
 810a6cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a6ce:	07db      	lsls	r3, r3, #31
 810a6d0:	d405      	bmi.n	810a6de <_puts_r+0x22>
 810a6d2:	89a3      	ldrh	r3, [r4, #12]
 810a6d4:	0598      	lsls	r0, r3, #22
 810a6d6:	d402      	bmi.n	810a6de <_puts_r+0x22>
 810a6d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a6da:	f000 f9c2 	bl	810aa62 <__retarget_lock_acquire_recursive>
 810a6de:	89a3      	ldrh	r3, [r4, #12]
 810a6e0:	0719      	lsls	r1, r3, #28
 810a6e2:	d502      	bpl.n	810a6ea <_puts_r+0x2e>
 810a6e4:	6923      	ldr	r3, [r4, #16]
 810a6e6:	2b00      	cmp	r3, #0
 810a6e8:	d135      	bne.n	810a756 <_puts_r+0x9a>
 810a6ea:	4621      	mov	r1, r4
 810a6ec:	4628      	mov	r0, r5
 810a6ee:	f000 f8e5 	bl	810a8bc <__swsetup_r>
 810a6f2:	b380      	cbz	r0, 810a756 <_puts_r+0x9a>
 810a6f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 810a6f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a6fa:	07da      	lsls	r2, r3, #31
 810a6fc:	d405      	bmi.n	810a70a <_puts_r+0x4e>
 810a6fe:	89a3      	ldrh	r3, [r4, #12]
 810a700:	059b      	lsls	r3, r3, #22
 810a702:	d402      	bmi.n	810a70a <_puts_r+0x4e>
 810a704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a706:	f000 f9ad 	bl	810aa64 <__retarget_lock_release_recursive>
 810a70a:	4628      	mov	r0, r5
 810a70c:	bd70      	pop	{r4, r5, r6, pc}
 810a70e:	2b00      	cmp	r3, #0
 810a710:	da04      	bge.n	810a71c <_puts_r+0x60>
 810a712:	69a2      	ldr	r2, [r4, #24]
 810a714:	429a      	cmp	r2, r3
 810a716:	dc17      	bgt.n	810a748 <_puts_r+0x8c>
 810a718:	290a      	cmp	r1, #10
 810a71a:	d015      	beq.n	810a748 <_puts_r+0x8c>
 810a71c:	6823      	ldr	r3, [r4, #0]
 810a71e:	1c5a      	adds	r2, r3, #1
 810a720:	6022      	str	r2, [r4, #0]
 810a722:	7019      	strb	r1, [r3, #0]
 810a724:	68a3      	ldr	r3, [r4, #8]
 810a726:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a72a:	3b01      	subs	r3, #1
 810a72c:	60a3      	str	r3, [r4, #8]
 810a72e:	2900      	cmp	r1, #0
 810a730:	d1ed      	bne.n	810a70e <_puts_r+0x52>
 810a732:	2b00      	cmp	r3, #0
 810a734:	da11      	bge.n	810a75a <_puts_r+0x9e>
 810a736:	4622      	mov	r2, r4
 810a738:	210a      	movs	r1, #10
 810a73a:	4628      	mov	r0, r5
 810a73c:	f000 f87f 	bl	810a83e <__swbuf_r>
 810a740:	3001      	adds	r0, #1
 810a742:	d0d7      	beq.n	810a6f4 <_puts_r+0x38>
 810a744:	250a      	movs	r5, #10
 810a746:	e7d7      	b.n	810a6f8 <_puts_r+0x3c>
 810a748:	4622      	mov	r2, r4
 810a74a:	4628      	mov	r0, r5
 810a74c:	f000 f877 	bl	810a83e <__swbuf_r>
 810a750:	3001      	adds	r0, #1
 810a752:	d1e7      	bne.n	810a724 <_puts_r+0x68>
 810a754:	e7ce      	b.n	810a6f4 <_puts_r+0x38>
 810a756:	3e01      	subs	r6, #1
 810a758:	e7e4      	b.n	810a724 <_puts_r+0x68>
 810a75a:	6823      	ldr	r3, [r4, #0]
 810a75c:	1c5a      	adds	r2, r3, #1
 810a75e:	6022      	str	r2, [r4, #0]
 810a760:	220a      	movs	r2, #10
 810a762:	701a      	strb	r2, [r3, #0]
 810a764:	e7ee      	b.n	810a744 <_puts_r+0x88>
	...

0810a768 <puts>:
 810a768:	4b02      	ldr	r3, [pc, #8]	@ (810a774 <puts+0xc>)
 810a76a:	4601      	mov	r1, r0
 810a76c:	6818      	ldr	r0, [r3, #0]
 810a76e:	f7ff bfa5 	b.w	810a6bc <_puts_r>
 810a772:	bf00      	nop
 810a774:	10000028 	.word	0x10000028

0810a778 <siprintf>:
 810a778:	b40e      	push	{r1, r2, r3}
 810a77a:	b500      	push	{lr}
 810a77c:	b09c      	sub	sp, #112	@ 0x70
 810a77e:	ab1d      	add	r3, sp, #116	@ 0x74
 810a780:	9002      	str	r0, [sp, #8]
 810a782:	9006      	str	r0, [sp, #24]
 810a784:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810a788:	4809      	ldr	r0, [pc, #36]	@ (810a7b0 <siprintf+0x38>)
 810a78a:	9107      	str	r1, [sp, #28]
 810a78c:	9104      	str	r1, [sp, #16]
 810a78e:	4909      	ldr	r1, [pc, #36]	@ (810a7b4 <siprintf+0x3c>)
 810a790:	f853 2b04 	ldr.w	r2, [r3], #4
 810a794:	9105      	str	r1, [sp, #20]
 810a796:	6800      	ldr	r0, [r0, #0]
 810a798:	9301      	str	r3, [sp, #4]
 810a79a:	a902      	add	r1, sp, #8
 810a79c:	f002 fc56 	bl	810d04c <_svfiprintf_r>
 810a7a0:	9b02      	ldr	r3, [sp, #8]
 810a7a2:	2200      	movs	r2, #0
 810a7a4:	701a      	strb	r2, [r3, #0]
 810a7a6:	b01c      	add	sp, #112	@ 0x70
 810a7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 810a7ac:	b003      	add	sp, #12
 810a7ae:	4770      	bx	lr
 810a7b0:	10000028 	.word	0x10000028
 810a7b4:	ffff0208 	.word	0xffff0208

0810a7b8 <__sread>:
 810a7b8:	b510      	push	{r4, lr}
 810a7ba:	460c      	mov	r4, r1
 810a7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a7c0:	f000 f900 	bl	810a9c4 <_read_r>
 810a7c4:	2800      	cmp	r0, #0
 810a7c6:	bfab      	itete	ge
 810a7c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810a7ca:	89a3      	ldrhlt	r3, [r4, #12]
 810a7cc:	181b      	addge	r3, r3, r0
 810a7ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810a7d2:	bfac      	ite	ge
 810a7d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 810a7d6:	81a3      	strhlt	r3, [r4, #12]
 810a7d8:	bd10      	pop	{r4, pc}

0810a7da <__swrite>:
 810a7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a7de:	461f      	mov	r7, r3
 810a7e0:	898b      	ldrh	r3, [r1, #12]
 810a7e2:	05db      	lsls	r3, r3, #23
 810a7e4:	4605      	mov	r5, r0
 810a7e6:	460c      	mov	r4, r1
 810a7e8:	4616      	mov	r6, r2
 810a7ea:	d505      	bpl.n	810a7f8 <__swrite+0x1e>
 810a7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a7f0:	2302      	movs	r3, #2
 810a7f2:	2200      	movs	r2, #0
 810a7f4:	f000 f8d4 	bl	810a9a0 <_lseek_r>
 810a7f8:	89a3      	ldrh	r3, [r4, #12]
 810a7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a7fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a802:	81a3      	strh	r3, [r4, #12]
 810a804:	4632      	mov	r2, r6
 810a806:	463b      	mov	r3, r7
 810a808:	4628      	mov	r0, r5
 810a80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a80e:	f000 b8eb 	b.w	810a9e8 <_write_r>

0810a812 <__sseek>:
 810a812:	b510      	push	{r4, lr}
 810a814:	460c      	mov	r4, r1
 810a816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a81a:	f000 f8c1 	bl	810a9a0 <_lseek_r>
 810a81e:	1c43      	adds	r3, r0, #1
 810a820:	89a3      	ldrh	r3, [r4, #12]
 810a822:	bf15      	itete	ne
 810a824:	6560      	strne	r0, [r4, #84]	@ 0x54
 810a826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810a82a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810a82e:	81a3      	strheq	r3, [r4, #12]
 810a830:	bf18      	it	ne
 810a832:	81a3      	strhne	r3, [r4, #12]
 810a834:	bd10      	pop	{r4, pc}

0810a836 <__sclose>:
 810a836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a83a:	f000 b8a1 	b.w	810a980 <_close_r>

0810a83e <__swbuf_r>:
 810a83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a840:	460e      	mov	r6, r1
 810a842:	4614      	mov	r4, r2
 810a844:	4605      	mov	r5, r0
 810a846:	b118      	cbz	r0, 810a850 <__swbuf_r+0x12>
 810a848:	6a03      	ldr	r3, [r0, #32]
 810a84a:	b90b      	cbnz	r3, 810a850 <__swbuf_r+0x12>
 810a84c:	f7ff feee 	bl	810a62c <__sinit>
 810a850:	69a3      	ldr	r3, [r4, #24]
 810a852:	60a3      	str	r3, [r4, #8]
 810a854:	89a3      	ldrh	r3, [r4, #12]
 810a856:	071a      	lsls	r2, r3, #28
 810a858:	d501      	bpl.n	810a85e <__swbuf_r+0x20>
 810a85a:	6923      	ldr	r3, [r4, #16]
 810a85c:	b943      	cbnz	r3, 810a870 <__swbuf_r+0x32>
 810a85e:	4621      	mov	r1, r4
 810a860:	4628      	mov	r0, r5
 810a862:	f000 f82b 	bl	810a8bc <__swsetup_r>
 810a866:	b118      	cbz	r0, 810a870 <__swbuf_r+0x32>
 810a868:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 810a86c:	4638      	mov	r0, r7
 810a86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a870:	6823      	ldr	r3, [r4, #0]
 810a872:	6922      	ldr	r2, [r4, #16]
 810a874:	1a98      	subs	r0, r3, r2
 810a876:	6963      	ldr	r3, [r4, #20]
 810a878:	b2f6      	uxtb	r6, r6
 810a87a:	4283      	cmp	r3, r0
 810a87c:	4637      	mov	r7, r6
 810a87e:	dc05      	bgt.n	810a88c <__swbuf_r+0x4e>
 810a880:	4621      	mov	r1, r4
 810a882:	4628      	mov	r0, r5
 810a884:	f002 fea4 	bl	810d5d0 <_fflush_r>
 810a888:	2800      	cmp	r0, #0
 810a88a:	d1ed      	bne.n	810a868 <__swbuf_r+0x2a>
 810a88c:	68a3      	ldr	r3, [r4, #8]
 810a88e:	3b01      	subs	r3, #1
 810a890:	60a3      	str	r3, [r4, #8]
 810a892:	6823      	ldr	r3, [r4, #0]
 810a894:	1c5a      	adds	r2, r3, #1
 810a896:	6022      	str	r2, [r4, #0]
 810a898:	701e      	strb	r6, [r3, #0]
 810a89a:	6962      	ldr	r2, [r4, #20]
 810a89c:	1c43      	adds	r3, r0, #1
 810a89e:	429a      	cmp	r2, r3
 810a8a0:	d004      	beq.n	810a8ac <__swbuf_r+0x6e>
 810a8a2:	89a3      	ldrh	r3, [r4, #12]
 810a8a4:	07db      	lsls	r3, r3, #31
 810a8a6:	d5e1      	bpl.n	810a86c <__swbuf_r+0x2e>
 810a8a8:	2e0a      	cmp	r6, #10
 810a8aa:	d1df      	bne.n	810a86c <__swbuf_r+0x2e>
 810a8ac:	4621      	mov	r1, r4
 810a8ae:	4628      	mov	r0, r5
 810a8b0:	f002 fe8e 	bl	810d5d0 <_fflush_r>
 810a8b4:	2800      	cmp	r0, #0
 810a8b6:	d0d9      	beq.n	810a86c <__swbuf_r+0x2e>
 810a8b8:	e7d6      	b.n	810a868 <__swbuf_r+0x2a>
	...

0810a8bc <__swsetup_r>:
 810a8bc:	b538      	push	{r3, r4, r5, lr}
 810a8be:	4b29      	ldr	r3, [pc, #164]	@ (810a964 <__swsetup_r+0xa8>)
 810a8c0:	4605      	mov	r5, r0
 810a8c2:	6818      	ldr	r0, [r3, #0]
 810a8c4:	460c      	mov	r4, r1
 810a8c6:	b118      	cbz	r0, 810a8d0 <__swsetup_r+0x14>
 810a8c8:	6a03      	ldr	r3, [r0, #32]
 810a8ca:	b90b      	cbnz	r3, 810a8d0 <__swsetup_r+0x14>
 810a8cc:	f7ff feae 	bl	810a62c <__sinit>
 810a8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a8d4:	0719      	lsls	r1, r3, #28
 810a8d6:	d422      	bmi.n	810a91e <__swsetup_r+0x62>
 810a8d8:	06da      	lsls	r2, r3, #27
 810a8da:	d407      	bmi.n	810a8ec <__swsetup_r+0x30>
 810a8dc:	2209      	movs	r2, #9
 810a8de:	602a      	str	r2, [r5, #0]
 810a8e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a8e4:	81a3      	strh	r3, [r4, #12]
 810a8e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810a8ea:	e033      	b.n	810a954 <__swsetup_r+0x98>
 810a8ec:	0758      	lsls	r0, r3, #29
 810a8ee:	d512      	bpl.n	810a916 <__swsetup_r+0x5a>
 810a8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810a8f2:	b141      	cbz	r1, 810a906 <__swsetup_r+0x4a>
 810a8f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810a8f8:	4299      	cmp	r1, r3
 810a8fa:	d002      	beq.n	810a902 <__swsetup_r+0x46>
 810a8fc:	4628      	mov	r0, r5
 810a8fe:	f000 ff13 	bl	810b728 <_free_r>
 810a902:	2300      	movs	r3, #0
 810a904:	6363      	str	r3, [r4, #52]	@ 0x34
 810a906:	89a3      	ldrh	r3, [r4, #12]
 810a908:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810a90c:	81a3      	strh	r3, [r4, #12]
 810a90e:	2300      	movs	r3, #0
 810a910:	6063      	str	r3, [r4, #4]
 810a912:	6923      	ldr	r3, [r4, #16]
 810a914:	6023      	str	r3, [r4, #0]
 810a916:	89a3      	ldrh	r3, [r4, #12]
 810a918:	f043 0308 	orr.w	r3, r3, #8
 810a91c:	81a3      	strh	r3, [r4, #12]
 810a91e:	6923      	ldr	r3, [r4, #16]
 810a920:	b94b      	cbnz	r3, 810a936 <__swsetup_r+0x7a>
 810a922:	89a3      	ldrh	r3, [r4, #12]
 810a924:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810a928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a92c:	d003      	beq.n	810a936 <__swsetup_r+0x7a>
 810a92e:	4621      	mov	r1, r4
 810a930:	4628      	mov	r0, r5
 810a932:	f002 fe9b 	bl	810d66c <__smakebuf_r>
 810a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a93a:	f013 0201 	ands.w	r2, r3, #1
 810a93e:	d00a      	beq.n	810a956 <__swsetup_r+0x9a>
 810a940:	2200      	movs	r2, #0
 810a942:	60a2      	str	r2, [r4, #8]
 810a944:	6962      	ldr	r2, [r4, #20]
 810a946:	4252      	negs	r2, r2
 810a948:	61a2      	str	r2, [r4, #24]
 810a94a:	6922      	ldr	r2, [r4, #16]
 810a94c:	b942      	cbnz	r2, 810a960 <__swsetup_r+0xa4>
 810a94e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810a952:	d1c5      	bne.n	810a8e0 <__swsetup_r+0x24>
 810a954:	bd38      	pop	{r3, r4, r5, pc}
 810a956:	0799      	lsls	r1, r3, #30
 810a958:	bf58      	it	pl
 810a95a:	6962      	ldrpl	r2, [r4, #20]
 810a95c:	60a2      	str	r2, [r4, #8]
 810a95e:	e7f4      	b.n	810a94a <__swsetup_r+0x8e>
 810a960:	2000      	movs	r0, #0
 810a962:	e7f7      	b.n	810a954 <__swsetup_r+0x98>
 810a964:	10000028 	.word	0x10000028

0810a968 <memset>:
 810a968:	4402      	add	r2, r0
 810a96a:	4603      	mov	r3, r0
 810a96c:	4293      	cmp	r3, r2
 810a96e:	d100      	bne.n	810a972 <memset+0xa>
 810a970:	4770      	bx	lr
 810a972:	f803 1b01 	strb.w	r1, [r3], #1
 810a976:	e7f9      	b.n	810a96c <memset+0x4>

0810a978 <_localeconv_r>:
 810a978:	4800      	ldr	r0, [pc, #0]	@ (810a97c <_localeconv_r+0x4>)
 810a97a:	4770      	bx	lr
 810a97c:	10000168 	.word	0x10000168

0810a980 <_close_r>:
 810a980:	b538      	push	{r3, r4, r5, lr}
 810a982:	4d06      	ldr	r5, [pc, #24]	@ (810a99c <_close_r+0x1c>)
 810a984:	2300      	movs	r3, #0
 810a986:	4604      	mov	r4, r0
 810a988:	4608      	mov	r0, r1
 810a98a:	602b      	str	r3, [r5, #0]
 810a98c:	f7f8 fac6 	bl	8102f1c <_close>
 810a990:	1c43      	adds	r3, r0, #1
 810a992:	d102      	bne.n	810a99a <_close_r+0x1a>
 810a994:	682b      	ldr	r3, [r5, #0]
 810a996:	b103      	cbz	r3, 810a99a <_close_r+0x1a>
 810a998:	6023      	str	r3, [r4, #0]
 810a99a:	bd38      	pop	{r3, r4, r5, pc}
 810a99c:	100005b4 	.word	0x100005b4

0810a9a0 <_lseek_r>:
 810a9a0:	b538      	push	{r3, r4, r5, lr}
 810a9a2:	4d07      	ldr	r5, [pc, #28]	@ (810a9c0 <_lseek_r+0x20>)
 810a9a4:	4604      	mov	r4, r0
 810a9a6:	4608      	mov	r0, r1
 810a9a8:	4611      	mov	r1, r2
 810a9aa:	2200      	movs	r2, #0
 810a9ac:	602a      	str	r2, [r5, #0]
 810a9ae:	461a      	mov	r2, r3
 810a9b0:	f7f8 fadb 	bl	8102f6a <_lseek>
 810a9b4:	1c43      	adds	r3, r0, #1
 810a9b6:	d102      	bne.n	810a9be <_lseek_r+0x1e>
 810a9b8:	682b      	ldr	r3, [r5, #0]
 810a9ba:	b103      	cbz	r3, 810a9be <_lseek_r+0x1e>
 810a9bc:	6023      	str	r3, [r4, #0]
 810a9be:	bd38      	pop	{r3, r4, r5, pc}
 810a9c0:	100005b4 	.word	0x100005b4

0810a9c4 <_read_r>:
 810a9c4:	b538      	push	{r3, r4, r5, lr}
 810a9c6:	4d07      	ldr	r5, [pc, #28]	@ (810a9e4 <_read_r+0x20>)
 810a9c8:	4604      	mov	r4, r0
 810a9ca:	4608      	mov	r0, r1
 810a9cc:	4611      	mov	r1, r2
 810a9ce:	2200      	movs	r2, #0
 810a9d0:	602a      	str	r2, [r5, #0]
 810a9d2:	461a      	mov	r2, r3
 810a9d4:	f7f8 fa69 	bl	8102eaa <_read>
 810a9d8:	1c43      	adds	r3, r0, #1
 810a9da:	d102      	bne.n	810a9e2 <_read_r+0x1e>
 810a9dc:	682b      	ldr	r3, [r5, #0]
 810a9de:	b103      	cbz	r3, 810a9e2 <_read_r+0x1e>
 810a9e0:	6023      	str	r3, [r4, #0]
 810a9e2:	bd38      	pop	{r3, r4, r5, pc}
 810a9e4:	100005b4 	.word	0x100005b4

0810a9e8 <_write_r>:
 810a9e8:	b538      	push	{r3, r4, r5, lr}
 810a9ea:	4d07      	ldr	r5, [pc, #28]	@ (810aa08 <_write_r+0x20>)
 810a9ec:	4604      	mov	r4, r0
 810a9ee:	4608      	mov	r0, r1
 810a9f0:	4611      	mov	r1, r2
 810a9f2:	2200      	movs	r2, #0
 810a9f4:	602a      	str	r2, [r5, #0]
 810a9f6:	461a      	mov	r2, r3
 810a9f8:	f7f8 fa74 	bl	8102ee4 <_write>
 810a9fc:	1c43      	adds	r3, r0, #1
 810a9fe:	d102      	bne.n	810aa06 <_write_r+0x1e>
 810aa00:	682b      	ldr	r3, [r5, #0]
 810aa02:	b103      	cbz	r3, 810aa06 <_write_r+0x1e>
 810aa04:	6023      	str	r3, [r4, #0]
 810aa06:	bd38      	pop	{r3, r4, r5, pc}
 810aa08:	100005b4 	.word	0x100005b4

0810aa0c <__errno>:
 810aa0c:	4b01      	ldr	r3, [pc, #4]	@ (810aa14 <__errno+0x8>)
 810aa0e:	6818      	ldr	r0, [r3, #0]
 810aa10:	4770      	bx	lr
 810aa12:	bf00      	nop
 810aa14:	10000028 	.word	0x10000028

0810aa18 <__libc_init_array>:
 810aa18:	b570      	push	{r4, r5, r6, lr}
 810aa1a:	4d0d      	ldr	r5, [pc, #52]	@ (810aa50 <__libc_init_array+0x38>)
 810aa1c:	4c0d      	ldr	r4, [pc, #52]	@ (810aa54 <__libc_init_array+0x3c>)
 810aa1e:	1b64      	subs	r4, r4, r5
 810aa20:	10a4      	asrs	r4, r4, #2
 810aa22:	2600      	movs	r6, #0
 810aa24:	42a6      	cmp	r6, r4
 810aa26:	d109      	bne.n	810aa3c <__libc_init_array+0x24>
 810aa28:	4d0b      	ldr	r5, [pc, #44]	@ (810aa58 <__libc_init_array+0x40>)
 810aa2a:	4c0c      	ldr	r4, [pc, #48]	@ (810aa5c <__libc_init_array+0x44>)
 810aa2c:	f003 fbe4 	bl	810e1f8 <_init>
 810aa30:	1b64      	subs	r4, r4, r5
 810aa32:	10a4      	asrs	r4, r4, #2
 810aa34:	2600      	movs	r6, #0
 810aa36:	42a6      	cmp	r6, r4
 810aa38:	d105      	bne.n	810aa46 <__libc_init_array+0x2e>
 810aa3a:	bd70      	pop	{r4, r5, r6, pc}
 810aa3c:	f855 3b04 	ldr.w	r3, [r5], #4
 810aa40:	4798      	blx	r3
 810aa42:	3601      	adds	r6, #1
 810aa44:	e7ee      	b.n	810aa24 <__libc_init_array+0xc>
 810aa46:	f855 3b04 	ldr.w	r3, [r5], #4
 810aa4a:	4798      	blx	r3
 810aa4c:	3601      	adds	r6, #1
 810aa4e:	e7f2      	b.n	810aa36 <__libc_init_array+0x1e>
 810aa50:	0810ec38 	.word	0x0810ec38
 810aa54:	0810ec38 	.word	0x0810ec38
 810aa58:	0810ec38 	.word	0x0810ec38
 810aa5c:	0810ec3c 	.word	0x0810ec3c

0810aa60 <__retarget_lock_init_recursive>:
 810aa60:	4770      	bx	lr

0810aa62 <__retarget_lock_acquire_recursive>:
 810aa62:	4770      	bx	lr

0810aa64 <__retarget_lock_release_recursive>:
 810aa64:	4770      	bx	lr

0810aa66 <memcpy>:
 810aa66:	440a      	add	r2, r1
 810aa68:	4291      	cmp	r1, r2
 810aa6a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 810aa6e:	d100      	bne.n	810aa72 <memcpy+0xc>
 810aa70:	4770      	bx	lr
 810aa72:	b510      	push	{r4, lr}
 810aa74:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aa78:	f803 4f01 	strb.w	r4, [r3, #1]!
 810aa7c:	4291      	cmp	r1, r2
 810aa7e:	d1f9      	bne.n	810aa74 <memcpy+0xe>
 810aa80:	bd10      	pop	{r4, pc}
	...

0810aa84 <nanf>:
 810aa84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810aa8c <nanf+0x8>
 810aa88:	4770      	bx	lr
 810aa8a:	bf00      	nop
 810aa8c:	7fc00000 	.word	0x7fc00000

0810aa90 <quorem>:
 810aa90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aa94:	6903      	ldr	r3, [r0, #16]
 810aa96:	690c      	ldr	r4, [r1, #16]
 810aa98:	42a3      	cmp	r3, r4
 810aa9a:	4607      	mov	r7, r0
 810aa9c:	db7e      	blt.n	810ab9c <quorem+0x10c>
 810aa9e:	3c01      	subs	r4, #1
 810aaa0:	f101 0814 	add.w	r8, r1, #20
 810aaa4:	00a3      	lsls	r3, r4, #2
 810aaa6:	f100 0514 	add.w	r5, r0, #20
 810aaaa:	9300      	str	r3, [sp, #0]
 810aaac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810aab0:	9301      	str	r3, [sp, #4]
 810aab2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810aab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810aaba:	3301      	adds	r3, #1
 810aabc:	429a      	cmp	r2, r3
 810aabe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810aac2:	fbb2 f6f3 	udiv	r6, r2, r3
 810aac6:	d32e      	bcc.n	810ab26 <quorem+0x96>
 810aac8:	f04f 0a00 	mov.w	sl, #0
 810aacc:	46c4      	mov	ip, r8
 810aace:	46ae      	mov	lr, r5
 810aad0:	46d3      	mov	fp, sl
 810aad2:	f85c 3b04 	ldr.w	r3, [ip], #4
 810aad6:	b298      	uxth	r0, r3
 810aad8:	fb06 a000 	mla	r0, r6, r0, sl
 810aadc:	0c02      	lsrs	r2, r0, #16
 810aade:	0c1b      	lsrs	r3, r3, #16
 810aae0:	fb06 2303 	mla	r3, r6, r3, r2
 810aae4:	f8de 2000 	ldr.w	r2, [lr]
 810aae8:	b280      	uxth	r0, r0
 810aaea:	b292      	uxth	r2, r2
 810aaec:	1a12      	subs	r2, r2, r0
 810aaee:	445a      	add	r2, fp
 810aaf0:	f8de 0000 	ldr.w	r0, [lr]
 810aaf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810aaf8:	b29b      	uxth	r3, r3
 810aafa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810aafe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810ab02:	b292      	uxth	r2, r2
 810ab04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810ab08:	45e1      	cmp	r9, ip
 810ab0a:	f84e 2b04 	str.w	r2, [lr], #4
 810ab0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810ab12:	d2de      	bcs.n	810aad2 <quorem+0x42>
 810ab14:	9b00      	ldr	r3, [sp, #0]
 810ab16:	58eb      	ldr	r3, [r5, r3]
 810ab18:	b92b      	cbnz	r3, 810ab26 <quorem+0x96>
 810ab1a:	9b01      	ldr	r3, [sp, #4]
 810ab1c:	3b04      	subs	r3, #4
 810ab1e:	429d      	cmp	r5, r3
 810ab20:	461a      	mov	r2, r3
 810ab22:	d32f      	bcc.n	810ab84 <quorem+0xf4>
 810ab24:	613c      	str	r4, [r7, #16]
 810ab26:	4638      	mov	r0, r7
 810ab28:	f001 f9c2 	bl	810beb0 <__mcmp>
 810ab2c:	2800      	cmp	r0, #0
 810ab2e:	db25      	blt.n	810ab7c <quorem+0xec>
 810ab30:	4629      	mov	r1, r5
 810ab32:	2000      	movs	r0, #0
 810ab34:	f858 2b04 	ldr.w	r2, [r8], #4
 810ab38:	f8d1 c000 	ldr.w	ip, [r1]
 810ab3c:	fa1f fe82 	uxth.w	lr, r2
 810ab40:	fa1f f38c 	uxth.w	r3, ip
 810ab44:	eba3 030e 	sub.w	r3, r3, lr
 810ab48:	4403      	add	r3, r0
 810ab4a:	0c12      	lsrs	r2, r2, #16
 810ab4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810ab50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810ab54:	b29b      	uxth	r3, r3
 810ab56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ab5a:	45c1      	cmp	r9, r8
 810ab5c:	f841 3b04 	str.w	r3, [r1], #4
 810ab60:	ea4f 4022 	mov.w	r0, r2, asr #16
 810ab64:	d2e6      	bcs.n	810ab34 <quorem+0xa4>
 810ab66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ab6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ab6e:	b922      	cbnz	r2, 810ab7a <quorem+0xea>
 810ab70:	3b04      	subs	r3, #4
 810ab72:	429d      	cmp	r5, r3
 810ab74:	461a      	mov	r2, r3
 810ab76:	d30b      	bcc.n	810ab90 <quorem+0x100>
 810ab78:	613c      	str	r4, [r7, #16]
 810ab7a:	3601      	adds	r6, #1
 810ab7c:	4630      	mov	r0, r6
 810ab7e:	b003      	add	sp, #12
 810ab80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ab84:	6812      	ldr	r2, [r2, #0]
 810ab86:	3b04      	subs	r3, #4
 810ab88:	2a00      	cmp	r2, #0
 810ab8a:	d1cb      	bne.n	810ab24 <quorem+0x94>
 810ab8c:	3c01      	subs	r4, #1
 810ab8e:	e7c6      	b.n	810ab1e <quorem+0x8e>
 810ab90:	6812      	ldr	r2, [r2, #0]
 810ab92:	3b04      	subs	r3, #4
 810ab94:	2a00      	cmp	r2, #0
 810ab96:	d1ef      	bne.n	810ab78 <quorem+0xe8>
 810ab98:	3c01      	subs	r4, #1
 810ab9a:	e7ea      	b.n	810ab72 <quorem+0xe2>
 810ab9c:	2000      	movs	r0, #0
 810ab9e:	e7ee      	b.n	810ab7e <quorem+0xee>

0810aba0 <_dtoa_r>:
 810aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aba4:	69c7      	ldr	r7, [r0, #28]
 810aba6:	b099      	sub	sp, #100	@ 0x64
 810aba8:	ed8d 0b02 	vstr	d0, [sp, #8]
 810abac:	ec55 4b10 	vmov	r4, r5, d0
 810abb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810abb2:	9109      	str	r1, [sp, #36]	@ 0x24
 810abb4:	4683      	mov	fp, r0
 810abb6:	920e      	str	r2, [sp, #56]	@ 0x38
 810abb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 810abba:	b97f      	cbnz	r7, 810abdc <_dtoa_r+0x3c>
 810abbc:	2010      	movs	r0, #16
 810abbe:	f000 fdfd 	bl	810b7bc <malloc>
 810abc2:	4602      	mov	r2, r0
 810abc4:	f8cb 001c 	str.w	r0, [fp, #28]
 810abc8:	b920      	cbnz	r0, 810abd4 <_dtoa_r+0x34>
 810abca:	4ba7      	ldr	r3, [pc, #668]	@ (810ae68 <_dtoa_r+0x2c8>)
 810abcc:	21ef      	movs	r1, #239	@ 0xef
 810abce:	48a7      	ldr	r0, [pc, #668]	@ (810ae6c <_dtoa_r+0x2cc>)
 810abd0:	f002 fdee 	bl	810d7b0 <__assert_func>
 810abd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810abd8:	6007      	str	r7, [r0, #0]
 810abda:	60c7      	str	r7, [r0, #12]
 810abdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 810abe0:	6819      	ldr	r1, [r3, #0]
 810abe2:	b159      	cbz	r1, 810abfc <_dtoa_r+0x5c>
 810abe4:	685a      	ldr	r2, [r3, #4]
 810abe6:	604a      	str	r2, [r1, #4]
 810abe8:	2301      	movs	r3, #1
 810abea:	4093      	lsls	r3, r2
 810abec:	608b      	str	r3, [r1, #8]
 810abee:	4658      	mov	r0, fp
 810abf0:	f000 feda 	bl	810b9a8 <_Bfree>
 810abf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 810abf8:	2200      	movs	r2, #0
 810abfa:	601a      	str	r2, [r3, #0]
 810abfc:	1e2b      	subs	r3, r5, #0
 810abfe:	bfb9      	ittee	lt
 810ac00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810ac04:	9303      	strlt	r3, [sp, #12]
 810ac06:	2300      	movge	r3, #0
 810ac08:	6033      	strge	r3, [r6, #0]
 810ac0a:	9f03      	ldr	r7, [sp, #12]
 810ac0c:	4b98      	ldr	r3, [pc, #608]	@ (810ae70 <_dtoa_r+0x2d0>)
 810ac0e:	bfbc      	itt	lt
 810ac10:	2201      	movlt	r2, #1
 810ac12:	6032      	strlt	r2, [r6, #0]
 810ac14:	43bb      	bics	r3, r7
 810ac16:	d112      	bne.n	810ac3e <_dtoa_r+0x9e>
 810ac18:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810ac1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 810ac1e:	6013      	str	r3, [r2, #0]
 810ac20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ac24:	4323      	orrs	r3, r4
 810ac26:	f000 854d 	beq.w	810b6c4 <_dtoa_r+0xb24>
 810ac2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ac2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810ae84 <_dtoa_r+0x2e4>
 810ac30:	2b00      	cmp	r3, #0
 810ac32:	f000 854f 	beq.w	810b6d4 <_dtoa_r+0xb34>
 810ac36:	f10a 0303 	add.w	r3, sl, #3
 810ac3a:	f000 bd49 	b.w	810b6d0 <_dtoa_r+0xb30>
 810ac3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 810ac42:	2200      	movs	r2, #0
 810ac44:	ec51 0b17 	vmov	r0, r1, d7
 810ac48:	2300      	movs	r3, #0
 810ac4a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810ac4e:	f7f5 ffc3 	bl	8100bd8 <__aeabi_dcmpeq>
 810ac52:	4680      	mov	r8, r0
 810ac54:	b158      	cbz	r0, 810ac6e <_dtoa_r+0xce>
 810ac56:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810ac58:	2301      	movs	r3, #1
 810ac5a:	6013      	str	r3, [r2, #0]
 810ac5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ac5e:	b113      	cbz	r3, 810ac66 <_dtoa_r+0xc6>
 810ac60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810ac62:	4b84      	ldr	r3, [pc, #528]	@ (810ae74 <_dtoa_r+0x2d4>)
 810ac64:	6013      	str	r3, [r2, #0]
 810ac66:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810ae88 <_dtoa_r+0x2e8>
 810ac6a:	f000 bd33 	b.w	810b6d4 <_dtoa_r+0xb34>
 810ac6e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810ac72:	aa16      	add	r2, sp, #88	@ 0x58
 810ac74:	a917      	add	r1, sp, #92	@ 0x5c
 810ac76:	4658      	mov	r0, fp
 810ac78:	f001 fa3a 	bl	810c0f0 <__d2b>
 810ac7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810ac80:	4681      	mov	r9, r0
 810ac82:	2e00      	cmp	r6, #0
 810ac84:	d077      	beq.n	810ad76 <_dtoa_r+0x1d6>
 810ac86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810ac88:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810ac8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ac90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ac94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810ac98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810ac9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810aca0:	4619      	mov	r1, r3
 810aca2:	2200      	movs	r2, #0
 810aca4:	4b74      	ldr	r3, [pc, #464]	@ (810ae78 <_dtoa_r+0x2d8>)
 810aca6:	f7f5 fb77 	bl	8100398 <__aeabi_dsub>
 810acaa:	a369      	add	r3, pc, #420	@ (adr r3, 810ae50 <_dtoa_r+0x2b0>)
 810acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acb0:	f7f5 fd2a 	bl	8100708 <__aeabi_dmul>
 810acb4:	a368      	add	r3, pc, #416	@ (adr r3, 810ae58 <_dtoa_r+0x2b8>)
 810acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acba:	f7f5 fb6f 	bl	810039c <__adddf3>
 810acbe:	4604      	mov	r4, r0
 810acc0:	4630      	mov	r0, r6
 810acc2:	460d      	mov	r5, r1
 810acc4:	f7f5 fcb6 	bl	8100634 <__aeabi_i2d>
 810acc8:	a365      	add	r3, pc, #404	@ (adr r3, 810ae60 <_dtoa_r+0x2c0>)
 810acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acce:	f7f5 fd1b 	bl	8100708 <__aeabi_dmul>
 810acd2:	4602      	mov	r2, r0
 810acd4:	460b      	mov	r3, r1
 810acd6:	4620      	mov	r0, r4
 810acd8:	4629      	mov	r1, r5
 810acda:	f7f5 fb5f 	bl	810039c <__adddf3>
 810acde:	4604      	mov	r4, r0
 810ace0:	460d      	mov	r5, r1
 810ace2:	f7f5 ffc1 	bl	8100c68 <__aeabi_d2iz>
 810ace6:	2200      	movs	r2, #0
 810ace8:	4607      	mov	r7, r0
 810acea:	2300      	movs	r3, #0
 810acec:	4620      	mov	r0, r4
 810acee:	4629      	mov	r1, r5
 810acf0:	f7f5 ff7c 	bl	8100bec <__aeabi_dcmplt>
 810acf4:	b140      	cbz	r0, 810ad08 <_dtoa_r+0x168>
 810acf6:	4638      	mov	r0, r7
 810acf8:	f7f5 fc9c 	bl	8100634 <__aeabi_i2d>
 810acfc:	4622      	mov	r2, r4
 810acfe:	462b      	mov	r3, r5
 810ad00:	f7f5 ff6a 	bl	8100bd8 <__aeabi_dcmpeq>
 810ad04:	b900      	cbnz	r0, 810ad08 <_dtoa_r+0x168>
 810ad06:	3f01      	subs	r7, #1
 810ad08:	2f16      	cmp	r7, #22
 810ad0a:	d851      	bhi.n	810adb0 <_dtoa_r+0x210>
 810ad0c:	4b5b      	ldr	r3, [pc, #364]	@ (810ae7c <_dtoa_r+0x2dc>)
 810ad0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ad1a:	f7f5 ff67 	bl	8100bec <__aeabi_dcmplt>
 810ad1e:	2800      	cmp	r0, #0
 810ad20:	d048      	beq.n	810adb4 <_dtoa_r+0x214>
 810ad22:	3f01      	subs	r7, #1
 810ad24:	2300      	movs	r3, #0
 810ad26:	9312      	str	r3, [sp, #72]	@ 0x48
 810ad28:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810ad2a:	1b9b      	subs	r3, r3, r6
 810ad2c:	1e5a      	subs	r2, r3, #1
 810ad2e:	bf44      	itt	mi
 810ad30:	f1c3 0801 	rsbmi	r8, r3, #1
 810ad34:	2300      	movmi	r3, #0
 810ad36:	9208      	str	r2, [sp, #32]
 810ad38:	bf54      	ite	pl
 810ad3a:	f04f 0800 	movpl.w	r8, #0
 810ad3e:	9308      	strmi	r3, [sp, #32]
 810ad40:	2f00      	cmp	r7, #0
 810ad42:	db39      	blt.n	810adb8 <_dtoa_r+0x218>
 810ad44:	9b08      	ldr	r3, [sp, #32]
 810ad46:	970f      	str	r7, [sp, #60]	@ 0x3c
 810ad48:	443b      	add	r3, r7
 810ad4a:	9308      	str	r3, [sp, #32]
 810ad4c:	2300      	movs	r3, #0
 810ad4e:	930a      	str	r3, [sp, #40]	@ 0x28
 810ad50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ad52:	2b09      	cmp	r3, #9
 810ad54:	d864      	bhi.n	810ae20 <_dtoa_r+0x280>
 810ad56:	2b05      	cmp	r3, #5
 810ad58:	bfc4      	itt	gt
 810ad5a:	3b04      	subgt	r3, #4
 810ad5c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810ad5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ad60:	f1a3 0302 	sub.w	r3, r3, #2
 810ad64:	bfcc      	ite	gt
 810ad66:	2400      	movgt	r4, #0
 810ad68:	2401      	movle	r4, #1
 810ad6a:	2b03      	cmp	r3, #3
 810ad6c:	d863      	bhi.n	810ae36 <_dtoa_r+0x296>
 810ad6e:	e8df f003 	tbb	[pc, r3]
 810ad72:	372a      	.short	0x372a
 810ad74:	5535      	.short	0x5535
 810ad76:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810ad7a:	441e      	add	r6, r3
 810ad7c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810ad80:	2b20      	cmp	r3, #32
 810ad82:	bfc1      	itttt	gt
 810ad84:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810ad88:	409f      	lslgt	r7, r3
 810ad8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810ad8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 810ad92:	bfd6      	itet	le
 810ad94:	f1c3 0320 	rsble	r3, r3, #32
 810ad98:	ea47 0003 	orrgt.w	r0, r7, r3
 810ad9c:	fa04 f003 	lslle.w	r0, r4, r3
 810ada0:	f7f5 fc38 	bl	8100614 <__aeabi_ui2d>
 810ada4:	2201      	movs	r2, #1
 810ada6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810adaa:	3e01      	subs	r6, #1
 810adac:	9214      	str	r2, [sp, #80]	@ 0x50
 810adae:	e777      	b.n	810aca0 <_dtoa_r+0x100>
 810adb0:	2301      	movs	r3, #1
 810adb2:	e7b8      	b.n	810ad26 <_dtoa_r+0x186>
 810adb4:	9012      	str	r0, [sp, #72]	@ 0x48
 810adb6:	e7b7      	b.n	810ad28 <_dtoa_r+0x188>
 810adb8:	427b      	negs	r3, r7
 810adba:	930a      	str	r3, [sp, #40]	@ 0x28
 810adbc:	2300      	movs	r3, #0
 810adbe:	eba8 0807 	sub.w	r8, r8, r7
 810adc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 810adc4:	e7c4      	b.n	810ad50 <_dtoa_r+0x1b0>
 810adc6:	2300      	movs	r3, #0
 810adc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 810adca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810adcc:	2b00      	cmp	r3, #0
 810adce:	dc35      	bgt.n	810ae3c <_dtoa_r+0x29c>
 810add0:	2301      	movs	r3, #1
 810add2:	9300      	str	r3, [sp, #0]
 810add4:	9307      	str	r3, [sp, #28]
 810add6:	461a      	mov	r2, r3
 810add8:	920e      	str	r2, [sp, #56]	@ 0x38
 810adda:	e00b      	b.n	810adf4 <_dtoa_r+0x254>
 810addc:	2301      	movs	r3, #1
 810adde:	e7f3      	b.n	810adc8 <_dtoa_r+0x228>
 810ade0:	2300      	movs	r3, #0
 810ade2:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ade4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ade6:	18fb      	adds	r3, r7, r3
 810ade8:	9300      	str	r3, [sp, #0]
 810adea:	3301      	adds	r3, #1
 810adec:	2b01      	cmp	r3, #1
 810adee:	9307      	str	r3, [sp, #28]
 810adf0:	bfb8      	it	lt
 810adf2:	2301      	movlt	r3, #1
 810adf4:	f8db 001c 	ldr.w	r0, [fp, #28]
 810adf8:	2100      	movs	r1, #0
 810adfa:	2204      	movs	r2, #4
 810adfc:	f102 0514 	add.w	r5, r2, #20
 810ae00:	429d      	cmp	r5, r3
 810ae02:	d91f      	bls.n	810ae44 <_dtoa_r+0x2a4>
 810ae04:	6041      	str	r1, [r0, #4]
 810ae06:	4658      	mov	r0, fp
 810ae08:	f000 fd8e 	bl	810b928 <_Balloc>
 810ae0c:	4682      	mov	sl, r0
 810ae0e:	2800      	cmp	r0, #0
 810ae10:	d13c      	bne.n	810ae8c <_dtoa_r+0x2ec>
 810ae12:	4b1b      	ldr	r3, [pc, #108]	@ (810ae80 <_dtoa_r+0x2e0>)
 810ae14:	4602      	mov	r2, r0
 810ae16:	f240 11af 	movw	r1, #431	@ 0x1af
 810ae1a:	e6d8      	b.n	810abce <_dtoa_r+0x2e>
 810ae1c:	2301      	movs	r3, #1
 810ae1e:	e7e0      	b.n	810ade2 <_dtoa_r+0x242>
 810ae20:	2401      	movs	r4, #1
 810ae22:	2300      	movs	r3, #0
 810ae24:	9309      	str	r3, [sp, #36]	@ 0x24
 810ae26:	940b      	str	r4, [sp, #44]	@ 0x2c
 810ae28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810ae2c:	9300      	str	r3, [sp, #0]
 810ae2e:	9307      	str	r3, [sp, #28]
 810ae30:	2200      	movs	r2, #0
 810ae32:	2312      	movs	r3, #18
 810ae34:	e7d0      	b.n	810add8 <_dtoa_r+0x238>
 810ae36:	2301      	movs	r3, #1
 810ae38:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ae3a:	e7f5      	b.n	810ae28 <_dtoa_r+0x288>
 810ae3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ae3e:	9300      	str	r3, [sp, #0]
 810ae40:	9307      	str	r3, [sp, #28]
 810ae42:	e7d7      	b.n	810adf4 <_dtoa_r+0x254>
 810ae44:	3101      	adds	r1, #1
 810ae46:	0052      	lsls	r2, r2, #1
 810ae48:	e7d8      	b.n	810adfc <_dtoa_r+0x25c>
 810ae4a:	bf00      	nop
 810ae4c:	f3af 8000 	nop.w
 810ae50:	636f4361 	.word	0x636f4361
 810ae54:	3fd287a7 	.word	0x3fd287a7
 810ae58:	8b60c8b3 	.word	0x8b60c8b3
 810ae5c:	3fc68a28 	.word	0x3fc68a28
 810ae60:	509f79fb 	.word	0x509f79fb
 810ae64:	3fd34413 	.word	0x3fd34413
 810ae68:	0810e84a 	.word	0x0810e84a
 810ae6c:	0810e861 	.word	0x0810e861
 810ae70:	7ff00000 	.word	0x7ff00000
 810ae74:	0810e815 	.word	0x0810e815
 810ae78:	3ff80000 	.word	0x3ff80000
 810ae7c:	0810e958 	.word	0x0810e958
 810ae80:	0810e8b9 	.word	0x0810e8b9
 810ae84:	0810e846 	.word	0x0810e846
 810ae88:	0810e814 	.word	0x0810e814
 810ae8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ae90:	6018      	str	r0, [r3, #0]
 810ae92:	9b07      	ldr	r3, [sp, #28]
 810ae94:	2b0e      	cmp	r3, #14
 810ae96:	f200 80a4 	bhi.w	810afe2 <_dtoa_r+0x442>
 810ae9a:	2c00      	cmp	r4, #0
 810ae9c:	f000 80a1 	beq.w	810afe2 <_dtoa_r+0x442>
 810aea0:	2f00      	cmp	r7, #0
 810aea2:	dd33      	ble.n	810af0c <_dtoa_r+0x36c>
 810aea4:	4bad      	ldr	r3, [pc, #692]	@ (810b15c <_dtoa_r+0x5bc>)
 810aea6:	f007 020f 	and.w	r2, r7, #15
 810aeaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810aeae:	ed93 7b00 	vldr	d7, [r3]
 810aeb2:	05f8      	lsls	r0, r7, #23
 810aeb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 810aeb8:	ea4f 1427 	mov.w	r4, r7, asr #4
 810aebc:	d516      	bpl.n	810aeec <_dtoa_r+0x34c>
 810aebe:	4ba8      	ldr	r3, [pc, #672]	@ (810b160 <_dtoa_r+0x5c0>)
 810aec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810aec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810aec8:	f7f5 fd48 	bl	810095c <__aeabi_ddiv>
 810aecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810aed0:	f004 040f 	and.w	r4, r4, #15
 810aed4:	2603      	movs	r6, #3
 810aed6:	4da2      	ldr	r5, [pc, #648]	@ (810b160 <_dtoa_r+0x5c0>)
 810aed8:	b954      	cbnz	r4, 810aef0 <_dtoa_r+0x350>
 810aeda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810aee2:	f7f5 fd3b 	bl	810095c <__aeabi_ddiv>
 810aee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810aeea:	e028      	b.n	810af3e <_dtoa_r+0x39e>
 810aeec:	2602      	movs	r6, #2
 810aeee:	e7f2      	b.n	810aed6 <_dtoa_r+0x336>
 810aef0:	07e1      	lsls	r1, r4, #31
 810aef2:	d508      	bpl.n	810af06 <_dtoa_r+0x366>
 810aef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810aef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 810aefc:	f7f5 fc04 	bl	8100708 <__aeabi_dmul>
 810af00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810af04:	3601      	adds	r6, #1
 810af06:	1064      	asrs	r4, r4, #1
 810af08:	3508      	adds	r5, #8
 810af0a:	e7e5      	b.n	810aed8 <_dtoa_r+0x338>
 810af0c:	f000 80d2 	beq.w	810b0b4 <_dtoa_r+0x514>
 810af10:	427c      	negs	r4, r7
 810af12:	4b92      	ldr	r3, [pc, #584]	@ (810b15c <_dtoa_r+0x5bc>)
 810af14:	4d92      	ldr	r5, [pc, #584]	@ (810b160 <_dtoa_r+0x5c0>)
 810af16:	f004 020f 	and.w	r2, r4, #15
 810af1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810af26:	f7f5 fbef 	bl	8100708 <__aeabi_dmul>
 810af2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810af2e:	1124      	asrs	r4, r4, #4
 810af30:	2300      	movs	r3, #0
 810af32:	2602      	movs	r6, #2
 810af34:	2c00      	cmp	r4, #0
 810af36:	f040 80b2 	bne.w	810b09e <_dtoa_r+0x4fe>
 810af3a:	2b00      	cmp	r3, #0
 810af3c:	d1d3      	bne.n	810aee6 <_dtoa_r+0x346>
 810af3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810af40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810af44:	2b00      	cmp	r3, #0
 810af46:	f000 80b7 	beq.w	810b0b8 <_dtoa_r+0x518>
 810af4a:	4b86      	ldr	r3, [pc, #536]	@ (810b164 <_dtoa_r+0x5c4>)
 810af4c:	2200      	movs	r2, #0
 810af4e:	4620      	mov	r0, r4
 810af50:	4629      	mov	r1, r5
 810af52:	f7f5 fe4b 	bl	8100bec <__aeabi_dcmplt>
 810af56:	2800      	cmp	r0, #0
 810af58:	f000 80ae 	beq.w	810b0b8 <_dtoa_r+0x518>
 810af5c:	9b07      	ldr	r3, [sp, #28]
 810af5e:	2b00      	cmp	r3, #0
 810af60:	f000 80aa 	beq.w	810b0b8 <_dtoa_r+0x518>
 810af64:	9b00      	ldr	r3, [sp, #0]
 810af66:	2b00      	cmp	r3, #0
 810af68:	dd37      	ble.n	810afda <_dtoa_r+0x43a>
 810af6a:	1e7b      	subs	r3, r7, #1
 810af6c:	9304      	str	r3, [sp, #16]
 810af6e:	4620      	mov	r0, r4
 810af70:	4b7d      	ldr	r3, [pc, #500]	@ (810b168 <_dtoa_r+0x5c8>)
 810af72:	2200      	movs	r2, #0
 810af74:	4629      	mov	r1, r5
 810af76:	f7f5 fbc7 	bl	8100708 <__aeabi_dmul>
 810af7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810af7e:	9c00      	ldr	r4, [sp, #0]
 810af80:	3601      	adds	r6, #1
 810af82:	4630      	mov	r0, r6
 810af84:	f7f5 fb56 	bl	8100634 <__aeabi_i2d>
 810af88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810af8c:	f7f5 fbbc 	bl	8100708 <__aeabi_dmul>
 810af90:	4b76      	ldr	r3, [pc, #472]	@ (810b16c <_dtoa_r+0x5cc>)
 810af92:	2200      	movs	r2, #0
 810af94:	f7f5 fa02 	bl	810039c <__adddf3>
 810af98:	4605      	mov	r5, r0
 810af9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810af9e:	2c00      	cmp	r4, #0
 810afa0:	f040 808d 	bne.w	810b0be <_dtoa_r+0x51e>
 810afa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810afa8:	4b71      	ldr	r3, [pc, #452]	@ (810b170 <_dtoa_r+0x5d0>)
 810afaa:	2200      	movs	r2, #0
 810afac:	f7f5 f9f4 	bl	8100398 <__aeabi_dsub>
 810afb0:	4602      	mov	r2, r0
 810afb2:	460b      	mov	r3, r1
 810afb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810afb8:	462a      	mov	r2, r5
 810afba:	4633      	mov	r3, r6
 810afbc:	f7f5 fe34 	bl	8100c28 <__aeabi_dcmpgt>
 810afc0:	2800      	cmp	r0, #0
 810afc2:	f040 828b 	bne.w	810b4dc <_dtoa_r+0x93c>
 810afc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810afca:	462a      	mov	r2, r5
 810afcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810afd0:	f7f5 fe0c 	bl	8100bec <__aeabi_dcmplt>
 810afd4:	2800      	cmp	r0, #0
 810afd6:	f040 8128 	bne.w	810b22a <_dtoa_r+0x68a>
 810afda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810afde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810afe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810afe4:	2b00      	cmp	r3, #0
 810afe6:	f2c0 815a 	blt.w	810b29e <_dtoa_r+0x6fe>
 810afea:	2f0e      	cmp	r7, #14
 810afec:	f300 8157 	bgt.w	810b29e <_dtoa_r+0x6fe>
 810aff0:	4b5a      	ldr	r3, [pc, #360]	@ (810b15c <_dtoa_r+0x5bc>)
 810aff2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810aff6:	ed93 7b00 	vldr	d7, [r3]
 810affa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810affc:	2b00      	cmp	r3, #0
 810affe:	ed8d 7b00 	vstr	d7, [sp]
 810b002:	da03      	bge.n	810b00c <_dtoa_r+0x46c>
 810b004:	9b07      	ldr	r3, [sp, #28]
 810b006:	2b00      	cmp	r3, #0
 810b008:	f340 8101 	ble.w	810b20e <_dtoa_r+0x66e>
 810b00c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810b010:	4656      	mov	r6, sl
 810b012:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b016:	4620      	mov	r0, r4
 810b018:	4629      	mov	r1, r5
 810b01a:	f7f5 fc9f 	bl	810095c <__aeabi_ddiv>
 810b01e:	f7f5 fe23 	bl	8100c68 <__aeabi_d2iz>
 810b022:	4680      	mov	r8, r0
 810b024:	f7f5 fb06 	bl	8100634 <__aeabi_i2d>
 810b028:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b02c:	f7f5 fb6c 	bl	8100708 <__aeabi_dmul>
 810b030:	4602      	mov	r2, r0
 810b032:	460b      	mov	r3, r1
 810b034:	4620      	mov	r0, r4
 810b036:	4629      	mov	r1, r5
 810b038:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810b03c:	f7f5 f9ac 	bl	8100398 <__aeabi_dsub>
 810b040:	f806 4b01 	strb.w	r4, [r6], #1
 810b044:	9d07      	ldr	r5, [sp, #28]
 810b046:	eba6 040a 	sub.w	r4, r6, sl
 810b04a:	42a5      	cmp	r5, r4
 810b04c:	4602      	mov	r2, r0
 810b04e:	460b      	mov	r3, r1
 810b050:	f040 8117 	bne.w	810b282 <_dtoa_r+0x6e2>
 810b054:	f7f5 f9a2 	bl	810039c <__adddf3>
 810b058:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b05c:	4604      	mov	r4, r0
 810b05e:	460d      	mov	r5, r1
 810b060:	f7f5 fde2 	bl	8100c28 <__aeabi_dcmpgt>
 810b064:	2800      	cmp	r0, #0
 810b066:	f040 80f9 	bne.w	810b25c <_dtoa_r+0x6bc>
 810b06a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b06e:	4620      	mov	r0, r4
 810b070:	4629      	mov	r1, r5
 810b072:	f7f5 fdb1 	bl	8100bd8 <__aeabi_dcmpeq>
 810b076:	b118      	cbz	r0, 810b080 <_dtoa_r+0x4e0>
 810b078:	f018 0f01 	tst.w	r8, #1
 810b07c:	f040 80ee 	bne.w	810b25c <_dtoa_r+0x6bc>
 810b080:	4649      	mov	r1, r9
 810b082:	4658      	mov	r0, fp
 810b084:	f000 fc90 	bl	810b9a8 <_Bfree>
 810b088:	2300      	movs	r3, #0
 810b08a:	7033      	strb	r3, [r6, #0]
 810b08c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810b08e:	3701      	adds	r7, #1
 810b090:	601f      	str	r7, [r3, #0]
 810b092:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b094:	2b00      	cmp	r3, #0
 810b096:	f000 831d 	beq.w	810b6d4 <_dtoa_r+0xb34>
 810b09a:	601e      	str	r6, [r3, #0]
 810b09c:	e31a      	b.n	810b6d4 <_dtoa_r+0xb34>
 810b09e:	07e2      	lsls	r2, r4, #31
 810b0a0:	d505      	bpl.n	810b0ae <_dtoa_r+0x50e>
 810b0a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 810b0a6:	f7f5 fb2f 	bl	8100708 <__aeabi_dmul>
 810b0aa:	3601      	adds	r6, #1
 810b0ac:	2301      	movs	r3, #1
 810b0ae:	1064      	asrs	r4, r4, #1
 810b0b0:	3508      	adds	r5, #8
 810b0b2:	e73f      	b.n	810af34 <_dtoa_r+0x394>
 810b0b4:	2602      	movs	r6, #2
 810b0b6:	e742      	b.n	810af3e <_dtoa_r+0x39e>
 810b0b8:	9c07      	ldr	r4, [sp, #28]
 810b0ba:	9704      	str	r7, [sp, #16]
 810b0bc:	e761      	b.n	810af82 <_dtoa_r+0x3e2>
 810b0be:	4b27      	ldr	r3, [pc, #156]	@ (810b15c <_dtoa_r+0x5bc>)
 810b0c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810b0c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810b0c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b0ca:	4454      	add	r4, sl
 810b0cc:	2900      	cmp	r1, #0
 810b0ce:	d053      	beq.n	810b178 <_dtoa_r+0x5d8>
 810b0d0:	4928      	ldr	r1, [pc, #160]	@ (810b174 <_dtoa_r+0x5d4>)
 810b0d2:	2000      	movs	r0, #0
 810b0d4:	f7f5 fc42 	bl	810095c <__aeabi_ddiv>
 810b0d8:	4633      	mov	r3, r6
 810b0da:	462a      	mov	r2, r5
 810b0dc:	f7f5 f95c 	bl	8100398 <__aeabi_dsub>
 810b0e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b0e4:	4656      	mov	r6, sl
 810b0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b0ea:	f7f5 fdbd 	bl	8100c68 <__aeabi_d2iz>
 810b0ee:	4605      	mov	r5, r0
 810b0f0:	f7f5 faa0 	bl	8100634 <__aeabi_i2d>
 810b0f4:	4602      	mov	r2, r0
 810b0f6:	460b      	mov	r3, r1
 810b0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b0fc:	f7f5 f94c 	bl	8100398 <__aeabi_dsub>
 810b100:	3530      	adds	r5, #48	@ 0x30
 810b102:	4602      	mov	r2, r0
 810b104:	460b      	mov	r3, r1
 810b106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b10a:	f806 5b01 	strb.w	r5, [r6], #1
 810b10e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b112:	f7f5 fd6b 	bl	8100bec <__aeabi_dcmplt>
 810b116:	2800      	cmp	r0, #0
 810b118:	d171      	bne.n	810b1fe <_dtoa_r+0x65e>
 810b11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b11e:	4911      	ldr	r1, [pc, #68]	@ (810b164 <_dtoa_r+0x5c4>)
 810b120:	2000      	movs	r0, #0
 810b122:	f7f5 f939 	bl	8100398 <__aeabi_dsub>
 810b126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b12a:	f7f5 fd5f 	bl	8100bec <__aeabi_dcmplt>
 810b12e:	2800      	cmp	r0, #0
 810b130:	f040 8095 	bne.w	810b25e <_dtoa_r+0x6be>
 810b134:	42a6      	cmp	r6, r4
 810b136:	f43f af50 	beq.w	810afda <_dtoa_r+0x43a>
 810b13a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b13e:	4b0a      	ldr	r3, [pc, #40]	@ (810b168 <_dtoa_r+0x5c8>)
 810b140:	2200      	movs	r2, #0
 810b142:	f7f5 fae1 	bl	8100708 <__aeabi_dmul>
 810b146:	4b08      	ldr	r3, [pc, #32]	@ (810b168 <_dtoa_r+0x5c8>)
 810b148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b14c:	2200      	movs	r2, #0
 810b14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b152:	f7f5 fad9 	bl	8100708 <__aeabi_dmul>
 810b156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b15a:	e7c4      	b.n	810b0e6 <_dtoa_r+0x546>
 810b15c:	0810e958 	.word	0x0810e958
 810b160:	0810e930 	.word	0x0810e930
 810b164:	3ff00000 	.word	0x3ff00000
 810b168:	40240000 	.word	0x40240000
 810b16c:	401c0000 	.word	0x401c0000
 810b170:	40140000 	.word	0x40140000
 810b174:	3fe00000 	.word	0x3fe00000
 810b178:	4631      	mov	r1, r6
 810b17a:	4628      	mov	r0, r5
 810b17c:	f7f5 fac4 	bl	8100708 <__aeabi_dmul>
 810b180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b184:	9415      	str	r4, [sp, #84]	@ 0x54
 810b186:	4656      	mov	r6, sl
 810b188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b18c:	f7f5 fd6c 	bl	8100c68 <__aeabi_d2iz>
 810b190:	4605      	mov	r5, r0
 810b192:	f7f5 fa4f 	bl	8100634 <__aeabi_i2d>
 810b196:	4602      	mov	r2, r0
 810b198:	460b      	mov	r3, r1
 810b19a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b19e:	f7f5 f8fb 	bl	8100398 <__aeabi_dsub>
 810b1a2:	3530      	adds	r5, #48	@ 0x30
 810b1a4:	f806 5b01 	strb.w	r5, [r6], #1
 810b1a8:	4602      	mov	r2, r0
 810b1aa:	460b      	mov	r3, r1
 810b1ac:	42a6      	cmp	r6, r4
 810b1ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b1b2:	f04f 0200 	mov.w	r2, #0
 810b1b6:	d124      	bne.n	810b202 <_dtoa_r+0x662>
 810b1b8:	4bac      	ldr	r3, [pc, #688]	@ (810b46c <_dtoa_r+0x8cc>)
 810b1ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b1be:	f7f5 f8ed 	bl	810039c <__adddf3>
 810b1c2:	4602      	mov	r2, r0
 810b1c4:	460b      	mov	r3, r1
 810b1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b1ca:	f7f5 fd2d 	bl	8100c28 <__aeabi_dcmpgt>
 810b1ce:	2800      	cmp	r0, #0
 810b1d0:	d145      	bne.n	810b25e <_dtoa_r+0x6be>
 810b1d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b1d6:	49a5      	ldr	r1, [pc, #660]	@ (810b46c <_dtoa_r+0x8cc>)
 810b1d8:	2000      	movs	r0, #0
 810b1da:	f7f5 f8dd 	bl	8100398 <__aeabi_dsub>
 810b1de:	4602      	mov	r2, r0
 810b1e0:	460b      	mov	r3, r1
 810b1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b1e6:	f7f5 fd01 	bl	8100bec <__aeabi_dcmplt>
 810b1ea:	2800      	cmp	r0, #0
 810b1ec:	f43f aef5 	beq.w	810afda <_dtoa_r+0x43a>
 810b1f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810b1f2:	1e73      	subs	r3, r6, #1
 810b1f4:	9315      	str	r3, [sp, #84]	@ 0x54
 810b1f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b1fa:	2b30      	cmp	r3, #48	@ 0x30
 810b1fc:	d0f8      	beq.n	810b1f0 <_dtoa_r+0x650>
 810b1fe:	9f04      	ldr	r7, [sp, #16]
 810b200:	e73e      	b.n	810b080 <_dtoa_r+0x4e0>
 810b202:	4b9b      	ldr	r3, [pc, #620]	@ (810b470 <_dtoa_r+0x8d0>)
 810b204:	f7f5 fa80 	bl	8100708 <__aeabi_dmul>
 810b208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b20c:	e7bc      	b.n	810b188 <_dtoa_r+0x5e8>
 810b20e:	d10c      	bne.n	810b22a <_dtoa_r+0x68a>
 810b210:	4b98      	ldr	r3, [pc, #608]	@ (810b474 <_dtoa_r+0x8d4>)
 810b212:	2200      	movs	r2, #0
 810b214:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b218:	f7f5 fa76 	bl	8100708 <__aeabi_dmul>
 810b21c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b220:	f7f5 fcf8 	bl	8100c14 <__aeabi_dcmpge>
 810b224:	2800      	cmp	r0, #0
 810b226:	f000 8157 	beq.w	810b4d8 <_dtoa_r+0x938>
 810b22a:	2400      	movs	r4, #0
 810b22c:	4625      	mov	r5, r4
 810b22e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b230:	43db      	mvns	r3, r3
 810b232:	9304      	str	r3, [sp, #16]
 810b234:	4656      	mov	r6, sl
 810b236:	2700      	movs	r7, #0
 810b238:	4621      	mov	r1, r4
 810b23a:	4658      	mov	r0, fp
 810b23c:	f000 fbb4 	bl	810b9a8 <_Bfree>
 810b240:	2d00      	cmp	r5, #0
 810b242:	d0dc      	beq.n	810b1fe <_dtoa_r+0x65e>
 810b244:	b12f      	cbz	r7, 810b252 <_dtoa_r+0x6b2>
 810b246:	42af      	cmp	r7, r5
 810b248:	d003      	beq.n	810b252 <_dtoa_r+0x6b2>
 810b24a:	4639      	mov	r1, r7
 810b24c:	4658      	mov	r0, fp
 810b24e:	f000 fbab 	bl	810b9a8 <_Bfree>
 810b252:	4629      	mov	r1, r5
 810b254:	4658      	mov	r0, fp
 810b256:	f000 fba7 	bl	810b9a8 <_Bfree>
 810b25a:	e7d0      	b.n	810b1fe <_dtoa_r+0x65e>
 810b25c:	9704      	str	r7, [sp, #16]
 810b25e:	4633      	mov	r3, r6
 810b260:	461e      	mov	r6, r3
 810b262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b266:	2a39      	cmp	r2, #57	@ 0x39
 810b268:	d107      	bne.n	810b27a <_dtoa_r+0x6da>
 810b26a:	459a      	cmp	sl, r3
 810b26c:	d1f8      	bne.n	810b260 <_dtoa_r+0x6c0>
 810b26e:	9a04      	ldr	r2, [sp, #16]
 810b270:	3201      	adds	r2, #1
 810b272:	9204      	str	r2, [sp, #16]
 810b274:	2230      	movs	r2, #48	@ 0x30
 810b276:	f88a 2000 	strb.w	r2, [sl]
 810b27a:	781a      	ldrb	r2, [r3, #0]
 810b27c:	3201      	adds	r2, #1
 810b27e:	701a      	strb	r2, [r3, #0]
 810b280:	e7bd      	b.n	810b1fe <_dtoa_r+0x65e>
 810b282:	4b7b      	ldr	r3, [pc, #492]	@ (810b470 <_dtoa_r+0x8d0>)
 810b284:	2200      	movs	r2, #0
 810b286:	f7f5 fa3f 	bl	8100708 <__aeabi_dmul>
 810b28a:	2200      	movs	r2, #0
 810b28c:	2300      	movs	r3, #0
 810b28e:	4604      	mov	r4, r0
 810b290:	460d      	mov	r5, r1
 810b292:	f7f5 fca1 	bl	8100bd8 <__aeabi_dcmpeq>
 810b296:	2800      	cmp	r0, #0
 810b298:	f43f aebb 	beq.w	810b012 <_dtoa_r+0x472>
 810b29c:	e6f0      	b.n	810b080 <_dtoa_r+0x4e0>
 810b29e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810b2a0:	2a00      	cmp	r2, #0
 810b2a2:	f000 80db 	beq.w	810b45c <_dtoa_r+0x8bc>
 810b2a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b2a8:	2a01      	cmp	r2, #1
 810b2aa:	f300 80bf 	bgt.w	810b42c <_dtoa_r+0x88c>
 810b2ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810b2b0:	2a00      	cmp	r2, #0
 810b2b2:	f000 80b7 	beq.w	810b424 <_dtoa_r+0x884>
 810b2b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810b2ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b2bc:	4646      	mov	r6, r8
 810b2be:	9a08      	ldr	r2, [sp, #32]
 810b2c0:	2101      	movs	r1, #1
 810b2c2:	441a      	add	r2, r3
 810b2c4:	4658      	mov	r0, fp
 810b2c6:	4498      	add	r8, r3
 810b2c8:	9208      	str	r2, [sp, #32]
 810b2ca:	f000 fc6b 	bl	810bba4 <__i2b>
 810b2ce:	4605      	mov	r5, r0
 810b2d0:	b15e      	cbz	r6, 810b2ea <_dtoa_r+0x74a>
 810b2d2:	9b08      	ldr	r3, [sp, #32]
 810b2d4:	2b00      	cmp	r3, #0
 810b2d6:	dd08      	ble.n	810b2ea <_dtoa_r+0x74a>
 810b2d8:	42b3      	cmp	r3, r6
 810b2da:	9a08      	ldr	r2, [sp, #32]
 810b2dc:	bfa8      	it	ge
 810b2de:	4633      	movge	r3, r6
 810b2e0:	eba8 0803 	sub.w	r8, r8, r3
 810b2e4:	1af6      	subs	r6, r6, r3
 810b2e6:	1ad3      	subs	r3, r2, r3
 810b2e8:	9308      	str	r3, [sp, #32]
 810b2ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b2ec:	b1f3      	cbz	r3, 810b32c <_dtoa_r+0x78c>
 810b2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b2f0:	2b00      	cmp	r3, #0
 810b2f2:	f000 80b7 	beq.w	810b464 <_dtoa_r+0x8c4>
 810b2f6:	b18c      	cbz	r4, 810b31c <_dtoa_r+0x77c>
 810b2f8:	4629      	mov	r1, r5
 810b2fa:	4622      	mov	r2, r4
 810b2fc:	4658      	mov	r0, fp
 810b2fe:	f000 fd11 	bl	810bd24 <__pow5mult>
 810b302:	464a      	mov	r2, r9
 810b304:	4601      	mov	r1, r0
 810b306:	4605      	mov	r5, r0
 810b308:	4658      	mov	r0, fp
 810b30a:	f000 fc61 	bl	810bbd0 <__multiply>
 810b30e:	4649      	mov	r1, r9
 810b310:	9004      	str	r0, [sp, #16]
 810b312:	4658      	mov	r0, fp
 810b314:	f000 fb48 	bl	810b9a8 <_Bfree>
 810b318:	9b04      	ldr	r3, [sp, #16]
 810b31a:	4699      	mov	r9, r3
 810b31c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b31e:	1b1a      	subs	r2, r3, r4
 810b320:	d004      	beq.n	810b32c <_dtoa_r+0x78c>
 810b322:	4649      	mov	r1, r9
 810b324:	4658      	mov	r0, fp
 810b326:	f000 fcfd 	bl	810bd24 <__pow5mult>
 810b32a:	4681      	mov	r9, r0
 810b32c:	2101      	movs	r1, #1
 810b32e:	4658      	mov	r0, fp
 810b330:	f000 fc38 	bl	810bba4 <__i2b>
 810b334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b336:	4604      	mov	r4, r0
 810b338:	2b00      	cmp	r3, #0
 810b33a:	f000 81cf 	beq.w	810b6dc <_dtoa_r+0xb3c>
 810b33e:	461a      	mov	r2, r3
 810b340:	4601      	mov	r1, r0
 810b342:	4658      	mov	r0, fp
 810b344:	f000 fcee 	bl	810bd24 <__pow5mult>
 810b348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b34a:	2b01      	cmp	r3, #1
 810b34c:	4604      	mov	r4, r0
 810b34e:	f300 8095 	bgt.w	810b47c <_dtoa_r+0x8dc>
 810b352:	9b02      	ldr	r3, [sp, #8]
 810b354:	2b00      	cmp	r3, #0
 810b356:	f040 8087 	bne.w	810b468 <_dtoa_r+0x8c8>
 810b35a:	9b03      	ldr	r3, [sp, #12]
 810b35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b360:	2b00      	cmp	r3, #0
 810b362:	f040 8089 	bne.w	810b478 <_dtoa_r+0x8d8>
 810b366:	9b03      	ldr	r3, [sp, #12]
 810b368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810b36c:	0d1b      	lsrs	r3, r3, #20
 810b36e:	051b      	lsls	r3, r3, #20
 810b370:	b12b      	cbz	r3, 810b37e <_dtoa_r+0x7de>
 810b372:	9b08      	ldr	r3, [sp, #32]
 810b374:	3301      	adds	r3, #1
 810b376:	9308      	str	r3, [sp, #32]
 810b378:	f108 0801 	add.w	r8, r8, #1
 810b37c:	2301      	movs	r3, #1
 810b37e:	930a      	str	r3, [sp, #40]	@ 0x28
 810b380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b382:	2b00      	cmp	r3, #0
 810b384:	f000 81b0 	beq.w	810b6e8 <_dtoa_r+0xb48>
 810b388:	6923      	ldr	r3, [r4, #16]
 810b38a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b38e:	6918      	ldr	r0, [r3, #16]
 810b390:	f000 fbbc 	bl	810bb0c <__hi0bits>
 810b394:	f1c0 0020 	rsb	r0, r0, #32
 810b398:	9b08      	ldr	r3, [sp, #32]
 810b39a:	4418      	add	r0, r3
 810b39c:	f010 001f 	ands.w	r0, r0, #31
 810b3a0:	d077      	beq.n	810b492 <_dtoa_r+0x8f2>
 810b3a2:	f1c0 0320 	rsb	r3, r0, #32
 810b3a6:	2b04      	cmp	r3, #4
 810b3a8:	dd6b      	ble.n	810b482 <_dtoa_r+0x8e2>
 810b3aa:	9b08      	ldr	r3, [sp, #32]
 810b3ac:	f1c0 001c 	rsb	r0, r0, #28
 810b3b0:	4403      	add	r3, r0
 810b3b2:	4480      	add	r8, r0
 810b3b4:	4406      	add	r6, r0
 810b3b6:	9308      	str	r3, [sp, #32]
 810b3b8:	f1b8 0f00 	cmp.w	r8, #0
 810b3bc:	dd05      	ble.n	810b3ca <_dtoa_r+0x82a>
 810b3be:	4649      	mov	r1, r9
 810b3c0:	4642      	mov	r2, r8
 810b3c2:	4658      	mov	r0, fp
 810b3c4:	f000 fd08 	bl	810bdd8 <__lshift>
 810b3c8:	4681      	mov	r9, r0
 810b3ca:	9b08      	ldr	r3, [sp, #32]
 810b3cc:	2b00      	cmp	r3, #0
 810b3ce:	dd05      	ble.n	810b3dc <_dtoa_r+0x83c>
 810b3d0:	4621      	mov	r1, r4
 810b3d2:	461a      	mov	r2, r3
 810b3d4:	4658      	mov	r0, fp
 810b3d6:	f000 fcff 	bl	810bdd8 <__lshift>
 810b3da:	4604      	mov	r4, r0
 810b3dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810b3de:	2b00      	cmp	r3, #0
 810b3e0:	d059      	beq.n	810b496 <_dtoa_r+0x8f6>
 810b3e2:	4621      	mov	r1, r4
 810b3e4:	4648      	mov	r0, r9
 810b3e6:	f000 fd63 	bl	810beb0 <__mcmp>
 810b3ea:	2800      	cmp	r0, #0
 810b3ec:	da53      	bge.n	810b496 <_dtoa_r+0x8f6>
 810b3ee:	1e7b      	subs	r3, r7, #1
 810b3f0:	9304      	str	r3, [sp, #16]
 810b3f2:	4649      	mov	r1, r9
 810b3f4:	2300      	movs	r3, #0
 810b3f6:	220a      	movs	r2, #10
 810b3f8:	4658      	mov	r0, fp
 810b3fa:	f000 faf7 	bl	810b9ec <__multadd>
 810b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b400:	4681      	mov	r9, r0
 810b402:	2b00      	cmp	r3, #0
 810b404:	f000 8172 	beq.w	810b6ec <_dtoa_r+0xb4c>
 810b408:	2300      	movs	r3, #0
 810b40a:	4629      	mov	r1, r5
 810b40c:	220a      	movs	r2, #10
 810b40e:	4658      	mov	r0, fp
 810b410:	f000 faec 	bl	810b9ec <__multadd>
 810b414:	9b00      	ldr	r3, [sp, #0]
 810b416:	2b00      	cmp	r3, #0
 810b418:	4605      	mov	r5, r0
 810b41a:	dc67      	bgt.n	810b4ec <_dtoa_r+0x94c>
 810b41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b41e:	2b02      	cmp	r3, #2
 810b420:	dc41      	bgt.n	810b4a6 <_dtoa_r+0x906>
 810b422:	e063      	b.n	810b4ec <_dtoa_r+0x94c>
 810b424:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810b426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810b42a:	e746      	b.n	810b2ba <_dtoa_r+0x71a>
 810b42c:	9b07      	ldr	r3, [sp, #28]
 810b42e:	1e5c      	subs	r4, r3, #1
 810b430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b432:	42a3      	cmp	r3, r4
 810b434:	bfbf      	itttt	lt
 810b436:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810b438:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810b43a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810b43c:	1ae3      	sublt	r3, r4, r3
 810b43e:	bfb4      	ite	lt
 810b440:	18d2      	addlt	r2, r2, r3
 810b442:	1b1c      	subge	r4, r3, r4
 810b444:	9b07      	ldr	r3, [sp, #28]
 810b446:	bfbc      	itt	lt
 810b448:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810b44a:	2400      	movlt	r4, #0
 810b44c:	2b00      	cmp	r3, #0
 810b44e:	bfb5      	itete	lt
 810b450:	eba8 0603 	sublt.w	r6, r8, r3
 810b454:	9b07      	ldrge	r3, [sp, #28]
 810b456:	2300      	movlt	r3, #0
 810b458:	4646      	movge	r6, r8
 810b45a:	e730      	b.n	810b2be <_dtoa_r+0x71e>
 810b45c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b45e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810b460:	4646      	mov	r6, r8
 810b462:	e735      	b.n	810b2d0 <_dtoa_r+0x730>
 810b464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810b466:	e75c      	b.n	810b322 <_dtoa_r+0x782>
 810b468:	2300      	movs	r3, #0
 810b46a:	e788      	b.n	810b37e <_dtoa_r+0x7de>
 810b46c:	3fe00000 	.word	0x3fe00000
 810b470:	40240000 	.word	0x40240000
 810b474:	40140000 	.word	0x40140000
 810b478:	9b02      	ldr	r3, [sp, #8]
 810b47a:	e780      	b.n	810b37e <_dtoa_r+0x7de>
 810b47c:	2300      	movs	r3, #0
 810b47e:	930a      	str	r3, [sp, #40]	@ 0x28
 810b480:	e782      	b.n	810b388 <_dtoa_r+0x7e8>
 810b482:	d099      	beq.n	810b3b8 <_dtoa_r+0x818>
 810b484:	9a08      	ldr	r2, [sp, #32]
 810b486:	331c      	adds	r3, #28
 810b488:	441a      	add	r2, r3
 810b48a:	4498      	add	r8, r3
 810b48c:	441e      	add	r6, r3
 810b48e:	9208      	str	r2, [sp, #32]
 810b490:	e792      	b.n	810b3b8 <_dtoa_r+0x818>
 810b492:	4603      	mov	r3, r0
 810b494:	e7f6      	b.n	810b484 <_dtoa_r+0x8e4>
 810b496:	9b07      	ldr	r3, [sp, #28]
 810b498:	9704      	str	r7, [sp, #16]
 810b49a:	2b00      	cmp	r3, #0
 810b49c:	dc20      	bgt.n	810b4e0 <_dtoa_r+0x940>
 810b49e:	9300      	str	r3, [sp, #0]
 810b4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b4a2:	2b02      	cmp	r3, #2
 810b4a4:	dd1e      	ble.n	810b4e4 <_dtoa_r+0x944>
 810b4a6:	9b00      	ldr	r3, [sp, #0]
 810b4a8:	2b00      	cmp	r3, #0
 810b4aa:	f47f aec0 	bne.w	810b22e <_dtoa_r+0x68e>
 810b4ae:	4621      	mov	r1, r4
 810b4b0:	2205      	movs	r2, #5
 810b4b2:	4658      	mov	r0, fp
 810b4b4:	f000 fa9a 	bl	810b9ec <__multadd>
 810b4b8:	4601      	mov	r1, r0
 810b4ba:	4604      	mov	r4, r0
 810b4bc:	4648      	mov	r0, r9
 810b4be:	f000 fcf7 	bl	810beb0 <__mcmp>
 810b4c2:	2800      	cmp	r0, #0
 810b4c4:	f77f aeb3 	ble.w	810b22e <_dtoa_r+0x68e>
 810b4c8:	4656      	mov	r6, sl
 810b4ca:	2331      	movs	r3, #49	@ 0x31
 810b4cc:	f806 3b01 	strb.w	r3, [r6], #1
 810b4d0:	9b04      	ldr	r3, [sp, #16]
 810b4d2:	3301      	adds	r3, #1
 810b4d4:	9304      	str	r3, [sp, #16]
 810b4d6:	e6ae      	b.n	810b236 <_dtoa_r+0x696>
 810b4d8:	9c07      	ldr	r4, [sp, #28]
 810b4da:	9704      	str	r7, [sp, #16]
 810b4dc:	4625      	mov	r5, r4
 810b4de:	e7f3      	b.n	810b4c8 <_dtoa_r+0x928>
 810b4e0:	9b07      	ldr	r3, [sp, #28]
 810b4e2:	9300      	str	r3, [sp, #0]
 810b4e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b4e6:	2b00      	cmp	r3, #0
 810b4e8:	f000 8104 	beq.w	810b6f4 <_dtoa_r+0xb54>
 810b4ec:	2e00      	cmp	r6, #0
 810b4ee:	dd05      	ble.n	810b4fc <_dtoa_r+0x95c>
 810b4f0:	4629      	mov	r1, r5
 810b4f2:	4632      	mov	r2, r6
 810b4f4:	4658      	mov	r0, fp
 810b4f6:	f000 fc6f 	bl	810bdd8 <__lshift>
 810b4fa:	4605      	mov	r5, r0
 810b4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b4fe:	2b00      	cmp	r3, #0
 810b500:	d05a      	beq.n	810b5b8 <_dtoa_r+0xa18>
 810b502:	6869      	ldr	r1, [r5, #4]
 810b504:	4658      	mov	r0, fp
 810b506:	f000 fa0f 	bl	810b928 <_Balloc>
 810b50a:	4606      	mov	r6, r0
 810b50c:	b928      	cbnz	r0, 810b51a <_dtoa_r+0x97a>
 810b50e:	4b84      	ldr	r3, [pc, #528]	@ (810b720 <_dtoa_r+0xb80>)
 810b510:	4602      	mov	r2, r0
 810b512:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810b516:	f7ff bb5a 	b.w	810abce <_dtoa_r+0x2e>
 810b51a:	692a      	ldr	r2, [r5, #16]
 810b51c:	3202      	adds	r2, #2
 810b51e:	0092      	lsls	r2, r2, #2
 810b520:	f105 010c 	add.w	r1, r5, #12
 810b524:	300c      	adds	r0, #12
 810b526:	f7ff fa9e 	bl	810aa66 <memcpy>
 810b52a:	2201      	movs	r2, #1
 810b52c:	4631      	mov	r1, r6
 810b52e:	4658      	mov	r0, fp
 810b530:	f000 fc52 	bl	810bdd8 <__lshift>
 810b534:	f10a 0301 	add.w	r3, sl, #1
 810b538:	9307      	str	r3, [sp, #28]
 810b53a:	9b00      	ldr	r3, [sp, #0]
 810b53c:	4453      	add	r3, sl
 810b53e:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b540:	9b02      	ldr	r3, [sp, #8]
 810b542:	f003 0301 	and.w	r3, r3, #1
 810b546:	462f      	mov	r7, r5
 810b548:	930a      	str	r3, [sp, #40]	@ 0x28
 810b54a:	4605      	mov	r5, r0
 810b54c:	9b07      	ldr	r3, [sp, #28]
 810b54e:	4621      	mov	r1, r4
 810b550:	3b01      	subs	r3, #1
 810b552:	4648      	mov	r0, r9
 810b554:	9300      	str	r3, [sp, #0]
 810b556:	f7ff fa9b 	bl	810aa90 <quorem>
 810b55a:	4639      	mov	r1, r7
 810b55c:	9002      	str	r0, [sp, #8]
 810b55e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b562:	4648      	mov	r0, r9
 810b564:	f000 fca4 	bl	810beb0 <__mcmp>
 810b568:	462a      	mov	r2, r5
 810b56a:	9008      	str	r0, [sp, #32]
 810b56c:	4621      	mov	r1, r4
 810b56e:	4658      	mov	r0, fp
 810b570:	f000 fcba 	bl	810bee8 <__mdiff>
 810b574:	68c2      	ldr	r2, [r0, #12]
 810b576:	4606      	mov	r6, r0
 810b578:	bb02      	cbnz	r2, 810b5bc <_dtoa_r+0xa1c>
 810b57a:	4601      	mov	r1, r0
 810b57c:	4648      	mov	r0, r9
 810b57e:	f000 fc97 	bl	810beb0 <__mcmp>
 810b582:	4602      	mov	r2, r0
 810b584:	4631      	mov	r1, r6
 810b586:	4658      	mov	r0, fp
 810b588:	920e      	str	r2, [sp, #56]	@ 0x38
 810b58a:	f000 fa0d 	bl	810b9a8 <_Bfree>
 810b58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810b592:	9e07      	ldr	r6, [sp, #28]
 810b594:	ea43 0102 	orr.w	r1, r3, r2
 810b598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b59a:	4319      	orrs	r1, r3
 810b59c:	d110      	bne.n	810b5c0 <_dtoa_r+0xa20>
 810b59e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b5a2:	d029      	beq.n	810b5f8 <_dtoa_r+0xa58>
 810b5a4:	9b08      	ldr	r3, [sp, #32]
 810b5a6:	2b00      	cmp	r3, #0
 810b5a8:	dd02      	ble.n	810b5b0 <_dtoa_r+0xa10>
 810b5aa:	9b02      	ldr	r3, [sp, #8]
 810b5ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810b5b0:	9b00      	ldr	r3, [sp, #0]
 810b5b2:	f883 8000 	strb.w	r8, [r3]
 810b5b6:	e63f      	b.n	810b238 <_dtoa_r+0x698>
 810b5b8:	4628      	mov	r0, r5
 810b5ba:	e7bb      	b.n	810b534 <_dtoa_r+0x994>
 810b5bc:	2201      	movs	r2, #1
 810b5be:	e7e1      	b.n	810b584 <_dtoa_r+0x9e4>
 810b5c0:	9b08      	ldr	r3, [sp, #32]
 810b5c2:	2b00      	cmp	r3, #0
 810b5c4:	db04      	blt.n	810b5d0 <_dtoa_r+0xa30>
 810b5c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810b5c8:	430b      	orrs	r3, r1
 810b5ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810b5cc:	430b      	orrs	r3, r1
 810b5ce:	d120      	bne.n	810b612 <_dtoa_r+0xa72>
 810b5d0:	2a00      	cmp	r2, #0
 810b5d2:	dded      	ble.n	810b5b0 <_dtoa_r+0xa10>
 810b5d4:	4649      	mov	r1, r9
 810b5d6:	2201      	movs	r2, #1
 810b5d8:	4658      	mov	r0, fp
 810b5da:	f000 fbfd 	bl	810bdd8 <__lshift>
 810b5de:	4621      	mov	r1, r4
 810b5e0:	4681      	mov	r9, r0
 810b5e2:	f000 fc65 	bl	810beb0 <__mcmp>
 810b5e6:	2800      	cmp	r0, #0
 810b5e8:	dc03      	bgt.n	810b5f2 <_dtoa_r+0xa52>
 810b5ea:	d1e1      	bne.n	810b5b0 <_dtoa_r+0xa10>
 810b5ec:	f018 0f01 	tst.w	r8, #1
 810b5f0:	d0de      	beq.n	810b5b0 <_dtoa_r+0xa10>
 810b5f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b5f6:	d1d8      	bne.n	810b5aa <_dtoa_r+0xa0a>
 810b5f8:	9a00      	ldr	r2, [sp, #0]
 810b5fa:	2339      	movs	r3, #57	@ 0x39
 810b5fc:	7013      	strb	r3, [r2, #0]
 810b5fe:	4633      	mov	r3, r6
 810b600:	461e      	mov	r6, r3
 810b602:	3b01      	subs	r3, #1
 810b604:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810b608:	2a39      	cmp	r2, #57	@ 0x39
 810b60a:	d052      	beq.n	810b6b2 <_dtoa_r+0xb12>
 810b60c:	3201      	adds	r2, #1
 810b60e:	701a      	strb	r2, [r3, #0]
 810b610:	e612      	b.n	810b238 <_dtoa_r+0x698>
 810b612:	2a00      	cmp	r2, #0
 810b614:	dd07      	ble.n	810b626 <_dtoa_r+0xa86>
 810b616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b61a:	d0ed      	beq.n	810b5f8 <_dtoa_r+0xa58>
 810b61c:	9a00      	ldr	r2, [sp, #0]
 810b61e:	f108 0301 	add.w	r3, r8, #1
 810b622:	7013      	strb	r3, [r2, #0]
 810b624:	e608      	b.n	810b238 <_dtoa_r+0x698>
 810b626:	9b07      	ldr	r3, [sp, #28]
 810b628:	9a07      	ldr	r2, [sp, #28]
 810b62a:	f803 8c01 	strb.w	r8, [r3, #-1]
 810b62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b630:	4293      	cmp	r3, r2
 810b632:	d028      	beq.n	810b686 <_dtoa_r+0xae6>
 810b634:	4649      	mov	r1, r9
 810b636:	2300      	movs	r3, #0
 810b638:	220a      	movs	r2, #10
 810b63a:	4658      	mov	r0, fp
 810b63c:	f000 f9d6 	bl	810b9ec <__multadd>
 810b640:	42af      	cmp	r7, r5
 810b642:	4681      	mov	r9, r0
 810b644:	f04f 0300 	mov.w	r3, #0
 810b648:	f04f 020a 	mov.w	r2, #10
 810b64c:	4639      	mov	r1, r7
 810b64e:	4658      	mov	r0, fp
 810b650:	d107      	bne.n	810b662 <_dtoa_r+0xac2>
 810b652:	f000 f9cb 	bl	810b9ec <__multadd>
 810b656:	4607      	mov	r7, r0
 810b658:	4605      	mov	r5, r0
 810b65a:	9b07      	ldr	r3, [sp, #28]
 810b65c:	3301      	adds	r3, #1
 810b65e:	9307      	str	r3, [sp, #28]
 810b660:	e774      	b.n	810b54c <_dtoa_r+0x9ac>
 810b662:	f000 f9c3 	bl	810b9ec <__multadd>
 810b666:	4629      	mov	r1, r5
 810b668:	4607      	mov	r7, r0
 810b66a:	2300      	movs	r3, #0
 810b66c:	220a      	movs	r2, #10
 810b66e:	4658      	mov	r0, fp
 810b670:	f000 f9bc 	bl	810b9ec <__multadd>
 810b674:	4605      	mov	r5, r0
 810b676:	e7f0      	b.n	810b65a <_dtoa_r+0xaba>
 810b678:	9b00      	ldr	r3, [sp, #0]
 810b67a:	2b00      	cmp	r3, #0
 810b67c:	bfcc      	ite	gt
 810b67e:	461e      	movgt	r6, r3
 810b680:	2601      	movle	r6, #1
 810b682:	4456      	add	r6, sl
 810b684:	2700      	movs	r7, #0
 810b686:	4649      	mov	r1, r9
 810b688:	2201      	movs	r2, #1
 810b68a:	4658      	mov	r0, fp
 810b68c:	f000 fba4 	bl	810bdd8 <__lshift>
 810b690:	4621      	mov	r1, r4
 810b692:	4681      	mov	r9, r0
 810b694:	f000 fc0c 	bl	810beb0 <__mcmp>
 810b698:	2800      	cmp	r0, #0
 810b69a:	dcb0      	bgt.n	810b5fe <_dtoa_r+0xa5e>
 810b69c:	d102      	bne.n	810b6a4 <_dtoa_r+0xb04>
 810b69e:	f018 0f01 	tst.w	r8, #1
 810b6a2:	d1ac      	bne.n	810b5fe <_dtoa_r+0xa5e>
 810b6a4:	4633      	mov	r3, r6
 810b6a6:	461e      	mov	r6, r3
 810b6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b6ac:	2a30      	cmp	r2, #48	@ 0x30
 810b6ae:	d0fa      	beq.n	810b6a6 <_dtoa_r+0xb06>
 810b6b0:	e5c2      	b.n	810b238 <_dtoa_r+0x698>
 810b6b2:	459a      	cmp	sl, r3
 810b6b4:	d1a4      	bne.n	810b600 <_dtoa_r+0xa60>
 810b6b6:	9b04      	ldr	r3, [sp, #16]
 810b6b8:	3301      	adds	r3, #1
 810b6ba:	9304      	str	r3, [sp, #16]
 810b6bc:	2331      	movs	r3, #49	@ 0x31
 810b6be:	f88a 3000 	strb.w	r3, [sl]
 810b6c2:	e5b9      	b.n	810b238 <_dtoa_r+0x698>
 810b6c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b6c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810b724 <_dtoa_r+0xb84>
 810b6ca:	b11b      	cbz	r3, 810b6d4 <_dtoa_r+0xb34>
 810b6cc:	f10a 0308 	add.w	r3, sl, #8
 810b6d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810b6d2:	6013      	str	r3, [r2, #0]
 810b6d4:	4650      	mov	r0, sl
 810b6d6:	b019      	add	sp, #100	@ 0x64
 810b6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b6de:	2b01      	cmp	r3, #1
 810b6e0:	f77f ae37 	ble.w	810b352 <_dtoa_r+0x7b2>
 810b6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b6e6:	930a      	str	r3, [sp, #40]	@ 0x28
 810b6e8:	2001      	movs	r0, #1
 810b6ea:	e655      	b.n	810b398 <_dtoa_r+0x7f8>
 810b6ec:	9b00      	ldr	r3, [sp, #0]
 810b6ee:	2b00      	cmp	r3, #0
 810b6f0:	f77f aed6 	ble.w	810b4a0 <_dtoa_r+0x900>
 810b6f4:	4656      	mov	r6, sl
 810b6f6:	4621      	mov	r1, r4
 810b6f8:	4648      	mov	r0, r9
 810b6fa:	f7ff f9c9 	bl	810aa90 <quorem>
 810b6fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b702:	f806 8b01 	strb.w	r8, [r6], #1
 810b706:	9b00      	ldr	r3, [sp, #0]
 810b708:	eba6 020a 	sub.w	r2, r6, sl
 810b70c:	4293      	cmp	r3, r2
 810b70e:	ddb3      	ble.n	810b678 <_dtoa_r+0xad8>
 810b710:	4649      	mov	r1, r9
 810b712:	2300      	movs	r3, #0
 810b714:	220a      	movs	r2, #10
 810b716:	4658      	mov	r0, fp
 810b718:	f000 f968 	bl	810b9ec <__multadd>
 810b71c:	4681      	mov	r9, r0
 810b71e:	e7ea      	b.n	810b6f6 <_dtoa_r+0xb56>
 810b720:	0810e8b9 	.word	0x0810e8b9
 810b724:	0810e83d 	.word	0x0810e83d

0810b728 <_free_r>:
 810b728:	b538      	push	{r3, r4, r5, lr}
 810b72a:	4605      	mov	r5, r0
 810b72c:	2900      	cmp	r1, #0
 810b72e:	d041      	beq.n	810b7b4 <_free_r+0x8c>
 810b730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b734:	1f0c      	subs	r4, r1, #4
 810b736:	2b00      	cmp	r3, #0
 810b738:	bfb8      	it	lt
 810b73a:	18e4      	addlt	r4, r4, r3
 810b73c:	f000 f8e8 	bl	810b910 <__malloc_lock>
 810b740:	4a1d      	ldr	r2, [pc, #116]	@ (810b7b8 <_free_r+0x90>)
 810b742:	6813      	ldr	r3, [r2, #0]
 810b744:	b933      	cbnz	r3, 810b754 <_free_r+0x2c>
 810b746:	6063      	str	r3, [r4, #4]
 810b748:	6014      	str	r4, [r2, #0]
 810b74a:	4628      	mov	r0, r5
 810b74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b750:	f000 b8e4 	b.w	810b91c <__malloc_unlock>
 810b754:	42a3      	cmp	r3, r4
 810b756:	d908      	bls.n	810b76a <_free_r+0x42>
 810b758:	6820      	ldr	r0, [r4, #0]
 810b75a:	1821      	adds	r1, r4, r0
 810b75c:	428b      	cmp	r3, r1
 810b75e:	bf01      	itttt	eq
 810b760:	6819      	ldreq	r1, [r3, #0]
 810b762:	685b      	ldreq	r3, [r3, #4]
 810b764:	1809      	addeq	r1, r1, r0
 810b766:	6021      	streq	r1, [r4, #0]
 810b768:	e7ed      	b.n	810b746 <_free_r+0x1e>
 810b76a:	461a      	mov	r2, r3
 810b76c:	685b      	ldr	r3, [r3, #4]
 810b76e:	b10b      	cbz	r3, 810b774 <_free_r+0x4c>
 810b770:	42a3      	cmp	r3, r4
 810b772:	d9fa      	bls.n	810b76a <_free_r+0x42>
 810b774:	6811      	ldr	r1, [r2, #0]
 810b776:	1850      	adds	r0, r2, r1
 810b778:	42a0      	cmp	r0, r4
 810b77a:	d10b      	bne.n	810b794 <_free_r+0x6c>
 810b77c:	6820      	ldr	r0, [r4, #0]
 810b77e:	4401      	add	r1, r0
 810b780:	1850      	adds	r0, r2, r1
 810b782:	4283      	cmp	r3, r0
 810b784:	6011      	str	r1, [r2, #0]
 810b786:	d1e0      	bne.n	810b74a <_free_r+0x22>
 810b788:	6818      	ldr	r0, [r3, #0]
 810b78a:	685b      	ldr	r3, [r3, #4]
 810b78c:	6053      	str	r3, [r2, #4]
 810b78e:	4408      	add	r0, r1
 810b790:	6010      	str	r0, [r2, #0]
 810b792:	e7da      	b.n	810b74a <_free_r+0x22>
 810b794:	d902      	bls.n	810b79c <_free_r+0x74>
 810b796:	230c      	movs	r3, #12
 810b798:	602b      	str	r3, [r5, #0]
 810b79a:	e7d6      	b.n	810b74a <_free_r+0x22>
 810b79c:	6820      	ldr	r0, [r4, #0]
 810b79e:	1821      	adds	r1, r4, r0
 810b7a0:	428b      	cmp	r3, r1
 810b7a2:	bf04      	itt	eq
 810b7a4:	6819      	ldreq	r1, [r3, #0]
 810b7a6:	685b      	ldreq	r3, [r3, #4]
 810b7a8:	6063      	str	r3, [r4, #4]
 810b7aa:	bf04      	itt	eq
 810b7ac:	1809      	addeq	r1, r1, r0
 810b7ae:	6021      	streq	r1, [r4, #0]
 810b7b0:	6054      	str	r4, [r2, #4]
 810b7b2:	e7ca      	b.n	810b74a <_free_r+0x22>
 810b7b4:	bd38      	pop	{r3, r4, r5, pc}
 810b7b6:	bf00      	nop
 810b7b8:	100005c0 	.word	0x100005c0

0810b7bc <malloc>:
 810b7bc:	4b02      	ldr	r3, [pc, #8]	@ (810b7c8 <malloc+0xc>)
 810b7be:	4601      	mov	r1, r0
 810b7c0:	6818      	ldr	r0, [r3, #0]
 810b7c2:	f000 b825 	b.w	810b810 <_malloc_r>
 810b7c6:	bf00      	nop
 810b7c8:	10000028 	.word	0x10000028

0810b7cc <sbrk_aligned>:
 810b7cc:	b570      	push	{r4, r5, r6, lr}
 810b7ce:	4e0f      	ldr	r6, [pc, #60]	@ (810b80c <sbrk_aligned+0x40>)
 810b7d0:	460c      	mov	r4, r1
 810b7d2:	6831      	ldr	r1, [r6, #0]
 810b7d4:	4605      	mov	r5, r0
 810b7d6:	b911      	cbnz	r1, 810b7de <sbrk_aligned+0x12>
 810b7d8:	f001 ffd2 	bl	810d780 <_sbrk_r>
 810b7dc:	6030      	str	r0, [r6, #0]
 810b7de:	4621      	mov	r1, r4
 810b7e0:	4628      	mov	r0, r5
 810b7e2:	f001 ffcd 	bl	810d780 <_sbrk_r>
 810b7e6:	1c43      	adds	r3, r0, #1
 810b7e8:	d103      	bne.n	810b7f2 <sbrk_aligned+0x26>
 810b7ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 810b7ee:	4620      	mov	r0, r4
 810b7f0:	bd70      	pop	{r4, r5, r6, pc}
 810b7f2:	1cc4      	adds	r4, r0, #3
 810b7f4:	f024 0403 	bic.w	r4, r4, #3
 810b7f8:	42a0      	cmp	r0, r4
 810b7fa:	d0f8      	beq.n	810b7ee <sbrk_aligned+0x22>
 810b7fc:	1a21      	subs	r1, r4, r0
 810b7fe:	4628      	mov	r0, r5
 810b800:	f001 ffbe 	bl	810d780 <_sbrk_r>
 810b804:	3001      	adds	r0, #1
 810b806:	d1f2      	bne.n	810b7ee <sbrk_aligned+0x22>
 810b808:	e7ef      	b.n	810b7ea <sbrk_aligned+0x1e>
 810b80a:	bf00      	nop
 810b80c:	100005bc 	.word	0x100005bc

0810b810 <_malloc_r>:
 810b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b814:	1ccd      	adds	r5, r1, #3
 810b816:	f025 0503 	bic.w	r5, r5, #3
 810b81a:	3508      	adds	r5, #8
 810b81c:	2d0c      	cmp	r5, #12
 810b81e:	bf38      	it	cc
 810b820:	250c      	movcc	r5, #12
 810b822:	2d00      	cmp	r5, #0
 810b824:	4606      	mov	r6, r0
 810b826:	db01      	blt.n	810b82c <_malloc_r+0x1c>
 810b828:	42a9      	cmp	r1, r5
 810b82a:	d904      	bls.n	810b836 <_malloc_r+0x26>
 810b82c:	230c      	movs	r3, #12
 810b82e:	6033      	str	r3, [r6, #0]
 810b830:	2000      	movs	r0, #0
 810b832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810b90c <_malloc_r+0xfc>
 810b83a:	f000 f869 	bl	810b910 <__malloc_lock>
 810b83e:	f8d8 3000 	ldr.w	r3, [r8]
 810b842:	461c      	mov	r4, r3
 810b844:	bb44      	cbnz	r4, 810b898 <_malloc_r+0x88>
 810b846:	4629      	mov	r1, r5
 810b848:	4630      	mov	r0, r6
 810b84a:	f7ff ffbf 	bl	810b7cc <sbrk_aligned>
 810b84e:	1c43      	adds	r3, r0, #1
 810b850:	4604      	mov	r4, r0
 810b852:	d158      	bne.n	810b906 <_malloc_r+0xf6>
 810b854:	f8d8 4000 	ldr.w	r4, [r8]
 810b858:	4627      	mov	r7, r4
 810b85a:	2f00      	cmp	r7, #0
 810b85c:	d143      	bne.n	810b8e6 <_malloc_r+0xd6>
 810b85e:	2c00      	cmp	r4, #0
 810b860:	d04b      	beq.n	810b8fa <_malloc_r+0xea>
 810b862:	6823      	ldr	r3, [r4, #0]
 810b864:	4639      	mov	r1, r7
 810b866:	4630      	mov	r0, r6
 810b868:	eb04 0903 	add.w	r9, r4, r3
 810b86c:	f001 ff88 	bl	810d780 <_sbrk_r>
 810b870:	4581      	cmp	r9, r0
 810b872:	d142      	bne.n	810b8fa <_malloc_r+0xea>
 810b874:	6821      	ldr	r1, [r4, #0]
 810b876:	1a6d      	subs	r5, r5, r1
 810b878:	4629      	mov	r1, r5
 810b87a:	4630      	mov	r0, r6
 810b87c:	f7ff ffa6 	bl	810b7cc <sbrk_aligned>
 810b880:	3001      	adds	r0, #1
 810b882:	d03a      	beq.n	810b8fa <_malloc_r+0xea>
 810b884:	6823      	ldr	r3, [r4, #0]
 810b886:	442b      	add	r3, r5
 810b888:	6023      	str	r3, [r4, #0]
 810b88a:	f8d8 3000 	ldr.w	r3, [r8]
 810b88e:	685a      	ldr	r2, [r3, #4]
 810b890:	bb62      	cbnz	r2, 810b8ec <_malloc_r+0xdc>
 810b892:	f8c8 7000 	str.w	r7, [r8]
 810b896:	e00f      	b.n	810b8b8 <_malloc_r+0xa8>
 810b898:	6822      	ldr	r2, [r4, #0]
 810b89a:	1b52      	subs	r2, r2, r5
 810b89c:	d420      	bmi.n	810b8e0 <_malloc_r+0xd0>
 810b89e:	2a0b      	cmp	r2, #11
 810b8a0:	d917      	bls.n	810b8d2 <_malloc_r+0xc2>
 810b8a2:	1961      	adds	r1, r4, r5
 810b8a4:	42a3      	cmp	r3, r4
 810b8a6:	6025      	str	r5, [r4, #0]
 810b8a8:	bf18      	it	ne
 810b8aa:	6059      	strne	r1, [r3, #4]
 810b8ac:	6863      	ldr	r3, [r4, #4]
 810b8ae:	bf08      	it	eq
 810b8b0:	f8c8 1000 	streq.w	r1, [r8]
 810b8b4:	5162      	str	r2, [r4, r5]
 810b8b6:	604b      	str	r3, [r1, #4]
 810b8b8:	4630      	mov	r0, r6
 810b8ba:	f000 f82f 	bl	810b91c <__malloc_unlock>
 810b8be:	f104 000b 	add.w	r0, r4, #11
 810b8c2:	1d23      	adds	r3, r4, #4
 810b8c4:	f020 0007 	bic.w	r0, r0, #7
 810b8c8:	1ac2      	subs	r2, r0, r3
 810b8ca:	bf1c      	itt	ne
 810b8cc:	1a1b      	subne	r3, r3, r0
 810b8ce:	50a3      	strne	r3, [r4, r2]
 810b8d0:	e7af      	b.n	810b832 <_malloc_r+0x22>
 810b8d2:	6862      	ldr	r2, [r4, #4]
 810b8d4:	42a3      	cmp	r3, r4
 810b8d6:	bf0c      	ite	eq
 810b8d8:	f8c8 2000 	streq.w	r2, [r8]
 810b8dc:	605a      	strne	r2, [r3, #4]
 810b8de:	e7eb      	b.n	810b8b8 <_malloc_r+0xa8>
 810b8e0:	4623      	mov	r3, r4
 810b8e2:	6864      	ldr	r4, [r4, #4]
 810b8e4:	e7ae      	b.n	810b844 <_malloc_r+0x34>
 810b8e6:	463c      	mov	r4, r7
 810b8e8:	687f      	ldr	r7, [r7, #4]
 810b8ea:	e7b6      	b.n	810b85a <_malloc_r+0x4a>
 810b8ec:	461a      	mov	r2, r3
 810b8ee:	685b      	ldr	r3, [r3, #4]
 810b8f0:	42a3      	cmp	r3, r4
 810b8f2:	d1fb      	bne.n	810b8ec <_malloc_r+0xdc>
 810b8f4:	2300      	movs	r3, #0
 810b8f6:	6053      	str	r3, [r2, #4]
 810b8f8:	e7de      	b.n	810b8b8 <_malloc_r+0xa8>
 810b8fa:	230c      	movs	r3, #12
 810b8fc:	6033      	str	r3, [r6, #0]
 810b8fe:	4630      	mov	r0, r6
 810b900:	f000 f80c 	bl	810b91c <__malloc_unlock>
 810b904:	e794      	b.n	810b830 <_malloc_r+0x20>
 810b906:	6005      	str	r5, [r0, #0]
 810b908:	e7d6      	b.n	810b8b8 <_malloc_r+0xa8>
 810b90a:	bf00      	nop
 810b90c:	100005c0 	.word	0x100005c0

0810b910 <__malloc_lock>:
 810b910:	4801      	ldr	r0, [pc, #4]	@ (810b918 <__malloc_lock+0x8>)
 810b912:	f7ff b8a6 	b.w	810aa62 <__retarget_lock_acquire_recursive>
 810b916:	bf00      	nop
 810b918:	100005b8 	.word	0x100005b8

0810b91c <__malloc_unlock>:
 810b91c:	4801      	ldr	r0, [pc, #4]	@ (810b924 <__malloc_unlock+0x8>)
 810b91e:	f7ff b8a1 	b.w	810aa64 <__retarget_lock_release_recursive>
 810b922:	bf00      	nop
 810b924:	100005b8 	.word	0x100005b8

0810b928 <_Balloc>:
 810b928:	b570      	push	{r4, r5, r6, lr}
 810b92a:	69c6      	ldr	r6, [r0, #28]
 810b92c:	4604      	mov	r4, r0
 810b92e:	460d      	mov	r5, r1
 810b930:	b976      	cbnz	r6, 810b950 <_Balloc+0x28>
 810b932:	2010      	movs	r0, #16
 810b934:	f7ff ff42 	bl	810b7bc <malloc>
 810b938:	4602      	mov	r2, r0
 810b93a:	61e0      	str	r0, [r4, #28]
 810b93c:	b920      	cbnz	r0, 810b948 <_Balloc+0x20>
 810b93e:	4b18      	ldr	r3, [pc, #96]	@ (810b9a0 <_Balloc+0x78>)
 810b940:	4818      	ldr	r0, [pc, #96]	@ (810b9a4 <_Balloc+0x7c>)
 810b942:	216b      	movs	r1, #107	@ 0x6b
 810b944:	f001 ff34 	bl	810d7b0 <__assert_func>
 810b948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b94c:	6006      	str	r6, [r0, #0]
 810b94e:	60c6      	str	r6, [r0, #12]
 810b950:	69e6      	ldr	r6, [r4, #28]
 810b952:	68f3      	ldr	r3, [r6, #12]
 810b954:	b183      	cbz	r3, 810b978 <_Balloc+0x50>
 810b956:	69e3      	ldr	r3, [r4, #28]
 810b958:	68db      	ldr	r3, [r3, #12]
 810b95a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810b95e:	b9b8      	cbnz	r0, 810b990 <_Balloc+0x68>
 810b960:	2101      	movs	r1, #1
 810b962:	fa01 f605 	lsl.w	r6, r1, r5
 810b966:	1d72      	adds	r2, r6, #5
 810b968:	0092      	lsls	r2, r2, #2
 810b96a:	4620      	mov	r0, r4
 810b96c:	f001 ff3e 	bl	810d7ec <_calloc_r>
 810b970:	b160      	cbz	r0, 810b98c <_Balloc+0x64>
 810b972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810b976:	e00e      	b.n	810b996 <_Balloc+0x6e>
 810b978:	2221      	movs	r2, #33	@ 0x21
 810b97a:	2104      	movs	r1, #4
 810b97c:	4620      	mov	r0, r4
 810b97e:	f001 ff35 	bl	810d7ec <_calloc_r>
 810b982:	69e3      	ldr	r3, [r4, #28]
 810b984:	60f0      	str	r0, [r6, #12]
 810b986:	68db      	ldr	r3, [r3, #12]
 810b988:	2b00      	cmp	r3, #0
 810b98a:	d1e4      	bne.n	810b956 <_Balloc+0x2e>
 810b98c:	2000      	movs	r0, #0
 810b98e:	bd70      	pop	{r4, r5, r6, pc}
 810b990:	6802      	ldr	r2, [r0, #0]
 810b992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810b996:	2300      	movs	r3, #0
 810b998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b99c:	e7f7      	b.n	810b98e <_Balloc+0x66>
 810b99e:	bf00      	nop
 810b9a0:	0810e84a 	.word	0x0810e84a
 810b9a4:	0810e8ca 	.word	0x0810e8ca

0810b9a8 <_Bfree>:
 810b9a8:	b570      	push	{r4, r5, r6, lr}
 810b9aa:	69c6      	ldr	r6, [r0, #28]
 810b9ac:	4605      	mov	r5, r0
 810b9ae:	460c      	mov	r4, r1
 810b9b0:	b976      	cbnz	r6, 810b9d0 <_Bfree+0x28>
 810b9b2:	2010      	movs	r0, #16
 810b9b4:	f7ff ff02 	bl	810b7bc <malloc>
 810b9b8:	4602      	mov	r2, r0
 810b9ba:	61e8      	str	r0, [r5, #28]
 810b9bc:	b920      	cbnz	r0, 810b9c8 <_Bfree+0x20>
 810b9be:	4b09      	ldr	r3, [pc, #36]	@ (810b9e4 <_Bfree+0x3c>)
 810b9c0:	4809      	ldr	r0, [pc, #36]	@ (810b9e8 <_Bfree+0x40>)
 810b9c2:	218f      	movs	r1, #143	@ 0x8f
 810b9c4:	f001 fef4 	bl	810d7b0 <__assert_func>
 810b9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b9cc:	6006      	str	r6, [r0, #0]
 810b9ce:	60c6      	str	r6, [r0, #12]
 810b9d0:	b13c      	cbz	r4, 810b9e2 <_Bfree+0x3a>
 810b9d2:	69eb      	ldr	r3, [r5, #28]
 810b9d4:	6862      	ldr	r2, [r4, #4]
 810b9d6:	68db      	ldr	r3, [r3, #12]
 810b9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b9dc:	6021      	str	r1, [r4, #0]
 810b9de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810b9e2:	bd70      	pop	{r4, r5, r6, pc}
 810b9e4:	0810e84a 	.word	0x0810e84a
 810b9e8:	0810e8ca 	.word	0x0810e8ca

0810b9ec <__multadd>:
 810b9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b9f0:	690d      	ldr	r5, [r1, #16]
 810b9f2:	4607      	mov	r7, r0
 810b9f4:	460c      	mov	r4, r1
 810b9f6:	461e      	mov	r6, r3
 810b9f8:	f101 0c14 	add.w	ip, r1, #20
 810b9fc:	2000      	movs	r0, #0
 810b9fe:	f8dc 3000 	ldr.w	r3, [ip]
 810ba02:	b299      	uxth	r1, r3
 810ba04:	fb02 6101 	mla	r1, r2, r1, r6
 810ba08:	0c1e      	lsrs	r6, r3, #16
 810ba0a:	0c0b      	lsrs	r3, r1, #16
 810ba0c:	fb02 3306 	mla	r3, r2, r6, r3
 810ba10:	b289      	uxth	r1, r1
 810ba12:	3001      	adds	r0, #1
 810ba14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810ba18:	4285      	cmp	r5, r0
 810ba1a:	f84c 1b04 	str.w	r1, [ip], #4
 810ba1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810ba22:	dcec      	bgt.n	810b9fe <__multadd+0x12>
 810ba24:	b30e      	cbz	r6, 810ba6a <__multadd+0x7e>
 810ba26:	68a3      	ldr	r3, [r4, #8]
 810ba28:	42ab      	cmp	r3, r5
 810ba2a:	dc19      	bgt.n	810ba60 <__multadd+0x74>
 810ba2c:	6861      	ldr	r1, [r4, #4]
 810ba2e:	4638      	mov	r0, r7
 810ba30:	3101      	adds	r1, #1
 810ba32:	f7ff ff79 	bl	810b928 <_Balloc>
 810ba36:	4680      	mov	r8, r0
 810ba38:	b928      	cbnz	r0, 810ba46 <__multadd+0x5a>
 810ba3a:	4602      	mov	r2, r0
 810ba3c:	4b0c      	ldr	r3, [pc, #48]	@ (810ba70 <__multadd+0x84>)
 810ba3e:	480d      	ldr	r0, [pc, #52]	@ (810ba74 <__multadd+0x88>)
 810ba40:	21ba      	movs	r1, #186	@ 0xba
 810ba42:	f001 feb5 	bl	810d7b0 <__assert_func>
 810ba46:	6922      	ldr	r2, [r4, #16]
 810ba48:	3202      	adds	r2, #2
 810ba4a:	f104 010c 	add.w	r1, r4, #12
 810ba4e:	0092      	lsls	r2, r2, #2
 810ba50:	300c      	adds	r0, #12
 810ba52:	f7ff f808 	bl	810aa66 <memcpy>
 810ba56:	4621      	mov	r1, r4
 810ba58:	4638      	mov	r0, r7
 810ba5a:	f7ff ffa5 	bl	810b9a8 <_Bfree>
 810ba5e:	4644      	mov	r4, r8
 810ba60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810ba64:	3501      	adds	r5, #1
 810ba66:	615e      	str	r6, [r3, #20]
 810ba68:	6125      	str	r5, [r4, #16]
 810ba6a:	4620      	mov	r0, r4
 810ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ba70:	0810e8b9 	.word	0x0810e8b9
 810ba74:	0810e8ca 	.word	0x0810e8ca

0810ba78 <__s2b>:
 810ba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ba7c:	460c      	mov	r4, r1
 810ba7e:	4615      	mov	r5, r2
 810ba80:	461f      	mov	r7, r3
 810ba82:	2209      	movs	r2, #9
 810ba84:	3308      	adds	r3, #8
 810ba86:	4606      	mov	r6, r0
 810ba88:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba8c:	2100      	movs	r1, #0
 810ba8e:	2201      	movs	r2, #1
 810ba90:	429a      	cmp	r2, r3
 810ba92:	db09      	blt.n	810baa8 <__s2b+0x30>
 810ba94:	4630      	mov	r0, r6
 810ba96:	f7ff ff47 	bl	810b928 <_Balloc>
 810ba9a:	b940      	cbnz	r0, 810baae <__s2b+0x36>
 810ba9c:	4602      	mov	r2, r0
 810ba9e:	4b19      	ldr	r3, [pc, #100]	@ (810bb04 <__s2b+0x8c>)
 810baa0:	4819      	ldr	r0, [pc, #100]	@ (810bb08 <__s2b+0x90>)
 810baa2:	21d3      	movs	r1, #211	@ 0xd3
 810baa4:	f001 fe84 	bl	810d7b0 <__assert_func>
 810baa8:	0052      	lsls	r2, r2, #1
 810baaa:	3101      	adds	r1, #1
 810baac:	e7f0      	b.n	810ba90 <__s2b+0x18>
 810baae:	9b08      	ldr	r3, [sp, #32]
 810bab0:	6143      	str	r3, [r0, #20]
 810bab2:	2d09      	cmp	r5, #9
 810bab4:	f04f 0301 	mov.w	r3, #1
 810bab8:	6103      	str	r3, [r0, #16]
 810baba:	dd16      	ble.n	810baea <__s2b+0x72>
 810babc:	f104 0909 	add.w	r9, r4, #9
 810bac0:	46c8      	mov	r8, r9
 810bac2:	442c      	add	r4, r5
 810bac4:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bac8:	4601      	mov	r1, r0
 810baca:	3b30      	subs	r3, #48	@ 0x30
 810bacc:	220a      	movs	r2, #10
 810bace:	4630      	mov	r0, r6
 810bad0:	f7ff ff8c 	bl	810b9ec <__multadd>
 810bad4:	45a0      	cmp	r8, r4
 810bad6:	d1f5      	bne.n	810bac4 <__s2b+0x4c>
 810bad8:	f1a5 0408 	sub.w	r4, r5, #8
 810badc:	444c      	add	r4, r9
 810bade:	1b2d      	subs	r5, r5, r4
 810bae0:	1963      	adds	r3, r4, r5
 810bae2:	42bb      	cmp	r3, r7
 810bae4:	db04      	blt.n	810baf0 <__s2b+0x78>
 810bae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810baea:	340a      	adds	r4, #10
 810baec:	2509      	movs	r5, #9
 810baee:	e7f6      	b.n	810bade <__s2b+0x66>
 810baf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 810baf4:	4601      	mov	r1, r0
 810baf6:	3b30      	subs	r3, #48	@ 0x30
 810baf8:	220a      	movs	r2, #10
 810bafa:	4630      	mov	r0, r6
 810bafc:	f7ff ff76 	bl	810b9ec <__multadd>
 810bb00:	e7ee      	b.n	810bae0 <__s2b+0x68>
 810bb02:	bf00      	nop
 810bb04:	0810e8b9 	.word	0x0810e8b9
 810bb08:	0810e8ca 	.word	0x0810e8ca

0810bb0c <__hi0bits>:
 810bb0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810bb10:	4603      	mov	r3, r0
 810bb12:	bf36      	itet	cc
 810bb14:	0403      	lslcc	r3, r0, #16
 810bb16:	2000      	movcs	r0, #0
 810bb18:	2010      	movcc	r0, #16
 810bb1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810bb1e:	bf3c      	itt	cc
 810bb20:	021b      	lslcc	r3, r3, #8
 810bb22:	3008      	addcc	r0, #8
 810bb24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bb28:	bf3c      	itt	cc
 810bb2a:	011b      	lslcc	r3, r3, #4
 810bb2c:	3004      	addcc	r0, #4
 810bb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bb32:	bf3c      	itt	cc
 810bb34:	009b      	lslcc	r3, r3, #2
 810bb36:	3002      	addcc	r0, #2
 810bb38:	2b00      	cmp	r3, #0
 810bb3a:	db05      	blt.n	810bb48 <__hi0bits+0x3c>
 810bb3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810bb40:	f100 0001 	add.w	r0, r0, #1
 810bb44:	bf08      	it	eq
 810bb46:	2020      	moveq	r0, #32
 810bb48:	4770      	bx	lr

0810bb4a <__lo0bits>:
 810bb4a:	6803      	ldr	r3, [r0, #0]
 810bb4c:	4602      	mov	r2, r0
 810bb4e:	f013 0007 	ands.w	r0, r3, #7
 810bb52:	d00b      	beq.n	810bb6c <__lo0bits+0x22>
 810bb54:	07d9      	lsls	r1, r3, #31
 810bb56:	d421      	bmi.n	810bb9c <__lo0bits+0x52>
 810bb58:	0798      	lsls	r0, r3, #30
 810bb5a:	bf49      	itett	mi
 810bb5c:	085b      	lsrmi	r3, r3, #1
 810bb5e:	089b      	lsrpl	r3, r3, #2
 810bb60:	2001      	movmi	r0, #1
 810bb62:	6013      	strmi	r3, [r2, #0]
 810bb64:	bf5c      	itt	pl
 810bb66:	6013      	strpl	r3, [r2, #0]
 810bb68:	2002      	movpl	r0, #2
 810bb6a:	4770      	bx	lr
 810bb6c:	b299      	uxth	r1, r3
 810bb6e:	b909      	cbnz	r1, 810bb74 <__lo0bits+0x2a>
 810bb70:	0c1b      	lsrs	r3, r3, #16
 810bb72:	2010      	movs	r0, #16
 810bb74:	b2d9      	uxtb	r1, r3
 810bb76:	b909      	cbnz	r1, 810bb7c <__lo0bits+0x32>
 810bb78:	3008      	adds	r0, #8
 810bb7a:	0a1b      	lsrs	r3, r3, #8
 810bb7c:	0719      	lsls	r1, r3, #28
 810bb7e:	bf04      	itt	eq
 810bb80:	091b      	lsreq	r3, r3, #4
 810bb82:	3004      	addeq	r0, #4
 810bb84:	0799      	lsls	r1, r3, #30
 810bb86:	bf04      	itt	eq
 810bb88:	089b      	lsreq	r3, r3, #2
 810bb8a:	3002      	addeq	r0, #2
 810bb8c:	07d9      	lsls	r1, r3, #31
 810bb8e:	d403      	bmi.n	810bb98 <__lo0bits+0x4e>
 810bb90:	085b      	lsrs	r3, r3, #1
 810bb92:	f100 0001 	add.w	r0, r0, #1
 810bb96:	d003      	beq.n	810bba0 <__lo0bits+0x56>
 810bb98:	6013      	str	r3, [r2, #0]
 810bb9a:	4770      	bx	lr
 810bb9c:	2000      	movs	r0, #0
 810bb9e:	4770      	bx	lr
 810bba0:	2020      	movs	r0, #32
 810bba2:	4770      	bx	lr

0810bba4 <__i2b>:
 810bba4:	b510      	push	{r4, lr}
 810bba6:	460c      	mov	r4, r1
 810bba8:	2101      	movs	r1, #1
 810bbaa:	f7ff febd 	bl	810b928 <_Balloc>
 810bbae:	4602      	mov	r2, r0
 810bbb0:	b928      	cbnz	r0, 810bbbe <__i2b+0x1a>
 810bbb2:	4b05      	ldr	r3, [pc, #20]	@ (810bbc8 <__i2b+0x24>)
 810bbb4:	4805      	ldr	r0, [pc, #20]	@ (810bbcc <__i2b+0x28>)
 810bbb6:	f240 1145 	movw	r1, #325	@ 0x145
 810bbba:	f001 fdf9 	bl	810d7b0 <__assert_func>
 810bbbe:	2301      	movs	r3, #1
 810bbc0:	6144      	str	r4, [r0, #20]
 810bbc2:	6103      	str	r3, [r0, #16]
 810bbc4:	bd10      	pop	{r4, pc}
 810bbc6:	bf00      	nop
 810bbc8:	0810e8b9 	.word	0x0810e8b9
 810bbcc:	0810e8ca 	.word	0x0810e8ca

0810bbd0 <__multiply>:
 810bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bbd4:	4614      	mov	r4, r2
 810bbd6:	690a      	ldr	r2, [r1, #16]
 810bbd8:	6923      	ldr	r3, [r4, #16]
 810bbda:	429a      	cmp	r2, r3
 810bbdc:	bfa8      	it	ge
 810bbde:	4623      	movge	r3, r4
 810bbe0:	460f      	mov	r7, r1
 810bbe2:	bfa4      	itt	ge
 810bbe4:	460c      	movge	r4, r1
 810bbe6:	461f      	movge	r7, r3
 810bbe8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810bbec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810bbf0:	68a3      	ldr	r3, [r4, #8]
 810bbf2:	6861      	ldr	r1, [r4, #4]
 810bbf4:	eb0a 0609 	add.w	r6, sl, r9
 810bbf8:	42b3      	cmp	r3, r6
 810bbfa:	b085      	sub	sp, #20
 810bbfc:	bfb8      	it	lt
 810bbfe:	3101      	addlt	r1, #1
 810bc00:	f7ff fe92 	bl	810b928 <_Balloc>
 810bc04:	b930      	cbnz	r0, 810bc14 <__multiply+0x44>
 810bc06:	4602      	mov	r2, r0
 810bc08:	4b44      	ldr	r3, [pc, #272]	@ (810bd1c <__multiply+0x14c>)
 810bc0a:	4845      	ldr	r0, [pc, #276]	@ (810bd20 <__multiply+0x150>)
 810bc0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810bc10:	f001 fdce 	bl	810d7b0 <__assert_func>
 810bc14:	f100 0514 	add.w	r5, r0, #20
 810bc18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bc1c:	462b      	mov	r3, r5
 810bc1e:	2200      	movs	r2, #0
 810bc20:	4543      	cmp	r3, r8
 810bc22:	d321      	bcc.n	810bc68 <__multiply+0x98>
 810bc24:	f107 0114 	add.w	r1, r7, #20
 810bc28:	f104 0214 	add.w	r2, r4, #20
 810bc2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810bc30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810bc34:	9302      	str	r3, [sp, #8]
 810bc36:	1b13      	subs	r3, r2, r4
 810bc38:	3b15      	subs	r3, #21
 810bc3a:	f023 0303 	bic.w	r3, r3, #3
 810bc3e:	3304      	adds	r3, #4
 810bc40:	f104 0715 	add.w	r7, r4, #21
 810bc44:	42ba      	cmp	r2, r7
 810bc46:	bf38      	it	cc
 810bc48:	2304      	movcc	r3, #4
 810bc4a:	9301      	str	r3, [sp, #4]
 810bc4c:	9b02      	ldr	r3, [sp, #8]
 810bc4e:	9103      	str	r1, [sp, #12]
 810bc50:	428b      	cmp	r3, r1
 810bc52:	d80c      	bhi.n	810bc6e <__multiply+0x9e>
 810bc54:	2e00      	cmp	r6, #0
 810bc56:	dd03      	ble.n	810bc60 <__multiply+0x90>
 810bc58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bc5c:	2b00      	cmp	r3, #0
 810bc5e:	d05b      	beq.n	810bd18 <__multiply+0x148>
 810bc60:	6106      	str	r6, [r0, #16]
 810bc62:	b005      	add	sp, #20
 810bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc68:	f843 2b04 	str.w	r2, [r3], #4
 810bc6c:	e7d8      	b.n	810bc20 <__multiply+0x50>
 810bc6e:	f8b1 a000 	ldrh.w	sl, [r1]
 810bc72:	f1ba 0f00 	cmp.w	sl, #0
 810bc76:	d024      	beq.n	810bcc2 <__multiply+0xf2>
 810bc78:	f104 0e14 	add.w	lr, r4, #20
 810bc7c:	46a9      	mov	r9, r5
 810bc7e:	f04f 0c00 	mov.w	ip, #0
 810bc82:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bc86:	f8d9 3000 	ldr.w	r3, [r9]
 810bc8a:	fa1f fb87 	uxth.w	fp, r7
 810bc8e:	b29b      	uxth	r3, r3
 810bc90:	fb0a 330b 	mla	r3, sl, fp, r3
 810bc94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810bc98:	f8d9 7000 	ldr.w	r7, [r9]
 810bc9c:	4463      	add	r3, ip
 810bc9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810bca2:	fb0a c70b 	mla	r7, sl, fp, ip
 810bca6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810bcaa:	b29b      	uxth	r3, r3
 810bcac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bcb0:	4572      	cmp	r2, lr
 810bcb2:	f849 3b04 	str.w	r3, [r9], #4
 810bcb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810bcba:	d8e2      	bhi.n	810bc82 <__multiply+0xb2>
 810bcbc:	9b01      	ldr	r3, [sp, #4]
 810bcbe:	f845 c003 	str.w	ip, [r5, r3]
 810bcc2:	9b03      	ldr	r3, [sp, #12]
 810bcc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810bcc8:	3104      	adds	r1, #4
 810bcca:	f1b9 0f00 	cmp.w	r9, #0
 810bcce:	d021      	beq.n	810bd14 <__multiply+0x144>
 810bcd0:	682b      	ldr	r3, [r5, #0]
 810bcd2:	f104 0c14 	add.w	ip, r4, #20
 810bcd6:	46ae      	mov	lr, r5
 810bcd8:	f04f 0a00 	mov.w	sl, #0
 810bcdc:	f8bc b000 	ldrh.w	fp, [ip]
 810bce0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810bce4:	fb09 770b 	mla	r7, r9, fp, r7
 810bce8:	4457      	add	r7, sl
 810bcea:	b29b      	uxth	r3, r3
 810bcec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bcf0:	f84e 3b04 	str.w	r3, [lr], #4
 810bcf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 810bcf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bcfc:	f8be 3000 	ldrh.w	r3, [lr]
 810bd00:	fb09 330a 	mla	r3, r9, sl, r3
 810bd04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810bd08:	4562      	cmp	r2, ip
 810bd0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bd0e:	d8e5      	bhi.n	810bcdc <__multiply+0x10c>
 810bd10:	9f01      	ldr	r7, [sp, #4]
 810bd12:	51eb      	str	r3, [r5, r7]
 810bd14:	3504      	adds	r5, #4
 810bd16:	e799      	b.n	810bc4c <__multiply+0x7c>
 810bd18:	3e01      	subs	r6, #1
 810bd1a:	e79b      	b.n	810bc54 <__multiply+0x84>
 810bd1c:	0810e8b9 	.word	0x0810e8b9
 810bd20:	0810e8ca 	.word	0x0810e8ca

0810bd24 <__pow5mult>:
 810bd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bd28:	4615      	mov	r5, r2
 810bd2a:	f012 0203 	ands.w	r2, r2, #3
 810bd2e:	4607      	mov	r7, r0
 810bd30:	460e      	mov	r6, r1
 810bd32:	d007      	beq.n	810bd44 <__pow5mult+0x20>
 810bd34:	4c25      	ldr	r4, [pc, #148]	@ (810bdcc <__pow5mult+0xa8>)
 810bd36:	3a01      	subs	r2, #1
 810bd38:	2300      	movs	r3, #0
 810bd3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bd3e:	f7ff fe55 	bl	810b9ec <__multadd>
 810bd42:	4606      	mov	r6, r0
 810bd44:	10ad      	asrs	r5, r5, #2
 810bd46:	d03d      	beq.n	810bdc4 <__pow5mult+0xa0>
 810bd48:	69fc      	ldr	r4, [r7, #28]
 810bd4a:	b97c      	cbnz	r4, 810bd6c <__pow5mult+0x48>
 810bd4c:	2010      	movs	r0, #16
 810bd4e:	f7ff fd35 	bl	810b7bc <malloc>
 810bd52:	4602      	mov	r2, r0
 810bd54:	61f8      	str	r0, [r7, #28]
 810bd56:	b928      	cbnz	r0, 810bd64 <__pow5mult+0x40>
 810bd58:	4b1d      	ldr	r3, [pc, #116]	@ (810bdd0 <__pow5mult+0xac>)
 810bd5a:	481e      	ldr	r0, [pc, #120]	@ (810bdd4 <__pow5mult+0xb0>)
 810bd5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810bd60:	f001 fd26 	bl	810d7b0 <__assert_func>
 810bd64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bd68:	6004      	str	r4, [r0, #0]
 810bd6a:	60c4      	str	r4, [r0, #12]
 810bd6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810bd70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bd74:	b94c      	cbnz	r4, 810bd8a <__pow5mult+0x66>
 810bd76:	f240 2171 	movw	r1, #625	@ 0x271
 810bd7a:	4638      	mov	r0, r7
 810bd7c:	f7ff ff12 	bl	810bba4 <__i2b>
 810bd80:	2300      	movs	r3, #0
 810bd82:	f8c8 0008 	str.w	r0, [r8, #8]
 810bd86:	4604      	mov	r4, r0
 810bd88:	6003      	str	r3, [r0, #0]
 810bd8a:	f04f 0900 	mov.w	r9, #0
 810bd8e:	07eb      	lsls	r3, r5, #31
 810bd90:	d50a      	bpl.n	810bda8 <__pow5mult+0x84>
 810bd92:	4631      	mov	r1, r6
 810bd94:	4622      	mov	r2, r4
 810bd96:	4638      	mov	r0, r7
 810bd98:	f7ff ff1a 	bl	810bbd0 <__multiply>
 810bd9c:	4631      	mov	r1, r6
 810bd9e:	4680      	mov	r8, r0
 810bda0:	4638      	mov	r0, r7
 810bda2:	f7ff fe01 	bl	810b9a8 <_Bfree>
 810bda6:	4646      	mov	r6, r8
 810bda8:	106d      	asrs	r5, r5, #1
 810bdaa:	d00b      	beq.n	810bdc4 <__pow5mult+0xa0>
 810bdac:	6820      	ldr	r0, [r4, #0]
 810bdae:	b938      	cbnz	r0, 810bdc0 <__pow5mult+0x9c>
 810bdb0:	4622      	mov	r2, r4
 810bdb2:	4621      	mov	r1, r4
 810bdb4:	4638      	mov	r0, r7
 810bdb6:	f7ff ff0b 	bl	810bbd0 <__multiply>
 810bdba:	6020      	str	r0, [r4, #0]
 810bdbc:	f8c0 9000 	str.w	r9, [r0]
 810bdc0:	4604      	mov	r4, r0
 810bdc2:	e7e4      	b.n	810bd8e <__pow5mult+0x6a>
 810bdc4:	4630      	mov	r0, r6
 810bdc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bdca:	bf00      	nop
 810bdcc:	0810e924 	.word	0x0810e924
 810bdd0:	0810e84a 	.word	0x0810e84a
 810bdd4:	0810e8ca 	.word	0x0810e8ca

0810bdd8 <__lshift>:
 810bdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bddc:	460c      	mov	r4, r1
 810bdde:	6849      	ldr	r1, [r1, #4]
 810bde0:	6923      	ldr	r3, [r4, #16]
 810bde2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810bde6:	68a3      	ldr	r3, [r4, #8]
 810bde8:	4607      	mov	r7, r0
 810bdea:	4691      	mov	r9, r2
 810bdec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bdf0:	f108 0601 	add.w	r6, r8, #1
 810bdf4:	42b3      	cmp	r3, r6
 810bdf6:	db0b      	blt.n	810be10 <__lshift+0x38>
 810bdf8:	4638      	mov	r0, r7
 810bdfa:	f7ff fd95 	bl	810b928 <_Balloc>
 810bdfe:	4605      	mov	r5, r0
 810be00:	b948      	cbnz	r0, 810be16 <__lshift+0x3e>
 810be02:	4602      	mov	r2, r0
 810be04:	4b28      	ldr	r3, [pc, #160]	@ (810bea8 <__lshift+0xd0>)
 810be06:	4829      	ldr	r0, [pc, #164]	@ (810beac <__lshift+0xd4>)
 810be08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810be0c:	f001 fcd0 	bl	810d7b0 <__assert_func>
 810be10:	3101      	adds	r1, #1
 810be12:	005b      	lsls	r3, r3, #1
 810be14:	e7ee      	b.n	810bdf4 <__lshift+0x1c>
 810be16:	2300      	movs	r3, #0
 810be18:	f100 0114 	add.w	r1, r0, #20
 810be1c:	f100 0210 	add.w	r2, r0, #16
 810be20:	4618      	mov	r0, r3
 810be22:	4553      	cmp	r3, sl
 810be24:	db33      	blt.n	810be8e <__lshift+0xb6>
 810be26:	6920      	ldr	r0, [r4, #16]
 810be28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810be2c:	f104 0314 	add.w	r3, r4, #20
 810be30:	f019 091f 	ands.w	r9, r9, #31
 810be34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810be38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810be3c:	d02b      	beq.n	810be96 <__lshift+0xbe>
 810be3e:	f1c9 0e20 	rsb	lr, r9, #32
 810be42:	468a      	mov	sl, r1
 810be44:	2200      	movs	r2, #0
 810be46:	6818      	ldr	r0, [r3, #0]
 810be48:	fa00 f009 	lsl.w	r0, r0, r9
 810be4c:	4310      	orrs	r0, r2
 810be4e:	f84a 0b04 	str.w	r0, [sl], #4
 810be52:	f853 2b04 	ldr.w	r2, [r3], #4
 810be56:	459c      	cmp	ip, r3
 810be58:	fa22 f20e 	lsr.w	r2, r2, lr
 810be5c:	d8f3      	bhi.n	810be46 <__lshift+0x6e>
 810be5e:	ebac 0304 	sub.w	r3, ip, r4
 810be62:	3b15      	subs	r3, #21
 810be64:	f023 0303 	bic.w	r3, r3, #3
 810be68:	3304      	adds	r3, #4
 810be6a:	f104 0015 	add.w	r0, r4, #21
 810be6e:	4584      	cmp	ip, r0
 810be70:	bf38      	it	cc
 810be72:	2304      	movcc	r3, #4
 810be74:	50ca      	str	r2, [r1, r3]
 810be76:	b10a      	cbz	r2, 810be7c <__lshift+0xa4>
 810be78:	f108 0602 	add.w	r6, r8, #2
 810be7c:	3e01      	subs	r6, #1
 810be7e:	4638      	mov	r0, r7
 810be80:	612e      	str	r6, [r5, #16]
 810be82:	4621      	mov	r1, r4
 810be84:	f7ff fd90 	bl	810b9a8 <_Bfree>
 810be88:	4628      	mov	r0, r5
 810be8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810be8e:	f842 0f04 	str.w	r0, [r2, #4]!
 810be92:	3301      	adds	r3, #1
 810be94:	e7c5      	b.n	810be22 <__lshift+0x4a>
 810be96:	3904      	subs	r1, #4
 810be98:	f853 2b04 	ldr.w	r2, [r3], #4
 810be9c:	f841 2f04 	str.w	r2, [r1, #4]!
 810bea0:	459c      	cmp	ip, r3
 810bea2:	d8f9      	bhi.n	810be98 <__lshift+0xc0>
 810bea4:	e7ea      	b.n	810be7c <__lshift+0xa4>
 810bea6:	bf00      	nop
 810bea8:	0810e8b9 	.word	0x0810e8b9
 810beac:	0810e8ca 	.word	0x0810e8ca

0810beb0 <__mcmp>:
 810beb0:	690a      	ldr	r2, [r1, #16]
 810beb2:	4603      	mov	r3, r0
 810beb4:	6900      	ldr	r0, [r0, #16]
 810beb6:	1a80      	subs	r0, r0, r2
 810beb8:	b530      	push	{r4, r5, lr}
 810beba:	d10e      	bne.n	810beda <__mcmp+0x2a>
 810bebc:	3314      	adds	r3, #20
 810bebe:	3114      	adds	r1, #20
 810bec0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810bec4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810bec8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810becc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810bed0:	4295      	cmp	r5, r2
 810bed2:	d003      	beq.n	810bedc <__mcmp+0x2c>
 810bed4:	d205      	bcs.n	810bee2 <__mcmp+0x32>
 810bed6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810beda:	bd30      	pop	{r4, r5, pc}
 810bedc:	42a3      	cmp	r3, r4
 810bede:	d3f3      	bcc.n	810bec8 <__mcmp+0x18>
 810bee0:	e7fb      	b.n	810beda <__mcmp+0x2a>
 810bee2:	2001      	movs	r0, #1
 810bee4:	e7f9      	b.n	810beda <__mcmp+0x2a>
	...

0810bee8 <__mdiff>:
 810bee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810beec:	4689      	mov	r9, r1
 810beee:	4606      	mov	r6, r0
 810bef0:	4611      	mov	r1, r2
 810bef2:	4648      	mov	r0, r9
 810bef4:	4614      	mov	r4, r2
 810bef6:	f7ff ffdb 	bl	810beb0 <__mcmp>
 810befa:	1e05      	subs	r5, r0, #0
 810befc:	d112      	bne.n	810bf24 <__mdiff+0x3c>
 810befe:	4629      	mov	r1, r5
 810bf00:	4630      	mov	r0, r6
 810bf02:	f7ff fd11 	bl	810b928 <_Balloc>
 810bf06:	4602      	mov	r2, r0
 810bf08:	b928      	cbnz	r0, 810bf16 <__mdiff+0x2e>
 810bf0a:	4b3f      	ldr	r3, [pc, #252]	@ (810c008 <__mdiff+0x120>)
 810bf0c:	f240 2137 	movw	r1, #567	@ 0x237
 810bf10:	483e      	ldr	r0, [pc, #248]	@ (810c00c <__mdiff+0x124>)
 810bf12:	f001 fc4d 	bl	810d7b0 <__assert_func>
 810bf16:	2301      	movs	r3, #1
 810bf18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810bf1c:	4610      	mov	r0, r2
 810bf1e:	b003      	add	sp, #12
 810bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bf24:	bfbc      	itt	lt
 810bf26:	464b      	movlt	r3, r9
 810bf28:	46a1      	movlt	r9, r4
 810bf2a:	4630      	mov	r0, r6
 810bf2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810bf30:	bfba      	itte	lt
 810bf32:	461c      	movlt	r4, r3
 810bf34:	2501      	movlt	r5, #1
 810bf36:	2500      	movge	r5, #0
 810bf38:	f7ff fcf6 	bl	810b928 <_Balloc>
 810bf3c:	4602      	mov	r2, r0
 810bf3e:	b918      	cbnz	r0, 810bf48 <__mdiff+0x60>
 810bf40:	4b31      	ldr	r3, [pc, #196]	@ (810c008 <__mdiff+0x120>)
 810bf42:	f240 2145 	movw	r1, #581	@ 0x245
 810bf46:	e7e3      	b.n	810bf10 <__mdiff+0x28>
 810bf48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810bf4c:	6926      	ldr	r6, [r4, #16]
 810bf4e:	60c5      	str	r5, [r0, #12]
 810bf50:	f109 0310 	add.w	r3, r9, #16
 810bf54:	f109 0514 	add.w	r5, r9, #20
 810bf58:	f104 0e14 	add.w	lr, r4, #20
 810bf5c:	f100 0b14 	add.w	fp, r0, #20
 810bf60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810bf64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810bf68:	9301      	str	r3, [sp, #4]
 810bf6a:	46d9      	mov	r9, fp
 810bf6c:	f04f 0c00 	mov.w	ip, #0
 810bf70:	9b01      	ldr	r3, [sp, #4]
 810bf72:	f85e 0b04 	ldr.w	r0, [lr], #4
 810bf76:	f853 af04 	ldr.w	sl, [r3, #4]!
 810bf7a:	9301      	str	r3, [sp, #4]
 810bf7c:	fa1f f38a 	uxth.w	r3, sl
 810bf80:	4619      	mov	r1, r3
 810bf82:	b283      	uxth	r3, r0
 810bf84:	1acb      	subs	r3, r1, r3
 810bf86:	0c00      	lsrs	r0, r0, #16
 810bf88:	4463      	add	r3, ip
 810bf8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810bf8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810bf92:	b29b      	uxth	r3, r3
 810bf94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810bf98:	4576      	cmp	r6, lr
 810bf9a:	f849 3b04 	str.w	r3, [r9], #4
 810bf9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810bfa2:	d8e5      	bhi.n	810bf70 <__mdiff+0x88>
 810bfa4:	1b33      	subs	r3, r6, r4
 810bfa6:	3b15      	subs	r3, #21
 810bfa8:	f023 0303 	bic.w	r3, r3, #3
 810bfac:	3415      	adds	r4, #21
 810bfae:	3304      	adds	r3, #4
 810bfb0:	42a6      	cmp	r6, r4
 810bfb2:	bf38      	it	cc
 810bfb4:	2304      	movcc	r3, #4
 810bfb6:	441d      	add	r5, r3
 810bfb8:	445b      	add	r3, fp
 810bfba:	461e      	mov	r6, r3
 810bfbc:	462c      	mov	r4, r5
 810bfbe:	4544      	cmp	r4, r8
 810bfc0:	d30e      	bcc.n	810bfe0 <__mdiff+0xf8>
 810bfc2:	f108 0103 	add.w	r1, r8, #3
 810bfc6:	1b49      	subs	r1, r1, r5
 810bfc8:	f021 0103 	bic.w	r1, r1, #3
 810bfcc:	3d03      	subs	r5, #3
 810bfce:	45a8      	cmp	r8, r5
 810bfd0:	bf38      	it	cc
 810bfd2:	2100      	movcc	r1, #0
 810bfd4:	440b      	add	r3, r1
 810bfd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810bfda:	b191      	cbz	r1, 810c002 <__mdiff+0x11a>
 810bfdc:	6117      	str	r7, [r2, #16]
 810bfde:	e79d      	b.n	810bf1c <__mdiff+0x34>
 810bfe0:	f854 1b04 	ldr.w	r1, [r4], #4
 810bfe4:	46e6      	mov	lr, ip
 810bfe6:	0c08      	lsrs	r0, r1, #16
 810bfe8:	fa1c fc81 	uxtah	ip, ip, r1
 810bfec:	4471      	add	r1, lr
 810bfee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810bff2:	b289      	uxth	r1, r1
 810bff4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810bff8:	f846 1b04 	str.w	r1, [r6], #4
 810bffc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810c000:	e7dd      	b.n	810bfbe <__mdiff+0xd6>
 810c002:	3f01      	subs	r7, #1
 810c004:	e7e7      	b.n	810bfd6 <__mdiff+0xee>
 810c006:	bf00      	nop
 810c008:	0810e8b9 	.word	0x0810e8b9
 810c00c:	0810e8ca 	.word	0x0810e8ca

0810c010 <__ulp>:
 810c010:	b082      	sub	sp, #8
 810c012:	ed8d 0b00 	vstr	d0, [sp]
 810c016:	9a01      	ldr	r2, [sp, #4]
 810c018:	4b0f      	ldr	r3, [pc, #60]	@ (810c058 <__ulp+0x48>)
 810c01a:	4013      	ands	r3, r2
 810c01c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810c020:	2b00      	cmp	r3, #0
 810c022:	dc08      	bgt.n	810c036 <__ulp+0x26>
 810c024:	425b      	negs	r3, r3
 810c026:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810c02a:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c02e:	da04      	bge.n	810c03a <__ulp+0x2a>
 810c030:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810c034:	4113      	asrs	r3, r2
 810c036:	2200      	movs	r2, #0
 810c038:	e008      	b.n	810c04c <__ulp+0x3c>
 810c03a:	f1a2 0314 	sub.w	r3, r2, #20
 810c03e:	2b1e      	cmp	r3, #30
 810c040:	bfda      	itte	le
 810c042:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810c046:	40da      	lsrle	r2, r3
 810c048:	2201      	movgt	r2, #1
 810c04a:	2300      	movs	r3, #0
 810c04c:	4619      	mov	r1, r3
 810c04e:	4610      	mov	r0, r2
 810c050:	ec41 0b10 	vmov	d0, r0, r1
 810c054:	b002      	add	sp, #8
 810c056:	4770      	bx	lr
 810c058:	7ff00000 	.word	0x7ff00000

0810c05c <__b2d>:
 810c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c060:	6906      	ldr	r6, [r0, #16]
 810c062:	f100 0814 	add.w	r8, r0, #20
 810c066:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810c06a:	1f37      	subs	r7, r6, #4
 810c06c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c070:	4610      	mov	r0, r2
 810c072:	f7ff fd4b 	bl	810bb0c <__hi0bits>
 810c076:	f1c0 0320 	rsb	r3, r0, #32
 810c07a:	280a      	cmp	r0, #10
 810c07c:	600b      	str	r3, [r1, #0]
 810c07e:	491b      	ldr	r1, [pc, #108]	@ (810c0ec <__b2d+0x90>)
 810c080:	dc15      	bgt.n	810c0ae <__b2d+0x52>
 810c082:	f1c0 0c0b 	rsb	ip, r0, #11
 810c086:	fa22 f30c 	lsr.w	r3, r2, ip
 810c08a:	45b8      	cmp	r8, r7
 810c08c:	ea43 0501 	orr.w	r5, r3, r1
 810c090:	bf34      	ite	cc
 810c092:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c096:	2300      	movcs	r3, #0
 810c098:	3015      	adds	r0, #21
 810c09a:	fa02 f000 	lsl.w	r0, r2, r0
 810c09e:	fa23 f30c 	lsr.w	r3, r3, ip
 810c0a2:	4303      	orrs	r3, r0
 810c0a4:	461c      	mov	r4, r3
 810c0a6:	ec45 4b10 	vmov	d0, r4, r5
 810c0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c0ae:	45b8      	cmp	r8, r7
 810c0b0:	bf3a      	itte	cc
 810c0b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c0b6:	f1a6 0708 	subcc.w	r7, r6, #8
 810c0ba:	2300      	movcs	r3, #0
 810c0bc:	380b      	subs	r0, #11
 810c0be:	d012      	beq.n	810c0e6 <__b2d+0x8a>
 810c0c0:	f1c0 0120 	rsb	r1, r0, #32
 810c0c4:	fa23 f401 	lsr.w	r4, r3, r1
 810c0c8:	4082      	lsls	r2, r0
 810c0ca:	4322      	orrs	r2, r4
 810c0cc:	4547      	cmp	r7, r8
 810c0ce:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810c0d2:	bf8c      	ite	hi
 810c0d4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c0d8:	2200      	movls	r2, #0
 810c0da:	4083      	lsls	r3, r0
 810c0dc:	40ca      	lsrs	r2, r1
 810c0de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810c0e2:	4313      	orrs	r3, r2
 810c0e4:	e7de      	b.n	810c0a4 <__b2d+0x48>
 810c0e6:	ea42 0501 	orr.w	r5, r2, r1
 810c0ea:	e7db      	b.n	810c0a4 <__b2d+0x48>
 810c0ec:	3ff00000 	.word	0x3ff00000

0810c0f0 <__d2b>:
 810c0f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c0f4:	460f      	mov	r7, r1
 810c0f6:	2101      	movs	r1, #1
 810c0f8:	ec59 8b10 	vmov	r8, r9, d0
 810c0fc:	4616      	mov	r6, r2
 810c0fe:	f7ff fc13 	bl	810b928 <_Balloc>
 810c102:	4604      	mov	r4, r0
 810c104:	b930      	cbnz	r0, 810c114 <__d2b+0x24>
 810c106:	4602      	mov	r2, r0
 810c108:	4b23      	ldr	r3, [pc, #140]	@ (810c198 <__d2b+0xa8>)
 810c10a:	4824      	ldr	r0, [pc, #144]	@ (810c19c <__d2b+0xac>)
 810c10c:	f240 310f 	movw	r1, #783	@ 0x30f
 810c110:	f001 fb4e 	bl	810d7b0 <__assert_func>
 810c114:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c118:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c11c:	b10d      	cbz	r5, 810c122 <__d2b+0x32>
 810c11e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810c122:	9301      	str	r3, [sp, #4]
 810c124:	f1b8 0300 	subs.w	r3, r8, #0
 810c128:	d023      	beq.n	810c172 <__d2b+0x82>
 810c12a:	4668      	mov	r0, sp
 810c12c:	9300      	str	r3, [sp, #0]
 810c12e:	f7ff fd0c 	bl	810bb4a <__lo0bits>
 810c132:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c136:	b1d0      	cbz	r0, 810c16e <__d2b+0x7e>
 810c138:	f1c0 0320 	rsb	r3, r0, #32
 810c13c:	fa02 f303 	lsl.w	r3, r2, r3
 810c140:	430b      	orrs	r3, r1
 810c142:	40c2      	lsrs	r2, r0
 810c144:	6163      	str	r3, [r4, #20]
 810c146:	9201      	str	r2, [sp, #4]
 810c148:	9b01      	ldr	r3, [sp, #4]
 810c14a:	61a3      	str	r3, [r4, #24]
 810c14c:	2b00      	cmp	r3, #0
 810c14e:	bf0c      	ite	eq
 810c150:	2201      	moveq	r2, #1
 810c152:	2202      	movne	r2, #2
 810c154:	6122      	str	r2, [r4, #16]
 810c156:	b1a5      	cbz	r5, 810c182 <__d2b+0x92>
 810c158:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810c15c:	4405      	add	r5, r0
 810c15e:	603d      	str	r5, [r7, #0]
 810c160:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810c164:	6030      	str	r0, [r6, #0]
 810c166:	4620      	mov	r0, r4
 810c168:	b003      	add	sp, #12
 810c16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c16e:	6161      	str	r1, [r4, #20]
 810c170:	e7ea      	b.n	810c148 <__d2b+0x58>
 810c172:	a801      	add	r0, sp, #4
 810c174:	f7ff fce9 	bl	810bb4a <__lo0bits>
 810c178:	9b01      	ldr	r3, [sp, #4]
 810c17a:	6163      	str	r3, [r4, #20]
 810c17c:	3020      	adds	r0, #32
 810c17e:	2201      	movs	r2, #1
 810c180:	e7e8      	b.n	810c154 <__d2b+0x64>
 810c182:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c186:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810c18a:	6038      	str	r0, [r7, #0]
 810c18c:	6918      	ldr	r0, [r3, #16]
 810c18e:	f7ff fcbd 	bl	810bb0c <__hi0bits>
 810c192:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c196:	e7e5      	b.n	810c164 <__d2b+0x74>
 810c198:	0810e8b9 	.word	0x0810e8b9
 810c19c:	0810e8ca 	.word	0x0810e8ca

0810c1a0 <__ratio>:
 810c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1a4:	b085      	sub	sp, #20
 810c1a6:	e9cd 1000 	strd	r1, r0, [sp]
 810c1aa:	a902      	add	r1, sp, #8
 810c1ac:	f7ff ff56 	bl	810c05c <__b2d>
 810c1b0:	9800      	ldr	r0, [sp, #0]
 810c1b2:	a903      	add	r1, sp, #12
 810c1b4:	ec55 4b10 	vmov	r4, r5, d0
 810c1b8:	f7ff ff50 	bl	810c05c <__b2d>
 810c1bc:	9b01      	ldr	r3, [sp, #4]
 810c1be:	6919      	ldr	r1, [r3, #16]
 810c1c0:	9b00      	ldr	r3, [sp, #0]
 810c1c2:	691b      	ldr	r3, [r3, #16]
 810c1c4:	1ac9      	subs	r1, r1, r3
 810c1c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810c1ca:	1a9b      	subs	r3, r3, r2
 810c1cc:	ec5b ab10 	vmov	sl, fp, d0
 810c1d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810c1d4:	2b00      	cmp	r3, #0
 810c1d6:	bfce      	itee	gt
 810c1d8:	462a      	movgt	r2, r5
 810c1da:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c1de:	465a      	movle	r2, fp
 810c1e0:	462f      	mov	r7, r5
 810c1e2:	46d9      	mov	r9, fp
 810c1e4:	bfcc      	ite	gt
 810c1e6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c1ea:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810c1ee:	464b      	mov	r3, r9
 810c1f0:	4652      	mov	r2, sl
 810c1f2:	4620      	mov	r0, r4
 810c1f4:	4639      	mov	r1, r7
 810c1f6:	f7f4 fbb1 	bl	810095c <__aeabi_ddiv>
 810c1fa:	ec41 0b10 	vmov	d0, r0, r1
 810c1fe:	b005      	add	sp, #20
 810c200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c204 <__copybits>:
 810c204:	3901      	subs	r1, #1
 810c206:	b570      	push	{r4, r5, r6, lr}
 810c208:	1149      	asrs	r1, r1, #5
 810c20a:	6914      	ldr	r4, [r2, #16]
 810c20c:	3101      	adds	r1, #1
 810c20e:	f102 0314 	add.w	r3, r2, #20
 810c212:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c216:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c21a:	1f05      	subs	r5, r0, #4
 810c21c:	42a3      	cmp	r3, r4
 810c21e:	d30c      	bcc.n	810c23a <__copybits+0x36>
 810c220:	1aa3      	subs	r3, r4, r2
 810c222:	3b11      	subs	r3, #17
 810c224:	f023 0303 	bic.w	r3, r3, #3
 810c228:	3211      	adds	r2, #17
 810c22a:	42a2      	cmp	r2, r4
 810c22c:	bf88      	it	hi
 810c22e:	2300      	movhi	r3, #0
 810c230:	4418      	add	r0, r3
 810c232:	2300      	movs	r3, #0
 810c234:	4288      	cmp	r0, r1
 810c236:	d305      	bcc.n	810c244 <__copybits+0x40>
 810c238:	bd70      	pop	{r4, r5, r6, pc}
 810c23a:	f853 6b04 	ldr.w	r6, [r3], #4
 810c23e:	f845 6f04 	str.w	r6, [r5, #4]!
 810c242:	e7eb      	b.n	810c21c <__copybits+0x18>
 810c244:	f840 3b04 	str.w	r3, [r0], #4
 810c248:	e7f4      	b.n	810c234 <__copybits+0x30>

0810c24a <__any_on>:
 810c24a:	f100 0214 	add.w	r2, r0, #20
 810c24e:	6900      	ldr	r0, [r0, #16]
 810c250:	114b      	asrs	r3, r1, #5
 810c252:	4298      	cmp	r0, r3
 810c254:	b510      	push	{r4, lr}
 810c256:	db11      	blt.n	810c27c <__any_on+0x32>
 810c258:	dd0a      	ble.n	810c270 <__any_on+0x26>
 810c25a:	f011 011f 	ands.w	r1, r1, #31
 810c25e:	d007      	beq.n	810c270 <__any_on+0x26>
 810c260:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c264:	fa24 f001 	lsr.w	r0, r4, r1
 810c268:	fa00 f101 	lsl.w	r1, r0, r1
 810c26c:	428c      	cmp	r4, r1
 810c26e:	d10b      	bne.n	810c288 <__any_on+0x3e>
 810c270:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c274:	4293      	cmp	r3, r2
 810c276:	d803      	bhi.n	810c280 <__any_on+0x36>
 810c278:	2000      	movs	r0, #0
 810c27a:	bd10      	pop	{r4, pc}
 810c27c:	4603      	mov	r3, r0
 810c27e:	e7f7      	b.n	810c270 <__any_on+0x26>
 810c280:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c284:	2900      	cmp	r1, #0
 810c286:	d0f5      	beq.n	810c274 <__any_on+0x2a>
 810c288:	2001      	movs	r0, #1
 810c28a:	e7f6      	b.n	810c27a <__any_on+0x30>

0810c28c <sulp>:
 810c28c:	b570      	push	{r4, r5, r6, lr}
 810c28e:	4604      	mov	r4, r0
 810c290:	460d      	mov	r5, r1
 810c292:	ec45 4b10 	vmov	d0, r4, r5
 810c296:	4616      	mov	r6, r2
 810c298:	f7ff feba 	bl	810c010 <__ulp>
 810c29c:	ec51 0b10 	vmov	r0, r1, d0
 810c2a0:	b17e      	cbz	r6, 810c2c2 <sulp+0x36>
 810c2a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810c2a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810c2aa:	2b00      	cmp	r3, #0
 810c2ac:	dd09      	ble.n	810c2c2 <sulp+0x36>
 810c2ae:	051b      	lsls	r3, r3, #20
 810c2b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810c2b4:	2400      	movs	r4, #0
 810c2b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810c2ba:	4622      	mov	r2, r4
 810c2bc:	462b      	mov	r3, r5
 810c2be:	f7f4 fa23 	bl	8100708 <__aeabi_dmul>
 810c2c2:	ec41 0b10 	vmov	d0, r0, r1
 810c2c6:	bd70      	pop	{r4, r5, r6, pc}

0810c2c8 <_strtod_l>:
 810c2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c2cc:	b09f      	sub	sp, #124	@ 0x7c
 810c2ce:	460c      	mov	r4, r1
 810c2d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 810c2d2:	2200      	movs	r2, #0
 810c2d4:	921a      	str	r2, [sp, #104]	@ 0x68
 810c2d6:	9005      	str	r0, [sp, #20]
 810c2d8:	f04f 0a00 	mov.w	sl, #0
 810c2dc:	f04f 0b00 	mov.w	fp, #0
 810c2e0:	460a      	mov	r2, r1
 810c2e2:	9219      	str	r2, [sp, #100]	@ 0x64
 810c2e4:	7811      	ldrb	r1, [r2, #0]
 810c2e6:	292b      	cmp	r1, #43	@ 0x2b
 810c2e8:	d04a      	beq.n	810c380 <_strtod_l+0xb8>
 810c2ea:	d838      	bhi.n	810c35e <_strtod_l+0x96>
 810c2ec:	290d      	cmp	r1, #13
 810c2ee:	d832      	bhi.n	810c356 <_strtod_l+0x8e>
 810c2f0:	2908      	cmp	r1, #8
 810c2f2:	d832      	bhi.n	810c35a <_strtod_l+0x92>
 810c2f4:	2900      	cmp	r1, #0
 810c2f6:	d03b      	beq.n	810c370 <_strtod_l+0xa8>
 810c2f8:	2200      	movs	r2, #0
 810c2fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 810c2fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810c2fe:	782a      	ldrb	r2, [r5, #0]
 810c300:	2a30      	cmp	r2, #48	@ 0x30
 810c302:	f040 80b3 	bne.w	810c46c <_strtod_l+0x1a4>
 810c306:	786a      	ldrb	r2, [r5, #1]
 810c308:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810c30c:	2a58      	cmp	r2, #88	@ 0x58
 810c30e:	d16e      	bne.n	810c3ee <_strtod_l+0x126>
 810c310:	9302      	str	r3, [sp, #8]
 810c312:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c314:	9301      	str	r3, [sp, #4]
 810c316:	ab1a      	add	r3, sp, #104	@ 0x68
 810c318:	9300      	str	r3, [sp, #0]
 810c31a:	4a8e      	ldr	r2, [pc, #568]	@ (810c554 <_strtod_l+0x28c>)
 810c31c:	9805      	ldr	r0, [sp, #20]
 810c31e:	ab1b      	add	r3, sp, #108	@ 0x6c
 810c320:	a919      	add	r1, sp, #100	@ 0x64
 810c322:	f001 fadf 	bl	810d8e4 <__gethex>
 810c326:	f010 060f 	ands.w	r6, r0, #15
 810c32a:	4604      	mov	r4, r0
 810c32c:	d005      	beq.n	810c33a <_strtod_l+0x72>
 810c32e:	2e06      	cmp	r6, #6
 810c330:	d128      	bne.n	810c384 <_strtod_l+0xbc>
 810c332:	3501      	adds	r5, #1
 810c334:	2300      	movs	r3, #0
 810c336:	9519      	str	r5, [sp, #100]	@ 0x64
 810c338:	930b      	str	r3, [sp, #44]	@ 0x2c
 810c33a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c33c:	2b00      	cmp	r3, #0
 810c33e:	f040 858e 	bne.w	810ce5e <_strtod_l+0xb96>
 810c342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c344:	b1cb      	cbz	r3, 810c37a <_strtod_l+0xb2>
 810c346:	4652      	mov	r2, sl
 810c348:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810c34c:	ec43 2b10 	vmov	d0, r2, r3
 810c350:	b01f      	add	sp, #124	@ 0x7c
 810c352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c356:	2920      	cmp	r1, #32
 810c358:	d1ce      	bne.n	810c2f8 <_strtod_l+0x30>
 810c35a:	3201      	adds	r2, #1
 810c35c:	e7c1      	b.n	810c2e2 <_strtod_l+0x1a>
 810c35e:	292d      	cmp	r1, #45	@ 0x2d
 810c360:	d1ca      	bne.n	810c2f8 <_strtod_l+0x30>
 810c362:	2101      	movs	r1, #1
 810c364:	910b      	str	r1, [sp, #44]	@ 0x2c
 810c366:	1c51      	adds	r1, r2, #1
 810c368:	9119      	str	r1, [sp, #100]	@ 0x64
 810c36a:	7852      	ldrb	r2, [r2, #1]
 810c36c:	2a00      	cmp	r2, #0
 810c36e:	d1c5      	bne.n	810c2fc <_strtod_l+0x34>
 810c370:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c372:	9419      	str	r4, [sp, #100]	@ 0x64
 810c374:	2b00      	cmp	r3, #0
 810c376:	f040 8570 	bne.w	810ce5a <_strtod_l+0xb92>
 810c37a:	4652      	mov	r2, sl
 810c37c:	465b      	mov	r3, fp
 810c37e:	e7e5      	b.n	810c34c <_strtod_l+0x84>
 810c380:	2100      	movs	r1, #0
 810c382:	e7ef      	b.n	810c364 <_strtod_l+0x9c>
 810c384:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810c386:	b13a      	cbz	r2, 810c398 <_strtod_l+0xd0>
 810c388:	2135      	movs	r1, #53	@ 0x35
 810c38a:	a81c      	add	r0, sp, #112	@ 0x70
 810c38c:	f7ff ff3a 	bl	810c204 <__copybits>
 810c390:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c392:	9805      	ldr	r0, [sp, #20]
 810c394:	f7ff fb08 	bl	810b9a8 <_Bfree>
 810c398:	3e01      	subs	r6, #1
 810c39a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810c39c:	2e04      	cmp	r6, #4
 810c39e:	d806      	bhi.n	810c3ae <_strtod_l+0xe6>
 810c3a0:	e8df f006 	tbb	[pc, r6]
 810c3a4:	201d0314 	.word	0x201d0314
 810c3a8:	14          	.byte	0x14
 810c3a9:	00          	.byte	0x00
 810c3aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810c3ae:	05e1      	lsls	r1, r4, #23
 810c3b0:	bf48      	it	mi
 810c3b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810c3b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810c3ba:	0d1b      	lsrs	r3, r3, #20
 810c3bc:	051b      	lsls	r3, r3, #20
 810c3be:	2b00      	cmp	r3, #0
 810c3c0:	d1bb      	bne.n	810c33a <_strtod_l+0x72>
 810c3c2:	f7fe fb23 	bl	810aa0c <__errno>
 810c3c6:	2322      	movs	r3, #34	@ 0x22
 810c3c8:	6003      	str	r3, [r0, #0]
 810c3ca:	e7b6      	b.n	810c33a <_strtod_l+0x72>
 810c3cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810c3d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810c3d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810c3d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c3dc:	e7e7      	b.n	810c3ae <_strtod_l+0xe6>
 810c3de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810c55c <_strtod_l+0x294>
 810c3e2:	e7e4      	b.n	810c3ae <_strtod_l+0xe6>
 810c3e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810c3e8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810c3ec:	e7df      	b.n	810c3ae <_strtod_l+0xe6>
 810c3ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c3f0:	1c5a      	adds	r2, r3, #1
 810c3f2:	9219      	str	r2, [sp, #100]	@ 0x64
 810c3f4:	785b      	ldrb	r3, [r3, #1]
 810c3f6:	2b30      	cmp	r3, #48	@ 0x30
 810c3f8:	d0f9      	beq.n	810c3ee <_strtod_l+0x126>
 810c3fa:	2b00      	cmp	r3, #0
 810c3fc:	d09d      	beq.n	810c33a <_strtod_l+0x72>
 810c3fe:	2301      	movs	r3, #1
 810c400:	9309      	str	r3, [sp, #36]	@ 0x24
 810c402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c404:	930c      	str	r3, [sp, #48]	@ 0x30
 810c406:	2300      	movs	r3, #0
 810c408:	9308      	str	r3, [sp, #32]
 810c40a:	930a      	str	r3, [sp, #40]	@ 0x28
 810c40c:	461f      	mov	r7, r3
 810c40e:	220a      	movs	r2, #10
 810c410:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810c412:	7805      	ldrb	r5, [r0, #0]
 810c414:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810c418:	b2d9      	uxtb	r1, r3
 810c41a:	2909      	cmp	r1, #9
 810c41c:	d928      	bls.n	810c470 <_strtod_l+0x1a8>
 810c41e:	494e      	ldr	r1, [pc, #312]	@ (810c558 <_strtod_l+0x290>)
 810c420:	2201      	movs	r2, #1
 810c422:	f001 f979 	bl	810d718 <strncmp>
 810c426:	2800      	cmp	r0, #0
 810c428:	d032      	beq.n	810c490 <_strtod_l+0x1c8>
 810c42a:	2000      	movs	r0, #0
 810c42c:	462a      	mov	r2, r5
 810c42e:	4681      	mov	r9, r0
 810c430:	463d      	mov	r5, r7
 810c432:	4603      	mov	r3, r0
 810c434:	2a65      	cmp	r2, #101	@ 0x65
 810c436:	d001      	beq.n	810c43c <_strtod_l+0x174>
 810c438:	2a45      	cmp	r2, #69	@ 0x45
 810c43a:	d114      	bne.n	810c466 <_strtod_l+0x19e>
 810c43c:	b91d      	cbnz	r5, 810c446 <_strtod_l+0x17e>
 810c43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c440:	4302      	orrs	r2, r0
 810c442:	d095      	beq.n	810c370 <_strtod_l+0xa8>
 810c444:	2500      	movs	r5, #0
 810c446:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810c448:	1c62      	adds	r2, r4, #1
 810c44a:	9219      	str	r2, [sp, #100]	@ 0x64
 810c44c:	7862      	ldrb	r2, [r4, #1]
 810c44e:	2a2b      	cmp	r2, #43	@ 0x2b
 810c450:	d077      	beq.n	810c542 <_strtod_l+0x27a>
 810c452:	2a2d      	cmp	r2, #45	@ 0x2d
 810c454:	d07b      	beq.n	810c54e <_strtod_l+0x286>
 810c456:	f04f 0c00 	mov.w	ip, #0
 810c45a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810c45e:	2909      	cmp	r1, #9
 810c460:	f240 8082 	bls.w	810c568 <_strtod_l+0x2a0>
 810c464:	9419      	str	r4, [sp, #100]	@ 0x64
 810c466:	f04f 0800 	mov.w	r8, #0
 810c46a:	e0a2      	b.n	810c5b2 <_strtod_l+0x2ea>
 810c46c:	2300      	movs	r3, #0
 810c46e:	e7c7      	b.n	810c400 <_strtod_l+0x138>
 810c470:	2f08      	cmp	r7, #8
 810c472:	bfd5      	itete	le
 810c474:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810c476:	9908      	ldrgt	r1, [sp, #32]
 810c478:	fb02 3301 	mlale	r3, r2, r1, r3
 810c47c:	fb02 3301 	mlagt	r3, r2, r1, r3
 810c480:	f100 0001 	add.w	r0, r0, #1
 810c484:	bfd4      	ite	le
 810c486:	930a      	strle	r3, [sp, #40]	@ 0x28
 810c488:	9308      	strgt	r3, [sp, #32]
 810c48a:	3701      	adds	r7, #1
 810c48c:	9019      	str	r0, [sp, #100]	@ 0x64
 810c48e:	e7bf      	b.n	810c410 <_strtod_l+0x148>
 810c490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c492:	1c5a      	adds	r2, r3, #1
 810c494:	9219      	str	r2, [sp, #100]	@ 0x64
 810c496:	785a      	ldrb	r2, [r3, #1]
 810c498:	b37f      	cbz	r7, 810c4fa <_strtod_l+0x232>
 810c49a:	4681      	mov	r9, r0
 810c49c:	463d      	mov	r5, r7
 810c49e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810c4a2:	2b09      	cmp	r3, #9
 810c4a4:	d912      	bls.n	810c4cc <_strtod_l+0x204>
 810c4a6:	2301      	movs	r3, #1
 810c4a8:	e7c4      	b.n	810c434 <_strtod_l+0x16c>
 810c4aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c4ac:	1c5a      	adds	r2, r3, #1
 810c4ae:	9219      	str	r2, [sp, #100]	@ 0x64
 810c4b0:	785a      	ldrb	r2, [r3, #1]
 810c4b2:	3001      	adds	r0, #1
 810c4b4:	2a30      	cmp	r2, #48	@ 0x30
 810c4b6:	d0f8      	beq.n	810c4aa <_strtod_l+0x1e2>
 810c4b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810c4bc:	2b08      	cmp	r3, #8
 810c4be:	f200 84d3 	bhi.w	810ce68 <_strtod_l+0xba0>
 810c4c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c4c4:	930c      	str	r3, [sp, #48]	@ 0x30
 810c4c6:	4681      	mov	r9, r0
 810c4c8:	2000      	movs	r0, #0
 810c4ca:	4605      	mov	r5, r0
 810c4cc:	3a30      	subs	r2, #48	@ 0x30
 810c4ce:	f100 0301 	add.w	r3, r0, #1
 810c4d2:	d02a      	beq.n	810c52a <_strtod_l+0x262>
 810c4d4:	4499      	add	r9, r3
 810c4d6:	eb00 0c05 	add.w	ip, r0, r5
 810c4da:	462b      	mov	r3, r5
 810c4dc:	210a      	movs	r1, #10
 810c4de:	4563      	cmp	r3, ip
 810c4e0:	d10d      	bne.n	810c4fe <_strtod_l+0x236>
 810c4e2:	1c69      	adds	r1, r5, #1
 810c4e4:	4401      	add	r1, r0
 810c4e6:	4428      	add	r0, r5
 810c4e8:	2808      	cmp	r0, #8
 810c4ea:	dc16      	bgt.n	810c51a <_strtod_l+0x252>
 810c4ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c4ee:	230a      	movs	r3, #10
 810c4f0:	fb03 2300 	mla	r3, r3, r0, r2
 810c4f4:	930a      	str	r3, [sp, #40]	@ 0x28
 810c4f6:	2300      	movs	r3, #0
 810c4f8:	e018      	b.n	810c52c <_strtod_l+0x264>
 810c4fa:	4638      	mov	r0, r7
 810c4fc:	e7da      	b.n	810c4b4 <_strtod_l+0x1ec>
 810c4fe:	2b08      	cmp	r3, #8
 810c500:	f103 0301 	add.w	r3, r3, #1
 810c504:	dc03      	bgt.n	810c50e <_strtod_l+0x246>
 810c506:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810c508:	434e      	muls	r6, r1
 810c50a:	960a      	str	r6, [sp, #40]	@ 0x28
 810c50c:	e7e7      	b.n	810c4de <_strtod_l+0x216>
 810c50e:	2b10      	cmp	r3, #16
 810c510:	bfde      	ittt	le
 810c512:	9e08      	ldrle	r6, [sp, #32]
 810c514:	434e      	mulle	r6, r1
 810c516:	9608      	strle	r6, [sp, #32]
 810c518:	e7e1      	b.n	810c4de <_strtod_l+0x216>
 810c51a:	280f      	cmp	r0, #15
 810c51c:	dceb      	bgt.n	810c4f6 <_strtod_l+0x22e>
 810c51e:	9808      	ldr	r0, [sp, #32]
 810c520:	230a      	movs	r3, #10
 810c522:	fb03 2300 	mla	r3, r3, r0, r2
 810c526:	9308      	str	r3, [sp, #32]
 810c528:	e7e5      	b.n	810c4f6 <_strtod_l+0x22e>
 810c52a:	4629      	mov	r1, r5
 810c52c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c52e:	1c50      	adds	r0, r2, #1
 810c530:	9019      	str	r0, [sp, #100]	@ 0x64
 810c532:	7852      	ldrb	r2, [r2, #1]
 810c534:	4618      	mov	r0, r3
 810c536:	460d      	mov	r5, r1
 810c538:	e7b1      	b.n	810c49e <_strtod_l+0x1d6>
 810c53a:	f04f 0900 	mov.w	r9, #0
 810c53e:	2301      	movs	r3, #1
 810c540:	e77d      	b.n	810c43e <_strtod_l+0x176>
 810c542:	f04f 0c00 	mov.w	ip, #0
 810c546:	1ca2      	adds	r2, r4, #2
 810c548:	9219      	str	r2, [sp, #100]	@ 0x64
 810c54a:	78a2      	ldrb	r2, [r4, #2]
 810c54c:	e785      	b.n	810c45a <_strtod_l+0x192>
 810c54e:	f04f 0c01 	mov.w	ip, #1
 810c552:	e7f8      	b.n	810c546 <_strtod_l+0x27e>
 810c554:	0810ea38 	.word	0x0810ea38
 810c558:	0810ea20 	.word	0x0810ea20
 810c55c:	7ff00000 	.word	0x7ff00000
 810c560:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c562:	1c51      	adds	r1, r2, #1
 810c564:	9119      	str	r1, [sp, #100]	@ 0x64
 810c566:	7852      	ldrb	r2, [r2, #1]
 810c568:	2a30      	cmp	r2, #48	@ 0x30
 810c56a:	d0f9      	beq.n	810c560 <_strtod_l+0x298>
 810c56c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810c570:	2908      	cmp	r1, #8
 810c572:	f63f af78 	bhi.w	810c466 <_strtod_l+0x19e>
 810c576:	3a30      	subs	r2, #48	@ 0x30
 810c578:	920e      	str	r2, [sp, #56]	@ 0x38
 810c57a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c57c:	920f      	str	r2, [sp, #60]	@ 0x3c
 810c57e:	f04f 080a 	mov.w	r8, #10
 810c582:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c584:	1c56      	adds	r6, r2, #1
 810c586:	9619      	str	r6, [sp, #100]	@ 0x64
 810c588:	7852      	ldrb	r2, [r2, #1]
 810c58a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810c58e:	f1be 0f09 	cmp.w	lr, #9
 810c592:	d939      	bls.n	810c608 <_strtod_l+0x340>
 810c594:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810c596:	1a76      	subs	r6, r6, r1
 810c598:	2e08      	cmp	r6, #8
 810c59a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810c59e:	dc03      	bgt.n	810c5a8 <_strtod_l+0x2e0>
 810c5a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c5a2:	4588      	cmp	r8, r1
 810c5a4:	bfa8      	it	ge
 810c5a6:	4688      	movge	r8, r1
 810c5a8:	f1bc 0f00 	cmp.w	ip, #0
 810c5ac:	d001      	beq.n	810c5b2 <_strtod_l+0x2ea>
 810c5ae:	f1c8 0800 	rsb	r8, r8, #0
 810c5b2:	2d00      	cmp	r5, #0
 810c5b4:	d14e      	bne.n	810c654 <_strtod_l+0x38c>
 810c5b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c5b8:	4308      	orrs	r0, r1
 810c5ba:	f47f aebe 	bne.w	810c33a <_strtod_l+0x72>
 810c5be:	2b00      	cmp	r3, #0
 810c5c0:	f47f aed6 	bne.w	810c370 <_strtod_l+0xa8>
 810c5c4:	2a69      	cmp	r2, #105	@ 0x69
 810c5c6:	d028      	beq.n	810c61a <_strtod_l+0x352>
 810c5c8:	dc25      	bgt.n	810c616 <_strtod_l+0x34e>
 810c5ca:	2a49      	cmp	r2, #73	@ 0x49
 810c5cc:	d025      	beq.n	810c61a <_strtod_l+0x352>
 810c5ce:	2a4e      	cmp	r2, #78	@ 0x4e
 810c5d0:	f47f aece 	bne.w	810c370 <_strtod_l+0xa8>
 810c5d4:	499b      	ldr	r1, [pc, #620]	@ (810c844 <_strtod_l+0x57c>)
 810c5d6:	a819      	add	r0, sp, #100	@ 0x64
 810c5d8:	f001 fba6 	bl	810dd28 <__match>
 810c5dc:	2800      	cmp	r0, #0
 810c5de:	f43f aec7 	beq.w	810c370 <_strtod_l+0xa8>
 810c5e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c5e4:	781b      	ldrb	r3, [r3, #0]
 810c5e6:	2b28      	cmp	r3, #40	@ 0x28
 810c5e8:	d12e      	bne.n	810c648 <_strtod_l+0x380>
 810c5ea:	4997      	ldr	r1, [pc, #604]	@ (810c848 <_strtod_l+0x580>)
 810c5ec:	aa1c      	add	r2, sp, #112	@ 0x70
 810c5ee:	a819      	add	r0, sp, #100	@ 0x64
 810c5f0:	f001 fbae 	bl	810dd50 <__hexnan>
 810c5f4:	2805      	cmp	r0, #5
 810c5f6:	d127      	bne.n	810c648 <_strtod_l+0x380>
 810c5f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810c5fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810c5fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810c602:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810c606:	e698      	b.n	810c33a <_strtod_l+0x72>
 810c608:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c60a:	fb08 2101 	mla	r1, r8, r1, r2
 810c60e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810c612:	920e      	str	r2, [sp, #56]	@ 0x38
 810c614:	e7b5      	b.n	810c582 <_strtod_l+0x2ba>
 810c616:	2a6e      	cmp	r2, #110	@ 0x6e
 810c618:	e7da      	b.n	810c5d0 <_strtod_l+0x308>
 810c61a:	498c      	ldr	r1, [pc, #560]	@ (810c84c <_strtod_l+0x584>)
 810c61c:	a819      	add	r0, sp, #100	@ 0x64
 810c61e:	f001 fb83 	bl	810dd28 <__match>
 810c622:	2800      	cmp	r0, #0
 810c624:	f43f aea4 	beq.w	810c370 <_strtod_l+0xa8>
 810c628:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c62a:	4989      	ldr	r1, [pc, #548]	@ (810c850 <_strtod_l+0x588>)
 810c62c:	3b01      	subs	r3, #1
 810c62e:	a819      	add	r0, sp, #100	@ 0x64
 810c630:	9319      	str	r3, [sp, #100]	@ 0x64
 810c632:	f001 fb79 	bl	810dd28 <__match>
 810c636:	b910      	cbnz	r0, 810c63e <_strtod_l+0x376>
 810c638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c63a:	3301      	adds	r3, #1
 810c63c:	9319      	str	r3, [sp, #100]	@ 0x64
 810c63e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810c860 <_strtod_l+0x598>
 810c642:	f04f 0a00 	mov.w	sl, #0
 810c646:	e678      	b.n	810c33a <_strtod_l+0x72>
 810c648:	4882      	ldr	r0, [pc, #520]	@ (810c854 <_strtod_l+0x58c>)
 810c64a:	f001 f8a9 	bl	810d7a0 <nan>
 810c64e:	ec5b ab10 	vmov	sl, fp, d0
 810c652:	e672      	b.n	810c33a <_strtod_l+0x72>
 810c654:	eba8 0309 	sub.w	r3, r8, r9
 810c658:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c65a:	9309      	str	r3, [sp, #36]	@ 0x24
 810c65c:	2f00      	cmp	r7, #0
 810c65e:	bf08      	it	eq
 810c660:	462f      	moveq	r7, r5
 810c662:	2d10      	cmp	r5, #16
 810c664:	462c      	mov	r4, r5
 810c666:	bfa8      	it	ge
 810c668:	2410      	movge	r4, #16
 810c66a:	f7f3 ffd3 	bl	8100614 <__aeabi_ui2d>
 810c66e:	2d09      	cmp	r5, #9
 810c670:	4682      	mov	sl, r0
 810c672:	468b      	mov	fp, r1
 810c674:	dc13      	bgt.n	810c69e <_strtod_l+0x3d6>
 810c676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c678:	2b00      	cmp	r3, #0
 810c67a:	f43f ae5e 	beq.w	810c33a <_strtod_l+0x72>
 810c67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c680:	dd78      	ble.n	810c774 <_strtod_l+0x4ac>
 810c682:	2b16      	cmp	r3, #22
 810c684:	dc5f      	bgt.n	810c746 <_strtod_l+0x47e>
 810c686:	4974      	ldr	r1, [pc, #464]	@ (810c858 <_strtod_l+0x590>)
 810c688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c690:	4652      	mov	r2, sl
 810c692:	465b      	mov	r3, fp
 810c694:	f7f4 f838 	bl	8100708 <__aeabi_dmul>
 810c698:	4682      	mov	sl, r0
 810c69a:	468b      	mov	fp, r1
 810c69c:	e64d      	b.n	810c33a <_strtod_l+0x72>
 810c69e:	4b6e      	ldr	r3, [pc, #440]	@ (810c858 <_strtod_l+0x590>)
 810c6a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c6a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810c6a8:	f7f4 f82e 	bl	8100708 <__aeabi_dmul>
 810c6ac:	4682      	mov	sl, r0
 810c6ae:	9808      	ldr	r0, [sp, #32]
 810c6b0:	468b      	mov	fp, r1
 810c6b2:	f7f3 ffaf 	bl	8100614 <__aeabi_ui2d>
 810c6b6:	4602      	mov	r2, r0
 810c6b8:	460b      	mov	r3, r1
 810c6ba:	4650      	mov	r0, sl
 810c6bc:	4659      	mov	r1, fp
 810c6be:	f7f3 fe6d 	bl	810039c <__adddf3>
 810c6c2:	2d0f      	cmp	r5, #15
 810c6c4:	4682      	mov	sl, r0
 810c6c6:	468b      	mov	fp, r1
 810c6c8:	ddd5      	ble.n	810c676 <_strtod_l+0x3ae>
 810c6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c6cc:	1b2c      	subs	r4, r5, r4
 810c6ce:	441c      	add	r4, r3
 810c6d0:	2c00      	cmp	r4, #0
 810c6d2:	f340 8096 	ble.w	810c802 <_strtod_l+0x53a>
 810c6d6:	f014 030f 	ands.w	r3, r4, #15
 810c6da:	d00a      	beq.n	810c6f2 <_strtod_l+0x42a>
 810c6dc:	495e      	ldr	r1, [pc, #376]	@ (810c858 <_strtod_l+0x590>)
 810c6de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c6e2:	4652      	mov	r2, sl
 810c6e4:	465b      	mov	r3, fp
 810c6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c6ea:	f7f4 f80d 	bl	8100708 <__aeabi_dmul>
 810c6ee:	4682      	mov	sl, r0
 810c6f0:	468b      	mov	fp, r1
 810c6f2:	f034 040f 	bics.w	r4, r4, #15
 810c6f6:	d073      	beq.n	810c7e0 <_strtod_l+0x518>
 810c6f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810c6fc:	dd48      	ble.n	810c790 <_strtod_l+0x4c8>
 810c6fe:	2400      	movs	r4, #0
 810c700:	46a0      	mov	r8, r4
 810c702:	940a      	str	r4, [sp, #40]	@ 0x28
 810c704:	46a1      	mov	r9, r4
 810c706:	9a05      	ldr	r2, [sp, #20]
 810c708:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810c860 <_strtod_l+0x598>
 810c70c:	2322      	movs	r3, #34	@ 0x22
 810c70e:	6013      	str	r3, [r2, #0]
 810c710:	f04f 0a00 	mov.w	sl, #0
 810c714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c716:	2b00      	cmp	r3, #0
 810c718:	f43f ae0f 	beq.w	810c33a <_strtod_l+0x72>
 810c71c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c71e:	9805      	ldr	r0, [sp, #20]
 810c720:	f7ff f942 	bl	810b9a8 <_Bfree>
 810c724:	9805      	ldr	r0, [sp, #20]
 810c726:	4649      	mov	r1, r9
 810c728:	f7ff f93e 	bl	810b9a8 <_Bfree>
 810c72c:	9805      	ldr	r0, [sp, #20]
 810c72e:	4641      	mov	r1, r8
 810c730:	f7ff f93a 	bl	810b9a8 <_Bfree>
 810c734:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810c736:	9805      	ldr	r0, [sp, #20]
 810c738:	f7ff f936 	bl	810b9a8 <_Bfree>
 810c73c:	9805      	ldr	r0, [sp, #20]
 810c73e:	4621      	mov	r1, r4
 810c740:	f7ff f932 	bl	810b9a8 <_Bfree>
 810c744:	e5f9      	b.n	810c33a <_strtod_l+0x72>
 810c746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c748:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810c74c:	4293      	cmp	r3, r2
 810c74e:	dbbc      	blt.n	810c6ca <_strtod_l+0x402>
 810c750:	4c41      	ldr	r4, [pc, #260]	@ (810c858 <_strtod_l+0x590>)
 810c752:	f1c5 050f 	rsb	r5, r5, #15
 810c756:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c75a:	4652      	mov	r2, sl
 810c75c:	465b      	mov	r3, fp
 810c75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c762:	f7f3 ffd1 	bl	8100708 <__aeabi_dmul>
 810c766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c768:	1b5d      	subs	r5, r3, r5
 810c76a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c76e:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c772:	e78f      	b.n	810c694 <_strtod_l+0x3cc>
 810c774:	3316      	adds	r3, #22
 810c776:	dba8      	blt.n	810c6ca <_strtod_l+0x402>
 810c778:	4b37      	ldr	r3, [pc, #220]	@ (810c858 <_strtod_l+0x590>)
 810c77a:	eba9 0808 	sub.w	r8, r9, r8
 810c77e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810c782:	e9d8 2300 	ldrd	r2, r3, [r8]
 810c786:	4650      	mov	r0, sl
 810c788:	4659      	mov	r1, fp
 810c78a:	f7f4 f8e7 	bl	810095c <__aeabi_ddiv>
 810c78e:	e783      	b.n	810c698 <_strtod_l+0x3d0>
 810c790:	4b32      	ldr	r3, [pc, #200]	@ (810c85c <_strtod_l+0x594>)
 810c792:	9308      	str	r3, [sp, #32]
 810c794:	2300      	movs	r3, #0
 810c796:	1124      	asrs	r4, r4, #4
 810c798:	4650      	mov	r0, sl
 810c79a:	4659      	mov	r1, fp
 810c79c:	461e      	mov	r6, r3
 810c79e:	2c01      	cmp	r4, #1
 810c7a0:	dc21      	bgt.n	810c7e6 <_strtod_l+0x51e>
 810c7a2:	b10b      	cbz	r3, 810c7a8 <_strtod_l+0x4e0>
 810c7a4:	4682      	mov	sl, r0
 810c7a6:	468b      	mov	fp, r1
 810c7a8:	492c      	ldr	r1, [pc, #176]	@ (810c85c <_strtod_l+0x594>)
 810c7aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810c7ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810c7b2:	4652      	mov	r2, sl
 810c7b4:	465b      	mov	r3, fp
 810c7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c7ba:	f7f3 ffa5 	bl	8100708 <__aeabi_dmul>
 810c7be:	4b28      	ldr	r3, [pc, #160]	@ (810c860 <_strtod_l+0x598>)
 810c7c0:	460a      	mov	r2, r1
 810c7c2:	400b      	ands	r3, r1
 810c7c4:	4927      	ldr	r1, [pc, #156]	@ (810c864 <_strtod_l+0x59c>)
 810c7c6:	428b      	cmp	r3, r1
 810c7c8:	4682      	mov	sl, r0
 810c7ca:	d898      	bhi.n	810c6fe <_strtod_l+0x436>
 810c7cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810c7d0:	428b      	cmp	r3, r1
 810c7d2:	bf86      	itte	hi
 810c7d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810c868 <_strtod_l+0x5a0>
 810c7d8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 810c7dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810c7e0:	2300      	movs	r3, #0
 810c7e2:	9308      	str	r3, [sp, #32]
 810c7e4:	e07a      	b.n	810c8dc <_strtod_l+0x614>
 810c7e6:	07e2      	lsls	r2, r4, #31
 810c7e8:	d505      	bpl.n	810c7f6 <_strtod_l+0x52e>
 810c7ea:	9b08      	ldr	r3, [sp, #32]
 810c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c7f0:	f7f3 ff8a 	bl	8100708 <__aeabi_dmul>
 810c7f4:	2301      	movs	r3, #1
 810c7f6:	9a08      	ldr	r2, [sp, #32]
 810c7f8:	3208      	adds	r2, #8
 810c7fa:	3601      	adds	r6, #1
 810c7fc:	1064      	asrs	r4, r4, #1
 810c7fe:	9208      	str	r2, [sp, #32]
 810c800:	e7cd      	b.n	810c79e <_strtod_l+0x4d6>
 810c802:	d0ed      	beq.n	810c7e0 <_strtod_l+0x518>
 810c804:	4264      	negs	r4, r4
 810c806:	f014 020f 	ands.w	r2, r4, #15
 810c80a:	d00a      	beq.n	810c822 <_strtod_l+0x55a>
 810c80c:	4b12      	ldr	r3, [pc, #72]	@ (810c858 <_strtod_l+0x590>)
 810c80e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c812:	4650      	mov	r0, sl
 810c814:	4659      	mov	r1, fp
 810c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c81a:	f7f4 f89f 	bl	810095c <__aeabi_ddiv>
 810c81e:	4682      	mov	sl, r0
 810c820:	468b      	mov	fp, r1
 810c822:	1124      	asrs	r4, r4, #4
 810c824:	d0dc      	beq.n	810c7e0 <_strtod_l+0x518>
 810c826:	2c1f      	cmp	r4, #31
 810c828:	dd20      	ble.n	810c86c <_strtod_l+0x5a4>
 810c82a:	2400      	movs	r4, #0
 810c82c:	46a0      	mov	r8, r4
 810c82e:	940a      	str	r4, [sp, #40]	@ 0x28
 810c830:	46a1      	mov	r9, r4
 810c832:	9a05      	ldr	r2, [sp, #20]
 810c834:	2322      	movs	r3, #34	@ 0x22
 810c836:	f04f 0a00 	mov.w	sl, #0
 810c83a:	f04f 0b00 	mov.w	fp, #0
 810c83e:	6013      	str	r3, [r2, #0]
 810c840:	e768      	b.n	810c714 <_strtod_l+0x44c>
 810c842:	bf00      	nop
 810c844:	0810e811 	.word	0x0810e811
 810c848:	0810ea24 	.word	0x0810ea24
 810c84c:	0810e809 	.word	0x0810e809
 810c850:	0810e840 	.word	0x0810e840
 810c854:	0810ebcd 	.word	0x0810ebcd
 810c858:	0810e958 	.word	0x0810e958
 810c85c:	0810e930 	.word	0x0810e930
 810c860:	7ff00000 	.word	0x7ff00000
 810c864:	7ca00000 	.word	0x7ca00000
 810c868:	7fefffff 	.word	0x7fefffff
 810c86c:	f014 0310 	ands.w	r3, r4, #16
 810c870:	bf18      	it	ne
 810c872:	236a      	movne	r3, #106	@ 0x6a
 810c874:	4ea9      	ldr	r6, [pc, #676]	@ (810cb1c <_strtod_l+0x854>)
 810c876:	9308      	str	r3, [sp, #32]
 810c878:	4650      	mov	r0, sl
 810c87a:	4659      	mov	r1, fp
 810c87c:	2300      	movs	r3, #0
 810c87e:	07e2      	lsls	r2, r4, #31
 810c880:	d504      	bpl.n	810c88c <_strtod_l+0x5c4>
 810c882:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c886:	f7f3 ff3f 	bl	8100708 <__aeabi_dmul>
 810c88a:	2301      	movs	r3, #1
 810c88c:	1064      	asrs	r4, r4, #1
 810c88e:	f106 0608 	add.w	r6, r6, #8
 810c892:	d1f4      	bne.n	810c87e <_strtod_l+0x5b6>
 810c894:	b10b      	cbz	r3, 810c89a <_strtod_l+0x5d2>
 810c896:	4682      	mov	sl, r0
 810c898:	468b      	mov	fp, r1
 810c89a:	9b08      	ldr	r3, [sp, #32]
 810c89c:	b1b3      	cbz	r3, 810c8cc <_strtod_l+0x604>
 810c89e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810c8a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810c8a6:	2b00      	cmp	r3, #0
 810c8a8:	4659      	mov	r1, fp
 810c8aa:	dd0f      	ble.n	810c8cc <_strtod_l+0x604>
 810c8ac:	2b1f      	cmp	r3, #31
 810c8ae:	dd55      	ble.n	810c95c <_strtod_l+0x694>
 810c8b0:	2b34      	cmp	r3, #52	@ 0x34
 810c8b2:	bfde      	ittt	le
 810c8b4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 810c8b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810c8bc:	4093      	lslle	r3, r2
 810c8be:	f04f 0a00 	mov.w	sl, #0
 810c8c2:	bfcc      	ite	gt
 810c8c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810c8c8:	ea03 0b01 	andle.w	fp, r3, r1
 810c8cc:	2200      	movs	r2, #0
 810c8ce:	2300      	movs	r3, #0
 810c8d0:	4650      	mov	r0, sl
 810c8d2:	4659      	mov	r1, fp
 810c8d4:	f7f4 f980 	bl	8100bd8 <__aeabi_dcmpeq>
 810c8d8:	2800      	cmp	r0, #0
 810c8da:	d1a6      	bne.n	810c82a <_strtod_l+0x562>
 810c8dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c8de:	9300      	str	r3, [sp, #0]
 810c8e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810c8e2:	9805      	ldr	r0, [sp, #20]
 810c8e4:	462b      	mov	r3, r5
 810c8e6:	463a      	mov	r2, r7
 810c8e8:	f7ff f8c6 	bl	810ba78 <__s2b>
 810c8ec:	900a      	str	r0, [sp, #40]	@ 0x28
 810c8ee:	2800      	cmp	r0, #0
 810c8f0:	f43f af05 	beq.w	810c6fe <_strtod_l+0x436>
 810c8f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c8f6:	2a00      	cmp	r2, #0
 810c8f8:	eba9 0308 	sub.w	r3, r9, r8
 810c8fc:	bfa8      	it	ge
 810c8fe:	2300      	movge	r3, #0
 810c900:	9312      	str	r3, [sp, #72]	@ 0x48
 810c902:	2400      	movs	r4, #0
 810c904:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810c908:	9316      	str	r3, [sp, #88]	@ 0x58
 810c90a:	46a0      	mov	r8, r4
 810c90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c90e:	9805      	ldr	r0, [sp, #20]
 810c910:	6859      	ldr	r1, [r3, #4]
 810c912:	f7ff f809 	bl	810b928 <_Balloc>
 810c916:	4681      	mov	r9, r0
 810c918:	2800      	cmp	r0, #0
 810c91a:	f43f aef4 	beq.w	810c706 <_strtod_l+0x43e>
 810c91e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c920:	691a      	ldr	r2, [r3, #16]
 810c922:	3202      	adds	r2, #2
 810c924:	f103 010c 	add.w	r1, r3, #12
 810c928:	0092      	lsls	r2, r2, #2
 810c92a:	300c      	adds	r0, #12
 810c92c:	f7fe f89b 	bl	810aa66 <memcpy>
 810c930:	ec4b ab10 	vmov	d0, sl, fp
 810c934:	9805      	ldr	r0, [sp, #20]
 810c936:	aa1c      	add	r2, sp, #112	@ 0x70
 810c938:	a91b      	add	r1, sp, #108	@ 0x6c
 810c93a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810c93e:	f7ff fbd7 	bl	810c0f0 <__d2b>
 810c942:	901a      	str	r0, [sp, #104]	@ 0x68
 810c944:	2800      	cmp	r0, #0
 810c946:	f43f aede 	beq.w	810c706 <_strtod_l+0x43e>
 810c94a:	9805      	ldr	r0, [sp, #20]
 810c94c:	2101      	movs	r1, #1
 810c94e:	f7ff f929 	bl	810bba4 <__i2b>
 810c952:	4680      	mov	r8, r0
 810c954:	b948      	cbnz	r0, 810c96a <_strtod_l+0x6a2>
 810c956:	f04f 0800 	mov.w	r8, #0
 810c95a:	e6d4      	b.n	810c706 <_strtod_l+0x43e>
 810c95c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810c960:	fa02 f303 	lsl.w	r3, r2, r3
 810c964:	ea03 0a0a 	and.w	sl, r3, sl
 810c968:	e7b0      	b.n	810c8cc <_strtod_l+0x604>
 810c96a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810c96c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810c96e:	2d00      	cmp	r5, #0
 810c970:	bfab      	itete	ge
 810c972:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810c974:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810c976:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810c978:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810c97a:	bfac      	ite	ge
 810c97c:	18ef      	addge	r7, r5, r3
 810c97e:	1b5e      	sublt	r6, r3, r5
 810c980:	9b08      	ldr	r3, [sp, #32]
 810c982:	1aed      	subs	r5, r5, r3
 810c984:	4415      	add	r5, r2
 810c986:	4b66      	ldr	r3, [pc, #408]	@ (810cb20 <_strtod_l+0x858>)
 810c988:	3d01      	subs	r5, #1
 810c98a:	429d      	cmp	r5, r3
 810c98c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810c990:	da50      	bge.n	810ca34 <_strtod_l+0x76c>
 810c992:	1b5b      	subs	r3, r3, r5
 810c994:	2b1f      	cmp	r3, #31
 810c996:	eba2 0203 	sub.w	r2, r2, r3
 810c99a:	f04f 0101 	mov.w	r1, #1
 810c99e:	dc3d      	bgt.n	810ca1c <_strtod_l+0x754>
 810c9a0:	fa01 f303 	lsl.w	r3, r1, r3
 810c9a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 810c9a6:	2300      	movs	r3, #0
 810c9a8:	9310      	str	r3, [sp, #64]	@ 0x40
 810c9aa:	18bd      	adds	r5, r7, r2
 810c9ac:	9b08      	ldr	r3, [sp, #32]
 810c9ae:	42af      	cmp	r7, r5
 810c9b0:	4416      	add	r6, r2
 810c9b2:	441e      	add	r6, r3
 810c9b4:	463b      	mov	r3, r7
 810c9b6:	bfa8      	it	ge
 810c9b8:	462b      	movge	r3, r5
 810c9ba:	42b3      	cmp	r3, r6
 810c9bc:	bfa8      	it	ge
 810c9be:	4633      	movge	r3, r6
 810c9c0:	2b00      	cmp	r3, #0
 810c9c2:	bfc2      	ittt	gt
 810c9c4:	1aed      	subgt	r5, r5, r3
 810c9c6:	1af6      	subgt	r6, r6, r3
 810c9c8:	1aff      	subgt	r7, r7, r3
 810c9ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810c9cc:	2b00      	cmp	r3, #0
 810c9ce:	dd16      	ble.n	810c9fe <_strtod_l+0x736>
 810c9d0:	4641      	mov	r1, r8
 810c9d2:	9805      	ldr	r0, [sp, #20]
 810c9d4:	461a      	mov	r2, r3
 810c9d6:	f7ff f9a5 	bl	810bd24 <__pow5mult>
 810c9da:	4680      	mov	r8, r0
 810c9dc:	2800      	cmp	r0, #0
 810c9de:	d0ba      	beq.n	810c956 <_strtod_l+0x68e>
 810c9e0:	4601      	mov	r1, r0
 810c9e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810c9e4:	9805      	ldr	r0, [sp, #20]
 810c9e6:	f7ff f8f3 	bl	810bbd0 <__multiply>
 810c9ea:	900e      	str	r0, [sp, #56]	@ 0x38
 810c9ec:	2800      	cmp	r0, #0
 810c9ee:	f43f ae8a 	beq.w	810c706 <_strtod_l+0x43e>
 810c9f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c9f4:	9805      	ldr	r0, [sp, #20]
 810c9f6:	f7fe ffd7 	bl	810b9a8 <_Bfree>
 810c9fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810c9fc:	931a      	str	r3, [sp, #104]	@ 0x68
 810c9fe:	2d00      	cmp	r5, #0
 810ca00:	dc1d      	bgt.n	810ca3e <_strtod_l+0x776>
 810ca02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ca04:	2b00      	cmp	r3, #0
 810ca06:	dd23      	ble.n	810ca50 <_strtod_l+0x788>
 810ca08:	4649      	mov	r1, r9
 810ca0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810ca0c:	9805      	ldr	r0, [sp, #20]
 810ca0e:	f7ff f989 	bl	810bd24 <__pow5mult>
 810ca12:	4681      	mov	r9, r0
 810ca14:	b9e0      	cbnz	r0, 810ca50 <_strtod_l+0x788>
 810ca16:	f04f 0900 	mov.w	r9, #0
 810ca1a:	e674      	b.n	810c706 <_strtod_l+0x43e>
 810ca1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810ca20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810ca24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810ca28:	35e2      	adds	r5, #226	@ 0xe2
 810ca2a:	fa01 f305 	lsl.w	r3, r1, r5
 810ca2e:	9310      	str	r3, [sp, #64]	@ 0x40
 810ca30:	9113      	str	r1, [sp, #76]	@ 0x4c
 810ca32:	e7ba      	b.n	810c9aa <_strtod_l+0x6e2>
 810ca34:	2300      	movs	r3, #0
 810ca36:	9310      	str	r3, [sp, #64]	@ 0x40
 810ca38:	2301      	movs	r3, #1
 810ca3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ca3c:	e7b5      	b.n	810c9aa <_strtod_l+0x6e2>
 810ca3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ca40:	9805      	ldr	r0, [sp, #20]
 810ca42:	462a      	mov	r2, r5
 810ca44:	f7ff f9c8 	bl	810bdd8 <__lshift>
 810ca48:	901a      	str	r0, [sp, #104]	@ 0x68
 810ca4a:	2800      	cmp	r0, #0
 810ca4c:	d1d9      	bne.n	810ca02 <_strtod_l+0x73a>
 810ca4e:	e65a      	b.n	810c706 <_strtod_l+0x43e>
 810ca50:	2e00      	cmp	r6, #0
 810ca52:	dd07      	ble.n	810ca64 <_strtod_l+0x79c>
 810ca54:	4649      	mov	r1, r9
 810ca56:	9805      	ldr	r0, [sp, #20]
 810ca58:	4632      	mov	r2, r6
 810ca5a:	f7ff f9bd 	bl	810bdd8 <__lshift>
 810ca5e:	4681      	mov	r9, r0
 810ca60:	2800      	cmp	r0, #0
 810ca62:	d0d8      	beq.n	810ca16 <_strtod_l+0x74e>
 810ca64:	2f00      	cmp	r7, #0
 810ca66:	dd08      	ble.n	810ca7a <_strtod_l+0x7b2>
 810ca68:	4641      	mov	r1, r8
 810ca6a:	9805      	ldr	r0, [sp, #20]
 810ca6c:	463a      	mov	r2, r7
 810ca6e:	f7ff f9b3 	bl	810bdd8 <__lshift>
 810ca72:	4680      	mov	r8, r0
 810ca74:	2800      	cmp	r0, #0
 810ca76:	f43f ae46 	beq.w	810c706 <_strtod_l+0x43e>
 810ca7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ca7c:	9805      	ldr	r0, [sp, #20]
 810ca7e:	464a      	mov	r2, r9
 810ca80:	f7ff fa32 	bl	810bee8 <__mdiff>
 810ca84:	4604      	mov	r4, r0
 810ca86:	2800      	cmp	r0, #0
 810ca88:	f43f ae3d 	beq.w	810c706 <_strtod_l+0x43e>
 810ca8c:	68c3      	ldr	r3, [r0, #12]
 810ca8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 810ca90:	2300      	movs	r3, #0
 810ca92:	60c3      	str	r3, [r0, #12]
 810ca94:	4641      	mov	r1, r8
 810ca96:	f7ff fa0b 	bl	810beb0 <__mcmp>
 810ca9a:	2800      	cmp	r0, #0
 810ca9c:	da46      	bge.n	810cb2c <_strtod_l+0x864>
 810ca9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810caa0:	ea53 030a 	orrs.w	r3, r3, sl
 810caa4:	d16c      	bne.n	810cb80 <_strtod_l+0x8b8>
 810caa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810caaa:	2b00      	cmp	r3, #0
 810caac:	d168      	bne.n	810cb80 <_strtod_l+0x8b8>
 810caae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cab2:	0d1b      	lsrs	r3, r3, #20
 810cab4:	051b      	lsls	r3, r3, #20
 810cab6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810caba:	d961      	bls.n	810cb80 <_strtod_l+0x8b8>
 810cabc:	6963      	ldr	r3, [r4, #20]
 810cabe:	b913      	cbnz	r3, 810cac6 <_strtod_l+0x7fe>
 810cac0:	6923      	ldr	r3, [r4, #16]
 810cac2:	2b01      	cmp	r3, #1
 810cac4:	dd5c      	ble.n	810cb80 <_strtod_l+0x8b8>
 810cac6:	4621      	mov	r1, r4
 810cac8:	2201      	movs	r2, #1
 810caca:	9805      	ldr	r0, [sp, #20]
 810cacc:	f7ff f984 	bl	810bdd8 <__lshift>
 810cad0:	4641      	mov	r1, r8
 810cad2:	4604      	mov	r4, r0
 810cad4:	f7ff f9ec 	bl	810beb0 <__mcmp>
 810cad8:	2800      	cmp	r0, #0
 810cada:	dd51      	ble.n	810cb80 <_strtod_l+0x8b8>
 810cadc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cae0:	9a08      	ldr	r2, [sp, #32]
 810cae2:	0d1b      	lsrs	r3, r3, #20
 810cae4:	051b      	lsls	r3, r3, #20
 810cae6:	2a00      	cmp	r2, #0
 810cae8:	d06b      	beq.n	810cbc2 <_strtod_l+0x8fa>
 810caea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810caee:	d868      	bhi.n	810cbc2 <_strtod_l+0x8fa>
 810caf0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810caf4:	f67f ae9d 	bls.w	810c832 <_strtod_l+0x56a>
 810caf8:	4b0a      	ldr	r3, [pc, #40]	@ (810cb24 <_strtod_l+0x85c>)
 810cafa:	4650      	mov	r0, sl
 810cafc:	4659      	mov	r1, fp
 810cafe:	2200      	movs	r2, #0
 810cb00:	f7f3 fe02 	bl	8100708 <__aeabi_dmul>
 810cb04:	4b08      	ldr	r3, [pc, #32]	@ (810cb28 <_strtod_l+0x860>)
 810cb06:	400b      	ands	r3, r1
 810cb08:	4682      	mov	sl, r0
 810cb0a:	468b      	mov	fp, r1
 810cb0c:	2b00      	cmp	r3, #0
 810cb0e:	f47f ae05 	bne.w	810c71c <_strtod_l+0x454>
 810cb12:	9a05      	ldr	r2, [sp, #20]
 810cb14:	2322      	movs	r3, #34	@ 0x22
 810cb16:	6013      	str	r3, [r2, #0]
 810cb18:	e600      	b.n	810c71c <_strtod_l+0x454>
 810cb1a:	bf00      	nop
 810cb1c:	0810ea50 	.word	0x0810ea50
 810cb20:	fffffc02 	.word	0xfffffc02
 810cb24:	39500000 	.word	0x39500000
 810cb28:	7ff00000 	.word	0x7ff00000
 810cb2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cb30:	d165      	bne.n	810cbfe <_strtod_l+0x936>
 810cb32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810cb34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cb38:	b35a      	cbz	r2, 810cb92 <_strtod_l+0x8ca>
 810cb3a:	4a9f      	ldr	r2, [pc, #636]	@ (810cdb8 <_strtod_l+0xaf0>)
 810cb3c:	4293      	cmp	r3, r2
 810cb3e:	d12b      	bne.n	810cb98 <_strtod_l+0x8d0>
 810cb40:	9b08      	ldr	r3, [sp, #32]
 810cb42:	4651      	mov	r1, sl
 810cb44:	b303      	cbz	r3, 810cb88 <_strtod_l+0x8c0>
 810cb46:	4b9d      	ldr	r3, [pc, #628]	@ (810cdbc <_strtod_l+0xaf4>)
 810cb48:	465a      	mov	r2, fp
 810cb4a:	4013      	ands	r3, r2
 810cb4c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810cb50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810cb54:	d81b      	bhi.n	810cb8e <_strtod_l+0x8c6>
 810cb56:	0d1b      	lsrs	r3, r3, #20
 810cb58:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810cb5c:	fa02 f303 	lsl.w	r3, r2, r3
 810cb60:	4299      	cmp	r1, r3
 810cb62:	d119      	bne.n	810cb98 <_strtod_l+0x8d0>
 810cb64:	4b96      	ldr	r3, [pc, #600]	@ (810cdc0 <_strtod_l+0xaf8>)
 810cb66:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cb68:	429a      	cmp	r2, r3
 810cb6a:	d102      	bne.n	810cb72 <_strtod_l+0x8aa>
 810cb6c:	3101      	adds	r1, #1
 810cb6e:	f43f adca 	beq.w	810c706 <_strtod_l+0x43e>
 810cb72:	4b92      	ldr	r3, [pc, #584]	@ (810cdbc <_strtod_l+0xaf4>)
 810cb74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cb76:	401a      	ands	r2, r3
 810cb78:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810cb7c:	f04f 0a00 	mov.w	sl, #0
 810cb80:	9b08      	ldr	r3, [sp, #32]
 810cb82:	2b00      	cmp	r3, #0
 810cb84:	d1b8      	bne.n	810caf8 <_strtod_l+0x830>
 810cb86:	e5c9      	b.n	810c71c <_strtod_l+0x454>
 810cb88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810cb8c:	e7e8      	b.n	810cb60 <_strtod_l+0x898>
 810cb8e:	4613      	mov	r3, r2
 810cb90:	e7e6      	b.n	810cb60 <_strtod_l+0x898>
 810cb92:	ea53 030a 	orrs.w	r3, r3, sl
 810cb96:	d0a1      	beq.n	810cadc <_strtod_l+0x814>
 810cb98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810cb9a:	b1db      	cbz	r3, 810cbd4 <_strtod_l+0x90c>
 810cb9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cb9e:	4213      	tst	r3, r2
 810cba0:	d0ee      	beq.n	810cb80 <_strtod_l+0x8b8>
 810cba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cba4:	9a08      	ldr	r2, [sp, #32]
 810cba6:	4650      	mov	r0, sl
 810cba8:	4659      	mov	r1, fp
 810cbaa:	b1bb      	cbz	r3, 810cbdc <_strtod_l+0x914>
 810cbac:	f7ff fb6e 	bl	810c28c <sulp>
 810cbb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cbb4:	ec53 2b10 	vmov	r2, r3, d0
 810cbb8:	f7f3 fbf0 	bl	810039c <__adddf3>
 810cbbc:	4682      	mov	sl, r0
 810cbbe:	468b      	mov	fp, r1
 810cbc0:	e7de      	b.n	810cb80 <_strtod_l+0x8b8>
 810cbc2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810cbc6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810cbca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810cbce:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810cbd2:	e7d5      	b.n	810cb80 <_strtod_l+0x8b8>
 810cbd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810cbd6:	ea13 0f0a 	tst.w	r3, sl
 810cbda:	e7e1      	b.n	810cba0 <_strtod_l+0x8d8>
 810cbdc:	f7ff fb56 	bl	810c28c <sulp>
 810cbe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cbe4:	ec53 2b10 	vmov	r2, r3, d0
 810cbe8:	f7f3 fbd6 	bl	8100398 <__aeabi_dsub>
 810cbec:	2200      	movs	r2, #0
 810cbee:	2300      	movs	r3, #0
 810cbf0:	4682      	mov	sl, r0
 810cbf2:	468b      	mov	fp, r1
 810cbf4:	f7f3 fff0 	bl	8100bd8 <__aeabi_dcmpeq>
 810cbf8:	2800      	cmp	r0, #0
 810cbfa:	d0c1      	beq.n	810cb80 <_strtod_l+0x8b8>
 810cbfc:	e619      	b.n	810c832 <_strtod_l+0x56a>
 810cbfe:	4641      	mov	r1, r8
 810cc00:	4620      	mov	r0, r4
 810cc02:	f7ff facd 	bl	810c1a0 <__ratio>
 810cc06:	ec57 6b10 	vmov	r6, r7, d0
 810cc0a:	2200      	movs	r2, #0
 810cc0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810cc10:	4630      	mov	r0, r6
 810cc12:	4639      	mov	r1, r7
 810cc14:	f7f3 fff4 	bl	8100c00 <__aeabi_dcmple>
 810cc18:	2800      	cmp	r0, #0
 810cc1a:	d06f      	beq.n	810ccfc <_strtod_l+0xa34>
 810cc1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cc1e:	2b00      	cmp	r3, #0
 810cc20:	d17a      	bne.n	810cd18 <_strtod_l+0xa50>
 810cc22:	f1ba 0f00 	cmp.w	sl, #0
 810cc26:	d158      	bne.n	810ccda <_strtod_l+0xa12>
 810cc28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cc2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810cc2e:	2b00      	cmp	r3, #0
 810cc30:	d15a      	bne.n	810cce8 <_strtod_l+0xa20>
 810cc32:	4b64      	ldr	r3, [pc, #400]	@ (810cdc4 <_strtod_l+0xafc>)
 810cc34:	2200      	movs	r2, #0
 810cc36:	4630      	mov	r0, r6
 810cc38:	4639      	mov	r1, r7
 810cc3a:	f7f3 ffd7 	bl	8100bec <__aeabi_dcmplt>
 810cc3e:	2800      	cmp	r0, #0
 810cc40:	d159      	bne.n	810ccf6 <_strtod_l+0xa2e>
 810cc42:	4630      	mov	r0, r6
 810cc44:	4639      	mov	r1, r7
 810cc46:	4b60      	ldr	r3, [pc, #384]	@ (810cdc8 <_strtod_l+0xb00>)
 810cc48:	2200      	movs	r2, #0
 810cc4a:	f7f3 fd5d 	bl	8100708 <__aeabi_dmul>
 810cc4e:	4606      	mov	r6, r0
 810cc50:	460f      	mov	r7, r1
 810cc52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810cc56:	9606      	str	r6, [sp, #24]
 810cc58:	9307      	str	r3, [sp, #28]
 810cc5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cc5e:	4d57      	ldr	r5, [pc, #348]	@ (810cdbc <_strtod_l+0xaf4>)
 810cc60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810cc64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cc66:	401d      	ands	r5, r3
 810cc68:	4b58      	ldr	r3, [pc, #352]	@ (810cdcc <_strtod_l+0xb04>)
 810cc6a:	429d      	cmp	r5, r3
 810cc6c:	f040 80b2 	bne.w	810cdd4 <_strtod_l+0xb0c>
 810cc70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cc72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810cc76:	ec4b ab10 	vmov	d0, sl, fp
 810cc7a:	f7ff f9c9 	bl	810c010 <__ulp>
 810cc7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cc82:	ec51 0b10 	vmov	r0, r1, d0
 810cc86:	f7f3 fd3f 	bl	8100708 <__aeabi_dmul>
 810cc8a:	4652      	mov	r2, sl
 810cc8c:	465b      	mov	r3, fp
 810cc8e:	f7f3 fb85 	bl	810039c <__adddf3>
 810cc92:	460b      	mov	r3, r1
 810cc94:	4949      	ldr	r1, [pc, #292]	@ (810cdbc <_strtod_l+0xaf4>)
 810cc96:	4a4e      	ldr	r2, [pc, #312]	@ (810cdd0 <_strtod_l+0xb08>)
 810cc98:	4019      	ands	r1, r3
 810cc9a:	4291      	cmp	r1, r2
 810cc9c:	4682      	mov	sl, r0
 810cc9e:	d942      	bls.n	810cd26 <_strtod_l+0xa5e>
 810cca0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810cca2:	4b47      	ldr	r3, [pc, #284]	@ (810cdc0 <_strtod_l+0xaf8>)
 810cca4:	429a      	cmp	r2, r3
 810cca6:	d103      	bne.n	810ccb0 <_strtod_l+0x9e8>
 810cca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810ccaa:	3301      	adds	r3, #1
 810ccac:	f43f ad2b 	beq.w	810c706 <_strtod_l+0x43e>
 810ccb0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810cdc0 <_strtod_l+0xaf8>
 810ccb4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810ccb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ccba:	9805      	ldr	r0, [sp, #20]
 810ccbc:	f7fe fe74 	bl	810b9a8 <_Bfree>
 810ccc0:	9805      	ldr	r0, [sp, #20]
 810ccc2:	4649      	mov	r1, r9
 810ccc4:	f7fe fe70 	bl	810b9a8 <_Bfree>
 810ccc8:	9805      	ldr	r0, [sp, #20]
 810ccca:	4641      	mov	r1, r8
 810cccc:	f7fe fe6c 	bl	810b9a8 <_Bfree>
 810ccd0:	9805      	ldr	r0, [sp, #20]
 810ccd2:	4621      	mov	r1, r4
 810ccd4:	f7fe fe68 	bl	810b9a8 <_Bfree>
 810ccd8:	e618      	b.n	810c90c <_strtod_l+0x644>
 810ccda:	f1ba 0f01 	cmp.w	sl, #1
 810ccde:	d103      	bne.n	810cce8 <_strtod_l+0xa20>
 810cce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cce2:	2b00      	cmp	r3, #0
 810cce4:	f43f ada5 	beq.w	810c832 <_strtod_l+0x56a>
 810cce8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810cd98 <_strtod_l+0xad0>
 810ccec:	4f35      	ldr	r7, [pc, #212]	@ (810cdc4 <_strtod_l+0xafc>)
 810ccee:	ed8d 7b06 	vstr	d7, [sp, #24]
 810ccf2:	2600      	movs	r6, #0
 810ccf4:	e7b1      	b.n	810cc5a <_strtod_l+0x992>
 810ccf6:	4f34      	ldr	r7, [pc, #208]	@ (810cdc8 <_strtod_l+0xb00>)
 810ccf8:	2600      	movs	r6, #0
 810ccfa:	e7aa      	b.n	810cc52 <_strtod_l+0x98a>
 810ccfc:	4b32      	ldr	r3, [pc, #200]	@ (810cdc8 <_strtod_l+0xb00>)
 810ccfe:	4630      	mov	r0, r6
 810cd00:	4639      	mov	r1, r7
 810cd02:	2200      	movs	r2, #0
 810cd04:	f7f3 fd00 	bl	8100708 <__aeabi_dmul>
 810cd08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cd0a:	4606      	mov	r6, r0
 810cd0c:	460f      	mov	r7, r1
 810cd0e:	2b00      	cmp	r3, #0
 810cd10:	d09f      	beq.n	810cc52 <_strtod_l+0x98a>
 810cd12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810cd16:	e7a0      	b.n	810cc5a <_strtod_l+0x992>
 810cd18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810cda0 <_strtod_l+0xad8>
 810cd1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cd20:	ec57 6b17 	vmov	r6, r7, d7
 810cd24:	e799      	b.n	810cc5a <_strtod_l+0x992>
 810cd26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810cd2a:	9b08      	ldr	r3, [sp, #32]
 810cd2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cd30:	2b00      	cmp	r3, #0
 810cd32:	d1c1      	bne.n	810ccb8 <_strtod_l+0x9f0>
 810cd34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cd38:	0d1b      	lsrs	r3, r3, #20
 810cd3a:	051b      	lsls	r3, r3, #20
 810cd3c:	429d      	cmp	r5, r3
 810cd3e:	d1bb      	bne.n	810ccb8 <_strtod_l+0x9f0>
 810cd40:	4630      	mov	r0, r6
 810cd42:	4639      	mov	r1, r7
 810cd44:	f7f4 f840 	bl	8100dc8 <__aeabi_d2lz>
 810cd48:	f7f3 fcb0 	bl	81006ac <__aeabi_l2d>
 810cd4c:	4602      	mov	r2, r0
 810cd4e:	460b      	mov	r3, r1
 810cd50:	4630      	mov	r0, r6
 810cd52:	4639      	mov	r1, r7
 810cd54:	f7f3 fb20 	bl	8100398 <__aeabi_dsub>
 810cd58:	460b      	mov	r3, r1
 810cd5a:	4602      	mov	r2, r0
 810cd5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810cd60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810cd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cd66:	ea46 060a 	orr.w	r6, r6, sl
 810cd6a:	431e      	orrs	r6, r3
 810cd6c:	d06f      	beq.n	810ce4e <_strtod_l+0xb86>
 810cd6e:	a30e      	add	r3, pc, #56	@ (adr r3, 810cda8 <_strtod_l+0xae0>)
 810cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd74:	f7f3 ff3a 	bl	8100bec <__aeabi_dcmplt>
 810cd78:	2800      	cmp	r0, #0
 810cd7a:	f47f accf 	bne.w	810c71c <_strtod_l+0x454>
 810cd7e:	a30c      	add	r3, pc, #48	@ (adr r3, 810cdb0 <_strtod_l+0xae8>)
 810cd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cd84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cd88:	f7f3 ff4e 	bl	8100c28 <__aeabi_dcmpgt>
 810cd8c:	2800      	cmp	r0, #0
 810cd8e:	d093      	beq.n	810ccb8 <_strtod_l+0x9f0>
 810cd90:	e4c4      	b.n	810c71c <_strtod_l+0x454>
 810cd92:	bf00      	nop
 810cd94:	f3af 8000 	nop.w
 810cd98:	00000000 	.word	0x00000000
 810cd9c:	bff00000 	.word	0xbff00000
 810cda0:	00000000 	.word	0x00000000
 810cda4:	3ff00000 	.word	0x3ff00000
 810cda8:	94a03595 	.word	0x94a03595
 810cdac:	3fdfffff 	.word	0x3fdfffff
 810cdb0:	35afe535 	.word	0x35afe535
 810cdb4:	3fe00000 	.word	0x3fe00000
 810cdb8:	000fffff 	.word	0x000fffff
 810cdbc:	7ff00000 	.word	0x7ff00000
 810cdc0:	7fefffff 	.word	0x7fefffff
 810cdc4:	3ff00000 	.word	0x3ff00000
 810cdc8:	3fe00000 	.word	0x3fe00000
 810cdcc:	7fe00000 	.word	0x7fe00000
 810cdd0:	7c9fffff 	.word	0x7c9fffff
 810cdd4:	9b08      	ldr	r3, [sp, #32]
 810cdd6:	b323      	cbz	r3, 810ce22 <_strtod_l+0xb5a>
 810cdd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810cddc:	d821      	bhi.n	810ce22 <_strtod_l+0xb5a>
 810cdde:	a328      	add	r3, pc, #160	@ (adr r3, 810ce80 <_strtod_l+0xbb8>)
 810cde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cde4:	4630      	mov	r0, r6
 810cde6:	4639      	mov	r1, r7
 810cde8:	f7f3 ff0a 	bl	8100c00 <__aeabi_dcmple>
 810cdec:	b1a0      	cbz	r0, 810ce18 <_strtod_l+0xb50>
 810cdee:	4639      	mov	r1, r7
 810cdf0:	4630      	mov	r0, r6
 810cdf2:	f7f3 ff61 	bl	8100cb8 <__aeabi_d2uiz>
 810cdf6:	2801      	cmp	r0, #1
 810cdf8:	bf38      	it	cc
 810cdfa:	2001      	movcc	r0, #1
 810cdfc:	f7f3 fc0a 	bl	8100614 <__aeabi_ui2d>
 810ce00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ce02:	4606      	mov	r6, r0
 810ce04:	460f      	mov	r7, r1
 810ce06:	b9fb      	cbnz	r3, 810ce48 <_strtod_l+0xb80>
 810ce08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810ce0c:	9014      	str	r0, [sp, #80]	@ 0x50
 810ce0e:	9315      	str	r3, [sp, #84]	@ 0x54
 810ce10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810ce14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810ce18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810ce1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810ce1e:	1b5b      	subs	r3, r3, r5
 810ce20:	9311      	str	r3, [sp, #68]	@ 0x44
 810ce22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810ce26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810ce2a:	f7ff f8f1 	bl	810c010 <__ulp>
 810ce2e:	4650      	mov	r0, sl
 810ce30:	ec53 2b10 	vmov	r2, r3, d0
 810ce34:	4659      	mov	r1, fp
 810ce36:	f7f3 fc67 	bl	8100708 <__aeabi_dmul>
 810ce3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810ce3e:	f7f3 faad 	bl	810039c <__adddf3>
 810ce42:	4682      	mov	sl, r0
 810ce44:	468b      	mov	fp, r1
 810ce46:	e770      	b.n	810cd2a <_strtod_l+0xa62>
 810ce48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810ce4c:	e7e0      	b.n	810ce10 <_strtod_l+0xb48>
 810ce4e:	a30e      	add	r3, pc, #56	@ (adr r3, 810ce88 <_strtod_l+0xbc0>)
 810ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce54:	f7f3 feca 	bl	8100bec <__aeabi_dcmplt>
 810ce58:	e798      	b.n	810cd8c <_strtod_l+0xac4>
 810ce5a:	2300      	movs	r3, #0
 810ce5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ce5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810ce60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810ce62:	6013      	str	r3, [r2, #0]
 810ce64:	f7ff ba6d 	b.w	810c342 <_strtod_l+0x7a>
 810ce68:	2a65      	cmp	r2, #101	@ 0x65
 810ce6a:	f43f ab66 	beq.w	810c53a <_strtod_l+0x272>
 810ce6e:	2a45      	cmp	r2, #69	@ 0x45
 810ce70:	f43f ab63 	beq.w	810c53a <_strtod_l+0x272>
 810ce74:	2301      	movs	r3, #1
 810ce76:	f7ff bb9e 	b.w	810c5b6 <_strtod_l+0x2ee>
 810ce7a:	bf00      	nop
 810ce7c:	f3af 8000 	nop.w
 810ce80:	ffc00000 	.word	0xffc00000
 810ce84:	41dfffff 	.word	0x41dfffff
 810ce88:	94a03595 	.word	0x94a03595
 810ce8c:	3fcfffff 	.word	0x3fcfffff

0810ce90 <_strtod_r>:
 810ce90:	4b01      	ldr	r3, [pc, #4]	@ (810ce98 <_strtod_r+0x8>)
 810ce92:	f7ff ba19 	b.w	810c2c8 <_strtod_l>
 810ce96:	bf00      	nop
 810ce98:	10000078 	.word	0x10000078

0810ce9c <_strtol_l.constprop.0>:
 810ce9c:	2b24      	cmp	r3, #36	@ 0x24
 810ce9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cea2:	4686      	mov	lr, r0
 810cea4:	4690      	mov	r8, r2
 810cea6:	d801      	bhi.n	810ceac <_strtol_l.constprop.0+0x10>
 810cea8:	2b01      	cmp	r3, #1
 810ceaa:	d106      	bne.n	810ceba <_strtol_l.constprop.0+0x1e>
 810ceac:	f7fd fdae 	bl	810aa0c <__errno>
 810ceb0:	2316      	movs	r3, #22
 810ceb2:	6003      	str	r3, [r0, #0]
 810ceb4:	2000      	movs	r0, #0
 810ceb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ceba:	4834      	ldr	r0, [pc, #208]	@ (810cf8c <_strtol_l.constprop.0+0xf0>)
 810cebc:	460d      	mov	r5, r1
 810cebe:	462a      	mov	r2, r5
 810cec0:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cec4:	5d06      	ldrb	r6, [r0, r4]
 810cec6:	f016 0608 	ands.w	r6, r6, #8
 810ceca:	d1f8      	bne.n	810cebe <_strtol_l.constprop.0+0x22>
 810cecc:	2c2d      	cmp	r4, #45	@ 0x2d
 810cece:	d12d      	bne.n	810cf2c <_strtol_l.constprop.0+0x90>
 810ced0:	782c      	ldrb	r4, [r5, #0]
 810ced2:	2601      	movs	r6, #1
 810ced4:	1c95      	adds	r5, r2, #2
 810ced6:	f033 0210 	bics.w	r2, r3, #16
 810ceda:	d109      	bne.n	810cef0 <_strtol_l.constprop.0+0x54>
 810cedc:	2c30      	cmp	r4, #48	@ 0x30
 810cede:	d12a      	bne.n	810cf36 <_strtol_l.constprop.0+0x9a>
 810cee0:	782a      	ldrb	r2, [r5, #0]
 810cee2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810cee6:	2a58      	cmp	r2, #88	@ 0x58
 810cee8:	d125      	bne.n	810cf36 <_strtol_l.constprop.0+0x9a>
 810ceea:	786c      	ldrb	r4, [r5, #1]
 810ceec:	2310      	movs	r3, #16
 810ceee:	3502      	adds	r5, #2
 810cef0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810cef4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 810cef8:	2200      	movs	r2, #0
 810cefa:	fbbc f9f3 	udiv	r9, ip, r3
 810cefe:	4610      	mov	r0, r2
 810cf00:	fb03 ca19 	mls	sl, r3, r9, ip
 810cf04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810cf08:	2f09      	cmp	r7, #9
 810cf0a:	d81b      	bhi.n	810cf44 <_strtol_l.constprop.0+0xa8>
 810cf0c:	463c      	mov	r4, r7
 810cf0e:	42a3      	cmp	r3, r4
 810cf10:	dd27      	ble.n	810cf62 <_strtol_l.constprop.0+0xc6>
 810cf12:	1c57      	adds	r7, r2, #1
 810cf14:	d007      	beq.n	810cf26 <_strtol_l.constprop.0+0x8a>
 810cf16:	4581      	cmp	r9, r0
 810cf18:	d320      	bcc.n	810cf5c <_strtol_l.constprop.0+0xc0>
 810cf1a:	d101      	bne.n	810cf20 <_strtol_l.constprop.0+0x84>
 810cf1c:	45a2      	cmp	sl, r4
 810cf1e:	db1d      	blt.n	810cf5c <_strtol_l.constprop.0+0xc0>
 810cf20:	fb00 4003 	mla	r0, r0, r3, r4
 810cf24:	2201      	movs	r2, #1
 810cf26:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cf2a:	e7eb      	b.n	810cf04 <_strtol_l.constprop.0+0x68>
 810cf2c:	2c2b      	cmp	r4, #43	@ 0x2b
 810cf2e:	bf04      	itt	eq
 810cf30:	782c      	ldrbeq	r4, [r5, #0]
 810cf32:	1c95      	addeq	r5, r2, #2
 810cf34:	e7cf      	b.n	810ced6 <_strtol_l.constprop.0+0x3a>
 810cf36:	2b00      	cmp	r3, #0
 810cf38:	d1da      	bne.n	810cef0 <_strtol_l.constprop.0+0x54>
 810cf3a:	2c30      	cmp	r4, #48	@ 0x30
 810cf3c:	bf0c      	ite	eq
 810cf3e:	2308      	moveq	r3, #8
 810cf40:	230a      	movne	r3, #10
 810cf42:	e7d5      	b.n	810cef0 <_strtol_l.constprop.0+0x54>
 810cf44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810cf48:	2f19      	cmp	r7, #25
 810cf4a:	d801      	bhi.n	810cf50 <_strtol_l.constprop.0+0xb4>
 810cf4c:	3c37      	subs	r4, #55	@ 0x37
 810cf4e:	e7de      	b.n	810cf0e <_strtol_l.constprop.0+0x72>
 810cf50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810cf54:	2f19      	cmp	r7, #25
 810cf56:	d804      	bhi.n	810cf62 <_strtol_l.constprop.0+0xc6>
 810cf58:	3c57      	subs	r4, #87	@ 0x57
 810cf5a:	e7d8      	b.n	810cf0e <_strtol_l.constprop.0+0x72>
 810cf5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810cf60:	e7e1      	b.n	810cf26 <_strtol_l.constprop.0+0x8a>
 810cf62:	1c53      	adds	r3, r2, #1
 810cf64:	d108      	bne.n	810cf78 <_strtol_l.constprop.0+0xdc>
 810cf66:	2322      	movs	r3, #34	@ 0x22
 810cf68:	f8ce 3000 	str.w	r3, [lr]
 810cf6c:	4660      	mov	r0, ip
 810cf6e:	f1b8 0f00 	cmp.w	r8, #0
 810cf72:	d0a0      	beq.n	810ceb6 <_strtol_l.constprop.0+0x1a>
 810cf74:	1e69      	subs	r1, r5, #1
 810cf76:	e006      	b.n	810cf86 <_strtol_l.constprop.0+0xea>
 810cf78:	b106      	cbz	r6, 810cf7c <_strtol_l.constprop.0+0xe0>
 810cf7a:	4240      	negs	r0, r0
 810cf7c:	f1b8 0f00 	cmp.w	r8, #0
 810cf80:	d099      	beq.n	810ceb6 <_strtol_l.constprop.0+0x1a>
 810cf82:	2a00      	cmp	r2, #0
 810cf84:	d1f6      	bne.n	810cf74 <_strtol_l.constprop.0+0xd8>
 810cf86:	f8c8 1000 	str.w	r1, [r8]
 810cf8a:	e794      	b.n	810ceb6 <_strtol_l.constprop.0+0x1a>
 810cf8c:	0810ea79 	.word	0x0810ea79

0810cf90 <_strtol_r>:
 810cf90:	f7ff bf84 	b.w	810ce9c <_strtol_l.constprop.0>

0810cf94 <__ssputs_r>:
 810cf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cf98:	688e      	ldr	r6, [r1, #8]
 810cf9a:	461f      	mov	r7, r3
 810cf9c:	42be      	cmp	r6, r7
 810cf9e:	680b      	ldr	r3, [r1, #0]
 810cfa0:	4682      	mov	sl, r0
 810cfa2:	460c      	mov	r4, r1
 810cfa4:	4690      	mov	r8, r2
 810cfa6:	d82d      	bhi.n	810d004 <__ssputs_r+0x70>
 810cfa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810cfac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810cfb0:	d026      	beq.n	810d000 <__ssputs_r+0x6c>
 810cfb2:	6965      	ldr	r5, [r4, #20]
 810cfb4:	6909      	ldr	r1, [r1, #16]
 810cfb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810cfba:	eba3 0901 	sub.w	r9, r3, r1
 810cfbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810cfc2:	1c7b      	adds	r3, r7, #1
 810cfc4:	444b      	add	r3, r9
 810cfc6:	106d      	asrs	r5, r5, #1
 810cfc8:	429d      	cmp	r5, r3
 810cfca:	bf38      	it	cc
 810cfcc:	461d      	movcc	r5, r3
 810cfce:	0553      	lsls	r3, r2, #21
 810cfd0:	d527      	bpl.n	810d022 <__ssputs_r+0x8e>
 810cfd2:	4629      	mov	r1, r5
 810cfd4:	f7fe fc1c 	bl	810b810 <_malloc_r>
 810cfd8:	4606      	mov	r6, r0
 810cfda:	b360      	cbz	r0, 810d036 <__ssputs_r+0xa2>
 810cfdc:	6921      	ldr	r1, [r4, #16]
 810cfde:	464a      	mov	r2, r9
 810cfe0:	f7fd fd41 	bl	810aa66 <memcpy>
 810cfe4:	89a3      	ldrh	r3, [r4, #12]
 810cfe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810cfea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810cfee:	81a3      	strh	r3, [r4, #12]
 810cff0:	6126      	str	r6, [r4, #16]
 810cff2:	6165      	str	r5, [r4, #20]
 810cff4:	444e      	add	r6, r9
 810cff6:	eba5 0509 	sub.w	r5, r5, r9
 810cffa:	6026      	str	r6, [r4, #0]
 810cffc:	60a5      	str	r5, [r4, #8]
 810cffe:	463e      	mov	r6, r7
 810d000:	42be      	cmp	r6, r7
 810d002:	d900      	bls.n	810d006 <__ssputs_r+0x72>
 810d004:	463e      	mov	r6, r7
 810d006:	6820      	ldr	r0, [r4, #0]
 810d008:	4632      	mov	r2, r6
 810d00a:	4641      	mov	r1, r8
 810d00c:	f000 fb6a 	bl	810d6e4 <memmove>
 810d010:	68a3      	ldr	r3, [r4, #8]
 810d012:	1b9b      	subs	r3, r3, r6
 810d014:	60a3      	str	r3, [r4, #8]
 810d016:	6823      	ldr	r3, [r4, #0]
 810d018:	4433      	add	r3, r6
 810d01a:	6023      	str	r3, [r4, #0]
 810d01c:	2000      	movs	r0, #0
 810d01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d022:	462a      	mov	r2, r5
 810d024:	f000 ff41 	bl	810deaa <_realloc_r>
 810d028:	4606      	mov	r6, r0
 810d02a:	2800      	cmp	r0, #0
 810d02c:	d1e0      	bne.n	810cff0 <__ssputs_r+0x5c>
 810d02e:	6921      	ldr	r1, [r4, #16]
 810d030:	4650      	mov	r0, sl
 810d032:	f7fe fb79 	bl	810b728 <_free_r>
 810d036:	230c      	movs	r3, #12
 810d038:	f8ca 3000 	str.w	r3, [sl]
 810d03c:	89a3      	ldrh	r3, [r4, #12]
 810d03e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d042:	81a3      	strh	r3, [r4, #12]
 810d044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d048:	e7e9      	b.n	810d01e <__ssputs_r+0x8a>
	...

0810d04c <_svfiprintf_r>:
 810d04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d050:	4698      	mov	r8, r3
 810d052:	898b      	ldrh	r3, [r1, #12]
 810d054:	061b      	lsls	r3, r3, #24
 810d056:	b09d      	sub	sp, #116	@ 0x74
 810d058:	4607      	mov	r7, r0
 810d05a:	460d      	mov	r5, r1
 810d05c:	4614      	mov	r4, r2
 810d05e:	d510      	bpl.n	810d082 <_svfiprintf_r+0x36>
 810d060:	690b      	ldr	r3, [r1, #16]
 810d062:	b973      	cbnz	r3, 810d082 <_svfiprintf_r+0x36>
 810d064:	2140      	movs	r1, #64	@ 0x40
 810d066:	f7fe fbd3 	bl	810b810 <_malloc_r>
 810d06a:	6028      	str	r0, [r5, #0]
 810d06c:	6128      	str	r0, [r5, #16]
 810d06e:	b930      	cbnz	r0, 810d07e <_svfiprintf_r+0x32>
 810d070:	230c      	movs	r3, #12
 810d072:	603b      	str	r3, [r7, #0]
 810d074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d078:	b01d      	add	sp, #116	@ 0x74
 810d07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d07e:	2340      	movs	r3, #64	@ 0x40
 810d080:	616b      	str	r3, [r5, #20]
 810d082:	2300      	movs	r3, #0
 810d084:	9309      	str	r3, [sp, #36]	@ 0x24
 810d086:	2320      	movs	r3, #32
 810d088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d08c:	f8cd 800c 	str.w	r8, [sp, #12]
 810d090:	2330      	movs	r3, #48	@ 0x30
 810d092:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810d230 <_svfiprintf_r+0x1e4>
 810d096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d09a:	f04f 0901 	mov.w	r9, #1
 810d09e:	4623      	mov	r3, r4
 810d0a0:	469a      	mov	sl, r3
 810d0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d0a6:	b10a      	cbz	r2, 810d0ac <_svfiprintf_r+0x60>
 810d0a8:	2a25      	cmp	r2, #37	@ 0x25
 810d0aa:	d1f9      	bne.n	810d0a0 <_svfiprintf_r+0x54>
 810d0ac:	ebba 0b04 	subs.w	fp, sl, r4
 810d0b0:	d00b      	beq.n	810d0ca <_svfiprintf_r+0x7e>
 810d0b2:	465b      	mov	r3, fp
 810d0b4:	4622      	mov	r2, r4
 810d0b6:	4629      	mov	r1, r5
 810d0b8:	4638      	mov	r0, r7
 810d0ba:	f7ff ff6b 	bl	810cf94 <__ssputs_r>
 810d0be:	3001      	adds	r0, #1
 810d0c0:	f000 80a7 	beq.w	810d212 <_svfiprintf_r+0x1c6>
 810d0c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d0c6:	445a      	add	r2, fp
 810d0c8:	9209      	str	r2, [sp, #36]	@ 0x24
 810d0ca:	f89a 3000 	ldrb.w	r3, [sl]
 810d0ce:	2b00      	cmp	r3, #0
 810d0d0:	f000 809f 	beq.w	810d212 <_svfiprintf_r+0x1c6>
 810d0d4:	2300      	movs	r3, #0
 810d0d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d0de:	f10a 0a01 	add.w	sl, sl, #1
 810d0e2:	9304      	str	r3, [sp, #16]
 810d0e4:	9307      	str	r3, [sp, #28]
 810d0e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d0ea:	931a      	str	r3, [sp, #104]	@ 0x68
 810d0ec:	4654      	mov	r4, sl
 810d0ee:	2205      	movs	r2, #5
 810d0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d0f4:	484e      	ldr	r0, [pc, #312]	@ (810d230 <_svfiprintf_r+0x1e4>)
 810d0f6:	f7f3 f8f3 	bl	81002e0 <memchr>
 810d0fa:	9a04      	ldr	r2, [sp, #16]
 810d0fc:	b9d8      	cbnz	r0, 810d136 <_svfiprintf_r+0xea>
 810d0fe:	06d0      	lsls	r0, r2, #27
 810d100:	bf44      	itt	mi
 810d102:	2320      	movmi	r3, #32
 810d104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d108:	0711      	lsls	r1, r2, #28
 810d10a:	bf44      	itt	mi
 810d10c:	232b      	movmi	r3, #43	@ 0x2b
 810d10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d112:	f89a 3000 	ldrb.w	r3, [sl]
 810d116:	2b2a      	cmp	r3, #42	@ 0x2a
 810d118:	d015      	beq.n	810d146 <_svfiprintf_r+0xfa>
 810d11a:	9a07      	ldr	r2, [sp, #28]
 810d11c:	4654      	mov	r4, sl
 810d11e:	2000      	movs	r0, #0
 810d120:	f04f 0c0a 	mov.w	ip, #10
 810d124:	4621      	mov	r1, r4
 810d126:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d12a:	3b30      	subs	r3, #48	@ 0x30
 810d12c:	2b09      	cmp	r3, #9
 810d12e:	d94b      	bls.n	810d1c8 <_svfiprintf_r+0x17c>
 810d130:	b1b0      	cbz	r0, 810d160 <_svfiprintf_r+0x114>
 810d132:	9207      	str	r2, [sp, #28]
 810d134:	e014      	b.n	810d160 <_svfiprintf_r+0x114>
 810d136:	eba0 0308 	sub.w	r3, r0, r8
 810d13a:	fa09 f303 	lsl.w	r3, r9, r3
 810d13e:	4313      	orrs	r3, r2
 810d140:	9304      	str	r3, [sp, #16]
 810d142:	46a2      	mov	sl, r4
 810d144:	e7d2      	b.n	810d0ec <_svfiprintf_r+0xa0>
 810d146:	9b03      	ldr	r3, [sp, #12]
 810d148:	1d19      	adds	r1, r3, #4
 810d14a:	681b      	ldr	r3, [r3, #0]
 810d14c:	9103      	str	r1, [sp, #12]
 810d14e:	2b00      	cmp	r3, #0
 810d150:	bfbb      	ittet	lt
 810d152:	425b      	neglt	r3, r3
 810d154:	f042 0202 	orrlt.w	r2, r2, #2
 810d158:	9307      	strge	r3, [sp, #28]
 810d15a:	9307      	strlt	r3, [sp, #28]
 810d15c:	bfb8      	it	lt
 810d15e:	9204      	strlt	r2, [sp, #16]
 810d160:	7823      	ldrb	r3, [r4, #0]
 810d162:	2b2e      	cmp	r3, #46	@ 0x2e
 810d164:	d10a      	bne.n	810d17c <_svfiprintf_r+0x130>
 810d166:	7863      	ldrb	r3, [r4, #1]
 810d168:	2b2a      	cmp	r3, #42	@ 0x2a
 810d16a:	d132      	bne.n	810d1d2 <_svfiprintf_r+0x186>
 810d16c:	9b03      	ldr	r3, [sp, #12]
 810d16e:	1d1a      	adds	r2, r3, #4
 810d170:	681b      	ldr	r3, [r3, #0]
 810d172:	9203      	str	r2, [sp, #12]
 810d174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d178:	3402      	adds	r4, #2
 810d17a:	9305      	str	r3, [sp, #20]
 810d17c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810d240 <_svfiprintf_r+0x1f4>
 810d180:	7821      	ldrb	r1, [r4, #0]
 810d182:	2203      	movs	r2, #3
 810d184:	4650      	mov	r0, sl
 810d186:	f7f3 f8ab 	bl	81002e0 <memchr>
 810d18a:	b138      	cbz	r0, 810d19c <_svfiprintf_r+0x150>
 810d18c:	9b04      	ldr	r3, [sp, #16]
 810d18e:	eba0 000a 	sub.w	r0, r0, sl
 810d192:	2240      	movs	r2, #64	@ 0x40
 810d194:	4082      	lsls	r2, r0
 810d196:	4313      	orrs	r3, r2
 810d198:	3401      	adds	r4, #1
 810d19a:	9304      	str	r3, [sp, #16]
 810d19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d1a0:	4824      	ldr	r0, [pc, #144]	@ (810d234 <_svfiprintf_r+0x1e8>)
 810d1a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d1a6:	2206      	movs	r2, #6
 810d1a8:	f7f3 f89a 	bl	81002e0 <memchr>
 810d1ac:	2800      	cmp	r0, #0
 810d1ae:	d036      	beq.n	810d21e <_svfiprintf_r+0x1d2>
 810d1b0:	4b21      	ldr	r3, [pc, #132]	@ (810d238 <_svfiprintf_r+0x1ec>)
 810d1b2:	bb1b      	cbnz	r3, 810d1fc <_svfiprintf_r+0x1b0>
 810d1b4:	9b03      	ldr	r3, [sp, #12]
 810d1b6:	3307      	adds	r3, #7
 810d1b8:	f023 0307 	bic.w	r3, r3, #7
 810d1bc:	3308      	adds	r3, #8
 810d1be:	9303      	str	r3, [sp, #12]
 810d1c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d1c2:	4433      	add	r3, r6
 810d1c4:	9309      	str	r3, [sp, #36]	@ 0x24
 810d1c6:	e76a      	b.n	810d09e <_svfiprintf_r+0x52>
 810d1c8:	fb0c 3202 	mla	r2, ip, r2, r3
 810d1cc:	460c      	mov	r4, r1
 810d1ce:	2001      	movs	r0, #1
 810d1d0:	e7a8      	b.n	810d124 <_svfiprintf_r+0xd8>
 810d1d2:	2300      	movs	r3, #0
 810d1d4:	3401      	adds	r4, #1
 810d1d6:	9305      	str	r3, [sp, #20]
 810d1d8:	4619      	mov	r1, r3
 810d1da:	f04f 0c0a 	mov.w	ip, #10
 810d1de:	4620      	mov	r0, r4
 810d1e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d1e4:	3a30      	subs	r2, #48	@ 0x30
 810d1e6:	2a09      	cmp	r2, #9
 810d1e8:	d903      	bls.n	810d1f2 <_svfiprintf_r+0x1a6>
 810d1ea:	2b00      	cmp	r3, #0
 810d1ec:	d0c6      	beq.n	810d17c <_svfiprintf_r+0x130>
 810d1ee:	9105      	str	r1, [sp, #20]
 810d1f0:	e7c4      	b.n	810d17c <_svfiprintf_r+0x130>
 810d1f2:	fb0c 2101 	mla	r1, ip, r1, r2
 810d1f6:	4604      	mov	r4, r0
 810d1f8:	2301      	movs	r3, #1
 810d1fa:	e7f0      	b.n	810d1de <_svfiprintf_r+0x192>
 810d1fc:	ab03      	add	r3, sp, #12
 810d1fe:	9300      	str	r3, [sp, #0]
 810d200:	462a      	mov	r2, r5
 810d202:	4b0e      	ldr	r3, [pc, #56]	@ (810d23c <_svfiprintf_r+0x1f0>)
 810d204:	a904      	add	r1, sp, #16
 810d206:	4638      	mov	r0, r7
 810d208:	f7fc fbb8 	bl	810997c <_printf_float>
 810d20c:	1c42      	adds	r2, r0, #1
 810d20e:	4606      	mov	r6, r0
 810d210:	d1d6      	bne.n	810d1c0 <_svfiprintf_r+0x174>
 810d212:	89ab      	ldrh	r3, [r5, #12]
 810d214:	065b      	lsls	r3, r3, #25
 810d216:	f53f af2d 	bmi.w	810d074 <_svfiprintf_r+0x28>
 810d21a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d21c:	e72c      	b.n	810d078 <_svfiprintf_r+0x2c>
 810d21e:	ab03      	add	r3, sp, #12
 810d220:	9300      	str	r3, [sp, #0]
 810d222:	462a      	mov	r2, r5
 810d224:	4b05      	ldr	r3, [pc, #20]	@ (810d23c <_svfiprintf_r+0x1f0>)
 810d226:	a904      	add	r1, sp, #16
 810d228:	4638      	mov	r0, r7
 810d22a:	f7fc fe3f 	bl	8109eac <_printf_i>
 810d22e:	e7ed      	b.n	810d20c <_svfiprintf_r+0x1c0>
 810d230:	0810eb79 	.word	0x0810eb79
 810d234:	0810eb83 	.word	0x0810eb83
 810d238:	0810997d 	.word	0x0810997d
 810d23c:	0810cf95 	.word	0x0810cf95
 810d240:	0810eb7f 	.word	0x0810eb7f

0810d244 <__sfputc_r>:
 810d244:	6893      	ldr	r3, [r2, #8]
 810d246:	3b01      	subs	r3, #1
 810d248:	2b00      	cmp	r3, #0
 810d24a:	b410      	push	{r4}
 810d24c:	6093      	str	r3, [r2, #8]
 810d24e:	da08      	bge.n	810d262 <__sfputc_r+0x1e>
 810d250:	6994      	ldr	r4, [r2, #24]
 810d252:	42a3      	cmp	r3, r4
 810d254:	db01      	blt.n	810d25a <__sfputc_r+0x16>
 810d256:	290a      	cmp	r1, #10
 810d258:	d103      	bne.n	810d262 <__sfputc_r+0x1e>
 810d25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d25e:	f7fd baee 	b.w	810a83e <__swbuf_r>
 810d262:	6813      	ldr	r3, [r2, #0]
 810d264:	1c58      	adds	r0, r3, #1
 810d266:	6010      	str	r0, [r2, #0]
 810d268:	7019      	strb	r1, [r3, #0]
 810d26a:	4608      	mov	r0, r1
 810d26c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d270:	4770      	bx	lr

0810d272 <__sfputs_r>:
 810d272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d274:	4606      	mov	r6, r0
 810d276:	460f      	mov	r7, r1
 810d278:	4614      	mov	r4, r2
 810d27a:	18d5      	adds	r5, r2, r3
 810d27c:	42ac      	cmp	r4, r5
 810d27e:	d101      	bne.n	810d284 <__sfputs_r+0x12>
 810d280:	2000      	movs	r0, #0
 810d282:	e007      	b.n	810d294 <__sfputs_r+0x22>
 810d284:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d288:	463a      	mov	r2, r7
 810d28a:	4630      	mov	r0, r6
 810d28c:	f7ff ffda 	bl	810d244 <__sfputc_r>
 810d290:	1c43      	adds	r3, r0, #1
 810d292:	d1f3      	bne.n	810d27c <__sfputs_r+0xa>
 810d294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d298 <_vfiprintf_r>:
 810d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d29c:	460d      	mov	r5, r1
 810d29e:	b09d      	sub	sp, #116	@ 0x74
 810d2a0:	4614      	mov	r4, r2
 810d2a2:	4698      	mov	r8, r3
 810d2a4:	4606      	mov	r6, r0
 810d2a6:	b118      	cbz	r0, 810d2b0 <_vfiprintf_r+0x18>
 810d2a8:	6a03      	ldr	r3, [r0, #32]
 810d2aa:	b90b      	cbnz	r3, 810d2b0 <_vfiprintf_r+0x18>
 810d2ac:	f7fd f9be 	bl	810a62c <__sinit>
 810d2b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d2b2:	07d9      	lsls	r1, r3, #31
 810d2b4:	d405      	bmi.n	810d2c2 <_vfiprintf_r+0x2a>
 810d2b6:	89ab      	ldrh	r3, [r5, #12]
 810d2b8:	059a      	lsls	r2, r3, #22
 810d2ba:	d402      	bmi.n	810d2c2 <_vfiprintf_r+0x2a>
 810d2bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d2be:	f7fd fbd0 	bl	810aa62 <__retarget_lock_acquire_recursive>
 810d2c2:	89ab      	ldrh	r3, [r5, #12]
 810d2c4:	071b      	lsls	r3, r3, #28
 810d2c6:	d501      	bpl.n	810d2cc <_vfiprintf_r+0x34>
 810d2c8:	692b      	ldr	r3, [r5, #16]
 810d2ca:	b99b      	cbnz	r3, 810d2f4 <_vfiprintf_r+0x5c>
 810d2cc:	4629      	mov	r1, r5
 810d2ce:	4630      	mov	r0, r6
 810d2d0:	f7fd faf4 	bl	810a8bc <__swsetup_r>
 810d2d4:	b170      	cbz	r0, 810d2f4 <_vfiprintf_r+0x5c>
 810d2d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d2d8:	07dc      	lsls	r4, r3, #31
 810d2da:	d504      	bpl.n	810d2e6 <_vfiprintf_r+0x4e>
 810d2dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d2e0:	b01d      	add	sp, #116	@ 0x74
 810d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d2e6:	89ab      	ldrh	r3, [r5, #12]
 810d2e8:	0598      	lsls	r0, r3, #22
 810d2ea:	d4f7      	bmi.n	810d2dc <_vfiprintf_r+0x44>
 810d2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d2ee:	f7fd fbb9 	bl	810aa64 <__retarget_lock_release_recursive>
 810d2f2:	e7f3      	b.n	810d2dc <_vfiprintf_r+0x44>
 810d2f4:	2300      	movs	r3, #0
 810d2f6:	9309      	str	r3, [sp, #36]	@ 0x24
 810d2f8:	2320      	movs	r3, #32
 810d2fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 810d302:	2330      	movs	r3, #48	@ 0x30
 810d304:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810d4b4 <_vfiprintf_r+0x21c>
 810d308:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d30c:	f04f 0901 	mov.w	r9, #1
 810d310:	4623      	mov	r3, r4
 810d312:	469a      	mov	sl, r3
 810d314:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d318:	b10a      	cbz	r2, 810d31e <_vfiprintf_r+0x86>
 810d31a:	2a25      	cmp	r2, #37	@ 0x25
 810d31c:	d1f9      	bne.n	810d312 <_vfiprintf_r+0x7a>
 810d31e:	ebba 0b04 	subs.w	fp, sl, r4
 810d322:	d00b      	beq.n	810d33c <_vfiprintf_r+0xa4>
 810d324:	465b      	mov	r3, fp
 810d326:	4622      	mov	r2, r4
 810d328:	4629      	mov	r1, r5
 810d32a:	4630      	mov	r0, r6
 810d32c:	f7ff ffa1 	bl	810d272 <__sfputs_r>
 810d330:	3001      	adds	r0, #1
 810d332:	f000 80a7 	beq.w	810d484 <_vfiprintf_r+0x1ec>
 810d336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d338:	445a      	add	r2, fp
 810d33a:	9209      	str	r2, [sp, #36]	@ 0x24
 810d33c:	f89a 3000 	ldrb.w	r3, [sl]
 810d340:	2b00      	cmp	r3, #0
 810d342:	f000 809f 	beq.w	810d484 <_vfiprintf_r+0x1ec>
 810d346:	2300      	movs	r3, #0
 810d348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d34c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d350:	f10a 0a01 	add.w	sl, sl, #1
 810d354:	9304      	str	r3, [sp, #16]
 810d356:	9307      	str	r3, [sp, #28]
 810d358:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d35c:	931a      	str	r3, [sp, #104]	@ 0x68
 810d35e:	4654      	mov	r4, sl
 810d360:	2205      	movs	r2, #5
 810d362:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d366:	4853      	ldr	r0, [pc, #332]	@ (810d4b4 <_vfiprintf_r+0x21c>)
 810d368:	f7f2 ffba 	bl	81002e0 <memchr>
 810d36c:	9a04      	ldr	r2, [sp, #16]
 810d36e:	b9d8      	cbnz	r0, 810d3a8 <_vfiprintf_r+0x110>
 810d370:	06d1      	lsls	r1, r2, #27
 810d372:	bf44      	itt	mi
 810d374:	2320      	movmi	r3, #32
 810d376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d37a:	0713      	lsls	r3, r2, #28
 810d37c:	bf44      	itt	mi
 810d37e:	232b      	movmi	r3, #43	@ 0x2b
 810d380:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d384:	f89a 3000 	ldrb.w	r3, [sl]
 810d388:	2b2a      	cmp	r3, #42	@ 0x2a
 810d38a:	d015      	beq.n	810d3b8 <_vfiprintf_r+0x120>
 810d38c:	9a07      	ldr	r2, [sp, #28]
 810d38e:	4654      	mov	r4, sl
 810d390:	2000      	movs	r0, #0
 810d392:	f04f 0c0a 	mov.w	ip, #10
 810d396:	4621      	mov	r1, r4
 810d398:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d39c:	3b30      	subs	r3, #48	@ 0x30
 810d39e:	2b09      	cmp	r3, #9
 810d3a0:	d94b      	bls.n	810d43a <_vfiprintf_r+0x1a2>
 810d3a2:	b1b0      	cbz	r0, 810d3d2 <_vfiprintf_r+0x13a>
 810d3a4:	9207      	str	r2, [sp, #28]
 810d3a6:	e014      	b.n	810d3d2 <_vfiprintf_r+0x13a>
 810d3a8:	eba0 0308 	sub.w	r3, r0, r8
 810d3ac:	fa09 f303 	lsl.w	r3, r9, r3
 810d3b0:	4313      	orrs	r3, r2
 810d3b2:	9304      	str	r3, [sp, #16]
 810d3b4:	46a2      	mov	sl, r4
 810d3b6:	e7d2      	b.n	810d35e <_vfiprintf_r+0xc6>
 810d3b8:	9b03      	ldr	r3, [sp, #12]
 810d3ba:	1d19      	adds	r1, r3, #4
 810d3bc:	681b      	ldr	r3, [r3, #0]
 810d3be:	9103      	str	r1, [sp, #12]
 810d3c0:	2b00      	cmp	r3, #0
 810d3c2:	bfbb      	ittet	lt
 810d3c4:	425b      	neglt	r3, r3
 810d3c6:	f042 0202 	orrlt.w	r2, r2, #2
 810d3ca:	9307      	strge	r3, [sp, #28]
 810d3cc:	9307      	strlt	r3, [sp, #28]
 810d3ce:	bfb8      	it	lt
 810d3d0:	9204      	strlt	r2, [sp, #16]
 810d3d2:	7823      	ldrb	r3, [r4, #0]
 810d3d4:	2b2e      	cmp	r3, #46	@ 0x2e
 810d3d6:	d10a      	bne.n	810d3ee <_vfiprintf_r+0x156>
 810d3d8:	7863      	ldrb	r3, [r4, #1]
 810d3da:	2b2a      	cmp	r3, #42	@ 0x2a
 810d3dc:	d132      	bne.n	810d444 <_vfiprintf_r+0x1ac>
 810d3de:	9b03      	ldr	r3, [sp, #12]
 810d3e0:	1d1a      	adds	r2, r3, #4
 810d3e2:	681b      	ldr	r3, [r3, #0]
 810d3e4:	9203      	str	r2, [sp, #12]
 810d3e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d3ea:	3402      	adds	r4, #2
 810d3ec:	9305      	str	r3, [sp, #20]
 810d3ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810d4c4 <_vfiprintf_r+0x22c>
 810d3f2:	7821      	ldrb	r1, [r4, #0]
 810d3f4:	2203      	movs	r2, #3
 810d3f6:	4650      	mov	r0, sl
 810d3f8:	f7f2 ff72 	bl	81002e0 <memchr>
 810d3fc:	b138      	cbz	r0, 810d40e <_vfiprintf_r+0x176>
 810d3fe:	9b04      	ldr	r3, [sp, #16]
 810d400:	eba0 000a 	sub.w	r0, r0, sl
 810d404:	2240      	movs	r2, #64	@ 0x40
 810d406:	4082      	lsls	r2, r0
 810d408:	4313      	orrs	r3, r2
 810d40a:	3401      	adds	r4, #1
 810d40c:	9304      	str	r3, [sp, #16]
 810d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d412:	4829      	ldr	r0, [pc, #164]	@ (810d4b8 <_vfiprintf_r+0x220>)
 810d414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d418:	2206      	movs	r2, #6
 810d41a:	f7f2 ff61 	bl	81002e0 <memchr>
 810d41e:	2800      	cmp	r0, #0
 810d420:	d03f      	beq.n	810d4a2 <_vfiprintf_r+0x20a>
 810d422:	4b26      	ldr	r3, [pc, #152]	@ (810d4bc <_vfiprintf_r+0x224>)
 810d424:	bb1b      	cbnz	r3, 810d46e <_vfiprintf_r+0x1d6>
 810d426:	9b03      	ldr	r3, [sp, #12]
 810d428:	3307      	adds	r3, #7
 810d42a:	f023 0307 	bic.w	r3, r3, #7
 810d42e:	3308      	adds	r3, #8
 810d430:	9303      	str	r3, [sp, #12]
 810d432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d434:	443b      	add	r3, r7
 810d436:	9309      	str	r3, [sp, #36]	@ 0x24
 810d438:	e76a      	b.n	810d310 <_vfiprintf_r+0x78>
 810d43a:	fb0c 3202 	mla	r2, ip, r2, r3
 810d43e:	460c      	mov	r4, r1
 810d440:	2001      	movs	r0, #1
 810d442:	e7a8      	b.n	810d396 <_vfiprintf_r+0xfe>
 810d444:	2300      	movs	r3, #0
 810d446:	3401      	adds	r4, #1
 810d448:	9305      	str	r3, [sp, #20]
 810d44a:	4619      	mov	r1, r3
 810d44c:	f04f 0c0a 	mov.w	ip, #10
 810d450:	4620      	mov	r0, r4
 810d452:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d456:	3a30      	subs	r2, #48	@ 0x30
 810d458:	2a09      	cmp	r2, #9
 810d45a:	d903      	bls.n	810d464 <_vfiprintf_r+0x1cc>
 810d45c:	2b00      	cmp	r3, #0
 810d45e:	d0c6      	beq.n	810d3ee <_vfiprintf_r+0x156>
 810d460:	9105      	str	r1, [sp, #20]
 810d462:	e7c4      	b.n	810d3ee <_vfiprintf_r+0x156>
 810d464:	fb0c 2101 	mla	r1, ip, r1, r2
 810d468:	4604      	mov	r4, r0
 810d46a:	2301      	movs	r3, #1
 810d46c:	e7f0      	b.n	810d450 <_vfiprintf_r+0x1b8>
 810d46e:	ab03      	add	r3, sp, #12
 810d470:	9300      	str	r3, [sp, #0]
 810d472:	462a      	mov	r2, r5
 810d474:	4b12      	ldr	r3, [pc, #72]	@ (810d4c0 <_vfiprintf_r+0x228>)
 810d476:	a904      	add	r1, sp, #16
 810d478:	4630      	mov	r0, r6
 810d47a:	f7fc fa7f 	bl	810997c <_printf_float>
 810d47e:	4607      	mov	r7, r0
 810d480:	1c78      	adds	r0, r7, #1
 810d482:	d1d6      	bne.n	810d432 <_vfiprintf_r+0x19a>
 810d484:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d486:	07d9      	lsls	r1, r3, #31
 810d488:	d405      	bmi.n	810d496 <_vfiprintf_r+0x1fe>
 810d48a:	89ab      	ldrh	r3, [r5, #12]
 810d48c:	059a      	lsls	r2, r3, #22
 810d48e:	d402      	bmi.n	810d496 <_vfiprintf_r+0x1fe>
 810d490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d492:	f7fd fae7 	bl	810aa64 <__retarget_lock_release_recursive>
 810d496:	89ab      	ldrh	r3, [r5, #12]
 810d498:	065b      	lsls	r3, r3, #25
 810d49a:	f53f af1f 	bmi.w	810d2dc <_vfiprintf_r+0x44>
 810d49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d4a0:	e71e      	b.n	810d2e0 <_vfiprintf_r+0x48>
 810d4a2:	ab03      	add	r3, sp, #12
 810d4a4:	9300      	str	r3, [sp, #0]
 810d4a6:	462a      	mov	r2, r5
 810d4a8:	4b05      	ldr	r3, [pc, #20]	@ (810d4c0 <_vfiprintf_r+0x228>)
 810d4aa:	a904      	add	r1, sp, #16
 810d4ac:	4630      	mov	r0, r6
 810d4ae:	f7fc fcfd 	bl	8109eac <_printf_i>
 810d4b2:	e7e4      	b.n	810d47e <_vfiprintf_r+0x1e6>
 810d4b4:	0810eb79 	.word	0x0810eb79
 810d4b8:	0810eb83 	.word	0x0810eb83
 810d4bc:	0810997d 	.word	0x0810997d
 810d4c0:	0810d273 	.word	0x0810d273
 810d4c4:	0810eb7f 	.word	0x0810eb7f

0810d4c8 <__sflush_r>:
 810d4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d4d0:	0716      	lsls	r6, r2, #28
 810d4d2:	4605      	mov	r5, r0
 810d4d4:	460c      	mov	r4, r1
 810d4d6:	d454      	bmi.n	810d582 <__sflush_r+0xba>
 810d4d8:	684b      	ldr	r3, [r1, #4]
 810d4da:	2b00      	cmp	r3, #0
 810d4dc:	dc02      	bgt.n	810d4e4 <__sflush_r+0x1c>
 810d4de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810d4e0:	2b00      	cmp	r3, #0
 810d4e2:	dd48      	ble.n	810d576 <__sflush_r+0xae>
 810d4e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d4e6:	2e00      	cmp	r6, #0
 810d4e8:	d045      	beq.n	810d576 <__sflush_r+0xae>
 810d4ea:	2300      	movs	r3, #0
 810d4ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810d4f0:	682f      	ldr	r7, [r5, #0]
 810d4f2:	6a21      	ldr	r1, [r4, #32]
 810d4f4:	602b      	str	r3, [r5, #0]
 810d4f6:	d030      	beq.n	810d55a <__sflush_r+0x92>
 810d4f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810d4fa:	89a3      	ldrh	r3, [r4, #12]
 810d4fc:	0759      	lsls	r1, r3, #29
 810d4fe:	d505      	bpl.n	810d50c <__sflush_r+0x44>
 810d500:	6863      	ldr	r3, [r4, #4]
 810d502:	1ad2      	subs	r2, r2, r3
 810d504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810d506:	b10b      	cbz	r3, 810d50c <__sflush_r+0x44>
 810d508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810d50a:	1ad2      	subs	r2, r2, r3
 810d50c:	2300      	movs	r3, #0
 810d50e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d510:	6a21      	ldr	r1, [r4, #32]
 810d512:	4628      	mov	r0, r5
 810d514:	47b0      	blx	r6
 810d516:	1c43      	adds	r3, r0, #1
 810d518:	89a3      	ldrh	r3, [r4, #12]
 810d51a:	d106      	bne.n	810d52a <__sflush_r+0x62>
 810d51c:	6829      	ldr	r1, [r5, #0]
 810d51e:	291d      	cmp	r1, #29
 810d520:	d82b      	bhi.n	810d57a <__sflush_r+0xb2>
 810d522:	4a2a      	ldr	r2, [pc, #168]	@ (810d5cc <__sflush_r+0x104>)
 810d524:	410a      	asrs	r2, r1
 810d526:	07d6      	lsls	r6, r2, #31
 810d528:	d427      	bmi.n	810d57a <__sflush_r+0xb2>
 810d52a:	2200      	movs	r2, #0
 810d52c:	6062      	str	r2, [r4, #4]
 810d52e:	04d9      	lsls	r1, r3, #19
 810d530:	6922      	ldr	r2, [r4, #16]
 810d532:	6022      	str	r2, [r4, #0]
 810d534:	d504      	bpl.n	810d540 <__sflush_r+0x78>
 810d536:	1c42      	adds	r2, r0, #1
 810d538:	d101      	bne.n	810d53e <__sflush_r+0x76>
 810d53a:	682b      	ldr	r3, [r5, #0]
 810d53c:	b903      	cbnz	r3, 810d540 <__sflush_r+0x78>
 810d53e:	6560      	str	r0, [r4, #84]	@ 0x54
 810d540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810d542:	602f      	str	r7, [r5, #0]
 810d544:	b1b9      	cbz	r1, 810d576 <__sflush_r+0xae>
 810d546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810d54a:	4299      	cmp	r1, r3
 810d54c:	d002      	beq.n	810d554 <__sflush_r+0x8c>
 810d54e:	4628      	mov	r0, r5
 810d550:	f7fe f8ea 	bl	810b728 <_free_r>
 810d554:	2300      	movs	r3, #0
 810d556:	6363      	str	r3, [r4, #52]	@ 0x34
 810d558:	e00d      	b.n	810d576 <__sflush_r+0xae>
 810d55a:	2301      	movs	r3, #1
 810d55c:	4628      	mov	r0, r5
 810d55e:	47b0      	blx	r6
 810d560:	4602      	mov	r2, r0
 810d562:	1c50      	adds	r0, r2, #1
 810d564:	d1c9      	bne.n	810d4fa <__sflush_r+0x32>
 810d566:	682b      	ldr	r3, [r5, #0]
 810d568:	2b00      	cmp	r3, #0
 810d56a:	d0c6      	beq.n	810d4fa <__sflush_r+0x32>
 810d56c:	2b1d      	cmp	r3, #29
 810d56e:	d001      	beq.n	810d574 <__sflush_r+0xac>
 810d570:	2b16      	cmp	r3, #22
 810d572:	d11e      	bne.n	810d5b2 <__sflush_r+0xea>
 810d574:	602f      	str	r7, [r5, #0]
 810d576:	2000      	movs	r0, #0
 810d578:	e022      	b.n	810d5c0 <__sflush_r+0xf8>
 810d57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d57e:	b21b      	sxth	r3, r3
 810d580:	e01b      	b.n	810d5ba <__sflush_r+0xf2>
 810d582:	690f      	ldr	r7, [r1, #16]
 810d584:	2f00      	cmp	r7, #0
 810d586:	d0f6      	beq.n	810d576 <__sflush_r+0xae>
 810d588:	0793      	lsls	r3, r2, #30
 810d58a:	680e      	ldr	r6, [r1, #0]
 810d58c:	bf08      	it	eq
 810d58e:	694b      	ldreq	r3, [r1, #20]
 810d590:	600f      	str	r7, [r1, #0]
 810d592:	bf18      	it	ne
 810d594:	2300      	movne	r3, #0
 810d596:	eba6 0807 	sub.w	r8, r6, r7
 810d59a:	608b      	str	r3, [r1, #8]
 810d59c:	f1b8 0f00 	cmp.w	r8, #0
 810d5a0:	dde9      	ble.n	810d576 <__sflush_r+0xae>
 810d5a2:	6a21      	ldr	r1, [r4, #32]
 810d5a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810d5a6:	4643      	mov	r3, r8
 810d5a8:	463a      	mov	r2, r7
 810d5aa:	4628      	mov	r0, r5
 810d5ac:	47b0      	blx	r6
 810d5ae:	2800      	cmp	r0, #0
 810d5b0:	dc08      	bgt.n	810d5c4 <__sflush_r+0xfc>
 810d5b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d5b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d5ba:	81a3      	strh	r3, [r4, #12]
 810d5bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d5c4:	4407      	add	r7, r0
 810d5c6:	eba8 0800 	sub.w	r8, r8, r0
 810d5ca:	e7e7      	b.n	810d59c <__sflush_r+0xd4>
 810d5cc:	dfbffffe 	.word	0xdfbffffe

0810d5d0 <_fflush_r>:
 810d5d0:	b538      	push	{r3, r4, r5, lr}
 810d5d2:	690b      	ldr	r3, [r1, #16]
 810d5d4:	4605      	mov	r5, r0
 810d5d6:	460c      	mov	r4, r1
 810d5d8:	b913      	cbnz	r3, 810d5e0 <_fflush_r+0x10>
 810d5da:	2500      	movs	r5, #0
 810d5dc:	4628      	mov	r0, r5
 810d5de:	bd38      	pop	{r3, r4, r5, pc}
 810d5e0:	b118      	cbz	r0, 810d5ea <_fflush_r+0x1a>
 810d5e2:	6a03      	ldr	r3, [r0, #32]
 810d5e4:	b90b      	cbnz	r3, 810d5ea <_fflush_r+0x1a>
 810d5e6:	f7fd f821 	bl	810a62c <__sinit>
 810d5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d5ee:	2b00      	cmp	r3, #0
 810d5f0:	d0f3      	beq.n	810d5da <_fflush_r+0xa>
 810d5f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810d5f4:	07d0      	lsls	r0, r2, #31
 810d5f6:	d404      	bmi.n	810d602 <_fflush_r+0x32>
 810d5f8:	0599      	lsls	r1, r3, #22
 810d5fa:	d402      	bmi.n	810d602 <_fflush_r+0x32>
 810d5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d5fe:	f7fd fa30 	bl	810aa62 <__retarget_lock_acquire_recursive>
 810d602:	4628      	mov	r0, r5
 810d604:	4621      	mov	r1, r4
 810d606:	f7ff ff5f 	bl	810d4c8 <__sflush_r>
 810d60a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810d60c:	07da      	lsls	r2, r3, #31
 810d60e:	4605      	mov	r5, r0
 810d610:	d4e4      	bmi.n	810d5dc <_fflush_r+0xc>
 810d612:	89a3      	ldrh	r3, [r4, #12]
 810d614:	059b      	lsls	r3, r3, #22
 810d616:	d4e1      	bmi.n	810d5dc <_fflush_r+0xc>
 810d618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d61a:	f7fd fa23 	bl	810aa64 <__retarget_lock_release_recursive>
 810d61e:	e7dd      	b.n	810d5dc <_fflush_r+0xc>

0810d620 <__swhatbuf_r>:
 810d620:	b570      	push	{r4, r5, r6, lr}
 810d622:	460c      	mov	r4, r1
 810d624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d628:	2900      	cmp	r1, #0
 810d62a:	b096      	sub	sp, #88	@ 0x58
 810d62c:	4615      	mov	r5, r2
 810d62e:	461e      	mov	r6, r3
 810d630:	da0d      	bge.n	810d64e <__swhatbuf_r+0x2e>
 810d632:	89a3      	ldrh	r3, [r4, #12]
 810d634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810d638:	f04f 0100 	mov.w	r1, #0
 810d63c:	bf14      	ite	ne
 810d63e:	2340      	movne	r3, #64	@ 0x40
 810d640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810d644:	2000      	movs	r0, #0
 810d646:	6031      	str	r1, [r6, #0]
 810d648:	602b      	str	r3, [r5, #0]
 810d64a:	b016      	add	sp, #88	@ 0x58
 810d64c:	bd70      	pop	{r4, r5, r6, pc}
 810d64e:	466a      	mov	r2, sp
 810d650:	f000 f874 	bl	810d73c <_fstat_r>
 810d654:	2800      	cmp	r0, #0
 810d656:	dbec      	blt.n	810d632 <__swhatbuf_r+0x12>
 810d658:	9901      	ldr	r1, [sp, #4]
 810d65a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810d65e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810d662:	4259      	negs	r1, r3
 810d664:	4159      	adcs	r1, r3
 810d666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810d66a:	e7eb      	b.n	810d644 <__swhatbuf_r+0x24>

0810d66c <__smakebuf_r>:
 810d66c:	898b      	ldrh	r3, [r1, #12]
 810d66e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d670:	079d      	lsls	r5, r3, #30
 810d672:	4606      	mov	r6, r0
 810d674:	460c      	mov	r4, r1
 810d676:	d507      	bpl.n	810d688 <__smakebuf_r+0x1c>
 810d678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810d67c:	6023      	str	r3, [r4, #0]
 810d67e:	6123      	str	r3, [r4, #16]
 810d680:	2301      	movs	r3, #1
 810d682:	6163      	str	r3, [r4, #20]
 810d684:	b003      	add	sp, #12
 810d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d688:	ab01      	add	r3, sp, #4
 810d68a:	466a      	mov	r2, sp
 810d68c:	f7ff ffc8 	bl	810d620 <__swhatbuf_r>
 810d690:	9f00      	ldr	r7, [sp, #0]
 810d692:	4605      	mov	r5, r0
 810d694:	4639      	mov	r1, r7
 810d696:	4630      	mov	r0, r6
 810d698:	f7fe f8ba 	bl	810b810 <_malloc_r>
 810d69c:	b948      	cbnz	r0, 810d6b2 <__smakebuf_r+0x46>
 810d69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d6a2:	059a      	lsls	r2, r3, #22
 810d6a4:	d4ee      	bmi.n	810d684 <__smakebuf_r+0x18>
 810d6a6:	f023 0303 	bic.w	r3, r3, #3
 810d6aa:	f043 0302 	orr.w	r3, r3, #2
 810d6ae:	81a3      	strh	r3, [r4, #12]
 810d6b0:	e7e2      	b.n	810d678 <__smakebuf_r+0xc>
 810d6b2:	89a3      	ldrh	r3, [r4, #12]
 810d6b4:	6020      	str	r0, [r4, #0]
 810d6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810d6ba:	81a3      	strh	r3, [r4, #12]
 810d6bc:	9b01      	ldr	r3, [sp, #4]
 810d6be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810d6c2:	b15b      	cbz	r3, 810d6dc <__smakebuf_r+0x70>
 810d6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d6c8:	4630      	mov	r0, r6
 810d6ca:	f000 f849 	bl	810d760 <_isatty_r>
 810d6ce:	b128      	cbz	r0, 810d6dc <__smakebuf_r+0x70>
 810d6d0:	89a3      	ldrh	r3, [r4, #12]
 810d6d2:	f023 0303 	bic.w	r3, r3, #3
 810d6d6:	f043 0301 	orr.w	r3, r3, #1
 810d6da:	81a3      	strh	r3, [r4, #12]
 810d6dc:	89a3      	ldrh	r3, [r4, #12]
 810d6de:	431d      	orrs	r5, r3
 810d6e0:	81a5      	strh	r5, [r4, #12]
 810d6e2:	e7cf      	b.n	810d684 <__smakebuf_r+0x18>

0810d6e4 <memmove>:
 810d6e4:	4288      	cmp	r0, r1
 810d6e6:	b510      	push	{r4, lr}
 810d6e8:	eb01 0402 	add.w	r4, r1, r2
 810d6ec:	d902      	bls.n	810d6f4 <memmove+0x10>
 810d6ee:	4284      	cmp	r4, r0
 810d6f0:	4623      	mov	r3, r4
 810d6f2:	d807      	bhi.n	810d704 <memmove+0x20>
 810d6f4:	1e43      	subs	r3, r0, #1
 810d6f6:	42a1      	cmp	r1, r4
 810d6f8:	d008      	beq.n	810d70c <memmove+0x28>
 810d6fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d6fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d702:	e7f8      	b.n	810d6f6 <memmove+0x12>
 810d704:	4402      	add	r2, r0
 810d706:	4601      	mov	r1, r0
 810d708:	428a      	cmp	r2, r1
 810d70a:	d100      	bne.n	810d70e <memmove+0x2a>
 810d70c:	bd10      	pop	{r4, pc}
 810d70e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d716:	e7f7      	b.n	810d708 <memmove+0x24>

0810d718 <strncmp>:
 810d718:	b510      	push	{r4, lr}
 810d71a:	b16a      	cbz	r2, 810d738 <strncmp+0x20>
 810d71c:	3901      	subs	r1, #1
 810d71e:	1884      	adds	r4, r0, r2
 810d720:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d724:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810d728:	429a      	cmp	r2, r3
 810d72a:	d103      	bne.n	810d734 <strncmp+0x1c>
 810d72c:	42a0      	cmp	r0, r4
 810d72e:	d001      	beq.n	810d734 <strncmp+0x1c>
 810d730:	2a00      	cmp	r2, #0
 810d732:	d1f5      	bne.n	810d720 <strncmp+0x8>
 810d734:	1ad0      	subs	r0, r2, r3
 810d736:	bd10      	pop	{r4, pc}
 810d738:	4610      	mov	r0, r2
 810d73a:	e7fc      	b.n	810d736 <strncmp+0x1e>

0810d73c <_fstat_r>:
 810d73c:	b538      	push	{r3, r4, r5, lr}
 810d73e:	4d07      	ldr	r5, [pc, #28]	@ (810d75c <_fstat_r+0x20>)
 810d740:	2300      	movs	r3, #0
 810d742:	4604      	mov	r4, r0
 810d744:	4608      	mov	r0, r1
 810d746:	4611      	mov	r1, r2
 810d748:	602b      	str	r3, [r5, #0]
 810d74a:	f7f5 fbf3 	bl	8102f34 <_fstat>
 810d74e:	1c43      	adds	r3, r0, #1
 810d750:	d102      	bne.n	810d758 <_fstat_r+0x1c>
 810d752:	682b      	ldr	r3, [r5, #0]
 810d754:	b103      	cbz	r3, 810d758 <_fstat_r+0x1c>
 810d756:	6023      	str	r3, [r4, #0]
 810d758:	bd38      	pop	{r3, r4, r5, pc}
 810d75a:	bf00      	nop
 810d75c:	100005b4 	.word	0x100005b4

0810d760 <_isatty_r>:
 810d760:	b538      	push	{r3, r4, r5, lr}
 810d762:	4d06      	ldr	r5, [pc, #24]	@ (810d77c <_isatty_r+0x1c>)
 810d764:	2300      	movs	r3, #0
 810d766:	4604      	mov	r4, r0
 810d768:	4608      	mov	r0, r1
 810d76a:	602b      	str	r3, [r5, #0]
 810d76c:	f7f5 fbf2 	bl	8102f54 <_isatty>
 810d770:	1c43      	adds	r3, r0, #1
 810d772:	d102      	bne.n	810d77a <_isatty_r+0x1a>
 810d774:	682b      	ldr	r3, [r5, #0]
 810d776:	b103      	cbz	r3, 810d77a <_isatty_r+0x1a>
 810d778:	6023      	str	r3, [r4, #0]
 810d77a:	bd38      	pop	{r3, r4, r5, pc}
 810d77c:	100005b4 	.word	0x100005b4

0810d780 <_sbrk_r>:
 810d780:	b538      	push	{r3, r4, r5, lr}
 810d782:	4d06      	ldr	r5, [pc, #24]	@ (810d79c <_sbrk_r+0x1c>)
 810d784:	2300      	movs	r3, #0
 810d786:	4604      	mov	r4, r0
 810d788:	4608      	mov	r0, r1
 810d78a:	602b      	str	r3, [r5, #0]
 810d78c:	f7f5 fbfa 	bl	8102f84 <_sbrk>
 810d790:	1c43      	adds	r3, r0, #1
 810d792:	d102      	bne.n	810d79a <_sbrk_r+0x1a>
 810d794:	682b      	ldr	r3, [r5, #0]
 810d796:	b103      	cbz	r3, 810d79a <_sbrk_r+0x1a>
 810d798:	6023      	str	r3, [r4, #0]
 810d79a:	bd38      	pop	{r3, r4, r5, pc}
 810d79c:	100005b4 	.word	0x100005b4

0810d7a0 <nan>:
 810d7a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810d7a8 <nan+0x8>
 810d7a4:	4770      	bx	lr
 810d7a6:	bf00      	nop
 810d7a8:	00000000 	.word	0x00000000
 810d7ac:	7ff80000 	.word	0x7ff80000

0810d7b0 <__assert_func>:
 810d7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810d7b2:	4614      	mov	r4, r2
 810d7b4:	461a      	mov	r2, r3
 810d7b6:	4b09      	ldr	r3, [pc, #36]	@ (810d7dc <__assert_func+0x2c>)
 810d7b8:	681b      	ldr	r3, [r3, #0]
 810d7ba:	4605      	mov	r5, r0
 810d7bc:	68d8      	ldr	r0, [r3, #12]
 810d7be:	b954      	cbnz	r4, 810d7d6 <__assert_func+0x26>
 810d7c0:	4b07      	ldr	r3, [pc, #28]	@ (810d7e0 <__assert_func+0x30>)
 810d7c2:	461c      	mov	r4, r3
 810d7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810d7c8:	9100      	str	r1, [sp, #0]
 810d7ca:	462b      	mov	r3, r5
 810d7cc:	4905      	ldr	r1, [pc, #20]	@ (810d7e4 <__assert_func+0x34>)
 810d7ce:	f000 fba7 	bl	810df20 <fiprintf>
 810d7d2:	f000 fbb7 	bl	810df44 <abort>
 810d7d6:	4b04      	ldr	r3, [pc, #16]	@ (810d7e8 <__assert_func+0x38>)
 810d7d8:	e7f4      	b.n	810d7c4 <__assert_func+0x14>
 810d7da:	bf00      	nop
 810d7dc:	10000028 	.word	0x10000028
 810d7e0:	0810ebcd 	.word	0x0810ebcd
 810d7e4:	0810eb9f 	.word	0x0810eb9f
 810d7e8:	0810eb92 	.word	0x0810eb92

0810d7ec <_calloc_r>:
 810d7ec:	b570      	push	{r4, r5, r6, lr}
 810d7ee:	fba1 5402 	umull	r5, r4, r1, r2
 810d7f2:	b93c      	cbnz	r4, 810d804 <_calloc_r+0x18>
 810d7f4:	4629      	mov	r1, r5
 810d7f6:	f7fe f80b 	bl	810b810 <_malloc_r>
 810d7fa:	4606      	mov	r6, r0
 810d7fc:	b928      	cbnz	r0, 810d80a <_calloc_r+0x1e>
 810d7fe:	2600      	movs	r6, #0
 810d800:	4630      	mov	r0, r6
 810d802:	bd70      	pop	{r4, r5, r6, pc}
 810d804:	220c      	movs	r2, #12
 810d806:	6002      	str	r2, [r0, #0]
 810d808:	e7f9      	b.n	810d7fe <_calloc_r+0x12>
 810d80a:	462a      	mov	r2, r5
 810d80c:	4621      	mov	r1, r4
 810d80e:	f7fd f8ab 	bl	810a968 <memset>
 810d812:	e7f5      	b.n	810d800 <_calloc_r+0x14>

0810d814 <rshift>:
 810d814:	6903      	ldr	r3, [r0, #16]
 810d816:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810d81a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d81e:	ea4f 1261 	mov.w	r2, r1, asr #5
 810d822:	f100 0414 	add.w	r4, r0, #20
 810d826:	dd45      	ble.n	810d8b4 <rshift+0xa0>
 810d828:	f011 011f 	ands.w	r1, r1, #31
 810d82c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810d830:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810d834:	d10c      	bne.n	810d850 <rshift+0x3c>
 810d836:	f100 0710 	add.w	r7, r0, #16
 810d83a:	4629      	mov	r1, r5
 810d83c:	42b1      	cmp	r1, r6
 810d83e:	d334      	bcc.n	810d8aa <rshift+0x96>
 810d840:	1a9b      	subs	r3, r3, r2
 810d842:	009b      	lsls	r3, r3, #2
 810d844:	1eea      	subs	r2, r5, #3
 810d846:	4296      	cmp	r6, r2
 810d848:	bf38      	it	cc
 810d84a:	2300      	movcc	r3, #0
 810d84c:	4423      	add	r3, r4
 810d84e:	e015      	b.n	810d87c <rshift+0x68>
 810d850:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810d854:	f1c1 0820 	rsb	r8, r1, #32
 810d858:	40cf      	lsrs	r7, r1
 810d85a:	f105 0e04 	add.w	lr, r5, #4
 810d85e:	46a1      	mov	r9, r4
 810d860:	4576      	cmp	r6, lr
 810d862:	46f4      	mov	ip, lr
 810d864:	d815      	bhi.n	810d892 <rshift+0x7e>
 810d866:	1a9a      	subs	r2, r3, r2
 810d868:	0092      	lsls	r2, r2, #2
 810d86a:	3a04      	subs	r2, #4
 810d86c:	3501      	adds	r5, #1
 810d86e:	42ae      	cmp	r6, r5
 810d870:	bf38      	it	cc
 810d872:	2200      	movcc	r2, #0
 810d874:	18a3      	adds	r3, r4, r2
 810d876:	50a7      	str	r7, [r4, r2]
 810d878:	b107      	cbz	r7, 810d87c <rshift+0x68>
 810d87a:	3304      	adds	r3, #4
 810d87c:	1b1a      	subs	r2, r3, r4
 810d87e:	42a3      	cmp	r3, r4
 810d880:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810d884:	bf08      	it	eq
 810d886:	2300      	moveq	r3, #0
 810d888:	6102      	str	r2, [r0, #16]
 810d88a:	bf08      	it	eq
 810d88c:	6143      	streq	r3, [r0, #20]
 810d88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d892:	f8dc c000 	ldr.w	ip, [ip]
 810d896:	fa0c fc08 	lsl.w	ip, ip, r8
 810d89a:	ea4c 0707 	orr.w	r7, ip, r7
 810d89e:	f849 7b04 	str.w	r7, [r9], #4
 810d8a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 810d8a6:	40cf      	lsrs	r7, r1
 810d8a8:	e7da      	b.n	810d860 <rshift+0x4c>
 810d8aa:	f851 cb04 	ldr.w	ip, [r1], #4
 810d8ae:	f847 cf04 	str.w	ip, [r7, #4]!
 810d8b2:	e7c3      	b.n	810d83c <rshift+0x28>
 810d8b4:	4623      	mov	r3, r4
 810d8b6:	e7e1      	b.n	810d87c <rshift+0x68>

0810d8b8 <__hexdig_fun>:
 810d8b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 810d8bc:	2b09      	cmp	r3, #9
 810d8be:	d802      	bhi.n	810d8c6 <__hexdig_fun+0xe>
 810d8c0:	3820      	subs	r0, #32
 810d8c2:	b2c0      	uxtb	r0, r0
 810d8c4:	4770      	bx	lr
 810d8c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 810d8ca:	2b05      	cmp	r3, #5
 810d8cc:	d801      	bhi.n	810d8d2 <__hexdig_fun+0x1a>
 810d8ce:	3847      	subs	r0, #71	@ 0x47
 810d8d0:	e7f7      	b.n	810d8c2 <__hexdig_fun+0xa>
 810d8d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 810d8d6:	2b05      	cmp	r3, #5
 810d8d8:	d801      	bhi.n	810d8de <__hexdig_fun+0x26>
 810d8da:	3827      	subs	r0, #39	@ 0x27
 810d8dc:	e7f1      	b.n	810d8c2 <__hexdig_fun+0xa>
 810d8de:	2000      	movs	r0, #0
 810d8e0:	4770      	bx	lr
	...

0810d8e4 <__gethex>:
 810d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d8e8:	b085      	sub	sp, #20
 810d8ea:	468a      	mov	sl, r1
 810d8ec:	9302      	str	r3, [sp, #8]
 810d8ee:	680b      	ldr	r3, [r1, #0]
 810d8f0:	9001      	str	r0, [sp, #4]
 810d8f2:	4690      	mov	r8, r2
 810d8f4:	1c9c      	adds	r4, r3, #2
 810d8f6:	46a1      	mov	r9, r4
 810d8f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 810d8fc:	2830      	cmp	r0, #48	@ 0x30
 810d8fe:	d0fa      	beq.n	810d8f6 <__gethex+0x12>
 810d900:	eba9 0303 	sub.w	r3, r9, r3
 810d904:	f1a3 0b02 	sub.w	fp, r3, #2
 810d908:	f7ff ffd6 	bl	810d8b8 <__hexdig_fun>
 810d90c:	4605      	mov	r5, r0
 810d90e:	2800      	cmp	r0, #0
 810d910:	d168      	bne.n	810d9e4 <__gethex+0x100>
 810d912:	49a0      	ldr	r1, [pc, #640]	@ (810db94 <__gethex+0x2b0>)
 810d914:	2201      	movs	r2, #1
 810d916:	4648      	mov	r0, r9
 810d918:	f7ff fefe 	bl	810d718 <strncmp>
 810d91c:	4607      	mov	r7, r0
 810d91e:	2800      	cmp	r0, #0
 810d920:	d167      	bne.n	810d9f2 <__gethex+0x10e>
 810d922:	f899 0001 	ldrb.w	r0, [r9, #1]
 810d926:	4626      	mov	r6, r4
 810d928:	f7ff ffc6 	bl	810d8b8 <__hexdig_fun>
 810d92c:	2800      	cmp	r0, #0
 810d92e:	d062      	beq.n	810d9f6 <__gethex+0x112>
 810d930:	4623      	mov	r3, r4
 810d932:	7818      	ldrb	r0, [r3, #0]
 810d934:	2830      	cmp	r0, #48	@ 0x30
 810d936:	4699      	mov	r9, r3
 810d938:	f103 0301 	add.w	r3, r3, #1
 810d93c:	d0f9      	beq.n	810d932 <__gethex+0x4e>
 810d93e:	f7ff ffbb 	bl	810d8b8 <__hexdig_fun>
 810d942:	fab0 f580 	clz	r5, r0
 810d946:	096d      	lsrs	r5, r5, #5
 810d948:	f04f 0b01 	mov.w	fp, #1
 810d94c:	464a      	mov	r2, r9
 810d94e:	4616      	mov	r6, r2
 810d950:	3201      	adds	r2, #1
 810d952:	7830      	ldrb	r0, [r6, #0]
 810d954:	f7ff ffb0 	bl	810d8b8 <__hexdig_fun>
 810d958:	2800      	cmp	r0, #0
 810d95a:	d1f8      	bne.n	810d94e <__gethex+0x6a>
 810d95c:	498d      	ldr	r1, [pc, #564]	@ (810db94 <__gethex+0x2b0>)
 810d95e:	2201      	movs	r2, #1
 810d960:	4630      	mov	r0, r6
 810d962:	f7ff fed9 	bl	810d718 <strncmp>
 810d966:	2800      	cmp	r0, #0
 810d968:	d13f      	bne.n	810d9ea <__gethex+0x106>
 810d96a:	b944      	cbnz	r4, 810d97e <__gethex+0x9a>
 810d96c:	1c74      	adds	r4, r6, #1
 810d96e:	4622      	mov	r2, r4
 810d970:	4616      	mov	r6, r2
 810d972:	3201      	adds	r2, #1
 810d974:	7830      	ldrb	r0, [r6, #0]
 810d976:	f7ff ff9f 	bl	810d8b8 <__hexdig_fun>
 810d97a:	2800      	cmp	r0, #0
 810d97c:	d1f8      	bne.n	810d970 <__gethex+0x8c>
 810d97e:	1ba4      	subs	r4, r4, r6
 810d980:	00a7      	lsls	r7, r4, #2
 810d982:	7833      	ldrb	r3, [r6, #0]
 810d984:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 810d988:	2b50      	cmp	r3, #80	@ 0x50
 810d98a:	d13e      	bne.n	810da0a <__gethex+0x126>
 810d98c:	7873      	ldrb	r3, [r6, #1]
 810d98e:	2b2b      	cmp	r3, #43	@ 0x2b
 810d990:	d033      	beq.n	810d9fa <__gethex+0x116>
 810d992:	2b2d      	cmp	r3, #45	@ 0x2d
 810d994:	d034      	beq.n	810da00 <__gethex+0x11c>
 810d996:	1c71      	adds	r1, r6, #1
 810d998:	2400      	movs	r4, #0
 810d99a:	7808      	ldrb	r0, [r1, #0]
 810d99c:	f7ff ff8c 	bl	810d8b8 <__hexdig_fun>
 810d9a0:	1e43      	subs	r3, r0, #1
 810d9a2:	b2db      	uxtb	r3, r3
 810d9a4:	2b18      	cmp	r3, #24
 810d9a6:	d830      	bhi.n	810da0a <__gethex+0x126>
 810d9a8:	f1a0 0210 	sub.w	r2, r0, #16
 810d9ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810d9b0:	f7ff ff82 	bl	810d8b8 <__hexdig_fun>
 810d9b4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 810d9b8:	fa5f fc8c 	uxtb.w	ip, ip
 810d9bc:	f1bc 0f18 	cmp.w	ip, #24
 810d9c0:	f04f 030a 	mov.w	r3, #10
 810d9c4:	d91e      	bls.n	810da04 <__gethex+0x120>
 810d9c6:	b104      	cbz	r4, 810d9ca <__gethex+0xe6>
 810d9c8:	4252      	negs	r2, r2
 810d9ca:	4417      	add	r7, r2
 810d9cc:	f8ca 1000 	str.w	r1, [sl]
 810d9d0:	b1ed      	cbz	r5, 810da0e <__gethex+0x12a>
 810d9d2:	f1bb 0f00 	cmp.w	fp, #0
 810d9d6:	bf0c      	ite	eq
 810d9d8:	2506      	moveq	r5, #6
 810d9da:	2500      	movne	r5, #0
 810d9dc:	4628      	mov	r0, r5
 810d9de:	b005      	add	sp, #20
 810d9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9e4:	2500      	movs	r5, #0
 810d9e6:	462c      	mov	r4, r5
 810d9e8:	e7b0      	b.n	810d94c <__gethex+0x68>
 810d9ea:	2c00      	cmp	r4, #0
 810d9ec:	d1c7      	bne.n	810d97e <__gethex+0x9a>
 810d9ee:	4627      	mov	r7, r4
 810d9f0:	e7c7      	b.n	810d982 <__gethex+0x9e>
 810d9f2:	464e      	mov	r6, r9
 810d9f4:	462f      	mov	r7, r5
 810d9f6:	2501      	movs	r5, #1
 810d9f8:	e7c3      	b.n	810d982 <__gethex+0x9e>
 810d9fa:	2400      	movs	r4, #0
 810d9fc:	1cb1      	adds	r1, r6, #2
 810d9fe:	e7cc      	b.n	810d99a <__gethex+0xb6>
 810da00:	2401      	movs	r4, #1
 810da02:	e7fb      	b.n	810d9fc <__gethex+0x118>
 810da04:	fb03 0002 	mla	r0, r3, r2, r0
 810da08:	e7ce      	b.n	810d9a8 <__gethex+0xc4>
 810da0a:	4631      	mov	r1, r6
 810da0c:	e7de      	b.n	810d9cc <__gethex+0xe8>
 810da0e:	eba6 0309 	sub.w	r3, r6, r9
 810da12:	3b01      	subs	r3, #1
 810da14:	4629      	mov	r1, r5
 810da16:	2b07      	cmp	r3, #7
 810da18:	dc0a      	bgt.n	810da30 <__gethex+0x14c>
 810da1a:	9801      	ldr	r0, [sp, #4]
 810da1c:	f7fd ff84 	bl	810b928 <_Balloc>
 810da20:	4604      	mov	r4, r0
 810da22:	b940      	cbnz	r0, 810da36 <__gethex+0x152>
 810da24:	4b5c      	ldr	r3, [pc, #368]	@ (810db98 <__gethex+0x2b4>)
 810da26:	4602      	mov	r2, r0
 810da28:	21e4      	movs	r1, #228	@ 0xe4
 810da2a:	485c      	ldr	r0, [pc, #368]	@ (810db9c <__gethex+0x2b8>)
 810da2c:	f7ff fec0 	bl	810d7b0 <__assert_func>
 810da30:	3101      	adds	r1, #1
 810da32:	105b      	asrs	r3, r3, #1
 810da34:	e7ef      	b.n	810da16 <__gethex+0x132>
 810da36:	f100 0a14 	add.w	sl, r0, #20
 810da3a:	2300      	movs	r3, #0
 810da3c:	4655      	mov	r5, sl
 810da3e:	469b      	mov	fp, r3
 810da40:	45b1      	cmp	r9, r6
 810da42:	d337      	bcc.n	810dab4 <__gethex+0x1d0>
 810da44:	f845 bb04 	str.w	fp, [r5], #4
 810da48:	eba5 050a 	sub.w	r5, r5, sl
 810da4c:	10ad      	asrs	r5, r5, #2
 810da4e:	6125      	str	r5, [r4, #16]
 810da50:	4658      	mov	r0, fp
 810da52:	f7fe f85b 	bl	810bb0c <__hi0bits>
 810da56:	016d      	lsls	r5, r5, #5
 810da58:	f8d8 6000 	ldr.w	r6, [r8]
 810da5c:	1a2d      	subs	r5, r5, r0
 810da5e:	42b5      	cmp	r5, r6
 810da60:	dd54      	ble.n	810db0c <__gethex+0x228>
 810da62:	1bad      	subs	r5, r5, r6
 810da64:	4629      	mov	r1, r5
 810da66:	4620      	mov	r0, r4
 810da68:	f7fe fbef 	bl	810c24a <__any_on>
 810da6c:	4681      	mov	r9, r0
 810da6e:	b178      	cbz	r0, 810da90 <__gethex+0x1ac>
 810da70:	1e6b      	subs	r3, r5, #1
 810da72:	1159      	asrs	r1, r3, #5
 810da74:	f003 021f 	and.w	r2, r3, #31
 810da78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810da7c:	f04f 0901 	mov.w	r9, #1
 810da80:	fa09 f202 	lsl.w	r2, r9, r2
 810da84:	420a      	tst	r2, r1
 810da86:	d003      	beq.n	810da90 <__gethex+0x1ac>
 810da88:	454b      	cmp	r3, r9
 810da8a:	dc36      	bgt.n	810dafa <__gethex+0x216>
 810da8c:	f04f 0902 	mov.w	r9, #2
 810da90:	4629      	mov	r1, r5
 810da92:	4620      	mov	r0, r4
 810da94:	f7ff febe 	bl	810d814 <rshift>
 810da98:	442f      	add	r7, r5
 810da9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810da9e:	42bb      	cmp	r3, r7
 810daa0:	da42      	bge.n	810db28 <__gethex+0x244>
 810daa2:	9801      	ldr	r0, [sp, #4]
 810daa4:	4621      	mov	r1, r4
 810daa6:	f7fd ff7f 	bl	810b9a8 <_Bfree>
 810daaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810daac:	2300      	movs	r3, #0
 810daae:	6013      	str	r3, [r2, #0]
 810dab0:	25a3      	movs	r5, #163	@ 0xa3
 810dab2:	e793      	b.n	810d9dc <__gethex+0xf8>
 810dab4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 810dab8:	2a2e      	cmp	r2, #46	@ 0x2e
 810daba:	d012      	beq.n	810dae2 <__gethex+0x1fe>
 810dabc:	2b20      	cmp	r3, #32
 810dabe:	d104      	bne.n	810daca <__gethex+0x1e6>
 810dac0:	f845 bb04 	str.w	fp, [r5], #4
 810dac4:	f04f 0b00 	mov.w	fp, #0
 810dac8:	465b      	mov	r3, fp
 810daca:	7830      	ldrb	r0, [r6, #0]
 810dacc:	9303      	str	r3, [sp, #12]
 810dace:	f7ff fef3 	bl	810d8b8 <__hexdig_fun>
 810dad2:	9b03      	ldr	r3, [sp, #12]
 810dad4:	f000 000f 	and.w	r0, r0, #15
 810dad8:	4098      	lsls	r0, r3
 810dada:	ea4b 0b00 	orr.w	fp, fp, r0
 810dade:	3304      	adds	r3, #4
 810dae0:	e7ae      	b.n	810da40 <__gethex+0x15c>
 810dae2:	45b1      	cmp	r9, r6
 810dae4:	d8ea      	bhi.n	810dabc <__gethex+0x1d8>
 810dae6:	492b      	ldr	r1, [pc, #172]	@ (810db94 <__gethex+0x2b0>)
 810dae8:	9303      	str	r3, [sp, #12]
 810daea:	2201      	movs	r2, #1
 810daec:	4630      	mov	r0, r6
 810daee:	f7ff fe13 	bl	810d718 <strncmp>
 810daf2:	9b03      	ldr	r3, [sp, #12]
 810daf4:	2800      	cmp	r0, #0
 810daf6:	d1e1      	bne.n	810dabc <__gethex+0x1d8>
 810daf8:	e7a2      	b.n	810da40 <__gethex+0x15c>
 810dafa:	1ea9      	subs	r1, r5, #2
 810dafc:	4620      	mov	r0, r4
 810dafe:	f7fe fba4 	bl	810c24a <__any_on>
 810db02:	2800      	cmp	r0, #0
 810db04:	d0c2      	beq.n	810da8c <__gethex+0x1a8>
 810db06:	f04f 0903 	mov.w	r9, #3
 810db0a:	e7c1      	b.n	810da90 <__gethex+0x1ac>
 810db0c:	da09      	bge.n	810db22 <__gethex+0x23e>
 810db0e:	1b75      	subs	r5, r6, r5
 810db10:	4621      	mov	r1, r4
 810db12:	9801      	ldr	r0, [sp, #4]
 810db14:	462a      	mov	r2, r5
 810db16:	f7fe f95f 	bl	810bdd8 <__lshift>
 810db1a:	1b7f      	subs	r7, r7, r5
 810db1c:	4604      	mov	r4, r0
 810db1e:	f100 0a14 	add.w	sl, r0, #20
 810db22:	f04f 0900 	mov.w	r9, #0
 810db26:	e7b8      	b.n	810da9a <__gethex+0x1b6>
 810db28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810db2c:	42bd      	cmp	r5, r7
 810db2e:	dd6f      	ble.n	810dc10 <__gethex+0x32c>
 810db30:	1bed      	subs	r5, r5, r7
 810db32:	42ae      	cmp	r6, r5
 810db34:	dc34      	bgt.n	810dba0 <__gethex+0x2bc>
 810db36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810db3a:	2b02      	cmp	r3, #2
 810db3c:	d022      	beq.n	810db84 <__gethex+0x2a0>
 810db3e:	2b03      	cmp	r3, #3
 810db40:	d024      	beq.n	810db8c <__gethex+0x2a8>
 810db42:	2b01      	cmp	r3, #1
 810db44:	d115      	bne.n	810db72 <__gethex+0x28e>
 810db46:	42ae      	cmp	r6, r5
 810db48:	d113      	bne.n	810db72 <__gethex+0x28e>
 810db4a:	2e01      	cmp	r6, #1
 810db4c:	d10b      	bne.n	810db66 <__gethex+0x282>
 810db4e:	9a02      	ldr	r2, [sp, #8]
 810db50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810db54:	6013      	str	r3, [r2, #0]
 810db56:	2301      	movs	r3, #1
 810db58:	6123      	str	r3, [r4, #16]
 810db5a:	f8ca 3000 	str.w	r3, [sl]
 810db5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810db60:	2562      	movs	r5, #98	@ 0x62
 810db62:	601c      	str	r4, [r3, #0]
 810db64:	e73a      	b.n	810d9dc <__gethex+0xf8>
 810db66:	1e71      	subs	r1, r6, #1
 810db68:	4620      	mov	r0, r4
 810db6a:	f7fe fb6e 	bl	810c24a <__any_on>
 810db6e:	2800      	cmp	r0, #0
 810db70:	d1ed      	bne.n	810db4e <__gethex+0x26a>
 810db72:	9801      	ldr	r0, [sp, #4]
 810db74:	4621      	mov	r1, r4
 810db76:	f7fd ff17 	bl	810b9a8 <_Bfree>
 810db7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810db7c:	2300      	movs	r3, #0
 810db7e:	6013      	str	r3, [r2, #0]
 810db80:	2550      	movs	r5, #80	@ 0x50
 810db82:	e72b      	b.n	810d9dc <__gethex+0xf8>
 810db84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810db86:	2b00      	cmp	r3, #0
 810db88:	d1f3      	bne.n	810db72 <__gethex+0x28e>
 810db8a:	e7e0      	b.n	810db4e <__gethex+0x26a>
 810db8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810db8e:	2b00      	cmp	r3, #0
 810db90:	d1dd      	bne.n	810db4e <__gethex+0x26a>
 810db92:	e7ee      	b.n	810db72 <__gethex+0x28e>
 810db94:	0810ea20 	.word	0x0810ea20
 810db98:	0810e8b9 	.word	0x0810e8b9
 810db9c:	0810ebce 	.word	0x0810ebce
 810dba0:	1e6f      	subs	r7, r5, #1
 810dba2:	f1b9 0f00 	cmp.w	r9, #0
 810dba6:	d130      	bne.n	810dc0a <__gethex+0x326>
 810dba8:	b127      	cbz	r7, 810dbb4 <__gethex+0x2d0>
 810dbaa:	4639      	mov	r1, r7
 810dbac:	4620      	mov	r0, r4
 810dbae:	f7fe fb4c 	bl	810c24a <__any_on>
 810dbb2:	4681      	mov	r9, r0
 810dbb4:	117a      	asrs	r2, r7, #5
 810dbb6:	2301      	movs	r3, #1
 810dbb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810dbbc:	f007 071f 	and.w	r7, r7, #31
 810dbc0:	40bb      	lsls	r3, r7
 810dbc2:	4213      	tst	r3, r2
 810dbc4:	4629      	mov	r1, r5
 810dbc6:	4620      	mov	r0, r4
 810dbc8:	bf18      	it	ne
 810dbca:	f049 0902 	orrne.w	r9, r9, #2
 810dbce:	f7ff fe21 	bl	810d814 <rshift>
 810dbd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 810dbd6:	1b76      	subs	r6, r6, r5
 810dbd8:	2502      	movs	r5, #2
 810dbda:	f1b9 0f00 	cmp.w	r9, #0
 810dbde:	d047      	beq.n	810dc70 <__gethex+0x38c>
 810dbe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810dbe4:	2b02      	cmp	r3, #2
 810dbe6:	d015      	beq.n	810dc14 <__gethex+0x330>
 810dbe8:	2b03      	cmp	r3, #3
 810dbea:	d017      	beq.n	810dc1c <__gethex+0x338>
 810dbec:	2b01      	cmp	r3, #1
 810dbee:	d109      	bne.n	810dc04 <__gethex+0x320>
 810dbf0:	f019 0f02 	tst.w	r9, #2
 810dbf4:	d006      	beq.n	810dc04 <__gethex+0x320>
 810dbf6:	f8da 3000 	ldr.w	r3, [sl]
 810dbfa:	ea49 0903 	orr.w	r9, r9, r3
 810dbfe:	f019 0f01 	tst.w	r9, #1
 810dc02:	d10e      	bne.n	810dc22 <__gethex+0x33e>
 810dc04:	f045 0510 	orr.w	r5, r5, #16
 810dc08:	e032      	b.n	810dc70 <__gethex+0x38c>
 810dc0a:	f04f 0901 	mov.w	r9, #1
 810dc0e:	e7d1      	b.n	810dbb4 <__gethex+0x2d0>
 810dc10:	2501      	movs	r5, #1
 810dc12:	e7e2      	b.n	810dbda <__gethex+0x2f6>
 810dc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dc16:	f1c3 0301 	rsb	r3, r3, #1
 810dc1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810dc1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dc1e:	2b00      	cmp	r3, #0
 810dc20:	d0f0      	beq.n	810dc04 <__gethex+0x320>
 810dc22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810dc26:	f104 0314 	add.w	r3, r4, #20
 810dc2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810dc2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810dc32:	f04f 0c00 	mov.w	ip, #0
 810dc36:	4618      	mov	r0, r3
 810dc38:	f853 2b04 	ldr.w	r2, [r3], #4
 810dc3c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 810dc40:	d01b      	beq.n	810dc7a <__gethex+0x396>
 810dc42:	3201      	adds	r2, #1
 810dc44:	6002      	str	r2, [r0, #0]
 810dc46:	2d02      	cmp	r5, #2
 810dc48:	f104 0314 	add.w	r3, r4, #20
 810dc4c:	d13c      	bne.n	810dcc8 <__gethex+0x3e4>
 810dc4e:	f8d8 2000 	ldr.w	r2, [r8]
 810dc52:	3a01      	subs	r2, #1
 810dc54:	42b2      	cmp	r2, r6
 810dc56:	d109      	bne.n	810dc6c <__gethex+0x388>
 810dc58:	1171      	asrs	r1, r6, #5
 810dc5a:	2201      	movs	r2, #1
 810dc5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810dc60:	f006 061f 	and.w	r6, r6, #31
 810dc64:	fa02 f606 	lsl.w	r6, r2, r6
 810dc68:	421e      	tst	r6, r3
 810dc6a:	d13a      	bne.n	810dce2 <__gethex+0x3fe>
 810dc6c:	f045 0520 	orr.w	r5, r5, #32
 810dc70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810dc72:	601c      	str	r4, [r3, #0]
 810dc74:	9b02      	ldr	r3, [sp, #8]
 810dc76:	601f      	str	r7, [r3, #0]
 810dc78:	e6b0      	b.n	810d9dc <__gethex+0xf8>
 810dc7a:	4299      	cmp	r1, r3
 810dc7c:	f843 cc04 	str.w	ip, [r3, #-4]
 810dc80:	d8d9      	bhi.n	810dc36 <__gethex+0x352>
 810dc82:	68a3      	ldr	r3, [r4, #8]
 810dc84:	459b      	cmp	fp, r3
 810dc86:	db17      	blt.n	810dcb8 <__gethex+0x3d4>
 810dc88:	6861      	ldr	r1, [r4, #4]
 810dc8a:	9801      	ldr	r0, [sp, #4]
 810dc8c:	3101      	adds	r1, #1
 810dc8e:	f7fd fe4b 	bl	810b928 <_Balloc>
 810dc92:	4681      	mov	r9, r0
 810dc94:	b918      	cbnz	r0, 810dc9e <__gethex+0x3ba>
 810dc96:	4b1a      	ldr	r3, [pc, #104]	@ (810dd00 <__gethex+0x41c>)
 810dc98:	4602      	mov	r2, r0
 810dc9a:	2184      	movs	r1, #132	@ 0x84
 810dc9c:	e6c5      	b.n	810da2a <__gethex+0x146>
 810dc9e:	6922      	ldr	r2, [r4, #16]
 810dca0:	3202      	adds	r2, #2
 810dca2:	f104 010c 	add.w	r1, r4, #12
 810dca6:	0092      	lsls	r2, r2, #2
 810dca8:	300c      	adds	r0, #12
 810dcaa:	f7fc fedc 	bl	810aa66 <memcpy>
 810dcae:	4621      	mov	r1, r4
 810dcb0:	9801      	ldr	r0, [sp, #4]
 810dcb2:	f7fd fe79 	bl	810b9a8 <_Bfree>
 810dcb6:	464c      	mov	r4, r9
 810dcb8:	6923      	ldr	r3, [r4, #16]
 810dcba:	1c5a      	adds	r2, r3, #1
 810dcbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810dcc0:	6122      	str	r2, [r4, #16]
 810dcc2:	2201      	movs	r2, #1
 810dcc4:	615a      	str	r2, [r3, #20]
 810dcc6:	e7be      	b.n	810dc46 <__gethex+0x362>
 810dcc8:	6922      	ldr	r2, [r4, #16]
 810dcca:	455a      	cmp	r2, fp
 810dccc:	dd0b      	ble.n	810dce6 <__gethex+0x402>
 810dcce:	2101      	movs	r1, #1
 810dcd0:	4620      	mov	r0, r4
 810dcd2:	f7ff fd9f 	bl	810d814 <rshift>
 810dcd6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810dcda:	3701      	adds	r7, #1
 810dcdc:	42bb      	cmp	r3, r7
 810dcde:	f6ff aee0 	blt.w	810daa2 <__gethex+0x1be>
 810dce2:	2501      	movs	r5, #1
 810dce4:	e7c2      	b.n	810dc6c <__gethex+0x388>
 810dce6:	f016 061f 	ands.w	r6, r6, #31
 810dcea:	d0fa      	beq.n	810dce2 <__gethex+0x3fe>
 810dcec:	4453      	add	r3, sl
 810dcee:	f1c6 0620 	rsb	r6, r6, #32
 810dcf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810dcf6:	f7fd ff09 	bl	810bb0c <__hi0bits>
 810dcfa:	42b0      	cmp	r0, r6
 810dcfc:	dbe7      	blt.n	810dcce <__gethex+0x3ea>
 810dcfe:	e7f0      	b.n	810dce2 <__gethex+0x3fe>
 810dd00:	0810e8b9 	.word	0x0810e8b9

0810dd04 <L_shift>:
 810dd04:	f1c2 0208 	rsb	r2, r2, #8
 810dd08:	0092      	lsls	r2, r2, #2
 810dd0a:	b570      	push	{r4, r5, r6, lr}
 810dd0c:	f1c2 0620 	rsb	r6, r2, #32
 810dd10:	6843      	ldr	r3, [r0, #4]
 810dd12:	6804      	ldr	r4, [r0, #0]
 810dd14:	fa03 f506 	lsl.w	r5, r3, r6
 810dd18:	432c      	orrs	r4, r5
 810dd1a:	40d3      	lsrs	r3, r2
 810dd1c:	6004      	str	r4, [r0, #0]
 810dd1e:	f840 3f04 	str.w	r3, [r0, #4]!
 810dd22:	4288      	cmp	r0, r1
 810dd24:	d3f4      	bcc.n	810dd10 <L_shift+0xc>
 810dd26:	bd70      	pop	{r4, r5, r6, pc}

0810dd28 <__match>:
 810dd28:	b530      	push	{r4, r5, lr}
 810dd2a:	6803      	ldr	r3, [r0, #0]
 810dd2c:	3301      	adds	r3, #1
 810dd2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810dd32:	b914      	cbnz	r4, 810dd3a <__match+0x12>
 810dd34:	6003      	str	r3, [r0, #0]
 810dd36:	2001      	movs	r0, #1
 810dd38:	bd30      	pop	{r4, r5, pc}
 810dd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dd3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 810dd42:	2d19      	cmp	r5, #25
 810dd44:	bf98      	it	ls
 810dd46:	3220      	addls	r2, #32
 810dd48:	42a2      	cmp	r2, r4
 810dd4a:	d0f0      	beq.n	810dd2e <__match+0x6>
 810dd4c:	2000      	movs	r0, #0
 810dd4e:	e7f3      	b.n	810dd38 <__match+0x10>

0810dd50 <__hexnan>:
 810dd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd54:	680b      	ldr	r3, [r1, #0]
 810dd56:	6801      	ldr	r1, [r0, #0]
 810dd58:	115e      	asrs	r6, r3, #5
 810dd5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810dd5e:	f013 031f 	ands.w	r3, r3, #31
 810dd62:	b087      	sub	sp, #28
 810dd64:	bf18      	it	ne
 810dd66:	3604      	addne	r6, #4
 810dd68:	2500      	movs	r5, #0
 810dd6a:	1f37      	subs	r7, r6, #4
 810dd6c:	4682      	mov	sl, r0
 810dd6e:	4690      	mov	r8, r2
 810dd70:	9301      	str	r3, [sp, #4]
 810dd72:	f846 5c04 	str.w	r5, [r6, #-4]
 810dd76:	46b9      	mov	r9, r7
 810dd78:	463c      	mov	r4, r7
 810dd7a:	9502      	str	r5, [sp, #8]
 810dd7c:	46ab      	mov	fp, r5
 810dd7e:	784a      	ldrb	r2, [r1, #1]
 810dd80:	1c4b      	adds	r3, r1, #1
 810dd82:	9303      	str	r3, [sp, #12]
 810dd84:	b342      	cbz	r2, 810ddd8 <__hexnan+0x88>
 810dd86:	4610      	mov	r0, r2
 810dd88:	9105      	str	r1, [sp, #20]
 810dd8a:	9204      	str	r2, [sp, #16]
 810dd8c:	f7ff fd94 	bl	810d8b8 <__hexdig_fun>
 810dd90:	2800      	cmp	r0, #0
 810dd92:	d151      	bne.n	810de38 <__hexnan+0xe8>
 810dd94:	9a04      	ldr	r2, [sp, #16]
 810dd96:	9905      	ldr	r1, [sp, #20]
 810dd98:	2a20      	cmp	r2, #32
 810dd9a:	d818      	bhi.n	810ddce <__hexnan+0x7e>
 810dd9c:	9b02      	ldr	r3, [sp, #8]
 810dd9e:	459b      	cmp	fp, r3
 810dda0:	dd13      	ble.n	810ddca <__hexnan+0x7a>
 810dda2:	454c      	cmp	r4, r9
 810dda4:	d206      	bcs.n	810ddb4 <__hexnan+0x64>
 810dda6:	2d07      	cmp	r5, #7
 810dda8:	dc04      	bgt.n	810ddb4 <__hexnan+0x64>
 810ddaa:	462a      	mov	r2, r5
 810ddac:	4649      	mov	r1, r9
 810ddae:	4620      	mov	r0, r4
 810ddb0:	f7ff ffa8 	bl	810dd04 <L_shift>
 810ddb4:	4544      	cmp	r4, r8
 810ddb6:	d952      	bls.n	810de5e <__hexnan+0x10e>
 810ddb8:	2300      	movs	r3, #0
 810ddba:	f1a4 0904 	sub.w	r9, r4, #4
 810ddbe:	f844 3c04 	str.w	r3, [r4, #-4]
 810ddc2:	f8cd b008 	str.w	fp, [sp, #8]
 810ddc6:	464c      	mov	r4, r9
 810ddc8:	461d      	mov	r5, r3
 810ddca:	9903      	ldr	r1, [sp, #12]
 810ddcc:	e7d7      	b.n	810dd7e <__hexnan+0x2e>
 810ddce:	2a29      	cmp	r2, #41	@ 0x29
 810ddd0:	d157      	bne.n	810de82 <__hexnan+0x132>
 810ddd2:	3102      	adds	r1, #2
 810ddd4:	f8ca 1000 	str.w	r1, [sl]
 810ddd8:	f1bb 0f00 	cmp.w	fp, #0
 810dddc:	d051      	beq.n	810de82 <__hexnan+0x132>
 810ddde:	454c      	cmp	r4, r9
 810dde0:	d206      	bcs.n	810ddf0 <__hexnan+0xa0>
 810dde2:	2d07      	cmp	r5, #7
 810dde4:	dc04      	bgt.n	810ddf0 <__hexnan+0xa0>
 810dde6:	462a      	mov	r2, r5
 810dde8:	4649      	mov	r1, r9
 810ddea:	4620      	mov	r0, r4
 810ddec:	f7ff ff8a 	bl	810dd04 <L_shift>
 810ddf0:	4544      	cmp	r4, r8
 810ddf2:	d936      	bls.n	810de62 <__hexnan+0x112>
 810ddf4:	f1a8 0204 	sub.w	r2, r8, #4
 810ddf8:	4623      	mov	r3, r4
 810ddfa:	f853 1b04 	ldr.w	r1, [r3], #4
 810ddfe:	f842 1f04 	str.w	r1, [r2, #4]!
 810de02:	429f      	cmp	r7, r3
 810de04:	d2f9      	bcs.n	810ddfa <__hexnan+0xaa>
 810de06:	1b3b      	subs	r3, r7, r4
 810de08:	f023 0303 	bic.w	r3, r3, #3
 810de0c:	3304      	adds	r3, #4
 810de0e:	3401      	adds	r4, #1
 810de10:	3e03      	subs	r6, #3
 810de12:	42b4      	cmp	r4, r6
 810de14:	bf88      	it	hi
 810de16:	2304      	movhi	r3, #4
 810de18:	4443      	add	r3, r8
 810de1a:	2200      	movs	r2, #0
 810de1c:	f843 2b04 	str.w	r2, [r3], #4
 810de20:	429f      	cmp	r7, r3
 810de22:	d2fb      	bcs.n	810de1c <__hexnan+0xcc>
 810de24:	683b      	ldr	r3, [r7, #0]
 810de26:	b91b      	cbnz	r3, 810de30 <__hexnan+0xe0>
 810de28:	4547      	cmp	r7, r8
 810de2a:	d128      	bne.n	810de7e <__hexnan+0x12e>
 810de2c:	2301      	movs	r3, #1
 810de2e:	603b      	str	r3, [r7, #0]
 810de30:	2005      	movs	r0, #5
 810de32:	b007      	add	sp, #28
 810de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810de38:	3501      	adds	r5, #1
 810de3a:	2d08      	cmp	r5, #8
 810de3c:	f10b 0b01 	add.w	fp, fp, #1
 810de40:	dd06      	ble.n	810de50 <__hexnan+0x100>
 810de42:	4544      	cmp	r4, r8
 810de44:	d9c1      	bls.n	810ddca <__hexnan+0x7a>
 810de46:	2300      	movs	r3, #0
 810de48:	f844 3c04 	str.w	r3, [r4, #-4]
 810de4c:	2501      	movs	r5, #1
 810de4e:	3c04      	subs	r4, #4
 810de50:	6822      	ldr	r2, [r4, #0]
 810de52:	f000 000f 	and.w	r0, r0, #15
 810de56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810de5a:	6020      	str	r0, [r4, #0]
 810de5c:	e7b5      	b.n	810ddca <__hexnan+0x7a>
 810de5e:	2508      	movs	r5, #8
 810de60:	e7b3      	b.n	810ddca <__hexnan+0x7a>
 810de62:	9b01      	ldr	r3, [sp, #4]
 810de64:	2b00      	cmp	r3, #0
 810de66:	d0dd      	beq.n	810de24 <__hexnan+0xd4>
 810de68:	f1c3 0320 	rsb	r3, r3, #32
 810de6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810de70:	40da      	lsrs	r2, r3
 810de72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810de76:	4013      	ands	r3, r2
 810de78:	f846 3c04 	str.w	r3, [r6, #-4]
 810de7c:	e7d2      	b.n	810de24 <__hexnan+0xd4>
 810de7e:	3f04      	subs	r7, #4
 810de80:	e7d0      	b.n	810de24 <__hexnan+0xd4>
 810de82:	2004      	movs	r0, #4
 810de84:	e7d5      	b.n	810de32 <__hexnan+0xe2>

0810de86 <__ascii_mbtowc>:
 810de86:	b082      	sub	sp, #8
 810de88:	b901      	cbnz	r1, 810de8c <__ascii_mbtowc+0x6>
 810de8a:	a901      	add	r1, sp, #4
 810de8c:	b142      	cbz	r2, 810dea0 <__ascii_mbtowc+0x1a>
 810de8e:	b14b      	cbz	r3, 810dea4 <__ascii_mbtowc+0x1e>
 810de90:	7813      	ldrb	r3, [r2, #0]
 810de92:	600b      	str	r3, [r1, #0]
 810de94:	7812      	ldrb	r2, [r2, #0]
 810de96:	1e10      	subs	r0, r2, #0
 810de98:	bf18      	it	ne
 810de9a:	2001      	movne	r0, #1
 810de9c:	b002      	add	sp, #8
 810de9e:	4770      	bx	lr
 810dea0:	4610      	mov	r0, r2
 810dea2:	e7fb      	b.n	810de9c <__ascii_mbtowc+0x16>
 810dea4:	f06f 0001 	mvn.w	r0, #1
 810dea8:	e7f8      	b.n	810de9c <__ascii_mbtowc+0x16>

0810deaa <_realloc_r>:
 810deaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810deae:	4680      	mov	r8, r0
 810deb0:	4615      	mov	r5, r2
 810deb2:	460c      	mov	r4, r1
 810deb4:	b921      	cbnz	r1, 810dec0 <_realloc_r+0x16>
 810deb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810deba:	4611      	mov	r1, r2
 810debc:	f7fd bca8 	b.w	810b810 <_malloc_r>
 810dec0:	b92a      	cbnz	r2, 810dece <_realloc_r+0x24>
 810dec2:	f7fd fc31 	bl	810b728 <_free_r>
 810dec6:	2400      	movs	r4, #0
 810dec8:	4620      	mov	r0, r4
 810deca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810dece:	f000 f840 	bl	810df52 <_malloc_usable_size_r>
 810ded2:	4285      	cmp	r5, r0
 810ded4:	4606      	mov	r6, r0
 810ded6:	d802      	bhi.n	810dede <_realloc_r+0x34>
 810ded8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810dedc:	d8f4      	bhi.n	810dec8 <_realloc_r+0x1e>
 810dede:	4629      	mov	r1, r5
 810dee0:	4640      	mov	r0, r8
 810dee2:	f7fd fc95 	bl	810b810 <_malloc_r>
 810dee6:	4607      	mov	r7, r0
 810dee8:	2800      	cmp	r0, #0
 810deea:	d0ec      	beq.n	810dec6 <_realloc_r+0x1c>
 810deec:	42b5      	cmp	r5, r6
 810deee:	462a      	mov	r2, r5
 810def0:	4621      	mov	r1, r4
 810def2:	bf28      	it	cs
 810def4:	4632      	movcs	r2, r6
 810def6:	f7fc fdb6 	bl	810aa66 <memcpy>
 810defa:	4621      	mov	r1, r4
 810defc:	4640      	mov	r0, r8
 810defe:	f7fd fc13 	bl	810b728 <_free_r>
 810df02:	463c      	mov	r4, r7
 810df04:	e7e0      	b.n	810dec8 <_realloc_r+0x1e>

0810df06 <__ascii_wctomb>:
 810df06:	4603      	mov	r3, r0
 810df08:	4608      	mov	r0, r1
 810df0a:	b141      	cbz	r1, 810df1e <__ascii_wctomb+0x18>
 810df0c:	2aff      	cmp	r2, #255	@ 0xff
 810df0e:	d904      	bls.n	810df1a <__ascii_wctomb+0x14>
 810df10:	228a      	movs	r2, #138	@ 0x8a
 810df12:	601a      	str	r2, [r3, #0]
 810df14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810df18:	4770      	bx	lr
 810df1a:	700a      	strb	r2, [r1, #0]
 810df1c:	2001      	movs	r0, #1
 810df1e:	4770      	bx	lr

0810df20 <fiprintf>:
 810df20:	b40e      	push	{r1, r2, r3}
 810df22:	b503      	push	{r0, r1, lr}
 810df24:	4601      	mov	r1, r0
 810df26:	ab03      	add	r3, sp, #12
 810df28:	4805      	ldr	r0, [pc, #20]	@ (810df40 <fiprintf+0x20>)
 810df2a:	f853 2b04 	ldr.w	r2, [r3], #4
 810df2e:	6800      	ldr	r0, [r0, #0]
 810df30:	9301      	str	r3, [sp, #4]
 810df32:	f7ff f9b1 	bl	810d298 <_vfiprintf_r>
 810df36:	b002      	add	sp, #8
 810df38:	f85d eb04 	ldr.w	lr, [sp], #4
 810df3c:	b003      	add	sp, #12
 810df3e:	4770      	bx	lr
 810df40:	10000028 	.word	0x10000028

0810df44 <abort>:
 810df44:	b508      	push	{r3, lr}
 810df46:	2006      	movs	r0, #6
 810df48:	f000 f834 	bl	810dfb4 <raise>
 810df4c:	2001      	movs	r0, #1
 810df4e:	f7f4 ffa1 	bl	8102e94 <_exit>

0810df52 <_malloc_usable_size_r>:
 810df52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810df56:	1f18      	subs	r0, r3, #4
 810df58:	2b00      	cmp	r3, #0
 810df5a:	bfbc      	itt	lt
 810df5c:	580b      	ldrlt	r3, [r1, r0]
 810df5e:	18c0      	addlt	r0, r0, r3
 810df60:	4770      	bx	lr

0810df62 <_raise_r>:
 810df62:	291f      	cmp	r1, #31
 810df64:	b538      	push	{r3, r4, r5, lr}
 810df66:	4605      	mov	r5, r0
 810df68:	460c      	mov	r4, r1
 810df6a:	d904      	bls.n	810df76 <_raise_r+0x14>
 810df6c:	2316      	movs	r3, #22
 810df6e:	6003      	str	r3, [r0, #0]
 810df70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810df74:	bd38      	pop	{r3, r4, r5, pc}
 810df76:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810df78:	b112      	cbz	r2, 810df80 <_raise_r+0x1e>
 810df7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810df7e:	b94b      	cbnz	r3, 810df94 <_raise_r+0x32>
 810df80:	4628      	mov	r0, r5
 810df82:	f000 f831 	bl	810dfe8 <_getpid_r>
 810df86:	4622      	mov	r2, r4
 810df88:	4601      	mov	r1, r0
 810df8a:	4628      	mov	r0, r5
 810df8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810df90:	f000 b818 	b.w	810dfc4 <_kill_r>
 810df94:	2b01      	cmp	r3, #1
 810df96:	d00a      	beq.n	810dfae <_raise_r+0x4c>
 810df98:	1c59      	adds	r1, r3, #1
 810df9a:	d103      	bne.n	810dfa4 <_raise_r+0x42>
 810df9c:	2316      	movs	r3, #22
 810df9e:	6003      	str	r3, [r0, #0]
 810dfa0:	2001      	movs	r0, #1
 810dfa2:	e7e7      	b.n	810df74 <_raise_r+0x12>
 810dfa4:	2100      	movs	r1, #0
 810dfa6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810dfaa:	4620      	mov	r0, r4
 810dfac:	4798      	blx	r3
 810dfae:	2000      	movs	r0, #0
 810dfb0:	e7e0      	b.n	810df74 <_raise_r+0x12>
	...

0810dfb4 <raise>:
 810dfb4:	4b02      	ldr	r3, [pc, #8]	@ (810dfc0 <raise+0xc>)
 810dfb6:	4601      	mov	r1, r0
 810dfb8:	6818      	ldr	r0, [r3, #0]
 810dfba:	f7ff bfd2 	b.w	810df62 <_raise_r>
 810dfbe:	bf00      	nop
 810dfc0:	10000028 	.word	0x10000028

0810dfc4 <_kill_r>:
 810dfc4:	b538      	push	{r3, r4, r5, lr}
 810dfc6:	4d07      	ldr	r5, [pc, #28]	@ (810dfe4 <_kill_r+0x20>)
 810dfc8:	2300      	movs	r3, #0
 810dfca:	4604      	mov	r4, r0
 810dfcc:	4608      	mov	r0, r1
 810dfce:	4611      	mov	r1, r2
 810dfd0:	602b      	str	r3, [r5, #0]
 810dfd2:	f7f4 ff4f 	bl	8102e74 <_kill>
 810dfd6:	1c43      	adds	r3, r0, #1
 810dfd8:	d102      	bne.n	810dfe0 <_kill_r+0x1c>
 810dfda:	682b      	ldr	r3, [r5, #0]
 810dfdc:	b103      	cbz	r3, 810dfe0 <_kill_r+0x1c>
 810dfde:	6023      	str	r3, [r4, #0]
 810dfe0:	bd38      	pop	{r3, r4, r5, pc}
 810dfe2:	bf00      	nop
 810dfe4:	100005b4 	.word	0x100005b4

0810dfe8 <_getpid_r>:
 810dfe8:	f7f4 bf3c 	b.w	8102e64 <_getpid>

0810dfec <sqrt>:
 810dfec:	b538      	push	{r3, r4, r5, lr}
 810dfee:	ed2d 8b02 	vpush	{d8}
 810dff2:	ec55 4b10 	vmov	r4, r5, d0
 810dff6:	f000 f825 	bl	810e044 <__ieee754_sqrt>
 810dffa:	4622      	mov	r2, r4
 810dffc:	462b      	mov	r3, r5
 810dffe:	4620      	mov	r0, r4
 810e000:	4629      	mov	r1, r5
 810e002:	eeb0 8a40 	vmov.f32	s16, s0
 810e006:	eef0 8a60 	vmov.f32	s17, s1
 810e00a:	f7f2 fe17 	bl	8100c3c <__aeabi_dcmpun>
 810e00e:	b990      	cbnz	r0, 810e036 <sqrt+0x4a>
 810e010:	2200      	movs	r2, #0
 810e012:	2300      	movs	r3, #0
 810e014:	4620      	mov	r0, r4
 810e016:	4629      	mov	r1, r5
 810e018:	f7f2 fde8 	bl	8100bec <__aeabi_dcmplt>
 810e01c:	b158      	cbz	r0, 810e036 <sqrt+0x4a>
 810e01e:	f7fc fcf5 	bl	810aa0c <__errno>
 810e022:	2321      	movs	r3, #33	@ 0x21
 810e024:	6003      	str	r3, [r0, #0]
 810e026:	2200      	movs	r2, #0
 810e028:	2300      	movs	r3, #0
 810e02a:	4610      	mov	r0, r2
 810e02c:	4619      	mov	r1, r3
 810e02e:	f7f2 fc95 	bl	810095c <__aeabi_ddiv>
 810e032:	ec41 0b18 	vmov	d8, r0, r1
 810e036:	eeb0 0a48 	vmov.f32	s0, s16
 810e03a:	eef0 0a68 	vmov.f32	s1, s17
 810e03e:	ecbd 8b02 	vpop	{d8}
 810e042:	bd38      	pop	{r3, r4, r5, pc}

0810e044 <__ieee754_sqrt>:
 810e044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e048:	4a68      	ldr	r2, [pc, #416]	@ (810e1ec <__ieee754_sqrt+0x1a8>)
 810e04a:	ec55 4b10 	vmov	r4, r5, d0
 810e04e:	43aa      	bics	r2, r5
 810e050:	462b      	mov	r3, r5
 810e052:	4621      	mov	r1, r4
 810e054:	d110      	bne.n	810e078 <__ieee754_sqrt+0x34>
 810e056:	4622      	mov	r2, r4
 810e058:	4620      	mov	r0, r4
 810e05a:	4629      	mov	r1, r5
 810e05c:	f7f2 fb54 	bl	8100708 <__aeabi_dmul>
 810e060:	4602      	mov	r2, r0
 810e062:	460b      	mov	r3, r1
 810e064:	4620      	mov	r0, r4
 810e066:	4629      	mov	r1, r5
 810e068:	f7f2 f998 	bl	810039c <__adddf3>
 810e06c:	4604      	mov	r4, r0
 810e06e:	460d      	mov	r5, r1
 810e070:	ec45 4b10 	vmov	d0, r4, r5
 810e074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e078:	2d00      	cmp	r5, #0
 810e07a:	dc0e      	bgt.n	810e09a <__ieee754_sqrt+0x56>
 810e07c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 810e080:	4322      	orrs	r2, r4
 810e082:	d0f5      	beq.n	810e070 <__ieee754_sqrt+0x2c>
 810e084:	b19d      	cbz	r5, 810e0ae <__ieee754_sqrt+0x6a>
 810e086:	4622      	mov	r2, r4
 810e088:	4620      	mov	r0, r4
 810e08a:	4629      	mov	r1, r5
 810e08c:	f7f2 f984 	bl	8100398 <__aeabi_dsub>
 810e090:	4602      	mov	r2, r0
 810e092:	460b      	mov	r3, r1
 810e094:	f7f2 fc62 	bl	810095c <__aeabi_ddiv>
 810e098:	e7e8      	b.n	810e06c <__ieee754_sqrt+0x28>
 810e09a:	152a      	asrs	r2, r5, #20
 810e09c:	d115      	bne.n	810e0ca <__ieee754_sqrt+0x86>
 810e09e:	2000      	movs	r0, #0
 810e0a0:	e009      	b.n	810e0b6 <__ieee754_sqrt+0x72>
 810e0a2:	0acb      	lsrs	r3, r1, #11
 810e0a4:	3a15      	subs	r2, #21
 810e0a6:	0549      	lsls	r1, r1, #21
 810e0a8:	2b00      	cmp	r3, #0
 810e0aa:	d0fa      	beq.n	810e0a2 <__ieee754_sqrt+0x5e>
 810e0ac:	e7f7      	b.n	810e09e <__ieee754_sqrt+0x5a>
 810e0ae:	462a      	mov	r2, r5
 810e0b0:	e7fa      	b.n	810e0a8 <__ieee754_sqrt+0x64>
 810e0b2:	005b      	lsls	r3, r3, #1
 810e0b4:	3001      	adds	r0, #1
 810e0b6:	02dc      	lsls	r4, r3, #11
 810e0b8:	d5fb      	bpl.n	810e0b2 <__ieee754_sqrt+0x6e>
 810e0ba:	1e44      	subs	r4, r0, #1
 810e0bc:	1b12      	subs	r2, r2, r4
 810e0be:	f1c0 0420 	rsb	r4, r0, #32
 810e0c2:	fa21 f404 	lsr.w	r4, r1, r4
 810e0c6:	4323      	orrs	r3, r4
 810e0c8:	4081      	lsls	r1, r0
 810e0ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e0ce:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 810e0d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810e0d6:	07d2      	lsls	r2, r2, #31
 810e0d8:	bf5c      	itt	pl
 810e0da:	005b      	lslpl	r3, r3, #1
 810e0dc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 810e0e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e0e4:	bf58      	it	pl
 810e0e6:	0049      	lslpl	r1, r1, #1
 810e0e8:	2600      	movs	r6, #0
 810e0ea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 810e0ee:	106d      	asrs	r5, r5, #1
 810e0f0:	0049      	lsls	r1, r1, #1
 810e0f2:	2016      	movs	r0, #22
 810e0f4:	4632      	mov	r2, r6
 810e0f6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 810e0fa:	1917      	adds	r7, r2, r4
 810e0fc:	429f      	cmp	r7, r3
 810e0fe:	bfde      	ittt	le
 810e100:	193a      	addle	r2, r7, r4
 810e102:	1bdb      	suble	r3, r3, r7
 810e104:	1936      	addle	r6, r6, r4
 810e106:	0fcf      	lsrs	r7, r1, #31
 810e108:	3801      	subs	r0, #1
 810e10a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 810e10e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e112:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810e116:	d1f0      	bne.n	810e0fa <__ieee754_sqrt+0xb6>
 810e118:	4604      	mov	r4, r0
 810e11a:	2720      	movs	r7, #32
 810e11c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 810e120:	429a      	cmp	r2, r3
 810e122:	eb00 0e0c 	add.w	lr, r0, ip
 810e126:	db02      	blt.n	810e12e <__ieee754_sqrt+0xea>
 810e128:	d113      	bne.n	810e152 <__ieee754_sqrt+0x10e>
 810e12a:	458e      	cmp	lr, r1
 810e12c:	d811      	bhi.n	810e152 <__ieee754_sqrt+0x10e>
 810e12e:	f1be 0f00 	cmp.w	lr, #0
 810e132:	eb0e 000c 	add.w	r0, lr, ip
 810e136:	da42      	bge.n	810e1be <__ieee754_sqrt+0x17a>
 810e138:	2800      	cmp	r0, #0
 810e13a:	db40      	blt.n	810e1be <__ieee754_sqrt+0x17a>
 810e13c:	f102 0801 	add.w	r8, r2, #1
 810e140:	1a9b      	subs	r3, r3, r2
 810e142:	458e      	cmp	lr, r1
 810e144:	bf88      	it	hi
 810e146:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 810e14a:	eba1 010e 	sub.w	r1, r1, lr
 810e14e:	4464      	add	r4, ip
 810e150:	4642      	mov	r2, r8
 810e152:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 810e156:	3f01      	subs	r7, #1
 810e158:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 810e15c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e160:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 810e164:	d1dc      	bne.n	810e120 <__ieee754_sqrt+0xdc>
 810e166:	4319      	orrs	r1, r3
 810e168:	d01b      	beq.n	810e1a2 <__ieee754_sqrt+0x15e>
 810e16a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 810e1f0 <__ieee754_sqrt+0x1ac>
 810e16e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 810e1f4 <__ieee754_sqrt+0x1b0>
 810e172:	e9da 0100 	ldrd	r0, r1, [sl]
 810e176:	e9db 2300 	ldrd	r2, r3, [fp]
 810e17a:	f7f2 f90d 	bl	8100398 <__aeabi_dsub>
 810e17e:	e9da 8900 	ldrd	r8, r9, [sl]
 810e182:	4602      	mov	r2, r0
 810e184:	460b      	mov	r3, r1
 810e186:	4640      	mov	r0, r8
 810e188:	4649      	mov	r1, r9
 810e18a:	f7f2 fd39 	bl	8100c00 <__aeabi_dcmple>
 810e18e:	b140      	cbz	r0, 810e1a2 <__ieee754_sqrt+0x15e>
 810e190:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 810e194:	e9da 0100 	ldrd	r0, r1, [sl]
 810e198:	e9db 2300 	ldrd	r2, r3, [fp]
 810e19c:	d111      	bne.n	810e1c2 <__ieee754_sqrt+0x17e>
 810e19e:	3601      	adds	r6, #1
 810e1a0:	463c      	mov	r4, r7
 810e1a2:	1072      	asrs	r2, r6, #1
 810e1a4:	0863      	lsrs	r3, r4, #1
 810e1a6:	07f1      	lsls	r1, r6, #31
 810e1a8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 810e1ac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 810e1b0:	bf48      	it	mi
 810e1b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 810e1b6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 810e1ba:	4618      	mov	r0, r3
 810e1bc:	e756      	b.n	810e06c <__ieee754_sqrt+0x28>
 810e1be:	4690      	mov	r8, r2
 810e1c0:	e7be      	b.n	810e140 <__ieee754_sqrt+0xfc>
 810e1c2:	f7f2 f8eb 	bl	810039c <__adddf3>
 810e1c6:	e9da 8900 	ldrd	r8, r9, [sl]
 810e1ca:	4602      	mov	r2, r0
 810e1cc:	460b      	mov	r3, r1
 810e1ce:	4640      	mov	r0, r8
 810e1d0:	4649      	mov	r1, r9
 810e1d2:	f7f2 fd0b 	bl	8100bec <__aeabi_dcmplt>
 810e1d6:	b120      	cbz	r0, 810e1e2 <__ieee754_sqrt+0x19e>
 810e1d8:	1ca0      	adds	r0, r4, #2
 810e1da:	bf08      	it	eq
 810e1dc:	3601      	addeq	r6, #1
 810e1de:	3402      	adds	r4, #2
 810e1e0:	e7df      	b.n	810e1a2 <__ieee754_sqrt+0x15e>
 810e1e2:	1c63      	adds	r3, r4, #1
 810e1e4:	f023 0401 	bic.w	r4, r3, #1
 810e1e8:	e7db      	b.n	810e1a2 <__ieee754_sqrt+0x15e>
 810e1ea:	bf00      	nop
 810e1ec:	7ff00000 	.word	0x7ff00000
 810e1f0:	100001f0 	.word	0x100001f0
 810e1f4:	100001e8 	.word	0x100001e8

0810e1f8 <_init>:
 810e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e1fa:	bf00      	nop
 810e1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e1fe:	bc08      	pop	{r3}
 810e200:	469e      	mov	lr, r3
 810e202:	4770      	bx	lr

0810e204 <_fini>:
 810e204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e206:	bf00      	nop
 810e208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e20a:	bc08      	pop	{r3}
 810e20c:	469e      	mov	lr, r3
 810e20e:	4770      	bx	lr
