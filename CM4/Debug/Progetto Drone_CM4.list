
Progetto Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfb0  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0810e250  0810e250  0000f250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec70  0810ec70  0000fc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ec78  0810ec78  0000fc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810ec7c  0810ec7c  0000fc7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  10000000  0810ec80  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003c8  100001f8  0810ee78  000101f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  100005c0  0810ee78  000105c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c6bb  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000330d  00000000  00000000  0002c8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001720  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001242  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc91  00000000  00000000  00032552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d136  00000000  00000000  0006f1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018cbf8  00000000  00000000  0008c319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218f11  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007914  00000000  00000000  00218f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00220868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f8 	.word	0x100001f8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e238 	.word	0x0810e238

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001fc 	.word	0x100001fc
 81002dc:	0810e238 	.word	0x0810e238

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <ESC_Calibrate>:
 */
#include "main.h"
#include <ESC.h>


void ESC_Calibrate(){
 8101124:	b580      	push	{r7, lr}
 8101126:	af00      	add	r7, sp, #0
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 8101128:	4b32      	ldr	r3, [pc, #200]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810112a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810112c:	4613      	mov	r3, r2
 810112e:	009b      	lsls	r3, r3, #2
 8101130:	4413      	add	r3, r2
 8101132:	005b      	lsls	r3, r3, #1
 8101134:	4619      	mov	r1, r3
 8101136:	4a2f      	ldr	r2, [pc, #188]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101138:	4b2f      	ldr	r3, [pc, #188]	@ (81011f8 <ESC_Calibrate+0xd4>)
 810113a:	fba3 1301 	umull	r1, r3, r3, r1
 810113e:	095b      	lsrs	r3, r3, #5
 8101140:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 8101142:	4b2c      	ldr	r3, [pc, #176]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101146:	4613      	mov	r3, r2
 8101148:	009b      	lsls	r3, r3, #2
 810114a:	4413      	add	r3, r2
 810114c:	005b      	lsls	r3, r3, #1
 810114e:	4619      	mov	r1, r3
 8101150:	4a28      	ldr	r2, [pc, #160]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101152:	4b29      	ldr	r3, [pc, #164]	@ (81011f8 <ESC_Calibrate+0xd4>)
 8101154:	fba3 1301 	umull	r1, r3, r3, r1
 8101158:	095b      	lsrs	r3, r3, #5
 810115a:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 810115c:	4b25      	ldr	r3, [pc, #148]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810115e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101160:	4613      	mov	r3, r2
 8101162:	009b      	lsls	r3, r3, #2
 8101164:	4413      	add	r3, r2
 8101166:	005b      	lsls	r3, r3, #1
 8101168:	4619      	mov	r1, r3
 810116a:	4a22      	ldr	r2, [pc, #136]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810116c:	4b22      	ldr	r3, [pc, #136]	@ (81011f8 <ESC_Calibrate+0xd4>)
 810116e:	fba3 1301 	umull	r1, r3, r3, r1
 8101172:	095b      	lsrs	r3, r3, #5
 8101174:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 8101176:	4b1f      	ldr	r3, [pc, #124]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810117a:	4613      	mov	r3, r2
 810117c:	009b      	lsls	r3, r3, #2
 810117e:	4413      	add	r3, r2
 8101180:	005b      	lsls	r3, r3, #1
 8101182:	4619      	mov	r1, r3
 8101184:	4a1b      	ldr	r2, [pc, #108]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101186:	4b1c      	ldr	r3, [pc, #112]	@ (81011f8 <ESC_Calibrate+0xd4>)
 8101188:	fba3 1301 	umull	r1, r3, r3, r1
 810118c:	095b      	lsrs	r3, r3, #5
 810118e:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_Delay(3000);
 8101190:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8101194:	f002 f82a 	bl	81031ec <HAL_Delay>
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101198:	4b16      	ldr	r3, [pc, #88]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810119a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810119c:	4613      	mov	r3, r2
 810119e:	009b      	lsls	r3, r3, #2
 81011a0:	4413      	add	r3, r2
 81011a2:	4a14      	ldr	r2, [pc, #80]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011a4:	4914      	ldr	r1, [pc, #80]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011a6:	fba1 1303 	umull	r1, r3, r1, r3
 81011aa:	095b      	lsrs	r3, r3, #5
 81011ac:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81011ae:	4b11      	ldr	r3, [pc, #68]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81011b2:	4613      	mov	r3, r2
 81011b4:	009b      	lsls	r3, r3, #2
 81011b6:	4413      	add	r3, r2
 81011b8:	4a0e      	ldr	r2, [pc, #56]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011ba:	490f      	ldr	r1, [pc, #60]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011bc:	fba1 1303 	umull	r1, r3, r1, r3
 81011c0:	095b      	lsrs	r3, r3, #5
 81011c2:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81011c4:	4b0b      	ldr	r3, [pc, #44]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81011c8:	4613      	mov	r3, r2
 81011ca:	009b      	lsls	r3, r3, #2
 81011cc:	4413      	add	r3, r2
 81011ce:	4a09      	ldr	r2, [pc, #36]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011d0:	4909      	ldr	r1, [pc, #36]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011d2:	fba1 1303 	umull	r1, r3, r1, r3
 81011d6:	095b      	lsrs	r3, r3, #5
 81011d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81011da:	4b06      	ldr	r3, [pc, #24]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81011de:	4613      	mov	r3, r2
 81011e0:	009b      	lsls	r3, r3, #2
 81011e2:	4413      	add	r3, r2
 81011e4:	4a03      	ldr	r2, [pc, #12]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011e6:	4904      	ldr	r1, [pc, #16]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011e8:	fba1 1303 	umull	r1, r3, r1, r3
 81011ec:	095b      	lsrs	r3, r3, #5
 81011ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 81011f0:	bf00      	nop
 81011f2:	bd80      	pop	{r7, pc}
 81011f4:	40000400 	.word	0x40000400
 81011f8:	51eb851f 	.word	0x51eb851f
 81011fc:	00000000 	.word	0x00000000

08101200 <rangeDuty>:

float rangeDuty(float duty){
 8101200:	b580      	push	{r7, lr}
 8101202:	b082      	sub	sp, #8
 8101204:	af00      	add	r7, sp, #0
 8101206:	ed87 0a01 	vstr	s0, [r7, #4]
	if(duty<MIN_DUTY){
 810120a:	6878      	ldr	r0, [r7, #4]
 810120c:	f7ff fa24 	bl	8100658 <__aeabi_f2d>
 8101210:	a311      	add	r3, pc, #68	@ (adr r3, 8101258 <rangeDuty+0x58>)
 8101212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101216:	f7ff fce9 	bl	8100bec <__aeabi_dcmplt>
 810121a:	4603      	mov	r3, r0
 810121c:	2b00      	cmp	r3, #0
 810121e:	d001      	beq.n	8101224 <rangeDuty+0x24>
		return MIN_DUTY;
 8101220:	4b0b      	ldr	r3, [pc, #44]	@ (8101250 <rangeDuty+0x50>)
 8101222:	e00b      	b.n	810123c <rangeDuty+0x3c>
	}
	else if (duty>MAX_DUTY){
 8101224:	edd7 7a01 	vldr	s15, [r7, #4]
 8101228:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 810122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101234:	dd01      	ble.n	810123a <rangeDuty+0x3a>
		return MAX_DUTY;
 8101236:	4b07      	ldr	r3, [pc, #28]	@ (8101254 <rangeDuty+0x54>)
 8101238:	e000      	b.n	810123c <rangeDuty+0x3c>
	}
	return duty;
 810123a:	687b      	ldr	r3, [r7, #4]
}
 810123c:	ee07 3a90 	vmov	s15, r3
 8101240:	eeb0 0a67 	vmov.f32	s0, s15
 8101244:	3708      	adds	r7, #8
 8101246:	46bd      	mov	sp, r7
 8101248:	bd80      	pop	{r7, pc}
 810124a:	bf00      	nop
 810124c:	f3af 8000 	nop.w
 8101250:	40accccd 	.word	0x40accccd
 8101254:	40d00000 	.word	0x40d00000
 8101258:	9999999a 	.word	0x9999999a
 810125c:	40159999 	.word	0x40159999

08101260 <setPWM>:

void setPWM(float pwm1, float pwm2, float pwm3, float pwm4){
 8101260:	b580      	push	{r7, lr}
 8101262:	ed2d 8b02 	vpush	{d8}
 8101266:	b084      	sub	sp, #16
 8101268:	af00      	add	r7, sp, #0
 810126a:	ed87 0a03 	vstr	s0, [r7, #12]
 810126e:	edc7 0a02 	vstr	s1, [r7, #8]
 8101272:	ed87 1a01 	vstr	s2, [r7, #4]
 8101276:	edc7 1a00 	vstr	s3, [r7]
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * rangeDuty(pwm1) / 100);
 810127a:	4b33      	ldr	r3, [pc, #204]	@ (8101348 <setPWM+0xe8>)
 810127c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810127e:	ee07 3a90 	vmov	s15, r3
 8101282:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8101286:	ed97 0a03 	vldr	s0, [r7, #12]
 810128a:	f7ff ffb9 	bl	8101200 <rangeDuty>
 810128e:	eef0 7a40 	vmov.f32	s15, s0
 8101292:	ee28 7a27 	vmul.f32	s14, s16, s15
 8101296:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 810134c <setPWM+0xec>
 810129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810129e:	4b2a      	ldr	r3, [pc, #168]	@ (8101348 <setPWM+0xe8>)
 81012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012a4:	ee17 2a90 	vmov	r2, s15
 81012a8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * rangeDuty(pwm2) / 100);
 81012aa:	4b27      	ldr	r3, [pc, #156]	@ (8101348 <setPWM+0xe8>)
 81012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ae:	ee07 3a90 	vmov	s15, r3
 81012b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 81012b6:	ed97 0a02 	vldr	s0, [r7, #8]
 81012ba:	f7ff ffa1 	bl	8101200 <rangeDuty>
 81012be:	eef0 7a40 	vmov.f32	s15, s0
 81012c2:	ee28 7a27 	vmul.f32	s14, s16, s15
 81012c6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 810134c <setPWM+0xec>
 81012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8101348 <setPWM+0xe8>)
 81012d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012d4:	ee17 2a90 	vmov	r2, s15
 81012d8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * rangeDuty(pwm3) / 100);
 81012da:	4b1b      	ldr	r3, [pc, #108]	@ (8101348 <setPWM+0xe8>)
 81012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012de:	ee07 3a90 	vmov	s15, r3
 81012e2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 81012e6:	ed97 0a01 	vldr	s0, [r7, #4]
 81012ea:	f7ff ff89 	bl	8101200 <rangeDuty>
 81012ee:	eef0 7a40 	vmov.f32	s15, s0
 81012f2:	ee28 7a27 	vmul.f32	s14, s16, s15
 81012f6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 810134c <setPWM+0xec>
 81012fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81012fe:	4b12      	ldr	r3, [pc, #72]	@ (8101348 <setPWM+0xe8>)
 8101300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101304:	ee17 2a90 	vmov	r2, s15
 8101308:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * rangeDuty(pwm4) / 100);
 810130a:	4b0f      	ldr	r3, [pc, #60]	@ (8101348 <setPWM+0xe8>)
 810130c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810130e:	ee07 3a90 	vmov	s15, r3
 8101312:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8101316:	ed97 0a00 	vldr	s0, [r7]
 810131a:	f7ff ff71 	bl	8101200 <rangeDuty>
 810131e:	eef0 7a40 	vmov.f32	s15, s0
 8101322:	ee28 7a27 	vmul.f32	s14, s16, s15
 8101326:	eddf 6a09 	vldr	s13, [pc, #36]	@ 810134c <setPWM+0xec>
 810132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810132e:	4b06      	ldr	r3, [pc, #24]	@ (8101348 <setPWM+0xe8>)
 8101330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101334:	ee17 2a90 	vmov	r2, s15
 8101338:	641a      	str	r2, [r3, #64]	@ 0x40
}
 810133a:	bf00      	nop
 810133c:	3710      	adds	r7, #16
 810133e:	46bd      	mov	sp, r7
 8101340:	ecbd 8b02 	vpop	{d8}
 8101344:	bd80      	pop	{r7, pc}
 8101346:	bf00      	nop
 8101348:	40000400 	.word	0x40000400
 810134c:	42c80000 	.word	0x42c80000

08101350 <SpeedCompute>:

float* SpeedCompute(float virtualInputs[])
{
 8101350:	b5b0      	push	{r4, r5, r7, lr}
 8101352:	b082      	sub	sp, #8
 8101354:	af00      	add	r7, sp, #0
 8101356:	6078      	str	r0, [r7, #4]
    static float Speeds_quad[4];
    static float Speeds[4];

    Speeds_quad[0] = (1/(4*b))*virtualInputs[0] + (1/(2*1*b))*virtualInputs[2] - (1/(4*d))*virtualInputs[3];
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	681b      	ldr	r3, [r3, #0]
 810135c:	4618      	mov	r0, r3
 810135e:	f7ff f97b 	bl	8100658 <__aeabi_f2d>
 8101362:	a3a3      	add	r3, pc, #652	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 8101364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101368:	f7ff f9ce 	bl	8100708 <__aeabi_dmul>
 810136c:	4602      	mov	r2, r0
 810136e:	460b      	mov	r3, r1
 8101370:	4614      	mov	r4, r2
 8101372:	461d      	mov	r5, r3
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	3308      	adds	r3, #8
 8101378:	681b      	ldr	r3, [r3, #0]
 810137a:	4618      	mov	r0, r3
 810137c:	f7ff f96c 	bl	8100658 <__aeabi_f2d>
 8101380:	a39d      	add	r3, pc, #628	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 8101382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101386:	f7ff f9bf 	bl	8100708 <__aeabi_dmul>
 810138a:	4602      	mov	r2, r0
 810138c:	460b      	mov	r3, r1
 810138e:	4620      	mov	r0, r4
 8101390:	4629      	mov	r1, r5
 8101392:	f7ff f803 	bl	810039c <__adddf3>
 8101396:	4602      	mov	r2, r0
 8101398:	460b      	mov	r3, r1
 810139a:	4614      	mov	r4, r2
 810139c:	461d      	mov	r5, r3
 810139e:	687b      	ldr	r3, [r7, #4]
 81013a0:	330c      	adds	r3, #12
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	4618      	mov	r0, r3
 81013a6:	f7ff f957 	bl	8100658 <__aeabi_f2d>
 81013aa:	a395      	add	r3, pc, #596	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 81013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013b0:	f7ff f9aa 	bl	8100708 <__aeabi_dmul>
 81013b4:	4602      	mov	r2, r0
 81013b6:	460b      	mov	r3, r1
 81013b8:	4620      	mov	r0, r4
 81013ba:	4629      	mov	r1, r5
 81013bc:	f7fe ffec 	bl	8100398 <__aeabi_dsub>
 81013c0:	4602      	mov	r2, r0
 81013c2:	460b      	mov	r3, r1
 81013c4:	4610      	mov	r0, r2
 81013c6:	4619      	mov	r1, r3
 81013c8:	f7ff fc96 	bl	8100cf8 <__aeabi_d2f>
 81013cc:	4603      	mov	r3, r0
 81013ce:	4a8e      	ldr	r2, [pc, #568]	@ (8101608 <SpeedCompute+0x2b8>)
 81013d0:	6013      	str	r3, [r2, #0]
    Speeds_quad[1] = (1/(4*b))*virtualInputs[0] - (1/(2*1*b))*virtualInputs[2] - (1/(4*d))*virtualInputs[3];
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	681b      	ldr	r3, [r3, #0]
 81013d6:	4618      	mov	r0, r3
 81013d8:	f7ff f93e 	bl	8100658 <__aeabi_f2d>
 81013dc:	a384      	add	r3, pc, #528	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 81013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013e2:	f7ff f991 	bl	8100708 <__aeabi_dmul>
 81013e6:	4602      	mov	r2, r0
 81013e8:	460b      	mov	r3, r1
 81013ea:	4614      	mov	r4, r2
 81013ec:	461d      	mov	r5, r3
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	3308      	adds	r3, #8
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	4618      	mov	r0, r3
 81013f6:	f7ff f92f 	bl	8100658 <__aeabi_f2d>
 81013fa:	a37f      	add	r3, pc, #508	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 81013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101400:	f7ff f982 	bl	8100708 <__aeabi_dmul>
 8101404:	4602      	mov	r2, r0
 8101406:	460b      	mov	r3, r1
 8101408:	4620      	mov	r0, r4
 810140a:	4629      	mov	r1, r5
 810140c:	f7fe ffc4 	bl	8100398 <__aeabi_dsub>
 8101410:	4602      	mov	r2, r0
 8101412:	460b      	mov	r3, r1
 8101414:	4614      	mov	r4, r2
 8101416:	461d      	mov	r5, r3
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	330c      	adds	r3, #12
 810141c:	681b      	ldr	r3, [r3, #0]
 810141e:	4618      	mov	r0, r3
 8101420:	f7ff f91a 	bl	8100658 <__aeabi_f2d>
 8101424:	a376      	add	r3, pc, #472	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 8101426:	e9d3 2300 	ldrd	r2, r3, [r3]
 810142a:	f7ff f96d 	bl	8100708 <__aeabi_dmul>
 810142e:	4602      	mov	r2, r0
 8101430:	460b      	mov	r3, r1
 8101432:	4620      	mov	r0, r4
 8101434:	4629      	mov	r1, r5
 8101436:	f7fe ffaf 	bl	8100398 <__aeabi_dsub>
 810143a:	4602      	mov	r2, r0
 810143c:	460b      	mov	r3, r1
 810143e:	4610      	mov	r0, r2
 8101440:	4619      	mov	r1, r3
 8101442:	f7ff fc59 	bl	8100cf8 <__aeabi_d2f>
 8101446:	4603      	mov	r3, r0
 8101448:	4a6f      	ldr	r2, [pc, #444]	@ (8101608 <SpeedCompute+0x2b8>)
 810144a:	6053      	str	r3, [r2, #4]
    Speeds_quad[2] = (1/(4*b))*virtualInputs[0] - (1/(2*1*b))*virtualInputs[1] + (1/(4*d))*virtualInputs[3];
 810144c:	687b      	ldr	r3, [r7, #4]
 810144e:	681b      	ldr	r3, [r3, #0]
 8101450:	4618      	mov	r0, r3
 8101452:	f7ff f901 	bl	8100658 <__aeabi_f2d>
 8101456:	a366      	add	r3, pc, #408	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 8101458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810145c:	f7ff f954 	bl	8100708 <__aeabi_dmul>
 8101460:	4602      	mov	r2, r0
 8101462:	460b      	mov	r3, r1
 8101464:	4614      	mov	r4, r2
 8101466:	461d      	mov	r5, r3
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	3304      	adds	r3, #4
 810146c:	681b      	ldr	r3, [r3, #0]
 810146e:	4618      	mov	r0, r3
 8101470:	f7ff f8f2 	bl	8100658 <__aeabi_f2d>
 8101474:	a360      	add	r3, pc, #384	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 8101476:	e9d3 2300 	ldrd	r2, r3, [r3]
 810147a:	f7ff f945 	bl	8100708 <__aeabi_dmul>
 810147e:	4602      	mov	r2, r0
 8101480:	460b      	mov	r3, r1
 8101482:	4620      	mov	r0, r4
 8101484:	4629      	mov	r1, r5
 8101486:	f7fe ff87 	bl	8100398 <__aeabi_dsub>
 810148a:	4602      	mov	r2, r0
 810148c:	460b      	mov	r3, r1
 810148e:	4614      	mov	r4, r2
 8101490:	461d      	mov	r5, r3
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	330c      	adds	r3, #12
 8101496:	681b      	ldr	r3, [r3, #0]
 8101498:	4618      	mov	r0, r3
 810149a:	f7ff f8dd 	bl	8100658 <__aeabi_f2d>
 810149e:	a358      	add	r3, pc, #352	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 81014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014a4:	f7ff f930 	bl	8100708 <__aeabi_dmul>
 81014a8:	4602      	mov	r2, r0
 81014aa:	460b      	mov	r3, r1
 81014ac:	4620      	mov	r0, r4
 81014ae:	4629      	mov	r1, r5
 81014b0:	f7fe ff74 	bl	810039c <__adddf3>
 81014b4:	4602      	mov	r2, r0
 81014b6:	460b      	mov	r3, r1
 81014b8:	4610      	mov	r0, r2
 81014ba:	4619      	mov	r1, r3
 81014bc:	f7ff fc1c 	bl	8100cf8 <__aeabi_d2f>
 81014c0:	4603      	mov	r3, r0
 81014c2:	4a51      	ldr	r2, [pc, #324]	@ (8101608 <SpeedCompute+0x2b8>)
 81014c4:	6093      	str	r3, [r2, #8]
    Speeds_quad[3] = (1/(4*b))*virtualInputs[0] + (1/(2*1*b))*virtualInputs[1] + (1/(4*d))*virtualInputs[3];
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	4618      	mov	r0, r3
 81014cc:	f7ff f8c4 	bl	8100658 <__aeabi_f2d>
 81014d0:	a347      	add	r3, pc, #284	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 81014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014d6:	f7ff f917 	bl	8100708 <__aeabi_dmul>
 81014da:	4602      	mov	r2, r0
 81014dc:	460b      	mov	r3, r1
 81014de:	4614      	mov	r4, r2
 81014e0:	461d      	mov	r5, r3
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	3304      	adds	r3, #4
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	4618      	mov	r0, r3
 81014ea:	f7ff f8b5 	bl	8100658 <__aeabi_f2d>
 81014ee:	a342      	add	r3, pc, #264	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 81014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014f4:	f7ff f908 	bl	8100708 <__aeabi_dmul>
 81014f8:	4602      	mov	r2, r0
 81014fa:	460b      	mov	r3, r1
 81014fc:	4620      	mov	r0, r4
 81014fe:	4629      	mov	r1, r5
 8101500:	f7fe ff4c 	bl	810039c <__adddf3>
 8101504:	4602      	mov	r2, r0
 8101506:	460b      	mov	r3, r1
 8101508:	4614      	mov	r4, r2
 810150a:	461d      	mov	r5, r3
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	330c      	adds	r3, #12
 8101510:	681b      	ldr	r3, [r3, #0]
 8101512:	4618      	mov	r0, r3
 8101514:	f7ff f8a0 	bl	8100658 <__aeabi_f2d>
 8101518:	a339      	add	r3, pc, #228	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 810151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810151e:	f7ff f8f3 	bl	8100708 <__aeabi_dmul>
 8101522:	4602      	mov	r2, r0
 8101524:	460b      	mov	r3, r1
 8101526:	4620      	mov	r0, r4
 8101528:	4629      	mov	r1, r5
 810152a:	f7fe ff37 	bl	810039c <__adddf3>
 810152e:	4602      	mov	r2, r0
 8101530:	460b      	mov	r3, r1
 8101532:	4610      	mov	r0, r2
 8101534:	4619      	mov	r1, r3
 8101536:	f7ff fbdf 	bl	8100cf8 <__aeabi_d2f>
 810153a:	4603      	mov	r3, r0
 810153c:	4a32      	ldr	r2, [pc, #200]	@ (8101608 <SpeedCompute+0x2b8>)
 810153e:	60d3      	str	r3, [r2, #12]
     * Calcoliamo le velocità dei motori al quadrato, poiché non possono essere negative.
     * Partendo dal valore di throttle e seguendo le matrici di controllo dei droni andiamo
     * a sommare e sottrarre le variabili date tramite il PID per il controllo delle velocità.
     */

    Speeds[0] = sqrt(Speeds_quad[0]);
 8101540:	4b31      	ldr	r3, [pc, #196]	@ (8101608 <SpeedCompute+0x2b8>)
 8101542:	681b      	ldr	r3, [r3, #0]
 8101544:	4618      	mov	r0, r3
 8101546:	f7ff f887 	bl	8100658 <__aeabi_f2d>
 810154a:	4602      	mov	r2, r0
 810154c:	460b      	mov	r3, r1
 810154e:	ec43 2b10 	vmov	d0, r2, r3
 8101552:	f00c fd6b 	bl	810e02c <sqrt>
 8101556:	ec53 2b10 	vmov	r2, r3, d0
 810155a:	4610      	mov	r0, r2
 810155c:	4619      	mov	r1, r3
 810155e:	f7ff fbcb 	bl	8100cf8 <__aeabi_d2f>
 8101562:	4603      	mov	r3, r0
 8101564:	4a29      	ldr	r2, [pc, #164]	@ (810160c <SpeedCompute+0x2bc>)
 8101566:	6013      	str	r3, [r2, #0]
    Speeds[1] = sqrt(Speeds_quad[1]);
 8101568:	4b27      	ldr	r3, [pc, #156]	@ (8101608 <SpeedCompute+0x2b8>)
 810156a:	685b      	ldr	r3, [r3, #4]
 810156c:	4618      	mov	r0, r3
 810156e:	f7ff f873 	bl	8100658 <__aeabi_f2d>
 8101572:	4602      	mov	r2, r0
 8101574:	460b      	mov	r3, r1
 8101576:	ec43 2b10 	vmov	d0, r2, r3
 810157a:	f00c fd57 	bl	810e02c <sqrt>
 810157e:	ec53 2b10 	vmov	r2, r3, d0
 8101582:	4610      	mov	r0, r2
 8101584:	4619      	mov	r1, r3
 8101586:	f7ff fbb7 	bl	8100cf8 <__aeabi_d2f>
 810158a:	4603      	mov	r3, r0
 810158c:	4a1f      	ldr	r2, [pc, #124]	@ (810160c <SpeedCompute+0x2bc>)
 810158e:	6053      	str	r3, [r2, #4]
    Speeds[2] = sqrt(Speeds_quad[2]);
 8101590:	4b1d      	ldr	r3, [pc, #116]	@ (8101608 <SpeedCompute+0x2b8>)
 8101592:	689b      	ldr	r3, [r3, #8]
 8101594:	4618      	mov	r0, r3
 8101596:	f7ff f85f 	bl	8100658 <__aeabi_f2d>
 810159a:	4602      	mov	r2, r0
 810159c:	460b      	mov	r3, r1
 810159e:	ec43 2b10 	vmov	d0, r2, r3
 81015a2:	f00c fd43 	bl	810e02c <sqrt>
 81015a6:	ec53 2b10 	vmov	r2, r3, d0
 81015aa:	4610      	mov	r0, r2
 81015ac:	4619      	mov	r1, r3
 81015ae:	f7ff fba3 	bl	8100cf8 <__aeabi_d2f>
 81015b2:	4603      	mov	r3, r0
 81015b4:	4a15      	ldr	r2, [pc, #84]	@ (810160c <SpeedCompute+0x2bc>)
 81015b6:	6093      	str	r3, [r2, #8]
    Speeds[3] = sqrt(Speeds_quad[3]);
 81015b8:	4b13      	ldr	r3, [pc, #76]	@ (8101608 <SpeedCompute+0x2b8>)
 81015ba:	68db      	ldr	r3, [r3, #12]
 81015bc:	4618      	mov	r0, r3
 81015be:	f7ff f84b 	bl	8100658 <__aeabi_f2d>
 81015c2:	4602      	mov	r2, r0
 81015c4:	460b      	mov	r3, r1
 81015c6:	ec43 2b10 	vmov	d0, r2, r3
 81015ca:	f00c fd2f 	bl	810e02c <sqrt>
 81015ce:	ec53 2b10 	vmov	r2, r3, d0
 81015d2:	4610      	mov	r0, r2
 81015d4:	4619      	mov	r1, r3
 81015d6:	f7ff fb8f 	bl	8100cf8 <__aeabi_d2f>
 81015da:	4603      	mov	r3, r0
 81015dc:	4a0b      	ldr	r2, [pc, #44]	@ (810160c <SpeedCompute+0x2bc>)
 81015de:	60d3      	str	r3, [r2, #12]

    // Una volta calcolata la velocità dei motori al quadrato, viene eseguita la radice

    return Speeds;
 81015e0:	4b0a      	ldr	r3, [pc, #40]	@ (810160c <SpeedCompute+0x2bc>)
}
 81015e2:	4618      	mov	r0, r3
 81015e4:	3708      	adds	r7, #8
 81015e6:	46bd      	mov	sp, r7
 81015e8:	bdb0      	pop	{r4, r5, r7, pc}
 81015ea:	bf00      	nop
 81015ec:	f3af 8000 	nop.w
 81015f0:	5d54bf10 	.word	0x5d54bf10
 81015f4:	40d4fe08 	.word	0x40d4fe08
 81015f8:	5d54bf10 	.word	0x5d54bf10
 81015fc:	40e4fe08 	.word	0x40e4fe08
 8101600:	ffffffff 	.word	0xffffffff
 8101604:	40a869ff 	.word	0x40a869ff
 8101608:	10000214 	.word	0x10000214
 810160c:	10000224 	.word	0x10000224

08101610 <map>:


float map(float val){
 8101610:	b580      	push	{r7, lr}
 8101612:	b084      	sub	sp, #16
 8101614:	af00      	add	r7, sp, #0
 8101616:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty = (((MAX_DUTY-MIN_DUTY)*val) + ((MIN_DUTY * MAX_SPEED)-(MAX_DUTY-MIN_SPEED)))/(MAX_SPEED-MIN_SPEED);
 810161a:	6878      	ldr	r0, [r7, #4]
 810161c:	f7ff f81c 	bl	8100658 <__aeabi_f2d>
 8101620:	a321      	add	r3, pc, #132	@ (adr r3, 81016a8 <map+0x98>)
 8101622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101626:	f7ff f86f 	bl	8100708 <__aeabi_dmul>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	4610      	mov	r0, r2
 8101630:	4619      	mov	r1, r3
 8101632:	a31f      	add	r3, pc, #124	@ (adr r3, 81016b0 <map+0xa0>)
 8101634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101638:	f7fe feb0 	bl	810039c <__adddf3>
 810163c:	4602      	mov	r2, r0
 810163e:	460b      	mov	r3, r1
 8101640:	4610      	mov	r0, r2
 8101642:	4619      	mov	r1, r3
 8101644:	a31c      	add	r3, pc, #112	@ (adr r3, 81016b8 <map+0xa8>)
 8101646:	e9d3 2300 	ldrd	r2, r3, [r3]
 810164a:	f7ff f987 	bl	810095c <__aeabi_ddiv>
 810164e:	4602      	mov	r2, r0
 8101650:	460b      	mov	r3, r1
 8101652:	4610      	mov	r0, r2
 8101654:	4619      	mov	r1, r3
 8101656:	f7ff fb4f 	bl	8100cf8 <__aeabi_d2f>
 810165a:	4603      	mov	r3, r0
 810165c:	60fb      	str	r3, [r7, #12]

	if (duty<MIN_DUTY) duty=MIN_DUTY;
 810165e:	68f8      	ldr	r0, [r7, #12]
 8101660:	f7fe fffa 	bl	8100658 <__aeabi_f2d>
 8101664:	a316      	add	r3, pc, #88	@ (adr r3, 81016c0 <map+0xb0>)
 8101666:	e9d3 2300 	ldrd	r2, r3, [r3]
 810166a:	f7ff fabf 	bl	8100bec <__aeabi_dcmplt>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d002      	beq.n	810167a <map+0x6a>
 8101674:	4b0a      	ldr	r3, [pc, #40]	@ (81016a0 <map+0x90>)
 8101676:	60fb      	str	r3, [r7, #12]
 8101678:	e00a      	b.n	8101690 <map+0x80>
	else if (duty>MAX_DUTY) duty = MAX_DUTY;
 810167a:	edd7 7a03 	vldr	s15, [r7, #12]
 810167e:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 8101682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810168a:	dd01      	ble.n	8101690 <map+0x80>
 810168c:	4b05      	ldr	r3, [pc, #20]	@ (81016a4 <map+0x94>)
 810168e:	60fb      	str	r3, [r7, #12]
	return duty;
 8101690:	68fb      	ldr	r3, [r7, #12]
 8101692:	ee07 3a90 	vmov	s15, r3
}
 8101696:	eeb0 0a67 	vmov.f32	s0, s15
 810169a:	3710      	adds	r7, #16
 810169c:	46bd      	mov	sp, r7
 810169e:	bd80      	pop	{r7, pc}
 81016a0:	40accccd 	.word	0x40accccd
 81016a4:	40d00000 	.word	0x40d00000
 81016a8:	99999998 	.word	0x99999998
 81016ac:	3ff19999 	.word	0x3ff19999
 81016b0:	00000000 	.word	0x00000000
 81016b4:	40f01538 	.word	0x40f01538
 81016b8:	00000000 	.word	0x00000000
 81016bc:	40c33300 	.word	0x40c33300
 81016c0:	9999999a 	.word	0x9999999a
 81016c4:	40159999 	.word	0x40159999

081016c8 <init_PID>:
#include <PID.h>

void init_PID(PID* p, float Kp, float Ki, float Kd, float dt, float u_max, float u_min){
 81016c8:	b480      	push	{r7}
 81016ca:	b089      	sub	sp, #36	@ 0x24
 81016cc:	af00      	add	r7, sp, #0
 81016ce:	61f8      	str	r0, [r7, #28]
 81016d0:	ed87 0a06 	vstr	s0, [r7, #24]
 81016d4:	edc7 0a05 	vstr	s1, [r7, #20]
 81016d8:	ed87 1a04 	vstr	s2, [r7, #16]
 81016dc:	edc7 1a03 	vstr	s3, [r7, #12]
 81016e0:	ed87 2a02 	vstr	s4, [r7, #8]
 81016e4:	edc7 2a01 	vstr	s5, [r7, #4]
	p->Kp=Kp;
 81016e8:	69fb      	ldr	r3, [r7, #28]
 81016ea:	69ba      	ldr	r2, [r7, #24]
 81016ec:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81016ee:	69fb      	ldr	r3, [r7, #28]
 81016f0:	697a      	ldr	r2, [r7, #20]
 81016f2:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81016f4:	69fb      	ldr	r3, [r7, #28]
 81016f6:	693a      	ldr	r2, [r7, #16]
 81016f8:	609a      	str	r2, [r3, #8]
	p->dt = dt;
 81016fa:	69fb      	ldr	r3, [r7, #28]
 81016fc:	68fa      	ldr	r2, [r7, #12]
 81016fe:	60da      	str	r2, [r3, #12]
	p->Iterm = 0;
 8101700:	69fb      	ldr	r3, [r7, #28]
 8101702:	f04f 0200 	mov.w	r2, #0
 8101706:	611a      	str	r2, [r3, #16]
	p->lastError = 0;
 8101708:	69fb      	ldr	r3, [r7, #28]
 810170a:	f04f 0200 	mov.w	r2, #0
 810170e:	615a      	str	r2, [r3, #20]
	p->u_max=u_max;
 8101710:	69fb      	ldr	r3, [r7, #28]
 8101712:	68ba      	ldr	r2, [r7, #8]
 8101714:	619a      	str	r2, [r3, #24]
	p->u_min=u_min;
 8101716:	69fb      	ldr	r3, [r7, #28]
 8101718:	687a      	ldr	r2, [r7, #4]
 810171a:	61da      	str	r2, [r3, #28]
}
 810171c:	bf00      	nop
 810171e:	3724      	adds	r7, #36	@ 0x24
 8101720:	46bd      	mov	sp, r7
 8101722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101726:	4770      	bx	lr

08101728 <PID_controller>:

float PID_controller(PID* p, float input, float setPoint){
 8101728:	b480      	push	{r7}
 810172a:	b08b      	sub	sp, #44	@ 0x2c
 810172c:	af00      	add	r7, sp, #0
 810172e:	60f8      	str	r0, [r7, #12]
 8101730:	ed87 0a02 	vstr	s0, [r7, #8]
 8101734:	edc7 0a01 	vstr	s1, [r7, #4]
    float u;
    float newIterm;

    float e = setPoint - input;
 8101738:	ed97 7a01 	vldr	s14, [r7, #4]
 810173c:	edd7 7a02 	vldr	s15, [r7, #8]
 8101740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101744:	edc7 7a08 	vstr	s15, [r7, #32]

    float Pterm = p->Kp * e;
 8101748:	68fb      	ldr	r3, [r7, #12]
 810174a:	edd3 7a00 	vldr	s15, [r3]
 810174e:	ed97 7a08 	vldr	s14, [r7, #32]
 8101752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101756:	edc7 7a07 	vstr	s15, [r7, #28]
    newIterm = p->Iterm + (p->Ki)*p->dt * p->lastError;
 810175a:	68fb      	ldr	r3, [r7, #12]
 810175c:	ed93 7a04 	vldr	s14, [r3, #16]
 8101760:	68fb      	ldr	r3, [r7, #12]
 8101762:	edd3 6a01 	vldr	s13, [r3, #4]
 8101766:	68fb      	ldr	r3, [r7, #12]
 8101768:	edd3 7a03 	vldr	s15, [r3, #12]
 810176c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8101770:	68fb      	ldr	r3, [r7, #12]
 8101772:	edd3 7a05 	vldr	s15, [r3, #20]
 8101776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810177e:	edc7 7a06 	vstr	s15, [r7, #24]
    float Dterm = (p->Kd/p->dt) * (e - p->lastError);
 8101782:	68fb      	ldr	r3, [r7, #12]
 8101784:	edd3 6a02 	vldr	s13, [r3, #8]
 8101788:	68fb      	ldr	r3, [r7, #12]
 810178a:	edd3 7a03 	vldr	s15, [r3, #12]
 810178e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101792:	68fb      	ldr	r3, [r7, #12]
 8101794:	edd3 7a05 	vldr	s15, [r3, #20]
 8101798:	edd7 6a08 	vldr	s13, [r7, #32]
 810179c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81017a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81017a4:	edc7 7a05 	vstr	s15, [r7, #20]

    p->lastError = e;
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	6a3a      	ldr	r2, [r7, #32]
 81017ac:	615a      	str	r2, [r3, #20]

    u = Pterm + newIterm + Dterm;
 81017ae:	ed97 7a07 	vldr	s14, [r7, #28]
 81017b2:	edd7 7a06 	vldr	s15, [r7, #24]
 81017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 81017ba:	ed97 7a05 	vldr	s14, [r7, #20]
 81017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 81017c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(u > p->u_max){
 81017c6:	68fb      	ldr	r3, [r7, #12]
 81017c8:	edd3 7a06 	vldr	s15, [r3, #24]
 81017cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 81017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81017d8:	dd03      	ble.n	81017e2 <PID_controller+0xba>
        u = p->u_max; // upper limit saturation
 81017da:	68fb      	ldr	r3, [r7, #12]
 81017dc:	699b      	ldr	r3, [r3, #24]
 81017de:	627b      	str	r3, [r7, #36]	@ 0x24
 81017e0:	e010      	b.n	8101804 <PID_controller+0xdc>
    } else if (u < p->u_min){
 81017e2:	68fb      	ldr	r3, [r7, #12]
 81017e4:	edd3 7a07 	vldr	s15, [r3, #28]
 81017e8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 81017ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81017f4:	d503      	bpl.n	81017fe <PID_controller+0xd6>
        u = p->u_min; // lower limit saturation
 81017f6:	68fb      	ldr	r3, [r7, #12]
 81017f8:	69db      	ldr	r3, [r3, #28]
 81017fa:	627b      	str	r3, [r7, #36]	@ 0x24
 81017fc:	e002      	b.n	8101804 <PID_controller+0xdc>
    } else {
        p->Iterm= newIterm; // clamping anti-windup
 81017fe:	68fb      	ldr	r3, [r7, #12]
 8101800:	69ba      	ldr	r2, [r7, #24]
 8101802:	611a      	str	r2, [r3, #16]
    }

    return u;
 8101804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101806:	ee07 3a90 	vmov	s15, r3
}
 810180a:	eeb0 0a67 	vmov.f32	s0, s15
 810180e:	372c      	adds	r7, #44	@ 0x2c
 8101810:	46bd      	mov	sp, r7
 8101812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101816:	4770      	bx	lr

08101818 <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101818:	b580      	push	{r7, lr}
 810181a:	b082      	sub	sp, #8
 810181c:	af00      	add	r7, sp, #0
 810181e:	4603      	mov	r3, r0
 8101820:	71fb      	strb	r3, [r7, #7]
 8101822:	79fb      	ldrb	r3, [r7, #7]
 8101824:	4619      	mov	r1, r3
 8101826:	2007      	movs	r0, #7
 8101828:	f000 fa02 	bl	8101c30 <bno055_writeData>
 810182c:	bf00      	nop
 810182e:	3708      	adds	r7, #8
 8101830:	46bd      	mov	sp, r7
 8101832:	bd80      	pop	{r7, pc}

08101834 <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 8101834:	b580      	push	{r7, lr}
 8101836:	b082      	sub	sp, #8
 8101838:	af00      	add	r7, sp, #0
 810183a:	4603      	mov	r3, r0
 810183c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810183e:	79fb      	ldrb	r3, [r7, #7]
 8101840:	4619      	mov	r1, r3
 8101842:	203d      	movs	r0, #61	@ 0x3d
 8101844:	f000 f9f4 	bl	8101c30 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101848:	79fb      	ldrb	r3, [r7, #7]
 810184a:	2b00      	cmp	r3, #0
 810184c:	d103      	bne.n	8101856 <bno055_setOperationMode+0x22>
    bno055_delay(100);
 810184e:	2064      	movs	r0, #100	@ 0x64
 8101850:	f000 f9e2 	bl	8101c18 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 8101854:	e002      	b.n	810185c <bno055_setOperationMode+0x28>
    bno055_delay(80);
 8101856:	2050      	movs	r0, #80	@ 0x50
 8101858:	f000 f9de 	bl	8101c18 <bno055_delay>
}
 810185c:	bf00      	nop
 810185e:	3708      	adds	r7, #8
 8101860:	46bd      	mov	sp, r7
 8101862:	bd80      	pop	{r7, pc}

08101864 <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 8101864:	b580      	push	{r7, lr}
 8101866:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101868:	2000      	movs	r0, #0
 810186a:	f7ff ffe3 	bl	8101834 <bno055_setOperationMode>
}
 810186e:	bf00      	nop
 8101870:	bd80      	pop	{r7, pc}

08101872 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101872:	b580      	push	{r7, lr}
 8101874:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101876:	200c      	movs	r0, #12
 8101878:	f7ff ffdc 	bl	8101834 <bno055_setOperationMode>
}
 810187c:	bf00      	nop
 810187e:	bd80      	pop	{r7, pc}

08101880 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 8101880:	b580      	push	{r7, lr}
 8101882:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101884:	2120      	movs	r1, #32
 8101886:	203f      	movs	r0, #63	@ 0x3f
 8101888:	f000 f9d2 	bl	8101c30 <bno055_writeData>
  bno055_delay(700);
 810188c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8101890:	f000 f9c2 	bl	8101c18 <bno055_delay>
}
 8101894:	bf00      	nop
 8101896:	bd80      	pop	{r7, pc}

08101898 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 8101898:	b580      	push	{r7, lr}
 810189a:	b082      	sub	sp, #8
 810189c:	af00      	add	r7, sp, #0
  bno055_reset();
 810189e:	f7ff ffef 	bl	8101880 <bno055_reset>

  uint8_t id = 0;
 81018a2:	2300      	movs	r3, #0
 81018a4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81018a6:	1dfb      	adds	r3, r7, #7
 81018a8:	2201      	movs	r2, #1
 81018aa:	4619      	mov	r1, r3
 81018ac:	2000      	movs	r0, #0
 81018ae:	f000 fa99 	bl	8101de4 <bno055_readData>
  if (id != BNO055_ID) {
 81018b2:	79fb      	ldrb	r3, [r7, #7]
 81018b4:	2ba0      	cmp	r3, #160	@ 0xa0
 81018b6:	d004      	beq.n	81018c2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81018b8:	79fb      	ldrb	r3, [r7, #7]
 81018ba:	4619      	mov	r1, r3
 81018bc:	4809      	ldr	r0, [pc, #36]	@ (81018e4 <bno055_setup+0x4c>)
 81018be:	f008 ff0b 	bl	810a6d8 <iprintf>
  }
  bno055_setPage(0);
 81018c2:	2000      	movs	r0, #0
 81018c4:	f7ff ffa8 	bl	8101818 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81018c8:	2100      	movs	r1, #0
 81018ca:	203f      	movs	r0, #63	@ 0x3f
 81018cc:	f000 f9b0 	bl	8101c30 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81018d0:	f7ff ffc8 	bl	8101864 <bno055_setOperationModeConfig>
  bno055_delay(10);
 81018d4:	200a      	movs	r0, #10
 81018d6:	f000 f99f 	bl	8101c18 <bno055_delay>
}
 81018da:	bf00      	nop
 81018dc:	3708      	adds	r7, #8
 81018de:	46bd      	mov	sp, r7
 81018e0:	bd80      	pop	{r7, pc}
 81018e2:	bf00      	nop
 81018e4:	0810e250 	.word	0x0810e250

081018e8 <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 81018e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81018ec:	b09e      	sub	sp, #120	@ 0x78
 81018ee:	af00      	add	r7, sp, #0
 81018f0:	4603      	mov	r3, r0
 81018f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 81018f6:	2000      	movs	r0, #0
 81018f8:	f7ff ff8e 	bl	8101818 <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 81018fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101900:	2b20      	cmp	r3, #32
 8101902:	d108      	bne.n	8101916 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101904:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810190c:	2208      	movs	r2, #8
 810190e:	4618      	mov	r0, r3
 8101910:	f000 fa68 	bl	8101de4 <bno055_readData>
 8101914:	e007      	b.n	8101926 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8101916:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810191a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810191e:	2206      	movs	r2, #6
 8101920:	4618      	mov	r0, r3
 8101922:	f000 fa5f 	bl	8101de4 <bno055_readData>

  double scale = 1;
 8101926:	f04f 0200 	mov.w	r2, #0
 810192a:	4b8b      	ldr	r3, [pc, #556]	@ (8101b58 <bno055_getVector+0x270>)
 810192c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101934:	2b0e      	cmp	r3, #14
 8101936:	d109      	bne.n	810194c <bno055_getVector+0x64>
    scale = magScale;
 8101938:	4b88      	ldr	r3, [pc, #544]	@ (8101b5c <bno055_getVector+0x274>)
 810193a:	881b      	ldrh	r3, [r3, #0]
 810193c:	4618      	mov	r0, r3
 810193e:	f7fe fe69 	bl	8100614 <__aeabi_ui2d>
 8101942:	4602      	mov	r2, r0
 8101944:	460b      	mov	r3, r1
 8101946:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810194a:	e03e      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810194c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101950:	2b08      	cmp	r3, #8
 8101952:	d007      	beq.n	8101964 <bno055_getVector+0x7c>
 8101954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101958:	2b28      	cmp	r3, #40	@ 0x28
 810195a:	d003      	beq.n	8101964 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810195c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101960:	2b2e      	cmp	r3, #46	@ 0x2e
 8101962:	d109      	bne.n	8101978 <bno055_getVector+0x90>
    scale = accelScale;
 8101964:	4b7e      	ldr	r3, [pc, #504]	@ (8101b60 <bno055_getVector+0x278>)
 8101966:	881b      	ldrh	r3, [r3, #0]
 8101968:	4618      	mov	r0, r3
 810196a:	f7fe fe53 	bl	8100614 <__aeabi_ui2d>
 810196e:	4602      	mov	r2, r0
 8101970:	460b      	mov	r3, r1
 8101972:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101976:	e028      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810197c:	2b14      	cmp	r3, #20
 810197e:	d109      	bne.n	8101994 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101980:	4b78      	ldr	r3, [pc, #480]	@ (8101b64 <bno055_getVector+0x27c>)
 8101982:	881b      	ldrh	r3, [r3, #0]
 8101984:	4618      	mov	r0, r3
 8101986:	f7fe fe45 	bl	8100614 <__aeabi_ui2d>
 810198a:	4602      	mov	r2, r0
 810198c:	460b      	mov	r3, r1
 810198e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101992:	e01a      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101998:	2b1a      	cmp	r3, #26
 810199a:	d109      	bne.n	81019b0 <bno055_getVector+0xc8>
    scale = eulerScale;
 810199c:	4b72      	ldr	r3, [pc, #456]	@ (8101b68 <bno055_getVector+0x280>)
 810199e:	881b      	ldrh	r3, [r3, #0]
 81019a0:	4618      	mov	r0, r3
 81019a2:	f7fe fe37 	bl	8100614 <__aeabi_ui2d>
 81019a6:	4602      	mov	r2, r0
 81019a8:	460b      	mov	r3, r1
 81019aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81019ae:	e00c      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81019b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81019b4:	2b20      	cmp	r3, #32
 81019b6:	d108      	bne.n	81019ca <bno055_getVector+0xe2>
    scale = quaScale;
 81019b8:	4b6c      	ldr	r3, [pc, #432]	@ (8101b6c <bno055_getVector+0x284>)
 81019ba:	881b      	ldrh	r3, [r3, #0]
 81019bc:	4618      	mov	r0, r3
 81019be:	f7fe fe29 	bl	8100614 <__aeabi_ui2d>
 81019c2:	4602      	mov	r2, r0
 81019c4:	460b      	mov	r3, r1
 81019c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81019ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81019ce:	2220      	movs	r2, #32
 81019d0:	2100      	movs	r1, #0
 81019d2:	4618      	mov	r0, r3
 81019d4:	f008 ffe8 	bl	810a9a8 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 81019d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81019dc:	2b20      	cmp	r3, #32
 81019de:	d150      	bne.n	8101a82 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81019e0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 81019e4:	021b      	lsls	r3, r3, #8
 81019e6:	b21a      	sxth	r2, r3
 81019e8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81019ec:	b21b      	sxth	r3, r3
 81019ee:	4313      	orrs	r3, r2
 81019f0:	b21b      	sxth	r3, r3
 81019f2:	4618      	mov	r0, r3
 81019f4:	f7fe fe1e 	bl	8100634 <__aeabi_i2d>
 81019f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81019fc:	f7fe ffae 	bl	810095c <__aeabi_ddiv>
 8101a00:	4602      	mov	r2, r0
 8101a02:	460b      	mov	r3, r1
 8101a04:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101a08:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101a0c:	021b      	lsls	r3, r3, #8
 8101a0e:	b21a      	sxth	r2, r3
 8101a10:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101a14:	b21b      	sxth	r3, r3
 8101a16:	4313      	orrs	r3, r2
 8101a18:	b21b      	sxth	r3, r3
 8101a1a:	4618      	mov	r0, r3
 8101a1c:	f7fe fe0a 	bl	8100634 <__aeabi_i2d>
 8101a20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a24:	f7fe ff9a 	bl	810095c <__aeabi_ddiv>
 8101a28:	4602      	mov	r2, r0
 8101a2a:	460b      	mov	r3, r1
 8101a2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101a30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101a34:	021b      	lsls	r3, r3, #8
 8101a36:	b21a      	sxth	r2, r3
 8101a38:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101a3c:	b21b      	sxth	r3, r3
 8101a3e:	4313      	orrs	r3, r2
 8101a40:	b21b      	sxth	r3, r3
 8101a42:	4618      	mov	r0, r3
 8101a44:	f7fe fdf6 	bl	8100634 <__aeabi_i2d>
 8101a48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a4c:	f7fe ff86 	bl	810095c <__aeabi_ddiv>
 8101a50:	4602      	mov	r2, r0
 8101a52:	460b      	mov	r3, r1
 8101a54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101a58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8101a5c:	021b      	lsls	r3, r3, #8
 8101a5e:	b21a      	sxth	r2, r3
 8101a60:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8101a64:	b21b      	sxth	r3, r3
 8101a66:	4313      	orrs	r3, r2
 8101a68:	b21b      	sxth	r3, r3
 8101a6a:	4618      	mov	r0, r3
 8101a6c:	f7fe fde2 	bl	8100634 <__aeabi_i2d>
 8101a70:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a74:	f7fe ff72 	bl	810095c <__aeabi_ddiv>
 8101a78:	4602      	mov	r2, r0
 8101a7a:	460b      	mov	r3, r1
 8101a7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101a80:	e03b      	b.n	8101afa <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101a82:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101a86:	021b      	lsls	r3, r3, #8
 8101a88:	b21a      	sxth	r2, r3
 8101a8a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101a8e:	b21b      	sxth	r3, r3
 8101a90:	4313      	orrs	r3, r2
 8101a92:	b21b      	sxth	r3, r3
 8101a94:	4618      	mov	r0, r3
 8101a96:	f7fe fdcd 	bl	8100634 <__aeabi_i2d>
 8101a9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a9e:	f7fe ff5d 	bl	810095c <__aeabi_ddiv>
 8101aa2:	4602      	mov	r2, r0
 8101aa4:	460b      	mov	r3, r1
 8101aa6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101aaa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101aae:	021b      	lsls	r3, r3, #8
 8101ab0:	b21a      	sxth	r2, r3
 8101ab2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101ab6:	b21b      	sxth	r3, r3
 8101ab8:	4313      	orrs	r3, r2
 8101aba:	b21b      	sxth	r3, r3
 8101abc:	4618      	mov	r0, r3
 8101abe:	f7fe fdb9 	bl	8100634 <__aeabi_i2d>
 8101ac2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101ac6:	f7fe ff49 	bl	810095c <__aeabi_ddiv>
 8101aca:	4602      	mov	r2, r0
 8101acc:	460b      	mov	r3, r1
 8101ace:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101ad6:	021b      	lsls	r3, r3, #8
 8101ad8:	b21a      	sxth	r2, r3
 8101ada:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101ade:	b21b      	sxth	r3, r3
 8101ae0:	4313      	orrs	r3, r2
 8101ae2:	b21b      	sxth	r3, r3
 8101ae4:	4618      	mov	r0, r3
 8101ae6:	f7fe fda5 	bl	8100634 <__aeabi_i2d>
 8101aea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101aee:	f7fe ff35 	bl	810095c <__aeabi_ddiv>
 8101af2:	4602      	mov	r2, r0
 8101af4:	460b      	mov	r3, r1
 8101af6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8101afa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101afe:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101b0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101b12:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8101b16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8101b1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8101b1e:	ec49 8b14 	vmov	d4, r8, r9
 8101b22:	ec45 4b15 	vmov	d5, r4, r5
 8101b26:	ec41 0b16 	vmov	d6, r0, r1
 8101b2a:	ec43 2b17 	vmov	d7, r2, r3
}
 8101b2e:	eeb0 0a44 	vmov.f32	s0, s8
 8101b32:	eef0 0a64 	vmov.f32	s1, s9
 8101b36:	eeb0 1a45 	vmov.f32	s2, s10
 8101b3a:	eef0 1a65 	vmov.f32	s3, s11
 8101b3e:	eeb0 2a46 	vmov.f32	s4, s12
 8101b42:	eef0 2a66 	vmov.f32	s5, s13
 8101b46:	eeb0 3a47 	vmov.f32	s6, s14
 8101b4a:	eef0 3a67 	vmov.f32	s7, s15
 8101b4e:	3778      	adds	r7, #120	@ 0x78
 8101b50:	46bd      	mov	sp, r7
 8101b52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101b56:	bf00      	nop
 8101b58:	3ff00000 	.word	0x3ff00000
 8101b5c:	1000000e 	.word	0x1000000e
 8101b60:	10000008 	.word	0x10000008
 8101b64:	1000000a 	.word	0x1000000a
 8101b68:	1000000c 	.word	0x1000000c
 8101b6c:	10000010 	.word	0x10000010

08101b70 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 8101b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101b74:	b090      	sub	sp, #64	@ 0x40
 8101b76:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101b78:	201a      	movs	r0, #26
 8101b7a:	f7ff feb5 	bl	81018e8 <bno055_getVector>
 8101b7e:	eeb0 4a40 	vmov.f32	s8, s0
 8101b82:	eef0 4a60 	vmov.f32	s9, s1
 8101b86:	eeb0 5a41 	vmov.f32	s10, s2
 8101b8a:	eef0 5a61 	vmov.f32	s11, s3
 8101b8e:	eeb0 6a42 	vmov.f32	s12, s4
 8101b92:	eef0 6a62 	vmov.f32	s13, s5
 8101b96:	eeb0 7a43 	vmov.f32	s14, s6
 8101b9a:	eef0 7a63 	vmov.f32	s15, s7
 8101b9e:	ed87 4b08 	vstr	d4, [r7, #32]
 8101ba2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8101ba6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8101baa:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101bae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101bb2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8101bb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101bba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101bbe:	ec49 8b14 	vmov	d4, r8, r9
 8101bc2:	ec45 4b15 	vmov	d5, r4, r5
 8101bc6:	ec41 0b16 	vmov	d6, r0, r1
 8101bca:	ec43 2b17 	vmov	d7, r2, r3
}
 8101bce:	eeb0 0a44 	vmov.f32	s0, s8
 8101bd2:	eef0 0a64 	vmov.f32	s1, s9
 8101bd6:	eeb0 1a45 	vmov.f32	s2, s10
 8101bda:	eef0 1a65 	vmov.f32	s3, s11
 8101bde:	eeb0 2a46 	vmov.f32	s4, s12
 8101be2:	eef0 2a66 	vmov.f32	s5, s13
 8101be6:	eeb0 3a47 	vmov.f32	s6, s14
 8101bea:	eef0 3a67 	vmov.f32	s7, s15
 8101bee:	3740      	adds	r7, #64	@ 0x40
 8101bf0:	46bd      	mov	sp, r7
 8101bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101bf8 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101bf8:	b480      	push	{r7}
 8101bfa:	b083      	sub	sp, #12
 8101bfc:	af00      	add	r7, sp, #0
 8101bfe:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101c00:	4a04      	ldr	r2, [pc, #16]	@ (8101c14 <bno055_assignI2C+0x1c>)
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	6013      	str	r3, [r2, #0]
}
 8101c06:	bf00      	nop
 8101c08:	370c      	adds	r7, #12
 8101c0a:	46bd      	mov	sp, r7
 8101c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c10:	4770      	bx	lr
 8101c12:	bf00      	nop
 8101c14:	10000234 	.word	0x10000234

08101c18 <bno055_delay>:

void bno055_delay(int time) {
 8101c18:	b580      	push	{r7, lr}
 8101c1a:	b082      	sub	sp, #8
 8101c1c:	af00      	add	r7, sp, #0
 8101c1e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	4618      	mov	r0, r3
 8101c24:	f001 fae2 	bl	81031ec <HAL_Delay>
#endif
}
 8101c28:	bf00      	nop
 8101c2a:	3708      	adds	r7, #8
 8101c2c:	46bd      	mov	sp, r7
 8101c2e:	bd80      	pop	{r7, pc}

08101c30 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101c30:	b580      	push	{r7, lr}
 8101c32:	b088      	sub	sp, #32
 8101c34:	af02      	add	r7, sp, #8
 8101c36:	4603      	mov	r3, r0
 8101c38:	460a      	mov	r2, r1
 8101c3a:	71fb      	strb	r3, [r7, #7]
 8101c3c:	4613      	mov	r3, r2
 8101c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101c40:	79fb      	ldrb	r3, [r7, #7]
 8101c42:	733b      	strb	r3, [r7, #12]
 8101c44:	79bb      	ldrb	r3, [r7, #6]
 8101c46:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8101c48:	4b53      	ldr	r3, [pc, #332]	@ (8101d98 <bno055_writeData+0x168>)
 8101c4a:	6818      	ldr	r0, [r3, #0]
 8101c4c:	f107 020c 	add.w	r2, r7, #12
 8101c50:	230a      	movs	r3, #10
 8101c52:	9300      	str	r3, [sp, #0]
 8101c54:	2302      	movs	r3, #2
 8101c56:	2150      	movs	r1, #80	@ 0x50
 8101c58:	f001 fe6e 	bl	8103938 <HAL_I2C_Master_Transmit>
 8101c5c:	4603      	mov	r3, r0
 8101c5e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 8101c60:	7dfb      	ldrb	r3, [r7, #23]
 8101c62:	2b00      	cmp	r3, #0
 8101c64:	f000 8092 	beq.w	8101d8c <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 8101c68:	7dfb      	ldrb	r3, [r7, #23]
 8101c6a:	2b01      	cmp	r3, #1
 8101c6c:	d103      	bne.n	8101c76 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101c6e:	484b      	ldr	r0, [pc, #300]	@ (8101d9c <bno055_writeData+0x16c>)
 8101c70:	f008 fd9a 	bl	810a7a8 <puts>
 8101c74:	e012      	b.n	8101c9c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101c76:	7dfb      	ldrb	r3, [r7, #23]
 8101c78:	2b03      	cmp	r3, #3
 8101c7a:	d103      	bne.n	8101c84 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101c7c:	4848      	ldr	r0, [pc, #288]	@ (8101da0 <bno055_writeData+0x170>)
 8101c7e:	f008 fd93 	bl	810a7a8 <puts>
 8101c82:	e00b      	b.n	8101c9c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101c84:	7dfb      	ldrb	r3, [r7, #23]
 8101c86:	2b02      	cmp	r3, #2
 8101c88:	d103      	bne.n	8101c92 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101c8a:	4846      	ldr	r0, [pc, #280]	@ (8101da4 <bno055_writeData+0x174>)
 8101c8c:	f008 fd8c 	bl	810a7a8 <puts>
 8101c90:	e004      	b.n	8101c9c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101c92:	7dfb      	ldrb	r3, [r7, #23]
 8101c94:	4619      	mov	r1, r3
 8101c96:	4844      	ldr	r0, [pc, #272]	@ (8101da8 <bno055_writeData+0x178>)
 8101c98:	f008 fd1e 	bl	810a6d8 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8101d98 <bno055_writeData+0x168>)
 8101c9e:	681b      	ldr	r3, [r3, #0]
 8101ca0:	4618      	mov	r0, r3
 8101ca2:	f002 f865 	bl	8103d70 <HAL_I2C_GetError>
 8101ca6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101ca8:	693b      	ldr	r3, [r7, #16]
 8101caa:	2b00      	cmp	r3, #0
 8101cac:	d070      	beq.n	8101d90 <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101cae:	693b      	ldr	r3, [r7, #16]
 8101cb0:	2b01      	cmp	r3, #1
 8101cb2:	d103      	bne.n	8101cbc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101cb4:	483d      	ldr	r0, [pc, #244]	@ (8101dac <bno055_writeData+0x17c>)
 8101cb6:	f008 fd77 	bl	810a7a8 <puts>
 8101cba:	e021      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101cbc:	693b      	ldr	r3, [r7, #16]
 8101cbe:	2b02      	cmp	r3, #2
 8101cc0:	d103      	bne.n	8101cca <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101cc2:	483b      	ldr	r0, [pc, #236]	@ (8101db0 <bno055_writeData+0x180>)
 8101cc4:	f008 fd70 	bl	810a7a8 <puts>
 8101cc8:	e01a      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101cca:	693b      	ldr	r3, [r7, #16]
 8101ccc:	2b04      	cmp	r3, #4
 8101cce:	d103      	bne.n	8101cd8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101cd0:	4838      	ldr	r0, [pc, #224]	@ (8101db4 <bno055_writeData+0x184>)
 8101cd2:	f008 fd69 	bl	810a7a8 <puts>
 8101cd6:	e013      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101cd8:	693b      	ldr	r3, [r7, #16]
 8101cda:	2b08      	cmp	r3, #8
 8101cdc:	d103      	bne.n	8101ce6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101cde:	4836      	ldr	r0, [pc, #216]	@ (8101db8 <bno055_writeData+0x188>)
 8101ce0:	f008 fd62 	bl	810a7a8 <puts>
 8101ce4:	e00c      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101ce6:	693b      	ldr	r3, [r7, #16]
 8101ce8:	2b10      	cmp	r3, #16
 8101cea:	d103      	bne.n	8101cf4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101cec:	4833      	ldr	r0, [pc, #204]	@ (8101dbc <bno055_writeData+0x18c>)
 8101cee:	f008 fd5b 	bl	810a7a8 <puts>
 8101cf2:	e005      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101cf4:	693b      	ldr	r3, [r7, #16]
 8101cf6:	2b20      	cmp	r3, #32
 8101cf8:	d102      	bne.n	8101d00 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101cfa:	4831      	ldr	r0, [pc, #196]	@ (8101dc0 <bno055_writeData+0x190>)
 8101cfc:	f008 fd54 	bl	810a7a8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101d00:	4b25      	ldr	r3, [pc, #148]	@ (8101d98 <bno055_writeData+0x168>)
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	4618      	mov	r0, r3
 8101d06:	f002 f825 	bl	8103d54 <HAL_I2C_GetState>
 8101d0a:	4603      	mov	r3, r0
 8101d0c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101d0e:	7bfb      	ldrb	r3, [r7, #15]
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	d103      	bne.n	8101d1c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101d14:	482b      	ldr	r0, [pc, #172]	@ (8101dc4 <bno055_writeData+0x194>)
 8101d16:	f008 fd47 	bl	810a7a8 <puts>
 8101d1a:	e03a      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 8101d1c:	7bfb      	ldrb	r3, [r7, #15]
 8101d1e:	2b20      	cmp	r3, #32
 8101d20:	d103      	bne.n	8101d2a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101d22:	4828      	ldr	r0, [pc, #160]	@ (8101dc4 <bno055_writeData+0x194>)
 8101d24:	f008 fd40 	bl	810a7a8 <puts>
 8101d28:	e033      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101d2a:	7bfb      	ldrb	r3, [r7, #15]
 8101d2c:	2b24      	cmp	r3, #36	@ 0x24
 8101d2e:	d103      	bne.n	8101d38 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101d30:	4825      	ldr	r0, [pc, #148]	@ (8101dc8 <bno055_writeData+0x198>)
 8101d32:	f008 fd39 	bl	810a7a8 <puts>
 8101d36:	e02c      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101d38:	7bfb      	ldrb	r3, [r7, #15]
 8101d3a:	2b21      	cmp	r3, #33	@ 0x21
 8101d3c:	d103      	bne.n	8101d46 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101d3e:	4823      	ldr	r0, [pc, #140]	@ (8101dcc <bno055_writeData+0x19c>)
 8101d40:	f008 fd32 	bl	810a7a8 <puts>
 8101d44:	e025      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101d46:	7bfb      	ldrb	r3, [r7, #15]
 8101d48:	2b22      	cmp	r3, #34	@ 0x22
 8101d4a:	d103      	bne.n	8101d54 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101d4c:	4820      	ldr	r0, [pc, #128]	@ (8101dd0 <bno055_writeData+0x1a0>)
 8101d4e:	f008 fd2b 	bl	810a7a8 <puts>
 8101d52:	e01e      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101d54:	7bfb      	ldrb	r3, [r7, #15]
 8101d56:	2b28      	cmp	r3, #40	@ 0x28
 8101d58:	d103      	bne.n	8101d62 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101d5a:	481e      	ldr	r0, [pc, #120]	@ (8101dd4 <bno055_writeData+0x1a4>)
 8101d5c:	f008 fd24 	bl	810a7a8 <puts>
 8101d60:	e017      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101d62:	7bfb      	ldrb	r3, [r7, #15]
 8101d64:	2b29      	cmp	r3, #41	@ 0x29
 8101d66:	d103      	bne.n	8101d70 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101d68:	481b      	ldr	r0, [pc, #108]	@ (8101dd8 <bno055_writeData+0x1a8>)
 8101d6a:	f008 fd1d 	bl	810a7a8 <puts>
 8101d6e:	e010      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101d70:	7bfb      	ldrb	r3, [r7, #15]
 8101d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8101d74:	d103      	bne.n	8101d7e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101d76:	4819      	ldr	r0, [pc, #100]	@ (8101ddc <bno055_writeData+0x1ac>)
 8101d78:	f008 fd16 	bl	810a7a8 <puts>
 8101d7c:	e009      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101d7e:	7bfb      	ldrb	r3, [r7, #15]
 8101d80:	2b60      	cmp	r3, #96	@ 0x60
 8101d82:	d106      	bne.n	8101d92 <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101d84:	4816      	ldr	r0, [pc, #88]	@ (8101de0 <bno055_writeData+0x1b0>)
 8101d86:	f008 fd0f 	bl	810a7a8 <puts>
 8101d8a:	e002      	b.n	8101d92 <bno055_writeData+0x162>
    return;
 8101d8c:	bf00      	nop
 8101d8e:	e000      	b.n	8101d92 <bno055_writeData+0x162>
    return;
 8101d90:	bf00      	nop
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
}
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101d92:	3718      	adds	r7, #24
 8101d94:	46bd      	mov	sp, r7
 8101d96:	bd80      	pop	{r7, pc}
 8101d98:	10000234 	.word	0x10000234
 8101d9c:	0810e2f0 	.word	0x0810e2f0
 8101da0:	0810e314 	.word	0x0810e314
 8101da4:	0810e33c 	.word	0x0810e33c
 8101da8:	0810e360 	.word	0x0810e360
 8101dac:	0810e378 	.word	0x0810e378
 8101db0:	0810e38c 	.word	0x0810e38c
 8101db4:	0810e3a0 	.word	0x0810e3a0
 8101db8:	0810e3b4 	.word	0x0810e3b4
 8101dbc:	0810e3c8 	.word	0x0810e3c8
 8101dc0:	0810e3dc 	.word	0x0810e3dc
 8101dc4:	0810e3f4 	.word	0x0810e3f4
 8101dc8:	0810e40c 	.word	0x0810e40c
 8101dcc:	0810e420 	.word	0x0810e420
 8101dd0:	0810e438 	.word	0x0810e438
 8101dd4:	0810e450 	.word	0x0810e450
 8101dd8:	0810e468 	.word	0x0810e468
 8101ddc:	0810e488 	.word	0x0810e488
 8101de0:	0810e4a8 	.word	0x0810e4a8

08101de4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101de4:	b580      	push	{r7, lr}
 8101de6:	b086      	sub	sp, #24
 8101de8:	af02      	add	r7, sp, #8
 8101dea:	4603      	mov	r3, r0
 8101dec:	6039      	str	r1, [r7, #0]
 8101dee:	71fb      	strb	r3, [r7, #7]
 8101df0:	4613      	mov	r3, r2
 8101df2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101df4:	4b1c      	ldr	r3, [pc, #112]	@ (8101e68 <bno055_readData+0x84>)
 8101df6:	6818      	ldr	r0, [r3, #0]
 8101df8:	1dfa      	adds	r2, r7, #7
 8101dfa:	2364      	movs	r3, #100	@ 0x64
 8101dfc:	9300      	str	r3, [sp, #0]
 8101dfe:	2301      	movs	r3, #1
 8101e00:	2150      	movs	r1, #80	@ 0x50
 8101e02:	f001 fd99 	bl	8103938 <HAL_I2C_Master_Transmit>
 8101e06:	4603      	mov	r3, r0
 8101e08:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101e0a:	4b17      	ldr	r3, [pc, #92]	@ (8101e68 <bno055_readData+0x84>)
 8101e0c:	6818      	ldr	r0, [r3, #0]
 8101e0e:	79bb      	ldrb	r3, [r7, #6]
 8101e10:	b29b      	uxth	r3, r3
 8101e12:	2264      	movs	r2, #100	@ 0x64
 8101e14:	9200      	str	r2, [sp, #0]
 8101e16:	683a      	ldr	r2, [r7, #0]
 8101e18:	2150      	movs	r1, #80	@ 0x50
 8101e1a:	f001 fea5 	bl	8103b68 <HAL_I2C_Master_Receive>
 8101e1e:	4603      	mov	r3, r0
 8101e20:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 8101e22:	7bfb      	ldrb	r3, [r7, #15]
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	d01a      	beq.n	8101e5e <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 8101e28:	7bfb      	ldrb	r3, [r7, #15]
 8101e2a:	2b01      	cmp	r3, #1
 8101e2c:	d103      	bne.n	8101e36 <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101e2e:	480f      	ldr	r0, [pc, #60]	@ (8101e6c <bno055_readData+0x88>)
 8101e30:	f008 fcba 	bl	810a7a8 <puts>
 8101e34:	e014      	b.n	8101e60 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 8101e36:	7bfb      	ldrb	r3, [r7, #15]
 8101e38:	2b03      	cmp	r3, #3
 8101e3a:	d103      	bne.n	8101e44 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101e3c:	480c      	ldr	r0, [pc, #48]	@ (8101e70 <bno055_readData+0x8c>)
 8101e3e:	f008 fcb3 	bl	810a7a8 <puts>
 8101e42:	e00d      	b.n	8101e60 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 8101e44:	7bfb      	ldrb	r3, [r7, #15]
 8101e46:	2b02      	cmp	r3, #2
 8101e48:	d103      	bne.n	8101e52 <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101e4a:	480a      	ldr	r0, [pc, #40]	@ (8101e74 <bno055_readData+0x90>)
 8101e4c:	f008 fcac 	bl	810a7a8 <puts>
 8101e50:	e006      	b.n	8101e60 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 8101e52:	7bfb      	ldrb	r3, [r7, #15]
 8101e54:	4619      	mov	r1, r3
 8101e56:	4808      	ldr	r0, [pc, #32]	@ (8101e78 <bno055_readData+0x94>)
 8101e58:	f008 fc3e 	bl	810a6d8 <iprintf>
 8101e5c:	e000      	b.n	8101e60 <bno055_readData+0x7c>
	    return;
 8101e5e:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101e60:	3710      	adds	r7, #16
 8101e62:	46bd      	mov	sp, r7
 8101e64:	bd80      	pop	{r7, pc}
 8101e66:	bf00      	nop
 8101e68:	10000234 	.word	0x10000234
 8101e6c:	0810e2f0 	.word	0x0810e2f0
 8101e70:	0810e314 	.word	0x0810e314
 8101e74:	0810e33c 	.word	0x0810e33c
 8101e78:	0810e360 	.word	0x0810e360

08101e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e7c:	b580      	push	{r7, lr}
 8101e7e:	b082      	sub	sp, #8
 8101e80:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e82:	4b4e      	ldr	r3, [pc, #312]	@ (8101fbc <main+0x140>)
 8101e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e88:	4a4c      	ldr	r2, [pc, #304]	@ (8101fbc <main+0x140>)
 8101e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e92:	4b4a      	ldr	r3, [pc, #296]	@ (8101fbc <main+0x140>)
 8101e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101e9c:	607b      	str	r3, [r7, #4]
 8101e9e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101ea0:	2001      	movs	r0, #1
 8101ea2:	f001 fc9b 	bl	81037dc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101ea6:	f002 fb27 	bl	81044f8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101eaa:	2201      	movs	r2, #1
 8101eac:	2102      	movs	r1, #2
 8101eae:	2000      	movs	r0, #0
 8101eb0:	f002 faa8 	bl	8104404 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101eb4:	4b42      	ldr	r3, [pc, #264]	@ (8101fc0 <main+0x144>)
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	091b      	lsrs	r3, r3, #4
 8101eba:	f003 030f 	and.w	r3, r3, #15
 8101ebe:	2b07      	cmp	r3, #7
 8101ec0:	d108      	bne.n	8101ed4 <main+0x58>
 8101ec2:	4b40      	ldr	r3, [pc, #256]	@ (8101fc4 <main+0x148>)
 8101ec4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8101fc4 <main+0x148>)
 8101eca:	f043 0301 	orr.w	r3, r3, #1
 8101ece:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101ed2:	e007      	b.n	8101ee4 <main+0x68>
 8101ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8101fc4 <main+0x148>)
 8101ed6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101eda:	4a3a      	ldr	r2, [pc, #232]	@ (8101fc4 <main+0x148>)
 8101edc:	f043 0301 	orr.w	r3, r3, #1
 8101ee0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101ee4:	f001 f8ce 	bl	8103084 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101ee8:	f000 faa0 	bl	810242c <MX_GPIO_Init>
  MX_TIM1_Init();
 8101eec:	f000 f8c8 	bl	8102080 <MX_TIM1_Init>
  MX_I2C1_Init();
 8101ef0:	f000 f886 	bl	8102000 <MX_I2C1_Init>
  MX_TIM3_Init();
 8101ef4:	f000 f918 	bl	8102128 <MX_TIM3_Init>
  MX_TIM5_Init();
 8101ef8:	f000 f9ae 	bl	8102258 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 8101efc:	f000 fa4a 	bl	8102394 <MX_USART3_UART_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8101f00:	4831      	ldr	r0, [pc, #196]	@ (8101fc8 <main+0x14c>)
 8101f02:	f004 fb63 	bl	81065cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8101f06:	2100      	movs	r1, #0
 8101f08:	4830      	ldr	r0, [pc, #192]	@ (8101fcc <main+0x150>)
 8101f0a:	f004 fc39 	bl	8106780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8101f0e:	2104      	movs	r1, #4
 8101f10:	482e      	ldr	r0, [pc, #184]	@ (8101fcc <main+0x150>)
 8101f12:	f004 fc35 	bl	8106780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8101f16:	2108      	movs	r1, #8
 8101f18:	482c      	ldr	r0, [pc, #176]	@ (8101fcc <main+0x150>)
 8101f1a:	f004 fc31 	bl	8106780 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8101f1e:	210c      	movs	r1, #12
 8101f20:	482a      	ldr	r0, [pc, #168]	@ (8101fcc <main+0x150>)
 8101f22:	f004 fc2d 	bl	8106780 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);   // main channel
 8101f26:	2100      	movs	r1, #0
 8101f28:	4829      	ldr	r0, [pc, #164]	@ (8101fd0 <main+0x154>)
 8101f2a:	f004 fe9d 	bl	8106c68 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);   // indirect channel
 8101f2e:	2104      	movs	r1, #4
 8101f30:	4827      	ldr	r0, [pc, #156]	@ (8101fd0 <main+0x154>)
 8101f32:	f004 fd95 	bl	8106a60 <HAL_TIM_IC_Start>

#ifdef CALIBRATE
  ESC_Calibrate();
 8101f36:	f7ff f8f5 	bl	8101124 <ESC_Calibrate>
#endif
#ifdef DEFAULT
  bno055_assignI2C(&hi2c1);
 8101f3a:	4826      	ldr	r0, [pc, #152]	@ (8101fd4 <main+0x158>)
 8101f3c:	f7ff fe5c 	bl	8101bf8 <bno055_assignI2C>
  bno055_setup();
 8101f40:	f7ff fcaa 	bl	8101898 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101f44:	f7ff fc95 	bl	8101872 <bno055_setOperationModeNDOF>
  init_PID(&PitchPID, KPP, KIP, KDP, 0.01, 1.3, -1.3);
 8101f48:	eddf 2a23 	vldr	s5, [pc, #140]	@ 8101fd8 <main+0x15c>
 8101f4c:	ed9f 2a23 	vldr	s4, [pc, #140]	@ 8101fdc <main+0x160>
 8101f50:	eddf 1a23 	vldr	s3, [pc, #140]	@ 8101fe0 <main+0x164>
 8101f54:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8101fe4 <main+0x168>
 8101f58:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8101fe8 <main+0x16c>
 8101f5c:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8101fec <main+0x170>
 8101f60:	4823      	ldr	r0, [pc, #140]	@ (8101ff0 <main+0x174>)
 8101f62:	f7ff fbb1 	bl	81016c8 <init_PID>
  init_PID(&RollPID, KPR, KIR, KDR, 0.01, 1.3, -1.3);
 8101f66:	eddf 2a1c 	vldr	s5, [pc, #112]	@ 8101fd8 <main+0x15c>
 8101f6a:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8101fdc <main+0x160>
 8101f6e:	eddf 1a1c 	vldr	s3, [pc, #112]	@ 8101fe0 <main+0x164>
 8101f72:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 8101fe4 <main+0x168>
 8101f76:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8101fe8 <main+0x16c>
 8101f7a:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8101fe4 <main+0x168>
 8101f7e:	481d      	ldr	r0, [pc, #116]	@ (8101ff4 <main+0x178>)
 8101f80:	f7ff fba2 	bl	81016c8 <init_PID>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_Tc){
 8101f84:	4b1c      	ldr	r3, [pc, #112]	@ (8101ff8 <main+0x17c>)
 8101f86:	681b      	ldr	r3, [r3, #0]
 8101f88:	2b00      	cmp	r3, #0
 8101f8a:	d0fb      	beq.n	8101f84 <main+0x108>
		  switch(mode){
 8101f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8101ffc <main+0x180>)
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	2b02      	cmp	r3, #2
 8101f92:	d00c      	beq.n	8101fae <main+0x132>
 8101f94:	2b02      	cmp	r3, #2
 8101f96:	dc0d      	bgt.n	8101fb4 <main+0x138>
 8101f98:	2b00      	cmp	r3, #0
 8101f9a:	d002      	beq.n	8101fa2 <main+0x126>
 8101f9c:	2b01      	cmp	r3, #1
 8101f9e:	d003      	beq.n	8101fa8 <main+0x12c>
 8101fa0:	e008      	b.n	8101fb4 <main+0x138>
		  case 0:
			   stopMotors(); break;
 8101fa2:	f000 fa8b 	bl	81024bc <stopMotors>
 8101fa6:	e008      	b.n	8101fba <main+0x13e>
		  case 1:
			  armingMotors(); break;
 8101fa8:	f000 fb02 	bl	81025b0 <armingMotors>
 8101fac:	e005      	b.n	8101fba <main+0x13e>
		  case 2:
			  stabilize(); break;
 8101fae:	f000 fbb3 	bl	8102718 <stabilize>
 8101fb2:	e002      	b.n	8101fba <main+0x13e>
		  default:
			  stopMotors(); break;
 8101fb4:	f000 fa82 	bl	81024bc <stopMotors>
 8101fb8:	bf00      	nop
	  if(flag_Tc){
 8101fba:	e7e3      	b.n	8101f84 <main+0x108>
 8101fbc:	58024400 	.word	0x58024400
 8101fc0:	e000ed00 	.word	0xe000ed00
 8101fc4:	58026400 	.word	0x58026400
 8101fc8:	1000028c 	.word	0x1000028c
 8101fcc:	100002d8 	.word	0x100002d8
 8101fd0:	10000324 	.word	0x10000324
 8101fd4:	10000238 	.word	0x10000238
 8101fd8:	bfa66666 	.word	0xbfa66666
 8101fdc:	3fa66666 	.word	0x3fa66666
 8101fe0:	3c23d70a 	.word	0x3c23d70a
 8101fe4:	3d23d70a 	.word	0x3d23d70a
 8101fe8:	00000000 	.word	0x00000000
 8101fec:	3d4ccccd 	.word	0x3d4ccccd
 8101ff0:	1000040c 	.word	0x1000040c
 8101ff4:	1000042c 	.word	0x1000042c
 8101ff8:	10000404 	.word	0x10000404
 8101ffc:	10000408 	.word	0x10000408

08102000 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102000:	b580      	push	{r7, lr}
 8102002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102004:	4b1b      	ldr	r3, [pc, #108]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102006:	4a1c      	ldr	r2, [pc, #112]	@ (8102078 <MX_I2C1_Init+0x78>)
 8102008:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 810200a:	4b1a      	ldr	r3, [pc, #104]	@ (8102074 <MX_I2C1_Init+0x74>)
 810200c:	4a1b      	ldr	r2, [pc, #108]	@ (810207c <MX_I2C1_Init+0x7c>)
 810200e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102010:	4b18      	ldr	r3, [pc, #96]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102012:	2200      	movs	r2, #0
 8102014:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102016:	4b17      	ldr	r3, [pc, #92]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102018:	2201      	movs	r2, #1
 810201a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810201c:	4b15      	ldr	r3, [pc, #84]	@ (8102074 <MX_I2C1_Init+0x74>)
 810201e:	2200      	movs	r2, #0
 8102020:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102022:	4b14      	ldr	r3, [pc, #80]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102024:	2200      	movs	r2, #0
 8102026:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102028:	4b12      	ldr	r3, [pc, #72]	@ (8102074 <MX_I2C1_Init+0x74>)
 810202a:	2200      	movs	r2, #0
 810202c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810202e:	4b11      	ldr	r3, [pc, #68]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102030:	2200      	movs	r2, #0
 8102032:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102034:	4b0f      	ldr	r3, [pc, #60]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102036:	2200      	movs	r2, #0
 8102038:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810203a:	480e      	ldr	r0, [pc, #56]	@ (8102074 <MX_I2C1_Init+0x74>)
 810203c:	f001 fbe0 	bl	8103800 <HAL_I2C_Init>
 8102040:	4603      	mov	r3, r0
 8102042:	2b00      	cmp	r3, #0
 8102044:	d001      	beq.n	810204a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102046:	f000 fcf1 	bl	8102a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810204a:	2100      	movs	r1, #0
 810204c:	4809      	ldr	r0, [pc, #36]	@ (8102074 <MX_I2C1_Init+0x74>)
 810204e:	f002 f941 	bl	81042d4 <HAL_I2CEx_ConfigAnalogFilter>
 8102052:	4603      	mov	r3, r0
 8102054:	2b00      	cmp	r3, #0
 8102056:	d001      	beq.n	810205c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102058:	f000 fce8 	bl	8102a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810205c:	2100      	movs	r1, #0
 810205e:	4805      	ldr	r0, [pc, #20]	@ (8102074 <MX_I2C1_Init+0x74>)
 8102060:	f002 f983 	bl	810436a <HAL_I2CEx_ConfigDigitalFilter>
 8102064:	4603      	mov	r3, r0
 8102066:	2b00      	cmp	r3, #0
 8102068:	d001      	beq.n	810206e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810206a:	f000 fcdf 	bl	8102a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 810206e:	bf00      	nop
 8102070:	bd80      	pop	{r7, pc}
 8102072:	bf00      	nop
 8102074:	10000238 	.word	0x10000238
 8102078:	40005400 	.word	0x40005400
 810207c:	00301242 	.word	0x00301242

08102080 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8102080:	b580      	push	{r7, lr}
 8102082:	b088      	sub	sp, #32
 8102084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102086:	f107 0310 	add.w	r3, r7, #16
 810208a:	2200      	movs	r2, #0
 810208c:	601a      	str	r2, [r3, #0]
 810208e:	605a      	str	r2, [r3, #4]
 8102090:	609a      	str	r2, [r3, #8]
 8102092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102094:	1d3b      	adds	r3, r7, #4
 8102096:	2200      	movs	r2, #0
 8102098:	601a      	str	r2, [r3, #0]
 810209a:	605a      	str	r2, [r3, #4]
 810209c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 810209e:	4b20      	ldr	r3, [pc, #128]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020a0:	4a20      	ldr	r2, [pc, #128]	@ (8102124 <MX_TIM1_Init+0xa4>)
 81020a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 81020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020a6:	224a      	movs	r2, #74	@ 0x4a
 81020a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020ac:	2200      	movs	r2, #0
 81020ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 81020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 81020b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81020b8:	4b19      	ldr	r3, [pc, #100]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020ba:	2200      	movs	r2, #0
 81020bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81020be:	4b18      	ldr	r3, [pc, #96]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020c0:	2200      	movs	r2, #0
 81020c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81020c4:	4b16      	ldr	r3, [pc, #88]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020c6:	2200      	movs	r2, #0
 81020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81020ca:	4815      	ldr	r0, [pc, #84]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020cc:	f004 fa26 	bl	810651c <HAL_TIM_Base_Init>
 81020d0:	4603      	mov	r3, r0
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	d001      	beq.n	81020da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 81020d6:	f000 fca9 	bl	8102a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81020da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81020de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 81020e0:	f107 0310 	add.w	r3, r7, #16
 81020e4:	4619      	mov	r1, r3
 81020e6:	480e      	ldr	r0, [pc, #56]	@ (8102120 <MX_TIM1_Init+0xa0>)
 81020e8:	f005 f9c6 	bl	8107478 <HAL_TIM_ConfigClockSource>
 81020ec:	4603      	mov	r3, r0
 81020ee:	2b00      	cmp	r3, #0
 81020f0:	d001      	beq.n	81020f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 81020f2:	f000 fc9b 	bl	8102a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81020f6:	2300      	movs	r3, #0
 81020f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81020fa:	2300      	movs	r3, #0
 81020fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81020fe:	2300      	movs	r3, #0
 8102100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102102:	1d3b      	adds	r3, r7, #4
 8102104:	4619      	mov	r1, r3
 8102106:	4806      	ldr	r0, [pc, #24]	@ (8102120 <MX_TIM1_Init+0xa0>)
 8102108:	f006 f9a4 	bl	8108454 <HAL_TIMEx_MasterConfigSynchronization>
 810210c:	4603      	mov	r3, r0
 810210e:	2b00      	cmp	r3, #0
 8102110:	d001      	beq.n	8102116 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8102112:	f000 fc8b 	bl	8102a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8102116:	bf00      	nop
 8102118:	3720      	adds	r7, #32
 810211a:	46bd      	mov	sp, r7
 810211c:	bd80      	pop	{r7, pc}
 810211e:	bf00      	nop
 8102120:	1000028c 	.word	0x1000028c
 8102124:	40010000 	.word	0x40010000

08102128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8102128:	b580      	push	{r7, lr}
 810212a:	b08e      	sub	sp, #56	@ 0x38
 810212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810212e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102132:	2200      	movs	r2, #0
 8102134:	601a      	str	r2, [r3, #0]
 8102136:	605a      	str	r2, [r3, #4]
 8102138:	609a      	str	r2, [r3, #8]
 810213a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810213c:	f107 031c 	add.w	r3, r7, #28
 8102140:	2200      	movs	r2, #0
 8102142:	601a      	str	r2, [r3, #0]
 8102144:	605a      	str	r2, [r3, #4]
 8102146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8102148:	463b      	mov	r3, r7
 810214a:	2200      	movs	r2, #0
 810214c:	601a      	str	r2, [r3, #0]
 810214e:	605a      	str	r2, [r3, #4]
 8102150:	609a      	str	r2, [r3, #8]
 8102152:	60da      	str	r2, [r3, #12]
 8102154:	611a      	str	r2, [r3, #16]
 8102156:	615a      	str	r2, [r3, #20]
 8102158:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810215a:	4b3d      	ldr	r3, [pc, #244]	@ (8102250 <MX_TIM3_Init+0x128>)
 810215c:	4a3d      	ldr	r2, [pc, #244]	@ (8102254 <MX_TIM3_Init+0x12c>)
 810215e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75-1;
 8102160:	4b3b      	ldr	r3, [pc, #236]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102162:	224a      	movs	r2, #74	@ 0x4a
 8102164:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102166:	4b3a      	ldr	r3, [pc, #232]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102168:	2200      	movs	r2, #0
 810216a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 810216c:	4b38      	ldr	r3, [pc, #224]	@ (8102250 <MX_TIM3_Init+0x128>)
 810216e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8102172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102174:	4b36      	ldr	r3, [pc, #216]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102176:	2200      	movs	r2, #0
 8102178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810217a:	4b35      	ldr	r3, [pc, #212]	@ (8102250 <MX_TIM3_Init+0x128>)
 810217c:	2200      	movs	r2, #0
 810217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102180:	4833      	ldr	r0, [pc, #204]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102182:	f004 f9cb 	bl	810651c <HAL_TIM_Base_Init>
 8102186:	4603      	mov	r3, r0
 8102188:	2b00      	cmp	r3, #0
 810218a:	d001      	beq.n	8102190 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 810218c:	f000 fc4e 	bl	8102a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102194:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810219a:	4619      	mov	r1, r3
 810219c:	482c      	ldr	r0, [pc, #176]	@ (8102250 <MX_TIM3_Init+0x128>)
 810219e:	f005 f96b 	bl	8107478 <HAL_TIM_ConfigClockSource>
 81021a2:	4603      	mov	r3, r0
 81021a4:	2b00      	cmp	r3, #0
 81021a6:	d001      	beq.n	81021ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 81021a8:	f000 fc40 	bl	8102a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 81021ac:	4828      	ldr	r0, [pc, #160]	@ (8102250 <MX_TIM3_Init+0x128>)
 81021ae:	f004 fa85 	bl	81066bc <HAL_TIM_PWM_Init>
 81021b2:	4603      	mov	r3, r0
 81021b4:	2b00      	cmp	r3, #0
 81021b6:	d001      	beq.n	81021bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 81021b8:	f000 fc38 	bl	8102a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81021bc:	2300      	movs	r3, #0
 81021be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81021c0:	2300      	movs	r3, #0
 81021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81021c4:	f107 031c 	add.w	r3, r7, #28
 81021c8:	4619      	mov	r1, r3
 81021ca:	4821      	ldr	r0, [pc, #132]	@ (8102250 <MX_TIM3_Init+0x128>)
 81021cc:	f006 f942 	bl	8108454 <HAL_TIMEx_MasterConfigSynchronization>
 81021d0:	4603      	mov	r3, r0
 81021d2:	2b00      	cmp	r3, #0
 81021d4:	d001      	beq.n	81021da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 81021d6:	f000 fc29 	bl	8102a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81021da:	2360      	movs	r3, #96	@ 0x60
 81021dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81021de:	2300      	movs	r3, #0
 81021e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81021e2:	2300      	movs	r3, #0
 81021e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81021e6:	2300      	movs	r3, #0
 81021e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81021ea:	463b      	mov	r3, r7
 81021ec:	2200      	movs	r2, #0
 81021ee:	4619      	mov	r1, r3
 81021f0:	4817      	ldr	r0, [pc, #92]	@ (8102250 <MX_TIM3_Init+0x128>)
 81021f2:	f005 f82d 	bl	8107250 <HAL_TIM_PWM_ConfigChannel>
 81021f6:	4603      	mov	r3, r0
 81021f8:	2b00      	cmp	r3, #0
 81021fa:	d001      	beq.n	8102200 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 81021fc:	f000 fc16 	bl	8102a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102200:	463b      	mov	r3, r7
 8102202:	2204      	movs	r2, #4
 8102204:	4619      	mov	r1, r3
 8102206:	4812      	ldr	r0, [pc, #72]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102208:	f005 f822 	bl	8107250 <HAL_TIM_PWM_ConfigChannel>
 810220c:	4603      	mov	r3, r0
 810220e:	2b00      	cmp	r3, #0
 8102210:	d001      	beq.n	8102216 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8102212:	f000 fc0b 	bl	8102a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8102216:	463b      	mov	r3, r7
 8102218:	2208      	movs	r2, #8
 810221a:	4619      	mov	r1, r3
 810221c:	480c      	ldr	r0, [pc, #48]	@ (8102250 <MX_TIM3_Init+0x128>)
 810221e:	f005 f817 	bl	8107250 <HAL_TIM_PWM_ConfigChannel>
 8102222:	4603      	mov	r3, r0
 8102224:	2b00      	cmp	r3, #0
 8102226:	d001      	beq.n	810222c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8102228:	f000 fc00 	bl	8102a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 810222c:	463b      	mov	r3, r7
 810222e:	220c      	movs	r2, #12
 8102230:	4619      	mov	r1, r3
 8102232:	4807      	ldr	r0, [pc, #28]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102234:	f005 f80c 	bl	8107250 <HAL_TIM_PWM_ConfigChannel>
 8102238:	4603      	mov	r3, r0
 810223a:	2b00      	cmp	r3, #0
 810223c:	d001      	beq.n	8102242 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 810223e:	f000 fbf5 	bl	8102a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8102242:	4803      	ldr	r0, [pc, #12]	@ (8102250 <MX_TIM3_Init+0x128>)
 8102244:	f000 fd02 	bl	8102c4c <HAL_TIM_MspPostInit>

}
 8102248:	bf00      	nop
 810224a:	3738      	adds	r7, #56	@ 0x38
 810224c:	46bd      	mov	sp, r7
 810224e:	bd80      	pop	{r7, pc}
 8102250:	100002d8 	.word	0x100002d8
 8102254:	40000400 	.word	0x40000400

08102258 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8102258:	b580      	push	{r7, lr}
 810225a:	b090      	sub	sp, #64	@ 0x40
 810225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810225e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102262:	2200      	movs	r2, #0
 8102264:	601a      	str	r2, [r3, #0]
 8102266:	605a      	str	r2, [r3, #4]
 8102268:	609a      	str	r2, [r3, #8]
 810226a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 810226c:	f107 031c 	add.w	r3, r7, #28
 8102270:	2200      	movs	r2, #0
 8102272:	601a      	str	r2, [r3, #0]
 8102274:	605a      	str	r2, [r3, #4]
 8102276:	609a      	str	r2, [r3, #8]
 8102278:	60da      	str	r2, [r3, #12]
 810227a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 810227c:	f107 030c 	add.w	r3, r7, #12
 8102280:	2200      	movs	r2, #0
 8102282:	601a      	str	r2, [r3, #0]
 8102284:	605a      	str	r2, [r3, #4]
 8102286:	609a      	str	r2, [r3, #8]
 8102288:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810228a:	463b      	mov	r3, r7
 810228c:	2200      	movs	r2, #0
 810228e:	601a      	str	r2, [r3, #0]
 8102290:	605a      	str	r2, [r3, #4]
 8102292:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8102294:	4b3d      	ldr	r3, [pc, #244]	@ (810238c <MX_TIM5_Init+0x134>)
 8102296:	4a3e      	ldr	r2, [pc, #248]	@ (8102390 <MX_TIM5_Init+0x138>)
 8102298:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 75-1;
 810229a:	4b3c      	ldr	r3, [pc, #240]	@ (810238c <MX_TIM5_Init+0x134>)
 810229c:	224a      	movs	r2, #74	@ 0x4a
 810229e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022a0:	4b3a      	ldr	r3, [pc, #232]	@ (810238c <MX_TIM5_Init+0x134>)
 81022a2:	2200      	movs	r2, #0
 81022a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 81022a6:	4b39      	ldr	r3, [pc, #228]	@ (810238c <MX_TIM5_Init+0x134>)
 81022a8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 81022ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022ae:	4b37      	ldr	r3, [pc, #220]	@ (810238c <MX_TIM5_Init+0x134>)
 81022b0:	2200      	movs	r2, #0
 81022b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81022b4:	4b35      	ldr	r3, [pc, #212]	@ (810238c <MX_TIM5_Init+0x134>)
 81022b6:	2200      	movs	r2, #0
 81022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 81022ba:	4834      	ldr	r0, [pc, #208]	@ (810238c <MX_TIM5_Init+0x134>)
 81022bc:	f004 f92e 	bl	810651c <HAL_TIM_Base_Init>
 81022c0:	4603      	mov	r3, r0
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	d001      	beq.n	81022ca <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 81022c6:	f000 fbb1 	bl	8102a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81022ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81022ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 81022d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81022d4:	4619      	mov	r1, r3
 81022d6:	482d      	ldr	r0, [pc, #180]	@ (810238c <MX_TIM5_Init+0x134>)
 81022d8:	f005 f8ce 	bl	8107478 <HAL_TIM_ConfigClockSource>
 81022dc:	4603      	mov	r3, r0
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d001      	beq.n	81022e6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 81022e2:	f000 fba3 	bl	8102a2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 81022e6:	4829      	ldr	r0, [pc, #164]	@ (810238c <MX_TIM5_Init+0x134>)
 81022e8:	f004 fb58 	bl	810699c <HAL_TIM_IC_Init>
 81022ec:	4603      	mov	r3, r0
 81022ee:	2b00      	cmp	r3, #0
 81022f0:	d001      	beq.n	81022f6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 81022f2:	f000 fb9b 	bl	8102a2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 81022f6:	2304      	movs	r3, #4
 81022f8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 81022fa:	2350      	movs	r3, #80	@ 0x50
 81022fc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 81022fe:	2300      	movs	r3, #0
 8102300:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8102302:	2300      	movs	r3, #0
 8102304:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8102306:	2300      	movs	r3, #0
 8102308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 810230a:	f107 031c 	add.w	r3, r7, #28
 810230e:	4619      	mov	r1, r3
 8102310:	481e      	ldr	r0, [pc, #120]	@ (810238c <MX_TIM5_Init+0x134>)
 8102312:	f005 f9a9 	bl	8107668 <HAL_TIM_SlaveConfigSynchro>
 8102316:	4603      	mov	r3, r0
 8102318:	2b00      	cmp	r3, #0
 810231a:	d001      	beq.n	8102320 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 810231c:	f000 fb86 	bl	8102a2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102320:	2300      	movs	r3, #0
 8102322:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8102324:	2301      	movs	r3, #1
 8102326:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8102328:	2300      	movs	r3, #0
 810232a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 810232c:	2300      	movs	r3, #0
 810232e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8102330:	f107 030c 	add.w	r3, r7, #12
 8102334:	2200      	movs	r2, #0
 8102336:	4619      	mov	r1, r3
 8102338:	4814      	ldr	r0, [pc, #80]	@ (810238c <MX_TIM5_Init+0x134>)
 810233a:	f004 feec 	bl	8107116 <HAL_TIM_IC_ConfigChannel>
 810233e:	4603      	mov	r3, r0
 8102340:	2b00      	cmp	r3, #0
 8102342:	d001      	beq.n	8102348 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8102344:	f000 fb72 	bl	8102a2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8102348:	2302      	movs	r3, #2
 810234a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 810234c:	2302      	movs	r3, #2
 810234e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8102350:	f107 030c 	add.w	r3, r7, #12
 8102354:	2204      	movs	r2, #4
 8102356:	4619      	mov	r1, r3
 8102358:	480c      	ldr	r0, [pc, #48]	@ (810238c <MX_TIM5_Init+0x134>)
 810235a:	f004 fedc 	bl	8107116 <HAL_TIM_IC_ConfigChannel>
 810235e:	4603      	mov	r3, r0
 8102360:	2b00      	cmp	r3, #0
 8102362:	d001      	beq.n	8102368 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8102364:	f000 fb62 	bl	8102a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102368:	2300      	movs	r3, #0
 810236a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810236c:	2300      	movs	r3, #0
 810236e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8102370:	463b      	mov	r3, r7
 8102372:	4619      	mov	r1, r3
 8102374:	4805      	ldr	r0, [pc, #20]	@ (810238c <MX_TIM5_Init+0x134>)
 8102376:	f006 f86d 	bl	8108454 <HAL_TIMEx_MasterConfigSynchronization>
 810237a:	4603      	mov	r3, r0
 810237c:	2b00      	cmp	r3, #0
 810237e:	d001      	beq.n	8102384 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8102380:	f000 fb54 	bl	8102a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8102384:	bf00      	nop
 8102386:	3740      	adds	r7, #64	@ 0x40
 8102388:	46bd      	mov	sp, r7
 810238a:	bd80      	pop	{r7, pc}
 810238c:	10000324 	.word	0x10000324
 8102390:	40000c00 	.word	0x40000c00

08102394 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8102394:	b580      	push	{r7, lr}
 8102396:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102398:	4b22      	ldr	r3, [pc, #136]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 810239a:	4a23      	ldr	r2, [pc, #140]	@ (8102428 <MX_USART3_UART_Init+0x94>)
 810239c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810239e:	4b21      	ldr	r3, [pc, #132]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81023a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81023a6:	4b1f      	ldr	r3, [pc, #124]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023a8:	2200      	movs	r2, #0
 81023aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81023ac:	4b1d      	ldr	r3, [pc, #116]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023ae:	2200      	movs	r2, #0
 81023b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81023b2:	4b1c      	ldr	r3, [pc, #112]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023b4:	2200      	movs	r2, #0
 81023b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81023b8:	4b1a      	ldr	r3, [pc, #104]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023ba:	220c      	movs	r2, #12
 81023bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81023be:	4b19      	ldr	r3, [pc, #100]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023c0:	2200      	movs	r2, #0
 81023c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81023c4:	4b17      	ldr	r3, [pc, #92]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023c6:	2200      	movs	r2, #0
 81023c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81023ca:	4b16      	ldr	r3, [pc, #88]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023cc:	2200      	movs	r2, #0
 81023ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81023d0:	4b14      	ldr	r3, [pc, #80]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023d2:	2200      	movs	r2, #0
 81023d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81023d6:	4b13      	ldr	r3, [pc, #76]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023d8:	2200      	movs	r2, #0
 81023da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81023dc:	4811      	ldr	r0, [pc, #68]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023de:	f006 f8e5 	bl	81085ac <HAL_UART_Init>
 81023e2:	4603      	mov	r3, r0
 81023e4:	2b00      	cmp	r3, #0
 81023e6:	d001      	beq.n	81023ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81023e8:	f000 fb20 	bl	8102a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81023ec:	2100      	movs	r1, #0
 81023ee:	480d      	ldr	r0, [pc, #52]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 81023f0:	f007 f97a 	bl	81096e8 <HAL_UARTEx_SetTxFifoThreshold>
 81023f4:	4603      	mov	r3, r0
 81023f6:	2b00      	cmp	r3, #0
 81023f8:	d001      	beq.n	81023fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81023fa:	f000 fb17 	bl	8102a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81023fe:	2100      	movs	r1, #0
 8102400:	4808      	ldr	r0, [pc, #32]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 8102402:	f007 f9af 	bl	8109764 <HAL_UARTEx_SetRxFifoThreshold>
 8102406:	4603      	mov	r3, r0
 8102408:	2b00      	cmp	r3, #0
 810240a:	d001      	beq.n	8102410 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810240c:	f000 fb0e 	bl	8102a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102410:	4804      	ldr	r0, [pc, #16]	@ (8102424 <MX_USART3_UART_Init+0x90>)
 8102412:	f007 f930 	bl	8109676 <HAL_UARTEx_DisableFifoMode>
 8102416:	4603      	mov	r3, r0
 8102418:	2b00      	cmp	r3, #0
 810241a:	d001      	beq.n	8102420 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810241c:	f000 fb06 	bl	8102a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102420:	bf00      	nop
 8102422:	bd80      	pop	{r7, pc}
 8102424:	10000370 	.word	0x10000370
 8102428:	40004800 	.word	0x40004800

0810242c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810242c:	b480      	push	{r7}
 810242e:	b085      	sub	sp, #20
 8102430:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102432:	4b21      	ldr	r3, [pc, #132]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102438:	4a1f      	ldr	r2, [pc, #124]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 810243a:	f043 0301 	orr.w	r3, r3, #1
 810243e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102442:	4b1d      	ldr	r3, [pc, #116]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102448:	f003 0301 	and.w	r3, r3, #1
 810244c:	60fb      	str	r3, [r7, #12]
 810244e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102450:	4b19      	ldr	r3, [pc, #100]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102456:	4a18      	ldr	r2, [pc, #96]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102458:	f043 0302 	orr.w	r3, r3, #2
 810245c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102460:	4b15      	ldr	r3, [pc, #84]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102466:	f003 0302 	and.w	r3, r3, #2
 810246a:	60bb      	str	r3, [r7, #8]
 810246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810246e:	4b12      	ldr	r3, [pc, #72]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102474:	4a10      	ldr	r2, [pc, #64]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102476:	f043 0308 	orr.w	r3, r3, #8
 810247a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810247e:	4b0e      	ldr	r3, [pc, #56]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102484:	f003 0308 	and.w	r3, r3, #8
 8102488:	607b      	str	r3, [r7, #4]
 810248a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810248c:	4b0a      	ldr	r3, [pc, #40]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 810248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102492:	4a09      	ldr	r2, [pc, #36]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 8102494:	f043 0304 	orr.w	r3, r3, #4
 8102498:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810249c:	4b06      	ldr	r3, [pc, #24]	@ (81024b8 <MX_GPIO_Init+0x8c>)
 810249e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81024a2:	f003 0304 	and.w	r3, r3, #4
 81024a6:	603b      	str	r3, [r7, #0]
 81024a8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81024aa:	bf00      	nop
 81024ac:	3714      	adds	r7, #20
 81024ae:	46bd      	mov	sp, r7
 81024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024b4:	4770      	bx	lr
 81024b6:	bf00      	nop
 81024b8:	58024400 	.word	0x58024400

081024bc <stopMotors>:

/* USER CODE BEGIN 4 */
void stopMotors(){
 81024bc:	b5b0      	push	{r4, r5, r7, lr}
 81024be:	b092      	sub	sp, #72	@ 0x48
 81024c0:	af12      	add	r7, sp, #72	@ 0x48
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81024c2:	4b34      	ldr	r3, [pc, #208]	@ (8102594 <stopMotors+0xd8>)
 81024c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024c6:	4613      	mov	r3, r2
 81024c8:	009b      	lsls	r3, r3, #2
 81024ca:	4413      	add	r3, r2
 81024cc:	4a31      	ldr	r2, [pc, #196]	@ (8102594 <stopMotors+0xd8>)
 81024ce:	4932      	ldr	r1, [pc, #200]	@ (8102598 <stopMotors+0xdc>)
 81024d0:	fba1 1303 	umull	r1, r3, r1, r3
 81024d4:	095b      	lsrs	r3, r3, #5
 81024d6:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8102594 <stopMotors+0xd8>)
 81024da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024dc:	4613      	mov	r3, r2
 81024de:	009b      	lsls	r3, r3, #2
 81024e0:	4413      	add	r3, r2
 81024e2:	4a2c      	ldr	r2, [pc, #176]	@ (8102594 <stopMotors+0xd8>)
 81024e4:	492c      	ldr	r1, [pc, #176]	@ (8102598 <stopMotors+0xdc>)
 81024e6:	fba1 1303 	umull	r1, r3, r1, r3
 81024ea:	095b      	lsrs	r3, r3, #5
 81024ec:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81024ee:	4b29      	ldr	r3, [pc, #164]	@ (8102594 <stopMotors+0xd8>)
 81024f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81024f2:	4613      	mov	r3, r2
 81024f4:	009b      	lsls	r3, r3, #2
 81024f6:	4413      	add	r3, r2
 81024f8:	4a26      	ldr	r2, [pc, #152]	@ (8102594 <stopMotors+0xd8>)
 81024fa:	4927      	ldr	r1, [pc, #156]	@ (8102598 <stopMotors+0xdc>)
 81024fc:	fba1 1303 	umull	r1, r3, r1, r3
 8102500:	095b      	lsrs	r3, r3, #5
 8102502:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8102504:	4b23      	ldr	r3, [pc, #140]	@ (8102594 <stopMotors+0xd8>)
 8102506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102508:	4613      	mov	r3, r2
 810250a:	009b      	lsls	r3, r3, #2
 810250c:	4413      	add	r3, r2
 810250e:	4a21      	ldr	r2, [pc, #132]	@ (8102594 <stopMotors+0xd8>)
 8102510:	4921      	ldr	r1, [pc, #132]	@ (8102598 <stopMotors+0xdc>)
 8102512:	fba1 1303 	umull	r1, r3, r1, r3
 8102516:	095b      	lsrs	r3, r3, #5
 8102518:	6413      	str	r3, [r2, #64]	@ 0x40
	readImu();
 810251a:	f000 f8a1 	bl	8102660 <readImu>
	printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f \r\n", (double) OFF_DUTY, (double) OFF_DUTY,(double) OFF_DUTY, (double) OFF_DUTY, (double) roll, (double) pitch, 0.0, 0.0, 0.0, 0.0);
 810251e:	4b1f      	ldr	r3, [pc, #124]	@ (810259c <stopMotors+0xe0>)
 8102520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102524:	491e      	ldr	r1, [pc, #120]	@ (81025a0 <stopMotors+0xe4>)
 8102526:	e9d1 0100 	ldrd	r0, r1, [r1]
 810252a:	f04f 0400 	mov.w	r4, #0
 810252e:	f04f 0500 	mov.w	r5, #0
 8102532:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8102536:	f04f 0400 	mov.w	r4, #0
 810253a:	f04f 0500 	mov.w	r5, #0
 810253e:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 8102542:	f04f 0400 	mov.w	r4, #0
 8102546:	f04f 0500 	mov.w	r5, #0
 810254a:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 810254e:	f04f 0400 	mov.w	r4, #0
 8102552:	f04f 0500 	mov.w	r5, #0
 8102556:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 810255a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810255e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8102562:	f04f 0200 	mov.w	r2, #0
 8102566:	4b0f      	ldr	r3, [pc, #60]	@ (81025a4 <stopMotors+0xe8>)
 8102568:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810256c:	f04f 0200 	mov.w	r2, #0
 8102570:	4b0c      	ldr	r3, [pc, #48]	@ (81025a4 <stopMotors+0xe8>)
 8102572:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102576:	f04f 0200 	mov.w	r2, #0
 810257a:	4b0a      	ldr	r3, [pc, #40]	@ (81025a4 <stopMotors+0xe8>)
 810257c:	e9cd 2300 	strd	r2, r3, [sp]
 8102580:	f04f 0200 	mov.w	r2, #0
 8102584:	4b07      	ldr	r3, [pc, #28]	@ (81025a4 <stopMotors+0xe8>)
 8102586:	4808      	ldr	r0, [pc, #32]	@ (81025a8 <stopMotors+0xec>)
 8102588:	f008 f8a6 	bl	810a6d8 <iprintf>

}
 810258c:	bf00      	nop
 810258e:	46bd      	mov	sp, r7
 8102590:	bdb0      	pop	{r4, r5, r7, pc}
 8102592:	bf00      	nop
 8102594:	40000400 	.word	0x40000400
 8102598:	51eb851f 	.word	0x51eb851f
 810259c:	10000458 	.word	0x10000458
 81025a0:	10000450 	.word	0x10000450
 81025a4:	40140000 	.word	0x40140000
 81025a8:	0810e7a4 	.word	0x0810e7a4
 81025ac:	00000000 	.word	0x00000000

081025b0 <armingMotors>:

void armingMotors(){
 81025b0:	b5b0      	push	{r4, r5, r7, lr}
 81025b2:	b092      	sub	sp, #72	@ 0x48
 81025b4:	af12      	add	r7, sp, #72	@ 0x48
	setPWM(MIN_DUTY, MIN_DUTY, MIN_DUTY, MIN_DUTY);
 81025b6:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8102650 <armingMotors+0xa0>
 81025ba:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 8102650 <armingMotors+0xa0>
 81025be:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8102650 <armingMotors+0xa0>
 81025c2:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8102650 <armingMotors+0xa0>
 81025c6:	f7fe fe4b 	bl	8101260 <setPWM>
	readImu();
 81025ca:	f000 f849 	bl	8102660 <readImu>
	printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f\r\n", (double) MIN_DUTY, (double) MIN_DUTY, (double) MIN_DUTY, (double) MIN_DUTY, (double) roll, (double) pitch, 0.0, 0.0, 0.0, 0.0);
 81025ce:	4b21      	ldr	r3, [pc, #132]	@ (8102654 <armingMotors+0xa4>)
 81025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025d4:	4920      	ldr	r1, [pc, #128]	@ (8102658 <armingMotors+0xa8>)
 81025d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81025da:	f04f 0400 	mov.w	r4, #0
 81025de:	f04f 0500 	mov.w	r5, #0
 81025e2:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 81025e6:	f04f 0400 	mov.w	r4, #0
 81025ea:	f04f 0500 	mov.w	r5, #0
 81025ee:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 81025f2:	f04f 0400 	mov.w	r4, #0
 81025f6:	f04f 0500 	mov.w	r5, #0
 81025fa:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 81025fe:	f04f 0400 	mov.w	r4, #0
 8102602:	f04f 0500 	mov.w	r5, #0
 8102606:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 810260a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810260e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8102612:	a30d      	add	r3, pc, #52	@ (adr r3, 8102648 <armingMotors+0x98>)
 8102614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102618:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810261c:	a30a      	add	r3, pc, #40	@ (adr r3, 8102648 <armingMotors+0x98>)
 810261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102622:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8102626:	a308      	add	r3, pc, #32	@ (adr r3, 8102648 <armingMotors+0x98>)
 8102628:	e9d3 2300 	ldrd	r2, r3, [r3]
 810262c:	e9cd 2300 	strd	r2, r3, [sp]
 8102630:	a305      	add	r3, pc, #20	@ (adr r3, 8102648 <armingMotors+0x98>)
 8102632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102636:	4809      	ldr	r0, [pc, #36]	@ (810265c <armingMotors+0xac>)
 8102638:	f008 f84e 	bl	810a6d8 <iprintf>

}
 810263c:	bf00      	nop
 810263e:	46bd      	mov	sp, r7
 8102640:	bdb0      	pop	{r4, r5, r7, pc}
 8102642:	bf00      	nop
 8102644:	f3af 8000 	nop.w
 8102648:	9999999a 	.word	0x9999999a
 810264c:	40159999 	.word	0x40159999
 8102650:	40accccd 	.word	0x40accccd
 8102654:	10000458 	.word	0x10000458
 8102658:	10000450 	.word	0x10000450
 810265c:	0810e7d8 	.word	0x0810e7d8

08102660 <readImu>:


void readImu(){
 8102660:	b5b0      	push	{r4, r5, r7, lr}
 8102662:	b088      	sub	sp, #32
 8102664:	af00      	add	r7, sp, #0
	bno055_vector_t v = bno055_getVectorEuler();
 8102666:	f7ff fa83 	bl	8101b70 <bno055_getVectorEuler>
 810266a:	eeb0 4a40 	vmov.f32	s8, s0
 810266e:	eef0 4a60 	vmov.f32	s9, s1
 8102672:	eeb0 5a41 	vmov.f32	s10, s2
 8102676:	eef0 5a61 	vmov.f32	s11, s3
 810267a:	eeb0 6a42 	vmov.f32	s12, s4
 810267e:	eef0 6a62 	vmov.f32	s13, s5
 8102682:	eeb0 7a43 	vmov.f32	s14, s6
 8102686:	eef0 7a63 	vmov.f32	s15, s7
 810268a:	ed87 4b00 	vstr	d4, [r7]
 810268e:	ed87 5b02 	vstr	d5, [r7, #8]
 8102692:	ed87 6b04 	vstr	d6, [r7, #16]
 8102696:	ed87 7b06 	vstr	d7, [r7, #24]
		  pitch = v.y;
 810269a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 810269e:	491a      	ldr	r1, [pc, #104]	@ (8102708 <readImu+0xa8>)
 81026a0:	e9c1 2300 	strd	r2, r3, [r1]
		  if (v.z < 0){
 81026a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 81026a8:	f04f 0200 	mov.w	r2, #0
 81026ac:	f04f 0300 	mov.w	r3, #0
 81026b0:	f7fe fa9c 	bl	8100bec <__aeabi_dcmplt>
 81026b4:	4603      	mov	r3, r0
 81026b6:	2b00      	cmp	r3, #0
 81026b8:	d011      	beq.n	81026de <readImu+0x7e>
			  roll = -v.z - 180;
 81026ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81026be:	4614      	mov	r4, r2
 81026c0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 81026c4:	f04f 0200 	mov.w	r2, #0
 81026c8:	4b10      	ldr	r3, [pc, #64]	@ (810270c <readImu+0xac>)
 81026ca:	4620      	mov	r0, r4
 81026cc:	4629      	mov	r1, r5
 81026ce:	f7fd fe63 	bl	8100398 <__aeabi_dsub>
 81026d2:	4602      	mov	r2, r0
 81026d4:	460b      	mov	r3, r1
 81026d6:	490e      	ldr	r1, [pc, #56]	@ (8102710 <readImu+0xb0>)
 81026d8:	e9c1 2300 	strd	r2, r3, [r1]
 81026dc:	e00b      	b.n	81026f6 <readImu+0x96>
		  }
		  else{
			  roll = -v.z + 180;
 81026de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81026e2:	f04f 0000 	mov.w	r0, #0
 81026e6:	4909      	ldr	r1, [pc, #36]	@ (810270c <readImu+0xac>)
 81026e8:	f7fd fe56 	bl	8100398 <__aeabi_dsub>
 81026ec:	4602      	mov	r2, r0
 81026ee:	460b      	mov	r3, r1
 81026f0:	4907      	ldr	r1, [pc, #28]	@ (8102710 <readImu+0xb0>)
 81026f2:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  yaw=v.x;
 81026f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 81026fa:	4906      	ldr	r1, [pc, #24]	@ (8102714 <readImu+0xb4>)
 81026fc:	e9c1 2300 	strd	r2, r3, [r1]

}
 8102700:	bf00      	nop
 8102702:	3720      	adds	r7, #32
 8102704:	46bd      	mov	sp, r7
 8102706:	bdb0      	pop	{r4, r5, r7, pc}
 8102708:	10000450 	.word	0x10000450
 810270c:	40668000 	.word	0x40668000
 8102710:	10000458 	.word	0x10000458
 8102714:	10000460 	.word	0x10000460

08102718 <stabilize>:

void stabilize(){
 8102718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810271c:	ed2d 8b02 	vpush	{d8}
 8102720:	b0a6      	sub	sp, #152	@ 0x98
 8102722:	af12      	add	r7, sp, #72	@ 0x48
	float virtualInputs[4];
	readImu();
 8102724:	f7ff ff9c 	bl	8102660 <readImu>
	  virtualInputs[0] = 15.6;
 8102728:	4b81      	ldr	r3, [pc, #516]	@ (8102930 <stabilize+0x218>)
 810272a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  virtualInputs[1] = PID_controller(&RollPID, roll, 0);
 810272c:	4b81      	ldr	r3, [pc, #516]	@ (8102934 <stabilize+0x21c>)
 810272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102732:	4610      	mov	r0, r2
 8102734:	4619      	mov	r1, r3
 8102736:	f7fe fadf 	bl	8100cf8 <__aeabi_d2f>
 810273a:	4603      	mov	r3, r0
 810273c:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8102938 <stabilize+0x220>
 8102740:	ee00 3a10 	vmov	s0, r3
 8102744:	487d      	ldr	r0, [pc, #500]	@ (810293c <stabilize+0x224>)
 8102746:	f7fe ffef 	bl	8101728 <PID_controller>
 810274a:	eef0 7a40 	vmov.f32	s15, s0
 810274e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  virtualInputs[2] = PID_controller(&PitchPID, pitch, 0);
 8102752:	4b7b      	ldr	r3, [pc, #492]	@ (8102940 <stabilize+0x228>)
 8102754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102758:	4610      	mov	r0, r2
 810275a:	4619      	mov	r1, r3
 810275c:	f7fe facc 	bl	8100cf8 <__aeabi_d2f>
 8102760:	4603      	mov	r3, r0
 8102762:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8102938 <stabilize+0x220>
 8102766:	ee00 3a10 	vmov	s0, r3
 810276a:	4876      	ldr	r0, [pc, #472]	@ (8102944 <stabilize+0x22c>)
 810276c:	f7fe ffdc 	bl	8101728 <PID_controller>
 8102770:	eef0 7a40 	vmov.f32	s15, s0
 8102774:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	  virtualInputs[3] = 0;
 8102778:	f04f 0300 	mov.w	r3, #0
 810277c:	63bb      	str	r3, [r7, #56]	@ 0x38

	  float* Speeds;
	  Speeds = SpeedCompute(virtualInputs);
 810277e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8102782:	4618      	mov	r0, r3
 8102784:	f7fe fde4 	bl	8101350 <SpeedCompute>
 8102788:	64f8      	str	r0, [r7, #76]	@ 0x4c

	  float avgMotor1 = map(*(Speeds+0)) + 0.019;
 810278a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810278c:	edd3 7a00 	vldr	s15, [r3]
 8102790:	eeb0 0a67 	vmov.f32	s0, s15
 8102794:	f7fe ff3c 	bl	8101610 <map>
 8102798:	ee10 3a10 	vmov	r3, s0
 810279c:	4618      	mov	r0, r3
 810279e:	f7fd ff5b 	bl	8100658 <__aeabi_f2d>
 81027a2:	a35f      	add	r3, pc, #380	@ (adr r3, 8102920 <stabilize+0x208>)
 81027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a8:	f7fd fdf8 	bl	810039c <__adddf3>
 81027ac:	4602      	mov	r2, r0
 81027ae:	460b      	mov	r3, r1
 81027b0:	4610      	mov	r0, r2
 81027b2:	4619      	mov	r1, r3
 81027b4:	f7fe faa0 	bl	8100cf8 <__aeabi_d2f>
 81027b8:	4603      	mov	r3, r0
 81027ba:	64bb      	str	r3, [r7, #72]	@ 0x48
	  float avgMotor2 = map(*(Speeds+1)) + 0.0295;
 81027bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81027be:	3304      	adds	r3, #4
 81027c0:	edd3 7a00 	vldr	s15, [r3]
 81027c4:	eeb0 0a67 	vmov.f32	s0, s15
 81027c8:	f7fe ff22 	bl	8101610 <map>
 81027cc:	ee10 3a10 	vmov	r3, s0
 81027d0:	4618      	mov	r0, r3
 81027d2:	f7fd ff41 	bl	8100658 <__aeabi_f2d>
 81027d6:	a354      	add	r3, pc, #336	@ (adr r3, 8102928 <stabilize+0x210>)
 81027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027dc:	f7fd fdde 	bl	810039c <__adddf3>
 81027e0:	4602      	mov	r2, r0
 81027e2:	460b      	mov	r3, r1
 81027e4:	4610      	mov	r0, r2
 81027e6:	4619      	mov	r1, r3
 81027e8:	f7fe fa86 	bl	8100cf8 <__aeabi_d2f>
 81027ec:	4603      	mov	r3, r0
 81027ee:	647b      	str	r3, [r7, #68]	@ 0x44
	  float avgMotor3 = map(*(Speeds+2)) - 0.019;
 81027f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81027f2:	3308      	adds	r3, #8
 81027f4:	edd3 7a00 	vldr	s15, [r3]
 81027f8:	eeb0 0a67 	vmov.f32	s0, s15
 81027fc:	f7fe ff08 	bl	8101610 <map>
 8102800:	ee10 3a10 	vmov	r3, s0
 8102804:	4618      	mov	r0, r3
 8102806:	f7fd ff27 	bl	8100658 <__aeabi_f2d>
 810280a:	a345      	add	r3, pc, #276	@ (adr r3, 8102920 <stabilize+0x208>)
 810280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102810:	f7fd fdc2 	bl	8100398 <__aeabi_dsub>
 8102814:	4602      	mov	r2, r0
 8102816:	460b      	mov	r3, r1
 8102818:	4610      	mov	r0, r2
 810281a:	4619      	mov	r1, r3
 810281c:	f7fe fa6c 	bl	8100cf8 <__aeabi_d2f>
 8102820:	4603      	mov	r3, r0
 8102822:	643b      	str	r3, [r7, #64]	@ 0x40
	  float avgMotor4 = map(*(Speeds+3)) - 0.0295;
 8102824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8102826:	330c      	adds	r3, #12
 8102828:	edd3 7a00 	vldr	s15, [r3]
 810282c:	eeb0 0a67 	vmov.f32	s0, s15
 8102830:	f7fe feee 	bl	8101610 <map>
 8102834:	ee10 3a10 	vmov	r3, s0
 8102838:	4618      	mov	r0, r3
 810283a:	f7fd ff0d 	bl	8100658 <__aeabi_f2d>
 810283e:	a33a      	add	r3, pc, #232	@ (adr r3, 8102928 <stabilize+0x210>)
 8102840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102844:	f7fd fda8 	bl	8100398 <__aeabi_dsub>
 8102848:	4602      	mov	r2, r0
 810284a:	460b      	mov	r3, r1
 810284c:	4610      	mov	r0, r2
 810284e:	4619      	mov	r1, r3
 8102850:	f7fe fa52 	bl	8100cf8 <__aeabi_d2f>
 8102854:	4603      	mov	r3, r0
 8102856:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f\r\n", avgMotor1, avgMotor2, avgMotor3, avgMotor4, roll, pitch, virtualInputs[0], virtualInputs[1], virtualInputs[2], virtualInputs[3]);
 8102858:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 810285a:	f7fd fefd 	bl	8100658 <__aeabi_f2d>
 810285e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8102862:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8102864:	f7fd fef8 	bl	8100658 <__aeabi_f2d>
 8102868:	e9c7 0106 	strd	r0, r1, [r7, #24]
 810286c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 810286e:	f7fd fef3 	bl	8100658 <__aeabi_f2d>
 8102872:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8102876:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8102878:	f7fd feee 	bl	8100658 <__aeabi_f2d>
 810287c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8102880:	4b2c      	ldr	r3, [pc, #176]	@ (8102934 <stabilize+0x21c>)
 8102882:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8102886:	4b2e      	ldr	r3, [pc, #184]	@ (8102940 <stabilize+0x228>)
 8102888:	ed93 8b00 	vldr	d8, [r3]
 810288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810288e:	4618      	mov	r0, r3
 8102890:	f7fd fee2 	bl	8100658 <__aeabi_f2d>
 8102894:	e9c7 0100 	strd	r0, r1, [r7]
 8102898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810289a:	4618      	mov	r0, r3
 810289c:	f7fd fedc 	bl	8100658 <__aeabi_f2d>
 81028a0:	4680      	mov	r8, r0
 81028a2:	4689      	mov	r9, r1
 81028a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81028a6:	4618      	mov	r0, r3
 81028a8:	f7fd fed6 	bl	8100658 <__aeabi_f2d>
 81028ac:	4604      	mov	r4, r0
 81028ae:	460d      	mov	r5, r1
 81028b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81028b2:	4618      	mov	r0, r3
 81028b4:	f7fd fed0 	bl	8100658 <__aeabi_f2d>
 81028b8:	4602      	mov	r2, r0
 81028ba:	460b      	mov	r3, r1
 81028bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81028c0:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 81028c4:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 81028c8:	ed97 7b00 	vldr	d7, [r7]
 81028cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 81028d0:	ed8d 8b08 	vstr	d8, [sp, #32]
 81028d4:	e9cd ab06 	strd	sl, fp, [sp, #24]
 81028d8:	ed97 7b02 	vldr	d7, [r7, #8]
 81028dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 81028e0:	ed97 7b04 	vldr	d7, [r7, #16]
 81028e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 81028e8:	ed97 7b06 	vldr	d7, [r7, #24]
 81028ec:	ed8d 7b00 	vstr	d7, [sp]
 81028f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 81028f4:	4814      	ldr	r0, [pc, #80]	@ (8102948 <stabilize+0x230>)
 81028f6:	f007 feef 	bl	810a6d8 <iprintf>

	  setPWM(avgMotor1, avgMotor2, avgMotor3, avgMotor4);
 81028fa:	edd7 1a0f 	vldr	s3, [r7, #60]	@ 0x3c
 81028fe:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 8102902:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 8102906:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 810290a:	f7fe fca9 	bl	8101260 <setPWM>

}
 810290e:	bf00      	nop
 8102910:	3750      	adds	r7, #80	@ 0x50
 8102912:	46bd      	mov	sp, r7
 8102914:	ecbd 8b02 	vpop	{d8}
 8102918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810291c:	f3af 8000 	nop.w
 8102920:	6a7ef9db 	.word	0x6a7ef9db
 8102924:	3f9374bc 	.word	0x3f9374bc
 8102928:	7ced9168 	.word	0x7ced9168
 810292c:	3f9e353f 	.word	0x3f9e353f
 8102930:	4179999a 	.word	0x4179999a
 8102934:	10000458 	.word	0x10000458
 8102938:	00000000 	.word	0x00000000
 810293c:	1000042c 	.word	0x1000042c
 8102940:	10000450 	.word	0x10000450
 8102944:	1000040c 	.word	0x1000040c
 8102948:	0810e7d8 	.word	0x0810e7d8

0810294c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 810294c:	b480      	push	{r7}
 810294e:	b083      	sub	sp, #12
 8102950:	af00      	add	r7, sp, #0
 8102952:	6078      	str	r0, [r7, #4]
	if(htim==&htim1){
 8102954:	687b      	ldr	r3, [r7, #4]
 8102956:	4a0c      	ldr	r2, [pc, #48]	@ (8102988 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8102958:	4293      	cmp	r3, r2
 810295a:	d10f      	bne.n	810297c <HAL_TIM_PeriodElapsedCallback+0x30>
		if(n==1){
 810295c:	4b0b      	ldr	r3, [pc, #44]	@ (810298c <HAL_TIM_PeriodElapsedCallback+0x40>)
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	2b01      	cmp	r3, #1
 8102962:	d106      	bne.n	8102972 <HAL_TIM_PeriodElapsedCallback+0x26>
			flag_Tc=1;
 8102964:	4b0a      	ldr	r3, [pc, #40]	@ (8102990 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8102966:	2201      	movs	r2, #1
 8102968:	601a      	str	r2, [r3, #0]
			n=0;
 810296a:	4b08      	ldr	r3, [pc, #32]	@ (810298c <HAL_TIM_PeriodElapsedCallback+0x40>)
 810296c:	2200      	movs	r2, #0
 810296e:	601a      	str	r2, [r3, #0]
		}
		else{
			n++;
		}
	}
}
 8102970:	e004      	b.n	810297c <HAL_TIM_PeriodElapsedCallback+0x30>
			n++;
 8102972:	4b06      	ldr	r3, [pc, #24]	@ (810298c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	3301      	adds	r3, #1
 8102978:	4a04      	ldr	r2, [pc, #16]	@ (810298c <HAL_TIM_PeriodElapsedCallback+0x40>)
 810297a:	6013      	str	r3, [r2, #0]
}
 810297c:	bf00      	nop
 810297e:	370c      	adds	r7, #12
 8102980:	46bd      	mov	sp, r7
 8102982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102986:	4770      	bx	lr
 8102988:	1000028c 	.word	0x1000028c
 810298c:	10000468 	.word	0x10000468
 8102990:	10000404 	.word	0x10000404

08102994 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102994:	b580      	push	{r7, lr}
 8102996:	b084      	sub	sp, #16
 8102998:	af00      	add	r7, sp, #0
 810299a:	6078      	str	r0, [r7, #4]
	if(htim==&htim5){
 810299c:	687b      	ldr	r3, [r7, #4]
 810299e:	4a18      	ldr	r2, [pc, #96]	@ (8102a00 <HAL_TIM_IC_CaptureCallback+0x6c>)
 81029a0:	4293      	cmp	r3, r2
 81029a2:	d128      	bne.n	81029f6 <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	7f1b      	ldrb	r3, [r3, #28]
 81029a8:	2b01      	cmp	r3, #1
 81029aa:	d124      	bne.n	81029f6 <HAL_TIM_IC_CaptureCallback+0x62>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 81029ac:	2100      	movs	r1, #0
 81029ae:	6878      	ldr	r0, [r7, #4]
 81029b0:	f004 fe9c 	bl	81076ec <HAL_TIM_ReadCapturedValue>
 81029b4:	60f8      	str	r0, [r7, #12]

			if (ICValue != 0)
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d01c      	beq.n	81029f6 <HAL_TIM_IC_CaptureCallback+0x62>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 81029bc:	2104      	movs	r1, #4
 81029be:	6878      	ldr	r0, [r7, #4]
 81029c0:	f004 fe94 	bl	81076ec <HAL_TIM_ReadCapturedValue>
 81029c4:	4603      	mov	r3, r0
 81029c6:	2264      	movs	r2, #100	@ 0x64
 81029c8:	fb03 f202 	mul.w	r2, r3, r2
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 81029d2:	60bb      	str	r3, [r7, #8]
				if(duty_received >= 11){
 81029d4:	68bb      	ldr	r3, [r7, #8]
 81029d6:	2b0a      	cmp	r3, #10
 81029d8:	d903      	bls.n	81029e2 <HAL_TIM_IC_CaptureCallback+0x4e>
					mode = 0;
 81029da:	4b0a      	ldr	r3, [pc, #40]	@ (8102a04 <HAL_TIM_IC_CaptureCallback+0x70>)
 81029dc:	2200      	movs	r2, #0
 81029de:	601a      	str	r2, [r3, #0]
					mode = 1;
				}
			}
		}
	}
}
 81029e0:	e009      	b.n	81029f6 <HAL_TIM_IC_CaptureCallback+0x62>
				else if (duty_received <= 8){
 81029e2:	68bb      	ldr	r3, [r7, #8]
 81029e4:	2b08      	cmp	r3, #8
 81029e6:	d803      	bhi.n	81029f0 <HAL_TIM_IC_CaptureCallback+0x5c>
					mode = 2;
 81029e8:	4b06      	ldr	r3, [pc, #24]	@ (8102a04 <HAL_TIM_IC_CaptureCallback+0x70>)
 81029ea:	2202      	movs	r2, #2
 81029ec:	601a      	str	r2, [r3, #0]
}
 81029ee:	e002      	b.n	81029f6 <HAL_TIM_IC_CaptureCallback+0x62>
					mode = 1;
 81029f0:	4b04      	ldr	r3, [pc, #16]	@ (8102a04 <HAL_TIM_IC_CaptureCallback+0x70>)
 81029f2:	2201      	movs	r2, #1
 81029f4:	601a      	str	r2, [r3, #0]
}
 81029f6:	bf00      	nop
 81029f8:	3710      	adds	r7, #16
 81029fa:	46bd      	mov	sp, r7
 81029fc:	bd80      	pop	{r7, pc}
 81029fe:	bf00      	nop
 8102a00:	10000324 	.word	0x10000324
 8102a04:	10000408 	.word	0x10000408

08102a08 <__io_putchar>:


int __io_putchar(int ch){
 8102a08:	b580      	push	{r7, lr}
 8102a0a:	b082      	sub	sp, #8
 8102a0c:	af00      	add	r7, sp, #0
 8102a0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xffff);
 8102a10:	1d39      	adds	r1, r7, #4
 8102a12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102a16:	2201      	movs	r2, #1
 8102a18:	4803      	ldr	r0, [pc, #12]	@ (8102a28 <__io_putchar+0x20>)
 8102a1a:	f005 fe17 	bl	810864c <HAL_UART_Transmit>
	return ch;
 8102a1e:	687b      	ldr	r3, [r7, #4]
}
 8102a20:	4618      	mov	r0, r3
 8102a22:	3708      	adds	r7, #8
 8102a24:	46bd      	mov	sp, r7
 8102a26:	bd80      	pop	{r7, pc}
 8102a28:	10000370 	.word	0x10000370

08102a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102a2c:	b480      	push	{r7}
 8102a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102a30:	b672      	cpsid	i
}
 8102a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102a34:	bf00      	nop
 8102a36:	e7fd      	b.n	8102a34 <Error_Handler+0x8>

08102a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102a38:	b480      	push	{r7}
 8102a3a:	b083      	sub	sp, #12
 8102a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8102a68 <HAL_MspInit+0x30>)
 8102a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102a44:	4a08      	ldr	r2, [pc, #32]	@ (8102a68 <HAL_MspInit+0x30>)
 8102a46:	f043 0302 	orr.w	r3, r3, #2
 8102a4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102a4e:	4b06      	ldr	r3, [pc, #24]	@ (8102a68 <HAL_MspInit+0x30>)
 8102a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102a54:	f003 0302 	and.w	r3, r3, #2
 8102a58:	607b      	str	r3, [r7, #4]
 8102a5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102a5c:	bf00      	nop
 8102a5e:	370c      	adds	r7, #12
 8102a60:	46bd      	mov	sp, r7
 8102a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a66:	4770      	bx	lr
 8102a68:	58024400 	.word	0x58024400

08102a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102a6c:	b580      	push	{r7, lr}
 8102a6e:	b0ba      	sub	sp, #232	@ 0xe8
 8102a70:	af00      	add	r7, sp, #0
 8102a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102a78:	2200      	movs	r2, #0
 8102a7a:	601a      	str	r2, [r3, #0]
 8102a7c:	605a      	str	r2, [r3, #4]
 8102a7e:	609a      	str	r2, [r3, #8]
 8102a80:	60da      	str	r2, [r3, #12]
 8102a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102a84:	f107 0310 	add.w	r3, r7, #16
 8102a88:	22c0      	movs	r2, #192	@ 0xc0
 8102a8a:	2100      	movs	r1, #0
 8102a8c:	4618      	mov	r0, r3
 8102a8e:	f007 ff8b 	bl	810a9a8 <memset>
  if(hi2c->Instance==I2C1)
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a26      	ldr	r2, [pc, #152]	@ (8102b30 <HAL_I2C_MspInit+0xc4>)
 8102a98:	4293      	cmp	r3, r2
 8102a9a:	d145      	bne.n	8102b28 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102a9c:	f04f 0208 	mov.w	r2, #8
 8102aa0:	f04f 0300 	mov.w	r3, #0
 8102aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102aa8:	2300      	movs	r3, #0
 8102aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102aae:	f107 0310 	add.w	r3, r7, #16
 8102ab2:	4618      	mov	r0, r3
 8102ab4:	f001 ff06 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 8102ab8:	4603      	mov	r3, r0
 8102aba:	2b00      	cmp	r3, #0
 8102abc:	d001      	beq.n	8102ac2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102abe:	f7ff ffb5 	bl	8102a2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8102b34 <HAL_I2C_MspInit+0xc8>)
 8102ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8102b34 <HAL_I2C_MspInit+0xc8>)
 8102aca:	f043 0302 	orr.w	r3, r3, #2
 8102ace:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102ad2:	4b18      	ldr	r3, [pc, #96]	@ (8102b34 <HAL_I2C_MspInit+0xc8>)
 8102ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102ad8:	f003 0302 	and.w	r3, r3, #2
 8102adc:	60fb      	str	r3, [r7, #12]
 8102ade:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102ae0:	23c0      	movs	r3, #192	@ 0xc0
 8102ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102ae6:	2312      	movs	r3, #18
 8102ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102aec:	2300      	movs	r3, #0
 8102aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102af2:	2300      	movs	r3, #0
 8102af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102af8:	2304      	movs	r3, #4
 8102afa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102afe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102b02:	4619      	mov	r1, r3
 8102b04:	480c      	ldr	r0, [pc, #48]	@ (8102b38 <HAL_I2C_MspInit+0xcc>)
 8102b06:	f000 fcb9 	bl	810347c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8102b34 <HAL_I2C_MspInit+0xc8>)
 8102b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b10:	4a08      	ldr	r2, [pc, #32]	@ (8102b34 <HAL_I2C_MspInit+0xc8>)
 8102b12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102b16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102b1a:	4b06      	ldr	r3, [pc, #24]	@ (8102b34 <HAL_I2C_MspInit+0xc8>)
 8102b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102b24:	60bb      	str	r3, [r7, #8]
 8102b26:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8102b28:	bf00      	nop
 8102b2a:	37e8      	adds	r7, #232	@ 0xe8
 8102b2c:	46bd      	mov	sp, r7
 8102b2e:	bd80      	pop	{r7, pc}
 8102b30:	40005400 	.word	0x40005400
 8102b34:	58024400 	.word	0x58024400
 8102b38:	58020400 	.word	0x58020400

08102b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102b3c:	b580      	push	{r7, lr}
 8102b3e:	b08c      	sub	sp, #48	@ 0x30
 8102b40:	af00      	add	r7, sp, #0
 8102b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102b44:	f107 031c 	add.w	r3, r7, #28
 8102b48:	2200      	movs	r2, #0
 8102b4a:	601a      	str	r2, [r3, #0]
 8102b4c:	605a      	str	r2, [r3, #4]
 8102b4e:	609a      	str	r2, [r3, #8]
 8102b50:	60da      	str	r2, [r3, #12]
 8102b52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	4a37      	ldr	r2, [pc, #220]	@ (8102c38 <HAL_TIM_Base_MspInit+0xfc>)
 8102b5a:	4293      	cmp	r3, r2
 8102b5c:	d117      	bne.n	8102b8e <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102b5e:	4b37      	ldr	r3, [pc, #220]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102b64:	4a35      	ldr	r2, [pc, #212]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102b66:	f043 0301 	orr.w	r3, r3, #1
 8102b6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102b6e:	4b33      	ldr	r3, [pc, #204]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102b74:	f003 0301 	and.w	r3, r3, #1
 8102b78:	61bb      	str	r3, [r7, #24]
 8102b7a:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8102b7c:	2200      	movs	r2, #0
 8102b7e:	2100      	movs	r1, #0
 8102b80:	2019      	movs	r0, #25
 8102b82:	f000 fc32 	bl	81033ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8102b86:	2019      	movs	r0, #25
 8102b88:	f000 fc49 	bl	810341e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8102b8c:	e04f      	b.n	8102c2e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	681b      	ldr	r3, [r3, #0]
 8102b92:	4a2b      	ldr	r2, [pc, #172]	@ (8102c40 <HAL_TIM_Base_MspInit+0x104>)
 8102b94:	4293      	cmp	r3, r2
 8102b96:	d10f      	bne.n	8102bb8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102b98:	4b28      	ldr	r3, [pc, #160]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102b9e:	4a27      	ldr	r2, [pc, #156]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102ba0:	f043 0302 	orr.w	r3, r3, #2
 8102ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102ba8:	4b24      	ldr	r3, [pc, #144]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102baa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102bae:	f003 0302 	and.w	r3, r3, #2
 8102bb2:	617b      	str	r3, [r7, #20]
 8102bb4:	697b      	ldr	r3, [r7, #20]
}
 8102bb6:	e03a      	b.n	8102c2e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM5)
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	681b      	ldr	r3, [r3, #0]
 8102bbc:	4a21      	ldr	r2, [pc, #132]	@ (8102c44 <HAL_TIM_Base_MspInit+0x108>)
 8102bbe:	4293      	cmp	r3, r2
 8102bc0:	d135      	bne.n	8102c2e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8102bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102bca:	f043 0308 	orr.w	r3, r3, #8
 8102bce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102bd8:	f003 0308 	and.w	r3, r3, #8
 8102bdc:	613b      	str	r3, [r7, #16]
 8102bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102be0:	4b16      	ldr	r3, [pc, #88]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102be6:	4a15      	ldr	r2, [pc, #84]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102be8:	f043 0301 	orr.w	r3, r3, #1
 8102bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102bf0:	4b12      	ldr	r3, [pc, #72]	@ (8102c3c <HAL_TIM_Base_MspInit+0x100>)
 8102bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102bf6:	f003 0301 	and.w	r3, r3, #1
 8102bfa:	60fb      	str	r3, [r7, #12]
 8102bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102bfe:	2301      	movs	r3, #1
 8102c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102c02:	2302      	movs	r3, #2
 8102c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c06:	2300      	movs	r3, #0
 8102c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c0a:	2300      	movs	r3, #0
 8102c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8102c0e:	2302      	movs	r3, #2
 8102c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102c12:	f107 031c 	add.w	r3, r7, #28
 8102c16:	4619      	mov	r1, r3
 8102c18:	480b      	ldr	r0, [pc, #44]	@ (8102c48 <HAL_TIM_Base_MspInit+0x10c>)
 8102c1a:	f000 fc2f 	bl	810347c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8102c1e:	2200      	movs	r2, #0
 8102c20:	2100      	movs	r1, #0
 8102c22:	2032      	movs	r0, #50	@ 0x32
 8102c24:	f000 fbe1 	bl	81033ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102c28:	2032      	movs	r0, #50	@ 0x32
 8102c2a:	f000 fbf8 	bl	810341e <HAL_NVIC_EnableIRQ>
}
 8102c2e:	bf00      	nop
 8102c30:	3730      	adds	r7, #48	@ 0x30
 8102c32:	46bd      	mov	sp, r7
 8102c34:	bd80      	pop	{r7, pc}
 8102c36:	bf00      	nop
 8102c38:	40010000 	.word	0x40010000
 8102c3c:	58024400 	.word	0x58024400
 8102c40:	40000400 	.word	0x40000400
 8102c44:	40000c00 	.word	0x40000c00
 8102c48:	58020000 	.word	0x58020000

08102c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102c4c:	b580      	push	{r7, lr}
 8102c4e:	b08a      	sub	sp, #40	@ 0x28
 8102c50:	af00      	add	r7, sp, #0
 8102c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c54:	f107 0314 	add.w	r3, r7, #20
 8102c58:	2200      	movs	r2, #0
 8102c5a:	601a      	str	r2, [r3, #0]
 8102c5c:	605a      	str	r2, [r3, #4]
 8102c5e:	609a      	str	r2, [r3, #8]
 8102c60:	60da      	str	r2, [r3, #12]
 8102c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a32      	ldr	r2, [pc, #200]	@ (8102d34 <HAL_TIM_MspPostInit+0xe8>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d15d      	bne.n	8102d2a <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102c6e:	4b32      	ldr	r3, [pc, #200]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c74:	4a30      	ldr	r2, [pc, #192]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102c76:	f043 0301 	orr.w	r3, r3, #1
 8102c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c84:	f003 0301 	and.w	r3, r3, #1
 8102c88:	613b      	str	r3, [r7, #16]
 8102c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c92:	4a29      	ldr	r2, [pc, #164]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102c94:	f043 0302 	orr.w	r3, r3, #2
 8102c98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c9c:	4b26      	ldr	r3, [pc, #152]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102ca2:	f003 0302 	and.w	r3, r3, #2
 8102ca6:	60fb      	str	r3, [r7, #12]
 8102ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102caa:	4b23      	ldr	r3, [pc, #140]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102cb0:	4a21      	ldr	r2, [pc, #132]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102cb2:	f043 0304 	orr.w	r3, r3, #4
 8102cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102cba:	4b1f      	ldr	r3, [pc, #124]	@ (8102d38 <HAL_TIM_MspPostInit+0xec>)
 8102cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102cc0:	f003 0304 	and.w	r3, r3, #4
 8102cc4:	60bb      	str	r3, [r7, #8]
 8102cc6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8102cc8:	2340      	movs	r3, #64	@ 0x40
 8102cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ccc:	2302      	movs	r3, #2
 8102cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cd0:	2300      	movs	r3, #0
 8102cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cd4:	2300      	movs	r3, #0
 8102cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102cd8:	2302      	movs	r3, #2
 8102cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102cdc:	f107 0314 	add.w	r3, r7, #20
 8102ce0:	4619      	mov	r1, r3
 8102ce2:	4816      	ldr	r0, [pc, #88]	@ (8102d3c <HAL_TIM_MspPostInit+0xf0>)
 8102ce4:	f000 fbca 	bl	810347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8102ce8:	2302      	movs	r3, #2
 8102cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102cec:	2302      	movs	r3, #2
 8102cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102cf0:	2300      	movs	r3, #0
 8102cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102cf4:	2300      	movs	r3, #0
 8102cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102cf8:	2302      	movs	r3, #2
 8102cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102cfc:	f107 0314 	add.w	r3, r7, #20
 8102d00:	4619      	mov	r1, r3
 8102d02:	480f      	ldr	r0, [pc, #60]	@ (8102d40 <HAL_TIM_MspPostInit+0xf4>)
 8102d04:	f000 fbba 	bl	810347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8102d08:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8102d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d0e:	2302      	movs	r3, #2
 8102d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d12:	2300      	movs	r3, #0
 8102d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102d16:	2300      	movs	r3, #0
 8102d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102d1a:	2302      	movs	r3, #2
 8102d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102d1e:	f107 0314 	add.w	r3, r7, #20
 8102d22:	4619      	mov	r1, r3
 8102d24:	4807      	ldr	r0, [pc, #28]	@ (8102d44 <HAL_TIM_MspPostInit+0xf8>)
 8102d26:	f000 fba9 	bl	810347c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102d2a:	bf00      	nop
 8102d2c:	3728      	adds	r7, #40	@ 0x28
 8102d2e:	46bd      	mov	sp, r7
 8102d30:	bd80      	pop	{r7, pc}
 8102d32:	bf00      	nop
 8102d34:	40000400 	.word	0x40000400
 8102d38:	58024400 	.word	0x58024400
 8102d3c:	58020000 	.word	0x58020000
 8102d40:	58020400 	.word	0x58020400
 8102d44:	58020800 	.word	0x58020800

08102d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102d48:	b580      	push	{r7, lr}
 8102d4a:	b0ba      	sub	sp, #232	@ 0xe8
 8102d4c:	af00      	add	r7, sp, #0
 8102d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102d54:	2200      	movs	r2, #0
 8102d56:	601a      	str	r2, [r3, #0]
 8102d58:	605a      	str	r2, [r3, #4]
 8102d5a:	609a      	str	r2, [r3, #8]
 8102d5c:	60da      	str	r2, [r3, #12]
 8102d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102d60:	f107 0310 	add.w	r3, r7, #16
 8102d64:	22c0      	movs	r2, #192	@ 0xc0
 8102d66:	2100      	movs	r1, #0
 8102d68:	4618      	mov	r0, r3
 8102d6a:	f007 fe1d 	bl	810a9a8 <memset>
  if(huart->Instance==USART3)
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	4a27      	ldr	r2, [pc, #156]	@ (8102e10 <HAL_UART_MspInit+0xc8>)
 8102d74:	4293      	cmp	r3, r2
 8102d76:	d146      	bne.n	8102e06 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102d78:	f04f 0202 	mov.w	r2, #2
 8102d7c:	f04f 0300 	mov.w	r3, #0
 8102d80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102d84:	2300      	movs	r3, #0
 8102d86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102d8a:	f107 0310 	add.w	r3, r7, #16
 8102d8e:	4618      	mov	r0, r3
 8102d90:	f001 fd98 	bl	81048c4 <HAL_RCCEx_PeriphCLKConfig>
 8102d94:	4603      	mov	r3, r0
 8102d96:	2b00      	cmp	r3, #0
 8102d98:	d001      	beq.n	8102d9e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102d9a:	f7ff fe47 	bl	8102a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8102e14 <HAL_UART_MspInit+0xcc>)
 8102da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102da4:	4a1b      	ldr	r2, [pc, #108]	@ (8102e14 <HAL_UART_MspInit+0xcc>)
 8102da6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8102daa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102dae:	4b19      	ldr	r3, [pc, #100]	@ (8102e14 <HAL_UART_MspInit+0xcc>)
 8102db0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102db8:	60fb      	str	r3, [r7, #12]
 8102dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102dbc:	4b15      	ldr	r3, [pc, #84]	@ (8102e14 <HAL_UART_MspInit+0xcc>)
 8102dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102dc2:	4a14      	ldr	r2, [pc, #80]	@ (8102e14 <HAL_UART_MspInit+0xcc>)
 8102dc4:	f043 0308 	orr.w	r3, r3, #8
 8102dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102dcc:	4b11      	ldr	r3, [pc, #68]	@ (8102e14 <HAL_UART_MspInit+0xcc>)
 8102dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102dd2:	f003 0308 	and.w	r3, r3, #8
 8102dd6:	60bb      	str	r3, [r7, #8]
 8102dd8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102dda:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102de2:	2302      	movs	r3, #2
 8102de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102de8:	2300      	movs	r3, #0
 8102dea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102dee:	2300      	movs	r3, #0
 8102df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102df4:	2307      	movs	r3, #7
 8102df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102dfa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102dfe:	4619      	mov	r1, r3
 8102e00:	4805      	ldr	r0, [pc, #20]	@ (8102e18 <HAL_UART_MspInit+0xd0>)
 8102e02:	f000 fb3b 	bl	810347c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8102e06:	bf00      	nop
 8102e08:	37e8      	adds	r7, #232	@ 0xe8
 8102e0a:	46bd      	mov	sp, r7
 8102e0c:	bd80      	pop	{r7, pc}
 8102e0e:	bf00      	nop
 8102e10:	40004800 	.word	0x40004800
 8102e14:	58024400 	.word	0x58024400
 8102e18:	58020c00 	.word	0x58020c00

08102e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102e1c:	b480      	push	{r7}
 8102e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102e20:	bf00      	nop
 8102e22:	e7fd      	b.n	8102e20 <NMI_Handler+0x4>

08102e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102e24:	b480      	push	{r7}
 8102e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102e28:	bf00      	nop
 8102e2a:	e7fd      	b.n	8102e28 <HardFault_Handler+0x4>

08102e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102e2c:	b480      	push	{r7}
 8102e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102e30:	bf00      	nop
 8102e32:	e7fd      	b.n	8102e30 <MemManage_Handler+0x4>

08102e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102e34:	b480      	push	{r7}
 8102e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102e38:	bf00      	nop
 8102e3a:	e7fd      	b.n	8102e38 <BusFault_Handler+0x4>

08102e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102e3c:	b480      	push	{r7}
 8102e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102e40:	bf00      	nop
 8102e42:	e7fd      	b.n	8102e40 <UsageFault_Handler+0x4>

08102e44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102e44:	b480      	push	{r7}
 8102e46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102e48:	bf00      	nop
 8102e4a:	46bd      	mov	sp, r7
 8102e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e50:	4770      	bx	lr

08102e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102e52:	b480      	push	{r7}
 8102e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102e56:	bf00      	nop
 8102e58:	46bd      	mov	sp, r7
 8102e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e5e:	4770      	bx	lr

08102e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102e60:	b480      	push	{r7}
 8102e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102e64:	bf00      	nop
 8102e66:	46bd      	mov	sp, r7
 8102e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e6c:	4770      	bx	lr

08102e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102e6e:	b580      	push	{r7, lr}
 8102e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102e72:	f000 f99b 	bl	81031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102e76:	bf00      	nop
 8102e78:	bd80      	pop	{r7, pc}
	...

08102e7c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8102e7c:	b580      	push	{r7, lr}
 8102e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8102e80:	4802      	ldr	r0, [pc, #8]	@ (8102e8c <TIM1_UP_IRQHandler+0x10>)
 8102e82:	f004 f841 	bl	8106f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8102e86:	bf00      	nop
 8102e88:	bd80      	pop	{r7, pc}
 8102e8a:	bf00      	nop
 8102e8c:	1000028c 	.word	0x1000028c

08102e90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8102e90:	b580      	push	{r7, lr}
 8102e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8102e94:	4802      	ldr	r0, [pc, #8]	@ (8102ea0 <TIM5_IRQHandler+0x10>)
 8102e96:	f004 f837 	bl	8106f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8102e9a:	bf00      	nop
 8102e9c:	bd80      	pop	{r7, pc}
 8102e9e:	bf00      	nop
 8102ea0:	10000324 	.word	0x10000324

08102ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102ea4:	b480      	push	{r7}
 8102ea6:	af00      	add	r7, sp, #0
  return 1;
 8102ea8:	2301      	movs	r3, #1
}
 8102eaa:	4618      	mov	r0, r3
 8102eac:	46bd      	mov	sp, r7
 8102eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eb2:	4770      	bx	lr

08102eb4 <_kill>:

int _kill(int pid, int sig)
{
 8102eb4:	b580      	push	{r7, lr}
 8102eb6:	b082      	sub	sp, #8
 8102eb8:	af00      	add	r7, sp, #0
 8102eba:	6078      	str	r0, [r7, #4]
 8102ebc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8102ebe:	f007 fdc5 	bl	810aa4c <__errno>
 8102ec2:	4603      	mov	r3, r0
 8102ec4:	2216      	movs	r2, #22
 8102ec6:	601a      	str	r2, [r3, #0]
  return -1;
 8102ec8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8102ecc:	4618      	mov	r0, r3
 8102ece:	3708      	adds	r7, #8
 8102ed0:	46bd      	mov	sp, r7
 8102ed2:	bd80      	pop	{r7, pc}

08102ed4 <_exit>:

void _exit (int status)
{
 8102ed4:	b580      	push	{r7, lr}
 8102ed6:	b082      	sub	sp, #8
 8102ed8:	af00      	add	r7, sp, #0
 8102eda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8102edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8102ee0:	6878      	ldr	r0, [r7, #4]
 8102ee2:	f7ff ffe7 	bl	8102eb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8102ee6:	bf00      	nop
 8102ee8:	e7fd      	b.n	8102ee6 <_exit+0x12>

08102eea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102eea:	b580      	push	{r7, lr}
 8102eec:	b086      	sub	sp, #24
 8102eee:	af00      	add	r7, sp, #0
 8102ef0:	60f8      	str	r0, [r7, #12]
 8102ef2:	60b9      	str	r1, [r7, #8]
 8102ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102ef6:	2300      	movs	r3, #0
 8102ef8:	617b      	str	r3, [r7, #20]
 8102efa:	e00a      	b.n	8102f12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8102efc:	f3af 8000 	nop.w
 8102f00:	4601      	mov	r1, r0
 8102f02:	68bb      	ldr	r3, [r7, #8]
 8102f04:	1c5a      	adds	r2, r3, #1
 8102f06:	60ba      	str	r2, [r7, #8]
 8102f08:	b2ca      	uxtb	r2, r1
 8102f0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102f0c:	697b      	ldr	r3, [r7, #20]
 8102f0e:	3301      	adds	r3, #1
 8102f10:	617b      	str	r3, [r7, #20]
 8102f12:	697a      	ldr	r2, [r7, #20]
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	429a      	cmp	r2, r3
 8102f18:	dbf0      	blt.n	8102efc <_read+0x12>
  }

  return len;
 8102f1a:	687b      	ldr	r3, [r7, #4]
}
 8102f1c:	4618      	mov	r0, r3
 8102f1e:	3718      	adds	r7, #24
 8102f20:	46bd      	mov	sp, r7
 8102f22:	bd80      	pop	{r7, pc}

08102f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102f24:	b580      	push	{r7, lr}
 8102f26:	b086      	sub	sp, #24
 8102f28:	af00      	add	r7, sp, #0
 8102f2a:	60f8      	str	r0, [r7, #12]
 8102f2c:	60b9      	str	r1, [r7, #8]
 8102f2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102f30:	2300      	movs	r3, #0
 8102f32:	617b      	str	r3, [r7, #20]
 8102f34:	e009      	b.n	8102f4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8102f36:	68bb      	ldr	r3, [r7, #8]
 8102f38:	1c5a      	adds	r2, r3, #1
 8102f3a:	60ba      	str	r2, [r7, #8]
 8102f3c:	781b      	ldrb	r3, [r3, #0]
 8102f3e:	4618      	mov	r0, r3
 8102f40:	f7ff fd62 	bl	8102a08 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102f44:	697b      	ldr	r3, [r7, #20]
 8102f46:	3301      	adds	r3, #1
 8102f48:	617b      	str	r3, [r7, #20]
 8102f4a:	697a      	ldr	r2, [r7, #20]
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	429a      	cmp	r2, r3
 8102f50:	dbf1      	blt.n	8102f36 <_write+0x12>
  }
  return len;
 8102f52:	687b      	ldr	r3, [r7, #4]
}
 8102f54:	4618      	mov	r0, r3
 8102f56:	3718      	adds	r7, #24
 8102f58:	46bd      	mov	sp, r7
 8102f5a:	bd80      	pop	{r7, pc}

08102f5c <_close>:

int _close(int file)
{
 8102f5c:	b480      	push	{r7}
 8102f5e:	b083      	sub	sp, #12
 8102f60:	af00      	add	r7, sp, #0
 8102f62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8102f64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8102f68:	4618      	mov	r0, r3
 8102f6a:	370c      	adds	r7, #12
 8102f6c:	46bd      	mov	sp, r7
 8102f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f72:	4770      	bx	lr

08102f74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102f74:	b480      	push	{r7}
 8102f76:	b083      	sub	sp, #12
 8102f78:	af00      	add	r7, sp, #0
 8102f7a:	6078      	str	r0, [r7, #4]
 8102f7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8102f7e:	683b      	ldr	r3, [r7, #0]
 8102f80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8102f84:	605a      	str	r2, [r3, #4]
  return 0;
 8102f86:	2300      	movs	r3, #0
}
 8102f88:	4618      	mov	r0, r3
 8102f8a:	370c      	adds	r7, #12
 8102f8c:	46bd      	mov	sp, r7
 8102f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f92:	4770      	bx	lr

08102f94 <_isatty>:

int _isatty(int file)
{
 8102f94:	b480      	push	{r7}
 8102f96:	b083      	sub	sp, #12
 8102f98:	af00      	add	r7, sp, #0
 8102f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8102f9c:	2301      	movs	r3, #1
}
 8102f9e:	4618      	mov	r0, r3
 8102fa0:	370c      	adds	r7, #12
 8102fa2:	46bd      	mov	sp, r7
 8102fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fa8:	4770      	bx	lr

08102faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102faa:	b480      	push	{r7}
 8102fac:	b085      	sub	sp, #20
 8102fae:	af00      	add	r7, sp, #0
 8102fb0:	60f8      	str	r0, [r7, #12]
 8102fb2:	60b9      	str	r1, [r7, #8]
 8102fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8102fb6:	2300      	movs	r3, #0
}
 8102fb8:	4618      	mov	r0, r3
 8102fba:	3714      	adds	r7, #20
 8102fbc:	46bd      	mov	sp, r7
 8102fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc2:	4770      	bx	lr

08102fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102fc4:	b580      	push	{r7, lr}
 8102fc6:	b086      	sub	sp, #24
 8102fc8:	af00      	add	r7, sp, #0
 8102fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102fcc:	4a14      	ldr	r2, [pc, #80]	@ (8103020 <_sbrk+0x5c>)
 8102fce:	4b15      	ldr	r3, [pc, #84]	@ (8103024 <_sbrk+0x60>)
 8102fd0:	1ad3      	subs	r3, r2, r3
 8102fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102fd4:	697b      	ldr	r3, [r7, #20]
 8102fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102fd8:	4b13      	ldr	r3, [pc, #76]	@ (8103028 <_sbrk+0x64>)
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	2b00      	cmp	r3, #0
 8102fde:	d102      	bne.n	8102fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102fe0:	4b11      	ldr	r3, [pc, #68]	@ (8103028 <_sbrk+0x64>)
 8102fe2:	4a12      	ldr	r2, [pc, #72]	@ (810302c <_sbrk+0x68>)
 8102fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102fe6:	4b10      	ldr	r3, [pc, #64]	@ (8103028 <_sbrk+0x64>)
 8102fe8:	681a      	ldr	r2, [r3, #0]
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	4413      	add	r3, r2
 8102fee:	693a      	ldr	r2, [r7, #16]
 8102ff0:	429a      	cmp	r2, r3
 8102ff2:	d207      	bcs.n	8103004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102ff4:	f007 fd2a 	bl	810aa4c <__errno>
 8102ff8:	4603      	mov	r3, r0
 8102ffa:	220c      	movs	r2, #12
 8102ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8103002:	e009      	b.n	8103018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8103004:	4b08      	ldr	r3, [pc, #32]	@ (8103028 <_sbrk+0x64>)
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810300a:	4b07      	ldr	r3, [pc, #28]	@ (8103028 <_sbrk+0x64>)
 810300c:	681a      	ldr	r2, [r3, #0]
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	4413      	add	r3, r2
 8103012:	4a05      	ldr	r2, [pc, #20]	@ (8103028 <_sbrk+0x64>)
 8103014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8103016:	68fb      	ldr	r3, [r7, #12]
}
 8103018:	4618      	mov	r0, r3
 810301a:	3718      	adds	r7, #24
 810301c:	46bd      	mov	sp, r7
 810301e:	bd80      	pop	{r7, pc}
 8103020:	10048000 	.word	0x10048000
 8103024:	00000400 	.word	0x00000400
 8103028:	1000046c 	.word	0x1000046c
 810302c:	100005c0 	.word	0x100005c0

08103030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8103030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103068 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8103034:	f7fe f85e 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8103038:	480c      	ldr	r0, [pc, #48]	@ (810306c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810303a:	490d      	ldr	r1, [pc, #52]	@ (8103070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810303c:	4a0d      	ldr	r2, [pc, #52]	@ (8103074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810303e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8103040:	e002      	b.n	8103048 <LoopCopyDataInit>

08103042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8103042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8103044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8103046:	3304      	adds	r3, #4

08103048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8103048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810304a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810304c:	d3f9      	bcc.n	8103042 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810304e:	4a0a      	ldr	r2, [pc, #40]	@ (8103078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8103050:	4c0a      	ldr	r4, [pc, #40]	@ (810307c <LoopFillZerobss+0x22>)
  movs r3, #0
 8103052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8103054:	e001      	b.n	810305a <LoopFillZerobss>

08103056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8103056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103058:	3204      	adds	r2, #4

0810305a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810305a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810305c:	d3fb      	bcc.n	8103056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810305e:	f007 fcfb 	bl	810aa58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103062:	f7fe ff0b 	bl	8101e7c <main>
  bx  lr
 8103066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103068:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810306c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103070:	100001f8 	.word	0x100001f8
  ldr r2, =_sidata
 8103074:	0810ec80 	.word	0x0810ec80
  ldr r2, =_sbss
 8103078:	100001f8 	.word	0x100001f8
  ldr r4, =_ebss
 810307c:	100005c0 	.word	0x100005c0

08103080 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103080:	e7fe      	b.n	8103080 <ADC3_IRQHandler>
	...

08103084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8103084:	b580      	push	{r7, lr}
 8103086:	b082      	sub	sp, #8
 8103088:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810308a:	4b28      	ldr	r3, [pc, #160]	@ (810312c <HAL_Init+0xa8>)
 810308c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103090:	4a26      	ldr	r2, [pc, #152]	@ (810312c <HAL_Init+0xa8>)
 8103092:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103096:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810309a:	4b24      	ldr	r3, [pc, #144]	@ (810312c <HAL_Init+0xa8>)
 810309c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81030a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81030a4:	603b      	str	r3, [r7, #0]
 81030a6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81030a8:	4b21      	ldr	r3, [pc, #132]	@ (8103130 <HAL_Init+0xac>)
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81030b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81030b4:	4a1e      	ldr	r2, [pc, #120]	@ (8103130 <HAL_Init+0xac>)
 81030b6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81030ba:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81030bc:	4b1c      	ldr	r3, [pc, #112]	@ (8103130 <HAL_Init+0xac>)
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	4a1b      	ldr	r2, [pc, #108]	@ (8103130 <HAL_Init+0xac>)
 81030c2:	f043 0301 	orr.w	r3, r3, #1
 81030c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81030c8:	2003      	movs	r0, #3
 81030ca:	f000 f983 	bl	81033d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81030ce:	f001 fa21 	bl	8104514 <HAL_RCC_GetSysClockFreq>
 81030d2:	4602      	mov	r2, r0
 81030d4:	4b15      	ldr	r3, [pc, #84]	@ (810312c <HAL_Init+0xa8>)
 81030d6:	699b      	ldr	r3, [r3, #24]
 81030d8:	0a1b      	lsrs	r3, r3, #8
 81030da:	f003 030f 	and.w	r3, r3, #15
 81030de:	4915      	ldr	r1, [pc, #84]	@ (8103134 <HAL_Init+0xb0>)
 81030e0:	5ccb      	ldrb	r3, [r1, r3]
 81030e2:	f003 031f 	and.w	r3, r3, #31
 81030e6:	fa22 f303 	lsr.w	r3, r2, r3
 81030ea:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81030ec:	4b0f      	ldr	r3, [pc, #60]	@ (810312c <HAL_Init+0xa8>)
 81030ee:	699b      	ldr	r3, [r3, #24]
 81030f0:	f003 030f 	and.w	r3, r3, #15
 81030f4:	4a0f      	ldr	r2, [pc, #60]	@ (8103134 <HAL_Init+0xb0>)
 81030f6:	5cd3      	ldrb	r3, [r2, r3]
 81030f8:	f003 031f 	and.w	r3, r3, #31
 81030fc:	687a      	ldr	r2, [r7, #4]
 81030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8103102:	4a0d      	ldr	r2, [pc, #52]	@ (8103138 <HAL_Init+0xb4>)
 8103104:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103106:	4b0c      	ldr	r3, [pc, #48]	@ (8103138 <HAL_Init+0xb4>)
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	4a0c      	ldr	r2, [pc, #48]	@ (810313c <HAL_Init+0xb8>)
 810310c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810310e:	2000      	movs	r0, #0
 8103110:	f000 f816 	bl	8103140 <HAL_InitTick>
 8103114:	4603      	mov	r3, r0
 8103116:	2b00      	cmp	r3, #0
 8103118:	d001      	beq.n	810311e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810311a:	2301      	movs	r3, #1
 810311c:	e002      	b.n	8103124 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810311e:	f7ff fc8b 	bl	8102a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8103122:	2300      	movs	r3, #0
}
 8103124:	4618      	mov	r0, r3
 8103126:	3708      	adds	r7, #8
 8103128:	46bd      	mov	sp, r7
 810312a:	bd80      	pop	{r7, pc}
 810312c:	58024400 	.word	0x58024400
 8103130:	40024400 	.word	0x40024400
 8103134:	0810e80c 	.word	0x0810e80c
 8103138:	10000004 	.word	0x10000004
 810313c:	10000000 	.word	0x10000000

08103140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103140:	b580      	push	{r7, lr}
 8103142:	b082      	sub	sp, #8
 8103144:	af00      	add	r7, sp, #0
 8103146:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8103148:	4b15      	ldr	r3, [pc, #84]	@ (81031a0 <HAL_InitTick+0x60>)
 810314a:	781b      	ldrb	r3, [r3, #0]
 810314c:	2b00      	cmp	r3, #0
 810314e:	d101      	bne.n	8103154 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8103150:	2301      	movs	r3, #1
 8103152:	e021      	b.n	8103198 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8103154:	4b13      	ldr	r3, [pc, #76]	@ (81031a4 <HAL_InitTick+0x64>)
 8103156:	681a      	ldr	r2, [r3, #0]
 8103158:	4b11      	ldr	r3, [pc, #68]	@ (81031a0 <HAL_InitTick+0x60>)
 810315a:	781b      	ldrb	r3, [r3, #0]
 810315c:	4619      	mov	r1, r3
 810315e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8103162:	fbb3 f3f1 	udiv	r3, r3, r1
 8103166:	fbb2 f3f3 	udiv	r3, r2, r3
 810316a:	4618      	mov	r0, r3
 810316c:	f000 f965 	bl	810343a <HAL_SYSTICK_Config>
 8103170:	4603      	mov	r3, r0
 8103172:	2b00      	cmp	r3, #0
 8103174:	d001      	beq.n	810317a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8103176:	2301      	movs	r3, #1
 8103178:	e00e      	b.n	8103198 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	2b0f      	cmp	r3, #15
 810317e:	d80a      	bhi.n	8103196 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103180:	2200      	movs	r2, #0
 8103182:	6879      	ldr	r1, [r7, #4]
 8103184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103188:	f000 f92f 	bl	81033ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810318c:	4a06      	ldr	r2, [pc, #24]	@ (81031a8 <HAL_InitTick+0x68>)
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8103192:	2300      	movs	r3, #0
 8103194:	e000      	b.n	8103198 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8103196:	2301      	movs	r3, #1
}
 8103198:	4618      	mov	r0, r3
 810319a:	3708      	adds	r7, #8
 810319c:	46bd      	mov	sp, r7
 810319e:	bd80      	pop	{r7, pc}
 81031a0:	10000018 	.word	0x10000018
 81031a4:	10000000 	.word	0x10000000
 81031a8:	10000014 	.word	0x10000014

081031ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81031ac:	b480      	push	{r7}
 81031ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81031b0:	4b06      	ldr	r3, [pc, #24]	@ (81031cc <HAL_IncTick+0x20>)
 81031b2:	781b      	ldrb	r3, [r3, #0]
 81031b4:	461a      	mov	r2, r3
 81031b6:	4b06      	ldr	r3, [pc, #24]	@ (81031d0 <HAL_IncTick+0x24>)
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	4413      	add	r3, r2
 81031bc:	4a04      	ldr	r2, [pc, #16]	@ (81031d0 <HAL_IncTick+0x24>)
 81031be:	6013      	str	r3, [r2, #0]
}
 81031c0:	bf00      	nop
 81031c2:	46bd      	mov	sp, r7
 81031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031c8:	4770      	bx	lr
 81031ca:	bf00      	nop
 81031cc:	10000018 	.word	0x10000018
 81031d0:	10000470 	.word	0x10000470

081031d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81031d4:	b480      	push	{r7}
 81031d6:	af00      	add	r7, sp, #0
  return uwTick;
 81031d8:	4b03      	ldr	r3, [pc, #12]	@ (81031e8 <HAL_GetTick+0x14>)
 81031da:	681b      	ldr	r3, [r3, #0]
}
 81031dc:	4618      	mov	r0, r3
 81031de:	46bd      	mov	sp, r7
 81031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e4:	4770      	bx	lr
 81031e6:	bf00      	nop
 81031e8:	10000470 	.word	0x10000470

081031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81031ec:	b580      	push	{r7, lr}
 81031ee:	b084      	sub	sp, #16
 81031f0:	af00      	add	r7, sp, #0
 81031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81031f4:	f7ff ffee 	bl	81031d4 <HAL_GetTick>
 81031f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81031fe:	68fb      	ldr	r3, [r7, #12]
 8103200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103204:	d005      	beq.n	8103212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8103206:	4b0a      	ldr	r3, [pc, #40]	@ (8103230 <HAL_Delay+0x44>)
 8103208:	781b      	ldrb	r3, [r3, #0]
 810320a:	461a      	mov	r2, r3
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	4413      	add	r3, r2
 8103210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8103212:	bf00      	nop
 8103214:	f7ff ffde 	bl	81031d4 <HAL_GetTick>
 8103218:	4602      	mov	r2, r0
 810321a:	68bb      	ldr	r3, [r7, #8]
 810321c:	1ad3      	subs	r3, r2, r3
 810321e:	68fa      	ldr	r2, [r7, #12]
 8103220:	429a      	cmp	r2, r3
 8103222:	d8f7      	bhi.n	8103214 <HAL_Delay+0x28>
  {
  }
}
 8103224:	bf00      	nop
 8103226:	bf00      	nop
 8103228:	3710      	adds	r7, #16
 810322a:	46bd      	mov	sp, r7
 810322c:	bd80      	pop	{r7, pc}
 810322e:	bf00      	nop
 8103230:	10000018 	.word	0x10000018

08103234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103234:	b480      	push	{r7}
 8103236:	b085      	sub	sp, #20
 8103238:	af00      	add	r7, sp, #0
 810323a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	f003 0307 	and.w	r3, r3, #7
 8103242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103244:	4b0c      	ldr	r3, [pc, #48]	@ (8103278 <__NVIC_SetPriorityGrouping+0x44>)
 8103246:	68db      	ldr	r3, [r3, #12]
 8103248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810324a:	68ba      	ldr	r2, [r7, #8]
 810324c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8103250:	4013      	ands	r3, r2
 8103252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103254:	68fb      	ldr	r3, [r7, #12]
 8103256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103258:	68bb      	ldr	r3, [r7, #8]
 810325a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810325c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8103260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103266:	4a04      	ldr	r2, [pc, #16]	@ (8103278 <__NVIC_SetPriorityGrouping+0x44>)
 8103268:	68bb      	ldr	r3, [r7, #8]
 810326a:	60d3      	str	r3, [r2, #12]
}
 810326c:	bf00      	nop
 810326e:	3714      	adds	r7, #20
 8103270:	46bd      	mov	sp, r7
 8103272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103276:	4770      	bx	lr
 8103278:	e000ed00 	.word	0xe000ed00

0810327c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810327c:	b480      	push	{r7}
 810327e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103280:	4b04      	ldr	r3, [pc, #16]	@ (8103294 <__NVIC_GetPriorityGrouping+0x18>)
 8103282:	68db      	ldr	r3, [r3, #12]
 8103284:	0a1b      	lsrs	r3, r3, #8
 8103286:	f003 0307 	and.w	r3, r3, #7
}
 810328a:	4618      	mov	r0, r3
 810328c:	46bd      	mov	sp, r7
 810328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103292:	4770      	bx	lr
 8103294:	e000ed00 	.word	0xe000ed00

08103298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103298:	b480      	push	{r7}
 810329a:	b083      	sub	sp, #12
 810329c:	af00      	add	r7, sp, #0
 810329e:	4603      	mov	r3, r0
 81032a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81032a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032a6:	2b00      	cmp	r3, #0
 81032a8:	db0b      	blt.n	81032c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81032aa:	88fb      	ldrh	r3, [r7, #6]
 81032ac:	f003 021f 	and.w	r2, r3, #31
 81032b0:	4907      	ldr	r1, [pc, #28]	@ (81032d0 <__NVIC_EnableIRQ+0x38>)
 81032b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032b6:	095b      	lsrs	r3, r3, #5
 81032b8:	2001      	movs	r0, #1
 81032ba:	fa00 f202 	lsl.w	r2, r0, r2
 81032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81032c2:	bf00      	nop
 81032c4:	370c      	adds	r7, #12
 81032c6:	46bd      	mov	sp, r7
 81032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032cc:	4770      	bx	lr
 81032ce:	bf00      	nop
 81032d0:	e000e100 	.word	0xe000e100

081032d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81032d4:	b480      	push	{r7}
 81032d6:	b083      	sub	sp, #12
 81032d8:	af00      	add	r7, sp, #0
 81032da:	4603      	mov	r3, r0
 81032dc:	6039      	str	r1, [r7, #0]
 81032de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81032e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	db0a      	blt.n	81032fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81032e8:	683b      	ldr	r3, [r7, #0]
 81032ea:	b2da      	uxtb	r2, r3
 81032ec:	490c      	ldr	r1, [pc, #48]	@ (8103320 <__NVIC_SetPriority+0x4c>)
 81032ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032f2:	0112      	lsls	r2, r2, #4
 81032f4:	b2d2      	uxtb	r2, r2
 81032f6:	440b      	add	r3, r1
 81032f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81032fc:	e00a      	b.n	8103314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81032fe:	683b      	ldr	r3, [r7, #0]
 8103300:	b2da      	uxtb	r2, r3
 8103302:	4908      	ldr	r1, [pc, #32]	@ (8103324 <__NVIC_SetPriority+0x50>)
 8103304:	88fb      	ldrh	r3, [r7, #6]
 8103306:	f003 030f 	and.w	r3, r3, #15
 810330a:	3b04      	subs	r3, #4
 810330c:	0112      	lsls	r2, r2, #4
 810330e:	b2d2      	uxtb	r2, r2
 8103310:	440b      	add	r3, r1
 8103312:	761a      	strb	r2, [r3, #24]
}
 8103314:	bf00      	nop
 8103316:	370c      	adds	r7, #12
 8103318:	46bd      	mov	sp, r7
 810331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810331e:	4770      	bx	lr
 8103320:	e000e100 	.word	0xe000e100
 8103324:	e000ed00 	.word	0xe000ed00

08103328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103328:	b480      	push	{r7}
 810332a:	b089      	sub	sp, #36	@ 0x24
 810332c:	af00      	add	r7, sp, #0
 810332e:	60f8      	str	r0, [r7, #12]
 8103330:	60b9      	str	r1, [r7, #8]
 8103332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103334:	68fb      	ldr	r3, [r7, #12]
 8103336:	f003 0307 	and.w	r3, r3, #7
 810333a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810333c:	69fb      	ldr	r3, [r7, #28]
 810333e:	f1c3 0307 	rsb	r3, r3, #7
 8103342:	2b04      	cmp	r3, #4
 8103344:	bf28      	it	cs
 8103346:	2304      	movcs	r3, #4
 8103348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810334a:	69fb      	ldr	r3, [r7, #28]
 810334c:	3304      	adds	r3, #4
 810334e:	2b06      	cmp	r3, #6
 8103350:	d902      	bls.n	8103358 <NVIC_EncodePriority+0x30>
 8103352:	69fb      	ldr	r3, [r7, #28]
 8103354:	3b03      	subs	r3, #3
 8103356:	e000      	b.n	810335a <NVIC_EncodePriority+0x32>
 8103358:	2300      	movs	r3, #0
 810335a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810335c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103360:	69bb      	ldr	r3, [r7, #24]
 8103362:	fa02 f303 	lsl.w	r3, r2, r3
 8103366:	43da      	mvns	r2, r3
 8103368:	68bb      	ldr	r3, [r7, #8]
 810336a:	401a      	ands	r2, r3
 810336c:	697b      	ldr	r3, [r7, #20]
 810336e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8103374:	697b      	ldr	r3, [r7, #20]
 8103376:	fa01 f303 	lsl.w	r3, r1, r3
 810337a:	43d9      	mvns	r1, r3
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103380:	4313      	orrs	r3, r2
         );
}
 8103382:	4618      	mov	r0, r3
 8103384:	3724      	adds	r7, #36	@ 0x24
 8103386:	46bd      	mov	sp, r7
 8103388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810338c:	4770      	bx	lr
	...

08103390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103390:	b580      	push	{r7, lr}
 8103392:	b082      	sub	sp, #8
 8103394:	af00      	add	r7, sp, #0
 8103396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	3b01      	subs	r3, #1
 810339c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81033a0:	d301      	bcc.n	81033a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81033a2:	2301      	movs	r3, #1
 81033a4:	e00f      	b.n	81033c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81033a6:	4a0a      	ldr	r2, [pc, #40]	@ (81033d0 <SysTick_Config+0x40>)
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	3b01      	subs	r3, #1
 81033ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81033ae:	210f      	movs	r1, #15
 81033b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81033b4:	f7ff ff8e 	bl	81032d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81033b8:	4b05      	ldr	r3, [pc, #20]	@ (81033d0 <SysTick_Config+0x40>)
 81033ba:	2200      	movs	r2, #0
 81033bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81033be:	4b04      	ldr	r3, [pc, #16]	@ (81033d0 <SysTick_Config+0x40>)
 81033c0:	2207      	movs	r2, #7
 81033c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81033c4:	2300      	movs	r3, #0
}
 81033c6:	4618      	mov	r0, r3
 81033c8:	3708      	adds	r7, #8
 81033ca:	46bd      	mov	sp, r7
 81033cc:	bd80      	pop	{r7, pc}
 81033ce:	bf00      	nop
 81033d0:	e000e010 	.word	0xe000e010

081033d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81033d4:	b580      	push	{r7, lr}
 81033d6:	b082      	sub	sp, #8
 81033d8:	af00      	add	r7, sp, #0
 81033da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81033dc:	6878      	ldr	r0, [r7, #4]
 81033de:	f7ff ff29 	bl	8103234 <__NVIC_SetPriorityGrouping>
}
 81033e2:	bf00      	nop
 81033e4:	3708      	adds	r7, #8
 81033e6:	46bd      	mov	sp, r7
 81033e8:	bd80      	pop	{r7, pc}

081033ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81033ea:	b580      	push	{r7, lr}
 81033ec:	b086      	sub	sp, #24
 81033ee:	af00      	add	r7, sp, #0
 81033f0:	4603      	mov	r3, r0
 81033f2:	60b9      	str	r1, [r7, #8]
 81033f4:	607a      	str	r2, [r7, #4]
 81033f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81033f8:	f7ff ff40 	bl	810327c <__NVIC_GetPriorityGrouping>
 81033fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81033fe:	687a      	ldr	r2, [r7, #4]
 8103400:	68b9      	ldr	r1, [r7, #8]
 8103402:	6978      	ldr	r0, [r7, #20]
 8103404:	f7ff ff90 	bl	8103328 <NVIC_EncodePriority>
 8103408:	4602      	mov	r2, r0
 810340a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810340e:	4611      	mov	r1, r2
 8103410:	4618      	mov	r0, r3
 8103412:	f7ff ff5f 	bl	81032d4 <__NVIC_SetPriority>
}
 8103416:	bf00      	nop
 8103418:	3718      	adds	r7, #24
 810341a:	46bd      	mov	sp, r7
 810341c:	bd80      	pop	{r7, pc}

0810341e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810341e:	b580      	push	{r7, lr}
 8103420:	b082      	sub	sp, #8
 8103422:	af00      	add	r7, sp, #0
 8103424:	4603      	mov	r3, r0
 8103426:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810342c:	4618      	mov	r0, r3
 810342e:	f7ff ff33 	bl	8103298 <__NVIC_EnableIRQ>
}
 8103432:	bf00      	nop
 8103434:	3708      	adds	r7, #8
 8103436:	46bd      	mov	sp, r7
 8103438:	bd80      	pop	{r7, pc}

0810343a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810343a:	b580      	push	{r7, lr}
 810343c:	b082      	sub	sp, #8
 810343e:	af00      	add	r7, sp, #0
 8103440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8103442:	6878      	ldr	r0, [r7, #4]
 8103444:	f7ff ffa4 	bl	8103390 <SysTick_Config>
 8103448:	4603      	mov	r3, r0
}
 810344a:	4618      	mov	r0, r3
 810344c:	3708      	adds	r7, #8
 810344e:	46bd      	mov	sp, r7
 8103450:	bd80      	pop	{r7, pc}
	...

08103454 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103454:	b480      	push	{r7}
 8103456:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103458:	4b07      	ldr	r3, [pc, #28]	@ (8103478 <HAL_GetCurrentCPUID+0x24>)
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	091b      	lsrs	r3, r3, #4
 810345e:	f003 030f 	and.w	r3, r3, #15
 8103462:	2b07      	cmp	r3, #7
 8103464:	d101      	bne.n	810346a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103466:	2303      	movs	r3, #3
 8103468:	e000      	b.n	810346c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810346a:	2301      	movs	r3, #1
  }
}
 810346c:	4618      	mov	r0, r3
 810346e:	46bd      	mov	sp, r7
 8103470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103474:	4770      	bx	lr
 8103476:	bf00      	nop
 8103478:	e000ed00 	.word	0xe000ed00

0810347c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810347c:	b480      	push	{r7}
 810347e:	b089      	sub	sp, #36	@ 0x24
 8103480:	af00      	add	r7, sp, #0
 8103482:	6078      	str	r0, [r7, #4]
 8103484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103486:	2300      	movs	r3, #0
 8103488:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810348a:	4b89      	ldr	r3, [pc, #548]	@ (81036b0 <HAL_GPIO_Init+0x234>)
 810348c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810348e:	e194      	b.n	81037ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103490:	683b      	ldr	r3, [r7, #0]
 8103492:	681a      	ldr	r2, [r3, #0]
 8103494:	2101      	movs	r1, #1
 8103496:	69fb      	ldr	r3, [r7, #28]
 8103498:	fa01 f303 	lsl.w	r3, r1, r3
 810349c:	4013      	ands	r3, r2
 810349e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81034a0:	693b      	ldr	r3, [r7, #16]
 81034a2:	2b00      	cmp	r3, #0
 81034a4:	f000 8186 	beq.w	81037b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81034a8:	683b      	ldr	r3, [r7, #0]
 81034aa:	685b      	ldr	r3, [r3, #4]
 81034ac:	f003 0303 	and.w	r3, r3, #3
 81034b0:	2b01      	cmp	r3, #1
 81034b2:	d005      	beq.n	81034c0 <HAL_GPIO_Init+0x44>
 81034b4:	683b      	ldr	r3, [r7, #0]
 81034b6:	685b      	ldr	r3, [r3, #4]
 81034b8:	f003 0303 	and.w	r3, r3, #3
 81034bc:	2b02      	cmp	r3, #2
 81034be:	d130      	bne.n	8103522 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	689b      	ldr	r3, [r3, #8]
 81034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81034c6:	69fb      	ldr	r3, [r7, #28]
 81034c8:	005b      	lsls	r3, r3, #1
 81034ca:	2203      	movs	r2, #3
 81034cc:	fa02 f303 	lsl.w	r3, r2, r3
 81034d0:	43db      	mvns	r3, r3
 81034d2:	69ba      	ldr	r2, [r7, #24]
 81034d4:	4013      	ands	r3, r2
 81034d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81034d8:	683b      	ldr	r3, [r7, #0]
 81034da:	68da      	ldr	r2, [r3, #12]
 81034dc:	69fb      	ldr	r3, [r7, #28]
 81034de:	005b      	lsls	r3, r3, #1
 81034e0:	fa02 f303 	lsl.w	r3, r2, r3
 81034e4:	69ba      	ldr	r2, [r7, #24]
 81034e6:	4313      	orrs	r3, r2
 81034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	69ba      	ldr	r2, [r7, #24]
 81034ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	685b      	ldr	r3, [r3, #4]
 81034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81034f6:	2201      	movs	r2, #1
 81034f8:	69fb      	ldr	r3, [r7, #28]
 81034fa:	fa02 f303 	lsl.w	r3, r2, r3
 81034fe:	43db      	mvns	r3, r3
 8103500:	69ba      	ldr	r2, [r7, #24]
 8103502:	4013      	ands	r3, r2
 8103504:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103506:	683b      	ldr	r3, [r7, #0]
 8103508:	685b      	ldr	r3, [r3, #4]
 810350a:	091b      	lsrs	r3, r3, #4
 810350c:	f003 0201 	and.w	r2, r3, #1
 8103510:	69fb      	ldr	r3, [r7, #28]
 8103512:	fa02 f303 	lsl.w	r3, r2, r3
 8103516:	69ba      	ldr	r2, [r7, #24]
 8103518:	4313      	orrs	r3, r2
 810351a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	69ba      	ldr	r2, [r7, #24]
 8103520:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8103522:	683b      	ldr	r3, [r7, #0]
 8103524:	685b      	ldr	r3, [r3, #4]
 8103526:	f003 0303 	and.w	r3, r3, #3
 810352a:	2b03      	cmp	r3, #3
 810352c:	d017      	beq.n	810355e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	68db      	ldr	r3, [r3, #12]
 8103532:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103534:	69fb      	ldr	r3, [r7, #28]
 8103536:	005b      	lsls	r3, r3, #1
 8103538:	2203      	movs	r2, #3
 810353a:	fa02 f303 	lsl.w	r3, r2, r3
 810353e:	43db      	mvns	r3, r3
 8103540:	69ba      	ldr	r2, [r7, #24]
 8103542:	4013      	ands	r3, r2
 8103544:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103546:	683b      	ldr	r3, [r7, #0]
 8103548:	689a      	ldr	r2, [r3, #8]
 810354a:	69fb      	ldr	r3, [r7, #28]
 810354c:	005b      	lsls	r3, r3, #1
 810354e:	fa02 f303 	lsl.w	r3, r2, r3
 8103552:	69ba      	ldr	r2, [r7, #24]
 8103554:	4313      	orrs	r3, r2
 8103556:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	69ba      	ldr	r2, [r7, #24]
 810355c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810355e:	683b      	ldr	r3, [r7, #0]
 8103560:	685b      	ldr	r3, [r3, #4]
 8103562:	f003 0303 	and.w	r3, r3, #3
 8103566:	2b02      	cmp	r3, #2
 8103568:	d123      	bne.n	81035b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810356a:	69fb      	ldr	r3, [r7, #28]
 810356c:	08da      	lsrs	r2, r3, #3
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	3208      	adds	r2, #8
 8103572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103578:	69fb      	ldr	r3, [r7, #28]
 810357a:	f003 0307 	and.w	r3, r3, #7
 810357e:	009b      	lsls	r3, r3, #2
 8103580:	220f      	movs	r2, #15
 8103582:	fa02 f303 	lsl.w	r3, r2, r3
 8103586:	43db      	mvns	r3, r3
 8103588:	69ba      	ldr	r2, [r7, #24]
 810358a:	4013      	ands	r3, r2
 810358c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810358e:	683b      	ldr	r3, [r7, #0]
 8103590:	691a      	ldr	r2, [r3, #16]
 8103592:	69fb      	ldr	r3, [r7, #28]
 8103594:	f003 0307 	and.w	r3, r3, #7
 8103598:	009b      	lsls	r3, r3, #2
 810359a:	fa02 f303 	lsl.w	r3, r2, r3
 810359e:	69ba      	ldr	r2, [r7, #24]
 81035a0:	4313      	orrs	r3, r2
 81035a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81035a4:	69fb      	ldr	r3, [r7, #28]
 81035a6:	08da      	lsrs	r2, r3, #3
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	3208      	adds	r2, #8
 81035ac:	69b9      	ldr	r1, [r7, #24]
 81035ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	681b      	ldr	r3, [r3, #0]
 81035b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81035b8:	69fb      	ldr	r3, [r7, #28]
 81035ba:	005b      	lsls	r3, r3, #1
 81035bc:	2203      	movs	r2, #3
 81035be:	fa02 f303 	lsl.w	r3, r2, r3
 81035c2:	43db      	mvns	r3, r3
 81035c4:	69ba      	ldr	r2, [r7, #24]
 81035c6:	4013      	ands	r3, r2
 81035c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81035ca:	683b      	ldr	r3, [r7, #0]
 81035cc:	685b      	ldr	r3, [r3, #4]
 81035ce:	f003 0203 	and.w	r2, r3, #3
 81035d2:	69fb      	ldr	r3, [r7, #28]
 81035d4:	005b      	lsls	r3, r3, #1
 81035d6:	fa02 f303 	lsl.w	r3, r2, r3
 81035da:	69ba      	ldr	r2, [r7, #24]
 81035dc:	4313      	orrs	r3, r2
 81035de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	69ba      	ldr	r2, [r7, #24]
 81035e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81035e6:	683b      	ldr	r3, [r7, #0]
 81035e8:	685b      	ldr	r3, [r3, #4]
 81035ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81035ee:	2b00      	cmp	r3, #0
 81035f0:	f000 80e0 	beq.w	81037b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81035f4:	4b2f      	ldr	r3, [pc, #188]	@ (81036b4 <HAL_GPIO_Init+0x238>)
 81035f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81035fa:	4a2e      	ldr	r2, [pc, #184]	@ (81036b4 <HAL_GPIO_Init+0x238>)
 81035fc:	f043 0302 	orr.w	r3, r3, #2
 8103600:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8103604:	4b2b      	ldr	r3, [pc, #172]	@ (81036b4 <HAL_GPIO_Init+0x238>)
 8103606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810360a:	f003 0302 	and.w	r3, r3, #2
 810360e:	60fb      	str	r3, [r7, #12]
 8103610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103612:	4a29      	ldr	r2, [pc, #164]	@ (81036b8 <HAL_GPIO_Init+0x23c>)
 8103614:	69fb      	ldr	r3, [r7, #28]
 8103616:	089b      	lsrs	r3, r3, #2
 8103618:	3302      	adds	r3, #2
 810361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810361e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103620:	69fb      	ldr	r3, [r7, #28]
 8103622:	f003 0303 	and.w	r3, r3, #3
 8103626:	009b      	lsls	r3, r3, #2
 8103628:	220f      	movs	r2, #15
 810362a:	fa02 f303 	lsl.w	r3, r2, r3
 810362e:	43db      	mvns	r3, r3
 8103630:	69ba      	ldr	r2, [r7, #24]
 8103632:	4013      	ands	r3, r2
 8103634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	4a20      	ldr	r2, [pc, #128]	@ (81036bc <HAL_GPIO_Init+0x240>)
 810363a:	4293      	cmp	r3, r2
 810363c:	d052      	beq.n	81036e4 <HAL_GPIO_Init+0x268>
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	4a1f      	ldr	r2, [pc, #124]	@ (81036c0 <HAL_GPIO_Init+0x244>)
 8103642:	4293      	cmp	r3, r2
 8103644:	d031      	beq.n	81036aa <HAL_GPIO_Init+0x22e>
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	4a1e      	ldr	r2, [pc, #120]	@ (81036c4 <HAL_GPIO_Init+0x248>)
 810364a:	4293      	cmp	r3, r2
 810364c:	d02b      	beq.n	81036a6 <HAL_GPIO_Init+0x22a>
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	4a1d      	ldr	r2, [pc, #116]	@ (81036c8 <HAL_GPIO_Init+0x24c>)
 8103652:	4293      	cmp	r3, r2
 8103654:	d025      	beq.n	81036a2 <HAL_GPIO_Init+0x226>
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	4a1c      	ldr	r2, [pc, #112]	@ (81036cc <HAL_GPIO_Init+0x250>)
 810365a:	4293      	cmp	r3, r2
 810365c:	d01f      	beq.n	810369e <HAL_GPIO_Init+0x222>
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	4a1b      	ldr	r2, [pc, #108]	@ (81036d0 <HAL_GPIO_Init+0x254>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d019      	beq.n	810369a <HAL_GPIO_Init+0x21e>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	4a1a      	ldr	r2, [pc, #104]	@ (81036d4 <HAL_GPIO_Init+0x258>)
 810366a:	4293      	cmp	r3, r2
 810366c:	d013      	beq.n	8103696 <HAL_GPIO_Init+0x21a>
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	4a19      	ldr	r2, [pc, #100]	@ (81036d8 <HAL_GPIO_Init+0x25c>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d00d      	beq.n	8103692 <HAL_GPIO_Init+0x216>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	4a18      	ldr	r2, [pc, #96]	@ (81036dc <HAL_GPIO_Init+0x260>)
 810367a:	4293      	cmp	r3, r2
 810367c:	d007      	beq.n	810368e <HAL_GPIO_Init+0x212>
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	4a17      	ldr	r2, [pc, #92]	@ (81036e0 <HAL_GPIO_Init+0x264>)
 8103682:	4293      	cmp	r3, r2
 8103684:	d101      	bne.n	810368a <HAL_GPIO_Init+0x20e>
 8103686:	2309      	movs	r3, #9
 8103688:	e02d      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 810368a:	230a      	movs	r3, #10
 810368c:	e02b      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 810368e:	2308      	movs	r3, #8
 8103690:	e029      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 8103692:	2307      	movs	r3, #7
 8103694:	e027      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 8103696:	2306      	movs	r3, #6
 8103698:	e025      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 810369a:	2305      	movs	r3, #5
 810369c:	e023      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 810369e:	2304      	movs	r3, #4
 81036a0:	e021      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 81036a2:	2303      	movs	r3, #3
 81036a4:	e01f      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 81036a6:	2302      	movs	r3, #2
 81036a8:	e01d      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 81036aa:	2301      	movs	r3, #1
 81036ac:	e01b      	b.n	81036e6 <HAL_GPIO_Init+0x26a>
 81036ae:	bf00      	nop
 81036b0:	580000c0 	.word	0x580000c0
 81036b4:	58024400 	.word	0x58024400
 81036b8:	58000400 	.word	0x58000400
 81036bc:	58020000 	.word	0x58020000
 81036c0:	58020400 	.word	0x58020400
 81036c4:	58020800 	.word	0x58020800
 81036c8:	58020c00 	.word	0x58020c00
 81036cc:	58021000 	.word	0x58021000
 81036d0:	58021400 	.word	0x58021400
 81036d4:	58021800 	.word	0x58021800
 81036d8:	58021c00 	.word	0x58021c00
 81036dc:	58022000 	.word	0x58022000
 81036e0:	58022400 	.word	0x58022400
 81036e4:	2300      	movs	r3, #0
 81036e6:	69fa      	ldr	r2, [r7, #28]
 81036e8:	f002 0203 	and.w	r2, r2, #3
 81036ec:	0092      	lsls	r2, r2, #2
 81036ee:	4093      	lsls	r3, r2
 81036f0:	69ba      	ldr	r2, [r7, #24]
 81036f2:	4313      	orrs	r3, r2
 81036f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81036f6:	4938      	ldr	r1, [pc, #224]	@ (81037d8 <HAL_GPIO_Init+0x35c>)
 81036f8:	69fb      	ldr	r3, [r7, #28]
 81036fa:	089b      	lsrs	r3, r3, #2
 81036fc:	3302      	adds	r3, #2
 81036fe:	69ba      	ldr	r2, [r7, #24]
 8103700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810370c:	693b      	ldr	r3, [r7, #16]
 810370e:	43db      	mvns	r3, r3
 8103710:	69ba      	ldr	r2, [r7, #24]
 8103712:	4013      	ands	r3, r2
 8103714:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103716:	683b      	ldr	r3, [r7, #0]
 8103718:	685b      	ldr	r3, [r3, #4]
 810371a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810371e:	2b00      	cmp	r3, #0
 8103720:	d003      	beq.n	810372a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103722:	69ba      	ldr	r2, [r7, #24]
 8103724:	693b      	ldr	r3, [r7, #16]
 8103726:	4313      	orrs	r3, r2
 8103728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810372a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810372e:	69bb      	ldr	r3, [r7, #24]
 8103730:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8103736:	685b      	ldr	r3, [r3, #4]
 8103738:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810373a:	693b      	ldr	r3, [r7, #16]
 810373c:	43db      	mvns	r3, r3
 810373e:	69ba      	ldr	r2, [r7, #24]
 8103740:	4013      	ands	r3, r2
 8103742:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103744:	683b      	ldr	r3, [r7, #0]
 8103746:	685b      	ldr	r3, [r3, #4]
 8103748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810374c:	2b00      	cmp	r3, #0
 810374e:	d003      	beq.n	8103758 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103750:	69ba      	ldr	r2, [r7, #24]
 8103752:	693b      	ldr	r3, [r7, #16]
 8103754:	4313      	orrs	r3, r2
 8103756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810375c:	69bb      	ldr	r3, [r7, #24]
 810375e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103760:	697b      	ldr	r3, [r7, #20]
 8103762:	685b      	ldr	r3, [r3, #4]
 8103764:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103766:	693b      	ldr	r3, [r7, #16]
 8103768:	43db      	mvns	r3, r3
 810376a:	69ba      	ldr	r2, [r7, #24]
 810376c:	4013      	ands	r3, r2
 810376e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103770:	683b      	ldr	r3, [r7, #0]
 8103772:	685b      	ldr	r3, [r3, #4]
 8103774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103778:	2b00      	cmp	r3, #0
 810377a:	d003      	beq.n	8103784 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810377c:	69ba      	ldr	r2, [r7, #24]
 810377e:	693b      	ldr	r3, [r7, #16]
 8103780:	4313      	orrs	r3, r2
 8103782:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103784:	697b      	ldr	r3, [r7, #20]
 8103786:	69ba      	ldr	r2, [r7, #24]
 8103788:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810378a:	697b      	ldr	r3, [r7, #20]
 810378c:	681b      	ldr	r3, [r3, #0]
 810378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103790:	693b      	ldr	r3, [r7, #16]
 8103792:	43db      	mvns	r3, r3
 8103794:	69ba      	ldr	r2, [r7, #24]
 8103796:	4013      	ands	r3, r2
 8103798:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810379a:	683b      	ldr	r3, [r7, #0]
 810379c:	685b      	ldr	r3, [r3, #4]
 810379e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81037a2:	2b00      	cmp	r3, #0
 81037a4:	d003      	beq.n	81037ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81037a6:	69ba      	ldr	r2, [r7, #24]
 81037a8:	693b      	ldr	r3, [r7, #16]
 81037aa:	4313      	orrs	r3, r2
 81037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81037ae:	697b      	ldr	r3, [r7, #20]
 81037b0:	69ba      	ldr	r2, [r7, #24]
 81037b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81037b4:	69fb      	ldr	r3, [r7, #28]
 81037b6:	3301      	adds	r3, #1
 81037b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81037ba:	683b      	ldr	r3, [r7, #0]
 81037bc:	681a      	ldr	r2, [r3, #0]
 81037be:	69fb      	ldr	r3, [r7, #28]
 81037c0:	fa22 f303 	lsr.w	r3, r2, r3
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	f47f ae63 	bne.w	8103490 <HAL_GPIO_Init+0x14>
  }
}
 81037ca:	bf00      	nop
 81037cc:	bf00      	nop
 81037ce:	3724      	adds	r7, #36	@ 0x24
 81037d0:	46bd      	mov	sp, r7
 81037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037d6:	4770      	bx	lr
 81037d8:	58000400 	.word	0x58000400

081037dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81037dc:	b480      	push	{r7}
 81037de:	b083      	sub	sp, #12
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81037e4:	4b05      	ldr	r3, [pc, #20]	@ (81037fc <HAL_HSEM_ActivateNotification+0x20>)
 81037e6:	681a      	ldr	r2, [r3, #0]
 81037e8:	4904      	ldr	r1, [pc, #16]	@ (81037fc <HAL_HSEM_ActivateNotification+0x20>)
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	4313      	orrs	r3, r2
 81037ee:	600b      	str	r3, [r1, #0]
#endif
}
 81037f0:	bf00      	nop
 81037f2:	370c      	adds	r7, #12
 81037f4:	46bd      	mov	sp, r7
 81037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037fa:	4770      	bx	lr
 81037fc:	58026510 	.word	0x58026510

08103800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103800:	b580      	push	{r7, lr}
 8103802:	b082      	sub	sp, #8
 8103804:	af00      	add	r7, sp, #0
 8103806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	2b00      	cmp	r3, #0
 810380c:	d101      	bne.n	8103812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810380e:	2301      	movs	r3, #1
 8103810:	e08d      	b.n	810392e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103818:	b2db      	uxtb	r3, r3
 810381a:	2b00      	cmp	r3, #0
 810381c:	d106      	bne.n	810382c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	2200      	movs	r2, #0
 8103822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103826:	6878      	ldr	r0, [r7, #4]
 8103828:	f7ff f920 	bl	8102a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	2224      	movs	r2, #36	@ 0x24
 8103830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	681a      	ldr	r2, [r3, #0]
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	f022 0201 	bic.w	r2, r2, #1
 8103842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	685a      	ldr	r2, [r3, #4]
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8103850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	681b      	ldr	r3, [r3, #0]
 8103856:	689a      	ldr	r2, [r3, #8]
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8103860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	68db      	ldr	r3, [r3, #12]
 8103866:	2b01      	cmp	r3, #1
 8103868:	d107      	bne.n	810387a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	689a      	ldr	r2, [r3, #8]
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8103876:	609a      	str	r2, [r3, #8]
 8103878:	e006      	b.n	8103888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	689a      	ldr	r2, [r3, #8]
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	681b      	ldr	r3, [r3, #0]
 8103882:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8103886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	68db      	ldr	r3, [r3, #12]
 810388c:	2b02      	cmp	r3, #2
 810388e:	d108      	bne.n	81038a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	685a      	ldr	r2, [r3, #4]
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	681b      	ldr	r3, [r3, #0]
 810389a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810389e:	605a      	str	r2, [r3, #4]
 81038a0:	e007      	b.n	81038b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	685a      	ldr	r2, [r3, #4]
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 81038b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	685b      	ldr	r3, [r3, #4]
 81038b8:	687a      	ldr	r2, [r7, #4]
 81038ba:	6812      	ldr	r2, [r2, #0]
 81038bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81038c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 81038c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	68da      	ldr	r2, [r3, #12]
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81038d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	691a      	ldr	r2, [r3, #16]
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	695b      	ldr	r3, [r3, #20]
 81038de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	699b      	ldr	r3, [r3, #24]
 81038e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	430a      	orrs	r2, r1
 81038ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	69d9      	ldr	r1, [r3, #28]
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	6a1a      	ldr	r2, [r3, #32]
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	430a      	orrs	r2, r1
 81038fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	681a      	ldr	r2, [r3, #0]
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	681b      	ldr	r3, [r3, #0]
 810390a:	f042 0201 	orr.w	r2, r2, #1
 810390e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	2200      	movs	r2, #0
 8103914:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	2220      	movs	r2, #32
 810391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	2200      	movs	r2, #0
 8103922:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	2200      	movs	r2, #0
 8103928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 810392c:	2300      	movs	r3, #0
}
 810392e:	4618      	mov	r0, r3
 8103930:	3708      	adds	r7, #8
 8103932:	46bd      	mov	sp, r7
 8103934:	bd80      	pop	{r7, pc}
	...

08103938 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8103938:	b580      	push	{r7, lr}
 810393a:	b088      	sub	sp, #32
 810393c:	af02      	add	r7, sp, #8
 810393e:	60f8      	str	r0, [r7, #12]
 8103940:	607a      	str	r2, [r7, #4]
 8103942:	461a      	mov	r2, r3
 8103944:	460b      	mov	r3, r1
 8103946:	817b      	strh	r3, [r7, #10]
 8103948:	4613      	mov	r3, r2
 810394a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 810394c:	68fb      	ldr	r3, [r7, #12]
 810394e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103952:	b2db      	uxtb	r3, r3
 8103954:	2b20      	cmp	r3, #32
 8103956:	f040 80fd 	bne.w	8103b54 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810395a:	68fb      	ldr	r3, [r7, #12]
 810395c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103960:	2b01      	cmp	r3, #1
 8103962:	d101      	bne.n	8103968 <HAL_I2C_Master_Transmit+0x30>
 8103964:	2302      	movs	r3, #2
 8103966:	e0f6      	b.n	8103b56 <HAL_I2C_Master_Transmit+0x21e>
 8103968:	68fb      	ldr	r3, [r7, #12]
 810396a:	2201      	movs	r2, #1
 810396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103970:	f7ff fc30 	bl	81031d4 <HAL_GetTick>
 8103974:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103976:	693b      	ldr	r3, [r7, #16]
 8103978:	9300      	str	r3, [sp, #0]
 810397a:	2319      	movs	r3, #25
 810397c:	2201      	movs	r2, #1
 810397e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8103982:	68f8      	ldr	r0, [r7, #12]
 8103984:	f000 fa24 	bl	8103dd0 <I2C_WaitOnFlagUntilTimeout>
 8103988:	4603      	mov	r3, r0
 810398a:	2b00      	cmp	r3, #0
 810398c:	d001      	beq.n	8103992 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 810398e:	2301      	movs	r3, #1
 8103990:	e0e1      	b.n	8103b56 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103992:	68fb      	ldr	r3, [r7, #12]
 8103994:	2221      	movs	r2, #33	@ 0x21
 8103996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810399a:	68fb      	ldr	r3, [r7, #12]
 810399c:	2210      	movs	r2, #16
 810399e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81039a2:	68fb      	ldr	r3, [r7, #12]
 81039a4:	2200      	movs	r2, #0
 81039a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81039a8:	68fb      	ldr	r3, [r7, #12]
 81039aa:	687a      	ldr	r2, [r7, #4]
 81039ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81039ae:	68fb      	ldr	r3, [r7, #12]
 81039b0:	893a      	ldrh	r2, [r7, #8]
 81039b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81039b4:	68fb      	ldr	r3, [r7, #12]
 81039b6:	2200      	movs	r2, #0
 81039b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81039be:	b29b      	uxth	r3, r3
 81039c0:	2bff      	cmp	r3, #255	@ 0xff
 81039c2:	d906      	bls.n	81039d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81039c4:	68fb      	ldr	r3, [r7, #12]
 81039c6:	22ff      	movs	r2, #255	@ 0xff
 81039c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 81039ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81039ce:	617b      	str	r3, [r7, #20]
 81039d0:	e007      	b.n	81039e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81039d2:	68fb      	ldr	r3, [r7, #12]
 81039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81039d6:	b29a      	uxth	r2, r3
 81039d8:	68fb      	ldr	r3, [r7, #12]
 81039da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 81039dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81039e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 81039e2:	68fb      	ldr	r3, [r7, #12]
 81039e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81039e6:	2b00      	cmp	r3, #0
 81039e8:	d024      	beq.n	8103a34 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81039ea:	68fb      	ldr	r3, [r7, #12]
 81039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81039ee:	781a      	ldrb	r2, [r3, #0]
 81039f0:	68fb      	ldr	r3, [r7, #12]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81039f6:	68fb      	ldr	r3, [r7, #12]
 81039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81039fa:	1c5a      	adds	r2, r3, #1
 81039fc:	68fb      	ldr	r3, [r7, #12]
 81039fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8103a00:	68fb      	ldr	r3, [r7, #12]
 8103a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103a04:	b29b      	uxth	r3, r3
 8103a06:	3b01      	subs	r3, #1
 8103a08:	b29a      	uxth	r2, r3
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8103a0e:	68fb      	ldr	r3, [r7, #12]
 8103a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a12:	3b01      	subs	r3, #1
 8103a14:	b29a      	uxth	r2, r3
 8103a16:	68fb      	ldr	r3, [r7, #12]
 8103a18:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8103a1a:	68fb      	ldr	r3, [r7, #12]
 8103a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a1e:	b2db      	uxtb	r3, r3
 8103a20:	3301      	adds	r3, #1
 8103a22:	b2da      	uxtb	r2, r3
 8103a24:	8979      	ldrh	r1, [r7, #10]
 8103a26:	4b4e      	ldr	r3, [pc, #312]	@ (8103b60 <HAL_I2C_Master_Transmit+0x228>)
 8103a28:	9300      	str	r3, [sp, #0]
 8103a2a:	697b      	ldr	r3, [r7, #20]
 8103a2c:	68f8      	ldr	r0, [r7, #12]
 8103a2e:	f000 fc1f 	bl	8104270 <I2C_TransferConfig>
 8103a32:	e066      	b.n	8103b02 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8103a34:	68fb      	ldr	r3, [r7, #12]
 8103a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a38:	b2da      	uxtb	r2, r3
 8103a3a:	8979      	ldrh	r1, [r7, #10]
 8103a3c:	4b48      	ldr	r3, [pc, #288]	@ (8103b60 <HAL_I2C_Master_Transmit+0x228>)
 8103a3e:	9300      	str	r3, [sp, #0]
 8103a40:	697b      	ldr	r3, [r7, #20]
 8103a42:	68f8      	ldr	r0, [r7, #12]
 8103a44:	f000 fc14 	bl	8104270 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8103a48:	e05b      	b.n	8103b02 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103a4a:	693a      	ldr	r2, [r7, #16]
 8103a4c:	6a39      	ldr	r1, [r7, #32]
 8103a4e:	68f8      	ldr	r0, [r7, #12]
 8103a50:	f000 fa17 	bl	8103e82 <I2C_WaitOnTXISFlagUntilTimeout>
 8103a54:	4603      	mov	r3, r0
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d001      	beq.n	8103a5e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8103a5a:	2301      	movs	r3, #1
 8103a5c:	e07b      	b.n	8103b56 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103a5e:	68fb      	ldr	r3, [r7, #12]
 8103a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103a62:	781a      	ldrb	r2, [r3, #0]
 8103a64:	68fb      	ldr	r3, [r7, #12]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103a6a:	68fb      	ldr	r3, [r7, #12]
 8103a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103a6e:	1c5a      	adds	r2, r3, #1
 8103a70:	68fb      	ldr	r3, [r7, #12]
 8103a72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8103a74:	68fb      	ldr	r3, [r7, #12]
 8103a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103a78:	b29b      	uxth	r3, r3
 8103a7a:	3b01      	subs	r3, #1
 8103a7c:	b29a      	uxth	r2, r3
 8103a7e:	68fb      	ldr	r3, [r7, #12]
 8103a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8103a82:	68fb      	ldr	r3, [r7, #12]
 8103a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a86:	3b01      	subs	r3, #1
 8103a88:	b29a      	uxth	r2, r3
 8103a8a:	68fb      	ldr	r3, [r7, #12]
 8103a8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103a8e:	68fb      	ldr	r3, [r7, #12]
 8103a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103a92:	b29b      	uxth	r3, r3
 8103a94:	2b00      	cmp	r3, #0
 8103a96:	d034      	beq.n	8103b02 <HAL_I2C_Master_Transmit+0x1ca>
 8103a98:	68fb      	ldr	r3, [r7, #12]
 8103a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103a9c:	2b00      	cmp	r3, #0
 8103a9e:	d130      	bne.n	8103b02 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103aa0:	693b      	ldr	r3, [r7, #16]
 8103aa2:	9300      	str	r3, [sp, #0]
 8103aa4:	6a3b      	ldr	r3, [r7, #32]
 8103aa6:	2200      	movs	r2, #0
 8103aa8:	2180      	movs	r1, #128	@ 0x80
 8103aaa:	68f8      	ldr	r0, [r7, #12]
 8103aac:	f000 f990 	bl	8103dd0 <I2C_WaitOnFlagUntilTimeout>
 8103ab0:	4603      	mov	r3, r0
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d001      	beq.n	8103aba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8103ab6:	2301      	movs	r3, #1
 8103ab8:	e04d      	b.n	8103b56 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103aba:	68fb      	ldr	r3, [r7, #12]
 8103abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103abe:	b29b      	uxth	r3, r3
 8103ac0:	2bff      	cmp	r3, #255	@ 0xff
 8103ac2:	d90e      	bls.n	8103ae2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103ac4:	68fb      	ldr	r3, [r7, #12]
 8103ac6:	22ff      	movs	r2, #255	@ 0xff
 8103ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103aca:	68fb      	ldr	r3, [r7, #12]
 8103acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103ace:	b2da      	uxtb	r2, r3
 8103ad0:	8979      	ldrh	r1, [r7, #10]
 8103ad2:	2300      	movs	r3, #0
 8103ad4:	9300      	str	r3, [sp, #0]
 8103ad6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103ada:	68f8      	ldr	r0, [r7, #12]
 8103adc:	f000 fbc8 	bl	8104270 <I2C_TransferConfig>
 8103ae0:	e00f      	b.n	8103b02 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103ae2:	68fb      	ldr	r3, [r7, #12]
 8103ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103ae6:	b29a      	uxth	r2, r3
 8103ae8:	68fb      	ldr	r3, [r7, #12]
 8103aea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103aec:	68fb      	ldr	r3, [r7, #12]
 8103aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103af0:	b2da      	uxtb	r2, r3
 8103af2:	8979      	ldrh	r1, [r7, #10]
 8103af4:	2300      	movs	r3, #0
 8103af6:	9300      	str	r3, [sp, #0]
 8103af8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103afc:	68f8      	ldr	r0, [r7, #12]
 8103afe:	f000 fbb7 	bl	8104270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103b02:	68fb      	ldr	r3, [r7, #12]
 8103b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103b06:	b29b      	uxth	r3, r3
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d19e      	bne.n	8103a4a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103b0c:	693a      	ldr	r2, [r7, #16]
 8103b0e:	6a39      	ldr	r1, [r7, #32]
 8103b10:	68f8      	ldr	r0, [r7, #12]
 8103b12:	f000 f9fd 	bl	8103f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103b16:	4603      	mov	r3, r0
 8103b18:	2b00      	cmp	r3, #0
 8103b1a:	d001      	beq.n	8103b20 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8103b1c:	2301      	movs	r3, #1
 8103b1e:	e01a      	b.n	8103b56 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103b20:	68fb      	ldr	r3, [r7, #12]
 8103b22:	681b      	ldr	r3, [r3, #0]
 8103b24:	2220      	movs	r2, #32
 8103b26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103b28:	68fb      	ldr	r3, [r7, #12]
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	6859      	ldr	r1, [r3, #4]
 8103b2e:	68fb      	ldr	r3, [r7, #12]
 8103b30:	681a      	ldr	r2, [r3, #0]
 8103b32:	4b0c      	ldr	r3, [pc, #48]	@ (8103b64 <HAL_I2C_Master_Transmit+0x22c>)
 8103b34:	400b      	ands	r3, r1
 8103b36:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103b38:	68fb      	ldr	r3, [r7, #12]
 8103b3a:	2220      	movs	r2, #32
 8103b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103b40:	68fb      	ldr	r3, [r7, #12]
 8103b42:	2200      	movs	r2, #0
 8103b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103b48:	68fb      	ldr	r3, [r7, #12]
 8103b4a:	2200      	movs	r2, #0
 8103b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103b50:	2300      	movs	r3, #0
 8103b52:	e000      	b.n	8103b56 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8103b54:	2302      	movs	r3, #2
  }
}
 8103b56:	4618      	mov	r0, r3
 8103b58:	3718      	adds	r7, #24
 8103b5a:	46bd      	mov	sp, r7
 8103b5c:	bd80      	pop	{r7, pc}
 8103b5e:	bf00      	nop
 8103b60:	80002000 	.word	0x80002000
 8103b64:	fe00e800 	.word	0xfe00e800

08103b68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8103b68:	b580      	push	{r7, lr}
 8103b6a:	b088      	sub	sp, #32
 8103b6c:	af02      	add	r7, sp, #8
 8103b6e:	60f8      	str	r0, [r7, #12]
 8103b70:	607a      	str	r2, [r7, #4]
 8103b72:	461a      	mov	r2, r3
 8103b74:	460b      	mov	r3, r1
 8103b76:	817b      	strh	r3, [r7, #10]
 8103b78:	4613      	mov	r3, r2
 8103b7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103b7c:	68fb      	ldr	r3, [r7, #12]
 8103b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103b82:	b2db      	uxtb	r3, r3
 8103b84:	2b20      	cmp	r3, #32
 8103b86:	f040 80db 	bne.w	8103d40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103b8a:	68fb      	ldr	r3, [r7, #12]
 8103b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103b90:	2b01      	cmp	r3, #1
 8103b92:	d101      	bne.n	8103b98 <HAL_I2C_Master_Receive+0x30>
 8103b94:	2302      	movs	r3, #2
 8103b96:	e0d4      	b.n	8103d42 <HAL_I2C_Master_Receive+0x1da>
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	2201      	movs	r2, #1
 8103b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103ba0:	f7ff fb18 	bl	81031d4 <HAL_GetTick>
 8103ba4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103ba6:	697b      	ldr	r3, [r7, #20]
 8103ba8:	9300      	str	r3, [sp, #0]
 8103baa:	2319      	movs	r3, #25
 8103bac:	2201      	movs	r2, #1
 8103bae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8103bb2:	68f8      	ldr	r0, [r7, #12]
 8103bb4:	f000 f90c 	bl	8103dd0 <I2C_WaitOnFlagUntilTimeout>
 8103bb8:	4603      	mov	r3, r0
 8103bba:	2b00      	cmp	r3, #0
 8103bbc:	d001      	beq.n	8103bc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8103bbe:	2301      	movs	r3, #1
 8103bc0:	e0bf      	b.n	8103d42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103bc2:	68fb      	ldr	r3, [r7, #12]
 8103bc4:	2222      	movs	r2, #34	@ 0x22
 8103bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103bca:	68fb      	ldr	r3, [r7, #12]
 8103bcc:	2210      	movs	r2, #16
 8103bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	2200      	movs	r2, #0
 8103bd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103bd8:	68fb      	ldr	r3, [r7, #12]
 8103bda:	687a      	ldr	r2, [r7, #4]
 8103bdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8103bde:	68fb      	ldr	r3, [r7, #12]
 8103be0:	893a      	ldrh	r2, [r7, #8]
 8103be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8103be4:	68fb      	ldr	r3, [r7, #12]
 8103be6:	2200      	movs	r2, #0
 8103be8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103bee:	b29b      	uxth	r3, r3
 8103bf0:	2bff      	cmp	r3, #255	@ 0xff
 8103bf2:	d90e      	bls.n	8103c12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103bf4:	68fb      	ldr	r3, [r7, #12]
 8103bf6:	22ff      	movs	r2, #255	@ 0xff
 8103bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103bfa:	68fb      	ldr	r3, [r7, #12]
 8103bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103bfe:	b2da      	uxtb	r2, r3
 8103c00:	8979      	ldrh	r1, [r7, #10]
 8103c02:	4b52      	ldr	r3, [pc, #328]	@ (8103d4c <HAL_I2C_Master_Receive+0x1e4>)
 8103c04:	9300      	str	r3, [sp, #0]
 8103c06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103c0a:	68f8      	ldr	r0, [r7, #12]
 8103c0c:	f000 fb30 	bl	8104270 <I2C_TransferConfig>
 8103c10:	e06d      	b.n	8103cee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103c12:	68fb      	ldr	r3, [r7, #12]
 8103c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c16:	b29a      	uxth	r2, r3
 8103c18:	68fb      	ldr	r3, [r7, #12]
 8103c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103c1c:	68fb      	ldr	r3, [r7, #12]
 8103c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c20:	b2da      	uxtb	r2, r3
 8103c22:	8979      	ldrh	r1, [r7, #10]
 8103c24:	4b49      	ldr	r3, [pc, #292]	@ (8103d4c <HAL_I2C_Master_Receive+0x1e4>)
 8103c26:	9300      	str	r3, [sp, #0]
 8103c28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103c2c:	68f8      	ldr	r0, [r7, #12]
 8103c2e:	f000 fb1f 	bl	8104270 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8103c32:	e05c      	b.n	8103cee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103c34:	697a      	ldr	r2, [r7, #20]
 8103c36:	6a39      	ldr	r1, [r7, #32]
 8103c38:	68f8      	ldr	r0, [r7, #12]
 8103c3a:	f000 f9ad 	bl	8103f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8103c3e:	4603      	mov	r3, r0
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	d001      	beq.n	8103c48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103c44:	2301      	movs	r3, #1
 8103c46:	e07c      	b.n	8103d42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103c48:	68fb      	ldr	r3, [r7, #12]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103c4e:	68fb      	ldr	r3, [r7, #12]
 8103c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c52:	b2d2      	uxtb	r2, r2
 8103c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103c56:	68fb      	ldr	r3, [r7, #12]
 8103c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c5a:	1c5a      	adds	r2, r3, #1
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8103c60:	68fb      	ldr	r3, [r7, #12]
 8103c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c64:	3b01      	subs	r3, #1
 8103c66:	b29a      	uxth	r2, r3
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8103c6c:	68fb      	ldr	r3, [r7, #12]
 8103c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c70:	b29b      	uxth	r3, r3
 8103c72:	3b01      	subs	r3, #1
 8103c74:	b29a      	uxth	r2, r3
 8103c76:	68fb      	ldr	r3, [r7, #12]
 8103c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c7e:	b29b      	uxth	r3, r3
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d034      	beq.n	8103cee <HAL_I2C_Master_Receive+0x186>
 8103c84:	68fb      	ldr	r3, [r7, #12]
 8103c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d130      	bne.n	8103cee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103c8c:	697b      	ldr	r3, [r7, #20]
 8103c8e:	9300      	str	r3, [sp, #0]
 8103c90:	6a3b      	ldr	r3, [r7, #32]
 8103c92:	2200      	movs	r2, #0
 8103c94:	2180      	movs	r1, #128	@ 0x80
 8103c96:	68f8      	ldr	r0, [r7, #12]
 8103c98:	f000 f89a 	bl	8103dd0 <I2C_WaitOnFlagUntilTimeout>
 8103c9c:	4603      	mov	r3, r0
 8103c9e:	2b00      	cmp	r3, #0
 8103ca0:	d001      	beq.n	8103ca6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8103ca2:	2301      	movs	r3, #1
 8103ca4:	e04d      	b.n	8103d42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103ca6:	68fb      	ldr	r3, [r7, #12]
 8103ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103caa:	b29b      	uxth	r3, r3
 8103cac:	2bff      	cmp	r3, #255	@ 0xff
 8103cae:	d90e      	bls.n	8103cce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	22ff      	movs	r2, #255	@ 0xff
 8103cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103cb6:	68fb      	ldr	r3, [r7, #12]
 8103cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103cba:	b2da      	uxtb	r2, r3
 8103cbc:	8979      	ldrh	r1, [r7, #10]
 8103cbe:	2300      	movs	r3, #0
 8103cc0:	9300      	str	r3, [sp, #0]
 8103cc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103cc6:	68f8      	ldr	r0, [r7, #12]
 8103cc8:	f000 fad2 	bl	8104270 <I2C_TransferConfig>
 8103ccc:	e00f      	b.n	8103cee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103cce:	68fb      	ldr	r3, [r7, #12]
 8103cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103cd2:	b29a      	uxth	r2, r3
 8103cd4:	68fb      	ldr	r3, [r7, #12]
 8103cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103cd8:	68fb      	ldr	r3, [r7, #12]
 8103cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103cdc:	b2da      	uxtb	r2, r3
 8103cde:	8979      	ldrh	r1, [r7, #10]
 8103ce0:	2300      	movs	r3, #0
 8103ce2:	9300      	str	r3, [sp, #0]
 8103ce4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103ce8:	68f8      	ldr	r0, [r7, #12]
 8103cea:	f000 fac1 	bl	8104270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103cee:	68fb      	ldr	r3, [r7, #12]
 8103cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103cf2:	b29b      	uxth	r3, r3
 8103cf4:	2b00      	cmp	r3, #0
 8103cf6:	d19d      	bne.n	8103c34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103cf8:	697a      	ldr	r2, [r7, #20]
 8103cfa:	6a39      	ldr	r1, [r7, #32]
 8103cfc:	68f8      	ldr	r0, [r7, #12]
 8103cfe:	f000 f907 	bl	8103f10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103d02:	4603      	mov	r3, r0
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d001      	beq.n	8103d0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8103d08:	2301      	movs	r3, #1
 8103d0a:	e01a      	b.n	8103d42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103d0c:	68fb      	ldr	r3, [r7, #12]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	2220      	movs	r2, #32
 8103d12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103d14:	68fb      	ldr	r3, [r7, #12]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	6859      	ldr	r1, [r3, #4]
 8103d1a:	68fb      	ldr	r3, [r7, #12]
 8103d1c:	681a      	ldr	r2, [r3, #0]
 8103d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8103d50 <HAL_I2C_Master_Receive+0x1e8>)
 8103d20:	400b      	ands	r3, r1
 8103d22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103d24:	68fb      	ldr	r3, [r7, #12]
 8103d26:	2220      	movs	r2, #32
 8103d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103d2c:	68fb      	ldr	r3, [r7, #12]
 8103d2e:	2200      	movs	r2, #0
 8103d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103d34:	68fb      	ldr	r3, [r7, #12]
 8103d36:	2200      	movs	r2, #0
 8103d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103d3c:	2300      	movs	r3, #0
 8103d3e:	e000      	b.n	8103d42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103d40:	2302      	movs	r3, #2
  }
}
 8103d42:	4618      	mov	r0, r3
 8103d44:	3718      	adds	r7, #24
 8103d46:	46bd      	mov	sp, r7
 8103d48:	bd80      	pop	{r7, pc}
 8103d4a:	bf00      	nop
 8103d4c:	80002400 	.word	0x80002400
 8103d50:	fe00e800 	.word	0xfe00e800

08103d54 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8103d54:	b480      	push	{r7}
 8103d56:	b083      	sub	sp, #12
 8103d58:	af00      	add	r7, sp, #0
 8103d5a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103d62:	b2db      	uxtb	r3, r3
}
 8103d64:	4618      	mov	r0, r3
 8103d66:	370c      	adds	r7, #12
 8103d68:	46bd      	mov	sp, r7
 8103d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d6e:	4770      	bx	lr

08103d70 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8103d70:	b480      	push	{r7}
 8103d72:	b083      	sub	sp, #12
 8103d74:	af00      	add	r7, sp, #0
 8103d76:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8103d7c:	4618      	mov	r0, r3
 8103d7e:	370c      	adds	r7, #12
 8103d80:	46bd      	mov	sp, r7
 8103d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d86:	4770      	bx	lr

08103d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103d88:	b480      	push	{r7}
 8103d8a:	b083      	sub	sp, #12
 8103d8c:	af00      	add	r7, sp, #0
 8103d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	699b      	ldr	r3, [r3, #24]
 8103d96:	f003 0302 	and.w	r3, r3, #2
 8103d9a:	2b02      	cmp	r3, #2
 8103d9c:	d103      	bne.n	8103da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	2200      	movs	r2, #0
 8103da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	699b      	ldr	r3, [r3, #24]
 8103dac:	f003 0301 	and.w	r3, r3, #1
 8103db0:	2b01      	cmp	r3, #1
 8103db2:	d007      	beq.n	8103dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	681b      	ldr	r3, [r3, #0]
 8103db8:	699a      	ldr	r2, [r3, #24]
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	681b      	ldr	r3, [r3, #0]
 8103dbe:	f042 0201 	orr.w	r2, r2, #1
 8103dc2:	619a      	str	r2, [r3, #24]
  }
}
 8103dc4:	bf00      	nop
 8103dc6:	370c      	adds	r7, #12
 8103dc8:	46bd      	mov	sp, r7
 8103dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dce:	4770      	bx	lr

08103dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103dd0:	b580      	push	{r7, lr}
 8103dd2:	b084      	sub	sp, #16
 8103dd4:	af00      	add	r7, sp, #0
 8103dd6:	60f8      	str	r0, [r7, #12]
 8103dd8:	60b9      	str	r1, [r7, #8]
 8103dda:	603b      	str	r3, [r7, #0]
 8103ddc:	4613      	mov	r3, r2
 8103dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103de0:	e03b      	b.n	8103e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103de2:	69ba      	ldr	r2, [r7, #24]
 8103de4:	6839      	ldr	r1, [r7, #0]
 8103de6:	68f8      	ldr	r0, [r7, #12]
 8103de8:	f000 f962 	bl	81040b0 <I2C_IsErrorOccurred>
 8103dec:	4603      	mov	r3, r0
 8103dee:	2b00      	cmp	r3, #0
 8103df0:	d001      	beq.n	8103df6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8103df2:	2301      	movs	r3, #1
 8103df4:	e041      	b.n	8103e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103df6:	683b      	ldr	r3, [r7, #0]
 8103df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103dfc:	d02d      	beq.n	8103e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103dfe:	f7ff f9e9 	bl	81031d4 <HAL_GetTick>
 8103e02:	4602      	mov	r2, r0
 8103e04:	69bb      	ldr	r3, [r7, #24]
 8103e06:	1ad3      	subs	r3, r2, r3
 8103e08:	683a      	ldr	r2, [r7, #0]
 8103e0a:	429a      	cmp	r2, r3
 8103e0c:	d302      	bcc.n	8103e14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8103e0e:	683b      	ldr	r3, [r7, #0]
 8103e10:	2b00      	cmp	r3, #0
 8103e12:	d122      	bne.n	8103e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8103e14:	68fb      	ldr	r3, [r7, #12]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	699a      	ldr	r2, [r3, #24]
 8103e1a:	68bb      	ldr	r3, [r7, #8]
 8103e1c:	4013      	ands	r3, r2
 8103e1e:	68ba      	ldr	r2, [r7, #8]
 8103e20:	429a      	cmp	r2, r3
 8103e22:	bf0c      	ite	eq
 8103e24:	2301      	moveq	r3, #1
 8103e26:	2300      	movne	r3, #0
 8103e28:	b2db      	uxtb	r3, r3
 8103e2a:	461a      	mov	r2, r3
 8103e2c:	79fb      	ldrb	r3, [r7, #7]
 8103e2e:	429a      	cmp	r2, r3
 8103e30:	d113      	bne.n	8103e5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103e32:	68fb      	ldr	r3, [r7, #12]
 8103e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103e36:	f043 0220 	orr.w	r2, r3, #32
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103e3e:	68fb      	ldr	r3, [r7, #12]
 8103e40:	2220      	movs	r2, #32
 8103e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103e46:	68fb      	ldr	r3, [r7, #12]
 8103e48:	2200      	movs	r2, #0
 8103e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	2200      	movs	r2, #0
 8103e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8103e56:	2301      	movs	r3, #1
 8103e58:	e00f      	b.n	8103e7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103e5a:	68fb      	ldr	r3, [r7, #12]
 8103e5c:	681b      	ldr	r3, [r3, #0]
 8103e5e:	699a      	ldr	r2, [r3, #24]
 8103e60:	68bb      	ldr	r3, [r7, #8]
 8103e62:	4013      	ands	r3, r2
 8103e64:	68ba      	ldr	r2, [r7, #8]
 8103e66:	429a      	cmp	r2, r3
 8103e68:	bf0c      	ite	eq
 8103e6a:	2301      	moveq	r3, #1
 8103e6c:	2300      	movne	r3, #0
 8103e6e:	b2db      	uxtb	r3, r3
 8103e70:	461a      	mov	r2, r3
 8103e72:	79fb      	ldrb	r3, [r7, #7]
 8103e74:	429a      	cmp	r2, r3
 8103e76:	d0b4      	beq.n	8103de2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103e78:	2300      	movs	r3, #0
}
 8103e7a:	4618      	mov	r0, r3
 8103e7c:	3710      	adds	r7, #16
 8103e7e:	46bd      	mov	sp, r7
 8103e80:	bd80      	pop	{r7, pc}

08103e82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103e82:	b580      	push	{r7, lr}
 8103e84:	b084      	sub	sp, #16
 8103e86:	af00      	add	r7, sp, #0
 8103e88:	60f8      	str	r0, [r7, #12]
 8103e8a:	60b9      	str	r1, [r7, #8]
 8103e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103e8e:	e033      	b.n	8103ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103e90:	687a      	ldr	r2, [r7, #4]
 8103e92:	68b9      	ldr	r1, [r7, #8]
 8103e94:	68f8      	ldr	r0, [r7, #12]
 8103e96:	f000 f90b 	bl	81040b0 <I2C_IsErrorOccurred>
 8103e9a:	4603      	mov	r3, r0
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	d001      	beq.n	8103ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103ea0:	2301      	movs	r3, #1
 8103ea2:	e031      	b.n	8103f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103ea4:	68bb      	ldr	r3, [r7, #8]
 8103ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103eaa:	d025      	beq.n	8103ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103eac:	f7ff f992 	bl	81031d4 <HAL_GetTick>
 8103eb0:	4602      	mov	r2, r0
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	1ad3      	subs	r3, r2, r3
 8103eb6:	68ba      	ldr	r2, [r7, #8]
 8103eb8:	429a      	cmp	r2, r3
 8103eba:	d302      	bcc.n	8103ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8103ebc:	68bb      	ldr	r3, [r7, #8]
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	d11a      	bne.n	8103ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8103ec2:	68fb      	ldr	r3, [r7, #12]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	699b      	ldr	r3, [r3, #24]
 8103ec8:	f003 0302 	and.w	r3, r3, #2
 8103ecc:	2b02      	cmp	r3, #2
 8103ece:	d013      	beq.n	8103ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103ed4:	f043 0220 	orr.w	r2, r3, #32
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	2220      	movs	r2, #32
 8103ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103ee4:	68fb      	ldr	r3, [r7, #12]
 8103ee6:	2200      	movs	r2, #0
 8103ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103eec:	68fb      	ldr	r3, [r7, #12]
 8103eee:	2200      	movs	r2, #0
 8103ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8103ef4:	2301      	movs	r3, #1
 8103ef6:	e007      	b.n	8103f08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103ef8:	68fb      	ldr	r3, [r7, #12]
 8103efa:	681b      	ldr	r3, [r3, #0]
 8103efc:	699b      	ldr	r3, [r3, #24]
 8103efe:	f003 0302 	and.w	r3, r3, #2
 8103f02:	2b02      	cmp	r3, #2
 8103f04:	d1c4      	bne.n	8103e90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8103f06:	2300      	movs	r3, #0
}
 8103f08:	4618      	mov	r0, r3
 8103f0a:	3710      	adds	r7, #16
 8103f0c:	46bd      	mov	sp, r7
 8103f0e:	bd80      	pop	{r7, pc}

08103f10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103f10:	b580      	push	{r7, lr}
 8103f12:	b084      	sub	sp, #16
 8103f14:	af00      	add	r7, sp, #0
 8103f16:	60f8      	str	r0, [r7, #12]
 8103f18:	60b9      	str	r1, [r7, #8]
 8103f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103f1c:	e02f      	b.n	8103f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103f1e:	687a      	ldr	r2, [r7, #4]
 8103f20:	68b9      	ldr	r1, [r7, #8]
 8103f22:	68f8      	ldr	r0, [r7, #12]
 8103f24:	f000 f8c4 	bl	81040b0 <I2C_IsErrorOccurred>
 8103f28:	4603      	mov	r3, r0
 8103f2a:	2b00      	cmp	r3, #0
 8103f2c:	d001      	beq.n	8103f32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103f2e:	2301      	movs	r3, #1
 8103f30:	e02d      	b.n	8103f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103f32:	f7ff f94f 	bl	81031d4 <HAL_GetTick>
 8103f36:	4602      	mov	r2, r0
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	1ad3      	subs	r3, r2, r3
 8103f3c:	68ba      	ldr	r2, [r7, #8]
 8103f3e:	429a      	cmp	r2, r3
 8103f40:	d302      	bcc.n	8103f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8103f42:	68bb      	ldr	r3, [r7, #8]
 8103f44:	2b00      	cmp	r3, #0
 8103f46:	d11a      	bne.n	8103f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	681b      	ldr	r3, [r3, #0]
 8103f4c:	699b      	ldr	r3, [r3, #24]
 8103f4e:	f003 0320 	and.w	r3, r3, #32
 8103f52:	2b20      	cmp	r3, #32
 8103f54:	d013      	beq.n	8103f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103f56:	68fb      	ldr	r3, [r7, #12]
 8103f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103f5a:	f043 0220 	orr.w	r2, r3, #32
 8103f5e:	68fb      	ldr	r3, [r7, #12]
 8103f60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	2220      	movs	r2, #32
 8103f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103f6a:	68fb      	ldr	r3, [r7, #12]
 8103f6c:	2200      	movs	r2, #0
 8103f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8103f72:	68fb      	ldr	r3, [r7, #12]
 8103f74:	2200      	movs	r2, #0
 8103f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8103f7a:	2301      	movs	r3, #1
 8103f7c:	e007      	b.n	8103f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103f7e:	68fb      	ldr	r3, [r7, #12]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	699b      	ldr	r3, [r3, #24]
 8103f84:	f003 0320 	and.w	r3, r3, #32
 8103f88:	2b20      	cmp	r3, #32
 8103f8a:	d1c8      	bne.n	8103f1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8103f8c:	2300      	movs	r3, #0
}
 8103f8e:	4618      	mov	r0, r3
 8103f90:	3710      	adds	r7, #16
 8103f92:	46bd      	mov	sp, r7
 8103f94:	bd80      	pop	{r7, pc}
	...

08103f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103f98:	b580      	push	{r7, lr}
 8103f9a:	b086      	sub	sp, #24
 8103f9c:	af00      	add	r7, sp, #0
 8103f9e:	60f8      	str	r0, [r7, #12]
 8103fa0:	60b9      	str	r1, [r7, #8]
 8103fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8103fa4:	2300      	movs	r3, #0
 8103fa6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8103fa8:	e071      	b.n	810408e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103faa:	687a      	ldr	r2, [r7, #4]
 8103fac:	68b9      	ldr	r1, [r7, #8]
 8103fae:	68f8      	ldr	r0, [r7, #12]
 8103fb0:	f000 f87e 	bl	81040b0 <I2C_IsErrorOccurred>
 8103fb4:	4603      	mov	r3, r0
 8103fb6:	2b00      	cmp	r3, #0
 8103fb8:	d001      	beq.n	8103fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8103fba:	2301      	movs	r3, #1
 8103fbc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	699b      	ldr	r3, [r3, #24]
 8103fc4:	f003 0320 	and.w	r3, r3, #32
 8103fc8:	2b20      	cmp	r3, #32
 8103fca:	d13b      	bne.n	8104044 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8103fcc:	7dfb      	ldrb	r3, [r7, #23]
 8103fce:	2b00      	cmp	r3, #0
 8103fd0:	d138      	bne.n	8104044 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	699b      	ldr	r3, [r3, #24]
 8103fd8:	f003 0304 	and.w	r3, r3, #4
 8103fdc:	2b04      	cmp	r3, #4
 8103fde:	d105      	bne.n	8103fec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103fe4:	2b00      	cmp	r3, #0
 8103fe6:	d001      	beq.n	8103fec <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8103fe8:	2300      	movs	r3, #0
 8103fea:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	699b      	ldr	r3, [r3, #24]
 8103ff2:	f003 0310 	and.w	r3, r3, #16
 8103ff6:	2b10      	cmp	r3, #16
 8103ff8:	d121      	bne.n	810403e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	2210      	movs	r2, #16
 8104000:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	2204      	movs	r2, #4
 8104006:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	2220      	movs	r2, #32
 810400e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	681b      	ldr	r3, [r3, #0]
 8104014:	6859      	ldr	r1, [r3, #4]
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	681a      	ldr	r2, [r3, #0]
 810401a:	4b24      	ldr	r3, [pc, #144]	@ (81040ac <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 810401c:	400b      	ands	r3, r1
 810401e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	2220      	movs	r2, #32
 8104024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104028:	68fb      	ldr	r3, [r7, #12]
 810402a:	2200      	movs	r2, #0
 810402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104030:	68fb      	ldr	r3, [r7, #12]
 8104032:	2200      	movs	r2, #0
 8104034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8104038:	2301      	movs	r3, #1
 810403a:	75fb      	strb	r3, [r7, #23]
 810403c:	e002      	b.n	8104044 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810403e:	68fb      	ldr	r3, [r7, #12]
 8104040:	2200      	movs	r2, #0
 8104042:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8104044:	f7ff f8c6 	bl	81031d4 <HAL_GetTick>
 8104048:	4602      	mov	r2, r0
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	1ad3      	subs	r3, r2, r3
 810404e:	68ba      	ldr	r2, [r7, #8]
 8104050:	429a      	cmp	r2, r3
 8104052:	d302      	bcc.n	810405a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8104054:	68bb      	ldr	r3, [r7, #8]
 8104056:	2b00      	cmp	r3, #0
 8104058:	d119      	bne.n	810408e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 810405a:	7dfb      	ldrb	r3, [r7, #23]
 810405c:	2b00      	cmp	r3, #0
 810405e:	d116      	bne.n	810408e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	699b      	ldr	r3, [r3, #24]
 8104066:	f003 0304 	and.w	r3, r3, #4
 810406a:	2b04      	cmp	r3, #4
 810406c:	d00f      	beq.n	810408e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104072:	f043 0220 	orr.w	r2, r3, #32
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	2220      	movs	r2, #32
 810407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	2200      	movs	r2, #0
 8104086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 810408a:	2301      	movs	r3, #1
 810408c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	699b      	ldr	r3, [r3, #24]
 8104094:	f003 0304 	and.w	r3, r3, #4
 8104098:	2b04      	cmp	r3, #4
 810409a:	d002      	beq.n	81040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 810409c:	7dfb      	ldrb	r3, [r7, #23]
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d083      	beq.n	8103faa <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 81040a2:	7dfb      	ldrb	r3, [r7, #23]
}
 81040a4:	4618      	mov	r0, r3
 81040a6:	3718      	adds	r7, #24
 81040a8:	46bd      	mov	sp, r7
 81040aa:	bd80      	pop	{r7, pc}
 81040ac:	fe00e800 	.word	0xfe00e800

081040b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81040b0:	b580      	push	{r7, lr}
 81040b2:	b08a      	sub	sp, #40	@ 0x28
 81040b4:	af00      	add	r7, sp, #0
 81040b6:	60f8      	str	r0, [r7, #12]
 81040b8:	60b9      	str	r1, [r7, #8]
 81040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81040bc:	2300      	movs	r3, #0
 81040be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81040c2:	68fb      	ldr	r3, [r7, #12]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	699b      	ldr	r3, [r3, #24]
 81040c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81040ca:	2300      	movs	r3, #0
 81040cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81040d2:	69bb      	ldr	r3, [r7, #24]
 81040d4:	f003 0310 	and.w	r3, r3, #16
 81040d8:	2b00      	cmp	r3, #0
 81040da:	d068      	beq.n	81041ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81040dc:	68fb      	ldr	r3, [r7, #12]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	2210      	movs	r2, #16
 81040e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81040e4:	e049      	b.n	810417a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81040e6:	68bb      	ldr	r3, [r7, #8]
 81040e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81040ec:	d045      	beq.n	810417a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81040ee:	f7ff f871 	bl	81031d4 <HAL_GetTick>
 81040f2:	4602      	mov	r2, r0
 81040f4:	69fb      	ldr	r3, [r7, #28]
 81040f6:	1ad3      	subs	r3, r2, r3
 81040f8:	68ba      	ldr	r2, [r7, #8]
 81040fa:	429a      	cmp	r2, r3
 81040fc:	d302      	bcc.n	8104104 <I2C_IsErrorOccurred+0x54>
 81040fe:	68bb      	ldr	r3, [r7, #8]
 8104100:	2b00      	cmp	r3, #0
 8104102:	d13a      	bne.n	810417a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	681b      	ldr	r3, [r3, #0]
 8104108:	685b      	ldr	r3, [r3, #4]
 810410a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810410e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8104110:	68fb      	ldr	r3, [r7, #12]
 8104112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8104116:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	699b      	ldr	r3, [r3, #24]
 810411e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104126:	d121      	bne.n	810416c <I2C_IsErrorOccurred+0xbc>
 8104128:	697b      	ldr	r3, [r7, #20]
 810412a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810412e:	d01d      	beq.n	810416c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8104130:	7cfb      	ldrb	r3, [r7, #19]
 8104132:	2b20      	cmp	r3, #32
 8104134:	d01a      	beq.n	810416c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104136:	68fb      	ldr	r3, [r7, #12]
 8104138:	681b      	ldr	r3, [r3, #0]
 810413a:	685a      	ldr	r2, [r3, #4]
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8104144:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104146:	f7ff f845 	bl	81031d4 <HAL_GetTick>
 810414a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810414c:	e00e      	b.n	810416c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810414e:	f7ff f841 	bl	81031d4 <HAL_GetTick>
 8104152:	4602      	mov	r2, r0
 8104154:	69fb      	ldr	r3, [r7, #28]
 8104156:	1ad3      	subs	r3, r2, r3
 8104158:	2b19      	cmp	r3, #25
 810415a:	d907      	bls.n	810416c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810415c:	6a3b      	ldr	r3, [r7, #32]
 810415e:	f043 0320 	orr.w	r3, r3, #32
 8104162:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8104164:	2301      	movs	r3, #1
 8104166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810416a:	e006      	b.n	810417a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	699b      	ldr	r3, [r3, #24]
 8104172:	f003 0320 	and.w	r3, r3, #32
 8104176:	2b20      	cmp	r3, #32
 8104178:	d1e9      	bne.n	810414e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	699b      	ldr	r3, [r3, #24]
 8104180:	f003 0320 	and.w	r3, r3, #32
 8104184:	2b20      	cmp	r3, #32
 8104186:	d003      	beq.n	8104190 <I2C_IsErrorOccurred+0xe0>
 8104188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810418c:	2b00      	cmp	r3, #0
 810418e:	d0aa      	beq.n	81040e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8104190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104194:	2b00      	cmp	r3, #0
 8104196:	d103      	bne.n	81041a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	2220      	movs	r2, #32
 810419e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81041a0:	6a3b      	ldr	r3, [r7, #32]
 81041a2:	f043 0304 	orr.w	r3, r3, #4
 81041a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81041a8:	2301      	movs	r3, #1
 81041aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	699b      	ldr	r3, [r3, #24]
 81041b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81041b6:	69bb      	ldr	r3, [r7, #24]
 81041b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81041bc:	2b00      	cmp	r3, #0
 81041be:	d00b      	beq.n	81041d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81041c0:	6a3b      	ldr	r3, [r7, #32]
 81041c2:	f043 0301 	orr.w	r3, r3, #1
 81041c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81041d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81041d2:	2301      	movs	r3, #1
 81041d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81041d8:	69bb      	ldr	r3, [r7, #24]
 81041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d00b      	beq.n	81041fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81041e2:	6a3b      	ldr	r3, [r7, #32]
 81041e4:	f043 0308 	orr.w	r3, r3, #8
 81041e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81041f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81041f4:	2301      	movs	r3, #1
 81041f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81041fa:	69bb      	ldr	r3, [r7, #24]
 81041fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104200:	2b00      	cmp	r3, #0
 8104202:	d00b      	beq.n	810421c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8104204:	6a3b      	ldr	r3, [r7, #32]
 8104206:	f043 0302 	orr.w	r3, r3, #2
 810420a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810420c:	68fb      	ldr	r3, [r7, #12]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8104214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104216:	2301      	movs	r3, #1
 8104218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810421c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104220:	2b00      	cmp	r3, #0
 8104222:	d01c      	beq.n	810425e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104224:	68f8      	ldr	r0, [r7, #12]
 8104226:	f7ff fdaf 	bl	8103d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810422a:	68fb      	ldr	r3, [r7, #12]
 810422c:	681b      	ldr	r3, [r3, #0]
 810422e:	6859      	ldr	r1, [r3, #4]
 8104230:	68fb      	ldr	r3, [r7, #12]
 8104232:	681a      	ldr	r2, [r3, #0]
 8104234:	4b0d      	ldr	r3, [pc, #52]	@ (810426c <I2C_IsErrorOccurred+0x1bc>)
 8104236:	400b      	ands	r3, r1
 8104238:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810423a:	68fb      	ldr	r3, [r7, #12]
 810423c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810423e:	6a3b      	ldr	r3, [r7, #32]
 8104240:	431a      	orrs	r2, r3
 8104242:	68fb      	ldr	r3, [r7, #12]
 8104244:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	2220      	movs	r2, #32
 810424a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	2200      	movs	r2, #0
 8104252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104256:	68fb      	ldr	r3, [r7, #12]
 8104258:	2200      	movs	r2, #0
 810425a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810425e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8104262:	4618      	mov	r0, r3
 8104264:	3728      	adds	r7, #40	@ 0x28
 8104266:	46bd      	mov	sp, r7
 8104268:	bd80      	pop	{r7, pc}
 810426a:	bf00      	nop
 810426c:	fe00e800 	.word	0xfe00e800

08104270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104270:	b480      	push	{r7}
 8104272:	b087      	sub	sp, #28
 8104274:	af00      	add	r7, sp, #0
 8104276:	60f8      	str	r0, [r7, #12]
 8104278:	607b      	str	r3, [r7, #4]
 810427a:	460b      	mov	r3, r1
 810427c:	817b      	strh	r3, [r7, #10]
 810427e:	4613      	mov	r3, r2
 8104280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104282:	897b      	ldrh	r3, [r7, #10]
 8104284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104288:	7a7b      	ldrb	r3, [r7, #9]
 810428a:	041b      	lsls	r3, r3, #16
 810428c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104290:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104296:	6a3b      	ldr	r3, [r7, #32]
 8104298:	4313      	orrs	r3, r2
 810429a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810429e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	685a      	ldr	r2, [r3, #4]
 81042a6:	6a3b      	ldr	r3, [r7, #32]
 81042a8:	0d5b      	lsrs	r3, r3, #21
 81042aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 81042ae:	4b08      	ldr	r3, [pc, #32]	@ (81042d0 <I2C_TransferConfig+0x60>)
 81042b0:	430b      	orrs	r3, r1
 81042b2:	43db      	mvns	r3, r3
 81042b4:	ea02 0103 	and.w	r1, r2, r3
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	681b      	ldr	r3, [r3, #0]
 81042bc:	697a      	ldr	r2, [r7, #20]
 81042be:	430a      	orrs	r2, r1
 81042c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81042c2:	bf00      	nop
 81042c4:	371c      	adds	r7, #28
 81042c6:	46bd      	mov	sp, r7
 81042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042cc:	4770      	bx	lr
 81042ce:	bf00      	nop
 81042d0:	03ff63ff 	.word	0x03ff63ff

081042d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81042d4:	b480      	push	{r7}
 81042d6:	b083      	sub	sp, #12
 81042d8:	af00      	add	r7, sp, #0
 81042da:	6078      	str	r0, [r7, #4]
 81042dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81042e4:	b2db      	uxtb	r3, r3
 81042e6:	2b20      	cmp	r3, #32
 81042e8:	d138      	bne.n	810435c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81042f0:	2b01      	cmp	r3, #1
 81042f2:	d101      	bne.n	81042f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81042f4:	2302      	movs	r3, #2
 81042f6:	e032      	b.n	810435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	2201      	movs	r2, #1
 81042fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	2224      	movs	r2, #36	@ 0x24
 8104304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	681a      	ldr	r2, [r3, #0]
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	f022 0201 	bic.w	r2, r2, #1
 8104316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	681a      	ldr	r2, [r3, #0]
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8104326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	6819      	ldr	r1, [r3, #0]
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	683a      	ldr	r2, [r7, #0]
 8104334:	430a      	orrs	r2, r1
 8104336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	681a      	ldr	r2, [r3, #0]
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	f042 0201 	orr.w	r2, r2, #1
 8104346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	2220      	movs	r2, #32
 810434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	2200      	movs	r2, #0
 8104354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104358:	2300      	movs	r3, #0
 810435a:	e000      	b.n	810435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810435c:	2302      	movs	r3, #2
  }
}
 810435e:	4618      	mov	r0, r3
 8104360:	370c      	adds	r7, #12
 8104362:	46bd      	mov	sp, r7
 8104364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104368:	4770      	bx	lr

0810436a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810436a:	b480      	push	{r7}
 810436c:	b085      	sub	sp, #20
 810436e:	af00      	add	r7, sp, #0
 8104370:	6078      	str	r0, [r7, #4]
 8104372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810437a:	b2db      	uxtb	r3, r3
 810437c:	2b20      	cmp	r3, #32
 810437e:	d139      	bne.n	81043f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104386:	2b01      	cmp	r3, #1
 8104388:	d101      	bne.n	810438e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810438a:	2302      	movs	r3, #2
 810438c:	e033      	b.n	81043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	2201      	movs	r2, #1
 8104392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	2224      	movs	r2, #36	@ 0x24
 810439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	681a      	ldr	r2, [r3, #0]
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	f022 0201 	bic.w	r2, r2, #1
 81043ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81043bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81043be:	683b      	ldr	r3, [r7, #0]
 81043c0:	021b      	lsls	r3, r3, #8
 81043c2:	68fa      	ldr	r2, [r7, #12]
 81043c4:	4313      	orrs	r3, r2
 81043c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	68fa      	ldr	r2, [r7, #12]
 81043ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	681a      	ldr	r2, [r3, #0]
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	f042 0201 	orr.w	r2, r2, #1
 81043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	2220      	movs	r2, #32
 81043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	2200      	movs	r2, #0
 81043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81043f0:	2300      	movs	r3, #0
 81043f2:	e000      	b.n	81043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81043f4:	2302      	movs	r3, #2
  }
}
 81043f6:	4618      	mov	r0, r3
 81043f8:	3714      	adds	r7, #20
 81043fa:	46bd      	mov	sp, r7
 81043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104400:	4770      	bx	lr
	...

08104404 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104404:	b580      	push	{r7, lr}
 8104406:	b084      	sub	sp, #16
 8104408:	af00      	add	r7, sp, #0
 810440a:	60f8      	str	r0, [r7, #12]
 810440c:	460b      	mov	r3, r1
 810440e:	607a      	str	r2, [r7, #4]
 8104410:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104412:	4b37      	ldr	r3, [pc, #220]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	f023 0201 	bic.w	r2, r3, #1
 810441a:	4935      	ldr	r1, [pc, #212]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	4313      	orrs	r3, r2
 8104420:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	2b00      	cmp	r3, #0
 8104426:	d123      	bne.n	8104470 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104428:	f7ff f814 	bl	8103454 <HAL_GetCurrentCPUID>
 810442c:	4603      	mov	r3, r0
 810442e:	2b03      	cmp	r3, #3
 8104430:	d158      	bne.n	81044e4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104432:	4b2f      	ldr	r3, [pc, #188]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104434:	691b      	ldr	r3, [r3, #16]
 8104436:	4a2e      	ldr	r2, [pc, #184]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104438:	f023 0301 	bic.w	r3, r3, #1
 810443c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810443e:	4b2d      	ldr	r3, [pc, #180]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104440:	691b      	ldr	r3, [r3, #16]
 8104442:	4a2c      	ldr	r2, [pc, #176]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104444:	f043 0304 	orr.w	r3, r3, #4
 8104448:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810444a:	f3bf 8f4f 	dsb	sy
}
 810444e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104450:	f3bf 8f6f 	isb	sy
}
 8104454:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104456:	7afb      	ldrb	r3, [r7, #11]
 8104458:	2b01      	cmp	r3, #1
 810445a:	d101      	bne.n	8104460 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810445c:	bf30      	wfi
 810445e:	e000      	b.n	8104462 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104460:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104462:	4b24      	ldr	r3, [pc, #144]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104464:	691b      	ldr	r3, [r3, #16]
 8104466:	4a23      	ldr	r2, [pc, #140]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104468:	f023 0304 	bic.w	r3, r3, #4
 810446c:	6113      	str	r3, [r2, #16]
 810446e:	e03c      	b.n	81044ea <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	2b01      	cmp	r3, #1
 8104474:	d123      	bne.n	81044be <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104476:	f7fe ffed 	bl	8103454 <HAL_GetCurrentCPUID>
 810447a:	4603      	mov	r3, r0
 810447c:	2b01      	cmp	r3, #1
 810447e:	d133      	bne.n	81044e8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104480:	4b1b      	ldr	r3, [pc, #108]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104482:	695b      	ldr	r3, [r3, #20]
 8104484:	4a1a      	ldr	r2, [pc, #104]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104486:	f023 0302 	bic.w	r3, r3, #2
 810448a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810448c:	4b19      	ldr	r3, [pc, #100]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810448e:	691b      	ldr	r3, [r3, #16]
 8104490:	4a18      	ldr	r2, [pc, #96]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104492:	f043 0304 	orr.w	r3, r3, #4
 8104496:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104498:	f3bf 8f4f 	dsb	sy
}
 810449c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810449e:	f3bf 8f6f 	isb	sy
}
 81044a2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81044a4:	7afb      	ldrb	r3, [r7, #11]
 81044a6:	2b01      	cmp	r3, #1
 81044a8:	d101      	bne.n	81044ae <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81044aa:	bf30      	wfi
 81044ac:	e000      	b.n	81044b0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81044ae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81044b0:	4b10      	ldr	r3, [pc, #64]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81044b2:	691b      	ldr	r3, [r3, #16]
 81044b4:	4a0f      	ldr	r2, [pc, #60]	@ (81044f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81044b6:	f023 0304 	bic.w	r3, r3, #4
 81044ba:	6113      	str	r3, [r2, #16]
 81044bc:	e015      	b.n	81044ea <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81044be:	f7fe ffc9 	bl	8103454 <HAL_GetCurrentCPUID>
 81044c2:	4603      	mov	r3, r0
 81044c4:	2b03      	cmp	r3, #3
 81044c6:	d106      	bne.n	81044d6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81044c8:	4b09      	ldr	r3, [pc, #36]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044ca:	691b      	ldr	r3, [r3, #16]
 81044cc:	4a08      	ldr	r2, [pc, #32]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044ce:	f023 0304 	bic.w	r3, r3, #4
 81044d2:	6113      	str	r3, [r2, #16]
 81044d4:	e009      	b.n	81044ea <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81044d6:	4b06      	ldr	r3, [pc, #24]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044d8:	695b      	ldr	r3, [r3, #20]
 81044da:	4a05      	ldr	r2, [pc, #20]	@ (81044f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81044dc:	f023 0304 	bic.w	r3, r3, #4
 81044e0:	6153      	str	r3, [r2, #20]
 81044e2:	e002      	b.n	81044ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81044e4:	bf00      	nop
 81044e6:	e000      	b.n	81044ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81044e8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81044ea:	3710      	adds	r7, #16
 81044ec:	46bd      	mov	sp, r7
 81044ee:	bd80      	pop	{r7, pc}
 81044f0:	58024800 	.word	0x58024800
 81044f4:	e000ed00 	.word	0xe000ed00

081044f8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81044f8:	b580      	push	{r7, lr}
 81044fa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81044fc:	f7fe ffaa 	bl	8103454 <HAL_GetCurrentCPUID>
 8104500:	4603      	mov	r3, r0
 8104502:	2b03      	cmp	r3, #3
 8104504:	d101      	bne.n	810450a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104506:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104508:	e001      	b.n	810450e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810450a:	bf40      	sev
    __WFE ();
 810450c:	bf20      	wfe
}
 810450e:	bf00      	nop
 8104510:	bd80      	pop	{r7, pc}
	...

08104514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104514:	b480      	push	{r7}
 8104516:	b089      	sub	sp, #36	@ 0x24
 8104518:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810451a:	4bb3      	ldr	r3, [pc, #716]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810451c:	691b      	ldr	r3, [r3, #16]
 810451e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104522:	2b18      	cmp	r3, #24
 8104524:	f200 8155 	bhi.w	81047d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8104528:	a201      	add	r2, pc, #4	@ (adr r2, 8104530 <HAL_RCC_GetSysClockFreq+0x1c>)
 810452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810452e:	bf00      	nop
 8104530:	08104595 	.word	0x08104595
 8104534:	081047d3 	.word	0x081047d3
 8104538:	081047d3 	.word	0x081047d3
 810453c:	081047d3 	.word	0x081047d3
 8104540:	081047d3 	.word	0x081047d3
 8104544:	081047d3 	.word	0x081047d3
 8104548:	081047d3 	.word	0x081047d3
 810454c:	081047d3 	.word	0x081047d3
 8104550:	081045bb 	.word	0x081045bb
 8104554:	081047d3 	.word	0x081047d3
 8104558:	081047d3 	.word	0x081047d3
 810455c:	081047d3 	.word	0x081047d3
 8104560:	081047d3 	.word	0x081047d3
 8104564:	081047d3 	.word	0x081047d3
 8104568:	081047d3 	.word	0x081047d3
 810456c:	081047d3 	.word	0x081047d3
 8104570:	081045c1 	.word	0x081045c1
 8104574:	081047d3 	.word	0x081047d3
 8104578:	081047d3 	.word	0x081047d3
 810457c:	081047d3 	.word	0x081047d3
 8104580:	081047d3 	.word	0x081047d3
 8104584:	081047d3 	.word	0x081047d3
 8104588:	081047d3 	.word	0x081047d3
 810458c:	081047d3 	.word	0x081047d3
 8104590:	081045c7 	.word	0x081045c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104594:	4b94      	ldr	r3, [pc, #592]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	f003 0320 	and.w	r3, r3, #32
 810459c:	2b00      	cmp	r3, #0
 810459e:	d009      	beq.n	81045b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81045a0:	4b91      	ldr	r3, [pc, #580]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	08db      	lsrs	r3, r3, #3
 81045a6:	f003 0303 	and.w	r3, r3, #3
 81045aa:	4a90      	ldr	r2, [pc, #576]	@ (81047ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045ac:	fa22 f303 	lsr.w	r3, r2, r3
 81045b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81045b2:	e111      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81045b4:	4b8d      	ldr	r3, [pc, #564]	@ (81047ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81045b6:	61bb      	str	r3, [r7, #24]
      break;
 81045b8:	e10e      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81045ba:	4b8d      	ldr	r3, [pc, #564]	@ (81047f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81045bc:	61bb      	str	r3, [r7, #24]
      break;
 81045be:	e10b      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81045c0:	4b8c      	ldr	r3, [pc, #560]	@ (81047f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81045c2:	61bb      	str	r3, [r7, #24]
      break;
 81045c4:	e108      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81045c6:	4b88      	ldr	r3, [pc, #544]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045ca:	f003 0303 	and.w	r3, r3, #3
 81045ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81045d0:	4b85      	ldr	r3, [pc, #532]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045d4:	091b      	lsrs	r3, r3, #4
 81045d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81045da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81045dc:	4b82      	ldr	r3, [pc, #520]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81045e0:	f003 0301 	and.w	r3, r3, #1
 81045e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81045e6:	4b80      	ldr	r3, [pc, #512]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81045e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81045ea:	08db      	lsrs	r3, r3, #3
 81045ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81045f0:	68fa      	ldr	r2, [r7, #12]
 81045f2:	fb02 f303 	mul.w	r3, r2, r3
 81045f6:	ee07 3a90 	vmov	s15, r3
 81045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104602:	693b      	ldr	r3, [r7, #16]
 8104604:	2b00      	cmp	r3, #0
 8104606:	f000 80e1 	beq.w	81047cc <HAL_RCC_GetSysClockFreq+0x2b8>
 810460a:	697b      	ldr	r3, [r7, #20]
 810460c:	2b02      	cmp	r3, #2
 810460e:	f000 8083 	beq.w	8104718 <HAL_RCC_GetSysClockFreq+0x204>
 8104612:	697b      	ldr	r3, [r7, #20]
 8104614:	2b02      	cmp	r3, #2
 8104616:	f200 80a1 	bhi.w	810475c <HAL_RCC_GetSysClockFreq+0x248>
 810461a:	697b      	ldr	r3, [r7, #20]
 810461c:	2b00      	cmp	r3, #0
 810461e:	d003      	beq.n	8104628 <HAL_RCC_GetSysClockFreq+0x114>
 8104620:	697b      	ldr	r3, [r7, #20]
 8104622:	2b01      	cmp	r3, #1
 8104624:	d056      	beq.n	81046d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104626:	e099      	b.n	810475c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104628:	4b6f      	ldr	r3, [pc, #444]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810462a:	681b      	ldr	r3, [r3, #0]
 810462c:	f003 0320 	and.w	r3, r3, #32
 8104630:	2b00      	cmp	r3, #0
 8104632:	d02d      	beq.n	8104690 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104634:	4b6c      	ldr	r3, [pc, #432]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104636:	681b      	ldr	r3, [r3, #0]
 8104638:	08db      	lsrs	r3, r3, #3
 810463a:	f003 0303 	and.w	r3, r3, #3
 810463e:	4a6b      	ldr	r2, [pc, #428]	@ (81047ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104640:	fa22 f303 	lsr.w	r3, r2, r3
 8104644:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	ee07 3a90 	vmov	s15, r3
 810464c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104650:	693b      	ldr	r3, [r7, #16]
 8104652:	ee07 3a90 	vmov	s15, r3
 8104656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810465a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810465e:	4b62      	ldr	r3, [pc, #392]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104666:	ee07 3a90 	vmov	s15, r3
 810466a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810466e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104672:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810467a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810467e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104686:	ee67 7a27 	vmul.f32	s15, s14, s15
 810468a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810468e:	e087      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104690:	693b      	ldr	r3, [r7, #16]
 8104692:	ee07 3a90 	vmov	s15, r3
 8104696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810469a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81047fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046a2:	4b51      	ldr	r3, [pc, #324]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046aa:	ee07 3a90 	vmov	s15, r3
 81046ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81046b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81046d2:	e065      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81046d4:	693b      	ldr	r3, [r7, #16]
 81046d6:	ee07 3a90 	vmov	s15, r3
 81046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8104800 <HAL_RCC_GetSysClockFreq+0x2ec>
 81046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046e6:	4b40      	ldr	r3, [pc, #256]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046ee:	ee07 3a90 	vmov	s15, r3
 81046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81046fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104716:	e043      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104718:	693b      	ldr	r3, [r7, #16]
 810471a:	ee07 3a90 	vmov	s15, r3
 810471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104722:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8104804 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810472a:	4b2f      	ldr	r3, [pc, #188]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104732:	ee07 3a90 	vmov	s15, r3
 8104736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810473a:	ed97 6a02 	vldr	s12, [r7, #8]
 810473e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810474a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810475a:	e021      	b.n	81047a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810475c:	693b      	ldr	r3, [r7, #16]
 810475e:	ee07 3a90 	vmov	s15, r3
 8104762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104766:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104800 <HAL_RCC_GetSysClockFreq+0x2ec>
 810476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810476e:	4b1e      	ldr	r3, [pc, #120]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104776:	ee07 3a90 	vmov	s15, r3
 810477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810477e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104782:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81047f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810478e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104796:	ee67 7a27 	vmul.f32	s15, s14, s15
 810479a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810479e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81047a0:	4b11      	ldr	r3, [pc, #68]	@ (81047e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81047a4:	0a5b      	lsrs	r3, r3, #9
 81047a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81047aa:	3301      	adds	r3, #1
 81047ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81047ae:	683b      	ldr	r3, [r7, #0]
 81047b0:	ee07 3a90 	vmov	s15, r3
 81047b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81047b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81047bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81047c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81047c4:	ee17 3a90 	vmov	r3, s15
 81047c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81047ca:	e005      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81047cc:	2300      	movs	r3, #0
 81047ce:	61bb      	str	r3, [r7, #24]
      break;
 81047d0:	e002      	b.n	81047d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81047d2:	4b07      	ldr	r3, [pc, #28]	@ (81047f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81047d4:	61bb      	str	r3, [r7, #24]
      break;
 81047d6:	bf00      	nop
  }

  return sysclockfreq;
 81047d8:	69bb      	ldr	r3, [r7, #24]
}
 81047da:	4618      	mov	r0, r3
 81047dc:	3724      	adds	r7, #36	@ 0x24
 81047de:	46bd      	mov	sp, r7
 81047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047e4:	4770      	bx	lr
 81047e6:	bf00      	nop
 81047e8:	58024400 	.word	0x58024400
 81047ec:	03d09000 	.word	0x03d09000
 81047f0:	003d0900 	.word	0x003d0900
 81047f4:	007a1200 	.word	0x007a1200
 81047f8:	46000000 	.word	0x46000000
 81047fc:	4c742400 	.word	0x4c742400
 8104800:	4a742400 	.word	0x4a742400
 8104804:	4af42400 	.word	0x4af42400

08104808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104808:	b580      	push	{r7, lr}
 810480a:	b082      	sub	sp, #8
 810480c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810480e:	f7ff fe81 	bl	8104514 <HAL_RCC_GetSysClockFreq>
 8104812:	4602      	mov	r2, r0
 8104814:	4b11      	ldr	r3, [pc, #68]	@ (810485c <HAL_RCC_GetHCLKFreq+0x54>)
 8104816:	699b      	ldr	r3, [r3, #24]
 8104818:	0a1b      	lsrs	r3, r3, #8
 810481a:	f003 030f 	and.w	r3, r3, #15
 810481e:	4910      	ldr	r1, [pc, #64]	@ (8104860 <HAL_RCC_GetHCLKFreq+0x58>)
 8104820:	5ccb      	ldrb	r3, [r1, r3]
 8104822:	f003 031f 	and.w	r3, r3, #31
 8104826:	fa22 f303 	lsr.w	r3, r2, r3
 810482a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810482c:	4b0b      	ldr	r3, [pc, #44]	@ (810485c <HAL_RCC_GetHCLKFreq+0x54>)
 810482e:	699b      	ldr	r3, [r3, #24]
 8104830:	f003 030f 	and.w	r3, r3, #15
 8104834:	4a0a      	ldr	r2, [pc, #40]	@ (8104860 <HAL_RCC_GetHCLKFreq+0x58>)
 8104836:	5cd3      	ldrb	r3, [r2, r3]
 8104838:	f003 031f 	and.w	r3, r3, #31
 810483c:	687a      	ldr	r2, [r7, #4]
 810483e:	fa22 f303 	lsr.w	r3, r2, r3
 8104842:	4a08      	ldr	r2, [pc, #32]	@ (8104864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104844:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104846:	4b07      	ldr	r3, [pc, #28]	@ (8104864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	4a07      	ldr	r2, [pc, #28]	@ (8104868 <HAL_RCC_GetHCLKFreq+0x60>)
 810484c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810484e:	4b05      	ldr	r3, [pc, #20]	@ (8104864 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104850:	681b      	ldr	r3, [r3, #0]
}
 8104852:	4618      	mov	r0, r3
 8104854:	3708      	adds	r7, #8
 8104856:	46bd      	mov	sp, r7
 8104858:	bd80      	pop	{r7, pc}
 810485a:	bf00      	nop
 810485c:	58024400 	.word	0x58024400
 8104860:	0810e80c 	.word	0x0810e80c
 8104864:	10000004 	.word	0x10000004
 8104868:	10000000 	.word	0x10000000

0810486c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810486c:	b580      	push	{r7, lr}
 810486e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104870:	f7ff ffca 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 8104874:	4602      	mov	r2, r0
 8104876:	4b06      	ldr	r3, [pc, #24]	@ (8104890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104878:	69db      	ldr	r3, [r3, #28]
 810487a:	091b      	lsrs	r3, r3, #4
 810487c:	f003 0307 	and.w	r3, r3, #7
 8104880:	4904      	ldr	r1, [pc, #16]	@ (8104894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104882:	5ccb      	ldrb	r3, [r1, r3]
 8104884:	f003 031f 	and.w	r3, r3, #31
 8104888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810488c:	4618      	mov	r0, r3
 810488e:	bd80      	pop	{r7, pc}
 8104890:	58024400 	.word	0x58024400
 8104894:	0810e80c 	.word	0x0810e80c

08104898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104898:	b580      	push	{r7, lr}
 810489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810489c:	f7ff ffb4 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 81048a0:	4602      	mov	r2, r0
 81048a2:	4b06      	ldr	r3, [pc, #24]	@ (81048bc <HAL_RCC_GetPCLK2Freq+0x24>)
 81048a4:	69db      	ldr	r3, [r3, #28]
 81048a6:	0a1b      	lsrs	r3, r3, #8
 81048a8:	f003 0307 	and.w	r3, r3, #7
 81048ac:	4904      	ldr	r1, [pc, #16]	@ (81048c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81048ae:	5ccb      	ldrb	r3, [r1, r3]
 81048b0:	f003 031f 	and.w	r3, r3, #31
 81048b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81048b8:	4618      	mov	r0, r3
 81048ba:	bd80      	pop	{r7, pc}
 81048bc:	58024400 	.word	0x58024400
 81048c0:	0810e80c 	.word	0x0810e80c

081048c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81048c8:	b0ca      	sub	sp, #296	@ 0x128
 81048ca:	af00      	add	r7, sp, #0
 81048cc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81048d0:	2300      	movs	r3, #0
 81048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81048d6:	2300      	movs	r3, #0
 81048d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81048dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81048e8:	2500      	movs	r5, #0
 81048ea:	ea54 0305 	orrs.w	r3, r4, r5
 81048ee:	d049      	beq.n	8104984 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81048f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81048f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81048fa:	d02f      	beq.n	810495c <HAL_RCCEx_PeriphCLKConfig+0x98>
 81048fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104900:	d828      	bhi.n	8104954 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104902:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104906:	d01a      	beq.n	810493e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104908:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810490c:	d822      	bhi.n	8104954 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810490e:	2b00      	cmp	r3, #0
 8104910:	d003      	beq.n	810491a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104912:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104916:	d007      	beq.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104918:	e01c      	b.n	8104954 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810491a:	4bb8      	ldr	r3, [pc, #736]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810491e:	4ab7      	ldr	r2, [pc, #732]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104926:	e01a      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810492c:	3308      	adds	r3, #8
 810492e:	2102      	movs	r1, #2
 8104930:	4618      	mov	r0, r3
 8104932:	f001 fc8f 	bl	8106254 <RCCEx_PLL2_Config>
 8104936:	4603      	mov	r3, r0
 8104938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810493c:	e00f      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104942:	3328      	adds	r3, #40	@ 0x28
 8104944:	2102      	movs	r1, #2
 8104946:	4618      	mov	r0, r3
 8104948:	f001 fd36 	bl	81063b8 <RCCEx_PLL3_Config>
 810494c:	4603      	mov	r3, r0
 810494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104952:	e004      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104954:	2301      	movs	r3, #1
 8104956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810495a:	e000      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810495e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104962:	2b00      	cmp	r3, #0
 8104964:	d10a      	bne.n	810497c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104966:	4ba5      	ldr	r3, [pc, #660]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104968:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810496a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 810496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104974:	4aa1      	ldr	r2, [pc, #644]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104976:	430b      	orrs	r3, r1
 8104978:	6513      	str	r3, [r2, #80]	@ 0x50
 810497a:	e003      	b.n	8104984 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810497c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104988:	e9d3 2300 	ldrd	r2, r3, [r3]
 810498c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8104990:	f04f 0900 	mov.w	r9, #0
 8104994:	ea58 0309 	orrs.w	r3, r8, r9
 8104998:	d047      	beq.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81049a0:	2b04      	cmp	r3, #4
 81049a2:	d82a      	bhi.n	81049fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 81049a4:	a201      	add	r2, pc, #4	@ (adr r2, 81049ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81049a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049aa:	bf00      	nop
 81049ac:	081049c1 	.word	0x081049c1
 81049b0:	081049cf 	.word	0x081049cf
 81049b4:	081049e5 	.word	0x081049e5
 81049b8:	08104a03 	.word	0x08104a03
 81049bc:	08104a03 	.word	0x08104a03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81049c0:	4b8e      	ldr	r3, [pc, #568]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81049c4:	4a8d      	ldr	r2, [pc, #564]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81049c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81049ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049cc:	e01a      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049d2:	3308      	adds	r3, #8
 81049d4:	2100      	movs	r1, #0
 81049d6:	4618      	mov	r0, r3
 81049d8:	f001 fc3c 	bl	8106254 <RCCEx_PLL2_Config>
 81049dc:	4603      	mov	r3, r0
 81049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049e2:	e00f      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049e8:	3328      	adds	r3, #40	@ 0x28
 81049ea:	2100      	movs	r1, #0
 81049ec:	4618      	mov	r0, r3
 81049ee:	f001 fce3 	bl	81063b8 <RCCEx_PLL3_Config>
 81049f2:	4603      	mov	r3, r0
 81049f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81049f8:	e004      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81049fa:	2301      	movs	r3, #1
 81049fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104a00:	e000      	b.n	8104a04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104a02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a08:	2b00      	cmp	r3, #0
 8104a0a:	d10a      	bne.n	8104a22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a10:	f023 0107 	bic.w	r1, r3, #7
 8104a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a1a:	4a78      	ldr	r2, [pc, #480]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a1c:	430b      	orrs	r3, r1
 8104a1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8104a20:	e003      	b.n	8104a2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8104a36:	f04f 0b00 	mov.w	fp, #0
 8104a3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8104a3e:	d04c      	beq.n	8104ada <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a4a:	d030      	beq.n	8104aae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104a50:	d829      	bhi.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a54:	d02d      	beq.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8104a58:	d825      	bhi.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a5a:	2b80      	cmp	r3, #128	@ 0x80
 8104a5c:	d018      	beq.n	8104a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104a5e:	2b80      	cmp	r3, #128	@ 0x80
 8104a60:	d821      	bhi.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	d002      	beq.n	8104a6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104a66:	2b40      	cmp	r3, #64	@ 0x40
 8104a68:	d007      	beq.n	8104a7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104a6a:	e01c      	b.n	8104aa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a6c:	4b63      	ldr	r3, [pc, #396]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104a70:	4a62      	ldr	r2, [pc, #392]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104a72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a78:	e01c      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a7e:	3308      	adds	r3, #8
 8104a80:	2100      	movs	r1, #0
 8104a82:	4618      	mov	r0, r3
 8104a84:	f001 fbe6 	bl	8106254 <RCCEx_PLL2_Config>
 8104a88:	4603      	mov	r3, r0
 8104a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104a8e:	e011      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a94:	3328      	adds	r3, #40	@ 0x28
 8104a96:	2100      	movs	r1, #0
 8104a98:	4618      	mov	r0, r3
 8104a9a:	f001 fc8d 	bl	81063b8 <RCCEx_PLL3_Config>
 8104a9e:	4603      	mov	r3, r0
 8104aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104aa4:	e006      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104aa6:	2301      	movs	r3, #1
 8104aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104aac:	e002      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104aae:	bf00      	nop
 8104ab0:	e000      	b.n	8104ab4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ab8:	2b00      	cmp	r3, #0
 8104aba:	d10a      	bne.n	8104ad2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104abc:	4b4f      	ldr	r3, [pc, #316]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104ac0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8104ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104aca:	4a4c      	ldr	r2, [pc, #304]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104acc:	430b      	orrs	r3, r1
 8104ace:	6513      	str	r3, [r2, #80]	@ 0x50
 8104ad0:	e003      	b.n	8104ada <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ae2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104ae6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8104aea:	2300      	movs	r3, #0
 8104aec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8104af0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8104af4:	460b      	mov	r3, r1
 8104af6:	4313      	orrs	r3, r2
 8104af8:	d053      	beq.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104b02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104b06:	d035      	beq.n	8104b74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104b08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104b0c:	d82e      	bhi.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104b12:	d031      	beq.n	8104b78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104b14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104b18:	d828      	bhi.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104b1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104b1e:	d01a      	beq.n	8104b56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104b24:	d822      	bhi.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d003      	beq.n	8104b32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104b2e:	d007      	beq.n	8104b40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104b30:	e01c      	b.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b32:	4b32      	ldr	r3, [pc, #200]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b36:	4a31      	ldr	r2, [pc, #196]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b3e:	e01c      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b44:	3308      	adds	r3, #8
 8104b46:	2100      	movs	r1, #0
 8104b48:	4618      	mov	r0, r3
 8104b4a:	f001 fb83 	bl	8106254 <RCCEx_PLL2_Config>
 8104b4e:	4603      	mov	r3, r0
 8104b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104b54:	e011      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b5a:	3328      	adds	r3, #40	@ 0x28
 8104b5c:	2100      	movs	r1, #0
 8104b5e:	4618      	mov	r0, r3
 8104b60:	f001 fc2a 	bl	81063b8 <RCCEx_PLL3_Config>
 8104b64:	4603      	mov	r3, r0
 8104b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b6a:	e006      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104b6c:	2301      	movs	r3, #1
 8104b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104b72:	e002      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104b74:	bf00      	nop
 8104b76:	e000      	b.n	8104b7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b7e:	2b00      	cmp	r3, #0
 8104b80:	d10b      	bne.n	8104b9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104b82:	4b1e      	ldr	r3, [pc, #120]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b86:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8104b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104b92:	4a1a      	ldr	r2, [pc, #104]	@ (8104bfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b94:	430b      	orrs	r3, r1
 8104b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8104b98:	e003      	b.n	8104ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104baa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8104bae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8104bb2:	2300      	movs	r3, #0
 8104bb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8104bb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8104bbc:	460b      	mov	r3, r1
 8104bbe:	4313      	orrs	r3, r2
 8104bc0:	d056      	beq.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104bce:	d038      	beq.n	8104c42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104bd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104bd4:	d831      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104bda:	d034      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104bdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104be0:	d82b      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104be6:	d01d      	beq.n	8104c24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104be8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104bec:	d825      	bhi.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bee:	2b00      	cmp	r3, #0
 8104bf0:	d006      	beq.n	8104c00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104bf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104bf6:	d00a      	beq.n	8104c0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104bf8:	e01f      	b.n	8104c3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104bfa:	bf00      	nop
 8104bfc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c00:	4ba2      	ldr	r3, [pc, #648]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c04:	4aa1      	ldr	r2, [pc, #644]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104c0c:	e01c      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c12:	3308      	adds	r3, #8
 8104c14:	2100      	movs	r1, #0
 8104c16:	4618      	mov	r0, r3
 8104c18:	f001 fb1c 	bl	8106254 <RCCEx_PLL2_Config>
 8104c1c:	4603      	mov	r3, r0
 8104c1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104c22:	e011      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c28:	3328      	adds	r3, #40	@ 0x28
 8104c2a:	2100      	movs	r1, #0
 8104c2c:	4618      	mov	r0, r3
 8104c2e:	f001 fbc3 	bl	81063b8 <RCCEx_PLL3_Config>
 8104c32:	4603      	mov	r3, r0
 8104c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104c38:	e006      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104c3a:	2301      	movs	r3, #1
 8104c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104c40:	e002      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104c42:	bf00      	nop
 8104c44:	e000      	b.n	8104c48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d10b      	bne.n	8104c68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104c50:	4b8e      	ldr	r3, [pc, #568]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104c54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8104c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104c60:	4a8a      	ldr	r2, [pc, #552]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104c62:	430b      	orrs	r3, r1
 8104c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8104c66:	e003      	b.n	8104c70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8104c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8104c80:	2300      	movs	r3, #0
 8104c82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8104c86:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8104c8a:	460b      	mov	r3, r1
 8104c8c:	4313      	orrs	r3, r2
 8104c8e:	d03a      	beq.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8104c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104c96:	2b30      	cmp	r3, #48	@ 0x30
 8104c98:	d01f      	beq.n	8104cda <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104c9a:	2b30      	cmp	r3, #48	@ 0x30
 8104c9c:	d819      	bhi.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104c9e:	2b20      	cmp	r3, #32
 8104ca0:	d00c      	beq.n	8104cbc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104ca2:	2b20      	cmp	r3, #32
 8104ca4:	d815      	bhi.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	d019      	beq.n	8104cde <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8104caa:	2b10      	cmp	r3, #16
 8104cac:	d111      	bne.n	8104cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cae:	4b77      	ldr	r3, [pc, #476]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cb2:	4a76      	ldr	r2, [pc, #472]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104cba:	e011      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cc0:	3308      	adds	r3, #8
 8104cc2:	2102      	movs	r1, #2
 8104cc4:	4618      	mov	r0, r3
 8104cc6:	f001 fac5 	bl	8106254 <RCCEx_PLL2_Config>
 8104cca:	4603      	mov	r3, r0
 8104ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104cd0:	e006      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104cd2:	2301      	movs	r3, #1
 8104cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104cd8:	e002      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104cda:	bf00      	nop
 8104cdc:	e000      	b.n	8104ce0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ce4:	2b00      	cmp	r3, #0
 8104ce6:	d10a      	bne.n	8104cfe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104ce8:	4b68      	ldr	r3, [pc, #416]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104cf6:	4a65      	ldr	r2, [pc, #404]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104cf8:	430b      	orrs	r3, r1
 8104cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104cfc:	e003      	b.n	8104d06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8104d12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104d16:	2300      	movs	r3, #0
 8104d18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8104d1c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8104d20:	460b      	mov	r3, r1
 8104d22:	4313      	orrs	r3, r2
 8104d24:	d051      	beq.n	8104dca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104d30:	d035      	beq.n	8104d9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104d32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104d36:	d82e      	bhi.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104d3c:	d031      	beq.n	8104da2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8104d3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104d42:	d828      	bhi.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104d48:	d01a      	beq.n	8104d80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104d4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104d4e:	d822      	bhi.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d003      	beq.n	8104d5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104d58:	d007      	beq.n	8104d6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104d5a:	e01c      	b.n	8104d96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d60:	4a4a      	ldr	r2, [pc, #296]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d68:	e01c      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d6e:	3308      	adds	r3, #8
 8104d70:	2100      	movs	r1, #0
 8104d72:	4618      	mov	r0, r3
 8104d74:	f001 fa6e 	bl	8106254 <RCCEx_PLL2_Config>
 8104d78:	4603      	mov	r3, r0
 8104d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d7e:	e011      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d84:	3328      	adds	r3, #40	@ 0x28
 8104d86:	2100      	movs	r1, #0
 8104d88:	4618      	mov	r0, r3
 8104d8a:	f001 fb15 	bl	81063b8 <RCCEx_PLL3_Config>
 8104d8e:	4603      	mov	r3, r0
 8104d90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104d94:	e006      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d96:	2301      	movs	r3, #1
 8104d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104d9c:	e002      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104d9e:	bf00      	nop
 8104da0:	e000      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104da8:	2b00      	cmp	r3, #0
 8104daa:	d10a      	bne.n	8104dc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104dac:	4b37      	ldr	r3, [pc, #220]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104db0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8104db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104dba:	4a34      	ldr	r2, [pc, #208]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dbc:	430b      	orrs	r3, r1
 8104dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8104dc0:	e003      	b.n	8104dca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8104dda:	2300      	movs	r3, #0
 8104ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8104de0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8104de4:	460b      	mov	r3, r1
 8104de6:	4313      	orrs	r3, r2
 8104de8:	d056      	beq.n	8104e98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104df4:	d033      	beq.n	8104e5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104df6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104dfa:	d82c      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104e00:	d02f      	beq.n	8104e62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104e02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104e06:	d826      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104e08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104e0c:	d02b      	beq.n	8104e66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104e0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104e12:	d820      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e18:	d012      	beq.n	8104e40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104e1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104e1e:	d81a      	bhi.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104e20:	2b00      	cmp	r3, #0
 8104e22:	d022      	beq.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104e28:	d115      	bne.n	8104e56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e2e:	3308      	adds	r3, #8
 8104e30:	2101      	movs	r1, #1
 8104e32:	4618      	mov	r0, r3
 8104e34:	f001 fa0e 	bl	8106254 <RCCEx_PLL2_Config>
 8104e38:	4603      	mov	r3, r0
 8104e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104e3e:	e015      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e44:	3328      	adds	r3, #40	@ 0x28
 8104e46:	2101      	movs	r1, #1
 8104e48:	4618      	mov	r0, r3
 8104e4a:	f001 fab5 	bl	81063b8 <RCCEx_PLL3_Config>
 8104e4e:	4603      	mov	r3, r0
 8104e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104e54:	e00a      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e56:	2301      	movs	r3, #1
 8104e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104e5c:	e006      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e5e:	bf00      	nop
 8104e60:	e004      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e62:	bf00      	nop
 8104e64:	e002      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e66:	bf00      	nop
 8104e68:	e000      	b.n	8104e6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d10d      	bne.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104e74:	4b05      	ldr	r3, [pc, #20]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104e78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8104e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104e82:	4a02      	ldr	r2, [pc, #8]	@ (8104e8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e84:	430b      	orrs	r3, r1
 8104e86:	6513      	str	r3, [r2, #80]	@ 0x50
 8104e88:	e006      	b.n	8104e98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8104e8a:	bf00      	nop
 8104e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8104e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ea0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8104ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8104ea8:	2300      	movs	r3, #0
 8104eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8104eae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8104eb2:	460b      	mov	r3, r1
 8104eb4:	4313      	orrs	r3, r2
 8104eb6:	d055      	beq.n	8104f64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8104eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104ec4:	d033      	beq.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8104ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8104eca:	d82c      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104ed0:	d02f      	beq.n	8104f32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8104ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104ed6:	d826      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ed8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104edc:	d02b      	beq.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8104ede:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8104ee2:	d820      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104ee8:	d012      	beq.n	8104f10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104eee:	d81a      	bhi.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104ef0:	2b00      	cmp	r3, #0
 8104ef2:	d022      	beq.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8104ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104ef8:	d115      	bne.n	8104f26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104efe:	3308      	adds	r3, #8
 8104f00:	2101      	movs	r1, #1
 8104f02:	4618      	mov	r0, r3
 8104f04:	f001 f9a6 	bl	8106254 <RCCEx_PLL2_Config>
 8104f08:	4603      	mov	r3, r0
 8104f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104f0e:	e015      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f14:	3328      	adds	r3, #40	@ 0x28
 8104f16:	2101      	movs	r1, #1
 8104f18:	4618      	mov	r0, r3
 8104f1a:	f001 fa4d 	bl	81063b8 <RCCEx_PLL3_Config>
 8104f1e:	4603      	mov	r3, r0
 8104f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104f24:	e00a      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8104f26:	2301      	movs	r3, #1
 8104f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104f2c:	e006      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f2e:	bf00      	nop
 8104f30:	e004      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f32:	bf00      	nop
 8104f34:	e002      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f36:	bf00      	nop
 8104f38:	e000      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f40:	2b00      	cmp	r3, #0
 8104f42:	d10b      	bne.n	8104f5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8104f44:	4ba4      	ldr	r3, [pc, #656]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104f48:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8104f54:	4aa0      	ldr	r2, [pc, #640]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104f56:	430b      	orrs	r3, r1
 8104f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8104f5a:	e003      	b.n	8104f64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8104f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8104f74:	2300      	movs	r3, #0
 8104f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8104f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8104f7e:	460b      	mov	r3, r1
 8104f80:	4313      	orrs	r3, r2
 8104f82:	d037      	beq.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f8e:	d00e      	beq.n	8104fae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8104f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104f94:	d816      	bhi.n	8104fc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8104f96:	2b00      	cmp	r3, #0
 8104f98:	d018      	beq.n	8104fcc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8104f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104f9e:	d111      	bne.n	8104fc4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104fa0:	4b8d      	ldr	r3, [pc, #564]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104fa4:	4a8c      	ldr	r2, [pc, #560]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104fac:	e00f      	b.n	8104fce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fb2:	3308      	adds	r3, #8
 8104fb4:	2101      	movs	r1, #1
 8104fb6:	4618      	mov	r0, r3
 8104fb8:	f001 f94c 	bl	8106254 <RCCEx_PLL2_Config>
 8104fbc:	4603      	mov	r3, r0
 8104fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104fc2:	e004      	b.n	8104fce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104fc4:	2301      	movs	r3, #1
 8104fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104fca:	e000      	b.n	8104fce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8104fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104fd2:	2b00      	cmp	r3, #0
 8104fd4:	d10a      	bne.n	8104fec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104fd6:	4b80      	ldr	r3, [pc, #512]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104fda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104fe4:	4a7c      	ldr	r2, [pc, #496]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104fe6:	430b      	orrs	r3, r1
 8104fe8:	6513      	str	r3, [r2, #80]	@ 0x50
 8104fea:	e003      	b.n	8104ff4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ffc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8105000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8105004:	2300      	movs	r3, #0
 8105006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810500a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810500e:	460b      	mov	r3, r1
 8105010:	4313      	orrs	r3, r2
 8105012:	d039      	beq.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810501a:	2b03      	cmp	r3, #3
 810501c:	d81c      	bhi.n	8105058 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810501e:	a201      	add	r2, pc, #4	@ (adr r2, 8105024 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105024:	08105061 	.word	0x08105061
 8105028:	08105035 	.word	0x08105035
 810502c:	08105043 	.word	0x08105043
 8105030:	08105061 	.word	0x08105061
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105034:	4b68      	ldr	r3, [pc, #416]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105038:	4a67      	ldr	r2, [pc, #412]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810503a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810503e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105040:	e00f      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105046:	3308      	adds	r3, #8
 8105048:	2102      	movs	r1, #2
 810504a:	4618      	mov	r0, r3
 810504c:	f001 f902 	bl	8106254 <RCCEx_PLL2_Config>
 8105050:	4603      	mov	r3, r0
 8105052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105056:	e004      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105058:	2301      	movs	r3, #1
 810505a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810505e:	e000      	b.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105066:	2b00      	cmp	r3, #0
 8105068:	d10a      	bne.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810506a:	4b5b      	ldr	r3, [pc, #364]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810506c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810506e:	f023 0103 	bic.w	r1, r3, #3
 8105072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105078:	4a57      	ldr	r2, [pc, #348]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810507a:	430b      	orrs	r3, r1
 810507c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810507e:	e003      	b.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105090:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8105094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105098:	2300      	movs	r3, #0
 810509a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810509e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81050a2:	460b      	mov	r3, r1
 81050a4:	4313      	orrs	r3, r2
 81050a6:	f000 809f 	beq.w	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81050aa:	4b4c      	ldr	r3, [pc, #304]	@ (81051dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4a4b      	ldr	r2, [pc, #300]	@ (81051dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81050b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81050b6:	f7fe f88d 	bl	81031d4 <HAL_GetTick>
 81050ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81050be:	e00b      	b.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81050c0:	f7fe f888 	bl	81031d4 <HAL_GetTick>
 81050c4:	4602      	mov	r2, r0
 81050c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81050ca:	1ad3      	subs	r3, r2, r3
 81050cc:	2b64      	cmp	r3, #100	@ 0x64
 81050ce:	d903      	bls.n	81050d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81050d0:	2303      	movs	r3, #3
 81050d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81050d6:	e005      	b.n	81050e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81050d8:	4b40      	ldr	r3, [pc, #256]	@ (81051dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81050da:	681b      	ldr	r3, [r3, #0]
 81050dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81050e0:	2b00      	cmp	r3, #0
 81050e2:	d0ed      	beq.n	81050c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 81050e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	d179      	bne.n	81051e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81050ec:	4b3a      	ldr	r3, [pc, #232]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 81050f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81050f8:	4053      	eors	r3, r2
 81050fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81050fe:	2b00      	cmp	r3, #0
 8105100:	d015      	beq.n	810512e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105102:	4b35      	ldr	r3, [pc, #212]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810510a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810510e:	4b32      	ldr	r3, [pc, #200]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105112:	4a31      	ldr	r2, [pc, #196]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8105118:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810511a:	4b2f      	ldr	r3, [pc, #188]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810511c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810511e:	4a2e      	ldr	r2, [pc, #184]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8105124:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105126:	4a2c      	ldr	r2, [pc, #176]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810512c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810512e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810513a:	d118      	bne.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810513c:	f7fe f84a 	bl	81031d4 <HAL_GetTick>
 8105140:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105144:	e00d      	b.n	8105162 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105146:	f7fe f845 	bl	81031d4 <HAL_GetTick>
 810514a:	4602      	mov	r2, r0
 810514c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8105150:	1ad2      	subs	r2, r2, r3
 8105152:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105156:	429a      	cmp	r2, r3
 8105158:	d903      	bls.n	8105162 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810515a:	2303      	movs	r3, #3
 810515c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8105160:	e005      	b.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105162:	4b1d      	ldr	r3, [pc, #116]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105166:	f003 0302 	and.w	r3, r3, #2
 810516a:	2b00      	cmp	r3, #0
 810516c:	d0eb      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105172:	2b00      	cmp	r3, #0
 8105174:	d12b      	bne.n	81051ce <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810517a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810517e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105186:	d110      	bne.n	81051aa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105188:	4b13      	ldr	r3, [pc, #76]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810518a:	691b      	ldr	r3, [r3, #16]
 810518c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105198:	091b      	lsrs	r3, r3, #4
 810519a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810519e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81051a2:	4a0d      	ldr	r2, [pc, #52]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051a4:	430b      	orrs	r3, r1
 81051a6:	6113      	str	r3, [r2, #16]
 81051a8:	e005      	b.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81051aa:	4b0b      	ldr	r3, [pc, #44]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051ac:	691b      	ldr	r3, [r3, #16]
 81051ae:	4a0a      	ldr	r2, [pc, #40]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81051b4:	6113      	str	r3, [r2, #16]
 81051b6:	4b08      	ldr	r3, [pc, #32]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81051c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81051c6:	4a04      	ldr	r2, [pc, #16]	@ (81051d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051c8:	430b      	orrs	r3, r1
 81051ca:	6713      	str	r3, [r2, #112]	@ 0x70
 81051cc:	e00c      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81051ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 81051d6:	e007      	b.n	81051e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81051d8:	58024400 	.word	0x58024400
 81051dc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81051e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051f0:	f002 0301 	and.w	r3, r2, #1
 81051f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 81051f8:	2300      	movs	r3, #0
 81051fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 81051fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8105202:	460b      	mov	r3, r1
 8105204:	4313      	orrs	r3, r2
 8105206:	f000 8089 	beq.w	810531c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810520e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8105210:	2b28      	cmp	r3, #40	@ 0x28
 8105212:	d86b      	bhi.n	81052ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8105214:	a201      	add	r2, pc, #4	@ (adr r2, 810521c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8105216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810521a:	bf00      	nop
 810521c:	081052f5 	.word	0x081052f5
 8105220:	081052ed 	.word	0x081052ed
 8105224:	081052ed 	.word	0x081052ed
 8105228:	081052ed 	.word	0x081052ed
 810522c:	081052ed 	.word	0x081052ed
 8105230:	081052ed 	.word	0x081052ed
 8105234:	081052ed 	.word	0x081052ed
 8105238:	081052ed 	.word	0x081052ed
 810523c:	081052c1 	.word	0x081052c1
 8105240:	081052ed 	.word	0x081052ed
 8105244:	081052ed 	.word	0x081052ed
 8105248:	081052ed 	.word	0x081052ed
 810524c:	081052ed 	.word	0x081052ed
 8105250:	081052ed 	.word	0x081052ed
 8105254:	081052ed 	.word	0x081052ed
 8105258:	081052ed 	.word	0x081052ed
 810525c:	081052d7 	.word	0x081052d7
 8105260:	081052ed 	.word	0x081052ed
 8105264:	081052ed 	.word	0x081052ed
 8105268:	081052ed 	.word	0x081052ed
 810526c:	081052ed 	.word	0x081052ed
 8105270:	081052ed 	.word	0x081052ed
 8105274:	081052ed 	.word	0x081052ed
 8105278:	081052ed 	.word	0x081052ed
 810527c:	081052f5 	.word	0x081052f5
 8105280:	081052ed 	.word	0x081052ed
 8105284:	081052ed 	.word	0x081052ed
 8105288:	081052ed 	.word	0x081052ed
 810528c:	081052ed 	.word	0x081052ed
 8105290:	081052ed 	.word	0x081052ed
 8105294:	081052ed 	.word	0x081052ed
 8105298:	081052ed 	.word	0x081052ed
 810529c:	081052f5 	.word	0x081052f5
 81052a0:	081052ed 	.word	0x081052ed
 81052a4:	081052ed 	.word	0x081052ed
 81052a8:	081052ed 	.word	0x081052ed
 81052ac:	081052ed 	.word	0x081052ed
 81052b0:	081052ed 	.word	0x081052ed
 81052b4:	081052ed 	.word	0x081052ed
 81052b8:	081052ed 	.word	0x081052ed
 81052bc:	081052f5 	.word	0x081052f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81052c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052c4:	3308      	adds	r3, #8
 81052c6:	2101      	movs	r1, #1
 81052c8:	4618      	mov	r0, r3
 81052ca:	f000 ffc3 	bl	8106254 <RCCEx_PLL2_Config>
 81052ce:	4603      	mov	r3, r0
 81052d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81052d4:	e00f      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052da:	3328      	adds	r3, #40	@ 0x28
 81052dc:	2101      	movs	r1, #1
 81052de:	4618      	mov	r0, r3
 81052e0:	f001 f86a 	bl	81063b8 <RCCEx_PLL3_Config>
 81052e4:	4603      	mov	r3, r0
 81052e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81052ea:	e004      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81052ec:	2301      	movs	r3, #1
 81052ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81052f2:	e000      	b.n	81052f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 81052f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81052f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81052fa:	2b00      	cmp	r3, #0
 81052fc:	d10a      	bne.n	8105314 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81052fe:	4bbf      	ldr	r3, [pc, #764]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105302:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8105306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810530a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810530c:	4abb      	ldr	r2, [pc, #748]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810530e:	430b      	orrs	r3, r1
 8105310:	6553      	str	r3, [r2, #84]	@ 0x54
 8105312:	e003      	b.n	810531c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810531c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105324:	f002 0302 	and.w	r3, r2, #2
 8105328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 810532c:	2300      	movs	r3, #0
 810532e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8105332:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8105336:	460b      	mov	r3, r1
 8105338:	4313      	orrs	r3, r2
 810533a:	d041      	beq.n	81053c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810533c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105342:	2b05      	cmp	r3, #5
 8105344:	d824      	bhi.n	8105390 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105346:	a201      	add	r2, pc, #4	@ (adr r2, 810534c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810534c:	08105399 	.word	0x08105399
 8105350:	08105365 	.word	0x08105365
 8105354:	0810537b 	.word	0x0810537b
 8105358:	08105399 	.word	0x08105399
 810535c:	08105399 	.word	0x08105399
 8105360:	08105399 	.word	0x08105399
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105368:	3308      	adds	r3, #8
 810536a:	2101      	movs	r1, #1
 810536c:	4618      	mov	r0, r3
 810536e:	f000 ff71 	bl	8106254 <RCCEx_PLL2_Config>
 8105372:	4603      	mov	r3, r0
 8105374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105378:	e00f      	b.n	810539a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810537e:	3328      	adds	r3, #40	@ 0x28
 8105380:	2101      	movs	r1, #1
 8105382:	4618      	mov	r0, r3
 8105384:	f001 f818 	bl	81063b8 <RCCEx_PLL3_Config>
 8105388:	4603      	mov	r3, r0
 810538a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810538e:	e004      	b.n	810539a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105390:	2301      	movs	r3, #1
 8105392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105396:	e000      	b.n	810539a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105398:	bf00      	nop
    }

    if (ret == HAL_OK)
 810539a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d10a      	bne.n	81053b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81053a2:	4b96      	ldr	r3, [pc, #600]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81053a6:	f023 0107 	bic.w	r1, r3, #7
 81053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81053b0:	4a92      	ldr	r2, [pc, #584]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81053b2:	430b      	orrs	r3, r1
 81053b4:	6553      	str	r3, [r2, #84]	@ 0x54
 81053b6:	e003      	b.n	81053c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81053b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81053bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053c8:	f002 0304 	and.w	r3, r2, #4
 81053cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 81053d0:	2300      	movs	r3, #0
 81053d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 81053d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 81053da:	460b      	mov	r3, r1
 81053dc:	4313      	orrs	r3, r2
 81053de:	d044      	beq.n	810546a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81053e8:	2b05      	cmp	r3, #5
 81053ea:	d825      	bhi.n	8105438 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81053ec:	a201      	add	r2, pc, #4	@ (adr r2, 81053f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053f2:	bf00      	nop
 81053f4:	08105441 	.word	0x08105441
 81053f8:	0810540d 	.word	0x0810540d
 81053fc:	08105423 	.word	0x08105423
 8105400:	08105441 	.word	0x08105441
 8105404:	08105441 	.word	0x08105441
 8105408:	08105441 	.word	0x08105441
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105410:	3308      	adds	r3, #8
 8105412:	2101      	movs	r1, #1
 8105414:	4618      	mov	r0, r3
 8105416:	f000 ff1d 	bl	8106254 <RCCEx_PLL2_Config>
 810541a:	4603      	mov	r3, r0
 810541c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105420:	e00f      	b.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105426:	3328      	adds	r3, #40	@ 0x28
 8105428:	2101      	movs	r1, #1
 810542a:	4618      	mov	r0, r3
 810542c:	f000 ffc4 	bl	81063b8 <RCCEx_PLL3_Config>
 8105430:	4603      	mov	r3, r0
 8105432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105436:	e004      	b.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105438:	2301      	movs	r3, #1
 810543a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810543e:	e000      	b.n	8105442 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105446:	2b00      	cmp	r3, #0
 8105448:	d10b      	bne.n	8105462 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810544a:	4b6c      	ldr	r3, [pc, #432]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810544e:	f023 0107 	bic.w	r1, r3, #7
 8105452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810545a:	4a68      	ldr	r2, [pc, #416]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810545c:	430b      	orrs	r3, r1
 810545e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105460:	e003      	b.n	810546a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810546a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105472:	f002 0320 	and.w	r3, r2, #32
 8105476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810547a:	2300      	movs	r3, #0
 810547c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8105484:	460b      	mov	r3, r1
 8105486:	4313      	orrs	r3, r2
 8105488:	d055      	beq.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105492:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105496:	d033      	beq.n	8105500 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105498:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810549c:	d82c      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810549e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054a2:	d02f      	beq.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81054a8:	d826      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81054aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81054ae:	d02b      	beq.n	8105508 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81054b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81054b4:	d820      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81054b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81054ba:	d012      	beq.n	81054e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81054bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81054c0:	d81a      	bhi.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	d022      	beq.n	810550c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81054c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81054ca:	d115      	bne.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054d0:	3308      	adds	r3, #8
 81054d2:	2100      	movs	r1, #0
 81054d4:	4618      	mov	r0, r3
 81054d6:	f000 febd 	bl	8106254 <RCCEx_PLL2_Config>
 81054da:	4603      	mov	r3, r0
 81054dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81054e0:	e015      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81054e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054e6:	3328      	adds	r3, #40	@ 0x28
 81054e8:	2102      	movs	r1, #2
 81054ea:	4618      	mov	r0, r3
 81054ec:	f000 ff64 	bl	81063b8 <RCCEx_PLL3_Config>
 81054f0:	4603      	mov	r3, r0
 81054f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81054f6:	e00a      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81054f8:	2301      	movs	r3, #1
 81054fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81054fe:	e006      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105500:	bf00      	nop
 8105502:	e004      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105504:	bf00      	nop
 8105506:	e002      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105508:	bf00      	nop
 810550a:	e000      	b.n	810550e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810550c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105512:	2b00      	cmp	r3, #0
 8105514:	d10b      	bne.n	810552e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105516:	4b39      	ldr	r3, [pc, #228]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810551a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8105526:	4a35      	ldr	r2, [pc, #212]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105528:	430b      	orrs	r3, r1
 810552a:	6553      	str	r3, [r2, #84]	@ 0x54
 810552c:	e003      	b.n	8105536 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810552e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810553e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8105542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8105546:	2300      	movs	r3, #0
 8105548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 810554c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8105550:	460b      	mov	r3, r1
 8105552:	4313      	orrs	r3, r2
 8105554:	d058      	beq.n	8105608 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810555a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810555e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105562:	d033      	beq.n	81055cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8105564:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105568:	d82c      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810556a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810556e:	d02f      	beq.n	81055d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105574:	d826      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 810557a:	d02b      	beq.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810557c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105580:	d820      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105586:	d012      	beq.n	81055ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810558c:	d81a      	bhi.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810558e:	2b00      	cmp	r3, #0
 8105590:	d022      	beq.n	81055d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8105592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105596:	d115      	bne.n	81055c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810559c:	3308      	adds	r3, #8
 810559e:	2100      	movs	r1, #0
 81055a0:	4618      	mov	r0, r3
 81055a2:	f000 fe57 	bl	8106254 <RCCEx_PLL2_Config>
 81055a6:	4603      	mov	r3, r0
 81055a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81055ac:	e015      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055b2:	3328      	adds	r3, #40	@ 0x28
 81055b4:	2102      	movs	r1, #2
 81055b6:	4618      	mov	r0, r3
 81055b8:	f000 fefe 	bl	81063b8 <RCCEx_PLL3_Config>
 81055bc:	4603      	mov	r3, r0
 81055be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81055c2:	e00a      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055c4:	2301      	movs	r3, #1
 81055c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81055ca:	e006      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055cc:	bf00      	nop
 81055ce:	e004      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055d0:	bf00      	nop
 81055d2:	e002      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055d4:	bf00      	nop
 81055d6:	e000      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81055da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055de:	2b00      	cmp	r3, #0
 81055e0:	d10e      	bne.n	8105600 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81055e2:	4b06      	ldr	r3, [pc, #24]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 81055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81055f2:	4a02      	ldr	r2, [pc, #8]	@ (81055fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055f4:	430b      	orrs	r3, r1
 81055f6:	6593      	str	r3, [r2, #88]	@ 0x58
 81055f8:	e006      	b.n	8105608 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 81055fa:	bf00      	nop
 81055fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105610:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8105614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8105618:	2300      	movs	r3, #0
 810561a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810561e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8105622:	460b      	mov	r3, r1
 8105624:	4313      	orrs	r3, r2
 8105626:	d055      	beq.n	81056d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810562c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105630:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8105634:	d033      	beq.n	810569e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105636:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810563a:	d82c      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810563c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105640:	d02f      	beq.n	81056a2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105646:	d826      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105648:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810564c:	d02b      	beq.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810564e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8105652:	d820      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105658:	d012      	beq.n	8105680 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810565a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810565e:	d81a      	bhi.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105660:	2b00      	cmp	r3, #0
 8105662:	d022      	beq.n	81056aa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105668:	d115      	bne.n	8105696 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810566e:	3308      	adds	r3, #8
 8105670:	2100      	movs	r1, #0
 8105672:	4618      	mov	r0, r3
 8105674:	f000 fdee 	bl	8106254 <RCCEx_PLL2_Config>
 8105678:	4603      	mov	r3, r0
 810567a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810567e:	e015      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105684:	3328      	adds	r3, #40	@ 0x28
 8105686:	2102      	movs	r1, #2
 8105688:	4618      	mov	r0, r3
 810568a:	f000 fe95 	bl	81063b8 <RCCEx_PLL3_Config>
 810568e:	4603      	mov	r3, r0
 8105690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105694:	e00a      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105696:	2301      	movs	r3, #1
 8105698:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810569c:	e006      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810569e:	bf00      	nop
 81056a0:	e004      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81056a2:	bf00      	nop
 81056a4:	e002      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81056a6:	bf00      	nop
 81056a8:	e000      	b.n	81056ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81056aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81056ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056b0:	2b00      	cmp	r3, #0
 81056b2:	d10b      	bne.n	81056cc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81056b4:	4ba1      	ldr	r3, [pc, #644]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81056b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 81056bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81056c4:	4a9d      	ldr	r2, [pc, #628]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81056c6:	430b      	orrs	r3, r1
 81056c8:	6593      	str	r3, [r2, #88]	@ 0x58
 81056ca:	e003      	b.n	81056d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056dc:	f002 0308 	and.w	r3, r2, #8
 81056e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 81056e4:	2300      	movs	r3, #0
 81056e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 81056ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 81056ee:	460b      	mov	r3, r1
 81056f0:	4313      	orrs	r3, r2
 81056f2:	d01e      	beq.n	8105732 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81056fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105700:	d10c      	bne.n	810571c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105706:	3328      	adds	r3, #40	@ 0x28
 8105708:	2102      	movs	r1, #2
 810570a:	4618      	mov	r0, r3
 810570c:	f000 fe54 	bl	81063b8 <RCCEx_PLL3_Config>
 8105710:	4603      	mov	r3, r0
 8105712:	2b00      	cmp	r3, #0
 8105714:	d002      	beq.n	810571c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105716:	2301      	movs	r3, #1
 8105718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810571c:	4b87      	ldr	r3, [pc, #540]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810571e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105720:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8105724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810572c:	4a83      	ldr	r2, [pc, #524]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810572e:	430b      	orrs	r3, r1
 8105730:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105736:	e9d3 2300 	ldrd	r2, r3, [r3]
 810573a:	f002 0310 	and.w	r3, r2, #16
 810573e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8105742:	2300      	movs	r3, #0
 8105744:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8105748:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 810574c:	460b      	mov	r3, r1
 810574e:	4313      	orrs	r3, r2
 8105750:	d01e      	beq.n	8105790 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105756:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810575a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810575e:	d10c      	bne.n	810577a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105764:	3328      	adds	r3, #40	@ 0x28
 8105766:	2102      	movs	r1, #2
 8105768:	4618      	mov	r0, r3
 810576a:	f000 fe25 	bl	81063b8 <RCCEx_PLL3_Config>
 810576e:	4603      	mov	r3, r0
 8105770:	2b00      	cmp	r3, #0
 8105772:	d002      	beq.n	810577a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105774:	2301      	movs	r3, #1
 8105776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810577a:	4b70      	ldr	r3, [pc, #448]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810577e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105786:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810578a:	4a6c      	ldr	r2, [pc, #432]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810578c:	430b      	orrs	r3, r1
 810578e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105798:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 810579c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81057a0:	2300      	movs	r3, #0
 81057a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81057a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81057aa:	460b      	mov	r3, r1
 81057ac:	4313      	orrs	r3, r2
 81057ae:	d03e      	beq.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81057b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81057bc:	d022      	beq.n	8105804 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81057be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81057c2:	d81b      	bhi.n	81057fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81057c4:	2b00      	cmp	r3, #0
 81057c6:	d003      	beq.n	81057d0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81057c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81057cc:	d00b      	beq.n	81057e6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81057ce:	e015      	b.n	81057fc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81057d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057d4:	3308      	adds	r3, #8
 81057d6:	2100      	movs	r1, #0
 81057d8:	4618      	mov	r0, r3
 81057da:	f000 fd3b 	bl	8106254 <RCCEx_PLL2_Config>
 81057de:	4603      	mov	r3, r0
 81057e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81057e4:	e00f      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057ea:	3328      	adds	r3, #40	@ 0x28
 81057ec:	2102      	movs	r1, #2
 81057ee:	4618      	mov	r0, r3
 81057f0:	f000 fde2 	bl	81063b8 <RCCEx_PLL3_Config>
 81057f4:	4603      	mov	r3, r0
 81057f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81057fa:	e004      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057fc:	2301      	movs	r3, #1
 81057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105802:	e000      	b.n	8105806 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810580a:	2b00      	cmp	r3, #0
 810580c:	d10b      	bne.n	8105826 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810580e:	4b4b      	ldr	r3, [pc, #300]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105812:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8105816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810581a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810581e:	4a47      	ldr	r2, [pc, #284]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105820:	430b      	orrs	r3, r1
 8105822:	6593      	str	r3, [r2, #88]	@ 0x58
 8105824:	e003      	b.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810582a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105836:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810583a:	67bb      	str	r3, [r7, #120]	@ 0x78
 810583c:	2300      	movs	r3, #0
 810583e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8105840:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8105844:	460b      	mov	r3, r1
 8105846:	4313      	orrs	r3, r2
 8105848:	d03b      	beq.n	81058c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105856:	d01f      	beq.n	8105898 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810585c:	d818      	bhi.n	8105890 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810585e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105862:	d003      	beq.n	810586c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105868:	d007      	beq.n	810587a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810586a:	e011      	b.n	8105890 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810586c:	4b33      	ldr	r3, [pc, #204]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105870:	4a32      	ldr	r2, [pc, #200]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105878:	e00f      	b.n	810589a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810587e:	3328      	adds	r3, #40	@ 0x28
 8105880:	2101      	movs	r1, #1
 8105882:	4618      	mov	r0, r3
 8105884:	f000 fd98 	bl	81063b8 <RCCEx_PLL3_Config>
 8105888:	4603      	mov	r3, r0
 810588a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810588e:	e004      	b.n	810589a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105890:	2301      	movs	r3, #1
 8105892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105896:	e000      	b.n	810589a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105898:	bf00      	nop
    }

    if (ret == HAL_OK)
 810589a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d10b      	bne.n	81058ba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81058a2:	4b26      	ldr	r3, [pc, #152]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81058a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81058b2:	4a22      	ldr	r2, [pc, #136]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058b4:	430b      	orrs	r3, r1
 81058b6:	6553      	str	r3, [r2, #84]	@ 0x54
 81058b8:	e003      	b.n	81058c2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81058be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 81058ce:	673b      	str	r3, [r7, #112]	@ 0x70
 81058d0:	2300      	movs	r3, #0
 81058d2:	677b      	str	r3, [r7, #116]	@ 0x74
 81058d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 81058d8:	460b      	mov	r3, r1
 81058da:	4313      	orrs	r3, r2
 81058dc:	d034      	beq.n	8105948 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81058e4:	2b00      	cmp	r3, #0
 81058e6:	d003      	beq.n	81058f0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81058e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81058ec:	d007      	beq.n	81058fe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81058ee:	e011      	b.n	8105914 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058f0:	4b12      	ldr	r3, [pc, #72]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81058f4:	4a11      	ldr	r2, [pc, #68]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81058fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81058fc:	e00e      	b.n	810591c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105902:	3308      	adds	r3, #8
 8105904:	2102      	movs	r1, #2
 8105906:	4618      	mov	r0, r3
 8105908:	f000 fca4 	bl	8106254 <RCCEx_PLL2_Config>
 810590c:	4603      	mov	r3, r0
 810590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105912:	e003      	b.n	810591c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105914:	2301      	movs	r3, #1
 8105916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810591a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810591c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105920:	2b00      	cmp	r3, #0
 8105922:	d10d      	bne.n	8105940 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105924:	4b05      	ldr	r3, [pc, #20]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105928:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105932:	4a02      	ldr	r2, [pc, #8]	@ (810593c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105934:	430b      	orrs	r3, r1
 8105936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105938:	e006      	b.n	8105948 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810593a:	bf00      	nop
 810593c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105950:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8105956:	2300      	movs	r3, #0
 8105958:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810595a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 810595e:	460b      	mov	r3, r1
 8105960:	4313      	orrs	r3, r2
 8105962:	d00c      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105968:	3328      	adds	r3, #40	@ 0x28
 810596a:	2102      	movs	r1, #2
 810596c:	4618      	mov	r0, r3
 810596e:	f000 fd23 	bl	81063b8 <RCCEx_PLL3_Config>
 8105972:	4603      	mov	r3, r0
 8105974:	2b00      	cmp	r3, #0
 8105976:	d002      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105978:	2301      	movs	r3, #1
 810597a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105986:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 810598a:	663b      	str	r3, [r7, #96]	@ 0x60
 810598c:	2300      	movs	r3, #0
 810598e:	667b      	str	r3, [r7, #100]	@ 0x64
 8105990:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105994:	460b      	mov	r3, r1
 8105996:	4313      	orrs	r3, r2
 8105998:	d038      	beq.n	8105a0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810599a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81059a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81059a6:	d018      	beq.n	81059da <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81059a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81059ac:	d811      	bhi.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81059ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81059b2:	d014      	beq.n	81059de <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81059b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81059b8:	d80b      	bhi.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81059ba:	2b00      	cmp	r3, #0
 81059bc:	d011      	beq.n	81059e2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81059be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81059c2:	d106      	bne.n	81059d2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059c4:	4bc3      	ldr	r3, [pc, #780]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059c8:	4ac2      	ldr	r2, [pc, #776]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81059ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81059d0:	e008      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81059d2:	2301      	movs	r3, #1
 81059d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81059d8:	e004      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059da:	bf00      	nop
 81059dc:	e002      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059de:	bf00      	nop
 81059e0:	e000      	b.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81059e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81059e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81059e8:	2b00      	cmp	r3, #0
 81059ea:	d10b      	bne.n	8105a04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81059ec:	4bb9      	ldr	r3, [pc, #740]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81059f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81059f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81059fc:	4ab5      	ldr	r2, [pc, #724]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81059fe:	430b      	orrs	r3, r1
 8105a00:	6553      	str	r3, [r2, #84]	@ 0x54
 8105a02:	e003      	b.n	8105a0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8105a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105a1a:	2300      	movs	r3, #0
 8105a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8105a1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8105a22:	460b      	mov	r3, r1
 8105a24:	4313      	orrs	r3, r2
 8105a26:	d009      	beq.n	8105a3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105a28:	4baa      	ldr	r3, [pc, #680]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8105a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105a36:	4aa7      	ldr	r2, [pc, #668]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a38:	430b      	orrs	r3, r1
 8105a3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105a48:	653b      	str	r3, [r7, #80]	@ 0x50
 8105a4a:	2300      	movs	r3, #0
 8105a4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8105a4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8105a52:	460b      	mov	r3, r1
 8105a54:	4313      	orrs	r3, r2
 8105a56:	d00a      	beq.n	8105a6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105a58:	4b9e      	ldr	r3, [pc, #632]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a5a:	691b      	ldr	r3, [r3, #16]
 8105a5c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8105a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105a68:	4a9a      	ldr	r2, [pc, #616]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a6a:	430b      	orrs	r3, r1
 8105a6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a76:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8105a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105a7c:	2300      	movs	r3, #0
 8105a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105a80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105a84:	460b      	mov	r3, r1
 8105a86:	4313      	orrs	r3, r2
 8105a88:	d009      	beq.n	8105a9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105a8a:	4b92      	ldr	r3, [pc, #584]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a8e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8105a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105a98:	4a8e      	ldr	r2, [pc, #568]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105a9a:	430b      	orrs	r3, r1
 8105a9c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aa6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105aaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8105aac:	2300      	movs	r3, #0
 8105aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8105ab0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8105ab4:	460b      	mov	r3, r1
 8105ab6:	4313      	orrs	r3, r2
 8105ab8:	d00e      	beq.n	8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105aba:	4b86      	ldr	r3, [pc, #536]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105abc:	691b      	ldr	r3, [r3, #16]
 8105abe:	4a85      	ldr	r2, [pc, #532]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ac0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8105ac4:	6113      	str	r3, [r2, #16]
 8105ac6:	4b83      	ldr	r3, [pc, #524]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ac8:	6919      	ldr	r1, [r3, #16]
 8105aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ace:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105ad2:	4a80      	ldr	r2, [pc, #512]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ad4:	430b      	orrs	r3, r1
 8105ad6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ae0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8105ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105ae6:	2300      	movs	r3, #0
 8105ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105aea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105aee:	460b      	mov	r3, r1
 8105af0:	4313      	orrs	r3, r2
 8105af2:	d009      	beq.n	8105b08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105af4:	4b77      	ldr	r3, [pc, #476]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105af8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b02:	4a74      	ldr	r2, [pc, #464]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b04:	430b      	orrs	r3, r1
 8105b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b10:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8105b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8105b16:	2300      	movs	r3, #0
 8105b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8105b1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8105b1e:	460b      	mov	r3, r1
 8105b20:	4313      	orrs	r3, r2
 8105b22:	d00a      	beq.n	8105b3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105b24:	4b6b      	ldr	r3, [pc, #428]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b28:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8105b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8105b34:	4a67      	ldr	r2, [pc, #412]	@ (8105cd4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b36:	430b      	orrs	r3, r1
 8105b38:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b42:	2100      	movs	r1, #0
 8105b44:	62b9      	str	r1, [r7, #40]	@ 0x28
 8105b46:	f003 0301 	and.w	r3, r3, #1
 8105b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8105b4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8105b50:	460b      	mov	r3, r1
 8105b52:	4313      	orrs	r3, r2
 8105b54:	d011      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b5a:	3308      	adds	r3, #8
 8105b5c:	2100      	movs	r1, #0
 8105b5e:	4618      	mov	r0, r3
 8105b60:	f000 fb78 	bl	8106254 <RCCEx_PLL2_Config>
 8105b64:	4603      	mov	r3, r0
 8105b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b6e:	2b00      	cmp	r3, #0
 8105b70:	d003      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b82:	2100      	movs	r1, #0
 8105b84:	6239      	str	r1, [r7, #32]
 8105b86:	f003 0302 	and.w	r3, r3, #2
 8105b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8105b8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105b90:	460b      	mov	r3, r1
 8105b92:	4313      	orrs	r3, r2
 8105b94:	d011      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b9a:	3308      	adds	r3, #8
 8105b9c:	2101      	movs	r1, #1
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f000 fb58 	bl	8106254 <RCCEx_PLL2_Config>
 8105ba4:	4603      	mov	r3, r0
 8105ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105baa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bae:	2b00      	cmp	r3, #0
 8105bb0:	d003      	beq.n	8105bba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bc2:	2100      	movs	r1, #0
 8105bc4:	61b9      	str	r1, [r7, #24]
 8105bc6:	f003 0304 	and.w	r3, r3, #4
 8105bca:	61fb      	str	r3, [r7, #28]
 8105bcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105bd0:	460b      	mov	r3, r1
 8105bd2:	4313      	orrs	r3, r2
 8105bd4:	d011      	beq.n	8105bfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bda:	3308      	adds	r3, #8
 8105bdc:	2102      	movs	r1, #2
 8105bde:	4618      	mov	r0, r3
 8105be0:	f000 fb38 	bl	8106254 <RCCEx_PLL2_Config>
 8105be4:	4603      	mov	r3, r0
 8105be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bee:	2b00      	cmp	r3, #0
 8105bf0:	d003      	beq.n	8105bfa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c02:	2100      	movs	r1, #0
 8105c04:	6139      	str	r1, [r7, #16]
 8105c06:	f003 0308 	and.w	r3, r3, #8
 8105c0a:	617b      	str	r3, [r7, #20]
 8105c0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8105c10:	460b      	mov	r3, r1
 8105c12:	4313      	orrs	r3, r2
 8105c14:	d011      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c1a:	3328      	adds	r3, #40	@ 0x28
 8105c1c:	2100      	movs	r1, #0
 8105c1e:	4618      	mov	r0, r3
 8105c20:	f000 fbca 	bl	81063b8 <RCCEx_PLL3_Config>
 8105c24:	4603      	mov	r3, r0
 8105c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8105c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c2e:	2b00      	cmp	r3, #0
 8105c30:	d003      	beq.n	8105c3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c42:	2100      	movs	r1, #0
 8105c44:	60b9      	str	r1, [r7, #8]
 8105c46:	f003 0310 	and.w	r3, r3, #16
 8105c4a:	60fb      	str	r3, [r7, #12]
 8105c4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105c50:	460b      	mov	r3, r1
 8105c52:	4313      	orrs	r3, r2
 8105c54:	d011      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c5a:	3328      	adds	r3, #40	@ 0x28
 8105c5c:	2101      	movs	r1, #1
 8105c5e:	4618      	mov	r0, r3
 8105c60:	f000 fbaa 	bl	81063b8 <RCCEx_PLL3_Config>
 8105c64:	4603      	mov	r3, r0
 8105c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d003      	beq.n	8105c7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c82:	2100      	movs	r1, #0
 8105c84:	6039      	str	r1, [r7, #0]
 8105c86:	f003 0320 	and.w	r3, r3, #32
 8105c8a:	607b      	str	r3, [r7, #4]
 8105c8c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105c90:	460b      	mov	r3, r1
 8105c92:	4313      	orrs	r3, r2
 8105c94:	d011      	beq.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c9a:	3328      	adds	r3, #40	@ 0x28
 8105c9c:	2102      	movs	r1, #2
 8105c9e:	4618      	mov	r0, r3
 8105ca0:	f000 fb8a 	bl	81063b8 <RCCEx_PLL3_Config>
 8105ca4:	4603      	mov	r3, r0
 8105ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cae:	2b00      	cmp	r3, #0
 8105cb0:	d003      	beq.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8105cba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d101      	bne.n	8105cc6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105cc2:	2300      	movs	r3, #0
 8105cc4:	e000      	b.n	8105cc8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105cc6:	2301      	movs	r3, #1
}
 8105cc8:	4618      	mov	r0, r3
 8105cca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8105cce:	46bd      	mov	sp, r7
 8105cd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105cd4:	58024400 	.word	0x58024400

08105cd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105cd8:	b580      	push	{r7, lr}
 8105cda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105cdc:	f7fe fd94 	bl	8104808 <HAL_RCC_GetHCLKFreq>
 8105ce0:	4602      	mov	r2, r0
 8105ce2:	4b06      	ldr	r3, [pc, #24]	@ (8105cfc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105ce4:	6a1b      	ldr	r3, [r3, #32]
 8105ce6:	091b      	lsrs	r3, r3, #4
 8105ce8:	f003 0307 	and.w	r3, r3, #7
 8105cec:	4904      	ldr	r1, [pc, #16]	@ (8105d00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105cee:	5ccb      	ldrb	r3, [r1, r3]
 8105cf0:	f003 031f 	and.w	r3, r3, #31
 8105cf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105cf8:	4618      	mov	r0, r3
 8105cfa:	bd80      	pop	{r7, pc}
 8105cfc:	58024400 	.word	0x58024400
 8105d00:	0810e80c 	.word	0x0810e80c

08105d04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105d04:	b480      	push	{r7}
 8105d06:	b089      	sub	sp, #36	@ 0x24
 8105d08:	af00      	add	r7, sp, #0
 8105d0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105d10:	f003 0303 	and.w	r3, r3, #3
 8105d14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105d16:	4b9f      	ldr	r3, [pc, #636]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105d1a:	0b1b      	lsrs	r3, r3, #12
 8105d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105d20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105d22:	4b9c      	ldr	r3, [pc, #624]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d26:	091b      	lsrs	r3, r3, #4
 8105d28:	f003 0301 	and.w	r3, r3, #1
 8105d2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105d2e:	4b99      	ldr	r3, [pc, #612]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105d32:	08db      	lsrs	r3, r3, #3
 8105d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105d38:	693a      	ldr	r2, [r7, #16]
 8105d3a:	fb02 f303 	mul.w	r3, r2, r3
 8105d3e:	ee07 3a90 	vmov	s15, r3
 8105d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105d4a:	697b      	ldr	r3, [r7, #20]
 8105d4c:	2b00      	cmp	r3, #0
 8105d4e:	f000 8111 	beq.w	8105f74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105d52:	69bb      	ldr	r3, [r7, #24]
 8105d54:	2b02      	cmp	r3, #2
 8105d56:	f000 8083 	beq.w	8105e60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105d5a:	69bb      	ldr	r3, [r7, #24]
 8105d5c:	2b02      	cmp	r3, #2
 8105d5e:	f200 80a1 	bhi.w	8105ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105d62:	69bb      	ldr	r3, [r7, #24]
 8105d64:	2b00      	cmp	r3, #0
 8105d66:	d003      	beq.n	8105d70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105d68:	69bb      	ldr	r3, [r7, #24]
 8105d6a:	2b01      	cmp	r3, #1
 8105d6c:	d056      	beq.n	8105e1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105d6e:	e099      	b.n	8105ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105d70:	4b88      	ldr	r3, [pc, #544]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	f003 0320 	and.w	r3, r3, #32
 8105d78:	2b00      	cmp	r3, #0
 8105d7a:	d02d      	beq.n	8105dd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105d7c:	4b85      	ldr	r3, [pc, #532]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	08db      	lsrs	r3, r3, #3
 8105d82:	f003 0303 	and.w	r3, r3, #3
 8105d86:	4a84      	ldr	r2, [pc, #528]	@ (8105f98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105d88:	fa22 f303 	lsr.w	r3, r2, r3
 8105d8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105d8e:	68bb      	ldr	r3, [r7, #8]
 8105d90:	ee07 3a90 	vmov	s15, r3
 8105d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105d98:	697b      	ldr	r3, [r7, #20]
 8105d9a:	ee07 3a90 	vmov	s15, r3
 8105d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105da6:	4b7b      	ldr	r3, [pc, #492]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dae:	ee07 3a90 	vmov	s15, r3
 8105db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8105dba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105dd6:	e087      	b.n	8105ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105dd8:	697b      	ldr	r3, [r7, #20]
 8105dda:	ee07 3a90 	vmov	s15, r3
 8105dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105de2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8105fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105dea:	4b6a      	ldr	r3, [pc, #424]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105df2:	ee07 3a90 	vmov	s15, r3
 8105df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8105dfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e1a:	e065      	b.n	8105ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105e1c:	697b      	ldr	r3, [r7, #20]
 8105e1e:	ee07 3a90 	vmov	s15, r3
 8105e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e2e:	4b59      	ldr	r3, [pc, #356]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e36:	ee07 3a90 	vmov	s15, r3
 8105e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e5e:	e043      	b.n	8105ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105e60:	697b      	ldr	r3, [r7, #20]
 8105e62:	ee07 3a90 	vmov	s15, r3
 8105e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8105fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e72:	4b48      	ldr	r3, [pc, #288]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e7a:	ee07 3a90 	vmov	s15, r3
 8105e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ea2:	e021      	b.n	8105ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105ea4:	697b      	ldr	r3, [r7, #20]
 8105ea6:	ee07 3a90 	vmov	s15, r3
 8105eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105eae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8105fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105eb6:	4b37      	ldr	r3, [pc, #220]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105ebe:	ee07 3a90 	vmov	s15, r3
 8105ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8105eca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8105f9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ee6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105eec:	0a5b      	lsrs	r3, r3, #9
 8105eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105ef2:	ee07 3a90 	vmov	s15, r3
 8105ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f0e:	ee17 2a90 	vmov	r2, s15
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105f16:	4b1f      	ldr	r3, [pc, #124]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105f1a:	0c1b      	lsrs	r3, r3, #16
 8105f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105f20:	ee07 3a90 	vmov	s15, r3
 8105f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f3c:	ee17 2a90 	vmov	r2, s15
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105f44:	4b13      	ldr	r3, [pc, #76]	@ (8105f94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105f48:	0e1b      	lsrs	r3, r3, #24
 8105f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105f4e:	ee07 3a90 	vmov	s15, r3
 8105f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f6a:	ee17 2a90 	vmov	r2, s15
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105f72:	e008      	b.n	8105f86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105f74:	687b      	ldr	r3, [r7, #4]
 8105f76:	2200      	movs	r2, #0
 8105f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	2200      	movs	r2, #0
 8105f7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	2200      	movs	r2, #0
 8105f84:	609a      	str	r2, [r3, #8]
}
 8105f86:	bf00      	nop
 8105f88:	3724      	adds	r7, #36	@ 0x24
 8105f8a:	46bd      	mov	sp, r7
 8105f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f90:	4770      	bx	lr
 8105f92:	bf00      	nop
 8105f94:	58024400 	.word	0x58024400
 8105f98:	03d09000 	.word	0x03d09000
 8105f9c:	46000000 	.word	0x46000000
 8105fa0:	4c742400 	.word	0x4c742400
 8105fa4:	4a742400 	.word	0x4a742400
 8105fa8:	4af42400 	.word	0x4af42400

08105fac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105fac:	b480      	push	{r7}
 8105fae:	b089      	sub	sp, #36	@ 0x24
 8105fb0:	af00      	add	r7, sp, #0
 8105fb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105fb4:	4ba1      	ldr	r3, [pc, #644]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105fb8:	f003 0303 	and.w	r3, r3, #3
 8105fbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105fbe:	4b9f      	ldr	r3, [pc, #636]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105fc2:	0d1b      	lsrs	r3, r3, #20
 8105fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105fc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105fca:	4b9c      	ldr	r3, [pc, #624]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105fce:	0a1b      	lsrs	r3, r3, #8
 8105fd0:	f003 0301 	and.w	r3, r3, #1
 8105fd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105fd6:	4b99      	ldr	r3, [pc, #612]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105fda:	08db      	lsrs	r3, r3, #3
 8105fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105fe0:	693a      	ldr	r2, [r7, #16]
 8105fe2:	fb02 f303 	mul.w	r3, r2, r3
 8105fe6:	ee07 3a90 	vmov	s15, r3
 8105fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105ff2:	697b      	ldr	r3, [r7, #20]
 8105ff4:	2b00      	cmp	r3, #0
 8105ff6:	f000 8111 	beq.w	810621c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105ffa:	69bb      	ldr	r3, [r7, #24]
 8105ffc:	2b02      	cmp	r3, #2
 8105ffe:	f000 8083 	beq.w	8106108 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106002:	69bb      	ldr	r3, [r7, #24]
 8106004:	2b02      	cmp	r3, #2
 8106006:	f200 80a1 	bhi.w	810614c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810600a:	69bb      	ldr	r3, [r7, #24]
 810600c:	2b00      	cmp	r3, #0
 810600e:	d003      	beq.n	8106018 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106010:	69bb      	ldr	r3, [r7, #24]
 8106012:	2b01      	cmp	r3, #1
 8106014:	d056      	beq.n	81060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106016:	e099      	b.n	810614c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106018:	4b88      	ldr	r3, [pc, #544]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	f003 0320 	and.w	r3, r3, #32
 8106020:	2b00      	cmp	r3, #0
 8106022:	d02d      	beq.n	8106080 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106024:	4b85      	ldr	r3, [pc, #532]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106026:	681b      	ldr	r3, [r3, #0]
 8106028:	08db      	lsrs	r3, r3, #3
 810602a:	f003 0303 	and.w	r3, r3, #3
 810602e:	4a84      	ldr	r2, [pc, #528]	@ (8106240 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106030:	fa22 f303 	lsr.w	r3, r2, r3
 8106034:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106036:	68bb      	ldr	r3, [r7, #8]
 8106038:	ee07 3a90 	vmov	s15, r3
 810603c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106040:	697b      	ldr	r3, [r7, #20]
 8106042:	ee07 3a90 	vmov	s15, r3
 8106046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810604e:	4b7b      	ldr	r3, [pc, #492]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106056:	ee07 3a90 	vmov	s15, r3
 810605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810605e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106062:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810606e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106076:	ee67 7a27 	vmul.f32	s15, s14, s15
 810607a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810607e:	e087      	b.n	8106190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106080:	697b      	ldr	r3, [r7, #20]
 8106082:	ee07 3a90 	vmov	s15, r3
 8106086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810608a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106248 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810608e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106092:	4b6a      	ldr	r3, [pc, #424]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810609a:	ee07 3a90 	vmov	s15, r3
 810609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81060a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81060aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060c2:	e065      	b.n	8106190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81060c4:	697b      	ldr	r3, [r7, #20]
 81060c6:	ee07 3a90 	vmov	s15, r3
 81060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810624c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81060d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060d6:	4b59      	ldr	r3, [pc, #356]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81060da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060de:	ee07 3a90 	vmov	s15, r3
 81060e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81060ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81060ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81060fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106106:	e043      	b.n	8106190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106108:	697b      	ldr	r3, [r7, #20]
 810610a:	ee07 3a90 	vmov	s15, r3
 810610e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106112:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810611a:	4b48      	ldr	r3, [pc, #288]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810611e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106122:	ee07 3a90 	vmov	s15, r3
 8106126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810612a:	ed97 6a03 	vldr	s12, [r7, #12]
 810612e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810613a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810613e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810614a:	e021      	b.n	8106190 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810614c:	697b      	ldr	r3, [r7, #20]
 810614e:	ee07 3a90 	vmov	s15, r3
 8106152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106156:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810624c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810615e:	4b37      	ldr	r3, [pc, #220]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106166:	ee07 3a90 	vmov	s15, r3
 810616a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810616e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106172:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106244 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810617a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810617e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106186:	ee67 7a27 	vmul.f32	s15, s14, s15
 810618a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810618e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106190:	4b2a      	ldr	r3, [pc, #168]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106194:	0a5b      	lsrs	r3, r3, #9
 8106196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810619a:	ee07 3a90 	vmov	s15, r3
 810619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81061a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81061aa:	edd7 6a07 	vldr	s13, [r7, #28]
 81061ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81061b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81061b6:	ee17 2a90 	vmov	r2, s15
 81061ba:	687b      	ldr	r3, [r7, #4]
 81061bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81061be:	4b1f      	ldr	r3, [pc, #124]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81061c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81061c2:	0c1b      	lsrs	r3, r3, #16
 81061c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81061c8:	ee07 3a90 	vmov	s15, r3
 81061cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81061d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81061d8:	edd7 6a07 	vldr	s13, [r7, #28]
 81061dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81061e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81061e4:	ee17 2a90 	vmov	r2, s15
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81061ec:	4b13      	ldr	r3, [pc, #76]	@ (810623c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81061f0:	0e1b      	lsrs	r3, r3, #24
 81061f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81061f6:	ee07 3a90 	vmov	s15, r3
 81061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106206:	edd7 6a07 	vldr	s13, [r7, #28]
 810620a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810620e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106212:	ee17 2a90 	vmov	r2, s15
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810621a:	e008      	b.n	810622e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810621c:	687b      	ldr	r3, [r7, #4]
 810621e:	2200      	movs	r2, #0
 8106220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	2200      	movs	r2, #0
 8106226:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	2200      	movs	r2, #0
 810622c:	609a      	str	r2, [r3, #8]
}
 810622e:	bf00      	nop
 8106230:	3724      	adds	r7, #36	@ 0x24
 8106232:	46bd      	mov	sp, r7
 8106234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106238:	4770      	bx	lr
 810623a:	bf00      	nop
 810623c:	58024400 	.word	0x58024400
 8106240:	03d09000 	.word	0x03d09000
 8106244:	46000000 	.word	0x46000000
 8106248:	4c742400 	.word	0x4c742400
 810624c:	4a742400 	.word	0x4a742400
 8106250:	4af42400 	.word	0x4af42400

08106254 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106254:	b580      	push	{r7, lr}
 8106256:	b084      	sub	sp, #16
 8106258:	af00      	add	r7, sp, #0
 810625a:	6078      	str	r0, [r7, #4]
 810625c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810625e:	2300      	movs	r3, #0
 8106260:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106262:	4b54      	ldr	r3, [pc, #336]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106266:	f003 0303 	and.w	r3, r3, #3
 810626a:	2b03      	cmp	r3, #3
 810626c:	d101      	bne.n	8106272 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810626e:	2301      	movs	r3, #1
 8106270:	e09b      	b.n	81063aa <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106272:	4b50      	ldr	r3, [pc, #320]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106274:	681b      	ldr	r3, [r3, #0]
 8106276:	4a4f      	ldr	r2, [pc, #316]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106278:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810627c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810627e:	f7fc ffa9 	bl	81031d4 <HAL_GetTick>
 8106282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106284:	e008      	b.n	8106298 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106286:	f7fc ffa5 	bl	81031d4 <HAL_GetTick>
 810628a:	4602      	mov	r2, r0
 810628c:	68bb      	ldr	r3, [r7, #8]
 810628e:	1ad3      	subs	r3, r2, r3
 8106290:	2b02      	cmp	r3, #2
 8106292:	d901      	bls.n	8106298 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106294:	2303      	movs	r3, #3
 8106296:	e088      	b.n	81063aa <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106298:	4b46      	ldr	r3, [pc, #280]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810629a:	681b      	ldr	r3, [r3, #0]
 810629c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81062a0:	2b00      	cmp	r3, #0
 81062a2:	d1f0      	bne.n	8106286 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81062a4:	4b43      	ldr	r3, [pc, #268]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 81062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81062a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	031b      	lsls	r3, r3, #12
 81062b2:	4940      	ldr	r1, [pc, #256]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 81062b4:	4313      	orrs	r3, r2
 81062b6:	628b      	str	r3, [r1, #40]	@ 0x28
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	685b      	ldr	r3, [r3, #4]
 81062bc:	3b01      	subs	r3, #1
 81062be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	689b      	ldr	r3, [r3, #8]
 81062c6:	3b01      	subs	r3, #1
 81062c8:	025b      	lsls	r3, r3, #9
 81062ca:	b29b      	uxth	r3, r3
 81062cc:	431a      	orrs	r2, r3
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	68db      	ldr	r3, [r3, #12]
 81062d2:	3b01      	subs	r3, #1
 81062d4:	041b      	lsls	r3, r3, #16
 81062d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81062da:	431a      	orrs	r2, r3
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	691b      	ldr	r3, [r3, #16]
 81062e0:	3b01      	subs	r3, #1
 81062e2:	061b      	lsls	r3, r3, #24
 81062e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81062e8:	4932      	ldr	r1, [pc, #200]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 81062ea:	4313      	orrs	r3, r2
 81062ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81062ee:	4b31      	ldr	r3, [pc, #196]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 81062f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81062f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	695b      	ldr	r3, [r3, #20]
 81062fa:	492e      	ldr	r1, [pc, #184]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 81062fc:	4313      	orrs	r3, r2
 81062fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106300:	4b2c      	ldr	r3, [pc, #176]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106304:	f023 0220 	bic.w	r2, r3, #32
 8106308:	687b      	ldr	r3, [r7, #4]
 810630a:	699b      	ldr	r3, [r3, #24]
 810630c:	4929      	ldr	r1, [pc, #164]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810630e:	4313      	orrs	r3, r2
 8106310:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106312:	4b28      	ldr	r3, [pc, #160]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106316:	4a27      	ldr	r2, [pc, #156]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106318:	f023 0310 	bic.w	r3, r3, #16
 810631c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810631e:	4b25      	ldr	r3, [pc, #148]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106326:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810632a:	687a      	ldr	r2, [r7, #4]
 810632c:	69d2      	ldr	r2, [r2, #28]
 810632e:	00d2      	lsls	r2, r2, #3
 8106330:	4920      	ldr	r1, [pc, #128]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106332:	4313      	orrs	r3, r2
 8106334:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106336:	4b1f      	ldr	r3, [pc, #124]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810633a:	4a1e      	ldr	r2, [pc, #120]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810633c:	f043 0310 	orr.w	r3, r3, #16
 8106340:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106342:	683b      	ldr	r3, [r7, #0]
 8106344:	2b00      	cmp	r3, #0
 8106346:	d106      	bne.n	8106356 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106348:	4b1a      	ldr	r3, [pc, #104]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810634a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810634c:	4a19      	ldr	r2, [pc, #100]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810634e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8106352:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106354:	e00f      	b.n	8106376 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106356:	683b      	ldr	r3, [r7, #0]
 8106358:	2b01      	cmp	r3, #1
 810635a:	d106      	bne.n	810636a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810635c:	4b15      	ldr	r3, [pc, #84]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106360:	4a14      	ldr	r2, [pc, #80]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8106366:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106368:	e005      	b.n	8106376 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810636a:	4b12      	ldr	r3, [pc, #72]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810636e:	4a11      	ldr	r2, [pc, #68]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106370:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8106374:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106376:	4b0f      	ldr	r3, [pc, #60]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	4a0e      	ldr	r2, [pc, #56]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810637c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8106380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106382:	f7fc ff27 	bl	81031d4 <HAL_GetTick>
 8106386:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106388:	e008      	b.n	810639c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810638a:	f7fc ff23 	bl	81031d4 <HAL_GetTick>
 810638e:	4602      	mov	r2, r0
 8106390:	68bb      	ldr	r3, [r7, #8]
 8106392:	1ad3      	subs	r3, r2, r3
 8106394:	2b02      	cmp	r3, #2
 8106396:	d901      	bls.n	810639c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106398:	2303      	movs	r3, #3
 810639a:	e006      	b.n	81063aa <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810639c:	4b05      	ldr	r3, [pc, #20]	@ (81063b4 <RCCEx_PLL2_Config+0x160>)
 810639e:	681b      	ldr	r3, [r3, #0]
 81063a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d0f0      	beq.n	810638a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 81063aa:	4618      	mov	r0, r3
 81063ac:	3710      	adds	r7, #16
 81063ae:	46bd      	mov	sp, r7
 81063b0:	bd80      	pop	{r7, pc}
 81063b2:	bf00      	nop
 81063b4:	58024400 	.word	0x58024400

081063b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81063b8:	b580      	push	{r7, lr}
 81063ba:	b084      	sub	sp, #16
 81063bc:	af00      	add	r7, sp, #0
 81063be:	6078      	str	r0, [r7, #4]
 81063c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81063c2:	2300      	movs	r3, #0
 81063c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81063c6:	4b54      	ldr	r3, [pc, #336]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81063c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063ca:	f003 0303 	and.w	r3, r3, #3
 81063ce:	2b03      	cmp	r3, #3
 81063d0:	d101      	bne.n	81063d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81063d2:	2301      	movs	r3, #1
 81063d4:	e09b      	b.n	810650e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81063d6:	4b50      	ldr	r3, [pc, #320]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	4a4f      	ldr	r2, [pc, #316]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81063dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81063e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81063e2:	f7fc fef7 	bl	81031d4 <HAL_GetTick>
 81063e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81063e8:	e008      	b.n	81063fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81063ea:	f7fc fef3 	bl	81031d4 <HAL_GetTick>
 81063ee:	4602      	mov	r2, r0
 81063f0:	68bb      	ldr	r3, [r7, #8]
 81063f2:	1ad3      	subs	r3, r2, r3
 81063f4:	2b02      	cmp	r3, #2
 81063f6:	d901      	bls.n	81063fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81063f8:	2303      	movs	r3, #3
 81063fa:	e088      	b.n	810650e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81063fc:	4b46      	ldr	r3, [pc, #280]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106404:	2b00      	cmp	r3, #0
 8106406:	d1f0      	bne.n	81063ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106408:	4b43      	ldr	r3, [pc, #268]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 810640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810640c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	681b      	ldr	r3, [r3, #0]
 8106414:	051b      	lsls	r3, r3, #20
 8106416:	4940      	ldr	r1, [pc, #256]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106418:	4313      	orrs	r3, r2
 810641a:	628b      	str	r3, [r1, #40]	@ 0x28
 810641c:	687b      	ldr	r3, [r7, #4]
 810641e:	685b      	ldr	r3, [r3, #4]
 8106420:	3b01      	subs	r3, #1
 8106422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	689b      	ldr	r3, [r3, #8]
 810642a:	3b01      	subs	r3, #1
 810642c:	025b      	lsls	r3, r3, #9
 810642e:	b29b      	uxth	r3, r3
 8106430:	431a      	orrs	r2, r3
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	68db      	ldr	r3, [r3, #12]
 8106436:	3b01      	subs	r3, #1
 8106438:	041b      	lsls	r3, r3, #16
 810643a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810643e:	431a      	orrs	r2, r3
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	691b      	ldr	r3, [r3, #16]
 8106444:	3b01      	subs	r3, #1
 8106446:	061b      	lsls	r3, r3, #24
 8106448:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810644c:	4932      	ldr	r1, [pc, #200]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 810644e:	4313      	orrs	r3, r2
 8106450:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106452:	4b31      	ldr	r3, [pc, #196]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106456:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	695b      	ldr	r3, [r3, #20]
 810645e:	492e      	ldr	r1, [pc, #184]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106460:	4313      	orrs	r3, r2
 8106462:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106464:	4b2c      	ldr	r3, [pc, #176]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106468:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	699b      	ldr	r3, [r3, #24]
 8106470:	4929      	ldr	r1, [pc, #164]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106472:	4313      	orrs	r3, r2
 8106474:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106476:	4b28      	ldr	r3, [pc, #160]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810647a:	4a27      	ldr	r2, [pc, #156]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 810647c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106480:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8106482:	4b25      	ldr	r3, [pc, #148]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810648a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810648e:	687a      	ldr	r2, [r7, #4]
 8106490:	69d2      	ldr	r2, [r2, #28]
 8106492:	00d2      	lsls	r2, r2, #3
 8106494:	4920      	ldr	r1, [pc, #128]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106496:	4313      	orrs	r3, r2
 8106498:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810649a:	4b1f      	ldr	r3, [pc, #124]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 810649c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810649e:	4a1e      	ldr	r2, [pc, #120]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81064a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81064a6:	683b      	ldr	r3, [r7, #0]
 81064a8:	2b00      	cmp	r3, #0
 81064aa:	d106      	bne.n	81064ba <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81064ac:	4b1a      	ldr	r3, [pc, #104]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064b0:	4a19      	ldr	r2, [pc, #100]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81064b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81064b8:	e00f      	b.n	81064da <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81064ba:	683b      	ldr	r3, [r7, #0]
 81064bc:	2b01      	cmp	r3, #1
 81064be:	d106      	bne.n	81064ce <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81064c0:	4b15      	ldr	r3, [pc, #84]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064c4:	4a14      	ldr	r2, [pc, #80]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81064ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81064cc:	e005      	b.n	81064da <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81064ce:	4b12      	ldr	r3, [pc, #72]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064d2:	4a11      	ldr	r2, [pc, #68]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81064d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81064da:	4b0f      	ldr	r3, [pc, #60]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064dc:	681b      	ldr	r3, [r3, #0]
 81064de:	4a0e      	ldr	r2, [pc, #56]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 81064e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81064e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81064e6:	f7fc fe75 	bl	81031d4 <HAL_GetTick>
 81064ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81064ec:	e008      	b.n	8106500 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81064ee:	f7fc fe71 	bl	81031d4 <HAL_GetTick>
 81064f2:	4602      	mov	r2, r0
 81064f4:	68bb      	ldr	r3, [r7, #8]
 81064f6:	1ad3      	subs	r3, r2, r3
 81064f8:	2b02      	cmp	r3, #2
 81064fa:	d901      	bls.n	8106500 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81064fc:	2303      	movs	r3, #3
 81064fe:	e006      	b.n	810650e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106500:	4b05      	ldr	r3, [pc, #20]	@ (8106518 <RCCEx_PLL3_Config+0x160>)
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106508:	2b00      	cmp	r3, #0
 810650a:	d0f0      	beq.n	81064ee <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810650c:	7bfb      	ldrb	r3, [r7, #15]
}
 810650e:	4618      	mov	r0, r3
 8106510:	3710      	adds	r7, #16
 8106512:	46bd      	mov	sp, r7
 8106514:	bd80      	pop	{r7, pc}
 8106516:	bf00      	nop
 8106518:	58024400 	.word	0x58024400

0810651c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810651c:	b580      	push	{r7, lr}
 810651e:	b082      	sub	sp, #8
 8106520:	af00      	add	r7, sp, #0
 8106522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	2b00      	cmp	r3, #0
 8106528:	d101      	bne.n	810652e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810652a:	2301      	movs	r3, #1
 810652c:	e049      	b.n	81065c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106534:	b2db      	uxtb	r3, r3
 8106536:	2b00      	cmp	r3, #0
 8106538:	d106      	bne.n	8106548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	2200      	movs	r2, #0
 810653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106542:	6878      	ldr	r0, [r7, #4]
 8106544:	f7fc fafa 	bl	8102b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	2202      	movs	r2, #2
 810654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	681a      	ldr	r2, [r3, #0]
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	3304      	adds	r3, #4
 8106558:	4619      	mov	r1, r3
 810655a:	4610      	mov	r0, r2
 810655c:	f001 f928 	bl	81077b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	2201      	movs	r2, #1
 8106564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	2201      	movs	r2, #1
 810656c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	2201      	movs	r2, #1
 8106574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2201      	movs	r2, #1
 810657c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	2201      	movs	r2, #1
 8106584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106588:	687b      	ldr	r3, [r7, #4]
 810658a:	2201      	movs	r2, #1
 810658c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106590:	687b      	ldr	r3, [r7, #4]
 8106592:	2201      	movs	r2, #1
 8106594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	2201      	movs	r2, #1
 810659c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81065a0:	687b      	ldr	r3, [r7, #4]
 81065a2:	2201      	movs	r2, #1
 81065a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	2201      	movs	r2, #1
 81065ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	2201      	movs	r2, #1
 81065b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	2201      	movs	r2, #1
 81065bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81065c0:	2300      	movs	r3, #0
}
 81065c2:	4618      	mov	r0, r3
 81065c4:	3708      	adds	r7, #8
 81065c6:	46bd      	mov	sp, r7
 81065c8:	bd80      	pop	{r7, pc}
	...

081065cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81065cc:	b480      	push	{r7}
 81065ce:	b085      	sub	sp, #20
 81065d0:	af00      	add	r7, sp, #0
 81065d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81065da:	b2db      	uxtb	r3, r3
 81065dc:	2b01      	cmp	r3, #1
 81065de:	d001      	beq.n	81065e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81065e0:	2301      	movs	r3, #1
 81065e2:	e054      	b.n	810668e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	2202      	movs	r2, #2
 81065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	68da      	ldr	r2, [r3, #12]
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	681b      	ldr	r3, [r3, #0]
 81065f6:	f042 0201 	orr.w	r2, r2, #1
 81065fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	4a26      	ldr	r2, [pc, #152]	@ (810669c <HAL_TIM_Base_Start_IT+0xd0>)
 8106602:	4293      	cmp	r3, r2
 8106604:	d022      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810660e:	d01d      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 8106610:	687b      	ldr	r3, [r7, #4]
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	4a22      	ldr	r2, [pc, #136]	@ (81066a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8106616:	4293      	cmp	r3, r2
 8106618:	d018      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 810661a:	687b      	ldr	r3, [r7, #4]
 810661c:	681b      	ldr	r3, [r3, #0]
 810661e:	4a21      	ldr	r2, [pc, #132]	@ (81066a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8106620:	4293      	cmp	r3, r2
 8106622:	d013      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	4a1f      	ldr	r2, [pc, #124]	@ (81066a8 <HAL_TIM_Base_Start_IT+0xdc>)
 810662a:	4293      	cmp	r3, r2
 810662c:	d00e      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	4a1e      	ldr	r2, [pc, #120]	@ (81066ac <HAL_TIM_Base_Start_IT+0xe0>)
 8106634:	4293      	cmp	r3, r2
 8106636:	d009      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	681b      	ldr	r3, [r3, #0]
 810663c:	4a1c      	ldr	r2, [pc, #112]	@ (81066b0 <HAL_TIM_Base_Start_IT+0xe4>)
 810663e:	4293      	cmp	r3, r2
 8106640:	d004      	beq.n	810664c <HAL_TIM_Base_Start_IT+0x80>
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	681b      	ldr	r3, [r3, #0]
 8106646:	4a1b      	ldr	r2, [pc, #108]	@ (81066b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8106648:	4293      	cmp	r3, r2
 810664a:	d115      	bne.n	8106678 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810664c:	687b      	ldr	r3, [r7, #4]
 810664e:	681b      	ldr	r3, [r3, #0]
 8106650:	689a      	ldr	r2, [r3, #8]
 8106652:	4b19      	ldr	r3, [pc, #100]	@ (81066b8 <HAL_TIM_Base_Start_IT+0xec>)
 8106654:	4013      	ands	r3, r2
 8106656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106658:	68fb      	ldr	r3, [r7, #12]
 810665a:	2b06      	cmp	r3, #6
 810665c:	d015      	beq.n	810668a <HAL_TIM_Base_Start_IT+0xbe>
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106664:	d011      	beq.n	810668a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106666:	687b      	ldr	r3, [r7, #4]
 8106668:	681b      	ldr	r3, [r3, #0]
 810666a:	681a      	ldr	r2, [r3, #0]
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	f042 0201 	orr.w	r2, r2, #1
 8106674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106676:	e008      	b.n	810668a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	681a      	ldr	r2, [r3, #0]
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	f042 0201 	orr.w	r2, r2, #1
 8106686:	601a      	str	r2, [r3, #0]
 8106688:	e000      	b.n	810668c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810668a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810668c:	2300      	movs	r3, #0
}
 810668e:	4618      	mov	r0, r3
 8106690:	3714      	adds	r7, #20
 8106692:	46bd      	mov	sp, r7
 8106694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106698:	4770      	bx	lr
 810669a:	bf00      	nop
 810669c:	40010000 	.word	0x40010000
 81066a0:	40000400 	.word	0x40000400
 81066a4:	40000800 	.word	0x40000800
 81066a8:	40000c00 	.word	0x40000c00
 81066ac:	40010400 	.word	0x40010400
 81066b0:	40001800 	.word	0x40001800
 81066b4:	40014000 	.word	0x40014000
 81066b8:	00010007 	.word	0x00010007

081066bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81066bc:	b580      	push	{r7, lr}
 81066be:	b082      	sub	sp, #8
 81066c0:	af00      	add	r7, sp, #0
 81066c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	2b00      	cmp	r3, #0
 81066c8:	d101      	bne.n	81066ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81066ca:	2301      	movs	r3, #1
 81066cc:	e049      	b.n	8106762 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81066d4:	b2db      	uxtb	r3, r3
 81066d6:	2b00      	cmp	r3, #0
 81066d8:	d106      	bne.n	81066e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81066da:	687b      	ldr	r3, [r7, #4]
 81066dc:	2200      	movs	r2, #0
 81066de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81066e2:	6878      	ldr	r0, [r7, #4]
 81066e4:	f000 f841 	bl	810676a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	2202      	movs	r2, #2
 81066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	681a      	ldr	r2, [r3, #0]
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	3304      	adds	r3, #4
 81066f8:	4619      	mov	r1, r3
 81066fa:	4610      	mov	r0, r2
 81066fc:	f001 f858 	bl	81077b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	2201      	movs	r2, #1
 8106704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	2201      	movs	r2, #1
 810670c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	2201      	movs	r2, #1
 8106714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	2201      	movs	r2, #1
 810671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	2201      	movs	r2, #1
 8106724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	2201      	movs	r2, #1
 810672c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	2201      	movs	r2, #1
 8106734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2201      	movs	r2, #1
 810673c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	2201      	movs	r2, #1
 8106744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	2201      	movs	r2, #1
 810674c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	2201      	movs	r2, #1
 8106754:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	2201      	movs	r2, #1
 810675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106760:	2300      	movs	r3, #0
}
 8106762:	4618      	mov	r0, r3
 8106764:	3708      	adds	r7, #8
 8106766:	46bd      	mov	sp, r7
 8106768:	bd80      	pop	{r7, pc}

0810676a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810676a:	b480      	push	{r7}
 810676c:	b083      	sub	sp, #12
 810676e:	af00      	add	r7, sp, #0
 8106770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106772:	bf00      	nop
 8106774:	370c      	adds	r7, #12
 8106776:	46bd      	mov	sp, r7
 8106778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810677c:	4770      	bx	lr
	...

08106780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106780:	b580      	push	{r7, lr}
 8106782:	b084      	sub	sp, #16
 8106784:	af00      	add	r7, sp, #0
 8106786:	6078      	str	r0, [r7, #4]
 8106788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810678a:	683b      	ldr	r3, [r7, #0]
 810678c:	2b00      	cmp	r3, #0
 810678e:	d109      	bne.n	81067a4 <HAL_TIM_PWM_Start+0x24>
 8106790:	687b      	ldr	r3, [r7, #4]
 8106792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106796:	b2db      	uxtb	r3, r3
 8106798:	2b01      	cmp	r3, #1
 810679a:	bf14      	ite	ne
 810679c:	2301      	movne	r3, #1
 810679e:	2300      	moveq	r3, #0
 81067a0:	b2db      	uxtb	r3, r3
 81067a2:	e03c      	b.n	810681e <HAL_TIM_PWM_Start+0x9e>
 81067a4:	683b      	ldr	r3, [r7, #0]
 81067a6:	2b04      	cmp	r3, #4
 81067a8:	d109      	bne.n	81067be <HAL_TIM_PWM_Start+0x3e>
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 81067b0:	b2db      	uxtb	r3, r3
 81067b2:	2b01      	cmp	r3, #1
 81067b4:	bf14      	ite	ne
 81067b6:	2301      	movne	r3, #1
 81067b8:	2300      	moveq	r3, #0
 81067ba:	b2db      	uxtb	r3, r3
 81067bc:	e02f      	b.n	810681e <HAL_TIM_PWM_Start+0x9e>
 81067be:	683b      	ldr	r3, [r7, #0]
 81067c0:	2b08      	cmp	r3, #8
 81067c2:	d109      	bne.n	81067d8 <HAL_TIM_PWM_Start+0x58>
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81067ca:	b2db      	uxtb	r3, r3
 81067cc:	2b01      	cmp	r3, #1
 81067ce:	bf14      	ite	ne
 81067d0:	2301      	movne	r3, #1
 81067d2:	2300      	moveq	r3, #0
 81067d4:	b2db      	uxtb	r3, r3
 81067d6:	e022      	b.n	810681e <HAL_TIM_PWM_Start+0x9e>
 81067d8:	683b      	ldr	r3, [r7, #0]
 81067da:	2b0c      	cmp	r3, #12
 81067dc:	d109      	bne.n	81067f2 <HAL_TIM_PWM_Start+0x72>
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81067e4:	b2db      	uxtb	r3, r3
 81067e6:	2b01      	cmp	r3, #1
 81067e8:	bf14      	ite	ne
 81067ea:	2301      	movne	r3, #1
 81067ec:	2300      	moveq	r3, #0
 81067ee:	b2db      	uxtb	r3, r3
 81067f0:	e015      	b.n	810681e <HAL_TIM_PWM_Start+0x9e>
 81067f2:	683b      	ldr	r3, [r7, #0]
 81067f4:	2b10      	cmp	r3, #16
 81067f6:	d109      	bne.n	810680c <HAL_TIM_PWM_Start+0x8c>
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81067fe:	b2db      	uxtb	r3, r3
 8106800:	2b01      	cmp	r3, #1
 8106802:	bf14      	ite	ne
 8106804:	2301      	movne	r3, #1
 8106806:	2300      	moveq	r3, #0
 8106808:	b2db      	uxtb	r3, r3
 810680a:	e008      	b.n	810681e <HAL_TIM_PWM_Start+0x9e>
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106812:	b2db      	uxtb	r3, r3
 8106814:	2b01      	cmp	r3, #1
 8106816:	bf14      	ite	ne
 8106818:	2301      	movne	r3, #1
 810681a:	2300      	moveq	r3, #0
 810681c:	b2db      	uxtb	r3, r3
 810681e:	2b00      	cmp	r3, #0
 8106820:	d001      	beq.n	8106826 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106822:	2301      	movs	r3, #1
 8106824:	e0a1      	b.n	810696a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106826:	683b      	ldr	r3, [r7, #0]
 8106828:	2b00      	cmp	r3, #0
 810682a:	d104      	bne.n	8106836 <HAL_TIM_PWM_Start+0xb6>
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	2202      	movs	r2, #2
 8106830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106834:	e023      	b.n	810687e <HAL_TIM_PWM_Start+0xfe>
 8106836:	683b      	ldr	r3, [r7, #0]
 8106838:	2b04      	cmp	r3, #4
 810683a:	d104      	bne.n	8106846 <HAL_TIM_PWM_Start+0xc6>
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	2202      	movs	r2, #2
 8106840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106844:	e01b      	b.n	810687e <HAL_TIM_PWM_Start+0xfe>
 8106846:	683b      	ldr	r3, [r7, #0]
 8106848:	2b08      	cmp	r3, #8
 810684a:	d104      	bne.n	8106856 <HAL_TIM_PWM_Start+0xd6>
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	2202      	movs	r2, #2
 8106850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106854:	e013      	b.n	810687e <HAL_TIM_PWM_Start+0xfe>
 8106856:	683b      	ldr	r3, [r7, #0]
 8106858:	2b0c      	cmp	r3, #12
 810685a:	d104      	bne.n	8106866 <HAL_TIM_PWM_Start+0xe6>
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	2202      	movs	r2, #2
 8106860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106864:	e00b      	b.n	810687e <HAL_TIM_PWM_Start+0xfe>
 8106866:	683b      	ldr	r3, [r7, #0]
 8106868:	2b10      	cmp	r3, #16
 810686a:	d104      	bne.n	8106876 <HAL_TIM_PWM_Start+0xf6>
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	2202      	movs	r2, #2
 8106870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106874:	e003      	b.n	810687e <HAL_TIM_PWM_Start+0xfe>
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	2202      	movs	r2, #2
 810687a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	681b      	ldr	r3, [r3, #0]
 8106882:	2201      	movs	r2, #1
 8106884:	6839      	ldr	r1, [r7, #0]
 8106886:	4618      	mov	r0, r3
 8106888:	f001 fdbe 	bl	8108408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	4a38      	ldr	r2, [pc, #224]	@ (8106974 <HAL_TIM_PWM_Start+0x1f4>)
 8106892:	4293      	cmp	r3, r2
 8106894:	d013      	beq.n	81068be <HAL_TIM_PWM_Start+0x13e>
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	4a37      	ldr	r2, [pc, #220]	@ (8106978 <HAL_TIM_PWM_Start+0x1f8>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d00e      	beq.n	81068be <HAL_TIM_PWM_Start+0x13e>
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	4a35      	ldr	r2, [pc, #212]	@ (810697c <HAL_TIM_PWM_Start+0x1fc>)
 81068a6:	4293      	cmp	r3, r2
 81068a8:	d009      	beq.n	81068be <HAL_TIM_PWM_Start+0x13e>
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	681b      	ldr	r3, [r3, #0]
 81068ae:	4a34      	ldr	r2, [pc, #208]	@ (8106980 <HAL_TIM_PWM_Start+0x200>)
 81068b0:	4293      	cmp	r3, r2
 81068b2:	d004      	beq.n	81068be <HAL_TIM_PWM_Start+0x13e>
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	4a32      	ldr	r2, [pc, #200]	@ (8106984 <HAL_TIM_PWM_Start+0x204>)
 81068ba:	4293      	cmp	r3, r2
 81068bc:	d101      	bne.n	81068c2 <HAL_TIM_PWM_Start+0x142>
 81068be:	2301      	movs	r3, #1
 81068c0:	e000      	b.n	81068c4 <HAL_TIM_PWM_Start+0x144>
 81068c2:	2300      	movs	r3, #0
 81068c4:	2b00      	cmp	r3, #0
 81068c6:	d007      	beq.n	81068d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81068c8:	687b      	ldr	r3, [r7, #4]
 81068ca:	681b      	ldr	r3, [r3, #0]
 81068cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81068ce:	687b      	ldr	r3, [r7, #4]
 81068d0:	681b      	ldr	r3, [r3, #0]
 81068d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 81068d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	4a25      	ldr	r2, [pc, #148]	@ (8106974 <HAL_TIM_PWM_Start+0x1f4>)
 81068de:	4293      	cmp	r3, r2
 81068e0:	d022      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	681b      	ldr	r3, [r3, #0]
 81068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81068ea:	d01d      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	681b      	ldr	r3, [r3, #0]
 81068f0:	4a25      	ldr	r2, [pc, #148]	@ (8106988 <HAL_TIM_PWM_Start+0x208>)
 81068f2:	4293      	cmp	r3, r2
 81068f4:	d018      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 81068f6:	687b      	ldr	r3, [r7, #4]
 81068f8:	681b      	ldr	r3, [r3, #0]
 81068fa:	4a24      	ldr	r2, [pc, #144]	@ (810698c <HAL_TIM_PWM_Start+0x20c>)
 81068fc:	4293      	cmp	r3, r2
 81068fe:	d013      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	4a22      	ldr	r2, [pc, #136]	@ (8106990 <HAL_TIM_PWM_Start+0x210>)
 8106906:	4293      	cmp	r3, r2
 8106908:	d00e      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	681b      	ldr	r3, [r3, #0]
 810690e:	4a1a      	ldr	r2, [pc, #104]	@ (8106978 <HAL_TIM_PWM_Start+0x1f8>)
 8106910:	4293      	cmp	r3, r2
 8106912:	d009      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	681b      	ldr	r3, [r3, #0]
 8106918:	4a1e      	ldr	r2, [pc, #120]	@ (8106994 <HAL_TIM_PWM_Start+0x214>)
 810691a:	4293      	cmp	r3, r2
 810691c:	d004      	beq.n	8106928 <HAL_TIM_PWM_Start+0x1a8>
 810691e:	687b      	ldr	r3, [r7, #4]
 8106920:	681b      	ldr	r3, [r3, #0]
 8106922:	4a16      	ldr	r2, [pc, #88]	@ (810697c <HAL_TIM_PWM_Start+0x1fc>)
 8106924:	4293      	cmp	r3, r2
 8106926:	d115      	bne.n	8106954 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	689a      	ldr	r2, [r3, #8]
 810692e:	4b1a      	ldr	r3, [pc, #104]	@ (8106998 <HAL_TIM_PWM_Start+0x218>)
 8106930:	4013      	ands	r3, r2
 8106932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106934:	68fb      	ldr	r3, [r7, #12]
 8106936:	2b06      	cmp	r3, #6
 8106938:	d015      	beq.n	8106966 <HAL_TIM_PWM_Start+0x1e6>
 810693a:	68fb      	ldr	r3, [r7, #12]
 810693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106940:	d011      	beq.n	8106966 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	681b      	ldr	r3, [r3, #0]
 8106946:	681a      	ldr	r2, [r3, #0]
 8106948:	687b      	ldr	r3, [r7, #4]
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	f042 0201 	orr.w	r2, r2, #1
 8106950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106952:	e008      	b.n	8106966 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	681b      	ldr	r3, [r3, #0]
 8106958:	681a      	ldr	r2, [r3, #0]
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	681b      	ldr	r3, [r3, #0]
 810695e:	f042 0201 	orr.w	r2, r2, #1
 8106962:	601a      	str	r2, [r3, #0]
 8106964:	e000      	b.n	8106968 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106968:	2300      	movs	r3, #0
}
 810696a:	4618      	mov	r0, r3
 810696c:	3710      	adds	r7, #16
 810696e:	46bd      	mov	sp, r7
 8106970:	bd80      	pop	{r7, pc}
 8106972:	bf00      	nop
 8106974:	40010000 	.word	0x40010000
 8106978:	40010400 	.word	0x40010400
 810697c:	40014000 	.word	0x40014000
 8106980:	40014400 	.word	0x40014400
 8106984:	40014800 	.word	0x40014800
 8106988:	40000400 	.word	0x40000400
 810698c:	40000800 	.word	0x40000800
 8106990:	40000c00 	.word	0x40000c00
 8106994:	40001800 	.word	0x40001800
 8106998:	00010007 	.word	0x00010007

0810699c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810699c:	b580      	push	{r7, lr}
 810699e:	b082      	sub	sp, #8
 81069a0:	af00      	add	r7, sp, #0
 81069a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	2b00      	cmp	r3, #0
 81069a8:	d101      	bne.n	81069ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 81069aa:	2301      	movs	r3, #1
 81069ac:	e049      	b.n	8106a42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81069b4:	b2db      	uxtb	r3, r3
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d106      	bne.n	81069c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	2200      	movs	r2, #0
 81069be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 81069c2:	6878      	ldr	r0, [r7, #4]
 81069c4:	f000 f841 	bl	8106a4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	2202      	movs	r2, #2
 81069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	681a      	ldr	r2, [r3, #0]
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	3304      	adds	r3, #4
 81069d8:	4619      	mov	r1, r3
 81069da:	4610      	mov	r0, r2
 81069dc:	f000 fee8 	bl	81077b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	2201      	movs	r2, #1
 81069e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81069e8:	687b      	ldr	r3, [r7, #4]
 81069ea:	2201      	movs	r2, #1
 81069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	2201      	movs	r2, #1
 81069f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	2201      	movs	r2, #1
 81069fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	2201      	movs	r2, #1
 8106a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	2201      	movs	r2, #1
 8106a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	2201      	movs	r2, #1
 8106a14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	2201      	movs	r2, #1
 8106a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	2201      	movs	r2, #1
 8106a24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	2201      	movs	r2, #1
 8106a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	2201      	movs	r2, #1
 8106a34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	2201      	movs	r2, #1
 8106a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106a40:	2300      	movs	r3, #0
}
 8106a42:	4618      	mov	r0, r3
 8106a44:	3708      	adds	r7, #8
 8106a46:	46bd      	mov	sp, r7
 8106a48:	bd80      	pop	{r7, pc}

08106a4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8106a4a:	b480      	push	{r7}
 8106a4c:	b083      	sub	sp, #12
 8106a4e:	af00      	add	r7, sp, #0
 8106a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106a52:	bf00      	nop
 8106a54:	370c      	adds	r7, #12
 8106a56:	46bd      	mov	sp, r7
 8106a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a5c:	4770      	bx	lr
	...

08106a60 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106a60:	b580      	push	{r7, lr}
 8106a62:	b084      	sub	sp, #16
 8106a64:	af00      	add	r7, sp, #0
 8106a66:	6078      	str	r0, [r7, #4]
 8106a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106a6a:	683b      	ldr	r3, [r7, #0]
 8106a6c:	2b00      	cmp	r3, #0
 8106a6e:	d104      	bne.n	8106a7a <HAL_TIM_IC_Start+0x1a>
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106a76:	b2db      	uxtb	r3, r3
 8106a78:	e023      	b.n	8106ac2 <HAL_TIM_IC_Start+0x62>
 8106a7a:	683b      	ldr	r3, [r7, #0]
 8106a7c:	2b04      	cmp	r3, #4
 8106a7e:	d104      	bne.n	8106a8a <HAL_TIM_IC_Start+0x2a>
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106a86:	b2db      	uxtb	r3, r3
 8106a88:	e01b      	b.n	8106ac2 <HAL_TIM_IC_Start+0x62>
 8106a8a:	683b      	ldr	r3, [r7, #0]
 8106a8c:	2b08      	cmp	r3, #8
 8106a8e:	d104      	bne.n	8106a9a <HAL_TIM_IC_Start+0x3a>
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106a96:	b2db      	uxtb	r3, r3
 8106a98:	e013      	b.n	8106ac2 <HAL_TIM_IC_Start+0x62>
 8106a9a:	683b      	ldr	r3, [r7, #0]
 8106a9c:	2b0c      	cmp	r3, #12
 8106a9e:	d104      	bne.n	8106aaa <HAL_TIM_IC_Start+0x4a>
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106aa6:	b2db      	uxtb	r3, r3
 8106aa8:	e00b      	b.n	8106ac2 <HAL_TIM_IC_Start+0x62>
 8106aaa:	683b      	ldr	r3, [r7, #0]
 8106aac:	2b10      	cmp	r3, #16
 8106aae:	d104      	bne.n	8106aba <HAL_TIM_IC_Start+0x5a>
 8106ab0:	687b      	ldr	r3, [r7, #4]
 8106ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106ab6:	b2db      	uxtb	r3, r3
 8106ab8:	e003      	b.n	8106ac2 <HAL_TIM_IC_Start+0x62>
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106ac0:	b2db      	uxtb	r3, r3
 8106ac2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106ac4:	683b      	ldr	r3, [r7, #0]
 8106ac6:	2b00      	cmp	r3, #0
 8106ac8:	d104      	bne.n	8106ad4 <HAL_TIM_IC_Start+0x74>
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106ad0:	b2db      	uxtb	r3, r3
 8106ad2:	e013      	b.n	8106afc <HAL_TIM_IC_Start+0x9c>
 8106ad4:	683b      	ldr	r3, [r7, #0]
 8106ad6:	2b04      	cmp	r3, #4
 8106ad8:	d104      	bne.n	8106ae4 <HAL_TIM_IC_Start+0x84>
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106ae0:	b2db      	uxtb	r3, r3
 8106ae2:	e00b      	b.n	8106afc <HAL_TIM_IC_Start+0x9c>
 8106ae4:	683b      	ldr	r3, [r7, #0]
 8106ae6:	2b08      	cmp	r3, #8
 8106ae8:	d104      	bne.n	8106af4 <HAL_TIM_IC_Start+0x94>
 8106aea:	687b      	ldr	r3, [r7, #4]
 8106aec:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106af0:	b2db      	uxtb	r3, r3
 8106af2:	e003      	b.n	8106afc <HAL_TIM_IC_Start+0x9c>
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8106afa:	b2db      	uxtb	r3, r3
 8106afc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106afe:	7bfb      	ldrb	r3, [r7, #15]
 8106b00:	2b01      	cmp	r3, #1
 8106b02:	d102      	bne.n	8106b0a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106b04:	7bbb      	ldrb	r3, [r7, #14]
 8106b06:	2b01      	cmp	r3, #1
 8106b08:	d001      	beq.n	8106b0e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8106b0a:	2301      	movs	r3, #1
 8106b0c:	e097      	b.n	8106c3e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106b0e:	683b      	ldr	r3, [r7, #0]
 8106b10:	2b00      	cmp	r3, #0
 8106b12:	d104      	bne.n	8106b1e <HAL_TIM_IC_Start+0xbe>
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	2202      	movs	r2, #2
 8106b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106b1c:	e023      	b.n	8106b66 <HAL_TIM_IC_Start+0x106>
 8106b1e:	683b      	ldr	r3, [r7, #0]
 8106b20:	2b04      	cmp	r3, #4
 8106b22:	d104      	bne.n	8106b2e <HAL_TIM_IC_Start+0xce>
 8106b24:	687b      	ldr	r3, [r7, #4]
 8106b26:	2202      	movs	r2, #2
 8106b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106b2c:	e01b      	b.n	8106b66 <HAL_TIM_IC_Start+0x106>
 8106b2e:	683b      	ldr	r3, [r7, #0]
 8106b30:	2b08      	cmp	r3, #8
 8106b32:	d104      	bne.n	8106b3e <HAL_TIM_IC_Start+0xde>
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	2202      	movs	r2, #2
 8106b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106b3c:	e013      	b.n	8106b66 <HAL_TIM_IC_Start+0x106>
 8106b3e:	683b      	ldr	r3, [r7, #0]
 8106b40:	2b0c      	cmp	r3, #12
 8106b42:	d104      	bne.n	8106b4e <HAL_TIM_IC_Start+0xee>
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	2202      	movs	r2, #2
 8106b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106b4c:	e00b      	b.n	8106b66 <HAL_TIM_IC_Start+0x106>
 8106b4e:	683b      	ldr	r3, [r7, #0]
 8106b50:	2b10      	cmp	r3, #16
 8106b52:	d104      	bne.n	8106b5e <HAL_TIM_IC_Start+0xfe>
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	2202      	movs	r2, #2
 8106b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106b5c:	e003      	b.n	8106b66 <HAL_TIM_IC_Start+0x106>
 8106b5e:	687b      	ldr	r3, [r7, #4]
 8106b60:	2202      	movs	r2, #2
 8106b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106b66:	683b      	ldr	r3, [r7, #0]
 8106b68:	2b00      	cmp	r3, #0
 8106b6a:	d104      	bne.n	8106b76 <HAL_TIM_IC_Start+0x116>
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	2202      	movs	r2, #2
 8106b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106b74:	e013      	b.n	8106b9e <HAL_TIM_IC_Start+0x13e>
 8106b76:	683b      	ldr	r3, [r7, #0]
 8106b78:	2b04      	cmp	r3, #4
 8106b7a:	d104      	bne.n	8106b86 <HAL_TIM_IC_Start+0x126>
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	2202      	movs	r2, #2
 8106b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106b84:	e00b      	b.n	8106b9e <HAL_TIM_IC_Start+0x13e>
 8106b86:	683b      	ldr	r3, [r7, #0]
 8106b88:	2b08      	cmp	r3, #8
 8106b8a:	d104      	bne.n	8106b96 <HAL_TIM_IC_Start+0x136>
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	2202      	movs	r2, #2
 8106b90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106b94:	e003      	b.n	8106b9e <HAL_TIM_IC_Start+0x13e>
 8106b96:	687b      	ldr	r3, [r7, #4]
 8106b98:	2202      	movs	r2, #2
 8106b9a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	681b      	ldr	r3, [r3, #0]
 8106ba2:	2201      	movs	r2, #1
 8106ba4:	6839      	ldr	r1, [r7, #0]
 8106ba6:	4618      	mov	r0, r3
 8106ba8:	f001 fc2e 	bl	8108408 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	681b      	ldr	r3, [r3, #0]
 8106bb0:	4a25      	ldr	r2, [pc, #148]	@ (8106c48 <HAL_TIM_IC_Start+0x1e8>)
 8106bb2:	4293      	cmp	r3, r2
 8106bb4:	d022      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106bb6:	687b      	ldr	r3, [r7, #4]
 8106bb8:	681b      	ldr	r3, [r3, #0]
 8106bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106bbe:	d01d      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	681b      	ldr	r3, [r3, #0]
 8106bc4:	4a21      	ldr	r2, [pc, #132]	@ (8106c4c <HAL_TIM_IC_Start+0x1ec>)
 8106bc6:	4293      	cmp	r3, r2
 8106bc8:	d018      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	681b      	ldr	r3, [r3, #0]
 8106bce:	4a20      	ldr	r2, [pc, #128]	@ (8106c50 <HAL_TIM_IC_Start+0x1f0>)
 8106bd0:	4293      	cmp	r3, r2
 8106bd2:	d013      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	681b      	ldr	r3, [r3, #0]
 8106bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8106c54 <HAL_TIM_IC_Start+0x1f4>)
 8106bda:	4293      	cmp	r3, r2
 8106bdc:	d00e      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106bde:	687b      	ldr	r3, [r7, #4]
 8106be0:	681b      	ldr	r3, [r3, #0]
 8106be2:	4a1d      	ldr	r2, [pc, #116]	@ (8106c58 <HAL_TIM_IC_Start+0x1f8>)
 8106be4:	4293      	cmp	r3, r2
 8106be6:	d009      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	681b      	ldr	r3, [r3, #0]
 8106bec:	4a1b      	ldr	r2, [pc, #108]	@ (8106c5c <HAL_TIM_IC_Start+0x1fc>)
 8106bee:	4293      	cmp	r3, r2
 8106bf0:	d004      	beq.n	8106bfc <HAL_TIM_IC_Start+0x19c>
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	681b      	ldr	r3, [r3, #0]
 8106bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8106c60 <HAL_TIM_IC_Start+0x200>)
 8106bf8:	4293      	cmp	r3, r2
 8106bfa:	d115      	bne.n	8106c28 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	681b      	ldr	r3, [r3, #0]
 8106c00:	689a      	ldr	r2, [r3, #8]
 8106c02:	4b18      	ldr	r3, [pc, #96]	@ (8106c64 <HAL_TIM_IC_Start+0x204>)
 8106c04:	4013      	ands	r3, r2
 8106c06:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c08:	68bb      	ldr	r3, [r7, #8]
 8106c0a:	2b06      	cmp	r3, #6
 8106c0c:	d015      	beq.n	8106c3a <HAL_TIM_IC_Start+0x1da>
 8106c0e:	68bb      	ldr	r3, [r7, #8]
 8106c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c14:	d011      	beq.n	8106c3a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	681b      	ldr	r3, [r3, #0]
 8106c1a:	681a      	ldr	r2, [r3, #0]
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	681b      	ldr	r3, [r3, #0]
 8106c20:	f042 0201 	orr.w	r2, r2, #1
 8106c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c26:	e008      	b.n	8106c3a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	681b      	ldr	r3, [r3, #0]
 8106c2c:	681a      	ldr	r2, [r3, #0]
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	681b      	ldr	r3, [r3, #0]
 8106c32:	f042 0201 	orr.w	r2, r2, #1
 8106c36:	601a      	str	r2, [r3, #0]
 8106c38:	e000      	b.n	8106c3c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106c3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106c3c:	2300      	movs	r3, #0
}
 8106c3e:	4618      	mov	r0, r3
 8106c40:	3710      	adds	r7, #16
 8106c42:	46bd      	mov	sp, r7
 8106c44:	bd80      	pop	{r7, pc}
 8106c46:	bf00      	nop
 8106c48:	40010000 	.word	0x40010000
 8106c4c:	40000400 	.word	0x40000400
 8106c50:	40000800 	.word	0x40000800
 8106c54:	40000c00 	.word	0x40000c00
 8106c58:	40010400 	.word	0x40010400
 8106c5c:	40001800 	.word	0x40001800
 8106c60:	40014000 	.word	0x40014000
 8106c64:	00010007 	.word	0x00010007

08106c68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106c68:	b580      	push	{r7, lr}
 8106c6a:	b084      	sub	sp, #16
 8106c6c:	af00      	add	r7, sp, #0
 8106c6e:	6078      	str	r0, [r7, #4]
 8106c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8106c72:	2300      	movs	r3, #0
 8106c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	2b00      	cmp	r3, #0
 8106c7a:	d104      	bne.n	8106c86 <HAL_TIM_IC_Start_IT+0x1e>
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106c82:	b2db      	uxtb	r3, r3
 8106c84:	e023      	b.n	8106cce <HAL_TIM_IC_Start_IT+0x66>
 8106c86:	683b      	ldr	r3, [r7, #0]
 8106c88:	2b04      	cmp	r3, #4
 8106c8a:	d104      	bne.n	8106c96 <HAL_TIM_IC_Start_IT+0x2e>
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106c92:	b2db      	uxtb	r3, r3
 8106c94:	e01b      	b.n	8106cce <HAL_TIM_IC_Start_IT+0x66>
 8106c96:	683b      	ldr	r3, [r7, #0]
 8106c98:	2b08      	cmp	r3, #8
 8106c9a:	d104      	bne.n	8106ca6 <HAL_TIM_IC_Start_IT+0x3e>
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106ca2:	b2db      	uxtb	r3, r3
 8106ca4:	e013      	b.n	8106cce <HAL_TIM_IC_Start_IT+0x66>
 8106ca6:	683b      	ldr	r3, [r7, #0]
 8106ca8:	2b0c      	cmp	r3, #12
 8106caa:	d104      	bne.n	8106cb6 <HAL_TIM_IC_Start_IT+0x4e>
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106cb2:	b2db      	uxtb	r3, r3
 8106cb4:	e00b      	b.n	8106cce <HAL_TIM_IC_Start_IT+0x66>
 8106cb6:	683b      	ldr	r3, [r7, #0]
 8106cb8:	2b10      	cmp	r3, #16
 8106cba:	d104      	bne.n	8106cc6 <HAL_TIM_IC_Start_IT+0x5e>
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106cc2:	b2db      	uxtb	r3, r3
 8106cc4:	e003      	b.n	8106cce <HAL_TIM_IC_Start_IT+0x66>
 8106cc6:	687b      	ldr	r3, [r7, #4]
 8106cc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106ccc:	b2db      	uxtb	r3, r3
 8106cce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106cd0:	683b      	ldr	r3, [r7, #0]
 8106cd2:	2b00      	cmp	r3, #0
 8106cd4:	d104      	bne.n	8106ce0 <HAL_TIM_IC_Start_IT+0x78>
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106cdc:	b2db      	uxtb	r3, r3
 8106cde:	e013      	b.n	8106d08 <HAL_TIM_IC_Start_IT+0xa0>
 8106ce0:	683b      	ldr	r3, [r7, #0]
 8106ce2:	2b04      	cmp	r3, #4
 8106ce4:	d104      	bne.n	8106cf0 <HAL_TIM_IC_Start_IT+0x88>
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106cec:	b2db      	uxtb	r3, r3
 8106cee:	e00b      	b.n	8106d08 <HAL_TIM_IC_Start_IT+0xa0>
 8106cf0:	683b      	ldr	r3, [r7, #0]
 8106cf2:	2b08      	cmp	r3, #8
 8106cf4:	d104      	bne.n	8106d00 <HAL_TIM_IC_Start_IT+0x98>
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106cfc:	b2db      	uxtb	r3, r3
 8106cfe:	e003      	b.n	8106d08 <HAL_TIM_IC_Start_IT+0xa0>
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8106d06:	b2db      	uxtb	r3, r3
 8106d08:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106d0a:	7bbb      	ldrb	r3, [r7, #14]
 8106d0c:	2b01      	cmp	r3, #1
 8106d0e:	d102      	bne.n	8106d16 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106d10:	7b7b      	ldrb	r3, [r7, #13]
 8106d12:	2b01      	cmp	r3, #1
 8106d14:	d001      	beq.n	8106d1a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8106d16:	2301      	movs	r3, #1
 8106d18:	e0e2      	b.n	8106ee0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106d1a:	683b      	ldr	r3, [r7, #0]
 8106d1c:	2b00      	cmp	r3, #0
 8106d1e:	d104      	bne.n	8106d2a <HAL_TIM_IC_Start_IT+0xc2>
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2202      	movs	r2, #2
 8106d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106d28:	e023      	b.n	8106d72 <HAL_TIM_IC_Start_IT+0x10a>
 8106d2a:	683b      	ldr	r3, [r7, #0]
 8106d2c:	2b04      	cmp	r3, #4
 8106d2e:	d104      	bne.n	8106d3a <HAL_TIM_IC_Start_IT+0xd2>
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	2202      	movs	r2, #2
 8106d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106d38:	e01b      	b.n	8106d72 <HAL_TIM_IC_Start_IT+0x10a>
 8106d3a:	683b      	ldr	r3, [r7, #0]
 8106d3c:	2b08      	cmp	r3, #8
 8106d3e:	d104      	bne.n	8106d4a <HAL_TIM_IC_Start_IT+0xe2>
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	2202      	movs	r2, #2
 8106d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106d48:	e013      	b.n	8106d72 <HAL_TIM_IC_Start_IT+0x10a>
 8106d4a:	683b      	ldr	r3, [r7, #0]
 8106d4c:	2b0c      	cmp	r3, #12
 8106d4e:	d104      	bne.n	8106d5a <HAL_TIM_IC_Start_IT+0xf2>
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	2202      	movs	r2, #2
 8106d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106d58:	e00b      	b.n	8106d72 <HAL_TIM_IC_Start_IT+0x10a>
 8106d5a:	683b      	ldr	r3, [r7, #0]
 8106d5c:	2b10      	cmp	r3, #16
 8106d5e:	d104      	bne.n	8106d6a <HAL_TIM_IC_Start_IT+0x102>
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	2202      	movs	r2, #2
 8106d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106d68:	e003      	b.n	8106d72 <HAL_TIM_IC_Start_IT+0x10a>
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	2202      	movs	r2, #2
 8106d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106d72:	683b      	ldr	r3, [r7, #0]
 8106d74:	2b00      	cmp	r3, #0
 8106d76:	d104      	bne.n	8106d82 <HAL_TIM_IC_Start_IT+0x11a>
 8106d78:	687b      	ldr	r3, [r7, #4]
 8106d7a:	2202      	movs	r2, #2
 8106d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106d80:	e013      	b.n	8106daa <HAL_TIM_IC_Start_IT+0x142>
 8106d82:	683b      	ldr	r3, [r7, #0]
 8106d84:	2b04      	cmp	r3, #4
 8106d86:	d104      	bne.n	8106d92 <HAL_TIM_IC_Start_IT+0x12a>
 8106d88:	687b      	ldr	r3, [r7, #4]
 8106d8a:	2202      	movs	r2, #2
 8106d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106d90:	e00b      	b.n	8106daa <HAL_TIM_IC_Start_IT+0x142>
 8106d92:	683b      	ldr	r3, [r7, #0]
 8106d94:	2b08      	cmp	r3, #8
 8106d96:	d104      	bne.n	8106da2 <HAL_TIM_IC_Start_IT+0x13a>
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	2202      	movs	r2, #2
 8106d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106da0:	e003      	b.n	8106daa <HAL_TIM_IC_Start_IT+0x142>
 8106da2:	687b      	ldr	r3, [r7, #4]
 8106da4:	2202      	movs	r2, #2
 8106da6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8106daa:	683b      	ldr	r3, [r7, #0]
 8106dac:	2b0c      	cmp	r3, #12
 8106dae:	d841      	bhi.n	8106e34 <HAL_TIM_IC_Start_IT+0x1cc>
 8106db0:	a201      	add	r2, pc, #4	@ (adr r2, 8106db8 <HAL_TIM_IC_Start_IT+0x150>)
 8106db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106db6:	bf00      	nop
 8106db8:	08106ded 	.word	0x08106ded
 8106dbc:	08106e35 	.word	0x08106e35
 8106dc0:	08106e35 	.word	0x08106e35
 8106dc4:	08106e35 	.word	0x08106e35
 8106dc8:	08106dff 	.word	0x08106dff
 8106dcc:	08106e35 	.word	0x08106e35
 8106dd0:	08106e35 	.word	0x08106e35
 8106dd4:	08106e35 	.word	0x08106e35
 8106dd8:	08106e11 	.word	0x08106e11
 8106ddc:	08106e35 	.word	0x08106e35
 8106de0:	08106e35 	.word	0x08106e35
 8106de4:	08106e35 	.word	0x08106e35
 8106de8:	08106e23 	.word	0x08106e23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	681b      	ldr	r3, [r3, #0]
 8106df0:	68da      	ldr	r2, [r3, #12]
 8106df2:	687b      	ldr	r3, [r7, #4]
 8106df4:	681b      	ldr	r3, [r3, #0]
 8106df6:	f042 0202 	orr.w	r2, r2, #2
 8106dfa:	60da      	str	r2, [r3, #12]
      break;
 8106dfc:	e01d      	b.n	8106e3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8106dfe:	687b      	ldr	r3, [r7, #4]
 8106e00:	681b      	ldr	r3, [r3, #0]
 8106e02:	68da      	ldr	r2, [r3, #12]
 8106e04:	687b      	ldr	r3, [r7, #4]
 8106e06:	681b      	ldr	r3, [r3, #0]
 8106e08:	f042 0204 	orr.w	r2, r2, #4
 8106e0c:	60da      	str	r2, [r3, #12]
      break;
 8106e0e:	e014      	b.n	8106e3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	681b      	ldr	r3, [r3, #0]
 8106e14:	68da      	ldr	r2, [r3, #12]
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	681b      	ldr	r3, [r3, #0]
 8106e1a:	f042 0208 	orr.w	r2, r2, #8
 8106e1e:	60da      	str	r2, [r3, #12]
      break;
 8106e20:	e00b      	b.n	8106e3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	68da      	ldr	r2, [r3, #12]
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	f042 0210 	orr.w	r2, r2, #16
 8106e30:	60da      	str	r2, [r3, #12]
      break;
 8106e32:	e002      	b.n	8106e3a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8106e34:	2301      	movs	r3, #1
 8106e36:	73fb      	strb	r3, [r7, #15]
      break;
 8106e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8106e3a:	7bfb      	ldrb	r3, [r7, #15]
 8106e3c:	2b00      	cmp	r3, #0
 8106e3e:	d14e      	bne.n	8106ede <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	681b      	ldr	r3, [r3, #0]
 8106e44:	2201      	movs	r2, #1
 8106e46:	6839      	ldr	r1, [r7, #0]
 8106e48:	4618      	mov	r0, r3
 8106e4a:	f001 fadd 	bl	8108408 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	681b      	ldr	r3, [r3, #0]
 8106e52:	4a25      	ldr	r2, [pc, #148]	@ (8106ee8 <HAL_TIM_IC_Start_IT+0x280>)
 8106e54:	4293      	cmp	r3, r2
 8106e56:	d022      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106e60:	d01d      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e62:	687b      	ldr	r3, [r7, #4]
 8106e64:	681b      	ldr	r3, [r3, #0]
 8106e66:	4a21      	ldr	r2, [pc, #132]	@ (8106eec <HAL_TIM_IC_Start_IT+0x284>)
 8106e68:	4293      	cmp	r3, r2
 8106e6a:	d018      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e6c:	687b      	ldr	r3, [r7, #4]
 8106e6e:	681b      	ldr	r3, [r3, #0]
 8106e70:	4a1f      	ldr	r2, [pc, #124]	@ (8106ef0 <HAL_TIM_IC_Start_IT+0x288>)
 8106e72:	4293      	cmp	r3, r2
 8106e74:	d013      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e76:	687b      	ldr	r3, [r7, #4]
 8106e78:	681b      	ldr	r3, [r3, #0]
 8106e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8106ef4 <HAL_TIM_IC_Start_IT+0x28c>)
 8106e7c:	4293      	cmp	r3, r2
 8106e7e:	d00e      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	681b      	ldr	r3, [r3, #0]
 8106e84:	4a1c      	ldr	r2, [pc, #112]	@ (8106ef8 <HAL_TIM_IC_Start_IT+0x290>)
 8106e86:	4293      	cmp	r3, r2
 8106e88:	d009      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	681b      	ldr	r3, [r3, #0]
 8106e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8106efc <HAL_TIM_IC_Start_IT+0x294>)
 8106e90:	4293      	cmp	r3, r2
 8106e92:	d004      	beq.n	8106e9e <HAL_TIM_IC_Start_IT+0x236>
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	4a19      	ldr	r2, [pc, #100]	@ (8106f00 <HAL_TIM_IC_Start_IT+0x298>)
 8106e9a:	4293      	cmp	r3, r2
 8106e9c:	d115      	bne.n	8106eca <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106e9e:	687b      	ldr	r3, [r7, #4]
 8106ea0:	681b      	ldr	r3, [r3, #0]
 8106ea2:	689a      	ldr	r2, [r3, #8]
 8106ea4:	4b17      	ldr	r3, [pc, #92]	@ (8106f04 <HAL_TIM_IC_Start_IT+0x29c>)
 8106ea6:	4013      	ands	r3, r2
 8106ea8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106eaa:	68bb      	ldr	r3, [r7, #8]
 8106eac:	2b06      	cmp	r3, #6
 8106eae:	d015      	beq.n	8106edc <HAL_TIM_IC_Start_IT+0x274>
 8106eb0:	68bb      	ldr	r3, [r7, #8]
 8106eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106eb6:	d011      	beq.n	8106edc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	681b      	ldr	r3, [r3, #0]
 8106ebc:	681a      	ldr	r2, [r3, #0]
 8106ebe:	687b      	ldr	r3, [r7, #4]
 8106ec0:	681b      	ldr	r3, [r3, #0]
 8106ec2:	f042 0201 	orr.w	r2, r2, #1
 8106ec6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106ec8:	e008      	b.n	8106edc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	681a      	ldr	r2, [r3, #0]
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	f042 0201 	orr.w	r2, r2, #1
 8106ed8:	601a      	str	r2, [r3, #0]
 8106eda:	e000      	b.n	8106ede <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106edc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8106ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8106ee0:	4618      	mov	r0, r3
 8106ee2:	3710      	adds	r7, #16
 8106ee4:	46bd      	mov	sp, r7
 8106ee6:	bd80      	pop	{r7, pc}
 8106ee8:	40010000 	.word	0x40010000
 8106eec:	40000400 	.word	0x40000400
 8106ef0:	40000800 	.word	0x40000800
 8106ef4:	40000c00 	.word	0x40000c00
 8106ef8:	40010400 	.word	0x40010400
 8106efc:	40001800 	.word	0x40001800
 8106f00:	40014000 	.word	0x40014000
 8106f04:	00010007 	.word	0x00010007

08106f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106f08:	b580      	push	{r7, lr}
 8106f0a:	b084      	sub	sp, #16
 8106f0c:	af00      	add	r7, sp, #0
 8106f0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	68db      	ldr	r3, [r3, #12]
 8106f16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8106f18:	687b      	ldr	r3, [r7, #4]
 8106f1a:	681b      	ldr	r3, [r3, #0]
 8106f1c:	691b      	ldr	r3, [r3, #16]
 8106f1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8106f20:	68bb      	ldr	r3, [r7, #8]
 8106f22:	f003 0302 	and.w	r3, r3, #2
 8106f26:	2b00      	cmp	r3, #0
 8106f28:	d020      	beq.n	8106f6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8106f2a:	68fb      	ldr	r3, [r7, #12]
 8106f2c:	f003 0302 	and.w	r3, r3, #2
 8106f30:	2b00      	cmp	r3, #0
 8106f32:	d01b      	beq.n	8106f6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	681b      	ldr	r3, [r3, #0]
 8106f38:	f06f 0202 	mvn.w	r2, #2
 8106f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	2201      	movs	r2, #1
 8106f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	681b      	ldr	r3, [r3, #0]
 8106f48:	699b      	ldr	r3, [r3, #24]
 8106f4a:	f003 0303 	and.w	r3, r3, #3
 8106f4e:	2b00      	cmp	r3, #0
 8106f50:	d003      	beq.n	8106f5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106f52:	6878      	ldr	r0, [r7, #4]
 8106f54:	f7fb fd1e 	bl	8102994 <HAL_TIM_IC_CaptureCallback>
 8106f58:	e005      	b.n	8106f66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106f5a:	6878      	ldr	r0, [r7, #4]
 8106f5c:	f000 fc0a 	bl	8107774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106f60:	6878      	ldr	r0, [r7, #4]
 8106f62:	f000 fc11 	bl	8107788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	2200      	movs	r2, #0
 8106f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8106f6c:	68bb      	ldr	r3, [r7, #8]
 8106f6e:	f003 0304 	and.w	r3, r3, #4
 8106f72:	2b00      	cmp	r3, #0
 8106f74:	d020      	beq.n	8106fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8106f76:	68fb      	ldr	r3, [r7, #12]
 8106f78:	f003 0304 	and.w	r3, r3, #4
 8106f7c:	2b00      	cmp	r3, #0
 8106f7e:	d01b      	beq.n	8106fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8106f80:	687b      	ldr	r3, [r7, #4]
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	f06f 0204 	mvn.w	r2, #4
 8106f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	2202      	movs	r2, #2
 8106f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	699b      	ldr	r3, [r3, #24]
 8106f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d003      	beq.n	8106fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106f9e:	6878      	ldr	r0, [r7, #4]
 8106fa0:	f7fb fcf8 	bl	8102994 <HAL_TIM_IC_CaptureCallback>
 8106fa4:	e005      	b.n	8106fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106fa6:	6878      	ldr	r0, [r7, #4]
 8106fa8:	f000 fbe4 	bl	8107774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106fac:	6878      	ldr	r0, [r7, #4]
 8106fae:	f000 fbeb 	bl	8107788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	2200      	movs	r2, #0
 8106fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8106fb8:	68bb      	ldr	r3, [r7, #8]
 8106fba:	f003 0308 	and.w	r3, r3, #8
 8106fbe:	2b00      	cmp	r3, #0
 8106fc0:	d020      	beq.n	8107004 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8106fc2:	68fb      	ldr	r3, [r7, #12]
 8106fc4:	f003 0308 	and.w	r3, r3, #8
 8106fc8:	2b00      	cmp	r3, #0
 8106fca:	d01b      	beq.n	8107004 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	f06f 0208 	mvn.w	r2, #8
 8106fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	2204      	movs	r2, #4
 8106fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	681b      	ldr	r3, [r3, #0]
 8106fe0:	69db      	ldr	r3, [r3, #28]
 8106fe2:	f003 0303 	and.w	r3, r3, #3
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d003      	beq.n	8106ff2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106fea:	6878      	ldr	r0, [r7, #4]
 8106fec:	f7fb fcd2 	bl	8102994 <HAL_TIM_IC_CaptureCallback>
 8106ff0:	e005      	b.n	8106ffe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106ff2:	6878      	ldr	r0, [r7, #4]
 8106ff4:	f000 fbbe 	bl	8107774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106ff8:	6878      	ldr	r0, [r7, #4]
 8106ffa:	f000 fbc5 	bl	8107788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	2200      	movs	r2, #0
 8107002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8107004:	68bb      	ldr	r3, [r7, #8]
 8107006:	f003 0310 	and.w	r3, r3, #16
 810700a:	2b00      	cmp	r3, #0
 810700c:	d020      	beq.n	8107050 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810700e:	68fb      	ldr	r3, [r7, #12]
 8107010:	f003 0310 	and.w	r3, r3, #16
 8107014:	2b00      	cmp	r3, #0
 8107016:	d01b      	beq.n	8107050 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8107018:	687b      	ldr	r3, [r7, #4]
 810701a:	681b      	ldr	r3, [r3, #0]
 810701c:	f06f 0210 	mvn.w	r2, #16
 8107020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	2208      	movs	r2, #8
 8107026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	681b      	ldr	r3, [r3, #0]
 810702c:	69db      	ldr	r3, [r3, #28]
 810702e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107032:	2b00      	cmp	r3, #0
 8107034:	d003      	beq.n	810703e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107036:	6878      	ldr	r0, [r7, #4]
 8107038:	f7fb fcac 	bl	8102994 <HAL_TIM_IC_CaptureCallback>
 810703c:	e005      	b.n	810704a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810703e:	6878      	ldr	r0, [r7, #4]
 8107040:	f000 fb98 	bl	8107774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107044:	6878      	ldr	r0, [r7, #4]
 8107046:	f000 fb9f 	bl	8107788 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810704a:	687b      	ldr	r3, [r7, #4]
 810704c:	2200      	movs	r2, #0
 810704e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8107050:	68bb      	ldr	r3, [r7, #8]
 8107052:	f003 0301 	and.w	r3, r3, #1
 8107056:	2b00      	cmp	r3, #0
 8107058:	d00c      	beq.n	8107074 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810705a:	68fb      	ldr	r3, [r7, #12]
 810705c:	f003 0301 	and.w	r3, r3, #1
 8107060:	2b00      	cmp	r3, #0
 8107062:	d007      	beq.n	8107074 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8107064:	687b      	ldr	r3, [r7, #4]
 8107066:	681b      	ldr	r3, [r3, #0]
 8107068:	f06f 0201 	mvn.w	r2, #1
 810706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810706e:	6878      	ldr	r0, [r7, #4]
 8107070:	f7fb fc6c 	bl	810294c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107074:	68bb      	ldr	r3, [r7, #8]
 8107076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810707a:	2b00      	cmp	r3, #0
 810707c:	d104      	bne.n	8107088 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810707e:	68bb      	ldr	r3, [r7, #8]
 8107080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107084:	2b00      	cmp	r3, #0
 8107086:	d00c      	beq.n	81070a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107088:	68fb      	ldr	r3, [r7, #12]
 810708a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810708e:	2b00      	cmp	r3, #0
 8107090:	d007      	beq.n	81070a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8107092:	687b      	ldr	r3, [r7, #4]
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810709a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810709c:	6878      	ldr	r0, [r7, #4]
 810709e:	f001 fa71 	bl	8108584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81070a2:	68bb      	ldr	r3, [r7, #8]
 81070a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81070a8:	2b00      	cmp	r3, #0
 81070aa:	d00c      	beq.n	81070c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81070ac:	68fb      	ldr	r3, [r7, #12]
 81070ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81070b2:	2b00      	cmp	r3, #0
 81070b4:	d007      	beq.n	81070c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81070b6:	687b      	ldr	r3, [r7, #4]
 81070b8:	681b      	ldr	r3, [r3, #0]
 81070ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81070c0:	6878      	ldr	r0, [r7, #4]
 81070c2:	f001 fa69 	bl	8108598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81070c6:	68bb      	ldr	r3, [r7, #8]
 81070c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81070cc:	2b00      	cmp	r3, #0
 81070ce:	d00c      	beq.n	81070ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81070d0:	68fb      	ldr	r3, [r7, #12]
 81070d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81070d6:	2b00      	cmp	r3, #0
 81070d8:	d007      	beq.n	81070ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	681b      	ldr	r3, [r3, #0]
 81070de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81070e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81070e4:	6878      	ldr	r0, [r7, #4]
 81070e6:	f000 fb59 	bl	810779c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81070ea:	68bb      	ldr	r3, [r7, #8]
 81070ec:	f003 0320 	and.w	r3, r3, #32
 81070f0:	2b00      	cmp	r3, #0
 81070f2:	d00c      	beq.n	810710e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81070f4:	68fb      	ldr	r3, [r7, #12]
 81070f6:	f003 0320 	and.w	r3, r3, #32
 81070fa:	2b00      	cmp	r3, #0
 81070fc:	d007      	beq.n	810710e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	681b      	ldr	r3, [r3, #0]
 8107102:	f06f 0220 	mvn.w	r2, #32
 8107106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107108:	6878      	ldr	r0, [r7, #4]
 810710a:	f001 fa31 	bl	8108570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810710e:	bf00      	nop
 8107110:	3710      	adds	r7, #16
 8107112:	46bd      	mov	sp, r7
 8107114:	bd80      	pop	{r7, pc}

08107116 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8107116:	b580      	push	{r7, lr}
 8107118:	b086      	sub	sp, #24
 810711a:	af00      	add	r7, sp, #0
 810711c:	60f8      	str	r0, [r7, #12]
 810711e:	60b9      	str	r1, [r7, #8]
 8107120:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107122:	2300      	movs	r3, #0
 8107124:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107126:	68fb      	ldr	r3, [r7, #12]
 8107128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810712c:	2b01      	cmp	r3, #1
 810712e:	d101      	bne.n	8107134 <HAL_TIM_IC_ConfigChannel+0x1e>
 8107130:	2302      	movs	r3, #2
 8107132:	e088      	b.n	8107246 <HAL_TIM_IC_ConfigChannel+0x130>
 8107134:	68fb      	ldr	r3, [r7, #12]
 8107136:	2201      	movs	r2, #1
 8107138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 810713c:	687b      	ldr	r3, [r7, #4]
 810713e:	2b00      	cmp	r3, #0
 8107140:	d11b      	bne.n	810717a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8107142:	68fb      	ldr	r3, [r7, #12]
 8107144:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107146:	68bb      	ldr	r3, [r7, #8]
 8107148:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810714a:	68bb      	ldr	r3, [r7, #8]
 810714c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810714e:	68bb      	ldr	r3, [r7, #8]
 8107150:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8107152:	f000 ff93 	bl	810807c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8107156:	68fb      	ldr	r3, [r7, #12]
 8107158:	681b      	ldr	r3, [r3, #0]
 810715a:	699a      	ldr	r2, [r3, #24]
 810715c:	68fb      	ldr	r3, [r7, #12]
 810715e:	681b      	ldr	r3, [r3, #0]
 8107160:	f022 020c 	bic.w	r2, r2, #12
 8107164:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8107166:	68fb      	ldr	r3, [r7, #12]
 8107168:	681b      	ldr	r3, [r3, #0]
 810716a:	6999      	ldr	r1, [r3, #24]
 810716c:	68bb      	ldr	r3, [r7, #8]
 810716e:	689a      	ldr	r2, [r3, #8]
 8107170:	68fb      	ldr	r3, [r7, #12]
 8107172:	681b      	ldr	r3, [r3, #0]
 8107174:	430a      	orrs	r2, r1
 8107176:	619a      	str	r2, [r3, #24]
 8107178:	e060      	b.n	810723c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	2b04      	cmp	r3, #4
 810717e:	d11c      	bne.n	81071ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8107180:	68fb      	ldr	r3, [r7, #12]
 8107182:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107184:	68bb      	ldr	r3, [r7, #8]
 8107186:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107188:	68bb      	ldr	r3, [r7, #8]
 810718a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810718c:	68bb      	ldr	r3, [r7, #8]
 810718e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8107190:	f001 f817 	bl	81081c2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8107194:	68fb      	ldr	r3, [r7, #12]
 8107196:	681b      	ldr	r3, [r3, #0]
 8107198:	699a      	ldr	r2, [r3, #24]
 810719a:	68fb      	ldr	r3, [r7, #12]
 810719c:	681b      	ldr	r3, [r3, #0]
 810719e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 81071a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 81071a4:	68fb      	ldr	r3, [r7, #12]
 81071a6:	681b      	ldr	r3, [r3, #0]
 81071a8:	6999      	ldr	r1, [r3, #24]
 81071aa:	68bb      	ldr	r3, [r7, #8]
 81071ac:	689b      	ldr	r3, [r3, #8]
 81071ae:	021a      	lsls	r2, r3, #8
 81071b0:	68fb      	ldr	r3, [r7, #12]
 81071b2:	681b      	ldr	r3, [r3, #0]
 81071b4:	430a      	orrs	r2, r1
 81071b6:	619a      	str	r2, [r3, #24]
 81071b8:	e040      	b.n	810723c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	2b08      	cmp	r3, #8
 81071be:	d11b      	bne.n	81071f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 81071c0:	68fb      	ldr	r3, [r7, #12]
 81071c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81071c4:	68bb      	ldr	r3, [r7, #8]
 81071c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81071c8:	68bb      	ldr	r3, [r7, #8]
 81071ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81071cc:	68bb      	ldr	r3, [r7, #8]
 81071ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 81071d0:	f001 f864 	bl	810829c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 81071d4:	68fb      	ldr	r3, [r7, #12]
 81071d6:	681b      	ldr	r3, [r3, #0]
 81071d8:	69da      	ldr	r2, [r3, #28]
 81071da:	68fb      	ldr	r3, [r7, #12]
 81071dc:	681b      	ldr	r3, [r3, #0]
 81071de:	f022 020c 	bic.w	r2, r2, #12
 81071e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 81071e4:	68fb      	ldr	r3, [r7, #12]
 81071e6:	681b      	ldr	r3, [r3, #0]
 81071e8:	69d9      	ldr	r1, [r3, #28]
 81071ea:	68bb      	ldr	r3, [r7, #8]
 81071ec:	689a      	ldr	r2, [r3, #8]
 81071ee:	68fb      	ldr	r3, [r7, #12]
 81071f0:	681b      	ldr	r3, [r3, #0]
 81071f2:	430a      	orrs	r2, r1
 81071f4:	61da      	str	r2, [r3, #28]
 81071f6:	e021      	b.n	810723c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 81071f8:	687b      	ldr	r3, [r7, #4]
 81071fa:	2b0c      	cmp	r3, #12
 81071fc:	d11c      	bne.n	8107238 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 81071fe:	68fb      	ldr	r3, [r7, #12]
 8107200:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107202:	68bb      	ldr	r3, [r7, #8]
 8107204:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107206:	68bb      	ldr	r3, [r7, #8]
 8107208:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810720a:	68bb      	ldr	r3, [r7, #8]
 810720c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810720e:	f001 f881 	bl	8108314 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8107212:	68fb      	ldr	r3, [r7, #12]
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	69da      	ldr	r2, [r3, #28]
 8107218:	68fb      	ldr	r3, [r7, #12]
 810721a:	681b      	ldr	r3, [r3, #0]
 810721c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8107220:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8107222:	68fb      	ldr	r3, [r7, #12]
 8107224:	681b      	ldr	r3, [r3, #0]
 8107226:	69d9      	ldr	r1, [r3, #28]
 8107228:	68bb      	ldr	r3, [r7, #8]
 810722a:	689b      	ldr	r3, [r3, #8]
 810722c:	021a      	lsls	r2, r3, #8
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	430a      	orrs	r2, r1
 8107234:	61da      	str	r2, [r3, #28]
 8107236:	e001      	b.n	810723c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8107238:	2301      	movs	r3, #1
 810723a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810723c:	68fb      	ldr	r3, [r7, #12]
 810723e:	2200      	movs	r2, #0
 8107240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8107244:	7dfb      	ldrb	r3, [r7, #23]
}
 8107246:	4618      	mov	r0, r3
 8107248:	3718      	adds	r7, #24
 810724a:	46bd      	mov	sp, r7
 810724c:	bd80      	pop	{r7, pc}
	...

08107250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107250:	b580      	push	{r7, lr}
 8107252:	b086      	sub	sp, #24
 8107254:	af00      	add	r7, sp, #0
 8107256:	60f8      	str	r0, [r7, #12]
 8107258:	60b9      	str	r1, [r7, #8]
 810725a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810725c:	2300      	movs	r3, #0
 810725e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107260:	68fb      	ldr	r3, [r7, #12]
 8107262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107266:	2b01      	cmp	r3, #1
 8107268:	d101      	bne.n	810726e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810726a:	2302      	movs	r3, #2
 810726c:	e0ff      	b.n	810746e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810726e:	68fb      	ldr	r3, [r7, #12]
 8107270:	2201      	movs	r2, #1
 8107272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8107276:	687b      	ldr	r3, [r7, #4]
 8107278:	2b14      	cmp	r3, #20
 810727a:	f200 80f0 	bhi.w	810745e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810727e:	a201      	add	r2, pc, #4	@ (adr r2, 8107284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107284:	081072d9 	.word	0x081072d9
 8107288:	0810745f 	.word	0x0810745f
 810728c:	0810745f 	.word	0x0810745f
 8107290:	0810745f 	.word	0x0810745f
 8107294:	08107319 	.word	0x08107319
 8107298:	0810745f 	.word	0x0810745f
 810729c:	0810745f 	.word	0x0810745f
 81072a0:	0810745f 	.word	0x0810745f
 81072a4:	0810735b 	.word	0x0810735b
 81072a8:	0810745f 	.word	0x0810745f
 81072ac:	0810745f 	.word	0x0810745f
 81072b0:	0810745f 	.word	0x0810745f
 81072b4:	0810739b 	.word	0x0810739b
 81072b8:	0810745f 	.word	0x0810745f
 81072bc:	0810745f 	.word	0x0810745f
 81072c0:	0810745f 	.word	0x0810745f
 81072c4:	081073dd 	.word	0x081073dd
 81072c8:	0810745f 	.word	0x0810745f
 81072cc:	0810745f 	.word	0x0810745f
 81072d0:	0810745f 	.word	0x0810745f
 81072d4:	0810741d 	.word	0x0810741d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81072d8:	68fb      	ldr	r3, [r7, #12]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	68b9      	ldr	r1, [r7, #8]
 81072de:	4618      	mov	r0, r3
 81072e0:	f000 fb0c 	bl	81078fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81072e4:	68fb      	ldr	r3, [r7, #12]
 81072e6:	681b      	ldr	r3, [r3, #0]
 81072e8:	699a      	ldr	r2, [r3, #24]
 81072ea:	68fb      	ldr	r3, [r7, #12]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	f042 0208 	orr.w	r2, r2, #8
 81072f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	681b      	ldr	r3, [r3, #0]
 81072f8:	699a      	ldr	r2, [r3, #24]
 81072fa:	68fb      	ldr	r3, [r7, #12]
 81072fc:	681b      	ldr	r3, [r3, #0]
 81072fe:	f022 0204 	bic.w	r2, r2, #4
 8107302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107304:	68fb      	ldr	r3, [r7, #12]
 8107306:	681b      	ldr	r3, [r3, #0]
 8107308:	6999      	ldr	r1, [r3, #24]
 810730a:	68bb      	ldr	r3, [r7, #8]
 810730c:	691a      	ldr	r2, [r3, #16]
 810730e:	68fb      	ldr	r3, [r7, #12]
 8107310:	681b      	ldr	r3, [r3, #0]
 8107312:	430a      	orrs	r2, r1
 8107314:	619a      	str	r2, [r3, #24]
      break;
 8107316:	e0a5      	b.n	8107464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	68b9      	ldr	r1, [r7, #8]
 810731e:	4618      	mov	r0, r3
 8107320:	f000 fb7c 	bl	8107a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107324:	68fb      	ldr	r3, [r7, #12]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	699a      	ldr	r2, [r3, #24]
 810732a:	68fb      	ldr	r3, [r7, #12]
 810732c:	681b      	ldr	r3, [r3, #0]
 810732e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107334:	68fb      	ldr	r3, [r7, #12]
 8107336:	681b      	ldr	r3, [r3, #0]
 8107338:	699a      	ldr	r2, [r3, #24]
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	681b      	ldr	r3, [r3, #0]
 810733e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107344:	68fb      	ldr	r3, [r7, #12]
 8107346:	681b      	ldr	r3, [r3, #0]
 8107348:	6999      	ldr	r1, [r3, #24]
 810734a:	68bb      	ldr	r3, [r7, #8]
 810734c:	691b      	ldr	r3, [r3, #16]
 810734e:	021a      	lsls	r2, r3, #8
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	681b      	ldr	r3, [r3, #0]
 8107354:	430a      	orrs	r2, r1
 8107356:	619a      	str	r2, [r3, #24]
      break;
 8107358:	e084      	b.n	8107464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810735a:	68fb      	ldr	r3, [r7, #12]
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	68b9      	ldr	r1, [r7, #8]
 8107360:	4618      	mov	r0, r3
 8107362:	f000 fbe5 	bl	8107b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107366:	68fb      	ldr	r3, [r7, #12]
 8107368:	681b      	ldr	r3, [r3, #0]
 810736a:	69da      	ldr	r2, [r3, #28]
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	681b      	ldr	r3, [r3, #0]
 8107370:	f042 0208 	orr.w	r2, r2, #8
 8107374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107376:	68fb      	ldr	r3, [r7, #12]
 8107378:	681b      	ldr	r3, [r3, #0]
 810737a:	69da      	ldr	r2, [r3, #28]
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	f022 0204 	bic.w	r2, r2, #4
 8107384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	69d9      	ldr	r1, [r3, #28]
 810738c:	68bb      	ldr	r3, [r7, #8]
 810738e:	691a      	ldr	r2, [r3, #16]
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	430a      	orrs	r2, r1
 8107396:	61da      	str	r2, [r3, #28]
      break;
 8107398:	e064      	b.n	8107464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	681b      	ldr	r3, [r3, #0]
 810739e:	68b9      	ldr	r1, [r7, #8]
 81073a0:	4618      	mov	r0, r3
 81073a2:	f000 fc4d 	bl	8107c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81073a6:	68fb      	ldr	r3, [r7, #12]
 81073a8:	681b      	ldr	r3, [r3, #0]
 81073aa:	69da      	ldr	r2, [r3, #28]
 81073ac:	68fb      	ldr	r3, [r7, #12]
 81073ae:	681b      	ldr	r3, [r3, #0]
 81073b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81073b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81073b6:	68fb      	ldr	r3, [r7, #12]
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	69da      	ldr	r2, [r3, #28]
 81073bc:	68fb      	ldr	r3, [r7, #12]
 81073be:	681b      	ldr	r3, [r3, #0]
 81073c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81073c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81073c6:	68fb      	ldr	r3, [r7, #12]
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	69d9      	ldr	r1, [r3, #28]
 81073cc:	68bb      	ldr	r3, [r7, #8]
 81073ce:	691b      	ldr	r3, [r3, #16]
 81073d0:	021a      	lsls	r2, r3, #8
 81073d2:	68fb      	ldr	r3, [r7, #12]
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	430a      	orrs	r2, r1
 81073d8:	61da      	str	r2, [r3, #28]
      break;
 81073da:	e043      	b.n	8107464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81073dc:	68fb      	ldr	r3, [r7, #12]
 81073de:	681b      	ldr	r3, [r3, #0]
 81073e0:	68b9      	ldr	r1, [r7, #8]
 81073e2:	4618      	mov	r0, r3
 81073e4:	f000 fc96 	bl	8107d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81073e8:	68fb      	ldr	r3, [r7, #12]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81073ee:	68fb      	ldr	r3, [r7, #12]
 81073f0:	681b      	ldr	r3, [r3, #0]
 81073f2:	f042 0208 	orr.w	r2, r2, #8
 81073f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	681b      	ldr	r3, [r3, #0]
 81073fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81073fe:	68fb      	ldr	r3, [r7, #12]
 8107400:	681b      	ldr	r3, [r3, #0]
 8107402:	f022 0204 	bic.w	r2, r2, #4
 8107406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	681b      	ldr	r3, [r3, #0]
 810740c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810740e:	68bb      	ldr	r3, [r7, #8]
 8107410:	691a      	ldr	r2, [r3, #16]
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	681b      	ldr	r3, [r3, #0]
 8107416:	430a      	orrs	r2, r1
 8107418:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810741a:	e023      	b.n	8107464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810741c:	68fb      	ldr	r3, [r7, #12]
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	68b9      	ldr	r1, [r7, #8]
 8107422:	4618      	mov	r0, r3
 8107424:	f000 fcda 	bl	8107ddc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107428:	68fb      	ldr	r3, [r7, #12]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810742e:	68fb      	ldr	r3, [r7, #12]
 8107430:	681b      	ldr	r3, [r3, #0]
 8107432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8107436:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107438:	68fb      	ldr	r3, [r7, #12]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810743e:	68fb      	ldr	r3, [r7, #12]
 8107440:	681b      	ldr	r3, [r3, #0]
 8107442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8107446:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107448:	68fb      	ldr	r3, [r7, #12]
 810744a:	681b      	ldr	r3, [r3, #0]
 810744c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 810744e:	68bb      	ldr	r3, [r7, #8]
 8107450:	691b      	ldr	r3, [r3, #16]
 8107452:	021a      	lsls	r2, r3, #8
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	681b      	ldr	r3, [r3, #0]
 8107458:	430a      	orrs	r2, r1
 810745a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 810745c:	e002      	b.n	8107464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810745e:	2301      	movs	r3, #1
 8107460:	75fb      	strb	r3, [r7, #23]
      break;
 8107462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107464:	68fb      	ldr	r3, [r7, #12]
 8107466:	2200      	movs	r2, #0
 8107468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810746c:	7dfb      	ldrb	r3, [r7, #23]
}
 810746e:	4618      	mov	r0, r3
 8107470:	3718      	adds	r7, #24
 8107472:	46bd      	mov	sp, r7
 8107474:	bd80      	pop	{r7, pc}
 8107476:	bf00      	nop

08107478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8107478:	b580      	push	{r7, lr}
 810747a:	b084      	sub	sp, #16
 810747c:	af00      	add	r7, sp, #0
 810747e:	6078      	str	r0, [r7, #4]
 8107480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8107482:	2300      	movs	r3, #0
 8107484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810748c:	2b01      	cmp	r3, #1
 810748e:	d101      	bne.n	8107494 <HAL_TIM_ConfigClockSource+0x1c>
 8107490:	2302      	movs	r3, #2
 8107492:	e0de      	b.n	8107652 <HAL_TIM_ConfigClockSource+0x1da>
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	2201      	movs	r2, #1
 8107498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	2202      	movs	r2, #2
 81074a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	689b      	ldr	r3, [r3, #8]
 81074aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81074ac:	68bb      	ldr	r3, [r7, #8]
 81074ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 81074b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 81074b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81074b8:	68bb      	ldr	r3, [r7, #8]
 81074ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81074be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	68ba      	ldr	r2, [r7, #8]
 81074c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81074c8:	683b      	ldr	r3, [r7, #0]
 81074ca:	681b      	ldr	r3, [r3, #0]
 81074cc:	4a63      	ldr	r2, [pc, #396]	@ (810765c <HAL_TIM_ConfigClockSource+0x1e4>)
 81074ce:	4293      	cmp	r3, r2
 81074d0:	f000 80a9 	beq.w	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 81074d4:	4a61      	ldr	r2, [pc, #388]	@ (810765c <HAL_TIM_ConfigClockSource+0x1e4>)
 81074d6:	4293      	cmp	r3, r2
 81074d8:	f200 80ae 	bhi.w	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 81074dc:	4a60      	ldr	r2, [pc, #384]	@ (8107660 <HAL_TIM_ConfigClockSource+0x1e8>)
 81074de:	4293      	cmp	r3, r2
 81074e0:	f000 80a1 	beq.w	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 81074e4:	4a5e      	ldr	r2, [pc, #376]	@ (8107660 <HAL_TIM_ConfigClockSource+0x1e8>)
 81074e6:	4293      	cmp	r3, r2
 81074e8:	f200 80a6 	bhi.w	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 81074ec:	4a5d      	ldr	r2, [pc, #372]	@ (8107664 <HAL_TIM_ConfigClockSource+0x1ec>)
 81074ee:	4293      	cmp	r3, r2
 81074f0:	f000 8099 	beq.w	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 81074f4:	4a5b      	ldr	r2, [pc, #364]	@ (8107664 <HAL_TIM_ConfigClockSource+0x1ec>)
 81074f6:	4293      	cmp	r3, r2
 81074f8:	f200 809e 	bhi.w	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 81074fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107500:	f000 8091 	beq.w	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 8107504:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107508:	f200 8096 	bhi.w	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 810750c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107510:	f000 8089 	beq.w	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 8107514:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107518:	f200 808e 	bhi.w	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 810751c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107520:	d03e      	beq.n	81075a0 <HAL_TIM_ConfigClockSource+0x128>
 8107522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107526:	f200 8087 	bhi.w	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 810752a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810752e:	f000 8086 	beq.w	810763e <HAL_TIM_ConfigClockSource+0x1c6>
 8107532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107536:	d87f      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107538:	2b70      	cmp	r3, #112	@ 0x70
 810753a:	d01a      	beq.n	8107572 <HAL_TIM_ConfigClockSource+0xfa>
 810753c:	2b70      	cmp	r3, #112	@ 0x70
 810753e:	d87b      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107540:	2b60      	cmp	r3, #96	@ 0x60
 8107542:	d050      	beq.n	81075e6 <HAL_TIM_ConfigClockSource+0x16e>
 8107544:	2b60      	cmp	r3, #96	@ 0x60
 8107546:	d877      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107548:	2b50      	cmp	r3, #80	@ 0x50
 810754a:	d03c      	beq.n	81075c6 <HAL_TIM_ConfigClockSource+0x14e>
 810754c:	2b50      	cmp	r3, #80	@ 0x50
 810754e:	d873      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107550:	2b40      	cmp	r3, #64	@ 0x40
 8107552:	d058      	beq.n	8107606 <HAL_TIM_ConfigClockSource+0x18e>
 8107554:	2b40      	cmp	r3, #64	@ 0x40
 8107556:	d86f      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107558:	2b30      	cmp	r3, #48	@ 0x30
 810755a:	d064      	beq.n	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 810755c:	2b30      	cmp	r3, #48	@ 0x30
 810755e:	d86b      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107560:	2b20      	cmp	r3, #32
 8107562:	d060      	beq.n	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 8107564:	2b20      	cmp	r3, #32
 8107566:	d867      	bhi.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
 8107568:	2b00      	cmp	r3, #0
 810756a:	d05c      	beq.n	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 810756c:	2b10      	cmp	r3, #16
 810756e:	d05a      	beq.n	8107626 <HAL_TIM_ConfigClockSource+0x1ae>
 8107570:	e062      	b.n	8107638 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8107576:	683b      	ldr	r3, [r7, #0]
 8107578:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810757a:	683b      	ldr	r3, [r7, #0]
 810757c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810757e:	683b      	ldr	r3, [r7, #0]
 8107580:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8107582:	f000 ff21 	bl	81083c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	689b      	ldr	r3, [r3, #8]
 810758c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810758e:	68bb      	ldr	r3, [r7, #8]
 8107590:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8107594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	68ba      	ldr	r2, [r7, #8]
 810759c:	609a      	str	r2, [r3, #8]
      break;
 810759e:	e04f      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81075a4:	683b      	ldr	r3, [r7, #0]
 81075a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81075a8:	683b      	ldr	r3, [r7, #0]
 81075aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81075ac:	683b      	ldr	r3, [r7, #0]
 81075ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81075b0:	f000 ff0a 	bl	81083c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81075b4:	687b      	ldr	r3, [r7, #4]
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	689a      	ldr	r2, [r3, #8]
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	681b      	ldr	r3, [r3, #0]
 81075be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81075c2:	609a      	str	r2, [r3, #8]
      break;
 81075c4:	e03c      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81075ca:	683b      	ldr	r3, [r7, #0]
 81075cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81075ce:	683b      	ldr	r3, [r7, #0]
 81075d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81075d2:	461a      	mov	r2, r3
 81075d4:	f000 fdc6 	bl	8108164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	681b      	ldr	r3, [r3, #0]
 81075dc:	2150      	movs	r1, #80	@ 0x50
 81075de:	4618      	mov	r0, r3
 81075e0:	f000 fed5 	bl	810838e <TIM_ITRx_SetConfig>
      break;
 81075e4:	e02c      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81075e6:	687b      	ldr	r3, [r7, #4]
 81075e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81075ea:	683b      	ldr	r3, [r7, #0]
 81075ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81075ee:	683b      	ldr	r3, [r7, #0]
 81075f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 81075f2:	461a      	mov	r2, r3
 81075f4:	f000 fe22 	bl	810823c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81075f8:	687b      	ldr	r3, [r7, #4]
 81075fa:	681b      	ldr	r3, [r3, #0]
 81075fc:	2160      	movs	r1, #96	@ 0x60
 81075fe:	4618      	mov	r0, r3
 8107600:	f000 fec5 	bl	810838e <TIM_ITRx_SetConfig>
      break;
 8107604:	e01c      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810760a:	683b      	ldr	r3, [r7, #0]
 810760c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810760e:	683b      	ldr	r3, [r7, #0]
 8107610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107612:	461a      	mov	r2, r3
 8107614:	f000 fda6 	bl	8108164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	2140      	movs	r1, #64	@ 0x40
 810761e:	4618      	mov	r0, r3
 8107620:	f000 feb5 	bl	810838e <TIM_ITRx_SetConfig>
      break;
 8107624:	e00c      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	681a      	ldr	r2, [r3, #0]
 810762a:	683b      	ldr	r3, [r7, #0]
 810762c:	681b      	ldr	r3, [r3, #0]
 810762e:	4619      	mov	r1, r3
 8107630:	4610      	mov	r0, r2
 8107632:	f000 feac 	bl	810838e <TIM_ITRx_SetConfig>
      break;
 8107636:	e003      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8107638:	2301      	movs	r3, #1
 810763a:	73fb      	strb	r3, [r7, #15]
      break;
 810763c:	e000      	b.n	8107640 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810763e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107640:	687b      	ldr	r3, [r7, #4]
 8107642:	2201      	movs	r2, #1
 8107644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8107648:	687b      	ldr	r3, [r7, #4]
 810764a:	2200      	movs	r2, #0
 810764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8107650:	7bfb      	ldrb	r3, [r7, #15]
}
 8107652:	4618      	mov	r0, r3
 8107654:	3710      	adds	r7, #16
 8107656:	46bd      	mov	sp, r7
 8107658:	bd80      	pop	{r7, pc}
 810765a:	bf00      	nop
 810765c:	00100040 	.word	0x00100040
 8107660:	00100030 	.word	0x00100030
 8107664:	00100020 	.word	0x00100020

08107668 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107668:	b580      	push	{r7, lr}
 810766a:	b082      	sub	sp, #8
 810766c:	af00      	add	r7, sp, #0
 810766e:	6078      	str	r0, [r7, #4]
 8107670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107678:	2b01      	cmp	r3, #1
 810767a:	d101      	bne.n	8107680 <HAL_TIM_SlaveConfigSynchro+0x18>
 810767c:	2302      	movs	r3, #2
 810767e:	e031      	b.n	81076e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8107680:	687b      	ldr	r3, [r7, #4]
 8107682:	2201      	movs	r2, #1
 8107684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107688:	687b      	ldr	r3, [r7, #4]
 810768a:	2202      	movs	r2, #2
 810768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8107690:	6839      	ldr	r1, [r7, #0]
 8107692:	6878      	ldr	r0, [r7, #4]
 8107694:	f000 fc08 	bl	8107ea8 <TIM_SlaveTimer_SetConfig>
 8107698:	4603      	mov	r3, r0
 810769a:	2b00      	cmp	r3, #0
 810769c:	d009      	beq.n	81076b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 810769e:	687b      	ldr	r3, [r7, #4]
 81076a0:	2201      	movs	r2, #1
 81076a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	2200      	movs	r2, #0
 81076aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 81076ae:	2301      	movs	r3, #1
 81076b0:	e018      	b.n	81076e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	681b      	ldr	r3, [r3, #0]
 81076b6:	68da      	ldr	r2, [r3, #12]
 81076b8:	687b      	ldr	r3, [r7, #4]
 81076ba:	681b      	ldr	r3, [r3, #0]
 81076bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81076c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 81076c2:	687b      	ldr	r3, [r7, #4]
 81076c4:	681b      	ldr	r3, [r3, #0]
 81076c6:	68da      	ldr	r2, [r3, #12]
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	681b      	ldr	r3, [r3, #0]
 81076cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 81076d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 81076d2:	687b      	ldr	r3, [r7, #4]
 81076d4:	2201      	movs	r2, #1
 81076d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81076da:	687b      	ldr	r3, [r7, #4]
 81076dc:	2200      	movs	r2, #0
 81076de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81076e2:	2300      	movs	r3, #0
}
 81076e4:	4618      	mov	r0, r3
 81076e6:	3708      	adds	r7, #8
 81076e8:	46bd      	mov	sp, r7
 81076ea:	bd80      	pop	{r7, pc}

081076ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81076ec:	b480      	push	{r7}
 81076ee:	b085      	sub	sp, #20
 81076f0:	af00      	add	r7, sp, #0
 81076f2:	6078      	str	r0, [r7, #4]
 81076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 81076f6:	2300      	movs	r3, #0
 81076f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 81076fa:	683b      	ldr	r3, [r7, #0]
 81076fc:	2b0c      	cmp	r3, #12
 81076fe:	d831      	bhi.n	8107764 <HAL_TIM_ReadCapturedValue+0x78>
 8107700:	a201      	add	r2, pc, #4	@ (adr r2, 8107708 <HAL_TIM_ReadCapturedValue+0x1c>)
 8107702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107706:	bf00      	nop
 8107708:	0810773d 	.word	0x0810773d
 810770c:	08107765 	.word	0x08107765
 8107710:	08107765 	.word	0x08107765
 8107714:	08107765 	.word	0x08107765
 8107718:	08107747 	.word	0x08107747
 810771c:	08107765 	.word	0x08107765
 8107720:	08107765 	.word	0x08107765
 8107724:	08107765 	.word	0x08107765
 8107728:	08107751 	.word	0x08107751
 810772c:	08107765 	.word	0x08107765
 8107730:	08107765 	.word	0x08107765
 8107734:	08107765 	.word	0x08107765
 8107738:	0810775b 	.word	0x0810775b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107742:	60fb      	str	r3, [r7, #12]

      break;
 8107744:	e00f      	b.n	8107766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8107746:	687b      	ldr	r3, [r7, #4]
 8107748:	681b      	ldr	r3, [r3, #0]
 810774a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810774c:	60fb      	str	r3, [r7, #12]

      break;
 810774e:	e00a      	b.n	8107766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	681b      	ldr	r3, [r3, #0]
 8107754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107756:	60fb      	str	r3, [r7, #12]

      break;
 8107758:	e005      	b.n	8107766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107760:	60fb      	str	r3, [r7, #12]

      break;
 8107762:	e000      	b.n	8107766 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8107764:	bf00      	nop
  }

  return tmpreg;
 8107766:	68fb      	ldr	r3, [r7, #12]
}
 8107768:	4618      	mov	r0, r3
 810776a:	3714      	adds	r7, #20
 810776c:	46bd      	mov	sp, r7
 810776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107772:	4770      	bx	lr

08107774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107774:	b480      	push	{r7}
 8107776:	b083      	sub	sp, #12
 8107778:	af00      	add	r7, sp, #0
 810777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810777c:	bf00      	nop
 810777e:	370c      	adds	r7, #12
 8107780:	46bd      	mov	sp, r7
 8107782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107786:	4770      	bx	lr

08107788 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107788:	b480      	push	{r7}
 810778a:	b083      	sub	sp, #12
 810778c:	af00      	add	r7, sp, #0
 810778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107790:	bf00      	nop
 8107792:	370c      	adds	r7, #12
 8107794:	46bd      	mov	sp, r7
 8107796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810779a:	4770      	bx	lr

0810779c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810779c:	b480      	push	{r7}
 810779e:	b083      	sub	sp, #12
 81077a0:	af00      	add	r7, sp, #0
 81077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81077a4:	bf00      	nop
 81077a6:	370c      	adds	r7, #12
 81077a8:	46bd      	mov	sp, r7
 81077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077ae:	4770      	bx	lr

081077b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81077b0:	b480      	push	{r7}
 81077b2:	b085      	sub	sp, #20
 81077b4:	af00      	add	r7, sp, #0
 81077b6:	6078      	str	r0, [r7, #4]
 81077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81077ba:	687b      	ldr	r3, [r7, #4]
 81077bc:	681b      	ldr	r3, [r3, #0]
 81077be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	4a46      	ldr	r2, [pc, #280]	@ (81078dc <TIM_Base_SetConfig+0x12c>)
 81077c4:	4293      	cmp	r3, r2
 81077c6:	d013      	beq.n	81077f0 <TIM_Base_SetConfig+0x40>
 81077c8:	687b      	ldr	r3, [r7, #4]
 81077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81077ce:	d00f      	beq.n	81077f0 <TIM_Base_SetConfig+0x40>
 81077d0:	687b      	ldr	r3, [r7, #4]
 81077d2:	4a43      	ldr	r2, [pc, #268]	@ (81078e0 <TIM_Base_SetConfig+0x130>)
 81077d4:	4293      	cmp	r3, r2
 81077d6:	d00b      	beq.n	81077f0 <TIM_Base_SetConfig+0x40>
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	4a42      	ldr	r2, [pc, #264]	@ (81078e4 <TIM_Base_SetConfig+0x134>)
 81077dc:	4293      	cmp	r3, r2
 81077de:	d007      	beq.n	81077f0 <TIM_Base_SetConfig+0x40>
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	4a41      	ldr	r2, [pc, #260]	@ (81078e8 <TIM_Base_SetConfig+0x138>)
 81077e4:	4293      	cmp	r3, r2
 81077e6:	d003      	beq.n	81077f0 <TIM_Base_SetConfig+0x40>
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	4a40      	ldr	r2, [pc, #256]	@ (81078ec <TIM_Base_SetConfig+0x13c>)
 81077ec:	4293      	cmp	r3, r2
 81077ee:	d108      	bne.n	8107802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81077f0:	68fb      	ldr	r3, [r7, #12]
 81077f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81077f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81077f8:	683b      	ldr	r3, [r7, #0]
 81077fa:	685b      	ldr	r3, [r3, #4]
 81077fc:	68fa      	ldr	r2, [r7, #12]
 81077fe:	4313      	orrs	r3, r2
 8107800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107802:	687b      	ldr	r3, [r7, #4]
 8107804:	4a35      	ldr	r2, [pc, #212]	@ (81078dc <TIM_Base_SetConfig+0x12c>)
 8107806:	4293      	cmp	r3, r2
 8107808:	d01f      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107810:	d01b      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	4a32      	ldr	r2, [pc, #200]	@ (81078e0 <TIM_Base_SetConfig+0x130>)
 8107816:	4293      	cmp	r3, r2
 8107818:	d017      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 810781a:	687b      	ldr	r3, [r7, #4]
 810781c:	4a31      	ldr	r2, [pc, #196]	@ (81078e4 <TIM_Base_SetConfig+0x134>)
 810781e:	4293      	cmp	r3, r2
 8107820:	d013      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 8107822:	687b      	ldr	r3, [r7, #4]
 8107824:	4a30      	ldr	r2, [pc, #192]	@ (81078e8 <TIM_Base_SetConfig+0x138>)
 8107826:	4293      	cmp	r3, r2
 8107828:	d00f      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	4a2f      	ldr	r2, [pc, #188]	@ (81078ec <TIM_Base_SetConfig+0x13c>)
 810782e:	4293      	cmp	r3, r2
 8107830:	d00b      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 8107832:	687b      	ldr	r3, [r7, #4]
 8107834:	4a2e      	ldr	r2, [pc, #184]	@ (81078f0 <TIM_Base_SetConfig+0x140>)
 8107836:	4293      	cmp	r3, r2
 8107838:	d007      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	4a2d      	ldr	r2, [pc, #180]	@ (81078f4 <TIM_Base_SetConfig+0x144>)
 810783e:	4293      	cmp	r3, r2
 8107840:	d003      	beq.n	810784a <TIM_Base_SetConfig+0x9a>
 8107842:	687b      	ldr	r3, [r7, #4]
 8107844:	4a2c      	ldr	r2, [pc, #176]	@ (81078f8 <TIM_Base_SetConfig+0x148>)
 8107846:	4293      	cmp	r3, r2
 8107848:	d108      	bne.n	810785c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810784a:	68fb      	ldr	r3, [r7, #12]
 810784c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107852:	683b      	ldr	r3, [r7, #0]
 8107854:	68db      	ldr	r3, [r3, #12]
 8107856:	68fa      	ldr	r2, [r7, #12]
 8107858:	4313      	orrs	r3, r2
 810785a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810785c:	68fb      	ldr	r3, [r7, #12]
 810785e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8107862:	683b      	ldr	r3, [r7, #0]
 8107864:	695b      	ldr	r3, [r3, #20]
 8107866:	4313      	orrs	r3, r2
 8107868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	68fa      	ldr	r2, [r7, #12]
 810786e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107870:	683b      	ldr	r3, [r7, #0]
 8107872:	689a      	ldr	r2, [r3, #8]
 8107874:	687b      	ldr	r3, [r7, #4]
 8107876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107878:	683b      	ldr	r3, [r7, #0]
 810787a:	681a      	ldr	r2, [r3, #0]
 810787c:	687b      	ldr	r3, [r7, #4]
 810787e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107880:	687b      	ldr	r3, [r7, #4]
 8107882:	4a16      	ldr	r2, [pc, #88]	@ (81078dc <TIM_Base_SetConfig+0x12c>)
 8107884:	4293      	cmp	r3, r2
 8107886:	d00f      	beq.n	81078a8 <TIM_Base_SetConfig+0xf8>
 8107888:	687b      	ldr	r3, [r7, #4]
 810788a:	4a18      	ldr	r2, [pc, #96]	@ (81078ec <TIM_Base_SetConfig+0x13c>)
 810788c:	4293      	cmp	r3, r2
 810788e:	d00b      	beq.n	81078a8 <TIM_Base_SetConfig+0xf8>
 8107890:	687b      	ldr	r3, [r7, #4]
 8107892:	4a17      	ldr	r2, [pc, #92]	@ (81078f0 <TIM_Base_SetConfig+0x140>)
 8107894:	4293      	cmp	r3, r2
 8107896:	d007      	beq.n	81078a8 <TIM_Base_SetConfig+0xf8>
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	4a16      	ldr	r2, [pc, #88]	@ (81078f4 <TIM_Base_SetConfig+0x144>)
 810789c:	4293      	cmp	r3, r2
 810789e:	d003      	beq.n	81078a8 <TIM_Base_SetConfig+0xf8>
 81078a0:	687b      	ldr	r3, [r7, #4]
 81078a2:	4a15      	ldr	r2, [pc, #84]	@ (81078f8 <TIM_Base_SetConfig+0x148>)
 81078a4:	4293      	cmp	r3, r2
 81078a6:	d103      	bne.n	81078b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81078a8:	683b      	ldr	r3, [r7, #0]
 81078aa:	691a      	ldr	r2, [r3, #16]
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81078b0:	687b      	ldr	r3, [r7, #4]
 81078b2:	2201      	movs	r2, #1
 81078b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 81078b6:	687b      	ldr	r3, [r7, #4]
 81078b8:	691b      	ldr	r3, [r3, #16]
 81078ba:	f003 0301 	and.w	r3, r3, #1
 81078be:	2b01      	cmp	r3, #1
 81078c0:	d105      	bne.n	81078ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	691b      	ldr	r3, [r3, #16]
 81078c6:	f023 0201 	bic.w	r2, r3, #1
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	611a      	str	r2, [r3, #16]
  }
}
 81078ce:	bf00      	nop
 81078d0:	3714      	adds	r7, #20
 81078d2:	46bd      	mov	sp, r7
 81078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078d8:	4770      	bx	lr
 81078da:	bf00      	nop
 81078dc:	40010000 	.word	0x40010000
 81078e0:	40000400 	.word	0x40000400
 81078e4:	40000800 	.word	0x40000800
 81078e8:	40000c00 	.word	0x40000c00
 81078ec:	40010400 	.word	0x40010400
 81078f0:	40014000 	.word	0x40014000
 81078f4:	40014400 	.word	0x40014400
 81078f8:	40014800 	.word	0x40014800

081078fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81078fc:	b480      	push	{r7}
 81078fe:	b087      	sub	sp, #28
 8107900:	af00      	add	r7, sp, #0
 8107902:	6078      	str	r0, [r7, #4]
 8107904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107906:	687b      	ldr	r3, [r7, #4]
 8107908:	6a1b      	ldr	r3, [r3, #32]
 810790a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810790c:	687b      	ldr	r3, [r7, #4]
 810790e:	6a1b      	ldr	r3, [r3, #32]
 8107910:	f023 0201 	bic.w	r2, r3, #1
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107918:	687b      	ldr	r3, [r7, #4]
 810791a:	685b      	ldr	r3, [r3, #4]
 810791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	699b      	ldr	r3, [r3, #24]
 8107922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107924:	68fb      	ldr	r3, [r7, #12]
 8107926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810792a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810792e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107930:	68fb      	ldr	r3, [r7, #12]
 8107932:	f023 0303 	bic.w	r3, r3, #3
 8107936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107938:	683b      	ldr	r3, [r7, #0]
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	68fa      	ldr	r2, [r7, #12]
 810793e:	4313      	orrs	r3, r2
 8107940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107942:	697b      	ldr	r3, [r7, #20]
 8107944:	f023 0302 	bic.w	r3, r3, #2
 8107948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810794a:	683b      	ldr	r3, [r7, #0]
 810794c:	689b      	ldr	r3, [r3, #8]
 810794e:	697a      	ldr	r2, [r7, #20]
 8107950:	4313      	orrs	r3, r2
 8107952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	4a2c      	ldr	r2, [pc, #176]	@ (8107a08 <TIM_OC1_SetConfig+0x10c>)
 8107958:	4293      	cmp	r3, r2
 810795a:	d00f      	beq.n	810797c <TIM_OC1_SetConfig+0x80>
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	4a2b      	ldr	r2, [pc, #172]	@ (8107a0c <TIM_OC1_SetConfig+0x110>)
 8107960:	4293      	cmp	r3, r2
 8107962:	d00b      	beq.n	810797c <TIM_OC1_SetConfig+0x80>
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	4a2a      	ldr	r2, [pc, #168]	@ (8107a10 <TIM_OC1_SetConfig+0x114>)
 8107968:	4293      	cmp	r3, r2
 810796a:	d007      	beq.n	810797c <TIM_OC1_SetConfig+0x80>
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	4a29      	ldr	r2, [pc, #164]	@ (8107a14 <TIM_OC1_SetConfig+0x118>)
 8107970:	4293      	cmp	r3, r2
 8107972:	d003      	beq.n	810797c <TIM_OC1_SetConfig+0x80>
 8107974:	687b      	ldr	r3, [r7, #4]
 8107976:	4a28      	ldr	r2, [pc, #160]	@ (8107a18 <TIM_OC1_SetConfig+0x11c>)
 8107978:	4293      	cmp	r3, r2
 810797a:	d10c      	bne.n	8107996 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810797c:	697b      	ldr	r3, [r7, #20]
 810797e:	f023 0308 	bic.w	r3, r3, #8
 8107982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107984:	683b      	ldr	r3, [r7, #0]
 8107986:	68db      	ldr	r3, [r3, #12]
 8107988:	697a      	ldr	r2, [r7, #20]
 810798a:	4313      	orrs	r3, r2
 810798c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810798e:	697b      	ldr	r3, [r7, #20]
 8107990:	f023 0304 	bic.w	r3, r3, #4
 8107994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107996:	687b      	ldr	r3, [r7, #4]
 8107998:	4a1b      	ldr	r2, [pc, #108]	@ (8107a08 <TIM_OC1_SetConfig+0x10c>)
 810799a:	4293      	cmp	r3, r2
 810799c:	d00f      	beq.n	81079be <TIM_OC1_SetConfig+0xc2>
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	4a1a      	ldr	r2, [pc, #104]	@ (8107a0c <TIM_OC1_SetConfig+0x110>)
 81079a2:	4293      	cmp	r3, r2
 81079a4:	d00b      	beq.n	81079be <TIM_OC1_SetConfig+0xc2>
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	4a19      	ldr	r2, [pc, #100]	@ (8107a10 <TIM_OC1_SetConfig+0x114>)
 81079aa:	4293      	cmp	r3, r2
 81079ac:	d007      	beq.n	81079be <TIM_OC1_SetConfig+0xc2>
 81079ae:	687b      	ldr	r3, [r7, #4]
 81079b0:	4a18      	ldr	r2, [pc, #96]	@ (8107a14 <TIM_OC1_SetConfig+0x118>)
 81079b2:	4293      	cmp	r3, r2
 81079b4:	d003      	beq.n	81079be <TIM_OC1_SetConfig+0xc2>
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	4a17      	ldr	r2, [pc, #92]	@ (8107a18 <TIM_OC1_SetConfig+0x11c>)
 81079ba:	4293      	cmp	r3, r2
 81079bc:	d111      	bne.n	81079e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81079be:	693b      	ldr	r3, [r7, #16]
 81079c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81079c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81079c6:	693b      	ldr	r3, [r7, #16]
 81079c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 81079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81079ce:	683b      	ldr	r3, [r7, #0]
 81079d0:	695b      	ldr	r3, [r3, #20]
 81079d2:	693a      	ldr	r2, [r7, #16]
 81079d4:	4313      	orrs	r3, r2
 81079d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81079d8:	683b      	ldr	r3, [r7, #0]
 81079da:	699b      	ldr	r3, [r3, #24]
 81079dc:	693a      	ldr	r2, [r7, #16]
 81079de:	4313      	orrs	r3, r2
 81079e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	693a      	ldr	r2, [r7, #16]
 81079e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81079e8:	687b      	ldr	r3, [r7, #4]
 81079ea:	68fa      	ldr	r2, [r7, #12]
 81079ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81079ee:	683b      	ldr	r3, [r7, #0]
 81079f0:	685a      	ldr	r2, [r3, #4]
 81079f2:	687b      	ldr	r3, [r7, #4]
 81079f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	697a      	ldr	r2, [r7, #20]
 81079fa:	621a      	str	r2, [r3, #32]
}
 81079fc:	bf00      	nop
 81079fe:	371c      	adds	r7, #28
 8107a00:	46bd      	mov	sp, r7
 8107a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a06:	4770      	bx	lr
 8107a08:	40010000 	.word	0x40010000
 8107a0c:	40010400 	.word	0x40010400
 8107a10:	40014000 	.word	0x40014000
 8107a14:	40014400 	.word	0x40014400
 8107a18:	40014800 	.word	0x40014800

08107a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107a1c:	b480      	push	{r7}
 8107a1e:	b087      	sub	sp, #28
 8107a20:	af00      	add	r7, sp, #0
 8107a22:	6078      	str	r0, [r7, #4]
 8107a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	6a1b      	ldr	r3, [r3, #32]
 8107a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107a2c:	687b      	ldr	r3, [r7, #4]
 8107a2e:	6a1b      	ldr	r3, [r3, #32]
 8107a30:	f023 0210 	bic.w	r2, r3, #16
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	685b      	ldr	r3, [r3, #4]
 8107a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107a3e:	687b      	ldr	r3, [r7, #4]
 8107a40:	699b      	ldr	r3, [r3, #24]
 8107a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107a44:	68fb      	ldr	r3, [r7, #12]
 8107a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107a50:	68fb      	ldr	r3, [r7, #12]
 8107a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107a58:	683b      	ldr	r3, [r7, #0]
 8107a5a:	681b      	ldr	r3, [r3, #0]
 8107a5c:	021b      	lsls	r3, r3, #8
 8107a5e:	68fa      	ldr	r2, [r7, #12]
 8107a60:	4313      	orrs	r3, r2
 8107a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107a64:	697b      	ldr	r3, [r7, #20]
 8107a66:	f023 0320 	bic.w	r3, r3, #32
 8107a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107a6c:	683b      	ldr	r3, [r7, #0]
 8107a6e:	689b      	ldr	r3, [r3, #8]
 8107a70:	011b      	lsls	r3, r3, #4
 8107a72:	697a      	ldr	r2, [r7, #20]
 8107a74:	4313      	orrs	r3, r2
 8107a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	4a28      	ldr	r2, [pc, #160]	@ (8107b1c <TIM_OC2_SetConfig+0x100>)
 8107a7c:	4293      	cmp	r3, r2
 8107a7e:	d003      	beq.n	8107a88 <TIM_OC2_SetConfig+0x6c>
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	4a27      	ldr	r2, [pc, #156]	@ (8107b20 <TIM_OC2_SetConfig+0x104>)
 8107a84:	4293      	cmp	r3, r2
 8107a86:	d10d      	bne.n	8107aa4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107a88:	697b      	ldr	r3, [r7, #20]
 8107a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107a90:	683b      	ldr	r3, [r7, #0]
 8107a92:	68db      	ldr	r3, [r3, #12]
 8107a94:	011b      	lsls	r3, r3, #4
 8107a96:	697a      	ldr	r2, [r7, #20]
 8107a98:	4313      	orrs	r3, r2
 8107a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107a9c:	697b      	ldr	r3, [r7, #20]
 8107a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107aa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8107b1c <TIM_OC2_SetConfig+0x100>)
 8107aa8:	4293      	cmp	r3, r2
 8107aaa:	d00f      	beq.n	8107acc <TIM_OC2_SetConfig+0xb0>
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	4a1c      	ldr	r2, [pc, #112]	@ (8107b20 <TIM_OC2_SetConfig+0x104>)
 8107ab0:	4293      	cmp	r3, r2
 8107ab2:	d00b      	beq.n	8107acc <TIM_OC2_SetConfig+0xb0>
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8107b24 <TIM_OC2_SetConfig+0x108>)
 8107ab8:	4293      	cmp	r3, r2
 8107aba:	d007      	beq.n	8107acc <TIM_OC2_SetConfig+0xb0>
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	4a1a      	ldr	r2, [pc, #104]	@ (8107b28 <TIM_OC2_SetConfig+0x10c>)
 8107ac0:	4293      	cmp	r3, r2
 8107ac2:	d003      	beq.n	8107acc <TIM_OC2_SetConfig+0xb0>
 8107ac4:	687b      	ldr	r3, [r7, #4]
 8107ac6:	4a19      	ldr	r2, [pc, #100]	@ (8107b2c <TIM_OC2_SetConfig+0x110>)
 8107ac8:	4293      	cmp	r3, r2
 8107aca:	d113      	bne.n	8107af4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107acc:	693b      	ldr	r3, [r7, #16]
 8107ace:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107ad4:	693b      	ldr	r3, [r7, #16]
 8107ad6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107adc:	683b      	ldr	r3, [r7, #0]
 8107ade:	695b      	ldr	r3, [r3, #20]
 8107ae0:	009b      	lsls	r3, r3, #2
 8107ae2:	693a      	ldr	r2, [r7, #16]
 8107ae4:	4313      	orrs	r3, r2
 8107ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107ae8:	683b      	ldr	r3, [r7, #0]
 8107aea:	699b      	ldr	r3, [r3, #24]
 8107aec:	009b      	lsls	r3, r3, #2
 8107aee:	693a      	ldr	r2, [r7, #16]
 8107af0:	4313      	orrs	r3, r2
 8107af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	693a      	ldr	r2, [r7, #16]
 8107af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	68fa      	ldr	r2, [r7, #12]
 8107afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107b00:	683b      	ldr	r3, [r7, #0]
 8107b02:	685a      	ldr	r2, [r3, #4]
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	697a      	ldr	r2, [r7, #20]
 8107b0c:	621a      	str	r2, [r3, #32]
}
 8107b0e:	bf00      	nop
 8107b10:	371c      	adds	r7, #28
 8107b12:	46bd      	mov	sp, r7
 8107b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b18:	4770      	bx	lr
 8107b1a:	bf00      	nop
 8107b1c:	40010000 	.word	0x40010000
 8107b20:	40010400 	.word	0x40010400
 8107b24:	40014000 	.word	0x40014000
 8107b28:	40014400 	.word	0x40014400
 8107b2c:	40014800 	.word	0x40014800

08107b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107b30:	b480      	push	{r7}
 8107b32:	b087      	sub	sp, #28
 8107b34:	af00      	add	r7, sp, #0
 8107b36:	6078      	str	r0, [r7, #4]
 8107b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107b3a:	687b      	ldr	r3, [r7, #4]
 8107b3c:	6a1b      	ldr	r3, [r3, #32]
 8107b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	6a1b      	ldr	r3, [r3, #32]
 8107b44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107b4c:	687b      	ldr	r3, [r7, #4]
 8107b4e:	685b      	ldr	r3, [r3, #4]
 8107b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	69db      	ldr	r3, [r3, #28]
 8107b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107b58:	68fb      	ldr	r3, [r7, #12]
 8107b5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107b64:	68fb      	ldr	r3, [r7, #12]
 8107b66:	f023 0303 	bic.w	r3, r3, #3
 8107b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107b6c:	683b      	ldr	r3, [r7, #0]
 8107b6e:	681b      	ldr	r3, [r3, #0]
 8107b70:	68fa      	ldr	r2, [r7, #12]
 8107b72:	4313      	orrs	r3, r2
 8107b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107b76:	697b      	ldr	r3, [r7, #20]
 8107b78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107b7e:	683b      	ldr	r3, [r7, #0]
 8107b80:	689b      	ldr	r3, [r3, #8]
 8107b82:	021b      	lsls	r3, r3, #8
 8107b84:	697a      	ldr	r2, [r7, #20]
 8107b86:	4313      	orrs	r3, r2
 8107b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	4a27      	ldr	r2, [pc, #156]	@ (8107c2c <TIM_OC3_SetConfig+0xfc>)
 8107b8e:	4293      	cmp	r3, r2
 8107b90:	d003      	beq.n	8107b9a <TIM_OC3_SetConfig+0x6a>
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	4a26      	ldr	r2, [pc, #152]	@ (8107c30 <TIM_OC3_SetConfig+0x100>)
 8107b96:	4293      	cmp	r3, r2
 8107b98:	d10d      	bne.n	8107bb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107b9a:	697b      	ldr	r3, [r7, #20]
 8107b9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107ba2:	683b      	ldr	r3, [r7, #0]
 8107ba4:	68db      	ldr	r3, [r3, #12]
 8107ba6:	021b      	lsls	r3, r3, #8
 8107ba8:	697a      	ldr	r2, [r7, #20]
 8107baa:	4313      	orrs	r3, r2
 8107bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107bae:	697b      	ldr	r3, [r7, #20]
 8107bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8107c2c <TIM_OC3_SetConfig+0xfc>)
 8107bba:	4293      	cmp	r3, r2
 8107bbc:	d00f      	beq.n	8107bde <TIM_OC3_SetConfig+0xae>
 8107bbe:	687b      	ldr	r3, [r7, #4]
 8107bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8107c30 <TIM_OC3_SetConfig+0x100>)
 8107bc2:	4293      	cmp	r3, r2
 8107bc4:	d00b      	beq.n	8107bde <TIM_OC3_SetConfig+0xae>
 8107bc6:	687b      	ldr	r3, [r7, #4]
 8107bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8107c34 <TIM_OC3_SetConfig+0x104>)
 8107bca:	4293      	cmp	r3, r2
 8107bcc:	d007      	beq.n	8107bde <TIM_OC3_SetConfig+0xae>
 8107bce:	687b      	ldr	r3, [r7, #4]
 8107bd0:	4a19      	ldr	r2, [pc, #100]	@ (8107c38 <TIM_OC3_SetConfig+0x108>)
 8107bd2:	4293      	cmp	r3, r2
 8107bd4:	d003      	beq.n	8107bde <TIM_OC3_SetConfig+0xae>
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	4a18      	ldr	r2, [pc, #96]	@ (8107c3c <TIM_OC3_SetConfig+0x10c>)
 8107bda:	4293      	cmp	r3, r2
 8107bdc:	d113      	bne.n	8107c06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107bde:	693b      	ldr	r3, [r7, #16]
 8107be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107be6:	693b      	ldr	r3, [r7, #16]
 8107be8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107bee:	683b      	ldr	r3, [r7, #0]
 8107bf0:	695b      	ldr	r3, [r3, #20]
 8107bf2:	011b      	lsls	r3, r3, #4
 8107bf4:	693a      	ldr	r2, [r7, #16]
 8107bf6:	4313      	orrs	r3, r2
 8107bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107bfa:	683b      	ldr	r3, [r7, #0]
 8107bfc:	699b      	ldr	r3, [r3, #24]
 8107bfe:	011b      	lsls	r3, r3, #4
 8107c00:	693a      	ldr	r2, [r7, #16]
 8107c02:	4313      	orrs	r3, r2
 8107c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107c06:	687b      	ldr	r3, [r7, #4]
 8107c08:	693a      	ldr	r2, [r7, #16]
 8107c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	68fa      	ldr	r2, [r7, #12]
 8107c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107c12:	683b      	ldr	r3, [r7, #0]
 8107c14:	685a      	ldr	r2, [r3, #4]
 8107c16:	687b      	ldr	r3, [r7, #4]
 8107c18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	697a      	ldr	r2, [r7, #20]
 8107c1e:	621a      	str	r2, [r3, #32]
}
 8107c20:	bf00      	nop
 8107c22:	371c      	adds	r7, #28
 8107c24:	46bd      	mov	sp, r7
 8107c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c2a:	4770      	bx	lr
 8107c2c:	40010000 	.word	0x40010000
 8107c30:	40010400 	.word	0x40010400
 8107c34:	40014000 	.word	0x40014000
 8107c38:	40014400 	.word	0x40014400
 8107c3c:	40014800 	.word	0x40014800

08107c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107c40:	b480      	push	{r7}
 8107c42:	b087      	sub	sp, #28
 8107c44:	af00      	add	r7, sp, #0
 8107c46:	6078      	str	r0, [r7, #4]
 8107c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	6a1b      	ldr	r3, [r3, #32]
 8107c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	6a1b      	ldr	r3, [r3, #32]
 8107c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	685b      	ldr	r3, [r3, #4]
 8107c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	69db      	ldr	r3, [r3, #28]
 8107c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107c68:	68fb      	ldr	r3, [r7, #12]
 8107c6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107c74:	68fb      	ldr	r3, [r7, #12]
 8107c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107c7c:	683b      	ldr	r3, [r7, #0]
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	021b      	lsls	r3, r3, #8
 8107c82:	68fa      	ldr	r2, [r7, #12]
 8107c84:	4313      	orrs	r3, r2
 8107c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107c88:	693b      	ldr	r3, [r7, #16]
 8107c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107c90:	683b      	ldr	r3, [r7, #0]
 8107c92:	689b      	ldr	r3, [r3, #8]
 8107c94:	031b      	lsls	r3, r3, #12
 8107c96:	693a      	ldr	r2, [r7, #16]
 8107c98:	4313      	orrs	r3, r2
 8107c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	4a18      	ldr	r2, [pc, #96]	@ (8107d00 <TIM_OC4_SetConfig+0xc0>)
 8107ca0:	4293      	cmp	r3, r2
 8107ca2:	d00f      	beq.n	8107cc4 <TIM_OC4_SetConfig+0x84>
 8107ca4:	687b      	ldr	r3, [r7, #4]
 8107ca6:	4a17      	ldr	r2, [pc, #92]	@ (8107d04 <TIM_OC4_SetConfig+0xc4>)
 8107ca8:	4293      	cmp	r3, r2
 8107caa:	d00b      	beq.n	8107cc4 <TIM_OC4_SetConfig+0x84>
 8107cac:	687b      	ldr	r3, [r7, #4]
 8107cae:	4a16      	ldr	r2, [pc, #88]	@ (8107d08 <TIM_OC4_SetConfig+0xc8>)
 8107cb0:	4293      	cmp	r3, r2
 8107cb2:	d007      	beq.n	8107cc4 <TIM_OC4_SetConfig+0x84>
 8107cb4:	687b      	ldr	r3, [r7, #4]
 8107cb6:	4a15      	ldr	r2, [pc, #84]	@ (8107d0c <TIM_OC4_SetConfig+0xcc>)
 8107cb8:	4293      	cmp	r3, r2
 8107cba:	d003      	beq.n	8107cc4 <TIM_OC4_SetConfig+0x84>
 8107cbc:	687b      	ldr	r3, [r7, #4]
 8107cbe:	4a14      	ldr	r2, [pc, #80]	@ (8107d10 <TIM_OC4_SetConfig+0xd0>)
 8107cc0:	4293      	cmp	r3, r2
 8107cc2:	d109      	bne.n	8107cd8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107cc4:	697b      	ldr	r3, [r7, #20]
 8107cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8107cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107ccc:	683b      	ldr	r3, [r7, #0]
 8107cce:	695b      	ldr	r3, [r3, #20]
 8107cd0:	019b      	lsls	r3, r3, #6
 8107cd2:	697a      	ldr	r2, [r7, #20]
 8107cd4:	4313      	orrs	r3, r2
 8107cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	697a      	ldr	r2, [r7, #20]
 8107cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107cde:	687b      	ldr	r3, [r7, #4]
 8107ce0:	68fa      	ldr	r2, [r7, #12]
 8107ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107ce4:	683b      	ldr	r3, [r7, #0]
 8107ce6:	685a      	ldr	r2, [r3, #4]
 8107ce8:	687b      	ldr	r3, [r7, #4]
 8107cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	693a      	ldr	r2, [r7, #16]
 8107cf0:	621a      	str	r2, [r3, #32]
}
 8107cf2:	bf00      	nop
 8107cf4:	371c      	adds	r7, #28
 8107cf6:	46bd      	mov	sp, r7
 8107cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cfc:	4770      	bx	lr
 8107cfe:	bf00      	nop
 8107d00:	40010000 	.word	0x40010000
 8107d04:	40010400 	.word	0x40010400
 8107d08:	40014000 	.word	0x40014000
 8107d0c:	40014400 	.word	0x40014400
 8107d10:	40014800 	.word	0x40014800

08107d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107d14:	b480      	push	{r7}
 8107d16:	b087      	sub	sp, #28
 8107d18:	af00      	add	r7, sp, #0
 8107d1a:	6078      	str	r0, [r7, #4]
 8107d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	6a1b      	ldr	r3, [r3, #32]
 8107d22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	6a1b      	ldr	r3, [r3, #32]
 8107d28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	685b      	ldr	r3, [r3, #4]
 8107d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107d3c:	68fb      	ldr	r3, [r7, #12]
 8107d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107d48:	683b      	ldr	r3, [r7, #0]
 8107d4a:	681b      	ldr	r3, [r3, #0]
 8107d4c:	68fa      	ldr	r2, [r7, #12]
 8107d4e:	4313      	orrs	r3, r2
 8107d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107d52:	693b      	ldr	r3, [r7, #16]
 8107d54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107d5a:	683b      	ldr	r3, [r7, #0]
 8107d5c:	689b      	ldr	r3, [r3, #8]
 8107d5e:	041b      	lsls	r3, r3, #16
 8107d60:	693a      	ldr	r2, [r7, #16]
 8107d62:	4313      	orrs	r3, r2
 8107d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	4a17      	ldr	r2, [pc, #92]	@ (8107dc8 <TIM_OC5_SetConfig+0xb4>)
 8107d6a:	4293      	cmp	r3, r2
 8107d6c:	d00f      	beq.n	8107d8e <TIM_OC5_SetConfig+0x7a>
 8107d6e:	687b      	ldr	r3, [r7, #4]
 8107d70:	4a16      	ldr	r2, [pc, #88]	@ (8107dcc <TIM_OC5_SetConfig+0xb8>)
 8107d72:	4293      	cmp	r3, r2
 8107d74:	d00b      	beq.n	8107d8e <TIM_OC5_SetConfig+0x7a>
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	4a15      	ldr	r2, [pc, #84]	@ (8107dd0 <TIM_OC5_SetConfig+0xbc>)
 8107d7a:	4293      	cmp	r3, r2
 8107d7c:	d007      	beq.n	8107d8e <TIM_OC5_SetConfig+0x7a>
 8107d7e:	687b      	ldr	r3, [r7, #4]
 8107d80:	4a14      	ldr	r2, [pc, #80]	@ (8107dd4 <TIM_OC5_SetConfig+0xc0>)
 8107d82:	4293      	cmp	r3, r2
 8107d84:	d003      	beq.n	8107d8e <TIM_OC5_SetConfig+0x7a>
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	4a13      	ldr	r2, [pc, #76]	@ (8107dd8 <TIM_OC5_SetConfig+0xc4>)
 8107d8a:	4293      	cmp	r3, r2
 8107d8c:	d109      	bne.n	8107da2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107d8e:	697b      	ldr	r3, [r7, #20]
 8107d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107d94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107d96:	683b      	ldr	r3, [r7, #0]
 8107d98:	695b      	ldr	r3, [r3, #20]
 8107d9a:	021b      	lsls	r3, r3, #8
 8107d9c:	697a      	ldr	r2, [r7, #20]
 8107d9e:	4313      	orrs	r3, r2
 8107da0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107da2:	687b      	ldr	r3, [r7, #4]
 8107da4:	697a      	ldr	r2, [r7, #20]
 8107da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	68fa      	ldr	r2, [r7, #12]
 8107dac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107dae:	683b      	ldr	r3, [r7, #0]
 8107db0:	685a      	ldr	r2, [r3, #4]
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	693a      	ldr	r2, [r7, #16]
 8107dba:	621a      	str	r2, [r3, #32]
}
 8107dbc:	bf00      	nop
 8107dbe:	371c      	adds	r7, #28
 8107dc0:	46bd      	mov	sp, r7
 8107dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dc6:	4770      	bx	lr
 8107dc8:	40010000 	.word	0x40010000
 8107dcc:	40010400 	.word	0x40010400
 8107dd0:	40014000 	.word	0x40014000
 8107dd4:	40014400 	.word	0x40014400
 8107dd8:	40014800 	.word	0x40014800

08107ddc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107ddc:	b480      	push	{r7}
 8107dde:	b087      	sub	sp, #28
 8107de0:	af00      	add	r7, sp, #0
 8107de2:	6078      	str	r0, [r7, #4]
 8107de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107de6:	687b      	ldr	r3, [r7, #4]
 8107de8:	6a1b      	ldr	r3, [r3, #32]
 8107dea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	6a1b      	ldr	r3, [r3, #32]
 8107df0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	685b      	ldr	r3, [r3, #4]
 8107dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107e04:	68fb      	ldr	r3, [r7, #12]
 8107e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107e10:	683b      	ldr	r3, [r7, #0]
 8107e12:	681b      	ldr	r3, [r3, #0]
 8107e14:	021b      	lsls	r3, r3, #8
 8107e16:	68fa      	ldr	r2, [r7, #12]
 8107e18:	4313      	orrs	r3, r2
 8107e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107e1c:	693b      	ldr	r3, [r7, #16]
 8107e1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8107e22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107e24:	683b      	ldr	r3, [r7, #0]
 8107e26:	689b      	ldr	r3, [r3, #8]
 8107e28:	051b      	lsls	r3, r3, #20
 8107e2a:	693a      	ldr	r2, [r7, #16]
 8107e2c:	4313      	orrs	r3, r2
 8107e2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	4a18      	ldr	r2, [pc, #96]	@ (8107e94 <TIM_OC6_SetConfig+0xb8>)
 8107e34:	4293      	cmp	r3, r2
 8107e36:	d00f      	beq.n	8107e58 <TIM_OC6_SetConfig+0x7c>
 8107e38:	687b      	ldr	r3, [r7, #4]
 8107e3a:	4a17      	ldr	r2, [pc, #92]	@ (8107e98 <TIM_OC6_SetConfig+0xbc>)
 8107e3c:	4293      	cmp	r3, r2
 8107e3e:	d00b      	beq.n	8107e58 <TIM_OC6_SetConfig+0x7c>
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	4a16      	ldr	r2, [pc, #88]	@ (8107e9c <TIM_OC6_SetConfig+0xc0>)
 8107e44:	4293      	cmp	r3, r2
 8107e46:	d007      	beq.n	8107e58 <TIM_OC6_SetConfig+0x7c>
 8107e48:	687b      	ldr	r3, [r7, #4]
 8107e4a:	4a15      	ldr	r2, [pc, #84]	@ (8107ea0 <TIM_OC6_SetConfig+0xc4>)
 8107e4c:	4293      	cmp	r3, r2
 8107e4e:	d003      	beq.n	8107e58 <TIM_OC6_SetConfig+0x7c>
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	4a14      	ldr	r2, [pc, #80]	@ (8107ea4 <TIM_OC6_SetConfig+0xc8>)
 8107e54:	4293      	cmp	r3, r2
 8107e56:	d109      	bne.n	8107e6c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107e58:	697b      	ldr	r3, [r7, #20]
 8107e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8107e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107e60:	683b      	ldr	r3, [r7, #0]
 8107e62:	695b      	ldr	r3, [r3, #20]
 8107e64:	029b      	lsls	r3, r3, #10
 8107e66:	697a      	ldr	r2, [r7, #20]
 8107e68:	4313      	orrs	r3, r2
 8107e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	697a      	ldr	r2, [r7, #20]
 8107e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	68fa      	ldr	r2, [r7, #12]
 8107e76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107e78:	683b      	ldr	r3, [r7, #0]
 8107e7a:	685a      	ldr	r2, [r3, #4]
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	693a      	ldr	r2, [r7, #16]
 8107e84:	621a      	str	r2, [r3, #32]
}
 8107e86:	bf00      	nop
 8107e88:	371c      	adds	r7, #28
 8107e8a:	46bd      	mov	sp, r7
 8107e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e90:	4770      	bx	lr
 8107e92:	bf00      	nop
 8107e94:	40010000 	.word	0x40010000
 8107e98:	40010400 	.word	0x40010400
 8107e9c:	40014000 	.word	0x40014000
 8107ea0:	40014400 	.word	0x40014400
 8107ea4:	40014800 	.word	0x40014800

08107ea8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107ea8:	b580      	push	{r7, lr}
 8107eaa:	b086      	sub	sp, #24
 8107eac:	af00      	add	r7, sp, #0
 8107eae:	6078      	str	r0, [r7, #4]
 8107eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8107eb2:	2300      	movs	r3, #0
 8107eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	689b      	ldr	r3, [r3, #8]
 8107ebc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107ebe:	693b      	ldr	r3, [r7, #16]
 8107ec0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8107ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107ec8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8107eca:	683b      	ldr	r3, [r7, #0]
 8107ecc:	685b      	ldr	r3, [r3, #4]
 8107ece:	693a      	ldr	r2, [r7, #16]
 8107ed0:	4313      	orrs	r3, r2
 8107ed2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8107ed4:	693b      	ldr	r3, [r7, #16]
 8107ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107eda:	f023 0307 	bic.w	r3, r3, #7
 8107ede:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8107ee0:	683b      	ldr	r3, [r7, #0]
 8107ee2:	681b      	ldr	r3, [r3, #0]
 8107ee4:	693a      	ldr	r2, [r7, #16]
 8107ee6:	4313      	orrs	r3, r2
 8107ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	681b      	ldr	r3, [r3, #0]
 8107eee:	693a      	ldr	r2, [r7, #16]
 8107ef0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8107ef2:	683b      	ldr	r3, [r7, #0]
 8107ef4:	685b      	ldr	r3, [r3, #4]
 8107ef6:	4a5a      	ldr	r2, [pc, #360]	@ (8108060 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8107ef8:	4293      	cmp	r3, r2
 8107efa:	f000 80ab 	beq.w	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107efe:	4a58      	ldr	r2, [pc, #352]	@ (8108060 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8107f00:	4293      	cmp	r3, r2
 8107f02:	f200 80a4 	bhi.w	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107f0a:	f000 80a3 	beq.w	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107f12:	f200 809c 	bhi.w	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f16:	4a53      	ldr	r2, [pc, #332]	@ (8108064 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8107f18:	4293      	cmp	r3, r2
 8107f1a:	f000 809b 	beq.w	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f1e:	4a51      	ldr	r2, [pc, #324]	@ (8108064 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8107f20:	4293      	cmp	r3, r2
 8107f22:	f200 8094 	bhi.w	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f26:	4a50      	ldr	r2, [pc, #320]	@ (8108068 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8107f28:	4293      	cmp	r3, r2
 8107f2a:	f000 8093 	beq.w	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f2e:	4a4e      	ldr	r2, [pc, #312]	@ (8108068 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8107f30:	4293      	cmp	r3, r2
 8107f32:	f200 808c 	bhi.w	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f36:	4a4d      	ldr	r2, [pc, #308]	@ (810806c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8107f38:	4293      	cmp	r3, r2
 8107f3a:	f000 808b 	beq.w	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f3e:	4a4b      	ldr	r2, [pc, #300]	@ (810806c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8107f40:	4293      	cmp	r3, r2
 8107f42:	f200 8084 	bhi.w	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f46:	4a4a      	ldr	r2, [pc, #296]	@ (8108070 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8107f48:	4293      	cmp	r3, r2
 8107f4a:	f000 8083 	beq.w	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f4e:	4a48      	ldr	r2, [pc, #288]	@ (8108070 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8107f50:	4293      	cmp	r3, r2
 8107f52:	d87c      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f54:	4a47      	ldr	r2, [pc, #284]	@ (8108074 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8107f56:	4293      	cmp	r3, r2
 8107f58:	d07c      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f5a:	4a46      	ldr	r2, [pc, #280]	@ (8108074 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8107f5c:	4293      	cmp	r3, r2
 8107f5e:	d876      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f60:	4a45      	ldr	r2, [pc, #276]	@ (8108078 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8107f62:	4293      	cmp	r3, r2
 8107f64:	d076      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f66:	4a44      	ldr	r2, [pc, #272]	@ (8108078 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8107f68:	4293      	cmp	r3, r2
 8107f6a:	d870      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107f70:	d070      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f72:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107f76:	d86a      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107f7c:	d06a      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107f82:	d864      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f84:	2b70      	cmp	r3, #112	@ 0x70
 8107f86:	d01a      	beq.n	8107fbe <TIM_SlaveTimer_SetConfig+0x116>
 8107f88:	2b70      	cmp	r3, #112	@ 0x70
 8107f8a:	d860      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f8c:	2b60      	cmp	r3, #96	@ 0x60
 8107f8e:	d054      	beq.n	810803a <TIM_SlaveTimer_SetConfig+0x192>
 8107f90:	2b60      	cmp	r3, #96	@ 0x60
 8107f92:	d85c      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f94:	2b50      	cmp	r3, #80	@ 0x50
 8107f96:	d046      	beq.n	8108026 <TIM_SlaveTimer_SetConfig+0x17e>
 8107f98:	2b50      	cmp	r3, #80	@ 0x50
 8107f9a:	d858      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107f9c:	2b40      	cmp	r3, #64	@ 0x40
 8107f9e:	d019      	beq.n	8107fd4 <TIM_SlaveTimer_SetConfig+0x12c>
 8107fa0:	2b40      	cmp	r3, #64	@ 0x40
 8107fa2:	d854      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107fa4:	2b30      	cmp	r3, #48	@ 0x30
 8107fa6:	d055      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107fa8:	2b30      	cmp	r3, #48	@ 0x30
 8107faa:	d850      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107fac:	2b20      	cmp	r3, #32
 8107fae:	d051      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107fb0:	2b20      	cmp	r3, #32
 8107fb2:	d84c      	bhi.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
 8107fb4:	2b00      	cmp	r3, #0
 8107fb6:	d04d      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107fb8:	2b10      	cmp	r3, #16
 8107fba:	d04b      	beq.n	8108054 <TIM_SlaveTimer_SetConfig+0x1ac>
 8107fbc:	e047      	b.n	810804e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8107fbe:	687b      	ldr	r3, [r7, #4]
 8107fc0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8107fc2:	683b      	ldr	r3, [r7, #0]
 8107fc4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8107fc6:	683b      	ldr	r3, [r7, #0]
 8107fc8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8107fca:	683b      	ldr	r3, [r7, #0]
 8107fcc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8107fce:	f000 f9fb 	bl	81083c8 <TIM_ETR_SetConfig>
      break;
 8107fd2:	e040      	b.n	8108056 <TIM_SlaveTimer_SetConfig+0x1ae>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8107fd4:	683b      	ldr	r3, [r7, #0]
 8107fd6:	681b      	ldr	r3, [r3, #0]
 8107fd8:	2b05      	cmp	r3, #5
 8107fda:	d101      	bne.n	8107fe0 <TIM_SlaveTimer_SetConfig+0x138>
      {
        return HAL_ERROR;
 8107fdc:	2301      	movs	r3, #1
 8107fde:	e03b      	b.n	8108058 <TIM_SlaveTimer_SetConfig+0x1b0>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	681b      	ldr	r3, [r3, #0]
 8107fe4:	6a1b      	ldr	r3, [r3, #32]
 8107fe6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	681b      	ldr	r3, [r3, #0]
 8107fec:	6a1a      	ldr	r2, [r3, #32]
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	f022 0201 	bic.w	r2, r2, #1
 8107ff6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	699b      	ldr	r3, [r3, #24]
 8107ffe:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108000:	68bb      	ldr	r3, [r7, #8]
 8108002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8108006:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8108008:	683b      	ldr	r3, [r7, #0]
 810800a:	691b      	ldr	r3, [r3, #16]
 810800c:	011b      	lsls	r3, r3, #4
 810800e:	68ba      	ldr	r2, [r7, #8]
 8108010:	4313      	orrs	r3, r2
 8108012:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	68ba      	ldr	r2, [r7, #8]
 810801a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	68fa      	ldr	r2, [r7, #12]
 8108022:	621a      	str	r2, [r3, #32]
      break;
 8108024:	e017      	b.n	8108056 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 810802a:	683b      	ldr	r3, [r7, #0]
 810802c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 810802e:	683b      	ldr	r3, [r7, #0]
 8108030:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108032:	461a      	mov	r2, r3
 8108034:	f000 f896 	bl	8108164 <TIM_TI1_ConfigInputStage>
      break;
 8108038:	e00d      	b.n	8108056 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 810803e:	683b      	ldr	r3, [r7, #0]
 8108040:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8108042:	683b      	ldr	r3, [r7, #0]
 8108044:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8108046:	461a      	mov	r2, r3
 8108048:	f000 f8f8 	bl	810823c <TIM_TI2_ConfigInputStage>
      break;
 810804c:	e003      	b.n	8108056 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 810804e:	2301      	movs	r3, #1
 8108050:	75fb      	strb	r3, [r7, #23]
      break;
 8108052:	e000      	b.n	8108056 <TIM_SlaveTimer_SetConfig+0x1ae>
      break;
 8108054:	bf00      	nop
  }

  return status;
 8108056:	7dfb      	ldrb	r3, [r7, #23]
}
 8108058:	4618      	mov	r0, r3
 810805a:	3718      	adds	r7, #24
 810805c:	46bd      	mov	sp, r7
 810805e:	bd80      	pop	{r7, pc}
 8108060:	00200010 	.word	0x00200010
 8108064:	00100070 	.word	0x00100070
 8108068:	00100060 	.word	0x00100060
 810806c:	00100050 	.word	0x00100050
 8108070:	00100040 	.word	0x00100040
 8108074:	00100030 	.word	0x00100030
 8108078:	00100020 	.word	0x00100020

0810807c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810807c:	b480      	push	{r7}
 810807e:	b087      	sub	sp, #28
 8108080:	af00      	add	r7, sp, #0
 8108082:	60f8      	str	r0, [r7, #12]
 8108084:	60b9      	str	r1, [r7, #8]
 8108086:	607a      	str	r2, [r7, #4]
 8108088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810808a:	68fb      	ldr	r3, [r7, #12]
 810808c:	6a1b      	ldr	r3, [r3, #32]
 810808e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108090:	68fb      	ldr	r3, [r7, #12]
 8108092:	6a1b      	ldr	r3, [r3, #32]
 8108094:	f023 0201 	bic.w	r2, r3, #1
 8108098:	68fb      	ldr	r3, [r7, #12]
 810809a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810809c:	68fb      	ldr	r3, [r7, #12]
 810809e:	699b      	ldr	r3, [r3, #24]
 81080a0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 81080a2:	68fb      	ldr	r3, [r7, #12]
 81080a4:	4a28      	ldr	r2, [pc, #160]	@ (8108148 <TIM_TI1_SetConfig+0xcc>)
 81080a6:	4293      	cmp	r3, r2
 81080a8:	d01b      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080aa:	68fb      	ldr	r3, [r7, #12]
 81080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81080b0:	d017      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080b2:	68fb      	ldr	r3, [r7, #12]
 81080b4:	4a25      	ldr	r2, [pc, #148]	@ (810814c <TIM_TI1_SetConfig+0xd0>)
 81080b6:	4293      	cmp	r3, r2
 81080b8:	d013      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080ba:	68fb      	ldr	r3, [r7, #12]
 81080bc:	4a24      	ldr	r2, [pc, #144]	@ (8108150 <TIM_TI1_SetConfig+0xd4>)
 81080be:	4293      	cmp	r3, r2
 81080c0:	d00f      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080c2:	68fb      	ldr	r3, [r7, #12]
 81080c4:	4a23      	ldr	r2, [pc, #140]	@ (8108154 <TIM_TI1_SetConfig+0xd8>)
 81080c6:	4293      	cmp	r3, r2
 81080c8:	d00b      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080ca:	68fb      	ldr	r3, [r7, #12]
 81080cc:	4a22      	ldr	r2, [pc, #136]	@ (8108158 <TIM_TI1_SetConfig+0xdc>)
 81080ce:	4293      	cmp	r3, r2
 81080d0:	d007      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080d2:	68fb      	ldr	r3, [r7, #12]
 81080d4:	4a21      	ldr	r2, [pc, #132]	@ (810815c <TIM_TI1_SetConfig+0xe0>)
 81080d6:	4293      	cmp	r3, r2
 81080d8:	d003      	beq.n	81080e2 <TIM_TI1_SetConfig+0x66>
 81080da:	68fb      	ldr	r3, [r7, #12]
 81080dc:	4a20      	ldr	r2, [pc, #128]	@ (8108160 <TIM_TI1_SetConfig+0xe4>)
 81080de:	4293      	cmp	r3, r2
 81080e0:	d101      	bne.n	81080e6 <TIM_TI1_SetConfig+0x6a>
 81080e2:	2301      	movs	r3, #1
 81080e4:	e000      	b.n	81080e8 <TIM_TI1_SetConfig+0x6c>
 81080e6:	2300      	movs	r3, #0
 81080e8:	2b00      	cmp	r3, #0
 81080ea:	d008      	beq.n	81080fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 81080ec:	697b      	ldr	r3, [r7, #20]
 81080ee:	f023 0303 	bic.w	r3, r3, #3
 81080f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 81080f4:	697a      	ldr	r2, [r7, #20]
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	4313      	orrs	r3, r2
 81080fa:	617b      	str	r3, [r7, #20]
 81080fc:	e003      	b.n	8108106 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 81080fe:	697b      	ldr	r3, [r7, #20]
 8108100:	f043 0301 	orr.w	r3, r3, #1
 8108104:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108106:	697b      	ldr	r3, [r7, #20]
 8108108:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810810c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810810e:	683b      	ldr	r3, [r7, #0]
 8108110:	011b      	lsls	r3, r3, #4
 8108112:	b2db      	uxtb	r3, r3
 8108114:	697a      	ldr	r2, [r7, #20]
 8108116:	4313      	orrs	r3, r2
 8108118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810811a:	693b      	ldr	r3, [r7, #16]
 810811c:	f023 030a 	bic.w	r3, r3, #10
 8108120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8108122:	68bb      	ldr	r3, [r7, #8]
 8108124:	f003 030a 	and.w	r3, r3, #10
 8108128:	693a      	ldr	r2, [r7, #16]
 810812a:	4313      	orrs	r3, r2
 810812c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810812e:	68fb      	ldr	r3, [r7, #12]
 8108130:	697a      	ldr	r2, [r7, #20]
 8108132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108134:	68fb      	ldr	r3, [r7, #12]
 8108136:	693a      	ldr	r2, [r7, #16]
 8108138:	621a      	str	r2, [r3, #32]
}
 810813a:	bf00      	nop
 810813c:	371c      	adds	r7, #28
 810813e:	46bd      	mov	sp, r7
 8108140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108144:	4770      	bx	lr
 8108146:	bf00      	nop
 8108148:	40010000 	.word	0x40010000
 810814c:	40000400 	.word	0x40000400
 8108150:	40000800 	.word	0x40000800
 8108154:	40000c00 	.word	0x40000c00
 8108158:	40010400 	.word	0x40010400
 810815c:	40001800 	.word	0x40001800
 8108160:	40014000 	.word	0x40014000

08108164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108164:	b480      	push	{r7}
 8108166:	b087      	sub	sp, #28
 8108168:	af00      	add	r7, sp, #0
 810816a:	60f8      	str	r0, [r7, #12]
 810816c:	60b9      	str	r1, [r7, #8]
 810816e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108170:	68fb      	ldr	r3, [r7, #12]
 8108172:	6a1b      	ldr	r3, [r3, #32]
 8108174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108176:	68fb      	ldr	r3, [r7, #12]
 8108178:	6a1b      	ldr	r3, [r3, #32]
 810817a:	f023 0201 	bic.w	r2, r3, #1
 810817e:	68fb      	ldr	r3, [r7, #12]
 8108180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108182:	68fb      	ldr	r3, [r7, #12]
 8108184:	699b      	ldr	r3, [r3, #24]
 8108186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108188:	693b      	ldr	r3, [r7, #16]
 810818a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810818e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	011b      	lsls	r3, r3, #4
 8108194:	693a      	ldr	r2, [r7, #16]
 8108196:	4313      	orrs	r3, r2
 8108198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810819a:	697b      	ldr	r3, [r7, #20]
 810819c:	f023 030a 	bic.w	r3, r3, #10
 81081a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81081a2:	697a      	ldr	r2, [r7, #20]
 81081a4:	68bb      	ldr	r3, [r7, #8]
 81081a6:	4313      	orrs	r3, r2
 81081a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81081aa:	68fb      	ldr	r3, [r7, #12]
 81081ac:	693a      	ldr	r2, [r7, #16]
 81081ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81081b0:	68fb      	ldr	r3, [r7, #12]
 81081b2:	697a      	ldr	r2, [r7, #20]
 81081b4:	621a      	str	r2, [r3, #32]
}
 81081b6:	bf00      	nop
 81081b8:	371c      	adds	r7, #28
 81081ba:	46bd      	mov	sp, r7
 81081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081c0:	4770      	bx	lr

081081c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81081c2:	b480      	push	{r7}
 81081c4:	b087      	sub	sp, #28
 81081c6:	af00      	add	r7, sp, #0
 81081c8:	60f8      	str	r0, [r7, #12]
 81081ca:	60b9      	str	r1, [r7, #8]
 81081cc:	607a      	str	r2, [r7, #4]
 81081ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 81081d0:	68fb      	ldr	r3, [r7, #12]
 81081d2:	6a1b      	ldr	r3, [r3, #32]
 81081d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81081d6:	68fb      	ldr	r3, [r7, #12]
 81081d8:	6a1b      	ldr	r3, [r3, #32]
 81081da:	f023 0210 	bic.w	r2, r3, #16
 81081de:	68fb      	ldr	r3, [r7, #12]
 81081e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81081e2:	68fb      	ldr	r3, [r7, #12]
 81081e4:	699b      	ldr	r3, [r3, #24]
 81081e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 81081e8:	693b      	ldr	r3, [r7, #16]
 81081ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81081ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 81081f0:	687b      	ldr	r3, [r7, #4]
 81081f2:	021b      	lsls	r3, r3, #8
 81081f4:	693a      	ldr	r2, [r7, #16]
 81081f6:	4313      	orrs	r3, r2
 81081f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81081fa:	693b      	ldr	r3, [r7, #16]
 81081fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8108202:	683b      	ldr	r3, [r7, #0]
 8108204:	031b      	lsls	r3, r3, #12
 8108206:	b29b      	uxth	r3, r3
 8108208:	693a      	ldr	r2, [r7, #16]
 810820a:	4313      	orrs	r3, r2
 810820c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810820e:	697b      	ldr	r3, [r7, #20]
 8108210:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8108214:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8108216:	68bb      	ldr	r3, [r7, #8]
 8108218:	011b      	lsls	r3, r3, #4
 810821a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 810821e:	697a      	ldr	r2, [r7, #20]
 8108220:	4313      	orrs	r3, r2
 8108222:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108224:	68fb      	ldr	r3, [r7, #12]
 8108226:	693a      	ldr	r2, [r7, #16]
 8108228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810822a:	68fb      	ldr	r3, [r7, #12]
 810822c:	697a      	ldr	r2, [r7, #20]
 810822e:	621a      	str	r2, [r3, #32]
}
 8108230:	bf00      	nop
 8108232:	371c      	adds	r7, #28
 8108234:	46bd      	mov	sp, r7
 8108236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810823a:	4770      	bx	lr

0810823c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810823c:	b480      	push	{r7}
 810823e:	b087      	sub	sp, #28
 8108240:	af00      	add	r7, sp, #0
 8108242:	60f8      	str	r0, [r7, #12]
 8108244:	60b9      	str	r1, [r7, #8]
 8108246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8108248:	68fb      	ldr	r3, [r7, #12]
 810824a:	6a1b      	ldr	r3, [r3, #32]
 810824c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810824e:	68fb      	ldr	r3, [r7, #12]
 8108250:	6a1b      	ldr	r3, [r3, #32]
 8108252:	f023 0210 	bic.w	r2, r3, #16
 8108256:	68fb      	ldr	r3, [r7, #12]
 8108258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810825a:	68fb      	ldr	r3, [r7, #12]
 810825c:	699b      	ldr	r3, [r3, #24]
 810825e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108260:	693b      	ldr	r3, [r7, #16]
 8108262:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	031b      	lsls	r3, r3, #12
 810826c:	693a      	ldr	r2, [r7, #16]
 810826e:	4313      	orrs	r3, r2
 8108270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108272:	697b      	ldr	r3, [r7, #20]
 8108274:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8108278:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810827a:	68bb      	ldr	r3, [r7, #8]
 810827c:	011b      	lsls	r3, r3, #4
 810827e:	697a      	ldr	r2, [r7, #20]
 8108280:	4313      	orrs	r3, r2
 8108282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108284:	68fb      	ldr	r3, [r7, #12]
 8108286:	693a      	ldr	r2, [r7, #16]
 8108288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810828a:	68fb      	ldr	r3, [r7, #12]
 810828c:	697a      	ldr	r2, [r7, #20]
 810828e:	621a      	str	r2, [r3, #32]
}
 8108290:	bf00      	nop
 8108292:	371c      	adds	r7, #28
 8108294:	46bd      	mov	sp, r7
 8108296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810829a:	4770      	bx	lr

0810829c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810829c:	b480      	push	{r7}
 810829e:	b087      	sub	sp, #28
 81082a0:	af00      	add	r7, sp, #0
 81082a2:	60f8      	str	r0, [r7, #12]
 81082a4:	60b9      	str	r1, [r7, #8]
 81082a6:	607a      	str	r2, [r7, #4]
 81082a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 81082aa:	68fb      	ldr	r3, [r7, #12]
 81082ac:	6a1b      	ldr	r3, [r3, #32]
 81082ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81082b0:	68fb      	ldr	r3, [r7, #12]
 81082b2:	6a1b      	ldr	r3, [r3, #32]
 81082b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 81082b8:	68fb      	ldr	r3, [r7, #12]
 81082ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81082bc:	68fb      	ldr	r3, [r7, #12]
 81082be:	69db      	ldr	r3, [r3, #28]
 81082c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 81082c2:	693b      	ldr	r3, [r7, #16]
 81082c4:	f023 0303 	bic.w	r3, r3, #3
 81082c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 81082ca:	693a      	ldr	r2, [r7, #16]
 81082cc:	687b      	ldr	r3, [r7, #4]
 81082ce:	4313      	orrs	r3, r2
 81082d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 81082d2:	693b      	ldr	r3, [r7, #16]
 81082d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 81082d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 81082da:	683b      	ldr	r3, [r7, #0]
 81082dc:	011b      	lsls	r3, r3, #4
 81082de:	b2db      	uxtb	r3, r3
 81082e0:	693a      	ldr	r2, [r7, #16]
 81082e2:	4313      	orrs	r3, r2
 81082e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 81082e6:	697b      	ldr	r3, [r7, #20]
 81082e8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 81082ec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 81082ee:	68bb      	ldr	r3, [r7, #8]
 81082f0:	021b      	lsls	r3, r3, #8
 81082f2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 81082f6:	697a      	ldr	r2, [r7, #20]
 81082f8:	4313      	orrs	r3, r2
 81082fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 81082fc:	68fb      	ldr	r3, [r7, #12]
 81082fe:	693a      	ldr	r2, [r7, #16]
 8108300:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8108302:	68fb      	ldr	r3, [r7, #12]
 8108304:	697a      	ldr	r2, [r7, #20]
 8108306:	621a      	str	r2, [r3, #32]
}
 8108308:	bf00      	nop
 810830a:	371c      	adds	r7, #28
 810830c:	46bd      	mov	sp, r7
 810830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108312:	4770      	bx	lr

08108314 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8108314:	b480      	push	{r7}
 8108316:	b087      	sub	sp, #28
 8108318:	af00      	add	r7, sp, #0
 810831a:	60f8      	str	r0, [r7, #12]
 810831c:	60b9      	str	r1, [r7, #8]
 810831e:	607a      	str	r2, [r7, #4]
 8108320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8108322:	68fb      	ldr	r3, [r7, #12]
 8108324:	6a1b      	ldr	r3, [r3, #32]
 8108326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108328:	68fb      	ldr	r3, [r7, #12]
 810832a:	6a1b      	ldr	r3, [r3, #32]
 810832c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8108330:	68fb      	ldr	r3, [r7, #12]
 8108332:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8108334:	68fb      	ldr	r3, [r7, #12]
 8108336:	69db      	ldr	r3, [r3, #28]
 8108338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810833a:	693b      	ldr	r3, [r7, #16]
 810833c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108340:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8108342:	687b      	ldr	r3, [r7, #4]
 8108344:	021b      	lsls	r3, r3, #8
 8108346:	693a      	ldr	r2, [r7, #16]
 8108348:	4313      	orrs	r3, r2
 810834a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810834c:	693b      	ldr	r3, [r7, #16]
 810834e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108352:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8108354:	683b      	ldr	r3, [r7, #0]
 8108356:	031b      	lsls	r3, r3, #12
 8108358:	b29b      	uxth	r3, r3
 810835a:	693a      	ldr	r2, [r7, #16]
 810835c:	4313      	orrs	r3, r2
 810835e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8108360:	697b      	ldr	r3, [r7, #20]
 8108362:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8108366:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8108368:	68bb      	ldr	r3, [r7, #8]
 810836a:	031b      	lsls	r3, r3, #12
 810836c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8108370:	697a      	ldr	r2, [r7, #20]
 8108372:	4313      	orrs	r3, r2
 8108374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8108376:	68fb      	ldr	r3, [r7, #12]
 8108378:	693a      	ldr	r2, [r7, #16]
 810837a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810837c:	68fb      	ldr	r3, [r7, #12]
 810837e:	697a      	ldr	r2, [r7, #20]
 8108380:	621a      	str	r2, [r3, #32]
}
 8108382:	bf00      	nop
 8108384:	371c      	adds	r7, #28
 8108386:	46bd      	mov	sp, r7
 8108388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810838c:	4770      	bx	lr

0810838e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810838e:	b480      	push	{r7}
 8108390:	b085      	sub	sp, #20
 8108392:	af00      	add	r7, sp, #0
 8108394:	6078      	str	r0, [r7, #4]
 8108396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8108398:	687b      	ldr	r3, [r7, #4]
 810839a:	689b      	ldr	r3, [r3, #8]
 810839c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810839e:	68fb      	ldr	r3, [r7, #12]
 81083a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 81083a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81083a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81083aa:	683a      	ldr	r2, [r7, #0]
 81083ac:	68fb      	ldr	r3, [r7, #12]
 81083ae:	4313      	orrs	r3, r2
 81083b0:	f043 0307 	orr.w	r3, r3, #7
 81083b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	68fa      	ldr	r2, [r7, #12]
 81083ba:	609a      	str	r2, [r3, #8]
}
 81083bc:	bf00      	nop
 81083be:	3714      	adds	r7, #20
 81083c0:	46bd      	mov	sp, r7
 81083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083c6:	4770      	bx	lr

081083c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81083c8:	b480      	push	{r7}
 81083ca:	b087      	sub	sp, #28
 81083cc:	af00      	add	r7, sp, #0
 81083ce:	60f8      	str	r0, [r7, #12]
 81083d0:	60b9      	str	r1, [r7, #8]
 81083d2:	607a      	str	r2, [r7, #4]
 81083d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81083d6:	68fb      	ldr	r3, [r7, #12]
 81083d8:	689b      	ldr	r3, [r3, #8]
 81083da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81083dc:	697b      	ldr	r3, [r7, #20]
 81083de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81083e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81083e4:	683b      	ldr	r3, [r7, #0]
 81083e6:	021a      	lsls	r2, r3, #8
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	431a      	orrs	r2, r3
 81083ec:	68bb      	ldr	r3, [r7, #8]
 81083ee:	4313      	orrs	r3, r2
 81083f0:	697a      	ldr	r2, [r7, #20]
 81083f2:	4313      	orrs	r3, r2
 81083f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81083f6:	68fb      	ldr	r3, [r7, #12]
 81083f8:	697a      	ldr	r2, [r7, #20]
 81083fa:	609a      	str	r2, [r3, #8]
}
 81083fc:	bf00      	nop
 81083fe:	371c      	adds	r7, #28
 8108400:	46bd      	mov	sp, r7
 8108402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108406:	4770      	bx	lr

08108408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8108408:	b480      	push	{r7}
 810840a:	b087      	sub	sp, #28
 810840c:	af00      	add	r7, sp, #0
 810840e:	60f8      	str	r0, [r7, #12]
 8108410:	60b9      	str	r1, [r7, #8]
 8108412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8108414:	68bb      	ldr	r3, [r7, #8]
 8108416:	f003 031f 	and.w	r3, r3, #31
 810841a:	2201      	movs	r2, #1
 810841c:	fa02 f303 	lsl.w	r3, r2, r3
 8108420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8108422:	68fb      	ldr	r3, [r7, #12]
 8108424:	6a1a      	ldr	r2, [r3, #32]
 8108426:	697b      	ldr	r3, [r7, #20]
 8108428:	43db      	mvns	r3, r3
 810842a:	401a      	ands	r2, r3
 810842c:	68fb      	ldr	r3, [r7, #12]
 810842e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108430:	68fb      	ldr	r3, [r7, #12]
 8108432:	6a1a      	ldr	r2, [r3, #32]
 8108434:	68bb      	ldr	r3, [r7, #8]
 8108436:	f003 031f 	and.w	r3, r3, #31
 810843a:	6879      	ldr	r1, [r7, #4]
 810843c:	fa01 f303 	lsl.w	r3, r1, r3
 8108440:	431a      	orrs	r2, r3
 8108442:	68fb      	ldr	r3, [r7, #12]
 8108444:	621a      	str	r2, [r3, #32]
}
 8108446:	bf00      	nop
 8108448:	371c      	adds	r7, #28
 810844a:	46bd      	mov	sp, r7
 810844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108450:	4770      	bx	lr
	...

08108454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108454:	b480      	push	{r7}
 8108456:	b085      	sub	sp, #20
 8108458:	af00      	add	r7, sp, #0
 810845a:	6078      	str	r0, [r7, #4]
 810845c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810845e:	687b      	ldr	r3, [r7, #4]
 8108460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108464:	2b01      	cmp	r3, #1
 8108466:	d101      	bne.n	810846c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108468:	2302      	movs	r3, #2
 810846a:	e06d      	b.n	8108548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810846c:	687b      	ldr	r3, [r7, #4]
 810846e:	2201      	movs	r2, #1
 8108470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108474:	687b      	ldr	r3, [r7, #4]
 8108476:	2202      	movs	r2, #2
 8108478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810847c:	687b      	ldr	r3, [r7, #4]
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	685b      	ldr	r3, [r3, #4]
 8108482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108484:	687b      	ldr	r3, [r7, #4]
 8108486:	681b      	ldr	r3, [r3, #0]
 8108488:	689b      	ldr	r3, [r3, #8]
 810848a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	681b      	ldr	r3, [r3, #0]
 8108490:	4a30      	ldr	r2, [pc, #192]	@ (8108554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108492:	4293      	cmp	r3, r2
 8108494:	d004      	beq.n	81084a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108496:	687b      	ldr	r3, [r7, #4]
 8108498:	681b      	ldr	r3, [r3, #0]
 810849a:	4a2f      	ldr	r2, [pc, #188]	@ (8108558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810849c:	4293      	cmp	r3, r2
 810849e:	d108      	bne.n	81084b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81084a0:	68fb      	ldr	r3, [r7, #12]
 81084a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 81084a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81084a8:	683b      	ldr	r3, [r7, #0]
 81084aa:	685b      	ldr	r3, [r3, #4]
 81084ac:	68fa      	ldr	r2, [r7, #12]
 81084ae:	4313      	orrs	r3, r2
 81084b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81084b2:	68fb      	ldr	r3, [r7, #12]
 81084b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 81084b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81084ba:	683b      	ldr	r3, [r7, #0]
 81084bc:	681b      	ldr	r3, [r3, #0]
 81084be:	68fa      	ldr	r2, [r7, #12]
 81084c0:	4313      	orrs	r3, r2
 81084c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81084c4:	687b      	ldr	r3, [r7, #4]
 81084c6:	681b      	ldr	r3, [r3, #0]
 81084c8:	68fa      	ldr	r2, [r7, #12]
 81084ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81084cc:	687b      	ldr	r3, [r7, #4]
 81084ce:	681b      	ldr	r3, [r3, #0]
 81084d0:	4a20      	ldr	r2, [pc, #128]	@ (8108554 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81084d2:	4293      	cmp	r3, r2
 81084d4:	d022      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084d6:	687b      	ldr	r3, [r7, #4]
 81084d8:	681b      	ldr	r3, [r3, #0]
 81084da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81084de:	d01d      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084e0:	687b      	ldr	r3, [r7, #4]
 81084e2:	681b      	ldr	r3, [r3, #0]
 81084e4:	4a1d      	ldr	r2, [pc, #116]	@ (810855c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81084e6:	4293      	cmp	r3, r2
 81084e8:	d018      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084ea:	687b      	ldr	r3, [r7, #4]
 81084ec:	681b      	ldr	r3, [r3, #0]
 81084ee:	4a1c      	ldr	r2, [pc, #112]	@ (8108560 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81084f0:	4293      	cmp	r3, r2
 81084f2:	d013      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084f4:	687b      	ldr	r3, [r7, #4]
 81084f6:	681b      	ldr	r3, [r3, #0]
 81084f8:	4a1a      	ldr	r2, [pc, #104]	@ (8108564 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81084fa:	4293      	cmp	r3, r2
 81084fc:	d00e      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	681b      	ldr	r3, [r3, #0]
 8108502:	4a15      	ldr	r2, [pc, #84]	@ (8108558 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108504:	4293      	cmp	r3, r2
 8108506:	d009      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	681b      	ldr	r3, [r3, #0]
 810850c:	4a16      	ldr	r2, [pc, #88]	@ (8108568 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810850e:	4293      	cmp	r3, r2
 8108510:	d004      	beq.n	810851c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108512:	687b      	ldr	r3, [r7, #4]
 8108514:	681b      	ldr	r3, [r3, #0]
 8108516:	4a15      	ldr	r2, [pc, #84]	@ (810856c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108518:	4293      	cmp	r3, r2
 810851a:	d10c      	bne.n	8108536 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810851c:	68bb      	ldr	r3, [r7, #8]
 810851e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108522:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108524:	683b      	ldr	r3, [r7, #0]
 8108526:	689b      	ldr	r3, [r3, #8]
 8108528:	68ba      	ldr	r2, [r7, #8]
 810852a:	4313      	orrs	r3, r2
 810852c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	681b      	ldr	r3, [r3, #0]
 8108532:	68ba      	ldr	r2, [r7, #8]
 8108534:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	2201      	movs	r2, #1
 810853a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	2200      	movs	r2, #0
 8108542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8108546:	2300      	movs	r3, #0
}
 8108548:	4618      	mov	r0, r3
 810854a:	3714      	adds	r7, #20
 810854c:	46bd      	mov	sp, r7
 810854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108552:	4770      	bx	lr
 8108554:	40010000 	.word	0x40010000
 8108558:	40010400 	.word	0x40010400
 810855c:	40000400 	.word	0x40000400
 8108560:	40000800 	.word	0x40000800
 8108564:	40000c00 	.word	0x40000c00
 8108568:	40001800 	.word	0x40001800
 810856c:	40014000 	.word	0x40014000

08108570 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108570:	b480      	push	{r7}
 8108572:	b083      	sub	sp, #12
 8108574:	af00      	add	r7, sp, #0
 8108576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108578:	bf00      	nop
 810857a:	370c      	adds	r7, #12
 810857c:	46bd      	mov	sp, r7
 810857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108582:	4770      	bx	lr

08108584 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8108584:	b480      	push	{r7}
 8108586:	b083      	sub	sp, #12
 8108588:	af00      	add	r7, sp, #0
 810858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810858c:	bf00      	nop
 810858e:	370c      	adds	r7, #12
 8108590:	46bd      	mov	sp, r7
 8108592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108596:	4770      	bx	lr

08108598 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108598:	b480      	push	{r7}
 810859a:	b083      	sub	sp, #12
 810859c:	af00      	add	r7, sp, #0
 810859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81085a0:	bf00      	nop
 81085a2:	370c      	adds	r7, #12
 81085a4:	46bd      	mov	sp, r7
 81085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085aa:	4770      	bx	lr

081085ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81085ac:	b580      	push	{r7, lr}
 81085ae:	b082      	sub	sp, #8
 81085b0:	af00      	add	r7, sp, #0
 81085b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81085b4:	687b      	ldr	r3, [r7, #4]
 81085b6:	2b00      	cmp	r3, #0
 81085b8:	d101      	bne.n	81085be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81085ba:	2301      	movs	r3, #1
 81085bc:	e042      	b.n	8108644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81085be:	687b      	ldr	r3, [r7, #4]
 81085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81085c4:	2b00      	cmp	r3, #0
 81085c6:	d106      	bne.n	81085d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	2200      	movs	r2, #0
 81085cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81085d0:	6878      	ldr	r0, [r7, #4]
 81085d2:	f7fa fbb9 	bl	8102d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81085d6:	687b      	ldr	r3, [r7, #4]
 81085d8:	2224      	movs	r2, #36	@ 0x24
 81085da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	681b      	ldr	r3, [r3, #0]
 81085e2:	681a      	ldr	r2, [r3, #0]
 81085e4:	687b      	ldr	r3, [r7, #4]
 81085e6:	681b      	ldr	r3, [r3, #0]
 81085e8:	f022 0201 	bic.w	r2, r2, #1
 81085ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81085ee:	687b      	ldr	r3, [r7, #4]
 81085f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81085f2:	2b00      	cmp	r3, #0
 81085f4:	d002      	beq.n	81085fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81085f6:	6878      	ldr	r0, [r7, #4]
 81085f8:	f000 fe1e 	bl	8109238 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81085fc:	6878      	ldr	r0, [r7, #4]
 81085fe:	f000 f8b3 	bl	8108768 <UART_SetConfig>
 8108602:	4603      	mov	r3, r0
 8108604:	2b01      	cmp	r3, #1
 8108606:	d101      	bne.n	810860c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8108608:	2301      	movs	r3, #1
 810860a:	e01b      	b.n	8108644 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810860c:	687b      	ldr	r3, [r7, #4]
 810860e:	681b      	ldr	r3, [r3, #0]
 8108610:	685a      	ldr	r2, [r3, #4]
 8108612:	687b      	ldr	r3, [r7, #4]
 8108614:	681b      	ldr	r3, [r3, #0]
 8108616:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810861a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810861c:	687b      	ldr	r3, [r7, #4]
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	689a      	ldr	r2, [r3, #8]
 8108622:	687b      	ldr	r3, [r7, #4]
 8108624:	681b      	ldr	r3, [r3, #0]
 8108626:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810862a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810862c:	687b      	ldr	r3, [r7, #4]
 810862e:	681b      	ldr	r3, [r3, #0]
 8108630:	681a      	ldr	r2, [r3, #0]
 8108632:	687b      	ldr	r3, [r7, #4]
 8108634:	681b      	ldr	r3, [r3, #0]
 8108636:	f042 0201 	orr.w	r2, r2, #1
 810863a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810863c:	6878      	ldr	r0, [r7, #4]
 810863e:	f000 fe9d 	bl	810937c <UART_CheckIdleState>
 8108642:	4603      	mov	r3, r0
}
 8108644:	4618      	mov	r0, r3
 8108646:	3708      	adds	r7, #8
 8108648:	46bd      	mov	sp, r7
 810864a:	bd80      	pop	{r7, pc}

0810864c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810864c:	b580      	push	{r7, lr}
 810864e:	b08a      	sub	sp, #40	@ 0x28
 8108650:	af02      	add	r7, sp, #8
 8108652:	60f8      	str	r0, [r7, #12]
 8108654:	60b9      	str	r1, [r7, #8]
 8108656:	603b      	str	r3, [r7, #0]
 8108658:	4613      	mov	r3, r2
 810865a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810865c:	68fb      	ldr	r3, [r7, #12]
 810865e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8108662:	2b20      	cmp	r3, #32
 8108664:	d17b      	bne.n	810875e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108666:	68bb      	ldr	r3, [r7, #8]
 8108668:	2b00      	cmp	r3, #0
 810866a:	d002      	beq.n	8108672 <HAL_UART_Transmit+0x26>
 810866c:	88fb      	ldrh	r3, [r7, #6]
 810866e:	2b00      	cmp	r3, #0
 8108670:	d101      	bne.n	8108676 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108672:	2301      	movs	r3, #1
 8108674:	e074      	b.n	8108760 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108676:	68fb      	ldr	r3, [r7, #12]
 8108678:	2200      	movs	r2, #0
 810867a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810867e:	68fb      	ldr	r3, [r7, #12]
 8108680:	2221      	movs	r2, #33	@ 0x21
 8108682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108686:	f7fa fda5 	bl	81031d4 <HAL_GetTick>
 810868a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810868c:	68fb      	ldr	r3, [r7, #12]
 810868e:	88fa      	ldrh	r2, [r7, #6]
 8108690:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8108694:	68fb      	ldr	r3, [r7, #12]
 8108696:	88fa      	ldrh	r2, [r7, #6]
 8108698:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810869c:	68fb      	ldr	r3, [r7, #12]
 810869e:	689b      	ldr	r3, [r3, #8]
 81086a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81086a4:	d108      	bne.n	81086b8 <HAL_UART_Transmit+0x6c>
 81086a6:	68fb      	ldr	r3, [r7, #12]
 81086a8:	691b      	ldr	r3, [r3, #16]
 81086aa:	2b00      	cmp	r3, #0
 81086ac:	d104      	bne.n	81086b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81086ae:	2300      	movs	r3, #0
 81086b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81086b2:	68bb      	ldr	r3, [r7, #8]
 81086b4:	61bb      	str	r3, [r7, #24]
 81086b6:	e003      	b.n	81086c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81086b8:	68bb      	ldr	r3, [r7, #8]
 81086ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81086bc:	2300      	movs	r3, #0
 81086be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81086c0:	e030      	b.n	8108724 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81086c2:	683b      	ldr	r3, [r7, #0]
 81086c4:	9300      	str	r3, [sp, #0]
 81086c6:	697b      	ldr	r3, [r7, #20]
 81086c8:	2200      	movs	r2, #0
 81086ca:	2180      	movs	r1, #128	@ 0x80
 81086cc:	68f8      	ldr	r0, [r7, #12]
 81086ce:	f000 feff 	bl	81094d0 <UART_WaitOnFlagUntilTimeout>
 81086d2:	4603      	mov	r3, r0
 81086d4:	2b00      	cmp	r3, #0
 81086d6:	d005      	beq.n	81086e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81086d8:	68fb      	ldr	r3, [r7, #12]
 81086da:	2220      	movs	r2, #32
 81086dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81086e0:	2303      	movs	r3, #3
 81086e2:	e03d      	b.n	8108760 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81086e4:	69fb      	ldr	r3, [r7, #28]
 81086e6:	2b00      	cmp	r3, #0
 81086e8:	d10b      	bne.n	8108702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81086ea:	69bb      	ldr	r3, [r7, #24]
 81086ec:	881b      	ldrh	r3, [r3, #0]
 81086ee:	461a      	mov	r2, r3
 81086f0:	68fb      	ldr	r3, [r7, #12]
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81086f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81086fa:	69bb      	ldr	r3, [r7, #24]
 81086fc:	3302      	adds	r3, #2
 81086fe:	61bb      	str	r3, [r7, #24]
 8108700:	e007      	b.n	8108712 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108702:	69fb      	ldr	r3, [r7, #28]
 8108704:	781a      	ldrb	r2, [r3, #0]
 8108706:	68fb      	ldr	r3, [r7, #12]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810870c:	69fb      	ldr	r3, [r7, #28]
 810870e:	3301      	adds	r3, #1
 8108710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108712:	68fb      	ldr	r3, [r7, #12]
 8108714:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8108718:	b29b      	uxth	r3, r3
 810871a:	3b01      	subs	r3, #1
 810871c:	b29a      	uxth	r2, r3
 810871e:	68fb      	ldr	r3, [r7, #12]
 8108720:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8108724:	68fb      	ldr	r3, [r7, #12]
 8108726:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 810872a:	b29b      	uxth	r3, r3
 810872c:	2b00      	cmp	r3, #0
 810872e:	d1c8      	bne.n	81086c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108730:	683b      	ldr	r3, [r7, #0]
 8108732:	9300      	str	r3, [sp, #0]
 8108734:	697b      	ldr	r3, [r7, #20]
 8108736:	2200      	movs	r2, #0
 8108738:	2140      	movs	r1, #64	@ 0x40
 810873a:	68f8      	ldr	r0, [r7, #12]
 810873c:	f000 fec8 	bl	81094d0 <UART_WaitOnFlagUntilTimeout>
 8108740:	4603      	mov	r3, r0
 8108742:	2b00      	cmp	r3, #0
 8108744:	d005      	beq.n	8108752 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108746:	68fb      	ldr	r3, [r7, #12]
 8108748:	2220      	movs	r2, #32
 810874a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810874e:	2303      	movs	r3, #3
 8108750:	e006      	b.n	8108760 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108752:	68fb      	ldr	r3, [r7, #12]
 8108754:	2220      	movs	r2, #32
 8108756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 810875a:	2300      	movs	r3, #0
 810875c:	e000      	b.n	8108760 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810875e:	2302      	movs	r3, #2
  }
}
 8108760:	4618      	mov	r0, r3
 8108762:	3720      	adds	r7, #32
 8108764:	46bd      	mov	sp, r7
 8108766:	bd80      	pop	{r7, pc}

08108768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810876c:	b092      	sub	sp, #72	@ 0x48
 810876e:	af00      	add	r7, sp, #0
 8108770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108772:	2300      	movs	r3, #0
 8108774:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108778:	697b      	ldr	r3, [r7, #20]
 810877a:	689a      	ldr	r2, [r3, #8]
 810877c:	697b      	ldr	r3, [r7, #20]
 810877e:	691b      	ldr	r3, [r3, #16]
 8108780:	431a      	orrs	r2, r3
 8108782:	697b      	ldr	r3, [r7, #20]
 8108784:	695b      	ldr	r3, [r3, #20]
 8108786:	431a      	orrs	r2, r3
 8108788:	697b      	ldr	r3, [r7, #20]
 810878a:	69db      	ldr	r3, [r3, #28]
 810878c:	4313      	orrs	r3, r2
 810878e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108790:	697b      	ldr	r3, [r7, #20]
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	681a      	ldr	r2, [r3, #0]
 8108796:	4bbd      	ldr	r3, [pc, #756]	@ (8108a8c <UART_SetConfig+0x324>)
 8108798:	4013      	ands	r3, r2
 810879a:	697a      	ldr	r2, [r7, #20]
 810879c:	6812      	ldr	r2, [r2, #0]
 810879e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81087a0:	430b      	orrs	r3, r1
 81087a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81087a4:	697b      	ldr	r3, [r7, #20]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	685b      	ldr	r3, [r3, #4]
 81087aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81087ae:	697b      	ldr	r3, [r7, #20]
 81087b0:	68da      	ldr	r2, [r3, #12]
 81087b2:	697b      	ldr	r3, [r7, #20]
 81087b4:	681b      	ldr	r3, [r3, #0]
 81087b6:	430a      	orrs	r2, r1
 81087b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81087ba:	697b      	ldr	r3, [r7, #20]
 81087bc:	699b      	ldr	r3, [r3, #24]
 81087be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81087c0:	697b      	ldr	r3, [r7, #20]
 81087c2:	681b      	ldr	r3, [r3, #0]
 81087c4:	4ab2      	ldr	r2, [pc, #712]	@ (8108a90 <UART_SetConfig+0x328>)
 81087c6:	4293      	cmp	r3, r2
 81087c8:	d004      	beq.n	81087d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81087ca:	697b      	ldr	r3, [r7, #20]
 81087cc:	6a1b      	ldr	r3, [r3, #32]
 81087ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81087d0:	4313      	orrs	r3, r2
 81087d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81087d4:	697b      	ldr	r3, [r7, #20]
 81087d6:	681b      	ldr	r3, [r3, #0]
 81087d8:	689b      	ldr	r3, [r3, #8]
 81087da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 81087de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81087e2:	697a      	ldr	r2, [r7, #20]
 81087e4:	6812      	ldr	r2, [r2, #0]
 81087e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81087e8:	430b      	orrs	r3, r1
 81087ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81087ec:	697b      	ldr	r3, [r7, #20]
 81087ee:	681b      	ldr	r3, [r3, #0]
 81087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81087f2:	f023 010f 	bic.w	r1, r3, #15
 81087f6:	697b      	ldr	r3, [r7, #20]
 81087f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81087fa:	697b      	ldr	r3, [r7, #20]
 81087fc:	681b      	ldr	r3, [r3, #0]
 81087fe:	430a      	orrs	r2, r1
 8108800:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108802:	697b      	ldr	r3, [r7, #20]
 8108804:	681b      	ldr	r3, [r3, #0]
 8108806:	4aa3      	ldr	r2, [pc, #652]	@ (8108a94 <UART_SetConfig+0x32c>)
 8108808:	4293      	cmp	r3, r2
 810880a:	d177      	bne.n	81088fc <UART_SetConfig+0x194>
 810880c:	4ba2      	ldr	r3, [pc, #648]	@ (8108a98 <UART_SetConfig+0x330>)
 810880e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108814:	2b28      	cmp	r3, #40	@ 0x28
 8108816:	d86d      	bhi.n	81088f4 <UART_SetConfig+0x18c>
 8108818:	a201      	add	r2, pc, #4	@ (adr r2, 8108820 <UART_SetConfig+0xb8>)
 810881a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810881e:	bf00      	nop
 8108820:	081088c5 	.word	0x081088c5
 8108824:	081088f5 	.word	0x081088f5
 8108828:	081088f5 	.word	0x081088f5
 810882c:	081088f5 	.word	0x081088f5
 8108830:	081088f5 	.word	0x081088f5
 8108834:	081088f5 	.word	0x081088f5
 8108838:	081088f5 	.word	0x081088f5
 810883c:	081088f5 	.word	0x081088f5
 8108840:	081088cd 	.word	0x081088cd
 8108844:	081088f5 	.word	0x081088f5
 8108848:	081088f5 	.word	0x081088f5
 810884c:	081088f5 	.word	0x081088f5
 8108850:	081088f5 	.word	0x081088f5
 8108854:	081088f5 	.word	0x081088f5
 8108858:	081088f5 	.word	0x081088f5
 810885c:	081088f5 	.word	0x081088f5
 8108860:	081088d5 	.word	0x081088d5
 8108864:	081088f5 	.word	0x081088f5
 8108868:	081088f5 	.word	0x081088f5
 810886c:	081088f5 	.word	0x081088f5
 8108870:	081088f5 	.word	0x081088f5
 8108874:	081088f5 	.word	0x081088f5
 8108878:	081088f5 	.word	0x081088f5
 810887c:	081088f5 	.word	0x081088f5
 8108880:	081088dd 	.word	0x081088dd
 8108884:	081088f5 	.word	0x081088f5
 8108888:	081088f5 	.word	0x081088f5
 810888c:	081088f5 	.word	0x081088f5
 8108890:	081088f5 	.word	0x081088f5
 8108894:	081088f5 	.word	0x081088f5
 8108898:	081088f5 	.word	0x081088f5
 810889c:	081088f5 	.word	0x081088f5
 81088a0:	081088e5 	.word	0x081088e5
 81088a4:	081088f5 	.word	0x081088f5
 81088a8:	081088f5 	.word	0x081088f5
 81088ac:	081088f5 	.word	0x081088f5
 81088b0:	081088f5 	.word	0x081088f5
 81088b4:	081088f5 	.word	0x081088f5
 81088b8:	081088f5 	.word	0x081088f5
 81088bc:	081088f5 	.word	0x081088f5
 81088c0:	081088ed 	.word	0x081088ed
 81088c4:	2301      	movs	r3, #1
 81088c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088ca:	e220      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088cc:	2304      	movs	r3, #4
 81088ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088d2:	e21c      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088d4:	2308      	movs	r3, #8
 81088d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088da:	e218      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088dc:	2310      	movs	r3, #16
 81088de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088e2:	e214      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088e4:	2320      	movs	r3, #32
 81088e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088ea:	e210      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088ec:	2340      	movs	r3, #64	@ 0x40
 81088ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088f2:	e20c      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088f4:	2380      	movs	r3, #128	@ 0x80
 81088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81088fa:	e208      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81088fc:	697b      	ldr	r3, [r7, #20]
 81088fe:	681b      	ldr	r3, [r3, #0]
 8108900:	4a66      	ldr	r2, [pc, #408]	@ (8108a9c <UART_SetConfig+0x334>)
 8108902:	4293      	cmp	r3, r2
 8108904:	d130      	bne.n	8108968 <UART_SetConfig+0x200>
 8108906:	4b64      	ldr	r3, [pc, #400]	@ (8108a98 <UART_SetConfig+0x330>)
 8108908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810890a:	f003 0307 	and.w	r3, r3, #7
 810890e:	2b05      	cmp	r3, #5
 8108910:	d826      	bhi.n	8108960 <UART_SetConfig+0x1f8>
 8108912:	a201      	add	r2, pc, #4	@ (adr r2, 8108918 <UART_SetConfig+0x1b0>)
 8108914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108918:	08108931 	.word	0x08108931
 810891c:	08108939 	.word	0x08108939
 8108920:	08108941 	.word	0x08108941
 8108924:	08108949 	.word	0x08108949
 8108928:	08108951 	.word	0x08108951
 810892c:	08108959 	.word	0x08108959
 8108930:	2300      	movs	r3, #0
 8108932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108936:	e1ea      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108938:	2304      	movs	r3, #4
 810893a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810893e:	e1e6      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108940:	2308      	movs	r3, #8
 8108942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108946:	e1e2      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108948:	2310      	movs	r3, #16
 810894a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810894e:	e1de      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108950:	2320      	movs	r3, #32
 8108952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108956:	e1da      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108958:	2340      	movs	r3, #64	@ 0x40
 810895a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810895e:	e1d6      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108960:	2380      	movs	r3, #128	@ 0x80
 8108962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108966:	e1d2      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108968:	697b      	ldr	r3, [r7, #20]
 810896a:	681b      	ldr	r3, [r3, #0]
 810896c:	4a4c      	ldr	r2, [pc, #304]	@ (8108aa0 <UART_SetConfig+0x338>)
 810896e:	4293      	cmp	r3, r2
 8108970:	d130      	bne.n	81089d4 <UART_SetConfig+0x26c>
 8108972:	4b49      	ldr	r3, [pc, #292]	@ (8108a98 <UART_SetConfig+0x330>)
 8108974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108976:	f003 0307 	and.w	r3, r3, #7
 810897a:	2b05      	cmp	r3, #5
 810897c:	d826      	bhi.n	81089cc <UART_SetConfig+0x264>
 810897e:	a201      	add	r2, pc, #4	@ (adr r2, 8108984 <UART_SetConfig+0x21c>)
 8108980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108984:	0810899d 	.word	0x0810899d
 8108988:	081089a5 	.word	0x081089a5
 810898c:	081089ad 	.word	0x081089ad
 8108990:	081089b5 	.word	0x081089b5
 8108994:	081089bd 	.word	0x081089bd
 8108998:	081089c5 	.word	0x081089c5
 810899c:	2300      	movs	r3, #0
 810899e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089a2:	e1b4      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089a4:	2304      	movs	r3, #4
 81089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089aa:	e1b0      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089ac:	2308      	movs	r3, #8
 81089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089b2:	e1ac      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089b4:	2310      	movs	r3, #16
 81089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089ba:	e1a8      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089bc:	2320      	movs	r3, #32
 81089be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089c2:	e1a4      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089c4:	2340      	movs	r3, #64	@ 0x40
 81089c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089ca:	e1a0      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089cc:	2380      	movs	r3, #128	@ 0x80
 81089ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81089d2:	e19c      	b.n	8108d0e <UART_SetConfig+0x5a6>
 81089d4:	697b      	ldr	r3, [r7, #20]
 81089d6:	681b      	ldr	r3, [r3, #0]
 81089d8:	4a32      	ldr	r2, [pc, #200]	@ (8108aa4 <UART_SetConfig+0x33c>)
 81089da:	4293      	cmp	r3, r2
 81089dc:	d130      	bne.n	8108a40 <UART_SetConfig+0x2d8>
 81089de:	4b2e      	ldr	r3, [pc, #184]	@ (8108a98 <UART_SetConfig+0x330>)
 81089e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81089e2:	f003 0307 	and.w	r3, r3, #7
 81089e6:	2b05      	cmp	r3, #5
 81089e8:	d826      	bhi.n	8108a38 <UART_SetConfig+0x2d0>
 81089ea:	a201      	add	r2, pc, #4	@ (adr r2, 81089f0 <UART_SetConfig+0x288>)
 81089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089f0:	08108a09 	.word	0x08108a09
 81089f4:	08108a11 	.word	0x08108a11
 81089f8:	08108a19 	.word	0x08108a19
 81089fc:	08108a21 	.word	0x08108a21
 8108a00:	08108a29 	.word	0x08108a29
 8108a04:	08108a31 	.word	0x08108a31
 8108a08:	2300      	movs	r3, #0
 8108a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a0e:	e17e      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a10:	2304      	movs	r3, #4
 8108a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a16:	e17a      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a18:	2308      	movs	r3, #8
 8108a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a1e:	e176      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a20:	2310      	movs	r3, #16
 8108a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a26:	e172      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a28:	2320      	movs	r3, #32
 8108a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a2e:	e16e      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a30:	2340      	movs	r3, #64	@ 0x40
 8108a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a36:	e16a      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a38:	2380      	movs	r3, #128	@ 0x80
 8108a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a3e:	e166      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a40:	697b      	ldr	r3, [r7, #20]
 8108a42:	681b      	ldr	r3, [r3, #0]
 8108a44:	4a18      	ldr	r2, [pc, #96]	@ (8108aa8 <UART_SetConfig+0x340>)
 8108a46:	4293      	cmp	r3, r2
 8108a48:	d140      	bne.n	8108acc <UART_SetConfig+0x364>
 8108a4a:	4b13      	ldr	r3, [pc, #76]	@ (8108a98 <UART_SetConfig+0x330>)
 8108a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a4e:	f003 0307 	and.w	r3, r3, #7
 8108a52:	2b05      	cmp	r3, #5
 8108a54:	d836      	bhi.n	8108ac4 <UART_SetConfig+0x35c>
 8108a56:	a201      	add	r2, pc, #4	@ (adr r2, 8108a5c <UART_SetConfig+0x2f4>)
 8108a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a5c:	08108a75 	.word	0x08108a75
 8108a60:	08108a7d 	.word	0x08108a7d
 8108a64:	08108a85 	.word	0x08108a85
 8108a68:	08108aad 	.word	0x08108aad
 8108a6c:	08108ab5 	.word	0x08108ab5
 8108a70:	08108abd 	.word	0x08108abd
 8108a74:	2300      	movs	r3, #0
 8108a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a7a:	e148      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a7c:	2304      	movs	r3, #4
 8108a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a82:	e144      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a84:	2308      	movs	r3, #8
 8108a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a8a:	e140      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108a8c:	cfff69f3 	.word	0xcfff69f3
 8108a90:	58000c00 	.word	0x58000c00
 8108a94:	40011000 	.word	0x40011000
 8108a98:	58024400 	.word	0x58024400
 8108a9c:	40004400 	.word	0x40004400
 8108aa0:	40004800 	.word	0x40004800
 8108aa4:	40004c00 	.word	0x40004c00
 8108aa8:	40005000 	.word	0x40005000
 8108aac:	2310      	movs	r3, #16
 8108aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ab2:	e12c      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108ab4:	2320      	movs	r3, #32
 8108ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108aba:	e128      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108abc:	2340      	movs	r3, #64	@ 0x40
 8108abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ac2:	e124      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108ac4:	2380      	movs	r3, #128	@ 0x80
 8108ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108aca:	e120      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108acc:	697b      	ldr	r3, [r7, #20]
 8108ace:	681b      	ldr	r3, [r3, #0]
 8108ad0:	4acb      	ldr	r2, [pc, #812]	@ (8108e00 <UART_SetConfig+0x698>)
 8108ad2:	4293      	cmp	r3, r2
 8108ad4:	d176      	bne.n	8108bc4 <UART_SetConfig+0x45c>
 8108ad6:	4bcb      	ldr	r3, [pc, #812]	@ (8108e04 <UART_SetConfig+0x69c>)
 8108ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108ada:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108ade:	2b28      	cmp	r3, #40	@ 0x28
 8108ae0:	d86c      	bhi.n	8108bbc <UART_SetConfig+0x454>
 8108ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8108ae8 <UART_SetConfig+0x380>)
 8108ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ae8:	08108b8d 	.word	0x08108b8d
 8108aec:	08108bbd 	.word	0x08108bbd
 8108af0:	08108bbd 	.word	0x08108bbd
 8108af4:	08108bbd 	.word	0x08108bbd
 8108af8:	08108bbd 	.word	0x08108bbd
 8108afc:	08108bbd 	.word	0x08108bbd
 8108b00:	08108bbd 	.word	0x08108bbd
 8108b04:	08108bbd 	.word	0x08108bbd
 8108b08:	08108b95 	.word	0x08108b95
 8108b0c:	08108bbd 	.word	0x08108bbd
 8108b10:	08108bbd 	.word	0x08108bbd
 8108b14:	08108bbd 	.word	0x08108bbd
 8108b18:	08108bbd 	.word	0x08108bbd
 8108b1c:	08108bbd 	.word	0x08108bbd
 8108b20:	08108bbd 	.word	0x08108bbd
 8108b24:	08108bbd 	.word	0x08108bbd
 8108b28:	08108b9d 	.word	0x08108b9d
 8108b2c:	08108bbd 	.word	0x08108bbd
 8108b30:	08108bbd 	.word	0x08108bbd
 8108b34:	08108bbd 	.word	0x08108bbd
 8108b38:	08108bbd 	.word	0x08108bbd
 8108b3c:	08108bbd 	.word	0x08108bbd
 8108b40:	08108bbd 	.word	0x08108bbd
 8108b44:	08108bbd 	.word	0x08108bbd
 8108b48:	08108ba5 	.word	0x08108ba5
 8108b4c:	08108bbd 	.word	0x08108bbd
 8108b50:	08108bbd 	.word	0x08108bbd
 8108b54:	08108bbd 	.word	0x08108bbd
 8108b58:	08108bbd 	.word	0x08108bbd
 8108b5c:	08108bbd 	.word	0x08108bbd
 8108b60:	08108bbd 	.word	0x08108bbd
 8108b64:	08108bbd 	.word	0x08108bbd
 8108b68:	08108bad 	.word	0x08108bad
 8108b6c:	08108bbd 	.word	0x08108bbd
 8108b70:	08108bbd 	.word	0x08108bbd
 8108b74:	08108bbd 	.word	0x08108bbd
 8108b78:	08108bbd 	.word	0x08108bbd
 8108b7c:	08108bbd 	.word	0x08108bbd
 8108b80:	08108bbd 	.word	0x08108bbd
 8108b84:	08108bbd 	.word	0x08108bbd
 8108b88:	08108bb5 	.word	0x08108bb5
 8108b8c:	2301      	movs	r3, #1
 8108b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b92:	e0bc      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108b94:	2304      	movs	r3, #4
 8108b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b9a:	e0b8      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108b9c:	2308      	movs	r3, #8
 8108b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ba2:	e0b4      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108ba4:	2310      	movs	r3, #16
 8108ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108baa:	e0b0      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108bac:	2320      	movs	r3, #32
 8108bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bb2:	e0ac      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108bb4:	2340      	movs	r3, #64	@ 0x40
 8108bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bba:	e0a8      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108bbc:	2380      	movs	r3, #128	@ 0x80
 8108bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bc2:	e0a4      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108bc4:	697b      	ldr	r3, [r7, #20]
 8108bc6:	681b      	ldr	r3, [r3, #0]
 8108bc8:	4a8f      	ldr	r2, [pc, #572]	@ (8108e08 <UART_SetConfig+0x6a0>)
 8108bca:	4293      	cmp	r3, r2
 8108bcc:	d130      	bne.n	8108c30 <UART_SetConfig+0x4c8>
 8108bce:	4b8d      	ldr	r3, [pc, #564]	@ (8108e04 <UART_SetConfig+0x69c>)
 8108bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108bd2:	f003 0307 	and.w	r3, r3, #7
 8108bd6:	2b05      	cmp	r3, #5
 8108bd8:	d826      	bhi.n	8108c28 <UART_SetConfig+0x4c0>
 8108bda:	a201      	add	r2, pc, #4	@ (adr r2, 8108be0 <UART_SetConfig+0x478>)
 8108bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108be0:	08108bf9 	.word	0x08108bf9
 8108be4:	08108c01 	.word	0x08108c01
 8108be8:	08108c09 	.word	0x08108c09
 8108bec:	08108c11 	.word	0x08108c11
 8108bf0:	08108c19 	.word	0x08108c19
 8108bf4:	08108c21 	.word	0x08108c21
 8108bf8:	2300      	movs	r3, #0
 8108bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bfe:	e086      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c00:	2304      	movs	r3, #4
 8108c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c06:	e082      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c08:	2308      	movs	r3, #8
 8108c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c0e:	e07e      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c10:	2310      	movs	r3, #16
 8108c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c16:	e07a      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c18:	2320      	movs	r3, #32
 8108c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c1e:	e076      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c20:	2340      	movs	r3, #64	@ 0x40
 8108c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c26:	e072      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c28:	2380      	movs	r3, #128	@ 0x80
 8108c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c2e:	e06e      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c30:	697b      	ldr	r3, [r7, #20]
 8108c32:	681b      	ldr	r3, [r3, #0]
 8108c34:	4a75      	ldr	r2, [pc, #468]	@ (8108e0c <UART_SetConfig+0x6a4>)
 8108c36:	4293      	cmp	r3, r2
 8108c38:	d130      	bne.n	8108c9c <UART_SetConfig+0x534>
 8108c3a:	4b72      	ldr	r3, [pc, #456]	@ (8108e04 <UART_SetConfig+0x69c>)
 8108c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108c3e:	f003 0307 	and.w	r3, r3, #7
 8108c42:	2b05      	cmp	r3, #5
 8108c44:	d826      	bhi.n	8108c94 <UART_SetConfig+0x52c>
 8108c46:	a201      	add	r2, pc, #4	@ (adr r2, 8108c4c <UART_SetConfig+0x4e4>)
 8108c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c4c:	08108c65 	.word	0x08108c65
 8108c50:	08108c6d 	.word	0x08108c6d
 8108c54:	08108c75 	.word	0x08108c75
 8108c58:	08108c7d 	.word	0x08108c7d
 8108c5c:	08108c85 	.word	0x08108c85
 8108c60:	08108c8d 	.word	0x08108c8d
 8108c64:	2300      	movs	r3, #0
 8108c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c6a:	e050      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c6c:	2304      	movs	r3, #4
 8108c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c72:	e04c      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c74:	2308      	movs	r3, #8
 8108c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c7a:	e048      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c7c:	2310      	movs	r3, #16
 8108c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c82:	e044      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c84:	2320      	movs	r3, #32
 8108c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c8a:	e040      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c8c:	2340      	movs	r3, #64	@ 0x40
 8108c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c92:	e03c      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c94:	2380      	movs	r3, #128	@ 0x80
 8108c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c9a:	e038      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108c9c:	697b      	ldr	r3, [r7, #20]
 8108c9e:	681b      	ldr	r3, [r3, #0]
 8108ca0:	4a5b      	ldr	r2, [pc, #364]	@ (8108e10 <UART_SetConfig+0x6a8>)
 8108ca2:	4293      	cmp	r3, r2
 8108ca4:	d130      	bne.n	8108d08 <UART_SetConfig+0x5a0>
 8108ca6:	4b57      	ldr	r3, [pc, #348]	@ (8108e04 <UART_SetConfig+0x69c>)
 8108ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108caa:	f003 0307 	and.w	r3, r3, #7
 8108cae:	2b05      	cmp	r3, #5
 8108cb0:	d826      	bhi.n	8108d00 <UART_SetConfig+0x598>
 8108cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8108cb8 <UART_SetConfig+0x550>)
 8108cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108cb8:	08108cd1 	.word	0x08108cd1
 8108cbc:	08108cd9 	.word	0x08108cd9
 8108cc0:	08108ce1 	.word	0x08108ce1
 8108cc4:	08108ce9 	.word	0x08108ce9
 8108cc8:	08108cf1 	.word	0x08108cf1
 8108ccc:	08108cf9 	.word	0x08108cf9
 8108cd0:	2302      	movs	r3, #2
 8108cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cd6:	e01a      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108cd8:	2304      	movs	r3, #4
 8108cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cde:	e016      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108ce0:	2308      	movs	r3, #8
 8108ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ce6:	e012      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108ce8:	2310      	movs	r3, #16
 8108cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cee:	e00e      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108cf0:	2320      	movs	r3, #32
 8108cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cf6:	e00a      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108cf8:	2340      	movs	r3, #64	@ 0x40
 8108cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108cfe:	e006      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108d00:	2380      	movs	r3, #128	@ 0x80
 8108d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d06:	e002      	b.n	8108d0e <UART_SetConfig+0x5a6>
 8108d08:	2380      	movs	r3, #128	@ 0x80
 8108d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108d0e:	697b      	ldr	r3, [r7, #20]
 8108d10:	681b      	ldr	r3, [r3, #0]
 8108d12:	4a3f      	ldr	r2, [pc, #252]	@ (8108e10 <UART_SetConfig+0x6a8>)
 8108d14:	4293      	cmp	r3, r2
 8108d16:	f040 80f8 	bne.w	8108f0a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108d1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108d1e:	2b20      	cmp	r3, #32
 8108d20:	dc46      	bgt.n	8108db0 <UART_SetConfig+0x648>
 8108d22:	2b02      	cmp	r3, #2
 8108d24:	f2c0 8082 	blt.w	8108e2c <UART_SetConfig+0x6c4>
 8108d28:	3b02      	subs	r3, #2
 8108d2a:	2b1e      	cmp	r3, #30
 8108d2c:	d87e      	bhi.n	8108e2c <UART_SetConfig+0x6c4>
 8108d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8108d34 <UART_SetConfig+0x5cc>)
 8108d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d34:	08108db7 	.word	0x08108db7
 8108d38:	08108e2d 	.word	0x08108e2d
 8108d3c:	08108dbf 	.word	0x08108dbf
 8108d40:	08108e2d 	.word	0x08108e2d
 8108d44:	08108e2d 	.word	0x08108e2d
 8108d48:	08108e2d 	.word	0x08108e2d
 8108d4c:	08108dcf 	.word	0x08108dcf
 8108d50:	08108e2d 	.word	0x08108e2d
 8108d54:	08108e2d 	.word	0x08108e2d
 8108d58:	08108e2d 	.word	0x08108e2d
 8108d5c:	08108e2d 	.word	0x08108e2d
 8108d60:	08108e2d 	.word	0x08108e2d
 8108d64:	08108e2d 	.word	0x08108e2d
 8108d68:	08108e2d 	.word	0x08108e2d
 8108d6c:	08108ddf 	.word	0x08108ddf
 8108d70:	08108e2d 	.word	0x08108e2d
 8108d74:	08108e2d 	.word	0x08108e2d
 8108d78:	08108e2d 	.word	0x08108e2d
 8108d7c:	08108e2d 	.word	0x08108e2d
 8108d80:	08108e2d 	.word	0x08108e2d
 8108d84:	08108e2d 	.word	0x08108e2d
 8108d88:	08108e2d 	.word	0x08108e2d
 8108d8c:	08108e2d 	.word	0x08108e2d
 8108d90:	08108e2d 	.word	0x08108e2d
 8108d94:	08108e2d 	.word	0x08108e2d
 8108d98:	08108e2d 	.word	0x08108e2d
 8108d9c:	08108e2d 	.word	0x08108e2d
 8108da0:	08108e2d 	.word	0x08108e2d
 8108da4:	08108e2d 	.word	0x08108e2d
 8108da8:	08108e2d 	.word	0x08108e2d
 8108dac:	08108e1f 	.word	0x08108e1f
 8108db0:	2b40      	cmp	r3, #64	@ 0x40
 8108db2:	d037      	beq.n	8108e24 <UART_SetConfig+0x6bc>
 8108db4:	e03a      	b.n	8108e2c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108db6:	f7fc ff8f 	bl	8105cd8 <HAL_RCCEx_GetD3PCLK1Freq>
 8108dba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108dbc:	e03c      	b.n	8108e38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108dc2:	4618      	mov	r0, r3
 8108dc4:	f7fc ff9e 	bl	8105d04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108dcc:	e034      	b.n	8108e38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108dce:	f107 0318 	add.w	r3, r7, #24
 8108dd2:	4618      	mov	r0, r3
 8108dd4:	f7fd f8ea 	bl	8105fac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108dd8:	69fb      	ldr	r3, [r7, #28]
 8108dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108ddc:	e02c      	b.n	8108e38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108dde:	4b09      	ldr	r3, [pc, #36]	@ (8108e04 <UART_SetConfig+0x69c>)
 8108de0:	681b      	ldr	r3, [r3, #0]
 8108de2:	f003 0320 	and.w	r3, r3, #32
 8108de6:	2b00      	cmp	r3, #0
 8108de8:	d016      	beq.n	8108e18 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108dea:	4b06      	ldr	r3, [pc, #24]	@ (8108e04 <UART_SetConfig+0x69c>)
 8108dec:	681b      	ldr	r3, [r3, #0]
 8108dee:	08db      	lsrs	r3, r3, #3
 8108df0:	f003 0303 	and.w	r3, r3, #3
 8108df4:	4a07      	ldr	r2, [pc, #28]	@ (8108e14 <UART_SetConfig+0x6ac>)
 8108df6:	fa22 f303 	lsr.w	r3, r2, r3
 8108dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108dfc:	e01c      	b.n	8108e38 <UART_SetConfig+0x6d0>
 8108dfe:	bf00      	nop
 8108e00:	40011400 	.word	0x40011400
 8108e04:	58024400 	.word	0x58024400
 8108e08:	40007800 	.word	0x40007800
 8108e0c:	40007c00 	.word	0x40007c00
 8108e10:	58000c00 	.word	0x58000c00
 8108e14:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108e18:	4b9d      	ldr	r3, [pc, #628]	@ (8109090 <UART_SetConfig+0x928>)
 8108e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e1c:	e00c      	b.n	8108e38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108e1e:	4b9d      	ldr	r3, [pc, #628]	@ (8109094 <UART_SetConfig+0x92c>)
 8108e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e22:	e009      	b.n	8108e38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108e24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108e2a:	e005      	b.n	8108e38 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108e2c:	2300      	movs	r3, #0
 8108e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108e30:	2301      	movs	r3, #1
 8108e32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108e36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e3a:	2b00      	cmp	r3, #0
 8108e3c:	f000 81de 	beq.w	81091fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108e40:	697b      	ldr	r3, [r7, #20]
 8108e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e44:	4a94      	ldr	r2, [pc, #592]	@ (8109098 <UART_SetConfig+0x930>)
 8108e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e4a:	461a      	mov	r2, r3
 8108e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8108e52:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108e54:	697b      	ldr	r3, [r7, #20]
 8108e56:	685a      	ldr	r2, [r3, #4]
 8108e58:	4613      	mov	r3, r2
 8108e5a:	005b      	lsls	r3, r3, #1
 8108e5c:	4413      	add	r3, r2
 8108e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108e60:	429a      	cmp	r2, r3
 8108e62:	d305      	bcc.n	8108e70 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108e64:	697b      	ldr	r3, [r7, #20]
 8108e66:	685b      	ldr	r3, [r3, #4]
 8108e68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108e6c:	429a      	cmp	r2, r3
 8108e6e:	d903      	bls.n	8108e78 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8108e70:	2301      	movs	r3, #1
 8108e72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108e76:	e1c1      	b.n	81091fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108e7a:	2200      	movs	r2, #0
 8108e7c:	60bb      	str	r3, [r7, #8]
 8108e7e:	60fa      	str	r2, [r7, #12]
 8108e80:	697b      	ldr	r3, [r7, #20]
 8108e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108e84:	4a84      	ldr	r2, [pc, #528]	@ (8109098 <UART_SetConfig+0x930>)
 8108e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108e8a:	b29b      	uxth	r3, r3
 8108e8c:	2200      	movs	r2, #0
 8108e8e:	603b      	str	r3, [r7, #0]
 8108e90:	607a      	str	r2, [r7, #4]
 8108e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108e96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108e9a:	f7f7 ff7d 	bl	8100d98 <__aeabi_uldivmod>
 8108e9e:	4602      	mov	r2, r0
 8108ea0:	460b      	mov	r3, r1
 8108ea2:	4610      	mov	r0, r2
 8108ea4:	4619      	mov	r1, r3
 8108ea6:	f04f 0200 	mov.w	r2, #0
 8108eaa:	f04f 0300 	mov.w	r3, #0
 8108eae:	020b      	lsls	r3, r1, #8
 8108eb0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108eb4:	0202      	lsls	r2, r0, #8
 8108eb6:	6979      	ldr	r1, [r7, #20]
 8108eb8:	6849      	ldr	r1, [r1, #4]
 8108eba:	0849      	lsrs	r1, r1, #1
 8108ebc:	2000      	movs	r0, #0
 8108ebe:	460c      	mov	r4, r1
 8108ec0:	4605      	mov	r5, r0
 8108ec2:	eb12 0804 	adds.w	r8, r2, r4
 8108ec6:	eb43 0905 	adc.w	r9, r3, r5
 8108eca:	697b      	ldr	r3, [r7, #20]
 8108ecc:	685b      	ldr	r3, [r3, #4]
 8108ece:	2200      	movs	r2, #0
 8108ed0:	469a      	mov	sl, r3
 8108ed2:	4693      	mov	fp, r2
 8108ed4:	4652      	mov	r2, sl
 8108ed6:	465b      	mov	r3, fp
 8108ed8:	4640      	mov	r0, r8
 8108eda:	4649      	mov	r1, r9
 8108edc:	f7f7 ff5c 	bl	8100d98 <__aeabi_uldivmod>
 8108ee0:	4602      	mov	r2, r0
 8108ee2:	460b      	mov	r3, r1
 8108ee4:	4613      	mov	r3, r2
 8108ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8108eee:	d308      	bcc.n	8108f02 <UART_SetConfig+0x79a>
 8108ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108ef6:	d204      	bcs.n	8108f02 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8108ef8:	697b      	ldr	r3, [r7, #20]
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108efe:	60da      	str	r2, [r3, #12]
 8108f00:	e17c      	b.n	81091fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8108f02:	2301      	movs	r3, #1
 8108f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8108f08:	e178      	b.n	81091fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108f0a:	697b      	ldr	r3, [r7, #20]
 8108f0c:	69db      	ldr	r3, [r3, #28]
 8108f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8108f12:	f040 80c5 	bne.w	81090a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8108f16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108f1a:	2b20      	cmp	r3, #32
 8108f1c:	dc48      	bgt.n	8108fb0 <UART_SetConfig+0x848>
 8108f1e:	2b00      	cmp	r3, #0
 8108f20:	db7b      	blt.n	810901a <UART_SetConfig+0x8b2>
 8108f22:	2b20      	cmp	r3, #32
 8108f24:	d879      	bhi.n	810901a <UART_SetConfig+0x8b2>
 8108f26:	a201      	add	r2, pc, #4	@ (adr r2, 8108f2c <UART_SetConfig+0x7c4>)
 8108f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f2c:	08108fb7 	.word	0x08108fb7
 8108f30:	08108fbf 	.word	0x08108fbf
 8108f34:	0810901b 	.word	0x0810901b
 8108f38:	0810901b 	.word	0x0810901b
 8108f3c:	08108fc7 	.word	0x08108fc7
 8108f40:	0810901b 	.word	0x0810901b
 8108f44:	0810901b 	.word	0x0810901b
 8108f48:	0810901b 	.word	0x0810901b
 8108f4c:	08108fd7 	.word	0x08108fd7
 8108f50:	0810901b 	.word	0x0810901b
 8108f54:	0810901b 	.word	0x0810901b
 8108f58:	0810901b 	.word	0x0810901b
 8108f5c:	0810901b 	.word	0x0810901b
 8108f60:	0810901b 	.word	0x0810901b
 8108f64:	0810901b 	.word	0x0810901b
 8108f68:	0810901b 	.word	0x0810901b
 8108f6c:	08108fe7 	.word	0x08108fe7
 8108f70:	0810901b 	.word	0x0810901b
 8108f74:	0810901b 	.word	0x0810901b
 8108f78:	0810901b 	.word	0x0810901b
 8108f7c:	0810901b 	.word	0x0810901b
 8108f80:	0810901b 	.word	0x0810901b
 8108f84:	0810901b 	.word	0x0810901b
 8108f88:	0810901b 	.word	0x0810901b
 8108f8c:	0810901b 	.word	0x0810901b
 8108f90:	0810901b 	.word	0x0810901b
 8108f94:	0810901b 	.word	0x0810901b
 8108f98:	0810901b 	.word	0x0810901b
 8108f9c:	0810901b 	.word	0x0810901b
 8108fa0:	0810901b 	.word	0x0810901b
 8108fa4:	0810901b 	.word	0x0810901b
 8108fa8:	0810901b 	.word	0x0810901b
 8108fac:	0810900d 	.word	0x0810900d
 8108fb0:	2b40      	cmp	r3, #64	@ 0x40
 8108fb2:	d02e      	beq.n	8109012 <UART_SetConfig+0x8aa>
 8108fb4:	e031      	b.n	810901a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108fb6:	f7fb fc59 	bl	810486c <HAL_RCC_GetPCLK1Freq>
 8108fba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108fbc:	e033      	b.n	8109026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108fbe:	f7fb fc6b 	bl	8104898 <HAL_RCC_GetPCLK2Freq>
 8108fc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108fc4:	e02f      	b.n	8109026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108fca:	4618      	mov	r0, r3
 8108fcc:	f7fc fe9a 	bl	8105d04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fd4:	e027      	b.n	8109026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108fd6:	f107 0318 	add.w	r3, r7, #24
 8108fda:	4618      	mov	r0, r3
 8108fdc:	f7fc ffe6 	bl	8105fac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108fe0:	69fb      	ldr	r3, [r7, #28]
 8108fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fe4:	e01f      	b.n	8109026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108fe6:	4b2d      	ldr	r3, [pc, #180]	@ (810909c <UART_SetConfig+0x934>)
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	f003 0320 	and.w	r3, r3, #32
 8108fee:	2b00      	cmp	r3, #0
 8108ff0:	d009      	beq.n	8109006 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108ff2:	4b2a      	ldr	r3, [pc, #168]	@ (810909c <UART_SetConfig+0x934>)
 8108ff4:	681b      	ldr	r3, [r3, #0]
 8108ff6:	08db      	lsrs	r3, r3, #3
 8108ff8:	f003 0303 	and.w	r3, r3, #3
 8108ffc:	4a24      	ldr	r2, [pc, #144]	@ (8109090 <UART_SetConfig+0x928>)
 8108ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8109002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109004:	e00f      	b.n	8109026 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109006:	4b22      	ldr	r3, [pc, #136]	@ (8109090 <UART_SetConfig+0x928>)
 8109008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810900a:	e00c      	b.n	8109026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810900c:	4b21      	ldr	r3, [pc, #132]	@ (8109094 <UART_SetConfig+0x92c>)
 810900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109010:	e009      	b.n	8109026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109018:	e005      	b.n	8109026 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810901a:	2300      	movs	r3, #0
 810901c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810901e:	2301      	movs	r3, #1
 8109020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109024:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109028:	2b00      	cmp	r3, #0
 810902a:	f000 80e7 	beq.w	81091fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810902e:	697b      	ldr	r3, [r7, #20]
 8109030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109032:	4a19      	ldr	r2, [pc, #100]	@ (8109098 <UART_SetConfig+0x930>)
 8109034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109038:	461a      	mov	r2, r3
 810903a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810903c:	fbb3 f3f2 	udiv	r3, r3, r2
 8109040:	005a      	lsls	r2, r3, #1
 8109042:	697b      	ldr	r3, [r7, #20]
 8109044:	685b      	ldr	r3, [r3, #4]
 8109046:	085b      	lsrs	r3, r3, #1
 8109048:	441a      	add	r2, r3
 810904a:	697b      	ldr	r3, [r7, #20]
 810904c:	685b      	ldr	r3, [r3, #4]
 810904e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109052:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109056:	2b0f      	cmp	r3, #15
 8109058:	d916      	bls.n	8109088 <UART_SetConfig+0x920>
 810905a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810905c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109060:	d212      	bcs.n	8109088 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109064:	b29b      	uxth	r3, r3
 8109066:	f023 030f 	bic.w	r3, r3, #15
 810906a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810906c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810906e:	085b      	lsrs	r3, r3, #1
 8109070:	b29b      	uxth	r3, r3
 8109072:	f003 0307 	and.w	r3, r3, #7
 8109076:	b29a      	uxth	r2, r3
 8109078:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810907a:	4313      	orrs	r3, r2
 810907c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810907e:	697b      	ldr	r3, [r7, #20]
 8109080:	681b      	ldr	r3, [r3, #0]
 8109082:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8109084:	60da      	str	r2, [r3, #12]
 8109086:	e0b9      	b.n	81091fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109088:	2301      	movs	r3, #1
 810908a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810908e:	e0b5      	b.n	81091fc <UART_SetConfig+0xa94>
 8109090:	03d09000 	.word	0x03d09000
 8109094:	003d0900 	.word	0x003d0900
 8109098:	0810e81c 	.word	0x0810e81c
 810909c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81090a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81090a4:	2b20      	cmp	r3, #32
 81090a6:	dc49      	bgt.n	810913c <UART_SetConfig+0x9d4>
 81090a8:	2b00      	cmp	r3, #0
 81090aa:	db7c      	blt.n	81091a6 <UART_SetConfig+0xa3e>
 81090ac:	2b20      	cmp	r3, #32
 81090ae:	d87a      	bhi.n	81091a6 <UART_SetConfig+0xa3e>
 81090b0:	a201      	add	r2, pc, #4	@ (adr r2, 81090b8 <UART_SetConfig+0x950>)
 81090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090b6:	bf00      	nop
 81090b8:	08109143 	.word	0x08109143
 81090bc:	0810914b 	.word	0x0810914b
 81090c0:	081091a7 	.word	0x081091a7
 81090c4:	081091a7 	.word	0x081091a7
 81090c8:	08109153 	.word	0x08109153
 81090cc:	081091a7 	.word	0x081091a7
 81090d0:	081091a7 	.word	0x081091a7
 81090d4:	081091a7 	.word	0x081091a7
 81090d8:	08109163 	.word	0x08109163
 81090dc:	081091a7 	.word	0x081091a7
 81090e0:	081091a7 	.word	0x081091a7
 81090e4:	081091a7 	.word	0x081091a7
 81090e8:	081091a7 	.word	0x081091a7
 81090ec:	081091a7 	.word	0x081091a7
 81090f0:	081091a7 	.word	0x081091a7
 81090f4:	081091a7 	.word	0x081091a7
 81090f8:	08109173 	.word	0x08109173
 81090fc:	081091a7 	.word	0x081091a7
 8109100:	081091a7 	.word	0x081091a7
 8109104:	081091a7 	.word	0x081091a7
 8109108:	081091a7 	.word	0x081091a7
 810910c:	081091a7 	.word	0x081091a7
 8109110:	081091a7 	.word	0x081091a7
 8109114:	081091a7 	.word	0x081091a7
 8109118:	081091a7 	.word	0x081091a7
 810911c:	081091a7 	.word	0x081091a7
 8109120:	081091a7 	.word	0x081091a7
 8109124:	081091a7 	.word	0x081091a7
 8109128:	081091a7 	.word	0x081091a7
 810912c:	081091a7 	.word	0x081091a7
 8109130:	081091a7 	.word	0x081091a7
 8109134:	081091a7 	.word	0x081091a7
 8109138:	08109199 	.word	0x08109199
 810913c:	2b40      	cmp	r3, #64	@ 0x40
 810913e:	d02e      	beq.n	810919e <UART_SetConfig+0xa36>
 8109140:	e031      	b.n	81091a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109142:	f7fb fb93 	bl	810486c <HAL_RCC_GetPCLK1Freq>
 8109146:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109148:	e033      	b.n	81091b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810914a:	f7fb fba5 	bl	8104898 <HAL_RCC_GetPCLK2Freq>
 810914e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109150:	e02f      	b.n	81091b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109156:	4618      	mov	r0, r3
 8109158:	f7fc fdd4 	bl	8105d04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109160:	e027      	b.n	81091b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109162:	f107 0318 	add.w	r3, r7, #24
 8109166:	4618      	mov	r0, r3
 8109168:	f7fc ff20 	bl	8105fac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810916c:	69fb      	ldr	r3, [r7, #28]
 810916e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109170:	e01f      	b.n	81091b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109172:	4b2d      	ldr	r3, [pc, #180]	@ (8109228 <UART_SetConfig+0xac0>)
 8109174:	681b      	ldr	r3, [r3, #0]
 8109176:	f003 0320 	and.w	r3, r3, #32
 810917a:	2b00      	cmp	r3, #0
 810917c:	d009      	beq.n	8109192 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810917e:	4b2a      	ldr	r3, [pc, #168]	@ (8109228 <UART_SetConfig+0xac0>)
 8109180:	681b      	ldr	r3, [r3, #0]
 8109182:	08db      	lsrs	r3, r3, #3
 8109184:	f003 0303 	and.w	r3, r3, #3
 8109188:	4a28      	ldr	r2, [pc, #160]	@ (810922c <UART_SetConfig+0xac4>)
 810918a:	fa22 f303 	lsr.w	r3, r2, r3
 810918e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109190:	e00f      	b.n	81091b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109192:	4b26      	ldr	r3, [pc, #152]	@ (810922c <UART_SetConfig+0xac4>)
 8109194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109196:	e00c      	b.n	81091b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109198:	4b25      	ldr	r3, [pc, #148]	@ (8109230 <UART_SetConfig+0xac8>)
 810919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810919c:	e009      	b.n	81091b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810919e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81091a4:	e005      	b.n	81091b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81091a6:	2300      	movs	r3, #0
 81091a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81091aa:	2301      	movs	r3, #1
 81091ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81091b0:	bf00      	nop
    }

    if (pclk != 0U)
 81091b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81091b4:	2b00      	cmp	r3, #0
 81091b6:	d021      	beq.n	81091fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81091b8:	697b      	ldr	r3, [r7, #20]
 81091ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81091bc:	4a1d      	ldr	r2, [pc, #116]	@ (8109234 <UART_SetConfig+0xacc>)
 81091be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81091c2:	461a      	mov	r2, r3
 81091c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81091c6:	fbb3 f2f2 	udiv	r2, r3, r2
 81091ca:	697b      	ldr	r3, [r7, #20]
 81091cc:	685b      	ldr	r3, [r3, #4]
 81091ce:	085b      	lsrs	r3, r3, #1
 81091d0:	441a      	add	r2, r3
 81091d2:	697b      	ldr	r3, [r7, #20]
 81091d4:	685b      	ldr	r3, [r3, #4]
 81091d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81091da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091de:	2b0f      	cmp	r3, #15
 81091e0:	d909      	bls.n	81091f6 <UART_SetConfig+0xa8e>
 81091e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81091e8:	d205      	bcs.n	81091f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81091ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091ec:	b29a      	uxth	r2, r3
 81091ee:	697b      	ldr	r3, [r7, #20]
 81091f0:	681b      	ldr	r3, [r3, #0]
 81091f2:	60da      	str	r2, [r3, #12]
 81091f4:	e002      	b.n	81091fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81091f6:	2301      	movs	r3, #1
 81091f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81091fc:	697b      	ldr	r3, [r7, #20]
 81091fe:	2201      	movs	r2, #1
 8109200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8109204:	697b      	ldr	r3, [r7, #20]
 8109206:	2201      	movs	r2, #1
 8109208:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810920c:	697b      	ldr	r3, [r7, #20]
 810920e:	2200      	movs	r2, #0
 8109210:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8109212:	697b      	ldr	r3, [r7, #20]
 8109214:	2200      	movs	r2, #0
 8109216:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8109218:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810921c:	4618      	mov	r0, r3
 810921e:	3748      	adds	r7, #72	@ 0x48
 8109220:	46bd      	mov	sp, r7
 8109222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109226:	bf00      	nop
 8109228:	58024400 	.word	0x58024400
 810922c:	03d09000 	.word	0x03d09000
 8109230:	003d0900 	.word	0x003d0900
 8109234:	0810e81c 	.word	0x0810e81c

08109238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109238:	b480      	push	{r7}
 810923a:	b083      	sub	sp, #12
 810923c:	af00      	add	r7, sp, #0
 810923e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109240:	687b      	ldr	r3, [r7, #4]
 8109242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109244:	f003 0308 	and.w	r3, r3, #8
 8109248:	2b00      	cmp	r3, #0
 810924a:	d00a      	beq.n	8109262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810924c:	687b      	ldr	r3, [r7, #4]
 810924e:	681b      	ldr	r3, [r3, #0]
 8109250:	685b      	ldr	r3, [r3, #4]
 8109252:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8109256:	687b      	ldr	r3, [r7, #4]
 8109258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810925a:	687b      	ldr	r3, [r7, #4]
 810925c:	681b      	ldr	r3, [r3, #0]
 810925e:	430a      	orrs	r2, r1
 8109260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109262:	687b      	ldr	r3, [r7, #4]
 8109264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109266:	f003 0301 	and.w	r3, r3, #1
 810926a:	2b00      	cmp	r3, #0
 810926c:	d00a      	beq.n	8109284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	681b      	ldr	r3, [r3, #0]
 8109272:	685b      	ldr	r3, [r3, #4]
 8109274:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8109278:	687b      	ldr	r3, [r7, #4]
 810927a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810927c:	687b      	ldr	r3, [r7, #4]
 810927e:	681b      	ldr	r3, [r3, #0]
 8109280:	430a      	orrs	r2, r1
 8109282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109288:	f003 0302 	and.w	r3, r3, #2
 810928c:	2b00      	cmp	r3, #0
 810928e:	d00a      	beq.n	81092a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	681b      	ldr	r3, [r3, #0]
 8109294:	685b      	ldr	r3, [r3, #4]
 8109296:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810929a:	687b      	ldr	r3, [r7, #4]
 810929c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	681b      	ldr	r3, [r3, #0]
 81092a2:	430a      	orrs	r2, r1
 81092a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092aa:	f003 0304 	and.w	r3, r3, #4
 81092ae:	2b00      	cmp	r3, #0
 81092b0:	d00a      	beq.n	81092c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	681b      	ldr	r3, [r3, #0]
 81092b6:	685b      	ldr	r3, [r3, #4]
 81092b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	681b      	ldr	r3, [r3, #0]
 81092c4:	430a      	orrs	r2, r1
 81092c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81092c8:	687b      	ldr	r3, [r7, #4]
 81092ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092cc:	f003 0310 	and.w	r3, r3, #16
 81092d0:	2b00      	cmp	r3, #0
 81092d2:	d00a      	beq.n	81092ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81092d4:	687b      	ldr	r3, [r7, #4]
 81092d6:	681b      	ldr	r3, [r3, #0]
 81092d8:	689b      	ldr	r3, [r3, #8]
 81092da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 81092de:	687b      	ldr	r3, [r7, #4]
 81092e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81092e2:	687b      	ldr	r3, [r7, #4]
 81092e4:	681b      	ldr	r3, [r3, #0]
 81092e6:	430a      	orrs	r2, r1
 81092e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092ee:	f003 0320 	and.w	r3, r3, #32
 81092f2:	2b00      	cmp	r3, #0
 81092f4:	d00a      	beq.n	810930c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81092f6:	687b      	ldr	r3, [r7, #4]
 81092f8:	681b      	ldr	r3, [r3, #0]
 81092fa:	689b      	ldr	r3, [r3, #8]
 81092fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	681b      	ldr	r3, [r3, #0]
 8109308:	430a      	orrs	r2, r1
 810930a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109314:	2b00      	cmp	r3, #0
 8109316:	d01a      	beq.n	810934e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109318:	687b      	ldr	r3, [r7, #4]
 810931a:	681b      	ldr	r3, [r3, #0]
 810931c:	685b      	ldr	r3, [r3, #4]
 810931e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8109322:	687b      	ldr	r3, [r7, #4]
 8109324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	681b      	ldr	r3, [r3, #0]
 810932a:	430a      	orrs	r2, r1
 810932c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810932e:	687b      	ldr	r3, [r7, #4]
 8109330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109332:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8109336:	d10a      	bne.n	810934e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109338:	687b      	ldr	r3, [r7, #4]
 810933a:	681b      	ldr	r3, [r3, #0]
 810933c:	685b      	ldr	r3, [r3, #4]
 810933e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8109346:	687b      	ldr	r3, [r7, #4]
 8109348:	681b      	ldr	r3, [r3, #0]
 810934a:	430a      	orrs	r2, r1
 810934c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8109356:	2b00      	cmp	r3, #0
 8109358:	d00a      	beq.n	8109370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	681b      	ldr	r3, [r3, #0]
 810935e:	685b      	ldr	r3, [r3, #4]
 8109360:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8109364:	687b      	ldr	r3, [r7, #4]
 8109366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	681b      	ldr	r3, [r3, #0]
 810936c:	430a      	orrs	r2, r1
 810936e:	605a      	str	r2, [r3, #4]
  }
}
 8109370:	bf00      	nop
 8109372:	370c      	adds	r7, #12
 8109374:	46bd      	mov	sp, r7
 8109376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810937a:	4770      	bx	lr

0810937c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810937c:	b580      	push	{r7, lr}
 810937e:	b098      	sub	sp, #96	@ 0x60
 8109380:	af02      	add	r7, sp, #8
 8109382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109384:	687b      	ldr	r3, [r7, #4]
 8109386:	2200      	movs	r2, #0
 8109388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810938c:	f7f9 ff22 	bl	81031d4 <HAL_GetTick>
 8109390:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	681b      	ldr	r3, [r3, #0]
 8109396:	681b      	ldr	r3, [r3, #0]
 8109398:	f003 0308 	and.w	r3, r3, #8
 810939c:	2b08      	cmp	r3, #8
 810939e:	d12f      	bne.n	8109400 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81093a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81093a4:	9300      	str	r3, [sp, #0]
 81093a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81093a8:	2200      	movs	r2, #0
 81093aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 81093ae:	6878      	ldr	r0, [r7, #4]
 81093b0:	f000 f88e 	bl	81094d0 <UART_WaitOnFlagUntilTimeout>
 81093b4:	4603      	mov	r3, r0
 81093b6:	2b00      	cmp	r3, #0
 81093b8:	d022      	beq.n	8109400 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	681b      	ldr	r3, [r3, #0]
 81093be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81093c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81093c2:	e853 3f00 	ldrex	r3, [r3]
 81093c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 81093c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81093ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81093ce:	653b      	str	r3, [r7, #80]	@ 0x50
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	681b      	ldr	r3, [r3, #0]
 81093d4:	461a      	mov	r2, r3
 81093d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81093d8:	647b      	str	r3, [r7, #68]	@ 0x44
 81093da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81093dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 81093de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81093e0:	e841 2300 	strex	r3, r2, [r1]
 81093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 81093e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81093e8:	2b00      	cmp	r3, #0
 81093ea:	d1e6      	bne.n	81093ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	2220      	movs	r2, #32
 81093f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	2200      	movs	r2, #0
 81093f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81093fc:	2303      	movs	r3, #3
 81093fe:	e063      	b.n	81094c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109400:	687b      	ldr	r3, [r7, #4]
 8109402:	681b      	ldr	r3, [r3, #0]
 8109404:	681b      	ldr	r3, [r3, #0]
 8109406:	f003 0304 	and.w	r3, r3, #4
 810940a:	2b04      	cmp	r3, #4
 810940c:	d149      	bne.n	81094a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810940e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8109412:	9300      	str	r3, [sp, #0]
 8109414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109416:	2200      	movs	r2, #0
 8109418:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810941c:	6878      	ldr	r0, [r7, #4]
 810941e:	f000 f857 	bl	81094d0 <UART_WaitOnFlagUntilTimeout>
 8109422:	4603      	mov	r3, r0
 8109424:	2b00      	cmp	r3, #0
 8109426:	d03c      	beq.n	81094a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	681b      	ldr	r3, [r3, #0]
 810942c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810942e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109430:	e853 3f00 	ldrex	r3, [r3]
 8109434:	623b      	str	r3, [r7, #32]
   return(result);
 8109436:	6a3b      	ldr	r3, [r7, #32]
 8109438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810943c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810943e:	687b      	ldr	r3, [r7, #4]
 8109440:	681b      	ldr	r3, [r3, #0]
 8109442:	461a      	mov	r2, r3
 8109444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109446:	633b      	str	r3, [r7, #48]	@ 0x30
 8109448:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810944a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810944c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810944e:	e841 2300 	strex	r3, r2, [r1]
 8109452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8109454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109456:	2b00      	cmp	r3, #0
 8109458:	d1e6      	bne.n	8109428 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	681b      	ldr	r3, [r3, #0]
 810945e:	3308      	adds	r3, #8
 8109460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109462:	693b      	ldr	r3, [r7, #16]
 8109464:	e853 3f00 	ldrex	r3, [r3]
 8109468:	60fb      	str	r3, [r7, #12]
   return(result);
 810946a:	68fb      	ldr	r3, [r7, #12]
 810946c:	f023 0301 	bic.w	r3, r3, #1
 8109470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109472:	687b      	ldr	r3, [r7, #4]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	3308      	adds	r3, #8
 8109478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810947a:	61fa      	str	r2, [r7, #28]
 810947c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810947e:	69b9      	ldr	r1, [r7, #24]
 8109480:	69fa      	ldr	r2, [r7, #28]
 8109482:	e841 2300 	strex	r3, r2, [r1]
 8109486:	617b      	str	r3, [r7, #20]
   return(result);
 8109488:	697b      	ldr	r3, [r7, #20]
 810948a:	2b00      	cmp	r3, #0
 810948c:	d1e5      	bne.n	810945a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810948e:	687b      	ldr	r3, [r7, #4]
 8109490:	2220      	movs	r2, #32
 8109492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8109496:	687b      	ldr	r3, [r7, #4]
 8109498:	2200      	movs	r2, #0
 810949a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810949e:	2303      	movs	r3, #3
 81094a0:	e012      	b.n	81094c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81094a2:	687b      	ldr	r3, [r7, #4]
 81094a4:	2220      	movs	r2, #32
 81094a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	2220      	movs	r2, #32
 81094ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81094b2:	687b      	ldr	r3, [r7, #4]
 81094b4:	2200      	movs	r2, #0
 81094b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81094b8:	687b      	ldr	r3, [r7, #4]
 81094ba:	2200      	movs	r2, #0
 81094bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	2200      	movs	r2, #0
 81094c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81094c6:	2300      	movs	r3, #0
}
 81094c8:	4618      	mov	r0, r3
 81094ca:	3758      	adds	r7, #88	@ 0x58
 81094cc:	46bd      	mov	sp, r7
 81094ce:	bd80      	pop	{r7, pc}

081094d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81094d0:	b580      	push	{r7, lr}
 81094d2:	b084      	sub	sp, #16
 81094d4:	af00      	add	r7, sp, #0
 81094d6:	60f8      	str	r0, [r7, #12]
 81094d8:	60b9      	str	r1, [r7, #8]
 81094da:	603b      	str	r3, [r7, #0]
 81094dc:	4613      	mov	r3, r2
 81094de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81094e0:	e04f      	b.n	8109582 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81094e2:	69bb      	ldr	r3, [r7, #24]
 81094e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81094e8:	d04b      	beq.n	8109582 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81094ea:	f7f9 fe73 	bl	81031d4 <HAL_GetTick>
 81094ee:	4602      	mov	r2, r0
 81094f0:	683b      	ldr	r3, [r7, #0]
 81094f2:	1ad3      	subs	r3, r2, r3
 81094f4:	69ba      	ldr	r2, [r7, #24]
 81094f6:	429a      	cmp	r2, r3
 81094f8:	d302      	bcc.n	8109500 <UART_WaitOnFlagUntilTimeout+0x30>
 81094fa:	69bb      	ldr	r3, [r7, #24]
 81094fc:	2b00      	cmp	r3, #0
 81094fe:	d101      	bne.n	8109504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109500:	2303      	movs	r3, #3
 8109502:	e04e      	b.n	81095a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8109504:	68fb      	ldr	r3, [r7, #12]
 8109506:	681b      	ldr	r3, [r3, #0]
 8109508:	681b      	ldr	r3, [r3, #0]
 810950a:	f003 0304 	and.w	r3, r3, #4
 810950e:	2b00      	cmp	r3, #0
 8109510:	d037      	beq.n	8109582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109512:	68bb      	ldr	r3, [r7, #8]
 8109514:	2b80      	cmp	r3, #128	@ 0x80
 8109516:	d034      	beq.n	8109582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109518:	68bb      	ldr	r3, [r7, #8]
 810951a:	2b40      	cmp	r3, #64	@ 0x40
 810951c:	d031      	beq.n	8109582 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810951e:	68fb      	ldr	r3, [r7, #12]
 8109520:	681b      	ldr	r3, [r3, #0]
 8109522:	69db      	ldr	r3, [r3, #28]
 8109524:	f003 0308 	and.w	r3, r3, #8
 8109528:	2b08      	cmp	r3, #8
 810952a:	d110      	bne.n	810954e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810952c:	68fb      	ldr	r3, [r7, #12]
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	2208      	movs	r2, #8
 8109532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109534:	68f8      	ldr	r0, [r7, #12]
 8109536:	f000 f838 	bl	81095aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810953a:	68fb      	ldr	r3, [r7, #12]
 810953c:	2208      	movs	r2, #8
 810953e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109542:	68fb      	ldr	r3, [r7, #12]
 8109544:	2200      	movs	r2, #0
 8109546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810954a:	2301      	movs	r3, #1
 810954c:	e029      	b.n	81095a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810954e:	68fb      	ldr	r3, [r7, #12]
 8109550:	681b      	ldr	r3, [r3, #0]
 8109552:	69db      	ldr	r3, [r3, #28]
 8109554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810955c:	d111      	bne.n	8109582 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810955e:	68fb      	ldr	r3, [r7, #12]
 8109560:	681b      	ldr	r3, [r3, #0]
 8109562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8109566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109568:	68f8      	ldr	r0, [r7, #12]
 810956a:	f000 f81e 	bl	81095aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810956e:	68fb      	ldr	r3, [r7, #12]
 8109570:	2220      	movs	r2, #32
 8109572:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109576:	68fb      	ldr	r3, [r7, #12]
 8109578:	2200      	movs	r2, #0
 810957a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810957e:	2303      	movs	r3, #3
 8109580:	e00f      	b.n	81095a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109582:	68fb      	ldr	r3, [r7, #12]
 8109584:	681b      	ldr	r3, [r3, #0]
 8109586:	69da      	ldr	r2, [r3, #28]
 8109588:	68bb      	ldr	r3, [r7, #8]
 810958a:	4013      	ands	r3, r2
 810958c:	68ba      	ldr	r2, [r7, #8]
 810958e:	429a      	cmp	r2, r3
 8109590:	bf0c      	ite	eq
 8109592:	2301      	moveq	r3, #1
 8109594:	2300      	movne	r3, #0
 8109596:	b2db      	uxtb	r3, r3
 8109598:	461a      	mov	r2, r3
 810959a:	79fb      	ldrb	r3, [r7, #7]
 810959c:	429a      	cmp	r2, r3
 810959e:	d0a0      	beq.n	81094e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81095a0:	2300      	movs	r3, #0
}
 81095a2:	4618      	mov	r0, r3
 81095a4:	3710      	adds	r7, #16
 81095a6:	46bd      	mov	sp, r7
 81095a8:	bd80      	pop	{r7, pc}

081095aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81095aa:	b480      	push	{r7}
 81095ac:	b095      	sub	sp, #84	@ 0x54
 81095ae:	af00      	add	r7, sp, #0
 81095b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81095b2:	687b      	ldr	r3, [r7, #4]
 81095b4:	681b      	ldr	r3, [r3, #0]
 81095b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81095ba:	e853 3f00 	ldrex	r3, [r3]
 81095be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81095c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81095c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81095c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81095c8:	687b      	ldr	r3, [r7, #4]
 81095ca:	681b      	ldr	r3, [r3, #0]
 81095cc:	461a      	mov	r2, r3
 81095ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81095d0:	643b      	str	r3, [r7, #64]	@ 0x40
 81095d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81095d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81095d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81095d8:	e841 2300 	strex	r3, r2, [r1]
 81095dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81095de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81095e0:	2b00      	cmp	r3, #0
 81095e2:	d1e6      	bne.n	81095b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81095e4:	687b      	ldr	r3, [r7, #4]
 81095e6:	681b      	ldr	r3, [r3, #0]
 81095e8:	3308      	adds	r3, #8
 81095ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095ec:	6a3b      	ldr	r3, [r7, #32]
 81095ee:	e853 3f00 	ldrex	r3, [r3]
 81095f2:	61fb      	str	r3, [r7, #28]
   return(result);
 81095f4:	69fb      	ldr	r3, [r7, #28]
 81095f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81095fa:	f023 0301 	bic.w	r3, r3, #1
 81095fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109600:	687b      	ldr	r3, [r7, #4]
 8109602:	681b      	ldr	r3, [r3, #0]
 8109604:	3308      	adds	r3, #8
 8109606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109608:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810960a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810960c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810960e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109610:	e841 2300 	strex	r3, r2, [r1]
 8109614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8109616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109618:	2b00      	cmp	r3, #0
 810961a:	d1e3      	bne.n	81095e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810961c:	687b      	ldr	r3, [r7, #4]
 810961e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109620:	2b01      	cmp	r3, #1
 8109622:	d118      	bne.n	8109656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109624:	687b      	ldr	r3, [r7, #4]
 8109626:	681b      	ldr	r3, [r3, #0]
 8109628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810962a:	68fb      	ldr	r3, [r7, #12]
 810962c:	e853 3f00 	ldrex	r3, [r3]
 8109630:	60bb      	str	r3, [r7, #8]
   return(result);
 8109632:	68bb      	ldr	r3, [r7, #8]
 8109634:	f023 0310 	bic.w	r3, r3, #16
 8109638:	647b      	str	r3, [r7, #68]	@ 0x44
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	681b      	ldr	r3, [r3, #0]
 810963e:	461a      	mov	r2, r3
 8109640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8109642:	61bb      	str	r3, [r7, #24]
 8109644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109646:	6979      	ldr	r1, [r7, #20]
 8109648:	69ba      	ldr	r2, [r7, #24]
 810964a:	e841 2300 	strex	r3, r2, [r1]
 810964e:	613b      	str	r3, [r7, #16]
   return(result);
 8109650:	693b      	ldr	r3, [r7, #16]
 8109652:	2b00      	cmp	r3, #0
 8109654:	d1e6      	bne.n	8109624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	2220      	movs	r2, #32
 810965a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	2200      	movs	r2, #0
 8109662:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109664:	687b      	ldr	r3, [r7, #4]
 8109666:	2200      	movs	r2, #0
 8109668:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810966a:	bf00      	nop
 810966c:	3754      	adds	r7, #84	@ 0x54
 810966e:	46bd      	mov	sp, r7
 8109670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109674:	4770      	bx	lr

08109676 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109676:	b480      	push	{r7}
 8109678:	b085      	sub	sp, #20
 810967a:	af00      	add	r7, sp, #0
 810967c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109684:	2b01      	cmp	r3, #1
 8109686:	d101      	bne.n	810968c <HAL_UARTEx_DisableFifoMode+0x16>
 8109688:	2302      	movs	r3, #2
 810968a:	e027      	b.n	81096dc <HAL_UARTEx_DisableFifoMode+0x66>
 810968c:	687b      	ldr	r3, [r7, #4]
 810968e:	2201      	movs	r2, #1
 8109690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109694:	687b      	ldr	r3, [r7, #4]
 8109696:	2224      	movs	r2, #36	@ 0x24
 8109698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	681b      	ldr	r3, [r3, #0]
 81096a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	681b      	ldr	r3, [r3, #0]
 81096a8:	681a      	ldr	r2, [r3, #0]
 81096aa:	687b      	ldr	r3, [r7, #4]
 81096ac:	681b      	ldr	r3, [r3, #0]
 81096ae:	f022 0201 	bic.w	r2, r2, #1
 81096b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81096b4:	68fb      	ldr	r3, [r7, #12]
 81096b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 81096ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	2200      	movs	r2, #0
 81096c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	681b      	ldr	r3, [r3, #0]
 81096c6:	68fa      	ldr	r2, [r7, #12]
 81096c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81096ca:	687b      	ldr	r3, [r7, #4]
 81096cc:	2220      	movs	r2, #32
 81096ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	2200      	movs	r2, #0
 81096d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81096da:	2300      	movs	r3, #0
}
 81096dc:	4618      	mov	r0, r3
 81096de:	3714      	adds	r7, #20
 81096e0:	46bd      	mov	sp, r7
 81096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096e6:	4770      	bx	lr

081096e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81096e8:	b580      	push	{r7, lr}
 81096ea:	b084      	sub	sp, #16
 81096ec:	af00      	add	r7, sp, #0
 81096ee:	6078      	str	r0, [r7, #4]
 81096f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81096f2:	687b      	ldr	r3, [r7, #4]
 81096f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81096f8:	2b01      	cmp	r3, #1
 81096fa:	d101      	bne.n	8109700 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81096fc:	2302      	movs	r3, #2
 81096fe:	e02d      	b.n	810975c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109700:	687b      	ldr	r3, [r7, #4]
 8109702:	2201      	movs	r2, #1
 8109704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	2224      	movs	r2, #36	@ 0x24
 810970c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109710:	687b      	ldr	r3, [r7, #4]
 8109712:	681b      	ldr	r3, [r3, #0]
 8109714:	681b      	ldr	r3, [r3, #0]
 8109716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	681b      	ldr	r3, [r3, #0]
 810971c:	681a      	ldr	r2, [r3, #0]
 810971e:	687b      	ldr	r3, [r7, #4]
 8109720:	681b      	ldr	r3, [r3, #0]
 8109722:	f022 0201 	bic.w	r2, r2, #1
 8109726:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109728:	687b      	ldr	r3, [r7, #4]
 810972a:	681b      	ldr	r3, [r3, #0]
 810972c:	689b      	ldr	r3, [r3, #8]
 810972e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	681b      	ldr	r3, [r3, #0]
 8109736:	683a      	ldr	r2, [r7, #0]
 8109738:	430a      	orrs	r2, r1
 810973a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810973c:	6878      	ldr	r0, [r7, #4]
 810973e:	f000 f84f 	bl	81097e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	681b      	ldr	r3, [r3, #0]
 8109746:	68fa      	ldr	r2, [r7, #12]
 8109748:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	2220      	movs	r2, #32
 810974e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109752:	687b      	ldr	r3, [r7, #4]
 8109754:	2200      	movs	r2, #0
 8109756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810975a:	2300      	movs	r3, #0
}
 810975c:	4618      	mov	r0, r3
 810975e:	3710      	adds	r7, #16
 8109760:	46bd      	mov	sp, r7
 8109762:	bd80      	pop	{r7, pc}

08109764 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109764:	b580      	push	{r7, lr}
 8109766:	b084      	sub	sp, #16
 8109768:	af00      	add	r7, sp, #0
 810976a:	6078      	str	r0, [r7, #4]
 810976c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109774:	2b01      	cmp	r3, #1
 8109776:	d101      	bne.n	810977c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109778:	2302      	movs	r3, #2
 810977a:	e02d      	b.n	81097d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	2201      	movs	r2, #1
 8109780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	2224      	movs	r2, #36	@ 0x24
 8109788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	681b      	ldr	r3, [r3, #0]
 8109790:	681b      	ldr	r3, [r3, #0]
 8109792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109794:	687b      	ldr	r3, [r7, #4]
 8109796:	681b      	ldr	r3, [r3, #0]
 8109798:	681a      	ldr	r2, [r3, #0]
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	681b      	ldr	r3, [r3, #0]
 810979e:	f022 0201 	bic.w	r2, r2, #1
 81097a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81097a4:	687b      	ldr	r3, [r7, #4]
 81097a6:	681b      	ldr	r3, [r3, #0]
 81097a8:	689b      	ldr	r3, [r3, #8]
 81097aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 81097ae:	687b      	ldr	r3, [r7, #4]
 81097b0:	681b      	ldr	r3, [r3, #0]
 81097b2:	683a      	ldr	r2, [r7, #0]
 81097b4:	430a      	orrs	r2, r1
 81097b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81097b8:	6878      	ldr	r0, [r7, #4]
 81097ba:	f000 f811 	bl	81097e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81097be:	687b      	ldr	r3, [r7, #4]
 81097c0:	681b      	ldr	r3, [r3, #0]
 81097c2:	68fa      	ldr	r2, [r7, #12]
 81097c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81097c6:	687b      	ldr	r3, [r7, #4]
 81097c8:	2220      	movs	r2, #32
 81097ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81097ce:	687b      	ldr	r3, [r7, #4]
 81097d0:	2200      	movs	r2, #0
 81097d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81097d6:	2300      	movs	r3, #0
}
 81097d8:	4618      	mov	r0, r3
 81097da:	3710      	adds	r7, #16
 81097dc:	46bd      	mov	sp, r7
 81097de:	bd80      	pop	{r7, pc}

081097e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81097e0:	b480      	push	{r7}
 81097e2:	b085      	sub	sp, #20
 81097e4:	af00      	add	r7, sp, #0
 81097e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81097e8:	687b      	ldr	r3, [r7, #4]
 81097ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81097ec:	2b00      	cmp	r3, #0
 81097ee:	d108      	bne.n	8109802 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	2201      	movs	r2, #1
 81097f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 81097f8:	687b      	ldr	r3, [r7, #4]
 81097fa:	2201      	movs	r2, #1
 81097fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109800:	e031      	b.n	8109866 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109802:	2310      	movs	r3, #16
 8109804:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109806:	2310      	movs	r3, #16
 8109808:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810980a:	687b      	ldr	r3, [r7, #4]
 810980c:	681b      	ldr	r3, [r3, #0]
 810980e:	689b      	ldr	r3, [r3, #8]
 8109810:	0e5b      	lsrs	r3, r3, #25
 8109812:	b2db      	uxtb	r3, r3
 8109814:	f003 0307 	and.w	r3, r3, #7
 8109818:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810981a:	687b      	ldr	r3, [r7, #4]
 810981c:	681b      	ldr	r3, [r3, #0]
 810981e:	689b      	ldr	r3, [r3, #8]
 8109820:	0f5b      	lsrs	r3, r3, #29
 8109822:	b2db      	uxtb	r3, r3
 8109824:	f003 0307 	and.w	r3, r3, #7
 8109828:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810982a:	7bbb      	ldrb	r3, [r7, #14]
 810982c:	7b3a      	ldrb	r2, [r7, #12]
 810982e:	4911      	ldr	r1, [pc, #68]	@ (8109874 <UARTEx_SetNbDataToProcess+0x94>)
 8109830:	5c8a      	ldrb	r2, [r1, r2]
 8109832:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109836:	7b3a      	ldrb	r2, [r7, #12]
 8109838:	490f      	ldr	r1, [pc, #60]	@ (8109878 <UARTEx_SetNbDataToProcess+0x98>)
 810983a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810983c:	fb93 f3f2 	sdiv	r3, r3, r2
 8109840:	b29a      	uxth	r2, r3
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109848:	7bfb      	ldrb	r3, [r7, #15]
 810984a:	7b7a      	ldrb	r2, [r7, #13]
 810984c:	4909      	ldr	r1, [pc, #36]	@ (8109874 <UARTEx_SetNbDataToProcess+0x94>)
 810984e:	5c8a      	ldrb	r2, [r1, r2]
 8109850:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109854:	7b7a      	ldrb	r2, [r7, #13]
 8109856:	4908      	ldr	r1, [pc, #32]	@ (8109878 <UARTEx_SetNbDataToProcess+0x98>)
 8109858:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810985a:	fb93 f3f2 	sdiv	r3, r3, r2
 810985e:	b29a      	uxth	r2, r3
 8109860:	687b      	ldr	r3, [r7, #4]
 8109862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8109866:	bf00      	nop
 8109868:	3714      	adds	r7, #20
 810986a:	46bd      	mov	sp, r7
 810986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109870:	4770      	bx	lr
 8109872:	bf00      	nop
 8109874:	0810e834 	.word	0x0810e834
 8109878:	0810e83c 	.word	0x0810e83c

0810987c <__cvt>:
 810987c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109880:	ec57 6b10 	vmov	r6, r7, d0
 8109884:	2f00      	cmp	r7, #0
 8109886:	460c      	mov	r4, r1
 8109888:	4619      	mov	r1, r3
 810988a:	463b      	mov	r3, r7
 810988c:	bfbb      	ittet	lt
 810988e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8109892:	461f      	movlt	r7, r3
 8109894:	2300      	movge	r3, #0
 8109896:	232d      	movlt	r3, #45	@ 0x2d
 8109898:	700b      	strb	r3, [r1, #0]
 810989a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810989c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 81098a0:	4691      	mov	r9, r2
 81098a2:	f023 0820 	bic.w	r8, r3, #32
 81098a6:	bfbc      	itt	lt
 81098a8:	4632      	movlt	r2, r6
 81098aa:	4616      	movlt	r6, r2
 81098ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81098b0:	d005      	beq.n	81098be <__cvt+0x42>
 81098b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 81098b6:	d100      	bne.n	81098ba <__cvt+0x3e>
 81098b8:	3401      	adds	r4, #1
 81098ba:	2102      	movs	r1, #2
 81098bc:	e000      	b.n	81098c0 <__cvt+0x44>
 81098be:	2103      	movs	r1, #3
 81098c0:	ab03      	add	r3, sp, #12
 81098c2:	9301      	str	r3, [sp, #4]
 81098c4:	ab02      	add	r3, sp, #8
 81098c6:	9300      	str	r3, [sp, #0]
 81098c8:	ec47 6b10 	vmov	d0, r6, r7
 81098cc:	4653      	mov	r3, sl
 81098ce:	4622      	mov	r2, r4
 81098d0:	f001 f986 	bl	810abe0 <_dtoa_r>
 81098d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 81098d8:	4605      	mov	r5, r0
 81098da:	d119      	bne.n	8109910 <__cvt+0x94>
 81098dc:	f019 0f01 	tst.w	r9, #1
 81098e0:	d00e      	beq.n	8109900 <__cvt+0x84>
 81098e2:	eb00 0904 	add.w	r9, r0, r4
 81098e6:	2200      	movs	r2, #0
 81098e8:	2300      	movs	r3, #0
 81098ea:	4630      	mov	r0, r6
 81098ec:	4639      	mov	r1, r7
 81098ee:	f7f7 f973 	bl	8100bd8 <__aeabi_dcmpeq>
 81098f2:	b108      	cbz	r0, 81098f8 <__cvt+0x7c>
 81098f4:	f8cd 900c 	str.w	r9, [sp, #12]
 81098f8:	2230      	movs	r2, #48	@ 0x30
 81098fa:	9b03      	ldr	r3, [sp, #12]
 81098fc:	454b      	cmp	r3, r9
 81098fe:	d31e      	bcc.n	810993e <__cvt+0xc2>
 8109900:	9b03      	ldr	r3, [sp, #12]
 8109902:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8109904:	1b5b      	subs	r3, r3, r5
 8109906:	4628      	mov	r0, r5
 8109908:	6013      	str	r3, [r2, #0]
 810990a:	b004      	add	sp, #16
 810990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109910:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8109914:	eb00 0904 	add.w	r9, r0, r4
 8109918:	d1e5      	bne.n	81098e6 <__cvt+0x6a>
 810991a:	7803      	ldrb	r3, [r0, #0]
 810991c:	2b30      	cmp	r3, #48	@ 0x30
 810991e:	d10a      	bne.n	8109936 <__cvt+0xba>
 8109920:	2200      	movs	r2, #0
 8109922:	2300      	movs	r3, #0
 8109924:	4630      	mov	r0, r6
 8109926:	4639      	mov	r1, r7
 8109928:	f7f7 f956 	bl	8100bd8 <__aeabi_dcmpeq>
 810992c:	b918      	cbnz	r0, 8109936 <__cvt+0xba>
 810992e:	f1c4 0401 	rsb	r4, r4, #1
 8109932:	f8ca 4000 	str.w	r4, [sl]
 8109936:	f8da 3000 	ldr.w	r3, [sl]
 810993a:	4499      	add	r9, r3
 810993c:	e7d3      	b.n	81098e6 <__cvt+0x6a>
 810993e:	1c59      	adds	r1, r3, #1
 8109940:	9103      	str	r1, [sp, #12]
 8109942:	701a      	strb	r2, [r3, #0]
 8109944:	e7d9      	b.n	81098fa <__cvt+0x7e>

08109946 <__exponent>:
 8109946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109948:	2900      	cmp	r1, #0
 810994a:	bfba      	itte	lt
 810994c:	4249      	neglt	r1, r1
 810994e:	232d      	movlt	r3, #45	@ 0x2d
 8109950:	232b      	movge	r3, #43	@ 0x2b
 8109952:	2909      	cmp	r1, #9
 8109954:	7002      	strb	r2, [r0, #0]
 8109956:	7043      	strb	r3, [r0, #1]
 8109958:	dd29      	ble.n	81099ae <__exponent+0x68>
 810995a:	f10d 0307 	add.w	r3, sp, #7
 810995e:	461d      	mov	r5, r3
 8109960:	270a      	movs	r7, #10
 8109962:	461a      	mov	r2, r3
 8109964:	fbb1 f6f7 	udiv	r6, r1, r7
 8109968:	fb07 1416 	mls	r4, r7, r6, r1
 810996c:	3430      	adds	r4, #48	@ 0x30
 810996e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8109972:	460c      	mov	r4, r1
 8109974:	2c63      	cmp	r4, #99	@ 0x63
 8109976:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 810997a:	4631      	mov	r1, r6
 810997c:	dcf1      	bgt.n	8109962 <__exponent+0x1c>
 810997e:	3130      	adds	r1, #48	@ 0x30
 8109980:	1e94      	subs	r4, r2, #2
 8109982:	f803 1c01 	strb.w	r1, [r3, #-1]
 8109986:	1c41      	adds	r1, r0, #1
 8109988:	4623      	mov	r3, r4
 810998a:	42ab      	cmp	r3, r5
 810998c:	d30a      	bcc.n	81099a4 <__exponent+0x5e>
 810998e:	f10d 0309 	add.w	r3, sp, #9
 8109992:	1a9b      	subs	r3, r3, r2
 8109994:	42ac      	cmp	r4, r5
 8109996:	bf88      	it	hi
 8109998:	2300      	movhi	r3, #0
 810999a:	3302      	adds	r3, #2
 810999c:	4403      	add	r3, r0
 810999e:	1a18      	subs	r0, r3, r0
 81099a0:	b003      	add	sp, #12
 81099a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81099a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 81099a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 81099ac:	e7ed      	b.n	810998a <__exponent+0x44>
 81099ae:	2330      	movs	r3, #48	@ 0x30
 81099b0:	3130      	adds	r1, #48	@ 0x30
 81099b2:	7083      	strb	r3, [r0, #2]
 81099b4:	70c1      	strb	r1, [r0, #3]
 81099b6:	1d03      	adds	r3, r0, #4
 81099b8:	e7f1      	b.n	810999e <__exponent+0x58>
	...

081099bc <_printf_float>:
 81099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81099c0:	b08d      	sub	sp, #52	@ 0x34
 81099c2:	460c      	mov	r4, r1
 81099c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81099c8:	4616      	mov	r6, r2
 81099ca:	461f      	mov	r7, r3
 81099cc:	4605      	mov	r5, r0
 81099ce:	f000 fff3 	bl	810a9b8 <_localeconv_r>
 81099d2:	6803      	ldr	r3, [r0, #0]
 81099d4:	9304      	str	r3, [sp, #16]
 81099d6:	4618      	mov	r0, r3
 81099d8:	f7f6 fcd2 	bl	8100380 <strlen>
 81099dc:	2300      	movs	r3, #0
 81099de:	930a      	str	r3, [sp, #40]	@ 0x28
 81099e0:	f8d8 3000 	ldr.w	r3, [r8]
 81099e4:	9005      	str	r0, [sp, #20]
 81099e6:	3307      	adds	r3, #7
 81099e8:	f023 0307 	bic.w	r3, r3, #7
 81099ec:	f103 0208 	add.w	r2, r3, #8
 81099f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 81099f4:	f8d4 b000 	ldr.w	fp, [r4]
 81099f8:	f8c8 2000 	str.w	r2, [r8]
 81099fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109a00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8109a04:	9307      	str	r3, [sp, #28]
 8109a06:	f8cd 8018 	str.w	r8, [sp, #24]
 8109a0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8109a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109a12:	4b9c      	ldr	r3, [pc, #624]	@ (8109c84 <_printf_float+0x2c8>)
 8109a14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109a18:	f7f7 f910 	bl	8100c3c <__aeabi_dcmpun>
 8109a1c:	bb70      	cbnz	r0, 8109a7c <_printf_float+0xc0>
 8109a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109a22:	4b98      	ldr	r3, [pc, #608]	@ (8109c84 <_printf_float+0x2c8>)
 8109a24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109a28:	f7f7 f8ea 	bl	8100c00 <__aeabi_dcmple>
 8109a2c:	bb30      	cbnz	r0, 8109a7c <_printf_float+0xc0>
 8109a2e:	2200      	movs	r2, #0
 8109a30:	2300      	movs	r3, #0
 8109a32:	4640      	mov	r0, r8
 8109a34:	4649      	mov	r1, r9
 8109a36:	f7f7 f8d9 	bl	8100bec <__aeabi_dcmplt>
 8109a3a:	b110      	cbz	r0, 8109a42 <_printf_float+0x86>
 8109a3c:	232d      	movs	r3, #45	@ 0x2d
 8109a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109a42:	4a91      	ldr	r2, [pc, #580]	@ (8109c88 <_printf_float+0x2cc>)
 8109a44:	4b91      	ldr	r3, [pc, #580]	@ (8109c8c <_printf_float+0x2d0>)
 8109a46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8109a4a:	bf94      	ite	ls
 8109a4c:	4690      	movls	r8, r2
 8109a4e:	4698      	movhi	r8, r3
 8109a50:	2303      	movs	r3, #3
 8109a52:	6123      	str	r3, [r4, #16]
 8109a54:	f02b 0304 	bic.w	r3, fp, #4
 8109a58:	6023      	str	r3, [r4, #0]
 8109a5a:	f04f 0900 	mov.w	r9, #0
 8109a5e:	9700      	str	r7, [sp, #0]
 8109a60:	4633      	mov	r3, r6
 8109a62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8109a64:	4621      	mov	r1, r4
 8109a66:	4628      	mov	r0, r5
 8109a68:	f000 f9d2 	bl	8109e10 <_printf_common>
 8109a6c:	3001      	adds	r0, #1
 8109a6e:	f040 808d 	bne.w	8109b8c <_printf_float+0x1d0>
 8109a72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109a76:	b00d      	add	sp, #52	@ 0x34
 8109a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109a7c:	4642      	mov	r2, r8
 8109a7e:	464b      	mov	r3, r9
 8109a80:	4640      	mov	r0, r8
 8109a82:	4649      	mov	r1, r9
 8109a84:	f7f7 f8da 	bl	8100c3c <__aeabi_dcmpun>
 8109a88:	b140      	cbz	r0, 8109a9c <_printf_float+0xe0>
 8109a8a:	464b      	mov	r3, r9
 8109a8c:	2b00      	cmp	r3, #0
 8109a8e:	bfbc      	itt	lt
 8109a90:	232d      	movlt	r3, #45	@ 0x2d
 8109a92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8109a96:	4a7e      	ldr	r2, [pc, #504]	@ (8109c90 <_printf_float+0x2d4>)
 8109a98:	4b7e      	ldr	r3, [pc, #504]	@ (8109c94 <_printf_float+0x2d8>)
 8109a9a:	e7d4      	b.n	8109a46 <_printf_float+0x8a>
 8109a9c:	6863      	ldr	r3, [r4, #4]
 8109a9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8109aa2:	9206      	str	r2, [sp, #24]
 8109aa4:	1c5a      	adds	r2, r3, #1
 8109aa6:	d13b      	bne.n	8109b20 <_printf_float+0x164>
 8109aa8:	2306      	movs	r3, #6
 8109aaa:	6063      	str	r3, [r4, #4]
 8109aac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8109ab0:	2300      	movs	r3, #0
 8109ab2:	6022      	str	r2, [r4, #0]
 8109ab4:	9303      	str	r3, [sp, #12]
 8109ab6:	ab0a      	add	r3, sp, #40	@ 0x28
 8109ab8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8109abc:	ab09      	add	r3, sp, #36	@ 0x24
 8109abe:	9300      	str	r3, [sp, #0]
 8109ac0:	6861      	ldr	r1, [r4, #4]
 8109ac2:	ec49 8b10 	vmov	d0, r8, r9
 8109ac6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8109aca:	4628      	mov	r0, r5
 8109acc:	f7ff fed6 	bl	810987c <__cvt>
 8109ad0:	9b06      	ldr	r3, [sp, #24]
 8109ad2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109ad4:	2b47      	cmp	r3, #71	@ 0x47
 8109ad6:	4680      	mov	r8, r0
 8109ad8:	d129      	bne.n	8109b2e <_printf_float+0x172>
 8109ada:	1cc8      	adds	r0, r1, #3
 8109adc:	db02      	blt.n	8109ae4 <_printf_float+0x128>
 8109ade:	6863      	ldr	r3, [r4, #4]
 8109ae0:	4299      	cmp	r1, r3
 8109ae2:	dd41      	ble.n	8109b68 <_printf_float+0x1ac>
 8109ae4:	f1aa 0a02 	sub.w	sl, sl, #2
 8109ae8:	fa5f fa8a 	uxtb.w	sl, sl
 8109aec:	3901      	subs	r1, #1
 8109aee:	4652      	mov	r2, sl
 8109af0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8109af4:	9109      	str	r1, [sp, #36]	@ 0x24
 8109af6:	f7ff ff26 	bl	8109946 <__exponent>
 8109afa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109afc:	1813      	adds	r3, r2, r0
 8109afe:	2a01      	cmp	r2, #1
 8109b00:	4681      	mov	r9, r0
 8109b02:	6123      	str	r3, [r4, #16]
 8109b04:	dc02      	bgt.n	8109b0c <_printf_float+0x150>
 8109b06:	6822      	ldr	r2, [r4, #0]
 8109b08:	07d2      	lsls	r2, r2, #31
 8109b0a:	d501      	bpl.n	8109b10 <_printf_float+0x154>
 8109b0c:	3301      	adds	r3, #1
 8109b0e:	6123      	str	r3, [r4, #16]
 8109b10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8109b14:	2b00      	cmp	r3, #0
 8109b16:	d0a2      	beq.n	8109a5e <_printf_float+0xa2>
 8109b18:	232d      	movs	r3, #45	@ 0x2d
 8109b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109b1e:	e79e      	b.n	8109a5e <_printf_float+0xa2>
 8109b20:	9a06      	ldr	r2, [sp, #24]
 8109b22:	2a47      	cmp	r2, #71	@ 0x47
 8109b24:	d1c2      	bne.n	8109aac <_printf_float+0xf0>
 8109b26:	2b00      	cmp	r3, #0
 8109b28:	d1c0      	bne.n	8109aac <_printf_float+0xf0>
 8109b2a:	2301      	movs	r3, #1
 8109b2c:	e7bd      	b.n	8109aaa <_printf_float+0xee>
 8109b2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109b32:	d9db      	bls.n	8109aec <_printf_float+0x130>
 8109b34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8109b38:	d118      	bne.n	8109b6c <_printf_float+0x1b0>
 8109b3a:	2900      	cmp	r1, #0
 8109b3c:	6863      	ldr	r3, [r4, #4]
 8109b3e:	dd0b      	ble.n	8109b58 <_printf_float+0x19c>
 8109b40:	6121      	str	r1, [r4, #16]
 8109b42:	b913      	cbnz	r3, 8109b4a <_printf_float+0x18e>
 8109b44:	6822      	ldr	r2, [r4, #0]
 8109b46:	07d0      	lsls	r0, r2, #31
 8109b48:	d502      	bpl.n	8109b50 <_printf_float+0x194>
 8109b4a:	3301      	adds	r3, #1
 8109b4c:	440b      	add	r3, r1
 8109b4e:	6123      	str	r3, [r4, #16]
 8109b50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8109b52:	f04f 0900 	mov.w	r9, #0
 8109b56:	e7db      	b.n	8109b10 <_printf_float+0x154>
 8109b58:	b913      	cbnz	r3, 8109b60 <_printf_float+0x1a4>
 8109b5a:	6822      	ldr	r2, [r4, #0]
 8109b5c:	07d2      	lsls	r2, r2, #31
 8109b5e:	d501      	bpl.n	8109b64 <_printf_float+0x1a8>
 8109b60:	3302      	adds	r3, #2
 8109b62:	e7f4      	b.n	8109b4e <_printf_float+0x192>
 8109b64:	2301      	movs	r3, #1
 8109b66:	e7f2      	b.n	8109b4e <_printf_float+0x192>
 8109b68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8109b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109b6e:	4299      	cmp	r1, r3
 8109b70:	db05      	blt.n	8109b7e <_printf_float+0x1c2>
 8109b72:	6823      	ldr	r3, [r4, #0]
 8109b74:	6121      	str	r1, [r4, #16]
 8109b76:	07d8      	lsls	r0, r3, #31
 8109b78:	d5ea      	bpl.n	8109b50 <_printf_float+0x194>
 8109b7a:	1c4b      	adds	r3, r1, #1
 8109b7c:	e7e7      	b.n	8109b4e <_printf_float+0x192>
 8109b7e:	2900      	cmp	r1, #0
 8109b80:	bfd4      	ite	le
 8109b82:	f1c1 0202 	rsble	r2, r1, #2
 8109b86:	2201      	movgt	r2, #1
 8109b88:	4413      	add	r3, r2
 8109b8a:	e7e0      	b.n	8109b4e <_printf_float+0x192>
 8109b8c:	6823      	ldr	r3, [r4, #0]
 8109b8e:	055a      	lsls	r2, r3, #21
 8109b90:	d407      	bmi.n	8109ba2 <_printf_float+0x1e6>
 8109b92:	6923      	ldr	r3, [r4, #16]
 8109b94:	4642      	mov	r2, r8
 8109b96:	4631      	mov	r1, r6
 8109b98:	4628      	mov	r0, r5
 8109b9a:	47b8      	blx	r7
 8109b9c:	3001      	adds	r0, #1
 8109b9e:	d12b      	bne.n	8109bf8 <_printf_float+0x23c>
 8109ba0:	e767      	b.n	8109a72 <_printf_float+0xb6>
 8109ba2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109ba6:	f240 80dd 	bls.w	8109d64 <_printf_float+0x3a8>
 8109baa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109bae:	2200      	movs	r2, #0
 8109bb0:	2300      	movs	r3, #0
 8109bb2:	f7f7 f811 	bl	8100bd8 <__aeabi_dcmpeq>
 8109bb6:	2800      	cmp	r0, #0
 8109bb8:	d033      	beq.n	8109c22 <_printf_float+0x266>
 8109bba:	4a37      	ldr	r2, [pc, #220]	@ (8109c98 <_printf_float+0x2dc>)
 8109bbc:	2301      	movs	r3, #1
 8109bbe:	4631      	mov	r1, r6
 8109bc0:	4628      	mov	r0, r5
 8109bc2:	47b8      	blx	r7
 8109bc4:	3001      	adds	r0, #1
 8109bc6:	f43f af54 	beq.w	8109a72 <_printf_float+0xb6>
 8109bca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8109bce:	4543      	cmp	r3, r8
 8109bd0:	db02      	blt.n	8109bd8 <_printf_float+0x21c>
 8109bd2:	6823      	ldr	r3, [r4, #0]
 8109bd4:	07d8      	lsls	r0, r3, #31
 8109bd6:	d50f      	bpl.n	8109bf8 <_printf_float+0x23c>
 8109bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109bdc:	4631      	mov	r1, r6
 8109bde:	4628      	mov	r0, r5
 8109be0:	47b8      	blx	r7
 8109be2:	3001      	adds	r0, #1
 8109be4:	f43f af45 	beq.w	8109a72 <_printf_float+0xb6>
 8109be8:	f04f 0900 	mov.w	r9, #0
 8109bec:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8109bf0:	f104 0a1a 	add.w	sl, r4, #26
 8109bf4:	45c8      	cmp	r8, r9
 8109bf6:	dc09      	bgt.n	8109c0c <_printf_float+0x250>
 8109bf8:	6823      	ldr	r3, [r4, #0]
 8109bfa:	079b      	lsls	r3, r3, #30
 8109bfc:	f100 8103 	bmi.w	8109e06 <_printf_float+0x44a>
 8109c00:	68e0      	ldr	r0, [r4, #12]
 8109c02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109c04:	4298      	cmp	r0, r3
 8109c06:	bfb8      	it	lt
 8109c08:	4618      	movlt	r0, r3
 8109c0a:	e734      	b.n	8109a76 <_printf_float+0xba>
 8109c0c:	2301      	movs	r3, #1
 8109c0e:	4652      	mov	r2, sl
 8109c10:	4631      	mov	r1, r6
 8109c12:	4628      	mov	r0, r5
 8109c14:	47b8      	blx	r7
 8109c16:	3001      	adds	r0, #1
 8109c18:	f43f af2b 	beq.w	8109a72 <_printf_float+0xb6>
 8109c1c:	f109 0901 	add.w	r9, r9, #1
 8109c20:	e7e8      	b.n	8109bf4 <_printf_float+0x238>
 8109c22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109c24:	2b00      	cmp	r3, #0
 8109c26:	dc39      	bgt.n	8109c9c <_printf_float+0x2e0>
 8109c28:	4a1b      	ldr	r2, [pc, #108]	@ (8109c98 <_printf_float+0x2dc>)
 8109c2a:	2301      	movs	r3, #1
 8109c2c:	4631      	mov	r1, r6
 8109c2e:	4628      	mov	r0, r5
 8109c30:	47b8      	blx	r7
 8109c32:	3001      	adds	r0, #1
 8109c34:	f43f af1d 	beq.w	8109a72 <_printf_float+0xb6>
 8109c38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8109c3c:	ea59 0303 	orrs.w	r3, r9, r3
 8109c40:	d102      	bne.n	8109c48 <_printf_float+0x28c>
 8109c42:	6823      	ldr	r3, [r4, #0]
 8109c44:	07d9      	lsls	r1, r3, #31
 8109c46:	d5d7      	bpl.n	8109bf8 <_printf_float+0x23c>
 8109c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109c4c:	4631      	mov	r1, r6
 8109c4e:	4628      	mov	r0, r5
 8109c50:	47b8      	blx	r7
 8109c52:	3001      	adds	r0, #1
 8109c54:	f43f af0d 	beq.w	8109a72 <_printf_float+0xb6>
 8109c58:	f04f 0a00 	mov.w	sl, #0
 8109c5c:	f104 0b1a 	add.w	fp, r4, #26
 8109c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109c62:	425b      	negs	r3, r3
 8109c64:	4553      	cmp	r3, sl
 8109c66:	dc01      	bgt.n	8109c6c <_printf_float+0x2b0>
 8109c68:	464b      	mov	r3, r9
 8109c6a:	e793      	b.n	8109b94 <_printf_float+0x1d8>
 8109c6c:	2301      	movs	r3, #1
 8109c6e:	465a      	mov	r2, fp
 8109c70:	4631      	mov	r1, r6
 8109c72:	4628      	mov	r0, r5
 8109c74:	47b8      	blx	r7
 8109c76:	3001      	adds	r0, #1
 8109c78:	f43f aefb 	beq.w	8109a72 <_printf_float+0xb6>
 8109c7c:	f10a 0a01 	add.w	sl, sl, #1
 8109c80:	e7ee      	b.n	8109c60 <_printf_float+0x2a4>
 8109c82:	bf00      	nop
 8109c84:	7fefffff 	.word	0x7fefffff
 8109c88:	0810e844 	.word	0x0810e844
 8109c8c:	0810e848 	.word	0x0810e848
 8109c90:	0810e84c 	.word	0x0810e84c
 8109c94:	0810e850 	.word	0x0810e850
 8109c98:	0810e854 	.word	0x0810e854
 8109c9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109c9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109ca2:	4553      	cmp	r3, sl
 8109ca4:	bfa8      	it	ge
 8109ca6:	4653      	movge	r3, sl
 8109ca8:	2b00      	cmp	r3, #0
 8109caa:	4699      	mov	r9, r3
 8109cac:	dc36      	bgt.n	8109d1c <_printf_float+0x360>
 8109cae:	f04f 0b00 	mov.w	fp, #0
 8109cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109cb6:	f104 021a 	add.w	r2, r4, #26
 8109cba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109cbc:	9306      	str	r3, [sp, #24]
 8109cbe:	eba3 0309 	sub.w	r3, r3, r9
 8109cc2:	455b      	cmp	r3, fp
 8109cc4:	dc31      	bgt.n	8109d2a <_printf_float+0x36e>
 8109cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109cc8:	459a      	cmp	sl, r3
 8109cca:	dc3a      	bgt.n	8109d42 <_printf_float+0x386>
 8109ccc:	6823      	ldr	r3, [r4, #0]
 8109cce:	07da      	lsls	r2, r3, #31
 8109cd0:	d437      	bmi.n	8109d42 <_printf_float+0x386>
 8109cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109cd4:	ebaa 0903 	sub.w	r9, sl, r3
 8109cd8:	9b06      	ldr	r3, [sp, #24]
 8109cda:	ebaa 0303 	sub.w	r3, sl, r3
 8109cde:	4599      	cmp	r9, r3
 8109ce0:	bfa8      	it	ge
 8109ce2:	4699      	movge	r9, r3
 8109ce4:	f1b9 0f00 	cmp.w	r9, #0
 8109ce8:	dc33      	bgt.n	8109d52 <_printf_float+0x396>
 8109cea:	f04f 0800 	mov.w	r8, #0
 8109cee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109cf2:	f104 0b1a 	add.w	fp, r4, #26
 8109cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109cf8:	ebaa 0303 	sub.w	r3, sl, r3
 8109cfc:	eba3 0309 	sub.w	r3, r3, r9
 8109d00:	4543      	cmp	r3, r8
 8109d02:	f77f af79 	ble.w	8109bf8 <_printf_float+0x23c>
 8109d06:	2301      	movs	r3, #1
 8109d08:	465a      	mov	r2, fp
 8109d0a:	4631      	mov	r1, r6
 8109d0c:	4628      	mov	r0, r5
 8109d0e:	47b8      	blx	r7
 8109d10:	3001      	adds	r0, #1
 8109d12:	f43f aeae 	beq.w	8109a72 <_printf_float+0xb6>
 8109d16:	f108 0801 	add.w	r8, r8, #1
 8109d1a:	e7ec      	b.n	8109cf6 <_printf_float+0x33a>
 8109d1c:	4642      	mov	r2, r8
 8109d1e:	4631      	mov	r1, r6
 8109d20:	4628      	mov	r0, r5
 8109d22:	47b8      	blx	r7
 8109d24:	3001      	adds	r0, #1
 8109d26:	d1c2      	bne.n	8109cae <_printf_float+0x2f2>
 8109d28:	e6a3      	b.n	8109a72 <_printf_float+0xb6>
 8109d2a:	2301      	movs	r3, #1
 8109d2c:	4631      	mov	r1, r6
 8109d2e:	4628      	mov	r0, r5
 8109d30:	9206      	str	r2, [sp, #24]
 8109d32:	47b8      	blx	r7
 8109d34:	3001      	adds	r0, #1
 8109d36:	f43f ae9c 	beq.w	8109a72 <_printf_float+0xb6>
 8109d3a:	9a06      	ldr	r2, [sp, #24]
 8109d3c:	f10b 0b01 	add.w	fp, fp, #1
 8109d40:	e7bb      	b.n	8109cba <_printf_float+0x2fe>
 8109d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109d46:	4631      	mov	r1, r6
 8109d48:	4628      	mov	r0, r5
 8109d4a:	47b8      	blx	r7
 8109d4c:	3001      	adds	r0, #1
 8109d4e:	d1c0      	bne.n	8109cd2 <_printf_float+0x316>
 8109d50:	e68f      	b.n	8109a72 <_printf_float+0xb6>
 8109d52:	9a06      	ldr	r2, [sp, #24]
 8109d54:	464b      	mov	r3, r9
 8109d56:	4442      	add	r2, r8
 8109d58:	4631      	mov	r1, r6
 8109d5a:	4628      	mov	r0, r5
 8109d5c:	47b8      	blx	r7
 8109d5e:	3001      	adds	r0, #1
 8109d60:	d1c3      	bne.n	8109cea <_printf_float+0x32e>
 8109d62:	e686      	b.n	8109a72 <_printf_float+0xb6>
 8109d64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109d68:	f1ba 0f01 	cmp.w	sl, #1
 8109d6c:	dc01      	bgt.n	8109d72 <_printf_float+0x3b6>
 8109d6e:	07db      	lsls	r3, r3, #31
 8109d70:	d536      	bpl.n	8109de0 <_printf_float+0x424>
 8109d72:	2301      	movs	r3, #1
 8109d74:	4642      	mov	r2, r8
 8109d76:	4631      	mov	r1, r6
 8109d78:	4628      	mov	r0, r5
 8109d7a:	47b8      	blx	r7
 8109d7c:	3001      	adds	r0, #1
 8109d7e:	f43f ae78 	beq.w	8109a72 <_printf_float+0xb6>
 8109d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109d86:	4631      	mov	r1, r6
 8109d88:	4628      	mov	r0, r5
 8109d8a:	47b8      	blx	r7
 8109d8c:	3001      	adds	r0, #1
 8109d8e:	f43f ae70 	beq.w	8109a72 <_printf_float+0xb6>
 8109d92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109d96:	2200      	movs	r2, #0
 8109d98:	2300      	movs	r3, #0
 8109d9a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8109d9e:	f7f6 ff1b 	bl	8100bd8 <__aeabi_dcmpeq>
 8109da2:	b9c0      	cbnz	r0, 8109dd6 <_printf_float+0x41a>
 8109da4:	4653      	mov	r3, sl
 8109da6:	f108 0201 	add.w	r2, r8, #1
 8109daa:	4631      	mov	r1, r6
 8109dac:	4628      	mov	r0, r5
 8109dae:	47b8      	blx	r7
 8109db0:	3001      	adds	r0, #1
 8109db2:	d10c      	bne.n	8109dce <_printf_float+0x412>
 8109db4:	e65d      	b.n	8109a72 <_printf_float+0xb6>
 8109db6:	2301      	movs	r3, #1
 8109db8:	465a      	mov	r2, fp
 8109dba:	4631      	mov	r1, r6
 8109dbc:	4628      	mov	r0, r5
 8109dbe:	47b8      	blx	r7
 8109dc0:	3001      	adds	r0, #1
 8109dc2:	f43f ae56 	beq.w	8109a72 <_printf_float+0xb6>
 8109dc6:	f108 0801 	add.w	r8, r8, #1
 8109dca:	45d0      	cmp	r8, sl
 8109dcc:	dbf3      	blt.n	8109db6 <_printf_float+0x3fa>
 8109dce:	464b      	mov	r3, r9
 8109dd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8109dd4:	e6df      	b.n	8109b96 <_printf_float+0x1da>
 8109dd6:	f04f 0800 	mov.w	r8, #0
 8109dda:	f104 0b1a 	add.w	fp, r4, #26
 8109dde:	e7f4      	b.n	8109dca <_printf_float+0x40e>
 8109de0:	2301      	movs	r3, #1
 8109de2:	4642      	mov	r2, r8
 8109de4:	e7e1      	b.n	8109daa <_printf_float+0x3ee>
 8109de6:	2301      	movs	r3, #1
 8109de8:	464a      	mov	r2, r9
 8109dea:	4631      	mov	r1, r6
 8109dec:	4628      	mov	r0, r5
 8109dee:	47b8      	blx	r7
 8109df0:	3001      	adds	r0, #1
 8109df2:	f43f ae3e 	beq.w	8109a72 <_printf_float+0xb6>
 8109df6:	f108 0801 	add.w	r8, r8, #1
 8109dfa:	68e3      	ldr	r3, [r4, #12]
 8109dfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109dfe:	1a5b      	subs	r3, r3, r1
 8109e00:	4543      	cmp	r3, r8
 8109e02:	dcf0      	bgt.n	8109de6 <_printf_float+0x42a>
 8109e04:	e6fc      	b.n	8109c00 <_printf_float+0x244>
 8109e06:	f04f 0800 	mov.w	r8, #0
 8109e0a:	f104 0919 	add.w	r9, r4, #25
 8109e0e:	e7f4      	b.n	8109dfa <_printf_float+0x43e>

08109e10 <_printf_common>:
 8109e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109e14:	4616      	mov	r6, r2
 8109e16:	4698      	mov	r8, r3
 8109e18:	688a      	ldr	r2, [r1, #8]
 8109e1a:	690b      	ldr	r3, [r1, #16]
 8109e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8109e20:	4293      	cmp	r3, r2
 8109e22:	bfb8      	it	lt
 8109e24:	4613      	movlt	r3, r2
 8109e26:	6033      	str	r3, [r6, #0]
 8109e28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8109e2c:	4607      	mov	r7, r0
 8109e2e:	460c      	mov	r4, r1
 8109e30:	b10a      	cbz	r2, 8109e36 <_printf_common+0x26>
 8109e32:	3301      	adds	r3, #1
 8109e34:	6033      	str	r3, [r6, #0]
 8109e36:	6823      	ldr	r3, [r4, #0]
 8109e38:	0699      	lsls	r1, r3, #26
 8109e3a:	bf42      	ittt	mi
 8109e3c:	6833      	ldrmi	r3, [r6, #0]
 8109e3e:	3302      	addmi	r3, #2
 8109e40:	6033      	strmi	r3, [r6, #0]
 8109e42:	6825      	ldr	r5, [r4, #0]
 8109e44:	f015 0506 	ands.w	r5, r5, #6
 8109e48:	d106      	bne.n	8109e58 <_printf_common+0x48>
 8109e4a:	f104 0a19 	add.w	sl, r4, #25
 8109e4e:	68e3      	ldr	r3, [r4, #12]
 8109e50:	6832      	ldr	r2, [r6, #0]
 8109e52:	1a9b      	subs	r3, r3, r2
 8109e54:	42ab      	cmp	r3, r5
 8109e56:	dc26      	bgt.n	8109ea6 <_printf_common+0x96>
 8109e58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8109e5c:	6822      	ldr	r2, [r4, #0]
 8109e5e:	3b00      	subs	r3, #0
 8109e60:	bf18      	it	ne
 8109e62:	2301      	movne	r3, #1
 8109e64:	0692      	lsls	r2, r2, #26
 8109e66:	d42b      	bmi.n	8109ec0 <_printf_common+0xb0>
 8109e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8109e6c:	4641      	mov	r1, r8
 8109e6e:	4638      	mov	r0, r7
 8109e70:	47c8      	blx	r9
 8109e72:	3001      	adds	r0, #1
 8109e74:	d01e      	beq.n	8109eb4 <_printf_common+0xa4>
 8109e76:	6823      	ldr	r3, [r4, #0]
 8109e78:	6922      	ldr	r2, [r4, #16]
 8109e7a:	f003 0306 	and.w	r3, r3, #6
 8109e7e:	2b04      	cmp	r3, #4
 8109e80:	bf02      	ittt	eq
 8109e82:	68e5      	ldreq	r5, [r4, #12]
 8109e84:	6833      	ldreq	r3, [r6, #0]
 8109e86:	1aed      	subeq	r5, r5, r3
 8109e88:	68a3      	ldr	r3, [r4, #8]
 8109e8a:	bf0c      	ite	eq
 8109e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109e90:	2500      	movne	r5, #0
 8109e92:	4293      	cmp	r3, r2
 8109e94:	bfc4      	itt	gt
 8109e96:	1a9b      	subgt	r3, r3, r2
 8109e98:	18ed      	addgt	r5, r5, r3
 8109e9a:	2600      	movs	r6, #0
 8109e9c:	341a      	adds	r4, #26
 8109e9e:	42b5      	cmp	r5, r6
 8109ea0:	d11a      	bne.n	8109ed8 <_printf_common+0xc8>
 8109ea2:	2000      	movs	r0, #0
 8109ea4:	e008      	b.n	8109eb8 <_printf_common+0xa8>
 8109ea6:	2301      	movs	r3, #1
 8109ea8:	4652      	mov	r2, sl
 8109eaa:	4641      	mov	r1, r8
 8109eac:	4638      	mov	r0, r7
 8109eae:	47c8      	blx	r9
 8109eb0:	3001      	adds	r0, #1
 8109eb2:	d103      	bne.n	8109ebc <_printf_common+0xac>
 8109eb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109ebc:	3501      	adds	r5, #1
 8109ebe:	e7c6      	b.n	8109e4e <_printf_common+0x3e>
 8109ec0:	18e1      	adds	r1, r4, r3
 8109ec2:	1c5a      	adds	r2, r3, #1
 8109ec4:	2030      	movs	r0, #48	@ 0x30
 8109ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8109eca:	4422      	add	r2, r4
 8109ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8109ed0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8109ed4:	3302      	adds	r3, #2
 8109ed6:	e7c7      	b.n	8109e68 <_printf_common+0x58>
 8109ed8:	2301      	movs	r3, #1
 8109eda:	4622      	mov	r2, r4
 8109edc:	4641      	mov	r1, r8
 8109ede:	4638      	mov	r0, r7
 8109ee0:	47c8      	blx	r9
 8109ee2:	3001      	adds	r0, #1
 8109ee4:	d0e6      	beq.n	8109eb4 <_printf_common+0xa4>
 8109ee6:	3601      	adds	r6, #1
 8109ee8:	e7d9      	b.n	8109e9e <_printf_common+0x8e>
	...

08109eec <_printf_i>:
 8109eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109ef0:	7e0f      	ldrb	r7, [r1, #24]
 8109ef2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8109ef4:	2f78      	cmp	r7, #120	@ 0x78
 8109ef6:	4691      	mov	r9, r2
 8109ef8:	4680      	mov	r8, r0
 8109efa:	460c      	mov	r4, r1
 8109efc:	469a      	mov	sl, r3
 8109efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8109f02:	d807      	bhi.n	8109f14 <_printf_i+0x28>
 8109f04:	2f62      	cmp	r7, #98	@ 0x62
 8109f06:	d80a      	bhi.n	8109f1e <_printf_i+0x32>
 8109f08:	2f00      	cmp	r7, #0
 8109f0a:	f000 80d2 	beq.w	810a0b2 <_printf_i+0x1c6>
 8109f0e:	2f58      	cmp	r7, #88	@ 0x58
 8109f10:	f000 80b9 	beq.w	810a086 <_printf_i+0x19a>
 8109f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8109f1c:	e03a      	b.n	8109f94 <_printf_i+0xa8>
 8109f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8109f22:	2b15      	cmp	r3, #21
 8109f24:	d8f6      	bhi.n	8109f14 <_printf_i+0x28>
 8109f26:	a101      	add	r1, pc, #4	@ (adr r1, 8109f2c <_printf_i+0x40>)
 8109f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109f2c:	08109f85 	.word	0x08109f85
 8109f30:	08109f99 	.word	0x08109f99
 8109f34:	08109f15 	.word	0x08109f15
 8109f38:	08109f15 	.word	0x08109f15
 8109f3c:	08109f15 	.word	0x08109f15
 8109f40:	08109f15 	.word	0x08109f15
 8109f44:	08109f99 	.word	0x08109f99
 8109f48:	08109f15 	.word	0x08109f15
 8109f4c:	08109f15 	.word	0x08109f15
 8109f50:	08109f15 	.word	0x08109f15
 8109f54:	08109f15 	.word	0x08109f15
 8109f58:	0810a099 	.word	0x0810a099
 8109f5c:	08109fc3 	.word	0x08109fc3
 8109f60:	0810a053 	.word	0x0810a053
 8109f64:	08109f15 	.word	0x08109f15
 8109f68:	08109f15 	.word	0x08109f15
 8109f6c:	0810a0bb 	.word	0x0810a0bb
 8109f70:	08109f15 	.word	0x08109f15
 8109f74:	08109fc3 	.word	0x08109fc3
 8109f78:	08109f15 	.word	0x08109f15
 8109f7c:	08109f15 	.word	0x08109f15
 8109f80:	0810a05b 	.word	0x0810a05b
 8109f84:	6833      	ldr	r3, [r6, #0]
 8109f86:	1d1a      	adds	r2, r3, #4
 8109f88:	681b      	ldr	r3, [r3, #0]
 8109f8a:	6032      	str	r2, [r6, #0]
 8109f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8109f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8109f94:	2301      	movs	r3, #1
 8109f96:	e09d      	b.n	810a0d4 <_printf_i+0x1e8>
 8109f98:	6833      	ldr	r3, [r6, #0]
 8109f9a:	6820      	ldr	r0, [r4, #0]
 8109f9c:	1d19      	adds	r1, r3, #4
 8109f9e:	6031      	str	r1, [r6, #0]
 8109fa0:	0606      	lsls	r6, r0, #24
 8109fa2:	d501      	bpl.n	8109fa8 <_printf_i+0xbc>
 8109fa4:	681d      	ldr	r5, [r3, #0]
 8109fa6:	e003      	b.n	8109fb0 <_printf_i+0xc4>
 8109fa8:	0645      	lsls	r5, r0, #25
 8109faa:	d5fb      	bpl.n	8109fa4 <_printf_i+0xb8>
 8109fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8109fb0:	2d00      	cmp	r5, #0
 8109fb2:	da03      	bge.n	8109fbc <_printf_i+0xd0>
 8109fb4:	232d      	movs	r3, #45	@ 0x2d
 8109fb6:	426d      	negs	r5, r5
 8109fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109fbc:	4859      	ldr	r0, [pc, #356]	@ (810a124 <_printf_i+0x238>)
 8109fbe:	230a      	movs	r3, #10
 8109fc0:	e011      	b.n	8109fe6 <_printf_i+0xfa>
 8109fc2:	6821      	ldr	r1, [r4, #0]
 8109fc4:	6833      	ldr	r3, [r6, #0]
 8109fc6:	0608      	lsls	r0, r1, #24
 8109fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8109fcc:	d402      	bmi.n	8109fd4 <_printf_i+0xe8>
 8109fce:	0649      	lsls	r1, r1, #25
 8109fd0:	bf48      	it	mi
 8109fd2:	b2ad      	uxthmi	r5, r5
 8109fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8109fd6:	4853      	ldr	r0, [pc, #332]	@ (810a124 <_printf_i+0x238>)
 8109fd8:	6033      	str	r3, [r6, #0]
 8109fda:	bf14      	ite	ne
 8109fdc:	230a      	movne	r3, #10
 8109fde:	2308      	moveq	r3, #8
 8109fe0:	2100      	movs	r1, #0
 8109fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8109fe6:	6866      	ldr	r6, [r4, #4]
 8109fe8:	60a6      	str	r6, [r4, #8]
 8109fea:	2e00      	cmp	r6, #0
 8109fec:	bfa2      	ittt	ge
 8109fee:	6821      	ldrge	r1, [r4, #0]
 8109ff0:	f021 0104 	bicge.w	r1, r1, #4
 8109ff4:	6021      	strge	r1, [r4, #0]
 8109ff6:	b90d      	cbnz	r5, 8109ffc <_printf_i+0x110>
 8109ff8:	2e00      	cmp	r6, #0
 8109ffa:	d04b      	beq.n	810a094 <_printf_i+0x1a8>
 8109ffc:	4616      	mov	r6, r2
 8109ffe:	fbb5 f1f3 	udiv	r1, r5, r3
 810a002:	fb03 5711 	mls	r7, r3, r1, r5
 810a006:	5dc7      	ldrb	r7, [r0, r7]
 810a008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810a00c:	462f      	mov	r7, r5
 810a00e:	42bb      	cmp	r3, r7
 810a010:	460d      	mov	r5, r1
 810a012:	d9f4      	bls.n	8109ffe <_printf_i+0x112>
 810a014:	2b08      	cmp	r3, #8
 810a016:	d10b      	bne.n	810a030 <_printf_i+0x144>
 810a018:	6823      	ldr	r3, [r4, #0]
 810a01a:	07df      	lsls	r7, r3, #31
 810a01c:	d508      	bpl.n	810a030 <_printf_i+0x144>
 810a01e:	6923      	ldr	r3, [r4, #16]
 810a020:	6861      	ldr	r1, [r4, #4]
 810a022:	4299      	cmp	r1, r3
 810a024:	bfde      	ittt	le
 810a026:	2330      	movle	r3, #48	@ 0x30
 810a028:	f806 3c01 	strble.w	r3, [r6, #-1]
 810a02c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 810a030:	1b92      	subs	r2, r2, r6
 810a032:	6122      	str	r2, [r4, #16]
 810a034:	f8cd a000 	str.w	sl, [sp]
 810a038:	464b      	mov	r3, r9
 810a03a:	aa03      	add	r2, sp, #12
 810a03c:	4621      	mov	r1, r4
 810a03e:	4640      	mov	r0, r8
 810a040:	f7ff fee6 	bl	8109e10 <_printf_common>
 810a044:	3001      	adds	r0, #1
 810a046:	d14a      	bne.n	810a0de <_printf_i+0x1f2>
 810a048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810a04c:	b004      	add	sp, #16
 810a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a052:	6823      	ldr	r3, [r4, #0]
 810a054:	f043 0320 	orr.w	r3, r3, #32
 810a058:	6023      	str	r3, [r4, #0]
 810a05a:	4833      	ldr	r0, [pc, #204]	@ (810a128 <_printf_i+0x23c>)
 810a05c:	2778      	movs	r7, #120	@ 0x78
 810a05e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810a062:	6823      	ldr	r3, [r4, #0]
 810a064:	6831      	ldr	r1, [r6, #0]
 810a066:	061f      	lsls	r7, r3, #24
 810a068:	f851 5b04 	ldr.w	r5, [r1], #4
 810a06c:	d402      	bmi.n	810a074 <_printf_i+0x188>
 810a06e:	065f      	lsls	r7, r3, #25
 810a070:	bf48      	it	mi
 810a072:	b2ad      	uxthmi	r5, r5
 810a074:	6031      	str	r1, [r6, #0]
 810a076:	07d9      	lsls	r1, r3, #31
 810a078:	bf44      	itt	mi
 810a07a:	f043 0320 	orrmi.w	r3, r3, #32
 810a07e:	6023      	strmi	r3, [r4, #0]
 810a080:	b11d      	cbz	r5, 810a08a <_printf_i+0x19e>
 810a082:	2310      	movs	r3, #16
 810a084:	e7ac      	b.n	8109fe0 <_printf_i+0xf4>
 810a086:	4827      	ldr	r0, [pc, #156]	@ (810a124 <_printf_i+0x238>)
 810a088:	e7e9      	b.n	810a05e <_printf_i+0x172>
 810a08a:	6823      	ldr	r3, [r4, #0]
 810a08c:	f023 0320 	bic.w	r3, r3, #32
 810a090:	6023      	str	r3, [r4, #0]
 810a092:	e7f6      	b.n	810a082 <_printf_i+0x196>
 810a094:	4616      	mov	r6, r2
 810a096:	e7bd      	b.n	810a014 <_printf_i+0x128>
 810a098:	6833      	ldr	r3, [r6, #0]
 810a09a:	6825      	ldr	r5, [r4, #0]
 810a09c:	6961      	ldr	r1, [r4, #20]
 810a09e:	1d18      	adds	r0, r3, #4
 810a0a0:	6030      	str	r0, [r6, #0]
 810a0a2:	062e      	lsls	r6, r5, #24
 810a0a4:	681b      	ldr	r3, [r3, #0]
 810a0a6:	d501      	bpl.n	810a0ac <_printf_i+0x1c0>
 810a0a8:	6019      	str	r1, [r3, #0]
 810a0aa:	e002      	b.n	810a0b2 <_printf_i+0x1c6>
 810a0ac:	0668      	lsls	r0, r5, #25
 810a0ae:	d5fb      	bpl.n	810a0a8 <_printf_i+0x1bc>
 810a0b0:	8019      	strh	r1, [r3, #0]
 810a0b2:	2300      	movs	r3, #0
 810a0b4:	6123      	str	r3, [r4, #16]
 810a0b6:	4616      	mov	r6, r2
 810a0b8:	e7bc      	b.n	810a034 <_printf_i+0x148>
 810a0ba:	6833      	ldr	r3, [r6, #0]
 810a0bc:	1d1a      	adds	r2, r3, #4
 810a0be:	6032      	str	r2, [r6, #0]
 810a0c0:	681e      	ldr	r6, [r3, #0]
 810a0c2:	6862      	ldr	r2, [r4, #4]
 810a0c4:	2100      	movs	r1, #0
 810a0c6:	4630      	mov	r0, r6
 810a0c8:	f7f6 f90a 	bl	81002e0 <memchr>
 810a0cc:	b108      	cbz	r0, 810a0d2 <_printf_i+0x1e6>
 810a0ce:	1b80      	subs	r0, r0, r6
 810a0d0:	6060      	str	r0, [r4, #4]
 810a0d2:	6863      	ldr	r3, [r4, #4]
 810a0d4:	6123      	str	r3, [r4, #16]
 810a0d6:	2300      	movs	r3, #0
 810a0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a0dc:	e7aa      	b.n	810a034 <_printf_i+0x148>
 810a0de:	6923      	ldr	r3, [r4, #16]
 810a0e0:	4632      	mov	r2, r6
 810a0e2:	4649      	mov	r1, r9
 810a0e4:	4640      	mov	r0, r8
 810a0e6:	47d0      	blx	sl
 810a0e8:	3001      	adds	r0, #1
 810a0ea:	d0ad      	beq.n	810a048 <_printf_i+0x15c>
 810a0ec:	6823      	ldr	r3, [r4, #0]
 810a0ee:	079b      	lsls	r3, r3, #30
 810a0f0:	d413      	bmi.n	810a11a <_printf_i+0x22e>
 810a0f2:	68e0      	ldr	r0, [r4, #12]
 810a0f4:	9b03      	ldr	r3, [sp, #12]
 810a0f6:	4298      	cmp	r0, r3
 810a0f8:	bfb8      	it	lt
 810a0fa:	4618      	movlt	r0, r3
 810a0fc:	e7a6      	b.n	810a04c <_printf_i+0x160>
 810a0fe:	2301      	movs	r3, #1
 810a100:	4632      	mov	r2, r6
 810a102:	4649      	mov	r1, r9
 810a104:	4640      	mov	r0, r8
 810a106:	47d0      	blx	sl
 810a108:	3001      	adds	r0, #1
 810a10a:	d09d      	beq.n	810a048 <_printf_i+0x15c>
 810a10c:	3501      	adds	r5, #1
 810a10e:	68e3      	ldr	r3, [r4, #12]
 810a110:	9903      	ldr	r1, [sp, #12]
 810a112:	1a5b      	subs	r3, r3, r1
 810a114:	42ab      	cmp	r3, r5
 810a116:	dcf2      	bgt.n	810a0fe <_printf_i+0x212>
 810a118:	e7eb      	b.n	810a0f2 <_printf_i+0x206>
 810a11a:	2500      	movs	r5, #0
 810a11c:	f104 0619 	add.w	r6, r4, #25
 810a120:	e7f5      	b.n	810a10e <_printf_i+0x222>
 810a122:	bf00      	nop
 810a124:	0810e856 	.word	0x0810e856
 810a128:	0810e867 	.word	0x0810e867

0810a12c <_scanf_float>:
 810a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a130:	b087      	sub	sp, #28
 810a132:	4617      	mov	r7, r2
 810a134:	9303      	str	r3, [sp, #12]
 810a136:	688b      	ldr	r3, [r1, #8]
 810a138:	1e5a      	subs	r2, r3, #1
 810a13a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810a13e:	bf81      	itttt	hi
 810a140:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810a144:	eb03 0b05 	addhi.w	fp, r3, r5
 810a148:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810a14c:	608b      	strhi	r3, [r1, #8]
 810a14e:	680b      	ldr	r3, [r1, #0]
 810a150:	460a      	mov	r2, r1
 810a152:	f04f 0500 	mov.w	r5, #0
 810a156:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810a15a:	f842 3b1c 	str.w	r3, [r2], #28
 810a15e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810a162:	4680      	mov	r8, r0
 810a164:	460c      	mov	r4, r1
 810a166:	bf98      	it	ls
 810a168:	f04f 0b00 	movls.w	fp, #0
 810a16c:	9201      	str	r2, [sp, #4]
 810a16e:	4616      	mov	r6, r2
 810a170:	46aa      	mov	sl, r5
 810a172:	46a9      	mov	r9, r5
 810a174:	9502      	str	r5, [sp, #8]
 810a176:	68a2      	ldr	r2, [r4, #8]
 810a178:	b152      	cbz	r2, 810a190 <_scanf_float+0x64>
 810a17a:	683b      	ldr	r3, [r7, #0]
 810a17c:	781b      	ldrb	r3, [r3, #0]
 810a17e:	2b4e      	cmp	r3, #78	@ 0x4e
 810a180:	d864      	bhi.n	810a24c <_scanf_float+0x120>
 810a182:	2b40      	cmp	r3, #64	@ 0x40
 810a184:	d83c      	bhi.n	810a200 <_scanf_float+0xd4>
 810a186:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810a18a:	b2c8      	uxtb	r0, r1
 810a18c:	280e      	cmp	r0, #14
 810a18e:	d93a      	bls.n	810a206 <_scanf_float+0xda>
 810a190:	f1b9 0f00 	cmp.w	r9, #0
 810a194:	d003      	beq.n	810a19e <_scanf_float+0x72>
 810a196:	6823      	ldr	r3, [r4, #0]
 810a198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a19c:	6023      	str	r3, [r4, #0]
 810a19e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810a1a2:	f1ba 0f01 	cmp.w	sl, #1
 810a1a6:	f200 8117 	bhi.w	810a3d8 <_scanf_float+0x2ac>
 810a1aa:	9b01      	ldr	r3, [sp, #4]
 810a1ac:	429e      	cmp	r6, r3
 810a1ae:	f200 8108 	bhi.w	810a3c2 <_scanf_float+0x296>
 810a1b2:	2001      	movs	r0, #1
 810a1b4:	b007      	add	sp, #28
 810a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a1ba:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810a1be:	2a0d      	cmp	r2, #13
 810a1c0:	d8e6      	bhi.n	810a190 <_scanf_float+0x64>
 810a1c2:	a101      	add	r1, pc, #4	@ (adr r1, 810a1c8 <_scanf_float+0x9c>)
 810a1c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a1c8:	0810a30f 	.word	0x0810a30f
 810a1cc:	0810a191 	.word	0x0810a191
 810a1d0:	0810a191 	.word	0x0810a191
 810a1d4:	0810a191 	.word	0x0810a191
 810a1d8:	0810a36f 	.word	0x0810a36f
 810a1dc:	0810a347 	.word	0x0810a347
 810a1e0:	0810a191 	.word	0x0810a191
 810a1e4:	0810a191 	.word	0x0810a191
 810a1e8:	0810a31d 	.word	0x0810a31d
 810a1ec:	0810a191 	.word	0x0810a191
 810a1f0:	0810a191 	.word	0x0810a191
 810a1f4:	0810a191 	.word	0x0810a191
 810a1f8:	0810a191 	.word	0x0810a191
 810a1fc:	0810a2d5 	.word	0x0810a2d5
 810a200:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810a204:	e7db      	b.n	810a1be <_scanf_float+0x92>
 810a206:	290e      	cmp	r1, #14
 810a208:	d8c2      	bhi.n	810a190 <_scanf_float+0x64>
 810a20a:	a001      	add	r0, pc, #4	@ (adr r0, 810a210 <_scanf_float+0xe4>)
 810a20c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a210:	0810a2c5 	.word	0x0810a2c5
 810a214:	0810a191 	.word	0x0810a191
 810a218:	0810a2c5 	.word	0x0810a2c5
 810a21c:	0810a35b 	.word	0x0810a35b
 810a220:	0810a191 	.word	0x0810a191
 810a224:	0810a26d 	.word	0x0810a26d
 810a228:	0810a2ab 	.word	0x0810a2ab
 810a22c:	0810a2ab 	.word	0x0810a2ab
 810a230:	0810a2ab 	.word	0x0810a2ab
 810a234:	0810a2ab 	.word	0x0810a2ab
 810a238:	0810a2ab 	.word	0x0810a2ab
 810a23c:	0810a2ab 	.word	0x0810a2ab
 810a240:	0810a2ab 	.word	0x0810a2ab
 810a244:	0810a2ab 	.word	0x0810a2ab
 810a248:	0810a2ab 	.word	0x0810a2ab
 810a24c:	2b6e      	cmp	r3, #110	@ 0x6e
 810a24e:	d809      	bhi.n	810a264 <_scanf_float+0x138>
 810a250:	2b60      	cmp	r3, #96	@ 0x60
 810a252:	d8b2      	bhi.n	810a1ba <_scanf_float+0x8e>
 810a254:	2b54      	cmp	r3, #84	@ 0x54
 810a256:	d07b      	beq.n	810a350 <_scanf_float+0x224>
 810a258:	2b59      	cmp	r3, #89	@ 0x59
 810a25a:	d199      	bne.n	810a190 <_scanf_float+0x64>
 810a25c:	2d07      	cmp	r5, #7
 810a25e:	d197      	bne.n	810a190 <_scanf_float+0x64>
 810a260:	2508      	movs	r5, #8
 810a262:	e02c      	b.n	810a2be <_scanf_float+0x192>
 810a264:	2b74      	cmp	r3, #116	@ 0x74
 810a266:	d073      	beq.n	810a350 <_scanf_float+0x224>
 810a268:	2b79      	cmp	r3, #121	@ 0x79
 810a26a:	e7f6      	b.n	810a25a <_scanf_float+0x12e>
 810a26c:	6821      	ldr	r1, [r4, #0]
 810a26e:	05c8      	lsls	r0, r1, #23
 810a270:	d51b      	bpl.n	810a2aa <_scanf_float+0x17e>
 810a272:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810a276:	6021      	str	r1, [r4, #0]
 810a278:	f109 0901 	add.w	r9, r9, #1
 810a27c:	f1bb 0f00 	cmp.w	fp, #0
 810a280:	d003      	beq.n	810a28a <_scanf_float+0x15e>
 810a282:	3201      	adds	r2, #1
 810a284:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 810a288:	60a2      	str	r2, [r4, #8]
 810a28a:	68a3      	ldr	r3, [r4, #8]
 810a28c:	3b01      	subs	r3, #1
 810a28e:	60a3      	str	r3, [r4, #8]
 810a290:	6923      	ldr	r3, [r4, #16]
 810a292:	3301      	adds	r3, #1
 810a294:	6123      	str	r3, [r4, #16]
 810a296:	687b      	ldr	r3, [r7, #4]
 810a298:	3b01      	subs	r3, #1
 810a29a:	2b00      	cmp	r3, #0
 810a29c:	607b      	str	r3, [r7, #4]
 810a29e:	f340 8087 	ble.w	810a3b0 <_scanf_float+0x284>
 810a2a2:	683b      	ldr	r3, [r7, #0]
 810a2a4:	3301      	adds	r3, #1
 810a2a6:	603b      	str	r3, [r7, #0]
 810a2a8:	e765      	b.n	810a176 <_scanf_float+0x4a>
 810a2aa:	eb1a 0105 	adds.w	r1, sl, r5
 810a2ae:	f47f af6f 	bne.w	810a190 <_scanf_float+0x64>
 810a2b2:	6822      	ldr	r2, [r4, #0]
 810a2b4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810a2b8:	6022      	str	r2, [r4, #0]
 810a2ba:	460d      	mov	r5, r1
 810a2bc:	468a      	mov	sl, r1
 810a2be:	f806 3b01 	strb.w	r3, [r6], #1
 810a2c2:	e7e2      	b.n	810a28a <_scanf_float+0x15e>
 810a2c4:	6822      	ldr	r2, [r4, #0]
 810a2c6:	0610      	lsls	r0, r2, #24
 810a2c8:	f57f af62 	bpl.w	810a190 <_scanf_float+0x64>
 810a2cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810a2d0:	6022      	str	r2, [r4, #0]
 810a2d2:	e7f4      	b.n	810a2be <_scanf_float+0x192>
 810a2d4:	f1ba 0f00 	cmp.w	sl, #0
 810a2d8:	d10e      	bne.n	810a2f8 <_scanf_float+0x1cc>
 810a2da:	f1b9 0f00 	cmp.w	r9, #0
 810a2de:	d10e      	bne.n	810a2fe <_scanf_float+0x1d2>
 810a2e0:	6822      	ldr	r2, [r4, #0]
 810a2e2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a2e6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a2ea:	d108      	bne.n	810a2fe <_scanf_float+0x1d2>
 810a2ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a2f0:	6022      	str	r2, [r4, #0]
 810a2f2:	f04f 0a01 	mov.w	sl, #1
 810a2f6:	e7e2      	b.n	810a2be <_scanf_float+0x192>
 810a2f8:	f1ba 0f02 	cmp.w	sl, #2
 810a2fc:	d055      	beq.n	810a3aa <_scanf_float+0x27e>
 810a2fe:	2d01      	cmp	r5, #1
 810a300:	d002      	beq.n	810a308 <_scanf_float+0x1dc>
 810a302:	2d04      	cmp	r5, #4
 810a304:	f47f af44 	bne.w	810a190 <_scanf_float+0x64>
 810a308:	3501      	adds	r5, #1
 810a30a:	b2ed      	uxtb	r5, r5
 810a30c:	e7d7      	b.n	810a2be <_scanf_float+0x192>
 810a30e:	f1ba 0f01 	cmp.w	sl, #1
 810a312:	f47f af3d 	bne.w	810a190 <_scanf_float+0x64>
 810a316:	f04f 0a02 	mov.w	sl, #2
 810a31a:	e7d0      	b.n	810a2be <_scanf_float+0x192>
 810a31c:	b97d      	cbnz	r5, 810a33e <_scanf_float+0x212>
 810a31e:	f1b9 0f00 	cmp.w	r9, #0
 810a322:	f47f af38 	bne.w	810a196 <_scanf_float+0x6a>
 810a326:	6822      	ldr	r2, [r4, #0]
 810a328:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a32c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a330:	f040 8108 	bne.w	810a544 <_scanf_float+0x418>
 810a334:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a338:	6022      	str	r2, [r4, #0]
 810a33a:	2501      	movs	r5, #1
 810a33c:	e7bf      	b.n	810a2be <_scanf_float+0x192>
 810a33e:	2d03      	cmp	r5, #3
 810a340:	d0e2      	beq.n	810a308 <_scanf_float+0x1dc>
 810a342:	2d05      	cmp	r5, #5
 810a344:	e7de      	b.n	810a304 <_scanf_float+0x1d8>
 810a346:	2d02      	cmp	r5, #2
 810a348:	f47f af22 	bne.w	810a190 <_scanf_float+0x64>
 810a34c:	2503      	movs	r5, #3
 810a34e:	e7b6      	b.n	810a2be <_scanf_float+0x192>
 810a350:	2d06      	cmp	r5, #6
 810a352:	f47f af1d 	bne.w	810a190 <_scanf_float+0x64>
 810a356:	2507      	movs	r5, #7
 810a358:	e7b1      	b.n	810a2be <_scanf_float+0x192>
 810a35a:	6822      	ldr	r2, [r4, #0]
 810a35c:	0591      	lsls	r1, r2, #22
 810a35e:	f57f af17 	bpl.w	810a190 <_scanf_float+0x64>
 810a362:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810a366:	6022      	str	r2, [r4, #0]
 810a368:	f8cd 9008 	str.w	r9, [sp, #8]
 810a36c:	e7a7      	b.n	810a2be <_scanf_float+0x192>
 810a36e:	6822      	ldr	r2, [r4, #0]
 810a370:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810a374:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810a378:	d006      	beq.n	810a388 <_scanf_float+0x25c>
 810a37a:	0550      	lsls	r0, r2, #21
 810a37c:	f57f af08 	bpl.w	810a190 <_scanf_float+0x64>
 810a380:	f1b9 0f00 	cmp.w	r9, #0
 810a384:	f000 80de 	beq.w	810a544 <_scanf_float+0x418>
 810a388:	0591      	lsls	r1, r2, #22
 810a38a:	bf58      	it	pl
 810a38c:	9902      	ldrpl	r1, [sp, #8]
 810a38e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a392:	bf58      	it	pl
 810a394:	eba9 0101 	subpl.w	r1, r9, r1
 810a398:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810a39c:	bf58      	it	pl
 810a39e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a3a2:	6022      	str	r2, [r4, #0]
 810a3a4:	f04f 0900 	mov.w	r9, #0
 810a3a8:	e789      	b.n	810a2be <_scanf_float+0x192>
 810a3aa:	f04f 0a03 	mov.w	sl, #3
 810a3ae:	e786      	b.n	810a2be <_scanf_float+0x192>
 810a3b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810a3b4:	4639      	mov	r1, r7
 810a3b6:	4640      	mov	r0, r8
 810a3b8:	4798      	blx	r3
 810a3ba:	2800      	cmp	r0, #0
 810a3bc:	f43f aedb 	beq.w	810a176 <_scanf_float+0x4a>
 810a3c0:	e6e6      	b.n	810a190 <_scanf_float+0x64>
 810a3c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a3c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a3ca:	463a      	mov	r2, r7
 810a3cc:	4640      	mov	r0, r8
 810a3ce:	4798      	blx	r3
 810a3d0:	6923      	ldr	r3, [r4, #16]
 810a3d2:	3b01      	subs	r3, #1
 810a3d4:	6123      	str	r3, [r4, #16]
 810a3d6:	e6e8      	b.n	810a1aa <_scanf_float+0x7e>
 810a3d8:	1e6b      	subs	r3, r5, #1
 810a3da:	2b06      	cmp	r3, #6
 810a3dc:	d824      	bhi.n	810a428 <_scanf_float+0x2fc>
 810a3de:	2d02      	cmp	r5, #2
 810a3e0:	d836      	bhi.n	810a450 <_scanf_float+0x324>
 810a3e2:	9b01      	ldr	r3, [sp, #4]
 810a3e4:	429e      	cmp	r6, r3
 810a3e6:	f67f aee4 	bls.w	810a1b2 <_scanf_float+0x86>
 810a3ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a3ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a3f2:	463a      	mov	r2, r7
 810a3f4:	4640      	mov	r0, r8
 810a3f6:	4798      	blx	r3
 810a3f8:	6923      	ldr	r3, [r4, #16]
 810a3fa:	3b01      	subs	r3, #1
 810a3fc:	6123      	str	r3, [r4, #16]
 810a3fe:	e7f0      	b.n	810a3e2 <_scanf_float+0x2b6>
 810a400:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a404:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810a408:	463a      	mov	r2, r7
 810a40a:	4640      	mov	r0, r8
 810a40c:	4798      	blx	r3
 810a40e:	6923      	ldr	r3, [r4, #16]
 810a410:	3b01      	subs	r3, #1
 810a412:	6123      	str	r3, [r4, #16]
 810a414:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810a418:	fa5f fa8a 	uxtb.w	sl, sl
 810a41c:	f1ba 0f02 	cmp.w	sl, #2
 810a420:	d1ee      	bne.n	810a400 <_scanf_float+0x2d4>
 810a422:	3d03      	subs	r5, #3
 810a424:	b2ed      	uxtb	r5, r5
 810a426:	1b76      	subs	r6, r6, r5
 810a428:	6823      	ldr	r3, [r4, #0]
 810a42a:	05da      	lsls	r2, r3, #23
 810a42c:	d530      	bpl.n	810a490 <_scanf_float+0x364>
 810a42e:	055b      	lsls	r3, r3, #21
 810a430:	d511      	bpl.n	810a456 <_scanf_float+0x32a>
 810a432:	9b01      	ldr	r3, [sp, #4]
 810a434:	429e      	cmp	r6, r3
 810a436:	f67f aebc 	bls.w	810a1b2 <_scanf_float+0x86>
 810a43a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a43e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a442:	463a      	mov	r2, r7
 810a444:	4640      	mov	r0, r8
 810a446:	4798      	blx	r3
 810a448:	6923      	ldr	r3, [r4, #16]
 810a44a:	3b01      	subs	r3, #1
 810a44c:	6123      	str	r3, [r4, #16]
 810a44e:	e7f0      	b.n	810a432 <_scanf_float+0x306>
 810a450:	46aa      	mov	sl, r5
 810a452:	46b3      	mov	fp, r6
 810a454:	e7de      	b.n	810a414 <_scanf_float+0x2e8>
 810a456:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a45a:	6923      	ldr	r3, [r4, #16]
 810a45c:	2965      	cmp	r1, #101	@ 0x65
 810a45e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 810a462:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 810a466:	6123      	str	r3, [r4, #16]
 810a468:	d00c      	beq.n	810a484 <_scanf_float+0x358>
 810a46a:	2945      	cmp	r1, #69	@ 0x45
 810a46c:	d00a      	beq.n	810a484 <_scanf_float+0x358>
 810a46e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a472:	463a      	mov	r2, r7
 810a474:	4640      	mov	r0, r8
 810a476:	4798      	blx	r3
 810a478:	6923      	ldr	r3, [r4, #16]
 810a47a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a47e:	3b01      	subs	r3, #1
 810a480:	1eb5      	subs	r5, r6, #2
 810a482:	6123      	str	r3, [r4, #16]
 810a484:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a488:	463a      	mov	r2, r7
 810a48a:	4640      	mov	r0, r8
 810a48c:	4798      	blx	r3
 810a48e:	462e      	mov	r6, r5
 810a490:	6822      	ldr	r2, [r4, #0]
 810a492:	f012 0210 	ands.w	r2, r2, #16
 810a496:	d001      	beq.n	810a49c <_scanf_float+0x370>
 810a498:	2000      	movs	r0, #0
 810a49a:	e68b      	b.n	810a1b4 <_scanf_float+0x88>
 810a49c:	7032      	strb	r2, [r6, #0]
 810a49e:	6823      	ldr	r3, [r4, #0]
 810a4a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810a4a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810a4a8:	d11c      	bne.n	810a4e4 <_scanf_float+0x3b8>
 810a4aa:	9b02      	ldr	r3, [sp, #8]
 810a4ac:	454b      	cmp	r3, r9
 810a4ae:	eba3 0209 	sub.w	r2, r3, r9
 810a4b2:	d123      	bne.n	810a4fc <_scanf_float+0x3d0>
 810a4b4:	9901      	ldr	r1, [sp, #4]
 810a4b6:	2200      	movs	r2, #0
 810a4b8:	4640      	mov	r0, r8
 810a4ba:	f002 fd09 	bl	810ced0 <_strtod_r>
 810a4be:	9b03      	ldr	r3, [sp, #12]
 810a4c0:	6821      	ldr	r1, [r4, #0]
 810a4c2:	681b      	ldr	r3, [r3, #0]
 810a4c4:	f011 0f02 	tst.w	r1, #2
 810a4c8:	ec57 6b10 	vmov	r6, r7, d0
 810a4cc:	f103 0204 	add.w	r2, r3, #4
 810a4d0:	d01f      	beq.n	810a512 <_scanf_float+0x3e6>
 810a4d2:	9903      	ldr	r1, [sp, #12]
 810a4d4:	600a      	str	r2, [r1, #0]
 810a4d6:	681b      	ldr	r3, [r3, #0]
 810a4d8:	e9c3 6700 	strd	r6, r7, [r3]
 810a4dc:	68e3      	ldr	r3, [r4, #12]
 810a4de:	3301      	adds	r3, #1
 810a4e0:	60e3      	str	r3, [r4, #12]
 810a4e2:	e7d9      	b.n	810a498 <_scanf_float+0x36c>
 810a4e4:	9b04      	ldr	r3, [sp, #16]
 810a4e6:	2b00      	cmp	r3, #0
 810a4e8:	d0e4      	beq.n	810a4b4 <_scanf_float+0x388>
 810a4ea:	9905      	ldr	r1, [sp, #20]
 810a4ec:	230a      	movs	r3, #10
 810a4ee:	3101      	adds	r1, #1
 810a4f0:	4640      	mov	r0, r8
 810a4f2:	f002 fd6d 	bl	810cfd0 <_strtol_r>
 810a4f6:	9b04      	ldr	r3, [sp, #16]
 810a4f8:	9e05      	ldr	r6, [sp, #20]
 810a4fa:	1ac2      	subs	r2, r0, r3
 810a4fc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810a500:	429e      	cmp	r6, r3
 810a502:	bf28      	it	cs
 810a504:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810a508:	4910      	ldr	r1, [pc, #64]	@ (810a54c <_scanf_float+0x420>)
 810a50a:	4630      	mov	r0, r6
 810a50c:	f000 f954 	bl	810a7b8 <siprintf>
 810a510:	e7d0      	b.n	810a4b4 <_scanf_float+0x388>
 810a512:	f011 0f04 	tst.w	r1, #4
 810a516:	9903      	ldr	r1, [sp, #12]
 810a518:	600a      	str	r2, [r1, #0]
 810a51a:	d1dc      	bne.n	810a4d6 <_scanf_float+0x3aa>
 810a51c:	681d      	ldr	r5, [r3, #0]
 810a51e:	4632      	mov	r2, r6
 810a520:	463b      	mov	r3, r7
 810a522:	4630      	mov	r0, r6
 810a524:	4639      	mov	r1, r7
 810a526:	f7f6 fb89 	bl	8100c3c <__aeabi_dcmpun>
 810a52a:	b128      	cbz	r0, 810a538 <_scanf_float+0x40c>
 810a52c:	4808      	ldr	r0, [pc, #32]	@ (810a550 <_scanf_float+0x424>)
 810a52e:	f000 fac9 	bl	810aac4 <nanf>
 810a532:	ed85 0a00 	vstr	s0, [r5]
 810a536:	e7d1      	b.n	810a4dc <_scanf_float+0x3b0>
 810a538:	4630      	mov	r0, r6
 810a53a:	4639      	mov	r1, r7
 810a53c:	f7f6 fbdc 	bl	8100cf8 <__aeabi_d2f>
 810a540:	6028      	str	r0, [r5, #0]
 810a542:	e7cb      	b.n	810a4dc <_scanf_float+0x3b0>
 810a544:	f04f 0900 	mov.w	r9, #0
 810a548:	e629      	b.n	810a19e <_scanf_float+0x72>
 810a54a:	bf00      	nop
 810a54c:	0810e878 	.word	0x0810e878
 810a550:	0810ec0d 	.word	0x0810ec0d

0810a554 <std>:
 810a554:	2300      	movs	r3, #0
 810a556:	b510      	push	{r4, lr}
 810a558:	4604      	mov	r4, r0
 810a55a:	e9c0 3300 	strd	r3, r3, [r0]
 810a55e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a562:	6083      	str	r3, [r0, #8]
 810a564:	8181      	strh	r1, [r0, #12]
 810a566:	6643      	str	r3, [r0, #100]	@ 0x64
 810a568:	81c2      	strh	r2, [r0, #14]
 810a56a:	6183      	str	r3, [r0, #24]
 810a56c:	4619      	mov	r1, r3
 810a56e:	2208      	movs	r2, #8
 810a570:	305c      	adds	r0, #92	@ 0x5c
 810a572:	f000 fa19 	bl	810a9a8 <memset>
 810a576:	4b0d      	ldr	r3, [pc, #52]	@ (810a5ac <std+0x58>)
 810a578:	6263      	str	r3, [r4, #36]	@ 0x24
 810a57a:	4b0d      	ldr	r3, [pc, #52]	@ (810a5b0 <std+0x5c>)
 810a57c:	62a3      	str	r3, [r4, #40]	@ 0x28
 810a57e:	4b0d      	ldr	r3, [pc, #52]	@ (810a5b4 <std+0x60>)
 810a580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810a582:	4b0d      	ldr	r3, [pc, #52]	@ (810a5b8 <std+0x64>)
 810a584:	6323      	str	r3, [r4, #48]	@ 0x30
 810a586:	4b0d      	ldr	r3, [pc, #52]	@ (810a5bc <std+0x68>)
 810a588:	6224      	str	r4, [r4, #32]
 810a58a:	429c      	cmp	r4, r3
 810a58c:	d006      	beq.n	810a59c <std+0x48>
 810a58e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810a592:	4294      	cmp	r4, r2
 810a594:	d002      	beq.n	810a59c <std+0x48>
 810a596:	33d0      	adds	r3, #208	@ 0xd0
 810a598:	429c      	cmp	r4, r3
 810a59a:	d105      	bne.n	810a5a8 <std+0x54>
 810a59c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810a5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a5a4:	f000 ba7c 	b.w	810aaa0 <__retarget_lock_init_recursive>
 810a5a8:	bd10      	pop	{r4, pc}
 810a5aa:	bf00      	nop
 810a5ac:	0810a7f9 	.word	0x0810a7f9
 810a5b0:	0810a81b 	.word	0x0810a81b
 810a5b4:	0810a853 	.word	0x0810a853
 810a5b8:	0810a877 	.word	0x0810a877
 810a5bc:	10000474 	.word	0x10000474

0810a5c0 <stdio_exit_handler>:
 810a5c0:	4a02      	ldr	r2, [pc, #8]	@ (810a5cc <stdio_exit_handler+0xc>)
 810a5c2:	4903      	ldr	r1, [pc, #12]	@ (810a5d0 <stdio_exit_handler+0x10>)
 810a5c4:	4803      	ldr	r0, [pc, #12]	@ (810a5d4 <stdio_exit_handler+0x14>)
 810a5c6:	f000 b869 	b.w	810a69c <_fwalk_sglue>
 810a5ca:	bf00      	nop
 810a5cc:	1000001c 	.word	0x1000001c
 810a5d0:	0810d611 	.word	0x0810d611
 810a5d4:	1000002c 	.word	0x1000002c

0810a5d8 <cleanup_stdio>:
 810a5d8:	6841      	ldr	r1, [r0, #4]
 810a5da:	4b0c      	ldr	r3, [pc, #48]	@ (810a60c <cleanup_stdio+0x34>)
 810a5dc:	4299      	cmp	r1, r3
 810a5de:	b510      	push	{r4, lr}
 810a5e0:	4604      	mov	r4, r0
 810a5e2:	d001      	beq.n	810a5e8 <cleanup_stdio+0x10>
 810a5e4:	f003 f814 	bl	810d610 <_fflush_r>
 810a5e8:	68a1      	ldr	r1, [r4, #8]
 810a5ea:	4b09      	ldr	r3, [pc, #36]	@ (810a610 <cleanup_stdio+0x38>)
 810a5ec:	4299      	cmp	r1, r3
 810a5ee:	d002      	beq.n	810a5f6 <cleanup_stdio+0x1e>
 810a5f0:	4620      	mov	r0, r4
 810a5f2:	f003 f80d 	bl	810d610 <_fflush_r>
 810a5f6:	68e1      	ldr	r1, [r4, #12]
 810a5f8:	4b06      	ldr	r3, [pc, #24]	@ (810a614 <cleanup_stdio+0x3c>)
 810a5fa:	4299      	cmp	r1, r3
 810a5fc:	d004      	beq.n	810a608 <cleanup_stdio+0x30>
 810a5fe:	4620      	mov	r0, r4
 810a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a604:	f003 b804 	b.w	810d610 <_fflush_r>
 810a608:	bd10      	pop	{r4, pc}
 810a60a:	bf00      	nop
 810a60c:	10000474 	.word	0x10000474
 810a610:	100004dc 	.word	0x100004dc
 810a614:	10000544 	.word	0x10000544

0810a618 <global_stdio_init.part.0>:
 810a618:	b510      	push	{r4, lr}
 810a61a:	4b0b      	ldr	r3, [pc, #44]	@ (810a648 <global_stdio_init.part.0+0x30>)
 810a61c:	4c0b      	ldr	r4, [pc, #44]	@ (810a64c <global_stdio_init.part.0+0x34>)
 810a61e:	4a0c      	ldr	r2, [pc, #48]	@ (810a650 <global_stdio_init.part.0+0x38>)
 810a620:	601a      	str	r2, [r3, #0]
 810a622:	4620      	mov	r0, r4
 810a624:	2200      	movs	r2, #0
 810a626:	2104      	movs	r1, #4
 810a628:	f7ff ff94 	bl	810a554 <std>
 810a62c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810a630:	2201      	movs	r2, #1
 810a632:	2109      	movs	r1, #9
 810a634:	f7ff ff8e 	bl	810a554 <std>
 810a638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810a63c:	2202      	movs	r2, #2
 810a63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a642:	2112      	movs	r1, #18
 810a644:	f7ff bf86 	b.w	810a554 <std>
 810a648:	100005ac 	.word	0x100005ac
 810a64c:	10000474 	.word	0x10000474
 810a650:	0810a5c1 	.word	0x0810a5c1

0810a654 <__sfp_lock_acquire>:
 810a654:	4801      	ldr	r0, [pc, #4]	@ (810a65c <__sfp_lock_acquire+0x8>)
 810a656:	f000 ba24 	b.w	810aaa2 <__retarget_lock_acquire_recursive>
 810a65a:	bf00      	nop
 810a65c:	100005b5 	.word	0x100005b5

0810a660 <__sfp_lock_release>:
 810a660:	4801      	ldr	r0, [pc, #4]	@ (810a668 <__sfp_lock_release+0x8>)
 810a662:	f000 ba1f 	b.w	810aaa4 <__retarget_lock_release_recursive>
 810a666:	bf00      	nop
 810a668:	100005b5 	.word	0x100005b5

0810a66c <__sinit>:
 810a66c:	b510      	push	{r4, lr}
 810a66e:	4604      	mov	r4, r0
 810a670:	f7ff fff0 	bl	810a654 <__sfp_lock_acquire>
 810a674:	6a23      	ldr	r3, [r4, #32]
 810a676:	b11b      	cbz	r3, 810a680 <__sinit+0x14>
 810a678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a67c:	f7ff bff0 	b.w	810a660 <__sfp_lock_release>
 810a680:	4b04      	ldr	r3, [pc, #16]	@ (810a694 <__sinit+0x28>)
 810a682:	6223      	str	r3, [r4, #32]
 810a684:	4b04      	ldr	r3, [pc, #16]	@ (810a698 <__sinit+0x2c>)
 810a686:	681b      	ldr	r3, [r3, #0]
 810a688:	2b00      	cmp	r3, #0
 810a68a:	d1f5      	bne.n	810a678 <__sinit+0xc>
 810a68c:	f7ff ffc4 	bl	810a618 <global_stdio_init.part.0>
 810a690:	e7f2      	b.n	810a678 <__sinit+0xc>
 810a692:	bf00      	nop
 810a694:	0810a5d9 	.word	0x0810a5d9
 810a698:	100005ac 	.word	0x100005ac

0810a69c <_fwalk_sglue>:
 810a69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a6a0:	4607      	mov	r7, r0
 810a6a2:	4688      	mov	r8, r1
 810a6a4:	4614      	mov	r4, r2
 810a6a6:	2600      	movs	r6, #0
 810a6a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a6ac:	f1b9 0901 	subs.w	r9, r9, #1
 810a6b0:	d505      	bpl.n	810a6be <_fwalk_sglue+0x22>
 810a6b2:	6824      	ldr	r4, [r4, #0]
 810a6b4:	2c00      	cmp	r4, #0
 810a6b6:	d1f7      	bne.n	810a6a8 <_fwalk_sglue+0xc>
 810a6b8:	4630      	mov	r0, r6
 810a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a6be:	89ab      	ldrh	r3, [r5, #12]
 810a6c0:	2b01      	cmp	r3, #1
 810a6c2:	d907      	bls.n	810a6d4 <_fwalk_sglue+0x38>
 810a6c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a6c8:	3301      	adds	r3, #1
 810a6ca:	d003      	beq.n	810a6d4 <_fwalk_sglue+0x38>
 810a6cc:	4629      	mov	r1, r5
 810a6ce:	4638      	mov	r0, r7
 810a6d0:	47c0      	blx	r8
 810a6d2:	4306      	orrs	r6, r0
 810a6d4:	3568      	adds	r5, #104	@ 0x68
 810a6d6:	e7e9      	b.n	810a6ac <_fwalk_sglue+0x10>

0810a6d8 <iprintf>:
 810a6d8:	b40f      	push	{r0, r1, r2, r3}
 810a6da:	b507      	push	{r0, r1, r2, lr}
 810a6dc:	4906      	ldr	r1, [pc, #24]	@ (810a6f8 <iprintf+0x20>)
 810a6de:	ab04      	add	r3, sp, #16
 810a6e0:	6808      	ldr	r0, [r1, #0]
 810a6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 810a6e6:	6881      	ldr	r1, [r0, #8]
 810a6e8:	9301      	str	r3, [sp, #4]
 810a6ea:	f002 fdf5 	bl	810d2d8 <_vfiprintf_r>
 810a6ee:	b003      	add	sp, #12
 810a6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 810a6f4:	b004      	add	sp, #16
 810a6f6:	4770      	bx	lr
 810a6f8:	10000028 	.word	0x10000028

0810a6fc <_puts_r>:
 810a6fc:	6a03      	ldr	r3, [r0, #32]
 810a6fe:	b570      	push	{r4, r5, r6, lr}
 810a700:	6884      	ldr	r4, [r0, #8]
 810a702:	4605      	mov	r5, r0
 810a704:	460e      	mov	r6, r1
 810a706:	b90b      	cbnz	r3, 810a70c <_puts_r+0x10>
 810a708:	f7ff ffb0 	bl	810a66c <__sinit>
 810a70c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a70e:	07db      	lsls	r3, r3, #31
 810a710:	d405      	bmi.n	810a71e <_puts_r+0x22>
 810a712:	89a3      	ldrh	r3, [r4, #12]
 810a714:	0598      	lsls	r0, r3, #22
 810a716:	d402      	bmi.n	810a71e <_puts_r+0x22>
 810a718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a71a:	f000 f9c2 	bl	810aaa2 <__retarget_lock_acquire_recursive>
 810a71e:	89a3      	ldrh	r3, [r4, #12]
 810a720:	0719      	lsls	r1, r3, #28
 810a722:	d502      	bpl.n	810a72a <_puts_r+0x2e>
 810a724:	6923      	ldr	r3, [r4, #16]
 810a726:	2b00      	cmp	r3, #0
 810a728:	d135      	bne.n	810a796 <_puts_r+0x9a>
 810a72a:	4621      	mov	r1, r4
 810a72c:	4628      	mov	r0, r5
 810a72e:	f000 f8e5 	bl	810a8fc <__swsetup_r>
 810a732:	b380      	cbz	r0, 810a796 <_puts_r+0x9a>
 810a734:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 810a738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a73a:	07da      	lsls	r2, r3, #31
 810a73c:	d405      	bmi.n	810a74a <_puts_r+0x4e>
 810a73e:	89a3      	ldrh	r3, [r4, #12]
 810a740:	059b      	lsls	r3, r3, #22
 810a742:	d402      	bmi.n	810a74a <_puts_r+0x4e>
 810a744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a746:	f000 f9ad 	bl	810aaa4 <__retarget_lock_release_recursive>
 810a74a:	4628      	mov	r0, r5
 810a74c:	bd70      	pop	{r4, r5, r6, pc}
 810a74e:	2b00      	cmp	r3, #0
 810a750:	da04      	bge.n	810a75c <_puts_r+0x60>
 810a752:	69a2      	ldr	r2, [r4, #24]
 810a754:	429a      	cmp	r2, r3
 810a756:	dc17      	bgt.n	810a788 <_puts_r+0x8c>
 810a758:	290a      	cmp	r1, #10
 810a75a:	d015      	beq.n	810a788 <_puts_r+0x8c>
 810a75c:	6823      	ldr	r3, [r4, #0]
 810a75e:	1c5a      	adds	r2, r3, #1
 810a760:	6022      	str	r2, [r4, #0]
 810a762:	7019      	strb	r1, [r3, #0]
 810a764:	68a3      	ldr	r3, [r4, #8]
 810a766:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a76a:	3b01      	subs	r3, #1
 810a76c:	60a3      	str	r3, [r4, #8]
 810a76e:	2900      	cmp	r1, #0
 810a770:	d1ed      	bne.n	810a74e <_puts_r+0x52>
 810a772:	2b00      	cmp	r3, #0
 810a774:	da11      	bge.n	810a79a <_puts_r+0x9e>
 810a776:	4622      	mov	r2, r4
 810a778:	210a      	movs	r1, #10
 810a77a:	4628      	mov	r0, r5
 810a77c:	f000 f87f 	bl	810a87e <__swbuf_r>
 810a780:	3001      	adds	r0, #1
 810a782:	d0d7      	beq.n	810a734 <_puts_r+0x38>
 810a784:	250a      	movs	r5, #10
 810a786:	e7d7      	b.n	810a738 <_puts_r+0x3c>
 810a788:	4622      	mov	r2, r4
 810a78a:	4628      	mov	r0, r5
 810a78c:	f000 f877 	bl	810a87e <__swbuf_r>
 810a790:	3001      	adds	r0, #1
 810a792:	d1e7      	bne.n	810a764 <_puts_r+0x68>
 810a794:	e7ce      	b.n	810a734 <_puts_r+0x38>
 810a796:	3e01      	subs	r6, #1
 810a798:	e7e4      	b.n	810a764 <_puts_r+0x68>
 810a79a:	6823      	ldr	r3, [r4, #0]
 810a79c:	1c5a      	adds	r2, r3, #1
 810a79e:	6022      	str	r2, [r4, #0]
 810a7a0:	220a      	movs	r2, #10
 810a7a2:	701a      	strb	r2, [r3, #0]
 810a7a4:	e7ee      	b.n	810a784 <_puts_r+0x88>
	...

0810a7a8 <puts>:
 810a7a8:	4b02      	ldr	r3, [pc, #8]	@ (810a7b4 <puts+0xc>)
 810a7aa:	4601      	mov	r1, r0
 810a7ac:	6818      	ldr	r0, [r3, #0]
 810a7ae:	f7ff bfa5 	b.w	810a6fc <_puts_r>
 810a7b2:	bf00      	nop
 810a7b4:	10000028 	.word	0x10000028

0810a7b8 <siprintf>:
 810a7b8:	b40e      	push	{r1, r2, r3}
 810a7ba:	b500      	push	{lr}
 810a7bc:	b09c      	sub	sp, #112	@ 0x70
 810a7be:	ab1d      	add	r3, sp, #116	@ 0x74
 810a7c0:	9002      	str	r0, [sp, #8]
 810a7c2:	9006      	str	r0, [sp, #24]
 810a7c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810a7c8:	4809      	ldr	r0, [pc, #36]	@ (810a7f0 <siprintf+0x38>)
 810a7ca:	9107      	str	r1, [sp, #28]
 810a7cc:	9104      	str	r1, [sp, #16]
 810a7ce:	4909      	ldr	r1, [pc, #36]	@ (810a7f4 <siprintf+0x3c>)
 810a7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 810a7d4:	9105      	str	r1, [sp, #20]
 810a7d6:	6800      	ldr	r0, [r0, #0]
 810a7d8:	9301      	str	r3, [sp, #4]
 810a7da:	a902      	add	r1, sp, #8
 810a7dc:	f002 fc56 	bl	810d08c <_svfiprintf_r>
 810a7e0:	9b02      	ldr	r3, [sp, #8]
 810a7e2:	2200      	movs	r2, #0
 810a7e4:	701a      	strb	r2, [r3, #0]
 810a7e6:	b01c      	add	sp, #112	@ 0x70
 810a7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 810a7ec:	b003      	add	sp, #12
 810a7ee:	4770      	bx	lr
 810a7f0:	10000028 	.word	0x10000028
 810a7f4:	ffff0208 	.word	0xffff0208

0810a7f8 <__sread>:
 810a7f8:	b510      	push	{r4, lr}
 810a7fa:	460c      	mov	r4, r1
 810a7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a800:	f000 f900 	bl	810aa04 <_read_r>
 810a804:	2800      	cmp	r0, #0
 810a806:	bfab      	itete	ge
 810a808:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810a80a:	89a3      	ldrhlt	r3, [r4, #12]
 810a80c:	181b      	addge	r3, r3, r0
 810a80e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810a812:	bfac      	ite	ge
 810a814:	6563      	strge	r3, [r4, #84]	@ 0x54
 810a816:	81a3      	strhlt	r3, [r4, #12]
 810a818:	bd10      	pop	{r4, pc}

0810a81a <__swrite>:
 810a81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a81e:	461f      	mov	r7, r3
 810a820:	898b      	ldrh	r3, [r1, #12]
 810a822:	05db      	lsls	r3, r3, #23
 810a824:	4605      	mov	r5, r0
 810a826:	460c      	mov	r4, r1
 810a828:	4616      	mov	r6, r2
 810a82a:	d505      	bpl.n	810a838 <__swrite+0x1e>
 810a82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a830:	2302      	movs	r3, #2
 810a832:	2200      	movs	r2, #0
 810a834:	f000 f8d4 	bl	810a9e0 <_lseek_r>
 810a838:	89a3      	ldrh	r3, [r4, #12]
 810a83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a83e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a842:	81a3      	strh	r3, [r4, #12]
 810a844:	4632      	mov	r2, r6
 810a846:	463b      	mov	r3, r7
 810a848:	4628      	mov	r0, r5
 810a84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a84e:	f000 b8eb 	b.w	810aa28 <_write_r>

0810a852 <__sseek>:
 810a852:	b510      	push	{r4, lr}
 810a854:	460c      	mov	r4, r1
 810a856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a85a:	f000 f8c1 	bl	810a9e0 <_lseek_r>
 810a85e:	1c43      	adds	r3, r0, #1
 810a860:	89a3      	ldrh	r3, [r4, #12]
 810a862:	bf15      	itete	ne
 810a864:	6560      	strne	r0, [r4, #84]	@ 0x54
 810a866:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810a86a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810a86e:	81a3      	strheq	r3, [r4, #12]
 810a870:	bf18      	it	ne
 810a872:	81a3      	strhne	r3, [r4, #12]
 810a874:	bd10      	pop	{r4, pc}

0810a876 <__sclose>:
 810a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a87a:	f000 b8a1 	b.w	810a9c0 <_close_r>

0810a87e <__swbuf_r>:
 810a87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a880:	460e      	mov	r6, r1
 810a882:	4614      	mov	r4, r2
 810a884:	4605      	mov	r5, r0
 810a886:	b118      	cbz	r0, 810a890 <__swbuf_r+0x12>
 810a888:	6a03      	ldr	r3, [r0, #32]
 810a88a:	b90b      	cbnz	r3, 810a890 <__swbuf_r+0x12>
 810a88c:	f7ff feee 	bl	810a66c <__sinit>
 810a890:	69a3      	ldr	r3, [r4, #24]
 810a892:	60a3      	str	r3, [r4, #8]
 810a894:	89a3      	ldrh	r3, [r4, #12]
 810a896:	071a      	lsls	r2, r3, #28
 810a898:	d501      	bpl.n	810a89e <__swbuf_r+0x20>
 810a89a:	6923      	ldr	r3, [r4, #16]
 810a89c:	b943      	cbnz	r3, 810a8b0 <__swbuf_r+0x32>
 810a89e:	4621      	mov	r1, r4
 810a8a0:	4628      	mov	r0, r5
 810a8a2:	f000 f82b 	bl	810a8fc <__swsetup_r>
 810a8a6:	b118      	cbz	r0, 810a8b0 <__swbuf_r+0x32>
 810a8a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 810a8ac:	4638      	mov	r0, r7
 810a8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a8b0:	6823      	ldr	r3, [r4, #0]
 810a8b2:	6922      	ldr	r2, [r4, #16]
 810a8b4:	1a98      	subs	r0, r3, r2
 810a8b6:	6963      	ldr	r3, [r4, #20]
 810a8b8:	b2f6      	uxtb	r6, r6
 810a8ba:	4283      	cmp	r3, r0
 810a8bc:	4637      	mov	r7, r6
 810a8be:	dc05      	bgt.n	810a8cc <__swbuf_r+0x4e>
 810a8c0:	4621      	mov	r1, r4
 810a8c2:	4628      	mov	r0, r5
 810a8c4:	f002 fea4 	bl	810d610 <_fflush_r>
 810a8c8:	2800      	cmp	r0, #0
 810a8ca:	d1ed      	bne.n	810a8a8 <__swbuf_r+0x2a>
 810a8cc:	68a3      	ldr	r3, [r4, #8]
 810a8ce:	3b01      	subs	r3, #1
 810a8d0:	60a3      	str	r3, [r4, #8]
 810a8d2:	6823      	ldr	r3, [r4, #0]
 810a8d4:	1c5a      	adds	r2, r3, #1
 810a8d6:	6022      	str	r2, [r4, #0]
 810a8d8:	701e      	strb	r6, [r3, #0]
 810a8da:	6962      	ldr	r2, [r4, #20]
 810a8dc:	1c43      	adds	r3, r0, #1
 810a8de:	429a      	cmp	r2, r3
 810a8e0:	d004      	beq.n	810a8ec <__swbuf_r+0x6e>
 810a8e2:	89a3      	ldrh	r3, [r4, #12]
 810a8e4:	07db      	lsls	r3, r3, #31
 810a8e6:	d5e1      	bpl.n	810a8ac <__swbuf_r+0x2e>
 810a8e8:	2e0a      	cmp	r6, #10
 810a8ea:	d1df      	bne.n	810a8ac <__swbuf_r+0x2e>
 810a8ec:	4621      	mov	r1, r4
 810a8ee:	4628      	mov	r0, r5
 810a8f0:	f002 fe8e 	bl	810d610 <_fflush_r>
 810a8f4:	2800      	cmp	r0, #0
 810a8f6:	d0d9      	beq.n	810a8ac <__swbuf_r+0x2e>
 810a8f8:	e7d6      	b.n	810a8a8 <__swbuf_r+0x2a>
	...

0810a8fc <__swsetup_r>:
 810a8fc:	b538      	push	{r3, r4, r5, lr}
 810a8fe:	4b29      	ldr	r3, [pc, #164]	@ (810a9a4 <__swsetup_r+0xa8>)
 810a900:	4605      	mov	r5, r0
 810a902:	6818      	ldr	r0, [r3, #0]
 810a904:	460c      	mov	r4, r1
 810a906:	b118      	cbz	r0, 810a910 <__swsetup_r+0x14>
 810a908:	6a03      	ldr	r3, [r0, #32]
 810a90a:	b90b      	cbnz	r3, 810a910 <__swsetup_r+0x14>
 810a90c:	f7ff feae 	bl	810a66c <__sinit>
 810a910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a914:	0719      	lsls	r1, r3, #28
 810a916:	d422      	bmi.n	810a95e <__swsetup_r+0x62>
 810a918:	06da      	lsls	r2, r3, #27
 810a91a:	d407      	bmi.n	810a92c <__swsetup_r+0x30>
 810a91c:	2209      	movs	r2, #9
 810a91e:	602a      	str	r2, [r5, #0]
 810a920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810a924:	81a3      	strh	r3, [r4, #12]
 810a926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810a92a:	e033      	b.n	810a994 <__swsetup_r+0x98>
 810a92c:	0758      	lsls	r0, r3, #29
 810a92e:	d512      	bpl.n	810a956 <__swsetup_r+0x5a>
 810a930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810a932:	b141      	cbz	r1, 810a946 <__swsetup_r+0x4a>
 810a934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810a938:	4299      	cmp	r1, r3
 810a93a:	d002      	beq.n	810a942 <__swsetup_r+0x46>
 810a93c:	4628      	mov	r0, r5
 810a93e:	f000 ff13 	bl	810b768 <_free_r>
 810a942:	2300      	movs	r3, #0
 810a944:	6363      	str	r3, [r4, #52]	@ 0x34
 810a946:	89a3      	ldrh	r3, [r4, #12]
 810a948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810a94c:	81a3      	strh	r3, [r4, #12]
 810a94e:	2300      	movs	r3, #0
 810a950:	6063      	str	r3, [r4, #4]
 810a952:	6923      	ldr	r3, [r4, #16]
 810a954:	6023      	str	r3, [r4, #0]
 810a956:	89a3      	ldrh	r3, [r4, #12]
 810a958:	f043 0308 	orr.w	r3, r3, #8
 810a95c:	81a3      	strh	r3, [r4, #12]
 810a95e:	6923      	ldr	r3, [r4, #16]
 810a960:	b94b      	cbnz	r3, 810a976 <__swsetup_r+0x7a>
 810a962:	89a3      	ldrh	r3, [r4, #12]
 810a964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810a968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810a96c:	d003      	beq.n	810a976 <__swsetup_r+0x7a>
 810a96e:	4621      	mov	r1, r4
 810a970:	4628      	mov	r0, r5
 810a972:	f002 fe9b 	bl	810d6ac <__smakebuf_r>
 810a976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a97a:	f013 0201 	ands.w	r2, r3, #1
 810a97e:	d00a      	beq.n	810a996 <__swsetup_r+0x9a>
 810a980:	2200      	movs	r2, #0
 810a982:	60a2      	str	r2, [r4, #8]
 810a984:	6962      	ldr	r2, [r4, #20]
 810a986:	4252      	negs	r2, r2
 810a988:	61a2      	str	r2, [r4, #24]
 810a98a:	6922      	ldr	r2, [r4, #16]
 810a98c:	b942      	cbnz	r2, 810a9a0 <__swsetup_r+0xa4>
 810a98e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810a992:	d1c5      	bne.n	810a920 <__swsetup_r+0x24>
 810a994:	bd38      	pop	{r3, r4, r5, pc}
 810a996:	0799      	lsls	r1, r3, #30
 810a998:	bf58      	it	pl
 810a99a:	6962      	ldrpl	r2, [r4, #20]
 810a99c:	60a2      	str	r2, [r4, #8]
 810a99e:	e7f4      	b.n	810a98a <__swsetup_r+0x8e>
 810a9a0:	2000      	movs	r0, #0
 810a9a2:	e7f7      	b.n	810a994 <__swsetup_r+0x98>
 810a9a4:	10000028 	.word	0x10000028

0810a9a8 <memset>:
 810a9a8:	4402      	add	r2, r0
 810a9aa:	4603      	mov	r3, r0
 810a9ac:	4293      	cmp	r3, r2
 810a9ae:	d100      	bne.n	810a9b2 <memset+0xa>
 810a9b0:	4770      	bx	lr
 810a9b2:	f803 1b01 	strb.w	r1, [r3], #1
 810a9b6:	e7f9      	b.n	810a9ac <memset+0x4>

0810a9b8 <_localeconv_r>:
 810a9b8:	4800      	ldr	r0, [pc, #0]	@ (810a9bc <_localeconv_r+0x4>)
 810a9ba:	4770      	bx	lr
 810a9bc:	10000168 	.word	0x10000168

0810a9c0 <_close_r>:
 810a9c0:	b538      	push	{r3, r4, r5, lr}
 810a9c2:	4d06      	ldr	r5, [pc, #24]	@ (810a9dc <_close_r+0x1c>)
 810a9c4:	2300      	movs	r3, #0
 810a9c6:	4604      	mov	r4, r0
 810a9c8:	4608      	mov	r0, r1
 810a9ca:	602b      	str	r3, [r5, #0]
 810a9cc:	f7f8 fac6 	bl	8102f5c <_close>
 810a9d0:	1c43      	adds	r3, r0, #1
 810a9d2:	d102      	bne.n	810a9da <_close_r+0x1a>
 810a9d4:	682b      	ldr	r3, [r5, #0]
 810a9d6:	b103      	cbz	r3, 810a9da <_close_r+0x1a>
 810a9d8:	6023      	str	r3, [r4, #0]
 810a9da:	bd38      	pop	{r3, r4, r5, pc}
 810a9dc:	100005b0 	.word	0x100005b0

0810a9e0 <_lseek_r>:
 810a9e0:	b538      	push	{r3, r4, r5, lr}
 810a9e2:	4d07      	ldr	r5, [pc, #28]	@ (810aa00 <_lseek_r+0x20>)
 810a9e4:	4604      	mov	r4, r0
 810a9e6:	4608      	mov	r0, r1
 810a9e8:	4611      	mov	r1, r2
 810a9ea:	2200      	movs	r2, #0
 810a9ec:	602a      	str	r2, [r5, #0]
 810a9ee:	461a      	mov	r2, r3
 810a9f0:	f7f8 fadb 	bl	8102faa <_lseek>
 810a9f4:	1c43      	adds	r3, r0, #1
 810a9f6:	d102      	bne.n	810a9fe <_lseek_r+0x1e>
 810a9f8:	682b      	ldr	r3, [r5, #0]
 810a9fa:	b103      	cbz	r3, 810a9fe <_lseek_r+0x1e>
 810a9fc:	6023      	str	r3, [r4, #0]
 810a9fe:	bd38      	pop	{r3, r4, r5, pc}
 810aa00:	100005b0 	.word	0x100005b0

0810aa04 <_read_r>:
 810aa04:	b538      	push	{r3, r4, r5, lr}
 810aa06:	4d07      	ldr	r5, [pc, #28]	@ (810aa24 <_read_r+0x20>)
 810aa08:	4604      	mov	r4, r0
 810aa0a:	4608      	mov	r0, r1
 810aa0c:	4611      	mov	r1, r2
 810aa0e:	2200      	movs	r2, #0
 810aa10:	602a      	str	r2, [r5, #0]
 810aa12:	461a      	mov	r2, r3
 810aa14:	f7f8 fa69 	bl	8102eea <_read>
 810aa18:	1c43      	adds	r3, r0, #1
 810aa1a:	d102      	bne.n	810aa22 <_read_r+0x1e>
 810aa1c:	682b      	ldr	r3, [r5, #0]
 810aa1e:	b103      	cbz	r3, 810aa22 <_read_r+0x1e>
 810aa20:	6023      	str	r3, [r4, #0]
 810aa22:	bd38      	pop	{r3, r4, r5, pc}
 810aa24:	100005b0 	.word	0x100005b0

0810aa28 <_write_r>:
 810aa28:	b538      	push	{r3, r4, r5, lr}
 810aa2a:	4d07      	ldr	r5, [pc, #28]	@ (810aa48 <_write_r+0x20>)
 810aa2c:	4604      	mov	r4, r0
 810aa2e:	4608      	mov	r0, r1
 810aa30:	4611      	mov	r1, r2
 810aa32:	2200      	movs	r2, #0
 810aa34:	602a      	str	r2, [r5, #0]
 810aa36:	461a      	mov	r2, r3
 810aa38:	f7f8 fa74 	bl	8102f24 <_write>
 810aa3c:	1c43      	adds	r3, r0, #1
 810aa3e:	d102      	bne.n	810aa46 <_write_r+0x1e>
 810aa40:	682b      	ldr	r3, [r5, #0]
 810aa42:	b103      	cbz	r3, 810aa46 <_write_r+0x1e>
 810aa44:	6023      	str	r3, [r4, #0]
 810aa46:	bd38      	pop	{r3, r4, r5, pc}
 810aa48:	100005b0 	.word	0x100005b0

0810aa4c <__errno>:
 810aa4c:	4b01      	ldr	r3, [pc, #4]	@ (810aa54 <__errno+0x8>)
 810aa4e:	6818      	ldr	r0, [r3, #0]
 810aa50:	4770      	bx	lr
 810aa52:	bf00      	nop
 810aa54:	10000028 	.word	0x10000028

0810aa58 <__libc_init_array>:
 810aa58:	b570      	push	{r4, r5, r6, lr}
 810aa5a:	4d0d      	ldr	r5, [pc, #52]	@ (810aa90 <__libc_init_array+0x38>)
 810aa5c:	4c0d      	ldr	r4, [pc, #52]	@ (810aa94 <__libc_init_array+0x3c>)
 810aa5e:	1b64      	subs	r4, r4, r5
 810aa60:	10a4      	asrs	r4, r4, #2
 810aa62:	2600      	movs	r6, #0
 810aa64:	42a6      	cmp	r6, r4
 810aa66:	d109      	bne.n	810aa7c <__libc_init_array+0x24>
 810aa68:	4d0b      	ldr	r5, [pc, #44]	@ (810aa98 <__libc_init_array+0x40>)
 810aa6a:	4c0c      	ldr	r4, [pc, #48]	@ (810aa9c <__libc_init_array+0x44>)
 810aa6c:	f003 fbe4 	bl	810e238 <_init>
 810aa70:	1b64      	subs	r4, r4, r5
 810aa72:	10a4      	asrs	r4, r4, #2
 810aa74:	2600      	movs	r6, #0
 810aa76:	42a6      	cmp	r6, r4
 810aa78:	d105      	bne.n	810aa86 <__libc_init_array+0x2e>
 810aa7a:	bd70      	pop	{r4, r5, r6, pc}
 810aa7c:	f855 3b04 	ldr.w	r3, [r5], #4
 810aa80:	4798      	blx	r3
 810aa82:	3601      	adds	r6, #1
 810aa84:	e7ee      	b.n	810aa64 <__libc_init_array+0xc>
 810aa86:	f855 3b04 	ldr.w	r3, [r5], #4
 810aa8a:	4798      	blx	r3
 810aa8c:	3601      	adds	r6, #1
 810aa8e:	e7f2      	b.n	810aa76 <__libc_init_array+0x1e>
 810aa90:	0810ec78 	.word	0x0810ec78
 810aa94:	0810ec78 	.word	0x0810ec78
 810aa98:	0810ec78 	.word	0x0810ec78
 810aa9c:	0810ec7c 	.word	0x0810ec7c

0810aaa0 <__retarget_lock_init_recursive>:
 810aaa0:	4770      	bx	lr

0810aaa2 <__retarget_lock_acquire_recursive>:
 810aaa2:	4770      	bx	lr

0810aaa4 <__retarget_lock_release_recursive>:
 810aaa4:	4770      	bx	lr

0810aaa6 <memcpy>:
 810aaa6:	440a      	add	r2, r1
 810aaa8:	4291      	cmp	r1, r2
 810aaaa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 810aaae:	d100      	bne.n	810aab2 <memcpy+0xc>
 810aab0:	4770      	bx	lr
 810aab2:	b510      	push	{r4, lr}
 810aab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 810aabc:	4291      	cmp	r1, r2
 810aabe:	d1f9      	bne.n	810aab4 <memcpy+0xe>
 810aac0:	bd10      	pop	{r4, pc}
	...

0810aac4 <nanf>:
 810aac4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810aacc <nanf+0x8>
 810aac8:	4770      	bx	lr
 810aaca:	bf00      	nop
 810aacc:	7fc00000 	.word	0x7fc00000

0810aad0 <quorem>:
 810aad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aad4:	6903      	ldr	r3, [r0, #16]
 810aad6:	690c      	ldr	r4, [r1, #16]
 810aad8:	42a3      	cmp	r3, r4
 810aada:	4607      	mov	r7, r0
 810aadc:	db7e      	blt.n	810abdc <quorem+0x10c>
 810aade:	3c01      	subs	r4, #1
 810aae0:	f101 0814 	add.w	r8, r1, #20
 810aae4:	00a3      	lsls	r3, r4, #2
 810aae6:	f100 0514 	add.w	r5, r0, #20
 810aaea:	9300      	str	r3, [sp, #0]
 810aaec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810aaf0:	9301      	str	r3, [sp, #4]
 810aaf2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810aaf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810aafa:	3301      	adds	r3, #1
 810aafc:	429a      	cmp	r2, r3
 810aafe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ab02:	fbb2 f6f3 	udiv	r6, r2, r3
 810ab06:	d32e      	bcc.n	810ab66 <quorem+0x96>
 810ab08:	f04f 0a00 	mov.w	sl, #0
 810ab0c:	46c4      	mov	ip, r8
 810ab0e:	46ae      	mov	lr, r5
 810ab10:	46d3      	mov	fp, sl
 810ab12:	f85c 3b04 	ldr.w	r3, [ip], #4
 810ab16:	b298      	uxth	r0, r3
 810ab18:	fb06 a000 	mla	r0, r6, r0, sl
 810ab1c:	0c02      	lsrs	r2, r0, #16
 810ab1e:	0c1b      	lsrs	r3, r3, #16
 810ab20:	fb06 2303 	mla	r3, r6, r3, r2
 810ab24:	f8de 2000 	ldr.w	r2, [lr]
 810ab28:	b280      	uxth	r0, r0
 810ab2a:	b292      	uxth	r2, r2
 810ab2c:	1a12      	subs	r2, r2, r0
 810ab2e:	445a      	add	r2, fp
 810ab30:	f8de 0000 	ldr.w	r0, [lr]
 810ab34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810ab38:	b29b      	uxth	r3, r3
 810ab3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810ab3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810ab42:	b292      	uxth	r2, r2
 810ab44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810ab48:	45e1      	cmp	r9, ip
 810ab4a:	f84e 2b04 	str.w	r2, [lr], #4
 810ab4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810ab52:	d2de      	bcs.n	810ab12 <quorem+0x42>
 810ab54:	9b00      	ldr	r3, [sp, #0]
 810ab56:	58eb      	ldr	r3, [r5, r3]
 810ab58:	b92b      	cbnz	r3, 810ab66 <quorem+0x96>
 810ab5a:	9b01      	ldr	r3, [sp, #4]
 810ab5c:	3b04      	subs	r3, #4
 810ab5e:	429d      	cmp	r5, r3
 810ab60:	461a      	mov	r2, r3
 810ab62:	d32f      	bcc.n	810abc4 <quorem+0xf4>
 810ab64:	613c      	str	r4, [r7, #16]
 810ab66:	4638      	mov	r0, r7
 810ab68:	f001 f9c2 	bl	810bef0 <__mcmp>
 810ab6c:	2800      	cmp	r0, #0
 810ab6e:	db25      	blt.n	810abbc <quorem+0xec>
 810ab70:	4629      	mov	r1, r5
 810ab72:	2000      	movs	r0, #0
 810ab74:	f858 2b04 	ldr.w	r2, [r8], #4
 810ab78:	f8d1 c000 	ldr.w	ip, [r1]
 810ab7c:	fa1f fe82 	uxth.w	lr, r2
 810ab80:	fa1f f38c 	uxth.w	r3, ip
 810ab84:	eba3 030e 	sub.w	r3, r3, lr
 810ab88:	4403      	add	r3, r0
 810ab8a:	0c12      	lsrs	r2, r2, #16
 810ab8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810ab90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810ab94:	b29b      	uxth	r3, r3
 810ab96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ab9a:	45c1      	cmp	r9, r8
 810ab9c:	f841 3b04 	str.w	r3, [r1], #4
 810aba0:	ea4f 4022 	mov.w	r0, r2, asr #16
 810aba4:	d2e6      	bcs.n	810ab74 <quorem+0xa4>
 810aba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810abaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810abae:	b922      	cbnz	r2, 810abba <quorem+0xea>
 810abb0:	3b04      	subs	r3, #4
 810abb2:	429d      	cmp	r5, r3
 810abb4:	461a      	mov	r2, r3
 810abb6:	d30b      	bcc.n	810abd0 <quorem+0x100>
 810abb8:	613c      	str	r4, [r7, #16]
 810abba:	3601      	adds	r6, #1
 810abbc:	4630      	mov	r0, r6
 810abbe:	b003      	add	sp, #12
 810abc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810abc4:	6812      	ldr	r2, [r2, #0]
 810abc6:	3b04      	subs	r3, #4
 810abc8:	2a00      	cmp	r2, #0
 810abca:	d1cb      	bne.n	810ab64 <quorem+0x94>
 810abcc:	3c01      	subs	r4, #1
 810abce:	e7c6      	b.n	810ab5e <quorem+0x8e>
 810abd0:	6812      	ldr	r2, [r2, #0]
 810abd2:	3b04      	subs	r3, #4
 810abd4:	2a00      	cmp	r2, #0
 810abd6:	d1ef      	bne.n	810abb8 <quorem+0xe8>
 810abd8:	3c01      	subs	r4, #1
 810abda:	e7ea      	b.n	810abb2 <quorem+0xe2>
 810abdc:	2000      	movs	r0, #0
 810abde:	e7ee      	b.n	810abbe <quorem+0xee>

0810abe0 <_dtoa_r>:
 810abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810abe4:	69c7      	ldr	r7, [r0, #28]
 810abe6:	b099      	sub	sp, #100	@ 0x64
 810abe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 810abec:	ec55 4b10 	vmov	r4, r5, d0
 810abf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810abf2:	9109      	str	r1, [sp, #36]	@ 0x24
 810abf4:	4683      	mov	fp, r0
 810abf6:	920e      	str	r2, [sp, #56]	@ 0x38
 810abf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 810abfa:	b97f      	cbnz	r7, 810ac1c <_dtoa_r+0x3c>
 810abfc:	2010      	movs	r0, #16
 810abfe:	f000 fdfd 	bl	810b7fc <malloc>
 810ac02:	4602      	mov	r2, r0
 810ac04:	f8cb 001c 	str.w	r0, [fp, #28]
 810ac08:	b920      	cbnz	r0, 810ac14 <_dtoa_r+0x34>
 810ac0a:	4ba7      	ldr	r3, [pc, #668]	@ (810aea8 <_dtoa_r+0x2c8>)
 810ac0c:	21ef      	movs	r1, #239	@ 0xef
 810ac0e:	48a7      	ldr	r0, [pc, #668]	@ (810aeac <_dtoa_r+0x2cc>)
 810ac10:	f002 fdee 	bl	810d7f0 <__assert_func>
 810ac14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810ac18:	6007      	str	r7, [r0, #0]
 810ac1a:	60c7      	str	r7, [r0, #12]
 810ac1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ac20:	6819      	ldr	r1, [r3, #0]
 810ac22:	b159      	cbz	r1, 810ac3c <_dtoa_r+0x5c>
 810ac24:	685a      	ldr	r2, [r3, #4]
 810ac26:	604a      	str	r2, [r1, #4]
 810ac28:	2301      	movs	r3, #1
 810ac2a:	4093      	lsls	r3, r2
 810ac2c:	608b      	str	r3, [r1, #8]
 810ac2e:	4658      	mov	r0, fp
 810ac30:	f000 feda 	bl	810b9e8 <_Bfree>
 810ac34:	f8db 301c 	ldr.w	r3, [fp, #28]
 810ac38:	2200      	movs	r2, #0
 810ac3a:	601a      	str	r2, [r3, #0]
 810ac3c:	1e2b      	subs	r3, r5, #0
 810ac3e:	bfb9      	ittee	lt
 810ac40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810ac44:	9303      	strlt	r3, [sp, #12]
 810ac46:	2300      	movge	r3, #0
 810ac48:	6033      	strge	r3, [r6, #0]
 810ac4a:	9f03      	ldr	r7, [sp, #12]
 810ac4c:	4b98      	ldr	r3, [pc, #608]	@ (810aeb0 <_dtoa_r+0x2d0>)
 810ac4e:	bfbc      	itt	lt
 810ac50:	2201      	movlt	r2, #1
 810ac52:	6032      	strlt	r2, [r6, #0]
 810ac54:	43bb      	bics	r3, r7
 810ac56:	d112      	bne.n	810ac7e <_dtoa_r+0x9e>
 810ac58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810ac5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 810ac5e:	6013      	str	r3, [r2, #0]
 810ac60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810ac64:	4323      	orrs	r3, r4
 810ac66:	f000 854d 	beq.w	810b704 <_dtoa_r+0xb24>
 810ac6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ac6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810aec4 <_dtoa_r+0x2e4>
 810ac70:	2b00      	cmp	r3, #0
 810ac72:	f000 854f 	beq.w	810b714 <_dtoa_r+0xb34>
 810ac76:	f10a 0303 	add.w	r3, sl, #3
 810ac7a:	f000 bd49 	b.w	810b710 <_dtoa_r+0xb30>
 810ac7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 810ac82:	2200      	movs	r2, #0
 810ac84:	ec51 0b17 	vmov	r0, r1, d7
 810ac88:	2300      	movs	r3, #0
 810ac8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810ac8e:	f7f5 ffa3 	bl	8100bd8 <__aeabi_dcmpeq>
 810ac92:	4680      	mov	r8, r0
 810ac94:	b158      	cbz	r0, 810acae <_dtoa_r+0xce>
 810ac96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810ac98:	2301      	movs	r3, #1
 810ac9a:	6013      	str	r3, [r2, #0]
 810ac9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ac9e:	b113      	cbz	r3, 810aca6 <_dtoa_r+0xc6>
 810aca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810aca2:	4b84      	ldr	r3, [pc, #528]	@ (810aeb4 <_dtoa_r+0x2d4>)
 810aca4:	6013      	str	r3, [r2, #0]
 810aca6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810aec8 <_dtoa_r+0x2e8>
 810acaa:	f000 bd33 	b.w	810b714 <_dtoa_r+0xb34>
 810acae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810acb2:	aa16      	add	r2, sp, #88	@ 0x58
 810acb4:	a917      	add	r1, sp, #92	@ 0x5c
 810acb6:	4658      	mov	r0, fp
 810acb8:	f001 fa3a 	bl	810c130 <__d2b>
 810acbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810acc0:	4681      	mov	r9, r0
 810acc2:	2e00      	cmp	r6, #0
 810acc4:	d077      	beq.n	810adb6 <_dtoa_r+0x1d6>
 810acc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810acc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810accc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810acd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810acd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810acdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810ace0:	4619      	mov	r1, r3
 810ace2:	2200      	movs	r2, #0
 810ace4:	4b74      	ldr	r3, [pc, #464]	@ (810aeb8 <_dtoa_r+0x2d8>)
 810ace6:	f7f5 fb57 	bl	8100398 <__aeabi_dsub>
 810acea:	a369      	add	r3, pc, #420	@ (adr r3, 810ae90 <_dtoa_r+0x2b0>)
 810acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acf0:	f7f5 fd0a 	bl	8100708 <__aeabi_dmul>
 810acf4:	a368      	add	r3, pc, #416	@ (adr r3, 810ae98 <_dtoa_r+0x2b8>)
 810acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810acfa:	f7f5 fb4f 	bl	810039c <__adddf3>
 810acfe:	4604      	mov	r4, r0
 810ad00:	4630      	mov	r0, r6
 810ad02:	460d      	mov	r5, r1
 810ad04:	f7f5 fc96 	bl	8100634 <__aeabi_i2d>
 810ad08:	a365      	add	r3, pc, #404	@ (adr r3, 810aea0 <_dtoa_r+0x2c0>)
 810ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad0e:	f7f5 fcfb 	bl	8100708 <__aeabi_dmul>
 810ad12:	4602      	mov	r2, r0
 810ad14:	460b      	mov	r3, r1
 810ad16:	4620      	mov	r0, r4
 810ad18:	4629      	mov	r1, r5
 810ad1a:	f7f5 fb3f 	bl	810039c <__adddf3>
 810ad1e:	4604      	mov	r4, r0
 810ad20:	460d      	mov	r5, r1
 810ad22:	f7f5 ffa1 	bl	8100c68 <__aeabi_d2iz>
 810ad26:	2200      	movs	r2, #0
 810ad28:	4607      	mov	r7, r0
 810ad2a:	2300      	movs	r3, #0
 810ad2c:	4620      	mov	r0, r4
 810ad2e:	4629      	mov	r1, r5
 810ad30:	f7f5 ff5c 	bl	8100bec <__aeabi_dcmplt>
 810ad34:	b140      	cbz	r0, 810ad48 <_dtoa_r+0x168>
 810ad36:	4638      	mov	r0, r7
 810ad38:	f7f5 fc7c 	bl	8100634 <__aeabi_i2d>
 810ad3c:	4622      	mov	r2, r4
 810ad3e:	462b      	mov	r3, r5
 810ad40:	f7f5 ff4a 	bl	8100bd8 <__aeabi_dcmpeq>
 810ad44:	b900      	cbnz	r0, 810ad48 <_dtoa_r+0x168>
 810ad46:	3f01      	subs	r7, #1
 810ad48:	2f16      	cmp	r7, #22
 810ad4a:	d851      	bhi.n	810adf0 <_dtoa_r+0x210>
 810ad4c:	4b5b      	ldr	r3, [pc, #364]	@ (810aebc <_dtoa_r+0x2dc>)
 810ad4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ad5a:	f7f5 ff47 	bl	8100bec <__aeabi_dcmplt>
 810ad5e:	2800      	cmp	r0, #0
 810ad60:	d048      	beq.n	810adf4 <_dtoa_r+0x214>
 810ad62:	3f01      	subs	r7, #1
 810ad64:	2300      	movs	r3, #0
 810ad66:	9312      	str	r3, [sp, #72]	@ 0x48
 810ad68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810ad6a:	1b9b      	subs	r3, r3, r6
 810ad6c:	1e5a      	subs	r2, r3, #1
 810ad6e:	bf44      	itt	mi
 810ad70:	f1c3 0801 	rsbmi	r8, r3, #1
 810ad74:	2300      	movmi	r3, #0
 810ad76:	9208      	str	r2, [sp, #32]
 810ad78:	bf54      	ite	pl
 810ad7a:	f04f 0800 	movpl.w	r8, #0
 810ad7e:	9308      	strmi	r3, [sp, #32]
 810ad80:	2f00      	cmp	r7, #0
 810ad82:	db39      	blt.n	810adf8 <_dtoa_r+0x218>
 810ad84:	9b08      	ldr	r3, [sp, #32]
 810ad86:	970f      	str	r7, [sp, #60]	@ 0x3c
 810ad88:	443b      	add	r3, r7
 810ad8a:	9308      	str	r3, [sp, #32]
 810ad8c:	2300      	movs	r3, #0
 810ad8e:	930a      	str	r3, [sp, #40]	@ 0x28
 810ad90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ad92:	2b09      	cmp	r3, #9
 810ad94:	d864      	bhi.n	810ae60 <_dtoa_r+0x280>
 810ad96:	2b05      	cmp	r3, #5
 810ad98:	bfc4      	itt	gt
 810ad9a:	3b04      	subgt	r3, #4
 810ad9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810ad9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ada0:	f1a3 0302 	sub.w	r3, r3, #2
 810ada4:	bfcc      	ite	gt
 810ada6:	2400      	movgt	r4, #0
 810ada8:	2401      	movle	r4, #1
 810adaa:	2b03      	cmp	r3, #3
 810adac:	d863      	bhi.n	810ae76 <_dtoa_r+0x296>
 810adae:	e8df f003 	tbb	[pc, r3]
 810adb2:	372a      	.short	0x372a
 810adb4:	5535      	.short	0x5535
 810adb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810adba:	441e      	add	r6, r3
 810adbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810adc0:	2b20      	cmp	r3, #32
 810adc2:	bfc1      	itttt	gt
 810adc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810adc8:	409f      	lslgt	r7, r3
 810adca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810adce:	fa24 f303 	lsrgt.w	r3, r4, r3
 810add2:	bfd6      	itet	le
 810add4:	f1c3 0320 	rsble	r3, r3, #32
 810add8:	ea47 0003 	orrgt.w	r0, r7, r3
 810addc:	fa04 f003 	lslle.w	r0, r4, r3
 810ade0:	f7f5 fc18 	bl	8100614 <__aeabi_ui2d>
 810ade4:	2201      	movs	r2, #1
 810ade6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810adea:	3e01      	subs	r6, #1
 810adec:	9214      	str	r2, [sp, #80]	@ 0x50
 810adee:	e777      	b.n	810ace0 <_dtoa_r+0x100>
 810adf0:	2301      	movs	r3, #1
 810adf2:	e7b8      	b.n	810ad66 <_dtoa_r+0x186>
 810adf4:	9012      	str	r0, [sp, #72]	@ 0x48
 810adf6:	e7b7      	b.n	810ad68 <_dtoa_r+0x188>
 810adf8:	427b      	negs	r3, r7
 810adfa:	930a      	str	r3, [sp, #40]	@ 0x28
 810adfc:	2300      	movs	r3, #0
 810adfe:	eba8 0807 	sub.w	r8, r8, r7
 810ae02:	930f      	str	r3, [sp, #60]	@ 0x3c
 810ae04:	e7c4      	b.n	810ad90 <_dtoa_r+0x1b0>
 810ae06:	2300      	movs	r3, #0
 810ae08:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ae0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ae0c:	2b00      	cmp	r3, #0
 810ae0e:	dc35      	bgt.n	810ae7c <_dtoa_r+0x29c>
 810ae10:	2301      	movs	r3, #1
 810ae12:	9300      	str	r3, [sp, #0]
 810ae14:	9307      	str	r3, [sp, #28]
 810ae16:	461a      	mov	r2, r3
 810ae18:	920e      	str	r2, [sp, #56]	@ 0x38
 810ae1a:	e00b      	b.n	810ae34 <_dtoa_r+0x254>
 810ae1c:	2301      	movs	r3, #1
 810ae1e:	e7f3      	b.n	810ae08 <_dtoa_r+0x228>
 810ae20:	2300      	movs	r3, #0
 810ae22:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ae24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ae26:	18fb      	adds	r3, r7, r3
 810ae28:	9300      	str	r3, [sp, #0]
 810ae2a:	3301      	adds	r3, #1
 810ae2c:	2b01      	cmp	r3, #1
 810ae2e:	9307      	str	r3, [sp, #28]
 810ae30:	bfb8      	it	lt
 810ae32:	2301      	movlt	r3, #1
 810ae34:	f8db 001c 	ldr.w	r0, [fp, #28]
 810ae38:	2100      	movs	r1, #0
 810ae3a:	2204      	movs	r2, #4
 810ae3c:	f102 0514 	add.w	r5, r2, #20
 810ae40:	429d      	cmp	r5, r3
 810ae42:	d91f      	bls.n	810ae84 <_dtoa_r+0x2a4>
 810ae44:	6041      	str	r1, [r0, #4]
 810ae46:	4658      	mov	r0, fp
 810ae48:	f000 fd8e 	bl	810b968 <_Balloc>
 810ae4c:	4682      	mov	sl, r0
 810ae4e:	2800      	cmp	r0, #0
 810ae50:	d13c      	bne.n	810aecc <_dtoa_r+0x2ec>
 810ae52:	4b1b      	ldr	r3, [pc, #108]	@ (810aec0 <_dtoa_r+0x2e0>)
 810ae54:	4602      	mov	r2, r0
 810ae56:	f240 11af 	movw	r1, #431	@ 0x1af
 810ae5a:	e6d8      	b.n	810ac0e <_dtoa_r+0x2e>
 810ae5c:	2301      	movs	r3, #1
 810ae5e:	e7e0      	b.n	810ae22 <_dtoa_r+0x242>
 810ae60:	2401      	movs	r4, #1
 810ae62:	2300      	movs	r3, #0
 810ae64:	9309      	str	r3, [sp, #36]	@ 0x24
 810ae66:	940b      	str	r4, [sp, #44]	@ 0x2c
 810ae68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810ae6c:	9300      	str	r3, [sp, #0]
 810ae6e:	9307      	str	r3, [sp, #28]
 810ae70:	2200      	movs	r2, #0
 810ae72:	2312      	movs	r3, #18
 810ae74:	e7d0      	b.n	810ae18 <_dtoa_r+0x238>
 810ae76:	2301      	movs	r3, #1
 810ae78:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ae7a:	e7f5      	b.n	810ae68 <_dtoa_r+0x288>
 810ae7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ae7e:	9300      	str	r3, [sp, #0]
 810ae80:	9307      	str	r3, [sp, #28]
 810ae82:	e7d7      	b.n	810ae34 <_dtoa_r+0x254>
 810ae84:	3101      	adds	r1, #1
 810ae86:	0052      	lsls	r2, r2, #1
 810ae88:	e7d8      	b.n	810ae3c <_dtoa_r+0x25c>
 810ae8a:	bf00      	nop
 810ae8c:	f3af 8000 	nop.w
 810ae90:	636f4361 	.word	0x636f4361
 810ae94:	3fd287a7 	.word	0x3fd287a7
 810ae98:	8b60c8b3 	.word	0x8b60c8b3
 810ae9c:	3fc68a28 	.word	0x3fc68a28
 810aea0:	509f79fb 	.word	0x509f79fb
 810aea4:	3fd34413 	.word	0x3fd34413
 810aea8:	0810e88a 	.word	0x0810e88a
 810aeac:	0810e8a1 	.word	0x0810e8a1
 810aeb0:	7ff00000 	.word	0x7ff00000
 810aeb4:	0810e855 	.word	0x0810e855
 810aeb8:	3ff80000 	.word	0x3ff80000
 810aebc:	0810e998 	.word	0x0810e998
 810aec0:	0810e8f9 	.word	0x0810e8f9
 810aec4:	0810e886 	.word	0x0810e886
 810aec8:	0810e854 	.word	0x0810e854
 810aecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 810aed0:	6018      	str	r0, [r3, #0]
 810aed2:	9b07      	ldr	r3, [sp, #28]
 810aed4:	2b0e      	cmp	r3, #14
 810aed6:	f200 80a4 	bhi.w	810b022 <_dtoa_r+0x442>
 810aeda:	2c00      	cmp	r4, #0
 810aedc:	f000 80a1 	beq.w	810b022 <_dtoa_r+0x442>
 810aee0:	2f00      	cmp	r7, #0
 810aee2:	dd33      	ble.n	810af4c <_dtoa_r+0x36c>
 810aee4:	4bad      	ldr	r3, [pc, #692]	@ (810b19c <_dtoa_r+0x5bc>)
 810aee6:	f007 020f 	and.w	r2, r7, #15
 810aeea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810aeee:	ed93 7b00 	vldr	d7, [r3]
 810aef2:	05f8      	lsls	r0, r7, #23
 810aef4:	ed8d 7b04 	vstr	d7, [sp, #16]
 810aef8:	ea4f 1427 	mov.w	r4, r7, asr #4
 810aefc:	d516      	bpl.n	810af2c <_dtoa_r+0x34c>
 810aefe:	4ba8      	ldr	r3, [pc, #672]	@ (810b1a0 <_dtoa_r+0x5c0>)
 810af00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810af04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810af08:	f7f5 fd28 	bl	810095c <__aeabi_ddiv>
 810af0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810af10:	f004 040f 	and.w	r4, r4, #15
 810af14:	2603      	movs	r6, #3
 810af16:	4da2      	ldr	r5, [pc, #648]	@ (810b1a0 <_dtoa_r+0x5c0>)
 810af18:	b954      	cbnz	r4, 810af30 <_dtoa_r+0x350>
 810af1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810af1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810af22:	f7f5 fd1b 	bl	810095c <__aeabi_ddiv>
 810af26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810af2a:	e028      	b.n	810af7e <_dtoa_r+0x39e>
 810af2c:	2602      	movs	r6, #2
 810af2e:	e7f2      	b.n	810af16 <_dtoa_r+0x336>
 810af30:	07e1      	lsls	r1, r4, #31
 810af32:	d508      	bpl.n	810af46 <_dtoa_r+0x366>
 810af34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810af38:	e9d5 2300 	ldrd	r2, r3, [r5]
 810af3c:	f7f5 fbe4 	bl	8100708 <__aeabi_dmul>
 810af40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810af44:	3601      	adds	r6, #1
 810af46:	1064      	asrs	r4, r4, #1
 810af48:	3508      	adds	r5, #8
 810af4a:	e7e5      	b.n	810af18 <_dtoa_r+0x338>
 810af4c:	f000 80d2 	beq.w	810b0f4 <_dtoa_r+0x514>
 810af50:	427c      	negs	r4, r7
 810af52:	4b92      	ldr	r3, [pc, #584]	@ (810b19c <_dtoa_r+0x5bc>)
 810af54:	4d92      	ldr	r5, [pc, #584]	@ (810b1a0 <_dtoa_r+0x5c0>)
 810af56:	f004 020f 	and.w	r2, r4, #15
 810af5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810af66:	f7f5 fbcf 	bl	8100708 <__aeabi_dmul>
 810af6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810af6e:	1124      	asrs	r4, r4, #4
 810af70:	2300      	movs	r3, #0
 810af72:	2602      	movs	r6, #2
 810af74:	2c00      	cmp	r4, #0
 810af76:	f040 80b2 	bne.w	810b0de <_dtoa_r+0x4fe>
 810af7a:	2b00      	cmp	r3, #0
 810af7c:	d1d3      	bne.n	810af26 <_dtoa_r+0x346>
 810af7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810af80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810af84:	2b00      	cmp	r3, #0
 810af86:	f000 80b7 	beq.w	810b0f8 <_dtoa_r+0x518>
 810af8a:	4b86      	ldr	r3, [pc, #536]	@ (810b1a4 <_dtoa_r+0x5c4>)
 810af8c:	2200      	movs	r2, #0
 810af8e:	4620      	mov	r0, r4
 810af90:	4629      	mov	r1, r5
 810af92:	f7f5 fe2b 	bl	8100bec <__aeabi_dcmplt>
 810af96:	2800      	cmp	r0, #0
 810af98:	f000 80ae 	beq.w	810b0f8 <_dtoa_r+0x518>
 810af9c:	9b07      	ldr	r3, [sp, #28]
 810af9e:	2b00      	cmp	r3, #0
 810afa0:	f000 80aa 	beq.w	810b0f8 <_dtoa_r+0x518>
 810afa4:	9b00      	ldr	r3, [sp, #0]
 810afa6:	2b00      	cmp	r3, #0
 810afa8:	dd37      	ble.n	810b01a <_dtoa_r+0x43a>
 810afaa:	1e7b      	subs	r3, r7, #1
 810afac:	9304      	str	r3, [sp, #16]
 810afae:	4620      	mov	r0, r4
 810afb0:	4b7d      	ldr	r3, [pc, #500]	@ (810b1a8 <_dtoa_r+0x5c8>)
 810afb2:	2200      	movs	r2, #0
 810afb4:	4629      	mov	r1, r5
 810afb6:	f7f5 fba7 	bl	8100708 <__aeabi_dmul>
 810afba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810afbe:	9c00      	ldr	r4, [sp, #0]
 810afc0:	3601      	adds	r6, #1
 810afc2:	4630      	mov	r0, r6
 810afc4:	f7f5 fb36 	bl	8100634 <__aeabi_i2d>
 810afc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810afcc:	f7f5 fb9c 	bl	8100708 <__aeabi_dmul>
 810afd0:	4b76      	ldr	r3, [pc, #472]	@ (810b1ac <_dtoa_r+0x5cc>)
 810afd2:	2200      	movs	r2, #0
 810afd4:	f7f5 f9e2 	bl	810039c <__adddf3>
 810afd8:	4605      	mov	r5, r0
 810afda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810afde:	2c00      	cmp	r4, #0
 810afe0:	f040 808d 	bne.w	810b0fe <_dtoa_r+0x51e>
 810afe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810afe8:	4b71      	ldr	r3, [pc, #452]	@ (810b1b0 <_dtoa_r+0x5d0>)
 810afea:	2200      	movs	r2, #0
 810afec:	f7f5 f9d4 	bl	8100398 <__aeabi_dsub>
 810aff0:	4602      	mov	r2, r0
 810aff2:	460b      	mov	r3, r1
 810aff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810aff8:	462a      	mov	r2, r5
 810affa:	4633      	mov	r3, r6
 810affc:	f7f5 fe14 	bl	8100c28 <__aeabi_dcmpgt>
 810b000:	2800      	cmp	r0, #0
 810b002:	f040 828b 	bne.w	810b51c <_dtoa_r+0x93c>
 810b006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b00a:	462a      	mov	r2, r5
 810b00c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810b010:	f7f5 fdec 	bl	8100bec <__aeabi_dcmplt>
 810b014:	2800      	cmp	r0, #0
 810b016:	f040 8128 	bne.w	810b26a <_dtoa_r+0x68a>
 810b01a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810b01e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810b022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810b024:	2b00      	cmp	r3, #0
 810b026:	f2c0 815a 	blt.w	810b2de <_dtoa_r+0x6fe>
 810b02a:	2f0e      	cmp	r7, #14
 810b02c:	f300 8157 	bgt.w	810b2de <_dtoa_r+0x6fe>
 810b030:	4b5a      	ldr	r3, [pc, #360]	@ (810b19c <_dtoa_r+0x5bc>)
 810b032:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810b036:	ed93 7b00 	vldr	d7, [r3]
 810b03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b03c:	2b00      	cmp	r3, #0
 810b03e:	ed8d 7b00 	vstr	d7, [sp]
 810b042:	da03      	bge.n	810b04c <_dtoa_r+0x46c>
 810b044:	9b07      	ldr	r3, [sp, #28]
 810b046:	2b00      	cmp	r3, #0
 810b048:	f340 8101 	ble.w	810b24e <_dtoa_r+0x66e>
 810b04c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810b050:	4656      	mov	r6, sl
 810b052:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b056:	4620      	mov	r0, r4
 810b058:	4629      	mov	r1, r5
 810b05a:	f7f5 fc7f 	bl	810095c <__aeabi_ddiv>
 810b05e:	f7f5 fe03 	bl	8100c68 <__aeabi_d2iz>
 810b062:	4680      	mov	r8, r0
 810b064:	f7f5 fae6 	bl	8100634 <__aeabi_i2d>
 810b068:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b06c:	f7f5 fb4c 	bl	8100708 <__aeabi_dmul>
 810b070:	4602      	mov	r2, r0
 810b072:	460b      	mov	r3, r1
 810b074:	4620      	mov	r0, r4
 810b076:	4629      	mov	r1, r5
 810b078:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810b07c:	f7f5 f98c 	bl	8100398 <__aeabi_dsub>
 810b080:	f806 4b01 	strb.w	r4, [r6], #1
 810b084:	9d07      	ldr	r5, [sp, #28]
 810b086:	eba6 040a 	sub.w	r4, r6, sl
 810b08a:	42a5      	cmp	r5, r4
 810b08c:	4602      	mov	r2, r0
 810b08e:	460b      	mov	r3, r1
 810b090:	f040 8117 	bne.w	810b2c2 <_dtoa_r+0x6e2>
 810b094:	f7f5 f982 	bl	810039c <__adddf3>
 810b098:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b09c:	4604      	mov	r4, r0
 810b09e:	460d      	mov	r5, r1
 810b0a0:	f7f5 fdc2 	bl	8100c28 <__aeabi_dcmpgt>
 810b0a4:	2800      	cmp	r0, #0
 810b0a6:	f040 80f9 	bne.w	810b29c <_dtoa_r+0x6bc>
 810b0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b0ae:	4620      	mov	r0, r4
 810b0b0:	4629      	mov	r1, r5
 810b0b2:	f7f5 fd91 	bl	8100bd8 <__aeabi_dcmpeq>
 810b0b6:	b118      	cbz	r0, 810b0c0 <_dtoa_r+0x4e0>
 810b0b8:	f018 0f01 	tst.w	r8, #1
 810b0bc:	f040 80ee 	bne.w	810b29c <_dtoa_r+0x6bc>
 810b0c0:	4649      	mov	r1, r9
 810b0c2:	4658      	mov	r0, fp
 810b0c4:	f000 fc90 	bl	810b9e8 <_Bfree>
 810b0c8:	2300      	movs	r3, #0
 810b0ca:	7033      	strb	r3, [r6, #0]
 810b0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810b0ce:	3701      	adds	r7, #1
 810b0d0:	601f      	str	r7, [r3, #0]
 810b0d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b0d4:	2b00      	cmp	r3, #0
 810b0d6:	f000 831d 	beq.w	810b714 <_dtoa_r+0xb34>
 810b0da:	601e      	str	r6, [r3, #0]
 810b0dc:	e31a      	b.n	810b714 <_dtoa_r+0xb34>
 810b0de:	07e2      	lsls	r2, r4, #31
 810b0e0:	d505      	bpl.n	810b0ee <_dtoa_r+0x50e>
 810b0e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 810b0e6:	f7f5 fb0f 	bl	8100708 <__aeabi_dmul>
 810b0ea:	3601      	adds	r6, #1
 810b0ec:	2301      	movs	r3, #1
 810b0ee:	1064      	asrs	r4, r4, #1
 810b0f0:	3508      	adds	r5, #8
 810b0f2:	e73f      	b.n	810af74 <_dtoa_r+0x394>
 810b0f4:	2602      	movs	r6, #2
 810b0f6:	e742      	b.n	810af7e <_dtoa_r+0x39e>
 810b0f8:	9c07      	ldr	r4, [sp, #28]
 810b0fa:	9704      	str	r7, [sp, #16]
 810b0fc:	e761      	b.n	810afc2 <_dtoa_r+0x3e2>
 810b0fe:	4b27      	ldr	r3, [pc, #156]	@ (810b19c <_dtoa_r+0x5bc>)
 810b100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810b102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810b106:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b10a:	4454      	add	r4, sl
 810b10c:	2900      	cmp	r1, #0
 810b10e:	d053      	beq.n	810b1b8 <_dtoa_r+0x5d8>
 810b110:	4928      	ldr	r1, [pc, #160]	@ (810b1b4 <_dtoa_r+0x5d4>)
 810b112:	2000      	movs	r0, #0
 810b114:	f7f5 fc22 	bl	810095c <__aeabi_ddiv>
 810b118:	4633      	mov	r3, r6
 810b11a:	462a      	mov	r2, r5
 810b11c:	f7f5 f93c 	bl	8100398 <__aeabi_dsub>
 810b120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b124:	4656      	mov	r6, sl
 810b126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b12a:	f7f5 fd9d 	bl	8100c68 <__aeabi_d2iz>
 810b12e:	4605      	mov	r5, r0
 810b130:	f7f5 fa80 	bl	8100634 <__aeabi_i2d>
 810b134:	4602      	mov	r2, r0
 810b136:	460b      	mov	r3, r1
 810b138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b13c:	f7f5 f92c 	bl	8100398 <__aeabi_dsub>
 810b140:	3530      	adds	r5, #48	@ 0x30
 810b142:	4602      	mov	r2, r0
 810b144:	460b      	mov	r3, r1
 810b146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b14a:	f806 5b01 	strb.w	r5, [r6], #1
 810b14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b152:	f7f5 fd4b 	bl	8100bec <__aeabi_dcmplt>
 810b156:	2800      	cmp	r0, #0
 810b158:	d171      	bne.n	810b23e <_dtoa_r+0x65e>
 810b15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b15e:	4911      	ldr	r1, [pc, #68]	@ (810b1a4 <_dtoa_r+0x5c4>)
 810b160:	2000      	movs	r0, #0
 810b162:	f7f5 f919 	bl	8100398 <__aeabi_dsub>
 810b166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b16a:	f7f5 fd3f 	bl	8100bec <__aeabi_dcmplt>
 810b16e:	2800      	cmp	r0, #0
 810b170:	f040 8095 	bne.w	810b29e <_dtoa_r+0x6be>
 810b174:	42a6      	cmp	r6, r4
 810b176:	f43f af50 	beq.w	810b01a <_dtoa_r+0x43a>
 810b17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b17e:	4b0a      	ldr	r3, [pc, #40]	@ (810b1a8 <_dtoa_r+0x5c8>)
 810b180:	2200      	movs	r2, #0
 810b182:	f7f5 fac1 	bl	8100708 <__aeabi_dmul>
 810b186:	4b08      	ldr	r3, [pc, #32]	@ (810b1a8 <_dtoa_r+0x5c8>)
 810b188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b18c:	2200      	movs	r2, #0
 810b18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b192:	f7f5 fab9 	bl	8100708 <__aeabi_dmul>
 810b196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b19a:	e7c4      	b.n	810b126 <_dtoa_r+0x546>
 810b19c:	0810e998 	.word	0x0810e998
 810b1a0:	0810e970 	.word	0x0810e970
 810b1a4:	3ff00000 	.word	0x3ff00000
 810b1a8:	40240000 	.word	0x40240000
 810b1ac:	401c0000 	.word	0x401c0000
 810b1b0:	40140000 	.word	0x40140000
 810b1b4:	3fe00000 	.word	0x3fe00000
 810b1b8:	4631      	mov	r1, r6
 810b1ba:	4628      	mov	r0, r5
 810b1bc:	f7f5 faa4 	bl	8100708 <__aeabi_dmul>
 810b1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b1c4:	9415      	str	r4, [sp, #84]	@ 0x54
 810b1c6:	4656      	mov	r6, sl
 810b1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b1cc:	f7f5 fd4c 	bl	8100c68 <__aeabi_d2iz>
 810b1d0:	4605      	mov	r5, r0
 810b1d2:	f7f5 fa2f 	bl	8100634 <__aeabi_i2d>
 810b1d6:	4602      	mov	r2, r0
 810b1d8:	460b      	mov	r3, r1
 810b1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b1de:	f7f5 f8db 	bl	8100398 <__aeabi_dsub>
 810b1e2:	3530      	adds	r5, #48	@ 0x30
 810b1e4:	f806 5b01 	strb.w	r5, [r6], #1
 810b1e8:	4602      	mov	r2, r0
 810b1ea:	460b      	mov	r3, r1
 810b1ec:	42a6      	cmp	r6, r4
 810b1ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b1f2:	f04f 0200 	mov.w	r2, #0
 810b1f6:	d124      	bne.n	810b242 <_dtoa_r+0x662>
 810b1f8:	4bac      	ldr	r3, [pc, #688]	@ (810b4ac <_dtoa_r+0x8cc>)
 810b1fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b1fe:	f7f5 f8cd 	bl	810039c <__adddf3>
 810b202:	4602      	mov	r2, r0
 810b204:	460b      	mov	r3, r1
 810b206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b20a:	f7f5 fd0d 	bl	8100c28 <__aeabi_dcmpgt>
 810b20e:	2800      	cmp	r0, #0
 810b210:	d145      	bne.n	810b29e <_dtoa_r+0x6be>
 810b212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b216:	49a5      	ldr	r1, [pc, #660]	@ (810b4ac <_dtoa_r+0x8cc>)
 810b218:	2000      	movs	r0, #0
 810b21a:	f7f5 f8bd 	bl	8100398 <__aeabi_dsub>
 810b21e:	4602      	mov	r2, r0
 810b220:	460b      	mov	r3, r1
 810b222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b226:	f7f5 fce1 	bl	8100bec <__aeabi_dcmplt>
 810b22a:	2800      	cmp	r0, #0
 810b22c:	f43f aef5 	beq.w	810b01a <_dtoa_r+0x43a>
 810b230:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810b232:	1e73      	subs	r3, r6, #1
 810b234:	9315      	str	r3, [sp, #84]	@ 0x54
 810b236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b23a:	2b30      	cmp	r3, #48	@ 0x30
 810b23c:	d0f8      	beq.n	810b230 <_dtoa_r+0x650>
 810b23e:	9f04      	ldr	r7, [sp, #16]
 810b240:	e73e      	b.n	810b0c0 <_dtoa_r+0x4e0>
 810b242:	4b9b      	ldr	r3, [pc, #620]	@ (810b4b0 <_dtoa_r+0x8d0>)
 810b244:	f7f5 fa60 	bl	8100708 <__aeabi_dmul>
 810b248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b24c:	e7bc      	b.n	810b1c8 <_dtoa_r+0x5e8>
 810b24e:	d10c      	bne.n	810b26a <_dtoa_r+0x68a>
 810b250:	4b98      	ldr	r3, [pc, #608]	@ (810b4b4 <_dtoa_r+0x8d4>)
 810b252:	2200      	movs	r2, #0
 810b254:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b258:	f7f5 fa56 	bl	8100708 <__aeabi_dmul>
 810b25c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b260:	f7f5 fcd8 	bl	8100c14 <__aeabi_dcmpge>
 810b264:	2800      	cmp	r0, #0
 810b266:	f000 8157 	beq.w	810b518 <_dtoa_r+0x938>
 810b26a:	2400      	movs	r4, #0
 810b26c:	4625      	mov	r5, r4
 810b26e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b270:	43db      	mvns	r3, r3
 810b272:	9304      	str	r3, [sp, #16]
 810b274:	4656      	mov	r6, sl
 810b276:	2700      	movs	r7, #0
 810b278:	4621      	mov	r1, r4
 810b27a:	4658      	mov	r0, fp
 810b27c:	f000 fbb4 	bl	810b9e8 <_Bfree>
 810b280:	2d00      	cmp	r5, #0
 810b282:	d0dc      	beq.n	810b23e <_dtoa_r+0x65e>
 810b284:	b12f      	cbz	r7, 810b292 <_dtoa_r+0x6b2>
 810b286:	42af      	cmp	r7, r5
 810b288:	d003      	beq.n	810b292 <_dtoa_r+0x6b2>
 810b28a:	4639      	mov	r1, r7
 810b28c:	4658      	mov	r0, fp
 810b28e:	f000 fbab 	bl	810b9e8 <_Bfree>
 810b292:	4629      	mov	r1, r5
 810b294:	4658      	mov	r0, fp
 810b296:	f000 fba7 	bl	810b9e8 <_Bfree>
 810b29a:	e7d0      	b.n	810b23e <_dtoa_r+0x65e>
 810b29c:	9704      	str	r7, [sp, #16]
 810b29e:	4633      	mov	r3, r6
 810b2a0:	461e      	mov	r6, r3
 810b2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b2a6:	2a39      	cmp	r2, #57	@ 0x39
 810b2a8:	d107      	bne.n	810b2ba <_dtoa_r+0x6da>
 810b2aa:	459a      	cmp	sl, r3
 810b2ac:	d1f8      	bne.n	810b2a0 <_dtoa_r+0x6c0>
 810b2ae:	9a04      	ldr	r2, [sp, #16]
 810b2b0:	3201      	adds	r2, #1
 810b2b2:	9204      	str	r2, [sp, #16]
 810b2b4:	2230      	movs	r2, #48	@ 0x30
 810b2b6:	f88a 2000 	strb.w	r2, [sl]
 810b2ba:	781a      	ldrb	r2, [r3, #0]
 810b2bc:	3201      	adds	r2, #1
 810b2be:	701a      	strb	r2, [r3, #0]
 810b2c0:	e7bd      	b.n	810b23e <_dtoa_r+0x65e>
 810b2c2:	4b7b      	ldr	r3, [pc, #492]	@ (810b4b0 <_dtoa_r+0x8d0>)
 810b2c4:	2200      	movs	r2, #0
 810b2c6:	f7f5 fa1f 	bl	8100708 <__aeabi_dmul>
 810b2ca:	2200      	movs	r2, #0
 810b2cc:	2300      	movs	r3, #0
 810b2ce:	4604      	mov	r4, r0
 810b2d0:	460d      	mov	r5, r1
 810b2d2:	f7f5 fc81 	bl	8100bd8 <__aeabi_dcmpeq>
 810b2d6:	2800      	cmp	r0, #0
 810b2d8:	f43f aebb 	beq.w	810b052 <_dtoa_r+0x472>
 810b2dc:	e6f0      	b.n	810b0c0 <_dtoa_r+0x4e0>
 810b2de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810b2e0:	2a00      	cmp	r2, #0
 810b2e2:	f000 80db 	beq.w	810b49c <_dtoa_r+0x8bc>
 810b2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b2e8:	2a01      	cmp	r2, #1
 810b2ea:	f300 80bf 	bgt.w	810b46c <_dtoa_r+0x88c>
 810b2ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810b2f0:	2a00      	cmp	r2, #0
 810b2f2:	f000 80b7 	beq.w	810b464 <_dtoa_r+0x884>
 810b2f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810b2fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b2fc:	4646      	mov	r6, r8
 810b2fe:	9a08      	ldr	r2, [sp, #32]
 810b300:	2101      	movs	r1, #1
 810b302:	441a      	add	r2, r3
 810b304:	4658      	mov	r0, fp
 810b306:	4498      	add	r8, r3
 810b308:	9208      	str	r2, [sp, #32]
 810b30a:	f000 fc6b 	bl	810bbe4 <__i2b>
 810b30e:	4605      	mov	r5, r0
 810b310:	b15e      	cbz	r6, 810b32a <_dtoa_r+0x74a>
 810b312:	9b08      	ldr	r3, [sp, #32]
 810b314:	2b00      	cmp	r3, #0
 810b316:	dd08      	ble.n	810b32a <_dtoa_r+0x74a>
 810b318:	42b3      	cmp	r3, r6
 810b31a:	9a08      	ldr	r2, [sp, #32]
 810b31c:	bfa8      	it	ge
 810b31e:	4633      	movge	r3, r6
 810b320:	eba8 0803 	sub.w	r8, r8, r3
 810b324:	1af6      	subs	r6, r6, r3
 810b326:	1ad3      	subs	r3, r2, r3
 810b328:	9308      	str	r3, [sp, #32]
 810b32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b32c:	b1f3      	cbz	r3, 810b36c <_dtoa_r+0x78c>
 810b32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b330:	2b00      	cmp	r3, #0
 810b332:	f000 80b7 	beq.w	810b4a4 <_dtoa_r+0x8c4>
 810b336:	b18c      	cbz	r4, 810b35c <_dtoa_r+0x77c>
 810b338:	4629      	mov	r1, r5
 810b33a:	4622      	mov	r2, r4
 810b33c:	4658      	mov	r0, fp
 810b33e:	f000 fd11 	bl	810bd64 <__pow5mult>
 810b342:	464a      	mov	r2, r9
 810b344:	4601      	mov	r1, r0
 810b346:	4605      	mov	r5, r0
 810b348:	4658      	mov	r0, fp
 810b34a:	f000 fc61 	bl	810bc10 <__multiply>
 810b34e:	4649      	mov	r1, r9
 810b350:	9004      	str	r0, [sp, #16]
 810b352:	4658      	mov	r0, fp
 810b354:	f000 fb48 	bl	810b9e8 <_Bfree>
 810b358:	9b04      	ldr	r3, [sp, #16]
 810b35a:	4699      	mov	r9, r3
 810b35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b35e:	1b1a      	subs	r2, r3, r4
 810b360:	d004      	beq.n	810b36c <_dtoa_r+0x78c>
 810b362:	4649      	mov	r1, r9
 810b364:	4658      	mov	r0, fp
 810b366:	f000 fcfd 	bl	810bd64 <__pow5mult>
 810b36a:	4681      	mov	r9, r0
 810b36c:	2101      	movs	r1, #1
 810b36e:	4658      	mov	r0, fp
 810b370:	f000 fc38 	bl	810bbe4 <__i2b>
 810b374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b376:	4604      	mov	r4, r0
 810b378:	2b00      	cmp	r3, #0
 810b37a:	f000 81cf 	beq.w	810b71c <_dtoa_r+0xb3c>
 810b37e:	461a      	mov	r2, r3
 810b380:	4601      	mov	r1, r0
 810b382:	4658      	mov	r0, fp
 810b384:	f000 fcee 	bl	810bd64 <__pow5mult>
 810b388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b38a:	2b01      	cmp	r3, #1
 810b38c:	4604      	mov	r4, r0
 810b38e:	f300 8095 	bgt.w	810b4bc <_dtoa_r+0x8dc>
 810b392:	9b02      	ldr	r3, [sp, #8]
 810b394:	2b00      	cmp	r3, #0
 810b396:	f040 8087 	bne.w	810b4a8 <_dtoa_r+0x8c8>
 810b39a:	9b03      	ldr	r3, [sp, #12]
 810b39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b3a0:	2b00      	cmp	r3, #0
 810b3a2:	f040 8089 	bne.w	810b4b8 <_dtoa_r+0x8d8>
 810b3a6:	9b03      	ldr	r3, [sp, #12]
 810b3a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810b3ac:	0d1b      	lsrs	r3, r3, #20
 810b3ae:	051b      	lsls	r3, r3, #20
 810b3b0:	b12b      	cbz	r3, 810b3be <_dtoa_r+0x7de>
 810b3b2:	9b08      	ldr	r3, [sp, #32]
 810b3b4:	3301      	adds	r3, #1
 810b3b6:	9308      	str	r3, [sp, #32]
 810b3b8:	f108 0801 	add.w	r8, r8, #1
 810b3bc:	2301      	movs	r3, #1
 810b3be:	930a      	str	r3, [sp, #40]	@ 0x28
 810b3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b3c2:	2b00      	cmp	r3, #0
 810b3c4:	f000 81b0 	beq.w	810b728 <_dtoa_r+0xb48>
 810b3c8:	6923      	ldr	r3, [r4, #16]
 810b3ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b3ce:	6918      	ldr	r0, [r3, #16]
 810b3d0:	f000 fbbc 	bl	810bb4c <__hi0bits>
 810b3d4:	f1c0 0020 	rsb	r0, r0, #32
 810b3d8:	9b08      	ldr	r3, [sp, #32]
 810b3da:	4418      	add	r0, r3
 810b3dc:	f010 001f 	ands.w	r0, r0, #31
 810b3e0:	d077      	beq.n	810b4d2 <_dtoa_r+0x8f2>
 810b3e2:	f1c0 0320 	rsb	r3, r0, #32
 810b3e6:	2b04      	cmp	r3, #4
 810b3e8:	dd6b      	ble.n	810b4c2 <_dtoa_r+0x8e2>
 810b3ea:	9b08      	ldr	r3, [sp, #32]
 810b3ec:	f1c0 001c 	rsb	r0, r0, #28
 810b3f0:	4403      	add	r3, r0
 810b3f2:	4480      	add	r8, r0
 810b3f4:	4406      	add	r6, r0
 810b3f6:	9308      	str	r3, [sp, #32]
 810b3f8:	f1b8 0f00 	cmp.w	r8, #0
 810b3fc:	dd05      	ble.n	810b40a <_dtoa_r+0x82a>
 810b3fe:	4649      	mov	r1, r9
 810b400:	4642      	mov	r2, r8
 810b402:	4658      	mov	r0, fp
 810b404:	f000 fd08 	bl	810be18 <__lshift>
 810b408:	4681      	mov	r9, r0
 810b40a:	9b08      	ldr	r3, [sp, #32]
 810b40c:	2b00      	cmp	r3, #0
 810b40e:	dd05      	ble.n	810b41c <_dtoa_r+0x83c>
 810b410:	4621      	mov	r1, r4
 810b412:	461a      	mov	r2, r3
 810b414:	4658      	mov	r0, fp
 810b416:	f000 fcff 	bl	810be18 <__lshift>
 810b41a:	4604      	mov	r4, r0
 810b41c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810b41e:	2b00      	cmp	r3, #0
 810b420:	d059      	beq.n	810b4d6 <_dtoa_r+0x8f6>
 810b422:	4621      	mov	r1, r4
 810b424:	4648      	mov	r0, r9
 810b426:	f000 fd63 	bl	810bef0 <__mcmp>
 810b42a:	2800      	cmp	r0, #0
 810b42c:	da53      	bge.n	810b4d6 <_dtoa_r+0x8f6>
 810b42e:	1e7b      	subs	r3, r7, #1
 810b430:	9304      	str	r3, [sp, #16]
 810b432:	4649      	mov	r1, r9
 810b434:	2300      	movs	r3, #0
 810b436:	220a      	movs	r2, #10
 810b438:	4658      	mov	r0, fp
 810b43a:	f000 faf7 	bl	810ba2c <__multadd>
 810b43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b440:	4681      	mov	r9, r0
 810b442:	2b00      	cmp	r3, #0
 810b444:	f000 8172 	beq.w	810b72c <_dtoa_r+0xb4c>
 810b448:	2300      	movs	r3, #0
 810b44a:	4629      	mov	r1, r5
 810b44c:	220a      	movs	r2, #10
 810b44e:	4658      	mov	r0, fp
 810b450:	f000 faec 	bl	810ba2c <__multadd>
 810b454:	9b00      	ldr	r3, [sp, #0]
 810b456:	2b00      	cmp	r3, #0
 810b458:	4605      	mov	r5, r0
 810b45a:	dc67      	bgt.n	810b52c <_dtoa_r+0x94c>
 810b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b45e:	2b02      	cmp	r3, #2
 810b460:	dc41      	bgt.n	810b4e6 <_dtoa_r+0x906>
 810b462:	e063      	b.n	810b52c <_dtoa_r+0x94c>
 810b464:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810b466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810b46a:	e746      	b.n	810b2fa <_dtoa_r+0x71a>
 810b46c:	9b07      	ldr	r3, [sp, #28]
 810b46e:	1e5c      	subs	r4, r3, #1
 810b470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b472:	42a3      	cmp	r3, r4
 810b474:	bfbf      	itttt	lt
 810b476:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810b478:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810b47a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810b47c:	1ae3      	sublt	r3, r4, r3
 810b47e:	bfb4      	ite	lt
 810b480:	18d2      	addlt	r2, r2, r3
 810b482:	1b1c      	subge	r4, r3, r4
 810b484:	9b07      	ldr	r3, [sp, #28]
 810b486:	bfbc      	itt	lt
 810b488:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810b48a:	2400      	movlt	r4, #0
 810b48c:	2b00      	cmp	r3, #0
 810b48e:	bfb5      	itete	lt
 810b490:	eba8 0603 	sublt.w	r6, r8, r3
 810b494:	9b07      	ldrge	r3, [sp, #28]
 810b496:	2300      	movlt	r3, #0
 810b498:	4646      	movge	r6, r8
 810b49a:	e730      	b.n	810b2fe <_dtoa_r+0x71e>
 810b49c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b49e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810b4a0:	4646      	mov	r6, r8
 810b4a2:	e735      	b.n	810b310 <_dtoa_r+0x730>
 810b4a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810b4a6:	e75c      	b.n	810b362 <_dtoa_r+0x782>
 810b4a8:	2300      	movs	r3, #0
 810b4aa:	e788      	b.n	810b3be <_dtoa_r+0x7de>
 810b4ac:	3fe00000 	.word	0x3fe00000
 810b4b0:	40240000 	.word	0x40240000
 810b4b4:	40140000 	.word	0x40140000
 810b4b8:	9b02      	ldr	r3, [sp, #8]
 810b4ba:	e780      	b.n	810b3be <_dtoa_r+0x7de>
 810b4bc:	2300      	movs	r3, #0
 810b4be:	930a      	str	r3, [sp, #40]	@ 0x28
 810b4c0:	e782      	b.n	810b3c8 <_dtoa_r+0x7e8>
 810b4c2:	d099      	beq.n	810b3f8 <_dtoa_r+0x818>
 810b4c4:	9a08      	ldr	r2, [sp, #32]
 810b4c6:	331c      	adds	r3, #28
 810b4c8:	441a      	add	r2, r3
 810b4ca:	4498      	add	r8, r3
 810b4cc:	441e      	add	r6, r3
 810b4ce:	9208      	str	r2, [sp, #32]
 810b4d0:	e792      	b.n	810b3f8 <_dtoa_r+0x818>
 810b4d2:	4603      	mov	r3, r0
 810b4d4:	e7f6      	b.n	810b4c4 <_dtoa_r+0x8e4>
 810b4d6:	9b07      	ldr	r3, [sp, #28]
 810b4d8:	9704      	str	r7, [sp, #16]
 810b4da:	2b00      	cmp	r3, #0
 810b4dc:	dc20      	bgt.n	810b520 <_dtoa_r+0x940>
 810b4de:	9300      	str	r3, [sp, #0]
 810b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b4e2:	2b02      	cmp	r3, #2
 810b4e4:	dd1e      	ble.n	810b524 <_dtoa_r+0x944>
 810b4e6:	9b00      	ldr	r3, [sp, #0]
 810b4e8:	2b00      	cmp	r3, #0
 810b4ea:	f47f aec0 	bne.w	810b26e <_dtoa_r+0x68e>
 810b4ee:	4621      	mov	r1, r4
 810b4f0:	2205      	movs	r2, #5
 810b4f2:	4658      	mov	r0, fp
 810b4f4:	f000 fa9a 	bl	810ba2c <__multadd>
 810b4f8:	4601      	mov	r1, r0
 810b4fa:	4604      	mov	r4, r0
 810b4fc:	4648      	mov	r0, r9
 810b4fe:	f000 fcf7 	bl	810bef0 <__mcmp>
 810b502:	2800      	cmp	r0, #0
 810b504:	f77f aeb3 	ble.w	810b26e <_dtoa_r+0x68e>
 810b508:	4656      	mov	r6, sl
 810b50a:	2331      	movs	r3, #49	@ 0x31
 810b50c:	f806 3b01 	strb.w	r3, [r6], #1
 810b510:	9b04      	ldr	r3, [sp, #16]
 810b512:	3301      	adds	r3, #1
 810b514:	9304      	str	r3, [sp, #16]
 810b516:	e6ae      	b.n	810b276 <_dtoa_r+0x696>
 810b518:	9c07      	ldr	r4, [sp, #28]
 810b51a:	9704      	str	r7, [sp, #16]
 810b51c:	4625      	mov	r5, r4
 810b51e:	e7f3      	b.n	810b508 <_dtoa_r+0x928>
 810b520:	9b07      	ldr	r3, [sp, #28]
 810b522:	9300      	str	r3, [sp, #0]
 810b524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b526:	2b00      	cmp	r3, #0
 810b528:	f000 8104 	beq.w	810b734 <_dtoa_r+0xb54>
 810b52c:	2e00      	cmp	r6, #0
 810b52e:	dd05      	ble.n	810b53c <_dtoa_r+0x95c>
 810b530:	4629      	mov	r1, r5
 810b532:	4632      	mov	r2, r6
 810b534:	4658      	mov	r0, fp
 810b536:	f000 fc6f 	bl	810be18 <__lshift>
 810b53a:	4605      	mov	r5, r0
 810b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b53e:	2b00      	cmp	r3, #0
 810b540:	d05a      	beq.n	810b5f8 <_dtoa_r+0xa18>
 810b542:	6869      	ldr	r1, [r5, #4]
 810b544:	4658      	mov	r0, fp
 810b546:	f000 fa0f 	bl	810b968 <_Balloc>
 810b54a:	4606      	mov	r6, r0
 810b54c:	b928      	cbnz	r0, 810b55a <_dtoa_r+0x97a>
 810b54e:	4b84      	ldr	r3, [pc, #528]	@ (810b760 <_dtoa_r+0xb80>)
 810b550:	4602      	mov	r2, r0
 810b552:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810b556:	f7ff bb5a 	b.w	810ac0e <_dtoa_r+0x2e>
 810b55a:	692a      	ldr	r2, [r5, #16]
 810b55c:	3202      	adds	r2, #2
 810b55e:	0092      	lsls	r2, r2, #2
 810b560:	f105 010c 	add.w	r1, r5, #12
 810b564:	300c      	adds	r0, #12
 810b566:	f7ff fa9e 	bl	810aaa6 <memcpy>
 810b56a:	2201      	movs	r2, #1
 810b56c:	4631      	mov	r1, r6
 810b56e:	4658      	mov	r0, fp
 810b570:	f000 fc52 	bl	810be18 <__lshift>
 810b574:	f10a 0301 	add.w	r3, sl, #1
 810b578:	9307      	str	r3, [sp, #28]
 810b57a:	9b00      	ldr	r3, [sp, #0]
 810b57c:	4453      	add	r3, sl
 810b57e:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b580:	9b02      	ldr	r3, [sp, #8]
 810b582:	f003 0301 	and.w	r3, r3, #1
 810b586:	462f      	mov	r7, r5
 810b588:	930a      	str	r3, [sp, #40]	@ 0x28
 810b58a:	4605      	mov	r5, r0
 810b58c:	9b07      	ldr	r3, [sp, #28]
 810b58e:	4621      	mov	r1, r4
 810b590:	3b01      	subs	r3, #1
 810b592:	4648      	mov	r0, r9
 810b594:	9300      	str	r3, [sp, #0]
 810b596:	f7ff fa9b 	bl	810aad0 <quorem>
 810b59a:	4639      	mov	r1, r7
 810b59c:	9002      	str	r0, [sp, #8]
 810b59e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b5a2:	4648      	mov	r0, r9
 810b5a4:	f000 fca4 	bl	810bef0 <__mcmp>
 810b5a8:	462a      	mov	r2, r5
 810b5aa:	9008      	str	r0, [sp, #32]
 810b5ac:	4621      	mov	r1, r4
 810b5ae:	4658      	mov	r0, fp
 810b5b0:	f000 fcba 	bl	810bf28 <__mdiff>
 810b5b4:	68c2      	ldr	r2, [r0, #12]
 810b5b6:	4606      	mov	r6, r0
 810b5b8:	bb02      	cbnz	r2, 810b5fc <_dtoa_r+0xa1c>
 810b5ba:	4601      	mov	r1, r0
 810b5bc:	4648      	mov	r0, r9
 810b5be:	f000 fc97 	bl	810bef0 <__mcmp>
 810b5c2:	4602      	mov	r2, r0
 810b5c4:	4631      	mov	r1, r6
 810b5c6:	4658      	mov	r0, fp
 810b5c8:	920e      	str	r2, [sp, #56]	@ 0x38
 810b5ca:	f000 fa0d 	bl	810b9e8 <_Bfree>
 810b5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b5d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810b5d2:	9e07      	ldr	r6, [sp, #28]
 810b5d4:	ea43 0102 	orr.w	r1, r3, r2
 810b5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b5da:	4319      	orrs	r1, r3
 810b5dc:	d110      	bne.n	810b600 <_dtoa_r+0xa20>
 810b5de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b5e2:	d029      	beq.n	810b638 <_dtoa_r+0xa58>
 810b5e4:	9b08      	ldr	r3, [sp, #32]
 810b5e6:	2b00      	cmp	r3, #0
 810b5e8:	dd02      	ble.n	810b5f0 <_dtoa_r+0xa10>
 810b5ea:	9b02      	ldr	r3, [sp, #8]
 810b5ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810b5f0:	9b00      	ldr	r3, [sp, #0]
 810b5f2:	f883 8000 	strb.w	r8, [r3]
 810b5f6:	e63f      	b.n	810b278 <_dtoa_r+0x698>
 810b5f8:	4628      	mov	r0, r5
 810b5fa:	e7bb      	b.n	810b574 <_dtoa_r+0x994>
 810b5fc:	2201      	movs	r2, #1
 810b5fe:	e7e1      	b.n	810b5c4 <_dtoa_r+0x9e4>
 810b600:	9b08      	ldr	r3, [sp, #32]
 810b602:	2b00      	cmp	r3, #0
 810b604:	db04      	blt.n	810b610 <_dtoa_r+0xa30>
 810b606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810b608:	430b      	orrs	r3, r1
 810b60a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810b60c:	430b      	orrs	r3, r1
 810b60e:	d120      	bne.n	810b652 <_dtoa_r+0xa72>
 810b610:	2a00      	cmp	r2, #0
 810b612:	dded      	ble.n	810b5f0 <_dtoa_r+0xa10>
 810b614:	4649      	mov	r1, r9
 810b616:	2201      	movs	r2, #1
 810b618:	4658      	mov	r0, fp
 810b61a:	f000 fbfd 	bl	810be18 <__lshift>
 810b61e:	4621      	mov	r1, r4
 810b620:	4681      	mov	r9, r0
 810b622:	f000 fc65 	bl	810bef0 <__mcmp>
 810b626:	2800      	cmp	r0, #0
 810b628:	dc03      	bgt.n	810b632 <_dtoa_r+0xa52>
 810b62a:	d1e1      	bne.n	810b5f0 <_dtoa_r+0xa10>
 810b62c:	f018 0f01 	tst.w	r8, #1
 810b630:	d0de      	beq.n	810b5f0 <_dtoa_r+0xa10>
 810b632:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b636:	d1d8      	bne.n	810b5ea <_dtoa_r+0xa0a>
 810b638:	9a00      	ldr	r2, [sp, #0]
 810b63a:	2339      	movs	r3, #57	@ 0x39
 810b63c:	7013      	strb	r3, [r2, #0]
 810b63e:	4633      	mov	r3, r6
 810b640:	461e      	mov	r6, r3
 810b642:	3b01      	subs	r3, #1
 810b644:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810b648:	2a39      	cmp	r2, #57	@ 0x39
 810b64a:	d052      	beq.n	810b6f2 <_dtoa_r+0xb12>
 810b64c:	3201      	adds	r2, #1
 810b64e:	701a      	strb	r2, [r3, #0]
 810b650:	e612      	b.n	810b278 <_dtoa_r+0x698>
 810b652:	2a00      	cmp	r2, #0
 810b654:	dd07      	ble.n	810b666 <_dtoa_r+0xa86>
 810b656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b65a:	d0ed      	beq.n	810b638 <_dtoa_r+0xa58>
 810b65c:	9a00      	ldr	r2, [sp, #0]
 810b65e:	f108 0301 	add.w	r3, r8, #1
 810b662:	7013      	strb	r3, [r2, #0]
 810b664:	e608      	b.n	810b278 <_dtoa_r+0x698>
 810b666:	9b07      	ldr	r3, [sp, #28]
 810b668:	9a07      	ldr	r2, [sp, #28]
 810b66a:	f803 8c01 	strb.w	r8, [r3, #-1]
 810b66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b670:	4293      	cmp	r3, r2
 810b672:	d028      	beq.n	810b6c6 <_dtoa_r+0xae6>
 810b674:	4649      	mov	r1, r9
 810b676:	2300      	movs	r3, #0
 810b678:	220a      	movs	r2, #10
 810b67a:	4658      	mov	r0, fp
 810b67c:	f000 f9d6 	bl	810ba2c <__multadd>
 810b680:	42af      	cmp	r7, r5
 810b682:	4681      	mov	r9, r0
 810b684:	f04f 0300 	mov.w	r3, #0
 810b688:	f04f 020a 	mov.w	r2, #10
 810b68c:	4639      	mov	r1, r7
 810b68e:	4658      	mov	r0, fp
 810b690:	d107      	bne.n	810b6a2 <_dtoa_r+0xac2>
 810b692:	f000 f9cb 	bl	810ba2c <__multadd>
 810b696:	4607      	mov	r7, r0
 810b698:	4605      	mov	r5, r0
 810b69a:	9b07      	ldr	r3, [sp, #28]
 810b69c:	3301      	adds	r3, #1
 810b69e:	9307      	str	r3, [sp, #28]
 810b6a0:	e774      	b.n	810b58c <_dtoa_r+0x9ac>
 810b6a2:	f000 f9c3 	bl	810ba2c <__multadd>
 810b6a6:	4629      	mov	r1, r5
 810b6a8:	4607      	mov	r7, r0
 810b6aa:	2300      	movs	r3, #0
 810b6ac:	220a      	movs	r2, #10
 810b6ae:	4658      	mov	r0, fp
 810b6b0:	f000 f9bc 	bl	810ba2c <__multadd>
 810b6b4:	4605      	mov	r5, r0
 810b6b6:	e7f0      	b.n	810b69a <_dtoa_r+0xaba>
 810b6b8:	9b00      	ldr	r3, [sp, #0]
 810b6ba:	2b00      	cmp	r3, #0
 810b6bc:	bfcc      	ite	gt
 810b6be:	461e      	movgt	r6, r3
 810b6c0:	2601      	movle	r6, #1
 810b6c2:	4456      	add	r6, sl
 810b6c4:	2700      	movs	r7, #0
 810b6c6:	4649      	mov	r1, r9
 810b6c8:	2201      	movs	r2, #1
 810b6ca:	4658      	mov	r0, fp
 810b6cc:	f000 fba4 	bl	810be18 <__lshift>
 810b6d0:	4621      	mov	r1, r4
 810b6d2:	4681      	mov	r9, r0
 810b6d4:	f000 fc0c 	bl	810bef0 <__mcmp>
 810b6d8:	2800      	cmp	r0, #0
 810b6da:	dcb0      	bgt.n	810b63e <_dtoa_r+0xa5e>
 810b6dc:	d102      	bne.n	810b6e4 <_dtoa_r+0xb04>
 810b6de:	f018 0f01 	tst.w	r8, #1
 810b6e2:	d1ac      	bne.n	810b63e <_dtoa_r+0xa5e>
 810b6e4:	4633      	mov	r3, r6
 810b6e6:	461e      	mov	r6, r3
 810b6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b6ec:	2a30      	cmp	r2, #48	@ 0x30
 810b6ee:	d0fa      	beq.n	810b6e6 <_dtoa_r+0xb06>
 810b6f0:	e5c2      	b.n	810b278 <_dtoa_r+0x698>
 810b6f2:	459a      	cmp	sl, r3
 810b6f4:	d1a4      	bne.n	810b640 <_dtoa_r+0xa60>
 810b6f6:	9b04      	ldr	r3, [sp, #16]
 810b6f8:	3301      	adds	r3, #1
 810b6fa:	9304      	str	r3, [sp, #16]
 810b6fc:	2331      	movs	r3, #49	@ 0x31
 810b6fe:	f88a 3000 	strb.w	r3, [sl]
 810b702:	e5b9      	b.n	810b278 <_dtoa_r+0x698>
 810b704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b706:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810b764 <_dtoa_r+0xb84>
 810b70a:	b11b      	cbz	r3, 810b714 <_dtoa_r+0xb34>
 810b70c:	f10a 0308 	add.w	r3, sl, #8
 810b710:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810b712:	6013      	str	r3, [r2, #0]
 810b714:	4650      	mov	r0, sl
 810b716:	b019      	add	sp, #100	@ 0x64
 810b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b71e:	2b01      	cmp	r3, #1
 810b720:	f77f ae37 	ble.w	810b392 <_dtoa_r+0x7b2>
 810b724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b726:	930a      	str	r3, [sp, #40]	@ 0x28
 810b728:	2001      	movs	r0, #1
 810b72a:	e655      	b.n	810b3d8 <_dtoa_r+0x7f8>
 810b72c:	9b00      	ldr	r3, [sp, #0]
 810b72e:	2b00      	cmp	r3, #0
 810b730:	f77f aed6 	ble.w	810b4e0 <_dtoa_r+0x900>
 810b734:	4656      	mov	r6, sl
 810b736:	4621      	mov	r1, r4
 810b738:	4648      	mov	r0, r9
 810b73a:	f7ff f9c9 	bl	810aad0 <quorem>
 810b73e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b742:	f806 8b01 	strb.w	r8, [r6], #1
 810b746:	9b00      	ldr	r3, [sp, #0]
 810b748:	eba6 020a 	sub.w	r2, r6, sl
 810b74c:	4293      	cmp	r3, r2
 810b74e:	ddb3      	ble.n	810b6b8 <_dtoa_r+0xad8>
 810b750:	4649      	mov	r1, r9
 810b752:	2300      	movs	r3, #0
 810b754:	220a      	movs	r2, #10
 810b756:	4658      	mov	r0, fp
 810b758:	f000 f968 	bl	810ba2c <__multadd>
 810b75c:	4681      	mov	r9, r0
 810b75e:	e7ea      	b.n	810b736 <_dtoa_r+0xb56>
 810b760:	0810e8f9 	.word	0x0810e8f9
 810b764:	0810e87d 	.word	0x0810e87d

0810b768 <_free_r>:
 810b768:	b538      	push	{r3, r4, r5, lr}
 810b76a:	4605      	mov	r5, r0
 810b76c:	2900      	cmp	r1, #0
 810b76e:	d041      	beq.n	810b7f4 <_free_r+0x8c>
 810b770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b774:	1f0c      	subs	r4, r1, #4
 810b776:	2b00      	cmp	r3, #0
 810b778:	bfb8      	it	lt
 810b77a:	18e4      	addlt	r4, r4, r3
 810b77c:	f000 f8e8 	bl	810b950 <__malloc_lock>
 810b780:	4a1d      	ldr	r2, [pc, #116]	@ (810b7f8 <_free_r+0x90>)
 810b782:	6813      	ldr	r3, [r2, #0]
 810b784:	b933      	cbnz	r3, 810b794 <_free_r+0x2c>
 810b786:	6063      	str	r3, [r4, #4]
 810b788:	6014      	str	r4, [r2, #0]
 810b78a:	4628      	mov	r0, r5
 810b78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b790:	f000 b8e4 	b.w	810b95c <__malloc_unlock>
 810b794:	42a3      	cmp	r3, r4
 810b796:	d908      	bls.n	810b7aa <_free_r+0x42>
 810b798:	6820      	ldr	r0, [r4, #0]
 810b79a:	1821      	adds	r1, r4, r0
 810b79c:	428b      	cmp	r3, r1
 810b79e:	bf01      	itttt	eq
 810b7a0:	6819      	ldreq	r1, [r3, #0]
 810b7a2:	685b      	ldreq	r3, [r3, #4]
 810b7a4:	1809      	addeq	r1, r1, r0
 810b7a6:	6021      	streq	r1, [r4, #0]
 810b7a8:	e7ed      	b.n	810b786 <_free_r+0x1e>
 810b7aa:	461a      	mov	r2, r3
 810b7ac:	685b      	ldr	r3, [r3, #4]
 810b7ae:	b10b      	cbz	r3, 810b7b4 <_free_r+0x4c>
 810b7b0:	42a3      	cmp	r3, r4
 810b7b2:	d9fa      	bls.n	810b7aa <_free_r+0x42>
 810b7b4:	6811      	ldr	r1, [r2, #0]
 810b7b6:	1850      	adds	r0, r2, r1
 810b7b8:	42a0      	cmp	r0, r4
 810b7ba:	d10b      	bne.n	810b7d4 <_free_r+0x6c>
 810b7bc:	6820      	ldr	r0, [r4, #0]
 810b7be:	4401      	add	r1, r0
 810b7c0:	1850      	adds	r0, r2, r1
 810b7c2:	4283      	cmp	r3, r0
 810b7c4:	6011      	str	r1, [r2, #0]
 810b7c6:	d1e0      	bne.n	810b78a <_free_r+0x22>
 810b7c8:	6818      	ldr	r0, [r3, #0]
 810b7ca:	685b      	ldr	r3, [r3, #4]
 810b7cc:	6053      	str	r3, [r2, #4]
 810b7ce:	4408      	add	r0, r1
 810b7d0:	6010      	str	r0, [r2, #0]
 810b7d2:	e7da      	b.n	810b78a <_free_r+0x22>
 810b7d4:	d902      	bls.n	810b7dc <_free_r+0x74>
 810b7d6:	230c      	movs	r3, #12
 810b7d8:	602b      	str	r3, [r5, #0]
 810b7da:	e7d6      	b.n	810b78a <_free_r+0x22>
 810b7dc:	6820      	ldr	r0, [r4, #0]
 810b7de:	1821      	adds	r1, r4, r0
 810b7e0:	428b      	cmp	r3, r1
 810b7e2:	bf04      	itt	eq
 810b7e4:	6819      	ldreq	r1, [r3, #0]
 810b7e6:	685b      	ldreq	r3, [r3, #4]
 810b7e8:	6063      	str	r3, [r4, #4]
 810b7ea:	bf04      	itt	eq
 810b7ec:	1809      	addeq	r1, r1, r0
 810b7ee:	6021      	streq	r1, [r4, #0]
 810b7f0:	6054      	str	r4, [r2, #4]
 810b7f2:	e7ca      	b.n	810b78a <_free_r+0x22>
 810b7f4:	bd38      	pop	{r3, r4, r5, pc}
 810b7f6:	bf00      	nop
 810b7f8:	100005bc 	.word	0x100005bc

0810b7fc <malloc>:
 810b7fc:	4b02      	ldr	r3, [pc, #8]	@ (810b808 <malloc+0xc>)
 810b7fe:	4601      	mov	r1, r0
 810b800:	6818      	ldr	r0, [r3, #0]
 810b802:	f000 b825 	b.w	810b850 <_malloc_r>
 810b806:	bf00      	nop
 810b808:	10000028 	.word	0x10000028

0810b80c <sbrk_aligned>:
 810b80c:	b570      	push	{r4, r5, r6, lr}
 810b80e:	4e0f      	ldr	r6, [pc, #60]	@ (810b84c <sbrk_aligned+0x40>)
 810b810:	460c      	mov	r4, r1
 810b812:	6831      	ldr	r1, [r6, #0]
 810b814:	4605      	mov	r5, r0
 810b816:	b911      	cbnz	r1, 810b81e <sbrk_aligned+0x12>
 810b818:	f001 ffd2 	bl	810d7c0 <_sbrk_r>
 810b81c:	6030      	str	r0, [r6, #0]
 810b81e:	4621      	mov	r1, r4
 810b820:	4628      	mov	r0, r5
 810b822:	f001 ffcd 	bl	810d7c0 <_sbrk_r>
 810b826:	1c43      	adds	r3, r0, #1
 810b828:	d103      	bne.n	810b832 <sbrk_aligned+0x26>
 810b82a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 810b82e:	4620      	mov	r0, r4
 810b830:	bd70      	pop	{r4, r5, r6, pc}
 810b832:	1cc4      	adds	r4, r0, #3
 810b834:	f024 0403 	bic.w	r4, r4, #3
 810b838:	42a0      	cmp	r0, r4
 810b83a:	d0f8      	beq.n	810b82e <sbrk_aligned+0x22>
 810b83c:	1a21      	subs	r1, r4, r0
 810b83e:	4628      	mov	r0, r5
 810b840:	f001 ffbe 	bl	810d7c0 <_sbrk_r>
 810b844:	3001      	adds	r0, #1
 810b846:	d1f2      	bne.n	810b82e <sbrk_aligned+0x22>
 810b848:	e7ef      	b.n	810b82a <sbrk_aligned+0x1e>
 810b84a:	bf00      	nop
 810b84c:	100005b8 	.word	0x100005b8

0810b850 <_malloc_r>:
 810b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b854:	1ccd      	adds	r5, r1, #3
 810b856:	f025 0503 	bic.w	r5, r5, #3
 810b85a:	3508      	adds	r5, #8
 810b85c:	2d0c      	cmp	r5, #12
 810b85e:	bf38      	it	cc
 810b860:	250c      	movcc	r5, #12
 810b862:	2d00      	cmp	r5, #0
 810b864:	4606      	mov	r6, r0
 810b866:	db01      	blt.n	810b86c <_malloc_r+0x1c>
 810b868:	42a9      	cmp	r1, r5
 810b86a:	d904      	bls.n	810b876 <_malloc_r+0x26>
 810b86c:	230c      	movs	r3, #12
 810b86e:	6033      	str	r3, [r6, #0]
 810b870:	2000      	movs	r0, #0
 810b872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b876:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810b94c <_malloc_r+0xfc>
 810b87a:	f000 f869 	bl	810b950 <__malloc_lock>
 810b87e:	f8d8 3000 	ldr.w	r3, [r8]
 810b882:	461c      	mov	r4, r3
 810b884:	bb44      	cbnz	r4, 810b8d8 <_malloc_r+0x88>
 810b886:	4629      	mov	r1, r5
 810b888:	4630      	mov	r0, r6
 810b88a:	f7ff ffbf 	bl	810b80c <sbrk_aligned>
 810b88e:	1c43      	adds	r3, r0, #1
 810b890:	4604      	mov	r4, r0
 810b892:	d158      	bne.n	810b946 <_malloc_r+0xf6>
 810b894:	f8d8 4000 	ldr.w	r4, [r8]
 810b898:	4627      	mov	r7, r4
 810b89a:	2f00      	cmp	r7, #0
 810b89c:	d143      	bne.n	810b926 <_malloc_r+0xd6>
 810b89e:	2c00      	cmp	r4, #0
 810b8a0:	d04b      	beq.n	810b93a <_malloc_r+0xea>
 810b8a2:	6823      	ldr	r3, [r4, #0]
 810b8a4:	4639      	mov	r1, r7
 810b8a6:	4630      	mov	r0, r6
 810b8a8:	eb04 0903 	add.w	r9, r4, r3
 810b8ac:	f001 ff88 	bl	810d7c0 <_sbrk_r>
 810b8b0:	4581      	cmp	r9, r0
 810b8b2:	d142      	bne.n	810b93a <_malloc_r+0xea>
 810b8b4:	6821      	ldr	r1, [r4, #0]
 810b8b6:	1a6d      	subs	r5, r5, r1
 810b8b8:	4629      	mov	r1, r5
 810b8ba:	4630      	mov	r0, r6
 810b8bc:	f7ff ffa6 	bl	810b80c <sbrk_aligned>
 810b8c0:	3001      	adds	r0, #1
 810b8c2:	d03a      	beq.n	810b93a <_malloc_r+0xea>
 810b8c4:	6823      	ldr	r3, [r4, #0]
 810b8c6:	442b      	add	r3, r5
 810b8c8:	6023      	str	r3, [r4, #0]
 810b8ca:	f8d8 3000 	ldr.w	r3, [r8]
 810b8ce:	685a      	ldr	r2, [r3, #4]
 810b8d0:	bb62      	cbnz	r2, 810b92c <_malloc_r+0xdc>
 810b8d2:	f8c8 7000 	str.w	r7, [r8]
 810b8d6:	e00f      	b.n	810b8f8 <_malloc_r+0xa8>
 810b8d8:	6822      	ldr	r2, [r4, #0]
 810b8da:	1b52      	subs	r2, r2, r5
 810b8dc:	d420      	bmi.n	810b920 <_malloc_r+0xd0>
 810b8de:	2a0b      	cmp	r2, #11
 810b8e0:	d917      	bls.n	810b912 <_malloc_r+0xc2>
 810b8e2:	1961      	adds	r1, r4, r5
 810b8e4:	42a3      	cmp	r3, r4
 810b8e6:	6025      	str	r5, [r4, #0]
 810b8e8:	bf18      	it	ne
 810b8ea:	6059      	strne	r1, [r3, #4]
 810b8ec:	6863      	ldr	r3, [r4, #4]
 810b8ee:	bf08      	it	eq
 810b8f0:	f8c8 1000 	streq.w	r1, [r8]
 810b8f4:	5162      	str	r2, [r4, r5]
 810b8f6:	604b      	str	r3, [r1, #4]
 810b8f8:	4630      	mov	r0, r6
 810b8fa:	f000 f82f 	bl	810b95c <__malloc_unlock>
 810b8fe:	f104 000b 	add.w	r0, r4, #11
 810b902:	1d23      	adds	r3, r4, #4
 810b904:	f020 0007 	bic.w	r0, r0, #7
 810b908:	1ac2      	subs	r2, r0, r3
 810b90a:	bf1c      	itt	ne
 810b90c:	1a1b      	subne	r3, r3, r0
 810b90e:	50a3      	strne	r3, [r4, r2]
 810b910:	e7af      	b.n	810b872 <_malloc_r+0x22>
 810b912:	6862      	ldr	r2, [r4, #4]
 810b914:	42a3      	cmp	r3, r4
 810b916:	bf0c      	ite	eq
 810b918:	f8c8 2000 	streq.w	r2, [r8]
 810b91c:	605a      	strne	r2, [r3, #4]
 810b91e:	e7eb      	b.n	810b8f8 <_malloc_r+0xa8>
 810b920:	4623      	mov	r3, r4
 810b922:	6864      	ldr	r4, [r4, #4]
 810b924:	e7ae      	b.n	810b884 <_malloc_r+0x34>
 810b926:	463c      	mov	r4, r7
 810b928:	687f      	ldr	r7, [r7, #4]
 810b92a:	e7b6      	b.n	810b89a <_malloc_r+0x4a>
 810b92c:	461a      	mov	r2, r3
 810b92e:	685b      	ldr	r3, [r3, #4]
 810b930:	42a3      	cmp	r3, r4
 810b932:	d1fb      	bne.n	810b92c <_malloc_r+0xdc>
 810b934:	2300      	movs	r3, #0
 810b936:	6053      	str	r3, [r2, #4]
 810b938:	e7de      	b.n	810b8f8 <_malloc_r+0xa8>
 810b93a:	230c      	movs	r3, #12
 810b93c:	6033      	str	r3, [r6, #0]
 810b93e:	4630      	mov	r0, r6
 810b940:	f000 f80c 	bl	810b95c <__malloc_unlock>
 810b944:	e794      	b.n	810b870 <_malloc_r+0x20>
 810b946:	6005      	str	r5, [r0, #0]
 810b948:	e7d6      	b.n	810b8f8 <_malloc_r+0xa8>
 810b94a:	bf00      	nop
 810b94c:	100005bc 	.word	0x100005bc

0810b950 <__malloc_lock>:
 810b950:	4801      	ldr	r0, [pc, #4]	@ (810b958 <__malloc_lock+0x8>)
 810b952:	f7ff b8a6 	b.w	810aaa2 <__retarget_lock_acquire_recursive>
 810b956:	bf00      	nop
 810b958:	100005b4 	.word	0x100005b4

0810b95c <__malloc_unlock>:
 810b95c:	4801      	ldr	r0, [pc, #4]	@ (810b964 <__malloc_unlock+0x8>)
 810b95e:	f7ff b8a1 	b.w	810aaa4 <__retarget_lock_release_recursive>
 810b962:	bf00      	nop
 810b964:	100005b4 	.word	0x100005b4

0810b968 <_Balloc>:
 810b968:	b570      	push	{r4, r5, r6, lr}
 810b96a:	69c6      	ldr	r6, [r0, #28]
 810b96c:	4604      	mov	r4, r0
 810b96e:	460d      	mov	r5, r1
 810b970:	b976      	cbnz	r6, 810b990 <_Balloc+0x28>
 810b972:	2010      	movs	r0, #16
 810b974:	f7ff ff42 	bl	810b7fc <malloc>
 810b978:	4602      	mov	r2, r0
 810b97a:	61e0      	str	r0, [r4, #28]
 810b97c:	b920      	cbnz	r0, 810b988 <_Balloc+0x20>
 810b97e:	4b18      	ldr	r3, [pc, #96]	@ (810b9e0 <_Balloc+0x78>)
 810b980:	4818      	ldr	r0, [pc, #96]	@ (810b9e4 <_Balloc+0x7c>)
 810b982:	216b      	movs	r1, #107	@ 0x6b
 810b984:	f001 ff34 	bl	810d7f0 <__assert_func>
 810b988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b98c:	6006      	str	r6, [r0, #0]
 810b98e:	60c6      	str	r6, [r0, #12]
 810b990:	69e6      	ldr	r6, [r4, #28]
 810b992:	68f3      	ldr	r3, [r6, #12]
 810b994:	b183      	cbz	r3, 810b9b8 <_Balloc+0x50>
 810b996:	69e3      	ldr	r3, [r4, #28]
 810b998:	68db      	ldr	r3, [r3, #12]
 810b99a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810b99e:	b9b8      	cbnz	r0, 810b9d0 <_Balloc+0x68>
 810b9a0:	2101      	movs	r1, #1
 810b9a2:	fa01 f605 	lsl.w	r6, r1, r5
 810b9a6:	1d72      	adds	r2, r6, #5
 810b9a8:	0092      	lsls	r2, r2, #2
 810b9aa:	4620      	mov	r0, r4
 810b9ac:	f001 ff3e 	bl	810d82c <_calloc_r>
 810b9b0:	b160      	cbz	r0, 810b9cc <_Balloc+0x64>
 810b9b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810b9b6:	e00e      	b.n	810b9d6 <_Balloc+0x6e>
 810b9b8:	2221      	movs	r2, #33	@ 0x21
 810b9ba:	2104      	movs	r1, #4
 810b9bc:	4620      	mov	r0, r4
 810b9be:	f001 ff35 	bl	810d82c <_calloc_r>
 810b9c2:	69e3      	ldr	r3, [r4, #28]
 810b9c4:	60f0      	str	r0, [r6, #12]
 810b9c6:	68db      	ldr	r3, [r3, #12]
 810b9c8:	2b00      	cmp	r3, #0
 810b9ca:	d1e4      	bne.n	810b996 <_Balloc+0x2e>
 810b9cc:	2000      	movs	r0, #0
 810b9ce:	bd70      	pop	{r4, r5, r6, pc}
 810b9d0:	6802      	ldr	r2, [r0, #0]
 810b9d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810b9d6:	2300      	movs	r3, #0
 810b9d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b9dc:	e7f7      	b.n	810b9ce <_Balloc+0x66>
 810b9de:	bf00      	nop
 810b9e0:	0810e88a 	.word	0x0810e88a
 810b9e4:	0810e90a 	.word	0x0810e90a

0810b9e8 <_Bfree>:
 810b9e8:	b570      	push	{r4, r5, r6, lr}
 810b9ea:	69c6      	ldr	r6, [r0, #28]
 810b9ec:	4605      	mov	r5, r0
 810b9ee:	460c      	mov	r4, r1
 810b9f0:	b976      	cbnz	r6, 810ba10 <_Bfree+0x28>
 810b9f2:	2010      	movs	r0, #16
 810b9f4:	f7ff ff02 	bl	810b7fc <malloc>
 810b9f8:	4602      	mov	r2, r0
 810b9fa:	61e8      	str	r0, [r5, #28]
 810b9fc:	b920      	cbnz	r0, 810ba08 <_Bfree+0x20>
 810b9fe:	4b09      	ldr	r3, [pc, #36]	@ (810ba24 <_Bfree+0x3c>)
 810ba00:	4809      	ldr	r0, [pc, #36]	@ (810ba28 <_Bfree+0x40>)
 810ba02:	218f      	movs	r1, #143	@ 0x8f
 810ba04:	f001 fef4 	bl	810d7f0 <__assert_func>
 810ba08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ba0c:	6006      	str	r6, [r0, #0]
 810ba0e:	60c6      	str	r6, [r0, #12]
 810ba10:	b13c      	cbz	r4, 810ba22 <_Bfree+0x3a>
 810ba12:	69eb      	ldr	r3, [r5, #28]
 810ba14:	6862      	ldr	r2, [r4, #4]
 810ba16:	68db      	ldr	r3, [r3, #12]
 810ba18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810ba1c:	6021      	str	r1, [r4, #0]
 810ba1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810ba22:	bd70      	pop	{r4, r5, r6, pc}
 810ba24:	0810e88a 	.word	0x0810e88a
 810ba28:	0810e90a 	.word	0x0810e90a

0810ba2c <__multadd>:
 810ba2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ba30:	690d      	ldr	r5, [r1, #16]
 810ba32:	4607      	mov	r7, r0
 810ba34:	460c      	mov	r4, r1
 810ba36:	461e      	mov	r6, r3
 810ba38:	f101 0c14 	add.w	ip, r1, #20
 810ba3c:	2000      	movs	r0, #0
 810ba3e:	f8dc 3000 	ldr.w	r3, [ip]
 810ba42:	b299      	uxth	r1, r3
 810ba44:	fb02 6101 	mla	r1, r2, r1, r6
 810ba48:	0c1e      	lsrs	r6, r3, #16
 810ba4a:	0c0b      	lsrs	r3, r1, #16
 810ba4c:	fb02 3306 	mla	r3, r2, r6, r3
 810ba50:	b289      	uxth	r1, r1
 810ba52:	3001      	adds	r0, #1
 810ba54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810ba58:	4285      	cmp	r5, r0
 810ba5a:	f84c 1b04 	str.w	r1, [ip], #4
 810ba5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810ba62:	dcec      	bgt.n	810ba3e <__multadd+0x12>
 810ba64:	b30e      	cbz	r6, 810baaa <__multadd+0x7e>
 810ba66:	68a3      	ldr	r3, [r4, #8]
 810ba68:	42ab      	cmp	r3, r5
 810ba6a:	dc19      	bgt.n	810baa0 <__multadd+0x74>
 810ba6c:	6861      	ldr	r1, [r4, #4]
 810ba6e:	4638      	mov	r0, r7
 810ba70:	3101      	adds	r1, #1
 810ba72:	f7ff ff79 	bl	810b968 <_Balloc>
 810ba76:	4680      	mov	r8, r0
 810ba78:	b928      	cbnz	r0, 810ba86 <__multadd+0x5a>
 810ba7a:	4602      	mov	r2, r0
 810ba7c:	4b0c      	ldr	r3, [pc, #48]	@ (810bab0 <__multadd+0x84>)
 810ba7e:	480d      	ldr	r0, [pc, #52]	@ (810bab4 <__multadd+0x88>)
 810ba80:	21ba      	movs	r1, #186	@ 0xba
 810ba82:	f001 feb5 	bl	810d7f0 <__assert_func>
 810ba86:	6922      	ldr	r2, [r4, #16]
 810ba88:	3202      	adds	r2, #2
 810ba8a:	f104 010c 	add.w	r1, r4, #12
 810ba8e:	0092      	lsls	r2, r2, #2
 810ba90:	300c      	adds	r0, #12
 810ba92:	f7ff f808 	bl	810aaa6 <memcpy>
 810ba96:	4621      	mov	r1, r4
 810ba98:	4638      	mov	r0, r7
 810ba9a:	f7ff ffa5 	bl	810b9e8 <_Bfree>
 810ba9e:	4644      	mov	r4, r8
 810baa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810baa4:	3501      	adds	r5, #1
 810baa6:	615e      	str	r6, [r3, #20]
 810baa8:	6125      	str	r5, [r4, #16]
 810baaa:	4620      	mov	r0, r4
 810baac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bab0:	0810e8f9 	.word	0x0810e8f9
 810bab4:	0810e90a 	.word	0x0810e90a

0810bab8 <__s2b>:
 810bab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810babc:	460c      	mov	r4, r1
 810babe:	4615      	mov	r5, r2
 810bac0:	461f      	mov	r7, r3
 810bac2:	2209      	movs	r2, #9
 810bac4:	3308      	adds	r3, #8
 810bac6:	4606      	mov	r6, r0
 810bac8:	fb93 f3f2 	sdiv	r3, r3, r2
 810bacc:	2100      	movs	r1, #0
 810bace:	2201      	movs	r2, #1
 810bad0:	429a      	cmp	r2, r3
 810bad2:	db09      	blt.n	810bae8 <__s2b+0x30>
 810bad4:	4630      	mov	r0, r6
 810bad6:	f7ff ff47 	bl	810b968 <_Balloc>
 810bada:	b940      	cbnz	r0, 810baee <__s2b+0x36>
 810badc:	4602      	mov	r2, r0
 810bade:	4b19      	ldr	r3, [pc, #100]	@ (810bb44 <__s2b+0x8c>)
 810bae0:	4819      	ldr	r0, [pc, #100]	@ (810bb48 <__s2b+0x90>)
 810bae2:	21d3      	movs	r1, #211	@ 0xd3
 810bae4:	f001 fe84 	bl	810d7f0 <__assert_func>
 810bae8:	0052      	lsls	r2, r2, #1
 810baea:	3101      	adds	r1, #1
 810baec:	e7f0      	b.n	810bad0 <__s2b+0x18>
 810baee:	9b08      	ldr	r3, [sp, #32]
 810baf0:	6143      	str	r3, [r0, #20]
 810baf2:	2d09      	cmp	r5, #9
 810baf4:	f04f 0301 	mov.w	r3, #1
 810baf8:	6103      	str	r3, [r0, #16]
 810bafa:	dd16      	ble.n	810bb2a <__s2b+0x72>
 810bafc:	f104 0909 	add.w	r9, r4, #9
 810bb00:	46c8      	mov	r8, r9
 810bb02:	442c      	add	r4, r5
 810bb04:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bb08:	4601      	mov	r1, r0
 810bb0a:	3b30      	subs	r3, #48	@ 0x30
 810bb0c:	220a      	movs	r2, #10
 810bb0e:	4630      	mov	r0, r6
 810bb10:	f7ff ff8c 	bl	810ba2c <__multadd>
 810bb14:	45a0      	cmp	r8, r4
 810bb16:	d1f5      	bne.n	810bb04 <__s2b+0x4c>
 810bb18:	f1a5 0408 	sub.w	r4, r5, #8
 810bb1c:	444c      	add	r4, r9
 810bb1e:	1b2d      	subs	r5, r5, r4
 810bb20:	1963      	adds	r3, r4, r5
 810bb22:	42bb      	cmp	r3, r7
 810bb24:	db04      	blt.n	810bb30 <__s2b+0x78>
 810bb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bb2a:	340a      	adds	r4, #10
 810bb2c:	2509      	movs	r5, #9
 810bb2e:	e7f6      	b.n	810bb1e <__s2b+0x66>
 810bb30:	f814 3b01 	ldrb.w	r3, [r4], #1
 810bb34:	4601      	mov	r1, r0
 810bb36:	3b30      	subs	r3, #48	@ 0x30
 810bb38:	220a      	movs	r2, #10
 810bb3a:	4630      	mov	r0, r6
 810bb3c:	f7ff ff76 	bl	810ba2c <__multadd>
 810bb40:	e7ee      	b.n	810bb20 <__s2b+0x68>
 810bb42:	bf00      	nop
 810bb44:	0810e8f9 	.word	0x0810e8f9
 810bb48:	0810e90a 	.word	0x0810e90a

0810bb4c <__hi0bits>:
 810bb4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810bb50:	4603      	mov	r3, r0
 810bb52:	bf36      	itet	cc
 810bb54:	0403      	lslcc	r3, r0, #16
 810bb56:	2000      	movcs	r0, #0
 810bb58:	2010      	movcc	r0, #16
 810bb5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810bb5e:	bf3c      	itt	cc
 810bb60:	021b      	lslcc	r3, r3, #8
 810bb62:	3008      	addcc	r0, #8
 810bb64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bb68:	bf3c      	itt	cc
 810bb6a:	011b      	lslcc	r3, r3, #4
 810bb6c:	3004      	addcc	r0, #4
 810bb6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bb72:	bf3c      	itt	cc
 810bb74:	009b      	lslcc	r3, r3, #2
 810bb76:	3002      	addcc	r0, #2
 810bb78:	2b00      	cmp	r3, #0
 810bb7a:	db05      	blt.n	810bb88 <__hi0bits+0x3c>
 810bb7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810bb80:	f100 0001 	add.w	r0, r0, #1
 810bb84:	bf08      	it	eq
 810bb86:	2020      	moveq	r0, #32
 810bb88:	4770      	bx	lr

0810bb8a <__lo0bits>:
 810bb8a:	6803      	ldr	r3, [r0, #0]
 810bb8c:	4602      	mov	r2, r0
 810bb8e:	f013 0007 	ands.w	r0, r3, #7
 810bb92:	d00b      	beq.n	810bbac <__lo0bits+0x22>
 810bb94:	07d9      	lsls	r1, r3, #31
 810bb96:	d421      	bmi.n	810bbdc <__lo0bits+0x52>
 810bb98:	0798      	lsls	r0, r3, #30
 810bb9a:	bf49      	itett	mi
 810bb9c:	085b      	lsrmi	r3, r3, #1
 810bb9e:	089b      	lsrpl	r3, r3, #2
 810bba0:	2001      	movmi	r0, #1
 810bba2:	6013      	strmi	r3, [r2, #0]
 810bba4:	bf5c      	itt	pl
 810bba6:	6013      	strpl	r3, [r2, #0]
 810bba8:	2002      	movpl	r0, #2
 810bbaa:	4770      	bx	lr
 810bbac:	b299      	uxth	r1, r3
 810bbae:	b909      	cbnz	r1, 810bbb4 <__lo0bits+0x2a>
 810bbb0:	0c1b      	lsrs	r3, r3, #16
 810bbb2:	2010      	movs	r0, #16
 810bbb4:	b2d9      	uxtb	r1, r3
 810bbb6:	b909      	cbnz	r1, 810bbbc <__lo0bits+0x32>
 810bbb8:	3008      	adds	r0, #8
 810bbba:	0a1b      	lsrs	r3, r3, #8
 810bbbc:	0719      	lsls	r1, r3, #28
 810bbbe:	bf04      	itt	eq
 810bbc0:	091b      	lsreq	r3, r3, #4
 810bbc2:	3004      	addeq	r0, #4
 810bbc4:	0799      	lsls	r1, r3, #30
 810bbc6:	bf04      	itt	eq
 810bbc8:	089b      	lsreq	r3, r3, #2
 810bbca:	3002      	addeq	r0, #2
 810bbcc:	07d9      	lsls	r1, r3, #31
 810bbce:	d403      	bmi.n	810bbd8 <__lo0bits+0x4e>
 810bbd0:	085b      	lsrs	r3, r3, #1
 810bbd2:	f100 0001 	add.w	r0, r0, #1
 810bbd6:	d003      	beq.n	810bbe0 <__lo0bits+0x56>
 810bbd8:	6013      	str	r3, [r2, #0]
 810bbda:	4770      	bx	lr
 810bbdc:	2000      	movs	r0, #0
 810bbde:	4770      	bx	lr
 810bbe0:	2020      	movs	r0, #32
 810bbe2:	4770      	bx	lr

0810bbe4 <__i2b>:
 810bbe4:	b510      	push	{r4, lr}
 810bbe6:	460c      	mov	r4, r1
 810bbe8:	2101      	movs	r1, #1
 810bbea:	f7ff febd 	bl	810b968 <_Balloc>
 810bbee:	4602      	mov	r2, r0
 810bbf0:	b928      	cbnz	r0, 810bbfe <__i2b+0x1a>
 810bbf2:	4b05      	ldr	r3, [pc, #20]	@ (810bc08 <__i2b+0x24>)
 810bbf4:	4805      	ldr	r0, [pc, #20]	@ (810bc0c <__i2b+0x28>)
 810bbf6:	f240 1145 	movw	r1, #325	@ 0x145
 810bbfa:	f001 fdf9 	bl	810d7f0 <__assert_func>
 810bbfe:	2301      	movs	r3, #1
 810bc00:	6144      	str	r4, [r0, #20]
 810bc02:	6103      	str	r3, [r0, #16]
 810bc04:	bd10      	pop	{r4, pc}
 810bc06:	bf00      	nop
 810bc08:	0810e8f9 	.word	0x0810e8f9
 810bc0c:	0810e90a 	.word	0x0810e90a

0810bc10 <__multiply>:
 810bc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bc14:	4614      	mov	r4, r2
 810bc16:	690a      	ldr	r2, [r1, #16]
 810bc18:	6923      	ldr	r3, [r4, #16]
 810bc1a:	429a      	cmp	r2, r3
 810bc1c:	bfa8      	it	ge
 810bc1e:	4623      	movge	r3, r4
 810bc20:	460f      	mov	r7, r1
 810bc22:	bfa4      	itt	ge
 810bc24:	460c      	movge	r4, r1
 810bc26:	461f      	movge	r7, r3
 810bc28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810bc2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810bc30:	68a3      	ldr	r3, [r4, #8]
 810bc32:	6861      	ldr	r1, [r4, #4]
 810bc34:	eb0a 0609 	add.w	r6, sl, r9
 810bc38:	42b3      	cmp	r3, r6
 810bc3a:	b085      	sub	sp, #20
 810bc3c:	bfb8      	it	lt
 810bc3e:	3101      	addlt	r1, #1
 810bc40:	f7ff fe92 	bl	810b968 <_Balloc>
 810bc44:	b930      	cbnz	r0, 810bc54 <__multiply+0x44>
 810bc46:	4602      	mov	r2, r0
 810bc48:	4b44      	ldr	r3, [pc, #272]	@ (810bd5c <__multiply+0x14c>)
 810bc4a:	4845      	ldr	r0, [pc, #276]	@ (810bd60 <__multiply+0x150>)
 810bc4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810bc50:	f001 fdce 	bl	810d7f0 <__assert_func>
 810bc54:	f100 0514 	add.w	r5, r0, #20
 810bc58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bc5c:	462b      	mov	r3, r5
 810bc5e:	2200      	movs	r2, #0
 810bc60:	4543      	cmp	r3, r8
 810bc62:	d321      	bcc.n	810bca8 <__multiply+0x98>
 810bc64:	f107 0114 	add.w	r1, r7, #20
 810bc68:	f104 0214 	add.w	r2, r4, #20
 810bc6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810bc70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810bc74:	9302      	str	r3, [sp, #8]
 810bc76:	1b13      	subs	r3, r2, r4
 810bc78:	3b15      	subs	r3, #21
 810bc7a:	f023 0303 	bic.w	r3, r3, #3
 810bc7e:	3304      	adds	r3, #4
 810bc80:	f104 0715 	add.w	r7, r4, #21
 810bc84:	42ba      	cmp	r2, r7
 810bc86:	bf38      	it	cc
 810bc88:	2304      	movcc	r3, #4
 810bc8a:	9301      	str	r3, [sp, #4]
 810bc8c:	9b02      	ldr	r3, [sp, #8]
 810bc8e:	9103      	str	r1, [sp, #12]
 810bc90:	428b      	cmp	r3, r1
 810bc92:	d80c      	bhi.n	810bcae <__multiply+0x9e>
 810bc94:	2e00      	cmp	r6, #0
 810bc96:	dd03      	ble.n	810bca0 <__multiply+0x90>
 810bc98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bc9c:	2b00      	cmp	r3, #0
 810bc9e:	d05b      	beq.n	810bd58 <__multiply+0x148>
 810bca0:	6106      	str	r6, [r0, #16]
 810bca2:	b005      	add	sp, #20
 810bca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bca8:	f843 2b04 	str.w	r2, [r3], #4
 810bcac:	e7d8      	b.n	810bc60 <__multiply+0x50>
 810bcae:	f8b1 a000 	ldrh.w	sl, [r1]
 810bcb2:	f1ba 0f00 	cmp.w	sl, #0
 810bcb6:	d024      	beq.n	810bd02 <__multiply+0xf2>
 810bcb8:	f104 0e14 	add.w	lr, r4, #20
 810bcbc:	46a9      	mov	r9, r5
 810bcbe:	f04f 0c00 	mov.w	ip, #0
 810bcc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 810bcc6:	f8d9 3000 	ldr.w	r3, [r9]
 810bcca:	fa1f fb87 	uxth.w	fp, r7
 810bcce:	b29b      	uxth	r3, r3
 810bcd0:	fb0a 330b 	mla	r3, sl, fp, r3
 810bcd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810bcd8:	f8d9 7000 	ldr.w	r7, [r9]
 810bcdc:	4463      	add	r3, ip
 810bcde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810bce2:	fb0a c70b 	mla	r7, sl, fp, ip
 810bce6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810bcea:	b29b      	uxth	r3, r3
 810bcec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bcf0:	4572      	cmp	r2, lr
 810bcf2:	f849 3b04 	str.w	r3, [r9], #4
 810bcf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810bcfa:	d8e2      	bhi.n	810bcc2 <__multiply+0xb2>
 810bcfc:	9b01      	ldr	r3, [sp, #4]
 810bcfe:	f845 c003 	str.w	ip, [r5, r3]
 810bd02:	9b03      	ldr	r3, [sp, #12]
 810bd04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810bd08:	3104      	adds	r1, #4
 810bd0a:	f1b9 0f00 	cmp.w	r9, #0
 810bd0e:	d021      	beq.n	810bd54 <__multiply+0x144>
 810bd10:	682b      	ldr	r3, [r5, #0]
 810bd12:	f104 0c14 	add.w	ip, r4, #20
 810bd16:	46ae      	mov	lr, r5
 810bd18:	f04f 0a00 	mov.w	sl, #0
 810bd1c:	f8bc b000 	ldrh.w	fp, [ip]
 810bd20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810bd24:	fb09 770b 	mla	r7, r9, fp, r7
 810bd28:	4457      	add	r7, sl
 810bd2a:	b29b      	uxth	r3, r3
 810bd2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bd30:	f84e 3b04 	str.w	r3, [lr], #4
 810bd34:	f85c 3b04 	ldr.w	r3, [ip], #4
 810bd38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bd3c:	f8be 3000 	ldrh.w	r3, [lr]
 810bd40:	fb09 330a 	mla	r3, r9, sl, r3
 810bd44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810bd48:	4562      	cmp	r2, ip
 810bd4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bd4e:	d8e5      	bhi.n	810bd1c <__multiply+0x10c>
 810bd50:	9f01      	ldr	r7, [sp, #4]
 810bd52:	51eb      	str	r3, [r5, r7]
 810bd54:	3504      	adds	r5, #4
 810bd56:	e799      	b.n	810bc8c <__multiply+0x7c>
 810bd58:	3e01      	subs	r6, #1
 810bd5a:	e79b      	b.n	810bc94 <__multiply+0x84>
 810bd5c:	0810e8f9 	.word	0x0810e8f9
 810bd60:	0810e90a 	.word	0x0810e90a

0810bd64 <__pow5mult>:
 810bd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bd68:	4615      	mov	r5, r2
 810bd6a:	f012 0203 	ands.w	r2, r2, #3
 810bd6e:	4607      	mov	r7, r0
 810bd70:	460e      	mov	r6, r1
 810bd72:	d007      	beq.n	810bd84 <__pow5mult+0x20>
 810bd74:	4c25      	ldr	r4, [pc, #148]	@ (810be0c <__pow5mult+0xa8>)
 810bd76:	3a01      	subs	r2, #1
 810bd78:	2300      	movs	r3, #0
 810bd7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bd7e:	f7ff fe55 	bl	810ba2c <__multadd>
 810bd82:	4606      	mov	r6, r0
 810bd84:	10ad      	asrs	r5, r5, #2
 810bd86:	d03d      	beq.n	810be04 <__pow5mult+0xa0>
 810bd88:	69fc      	ldr	r4, [r7, #28]
 810bd8a:	b97c      	cbnz	r4, 810bdac <__pow5mult+0x48>
 810bd8c:	2010      	movs	r0, #16
 810bd8e:	f7ff fd35 	bl	810b7fc <malloc>
 810bd92:	4602      	mov	r2, r0
 810bd94:	61f8      	str	r0, [r7, #28]
 810bd96:	b928      	cbnz	r0, 810bda4 <__pow5mult+0x40>
 810bd98:	4b1d      	ldr	r3, [pc, #116]	@ (810be10 <__pow5mult+0xac>)
 810bd9a:	481e      	ldr	r0, [pc, #120]	@ (810be14 <__pow5mult+0xb0>)
 810bd9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810bda0:	f001 fd26 	bl	810d7f0 <__assert_func>
 810bda4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bda8:	6004      	str	r4, [r0, #0]
 810bdaa:	60c4      	str	r4, [r0, #12]
 810bdac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810bdb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bdb4:	b94c      	cbnz	r4, 810bdca <__pow5mult+0x66>
 810bdb6:	f240 2171 	movw	r1, #625	@ 0x271
 810bdba:	4638      	mov	r0, r7
 810bdbc:	f7ff ff12 	bl	810bbe4 <__i2b>
 810bdc0:	2300      	movs	r3, #0
 810bdc2:	f8c8 0008 	str.w	r0, [r8, #8]
 810bdc6:	4604      	mov	r4, r0
 810bdc8:	6003      	str	r3, [r0, #0]
 810bdca:	f04f 0900 	mov.w	r9, #0
 810bdce:	07eb      	lsls	r3, r5, #31
 810bdd0:	d50a      	bpl.n	810bde8 <__pow5mult+0x84>
 810bdd2:	4631      	mov	r1, r6
 810bdd4:	4622      	mov	r2, r4
 810bdd6:	4638      	mov	r0, r7
 810bdd8:	f7ff ff1a 	bl	810bc10 <__multiply>
 810bddc:	4631      	mov	r1, r6
 810bdde:	4680      	mov	r8, r0
 810bde0:	4638      	mov	r0, r7
 810bde2:	f7ff fe01 	bl	810b9e8 <_Bfree>
 810bde6:	4646      	mov	r6, r8
 810bde8:	106d      	asrs	r5, r5, #1
 810bdea:	d00b      	beq.n	810be04 <__pow5mult+0xa0>
 810bdec:	6820      	ldr	r0, [r4, #0]
 810bdee:	b938      	cbnz	r0, 810be00 <__pow5mult+0x9c>
 810bdf0:	4622      	mov	r2, r4
 810bdf2:	4621      	mov	r1, r4
 810bdf4:	4638      	mov	r0, r7
 810bdf6:	f7ff ff0b 	bl	810bc10 <__multiply>
 810bdfa:	6020      	str	r0, [r4, #0]
 810bdfc:	f8c0 9000 	str.w	r9, [r0]
 810be00:	4604      	mov	r4, r0
 810be02:	e7e4      	b.n	810bdce <__pow5mult+0x6a>
 810be04:	4630      	mov	r0, r6
 810be06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810be0a:	bf00      	nop
 810be0c:	0810e964 	.word	0x0810e964
 810be10:	0810e88a 	.word	0x0810e88a
 810be14:	0810e90a 	.word	0x0810e90a

0810be18 <__lshift>:
 810be18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810be1c:	460c      	mov	r4, r1
 810be1e:	6849      	ldr	r1, [r1, #4]
 810be20:	6923      	ldr	r3, [r4, #16]
 810be22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810be26:	68a3      	ldr	r3, [r4, #8]
 810be28:	4607      	mov	r7, r0
 810be2a:	4691      	mov	r9, r2
 810be2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810be30:	f108 0601 	add.w	r6, r8, #1
 810be34:	42b3      	cmp	r3, r6
 810be36:	db0b      	blt.n	810be50 <__lshift+0x38>
 810be38:	4638      	mov	r0, r7
 810be3a:	f7ff fd95 	bl	810b968 <_Balloc>
 810be3e:	4605      	mov	r5, r0
 810be40:	b948      	cbnz	r0, 810be56 <__lshift+0x3e>
 810be42:	4602      	mov	r2, r0
 810be44:	4b28      	ldr	r3, [pc, #160]	@ (810bee8 <__lshift+0xd0>)
 810be46:	4829      	ldr	r0, [pc, #164]	@ (810beec <__lshift+0xd4>)
 810be48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810be4c:	f001 fcd0 	bl	810d7f0 <__assert_func>
 810be50:	3101      	adds	r1, #1
 810be52:	005b      	lsls	r3, r3, #1
 810be54:	e7ee      	b.n	810be34 <__lshift+0x1c>
 810be56:	2300      	movs	r3, #0
 810be58:	f100 0114 	add.w	r1, r0, #20
 810be5c:	f100 0210 	add.w	r2, r0, #16
 810be60:	4618      	mov	r0, r3
 810be62:	4553      	cmp	r3, sl
 810be64:	db33      	blt.n	810bece <__lshift+0xb6>
 810be66:	6920      	ldr	r0, [r4, #16]
 810be68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810be6c:	f104 0314 	add.w	r3, r4, #20
 810be70:	f019 091f 	ands.w	r9, r9, #31
 810be74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810be78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810be7c:	d02b      	beq.n	810bed6 <__lshift+0xbe>
 810be7e:	f1c9 0e20 	rsb	lr, r9, #32
 810be82:	468a      	mov	sl, r1
 810be84:	2200      	movs	r2, #0
 810be86:	6818      	ldr	r0, [r3, #0]
 810be88:	fa00 f009 	lsl.w	r0, r0, r9
 810be8c:	4310      	orrs	r0, r2
 810be8e:	f84a 0b04 	str.w	r0, [sl], #4
 810be92:	f853 2b04 	ldr.w	r2, [r3], #4
 810be96:	459c      	cmp	ip, r3
 810be98:	fa22 f20e 	lsr.w	r2, r2, lr
 810be9c:	d8f3      	bhi.n	810be86 <__lshift+0x6e>
 810be9e:	ebac 0304 	sub.w	r3, ip, r4
 810bea2:	3b15      	subs	r3, #21
 810bea4:	f023 0303 	bic.w	r3, r3, #3
 810bea8:	3304      	adds	r3, #4
 810beaa:	f104 0015 	add.w	r0, r4, #21
 810beae:	4584      	cmp	ip, r0
 810beb0:	bf38      	it	cc
 810beb2:	2304      	movcc	r3, #4
 810beb4:	50ca      	str	r2, [r1, r3]
 810beb6:	b10a      	cbz	r2, 810bebc <__lshift+0xa4>
 810beb8:	f108 0602 	add.w	r6, r8, #2
 810bebc:	3e01      	subs	r6, #1
 810bebe:	4638      	mov	r0, r7
 810bec0:	612e      	str	r6, [r5, #16]
 810bec2:	4621      	mov	r1, r4
 810bec4:	f7ff fd90 	bl	810b9e8 <_Bfree>
 810bec8:	4628      	mov	r0, r5
 810beca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810bece:	f842 0f04 	str.w	r0, [r2, #4]!
 810bed2:	3301      	adds	r3, #1
 810bed4:	e7c5      	b.n	810be62 <__lshift+0x4a>
 810bed6:	3904      	subs	r1, #4
 810bed8:	f853 2b04 	ldr.w	r2, [r3], #4
 810bedc:	f841 2f04 	str.w	r2, [r1, #4]!
 810bee0:	459c      	cmp	ip, r3
 810bee2:	d8f9      	bhi.n	810bed8 <__lshift+0xc0>
 810bee4:	e7ea      	b.n	810bebc <__lshift+0xa4>
 810bee6:	bf00      	nop
 810bee8:	0810e8f9 	.word	0x0810e8f9
 810beec:	0810e90a 	.word	0x0810e90a

0810bef0 <__mcmp>:
 810bef0:	690a      	ldr	r2, [r1, #16]
 810bef2:	4603      	mov	r3, r0
 810bef4:	6900      	ldr	r0, [r0, #16]
 810bef6:	1a80      	subs	r0, r0, r2
 810bef8:	b530      	push	{r4, r5, lr}
 810befa:	d10e      	bne.n	810bf1a <__mcmp+0x2a>
 810befc:	3314      	adds	r3, #20
 810befe:	3114      	adds	r1, #20
 810bf00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810bf04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810bf08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810bf0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810bf10:	4295      	cmp	r5, r2
 810bf12:	d003      	beq.n	810bf1c <__mcmp+0x2c>
 810bf14:	d205      	bcs.n	810bf22 <__mcmp+0x32>
 810bf16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810bf1a:	bd30      	pop	{r4, r5, pc}
 810bf1c:	42a3      	cmp	r3, r4
 810bf1e:	d3f3      	bcc.n	810bf08 <__mcmp+0x18>
 810bf20:	e7fb      	b.n	810bf1a <__mcmp+0x2a>
 810bf22:	2001      	movs	r0, #1
 810bf24:	e7f9      	b.n	810bf1a <__mcmp+0x2a>
	...

0810bf28 <__mdiff>:
 810bf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf2c:	4689      	mov	r9, r1
 810bf2e:	4606      	mov	r6, r0
 810bf30:	4611      	mov	r1, r2
 810bf32:	4648      	mov	r0, r9
 810bf34:	4614      	mov	r4, r2
 810bf36:	f7ff ffdb 	bl	810bef0 <__mcmp>
 810bf3a:	1e05      	subs	r5, r0, #0
 810bf3c:	d112      	bne.n	810bf64 <__mdiff+0x3c>
 810bf3e:	4629      	mov	r1, r5
 810bf40:	4630      	mov	r0, r6
 810bf42:	f7ff fd11 	bl	810b968 <_Balloc>
 810bf46:	4602      	mov	r2, r0
 810bf48:	b928      	cbnz	r0, 810bf56 <__mdiff+0x2e>
 810bf4a:	4b3f      	ldr	r3, [pc, #252]	@ (810c048 <__mdiff+0x120>)
 810bf4c:	f240 2137 	movw	r1, #567	@ 0x237
 810bf50:	483e      	ldr	r0, [pc, #248]	@ (810c04c <__mdiff+0x124>)
 810bf52:	f001 fc4d 	bl	810d7f0 <__assert_func>
 810bf56:	2301      	movs	r3, #1
 810bf58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810bf5c:	4610      	mov	r0, r2
 810bf5e:	b003      	add	sp, #12
 810bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bf64:	bfbc      	itt	lt
 810bf66:	464b      	movlt	r3, r9
 810bf68:	46a1      	movlt	r9, r4
 810bf6a:	4630      	mov	r0, r6
 810bf6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810bf70:	bfba      	itte	lt
 810bf72:	461c      	movlt	r4, r3
 810bf74:	2501      	movlt	r5, #1
 810bf76:	2500      	movge	r5, #0
 810bf78:	f7ff fcf6 	bl	810b968 <_Balloc>
 810bf7c:	4602      	mov	r2, r0
 810bf7e:	b918      	cbnz	r0, 810bf88 <__mdiff+0x60>
 810bf80:	4b31      	ldr	r3, [pc, #196]	@ (810c048 <__mdiff+0x120>)
 810bf82:	f240 2145 	movw	r1, #581	@ 0x245
 810bf86:	e7e3      	b.n	810bf50 <__mdiff+0x28>
 810bf88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810bf8c:	6926      	ldr	r6, [r4, #16]
 810bf8e:	60c5      	str	r5, [r0, #12]
 810bf90:	f109 0310 	add.w	r3, r9, #16
 810bf94:	f109 0514 	add.w	r5, r9, #20
 810bf98:	f104 0e14 	add.w	lr, r4, #20
 810bf9c:	f100 0b14 	add.w	fp, r0, #20
 810bfa0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810bfa4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810bfa8:	9301      	str	r3, [sp, #4]
 810bfaa:	46d9      	mov	r9, fp
 810bfac:	f04f 0c00 	mov.w	ip, #0
 810bfb0:	9b01      	ldr	r3, [sp, #4]
 810bfb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 810bfb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 810bfba:	9301      	str	r3, [sp, #4]
 810bfbc:	fa1f f38a 	uxth.w	r3, sl
 810bfc0:	4619      	mov	r1, r3
 810bfc2:	b283      	uxth	r3, r0
 810bfc4:	1acb      	subs	r3, r1, r3
 810bfc6:	0c00      	lsrs	r0, r0, #16
 810bfc8:	4463      	add	r3, ip
 810bfca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810bfce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810bfd2:	b29b      	uxth	r3, r3
 810bfd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810bfd8:	4576      	cmp	r6, lr
 810bfda:	f849 3b04 	str.w	r3, [r9], #4
 810bfde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810bfe2:	d8e5      	bhi.n	810bfb0 <__mdiff+0x88>
 810bfe4:	1b33      	subs	r3, r6, r4
 810bfe6:	3b15      	subs	r3, #21
 810bfe8:	f023 0303 	bic.w	r3, r3, #3
 810bfec:	3415      	adds	r4, #21
 810bfee:	3304      	adds	r3, #4
 810bff0:	42a6      	cmp	r6, r4
 810bff2:	bf38      	it	cc
 810bff4:	2304      	movcc	r3, #4
 810bff6:	441d      	add	r5, r3
 810bff8:	445b      	add	r3, fp
 810bffa:	461e      	mov	r6, r3
 810bffc:	462c      	mov	r4, r5
 810bffe:	4544      	cmp	r4, r8
 810c000:	d30e      	bcc.n	810c020 <__mdiff+0xf8>
 810c002:	f108 0103 	add.w	r1, r8, #3
 810c006:	1b49      	subs	r1, r1, r5
 810c008:	f021 0103 	bic.w	r1, r1, #3
 810c00c:	3d03      	subs	r5, #3
 810c00e:	45a8      	cmp	r8, r5
 810c010:	bf38      	it	cc
 810c012:	2100      	movcc	r1, #0
 810c014:	440b      	add	r3, r1
 810c016:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c01a:	b191      	cbz	r1, 810c042 <__mdiff+0x11a>
 810c01c:	6117      	str	r7, [r2, #16]
 810c01e:	e79d      	b.n	810bf5c <__mdiff+0x34>
 810c020:	f854 1b04 	ldr.w	r1, [r4], #4
 810c024:	46e6      	mov	lr, ip
 810c026:	0c08      	lsrs	r0, r1, #16
 810c028:	fa1c fc81 	uxtah	ip, ip, r1
 810c02c:	4471      	add	r1, lr
 810c02e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810c032:	b289      	uxth	r1, r1
 810c034:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810c038:	f846 1b04 	str.w	r1, [r6], #4
 810c03c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810c040:	e7dd      	b.n	810bffe <__mdiff+0xd6>
 810c042:	3f01      	subs	r7, #1
 810c044:	e7e7      	b.n	810c016 <__mdiff+0xee>
 810c046:	bf00      	nop
 810c048:	0810e8f9 	.word	0x0810e8f9
 810c04c:	0810e90a 	.word	0x0810e90a

0810c050 <__ulp>:
 810c050:	b082      	sub	sp, #8
 810c052:	ed8d 0b00 	vstr	d0, [sp]
 810c056:	9a01      	ldr	r2, [sp, #4]
 810c058:	4b0f      	ldr	r3, [pc, #60]	@ (810c098 <__ulp+0x48>)
 810c05a:	4013      	ands	r3, r2
 810c05c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810c060:	2b00      	cmp	r3, #0
 810c062:	dc08      	bgt.n	810c076 <__ulp+0x26>
 810c064:	425b      	negs	r3, r3
 810c066:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810c06a:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c06e:	da04      	bge.n	810c07a <__ulp+0x2a>
 810c070:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810c074:	4113      	asrs	r3, r2
 810c076:	2200      	movs	r2, #0
 810c078:	e008      	b.n	810c08c <__ulp+0x3c>
 810c07a:	f1a2 0314 	sub.w	r3, r2, #20
 810c07e:	2b1e      	cmp	r3, #30
 810c080:	bfda      	itte	le
 810c082:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810c086:	40da      	lsrle	r2, r3
 810c088:	2201      	movgt	r2, #1
 810c08a:	2300      	movs	r3, #0
 810c08c:	4619      	mov	r1, r3
 810c08e:	4610      	mov	r0, r2
 810c090:	ec41 0b10 	vmov	d0, r0, r1
 810c094:	b002      	add	sp, #8
 810c096:	4770      	bx	lr
 810c098:	7ff00000 	.word	0x7ff00000

0810c09c <__b2d>:
 810c09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c0a0:	6906      	ldr	r6, [r0, #16]
 810c0a2:	f100 0814 	add.w	r8, r0, #20
 810c0a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810c0aa:	1f37      	subs	r7, r6, #4
 810c0ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c0b0:	4610      	mov	r0, r2
 810c0b2:	f7ff fd4b 	bl	810bb4c <__hi0bits>
 810c0b6:	f1c0 0320 	rsb	r3, r0, #32
 810c0ba:	280a      	cmp	r0, #10
 810c0bc:	600b      	str	r3, [r1, #0]
 810c0be:	491b      	ldr	r1, [pc, #108]	@ (810c12c <__b2d+0x90>)
 810c0c0:	dc15      	bgt.n	810c0ee <__b2d+0x52>
 810c0c2:	f1c0 0c0b 	rsb	ip, r0, #11
 810c0c6:	fa22 f30c 	lsr.w	r3, r2, ip
 810c0ca:	45b8      	cmp	r8, r7
 810c0cc:	ea43 0501 	orr.w	r5, r3, r1
 810c0d0:	bf34      	ite	cc
 810c0d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c0d6:	2300      	movcs	r3, #0
 810c0d8:	3015      	adds	r0, #21
 810c0da:	fa02 f000 	lsl.w	r0, r2, r0
 810c0de:	fa23 f30c 	lsr.w	r3, r3, ip
 810c0e2:	4303      	orrs	r3, r0
 810c0e4:	461c      	mov	r4, r3
 810c0e6:	ec45 4b10 	vmov	d0, r4, r5
 810c0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c0ee:	45b8      	cmp	r8, r7
 810c0f0:	bf3a      	itte	cc
 810c0f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c0f6:	f1a6 0708 	subcc.w	r7, r6, #8
 810c0fa:	2300      	movcs	r3, #0
 810c0fc:	380b      	subs	r0, #11
 810c0fe:	d012      	beq.n	810c126 <__b2d+0x8a>
 810c100:	f1c0 0120 	rsb	r1, r0, #32
 810c104:	fa23 f401 	lsr.w	r4, r3, r1
 810c108:	4082      	lsls	r2, r0
 810c10a:	4322      	orrs	r2, r4
 810c10c:	4547      	cmp	r7, r8
 810c10e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810c112:	bf8c      	ite	hi
 810c114:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c118:	2200      	movls	r2, #0
 810c11a:	4083      	lsls	r3, r0
 810c11c:	40ca      	lsrs	r2, r1
 810c11e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810c122:	4313      	orrs	r3, r2
 810c124:	e7de      	b.n	810c0e4 <__b2d+0x48>
 810c126:	ea42 0501 	orr.w	r5, r2, r1
 810c12a:	e7db      	b.n	810c0e4 <__b2d+0x48>
 810c12c:	3ff00000 	.word	0x3ff00000

0810c130 <__d2b>:
 810c130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c134:	460f      	mov	r7, r1
 810c136:	2101      	movs	r1, #1
 810c138:	ec59 8b10 	vmov	r8, r9, d0
 810c13c:	4616      	mov	r6, r2
 810c13e:	f7ff fc13 	bl	810b968 <_Balloc>
 810c142:	4604      	mov	r4, r0
 810c144:	b930      	cbnz	r0, 810c154 <__d2b+0x24>
 810c146:	4602      	mov	r2, r0
 810c148:	4b23      	ldr	r3, [pc, #140]	@ (810c1d8 <__d2b+0xa8>)
 810c14a:	4824      	ldr	r0, [pc, #144]	@ (810c1dc <__d2b+0xac>)
 810c14c:	f240 310f 	movw	r1, #783	@ 0x30f
 810c150:	f001 fb4e 	bl	810d7f0 <__assert_func>
 810c154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c15c:	b10d      	cbz	r5, 810c162 <__d2b+0x32>
 810c15e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810c162:	9301      	str	r3, [sp, #4]
 810c164:	f1b8 0300 	subs.w	r3, r8, #0
 810c168:	d023      	beq.n	810c1b2 <__d2b+0x82>
 810c16a:	4668      	mov	r0, sp
 810c16c:	9300      	str	r3, [sp, #0]
 810c16e:	f7ff fd0c 	bl	810bb8a <__lo0bits>
 810c172:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c176:	b1d0      	cbz	r0, 810c1ae <__d2b+0x7e>
 810c178:	f1c0 0320 	rsb	r3, r0, #32
 810c17c:	fa02 f303 	lsl.w	r3, r2, r3
 810c180:	430b      	orrs	r3, r1
 810c182:	40c2      	lsrs	r2, r0
 810c184:	6163      	str	r3, [r4, #20]
 810c186:	9201      	str	r2, [sp, #4]
 810c188:	9b01      	ldr	r3, [sp, #4]
 810c18a:	61a3      	str	r3, [r4, #24]
 810c18c:	2b00      	cmp	r3, #0
 810c18e:	bf0c      	ite	eq
 810c190:	2201      	moveq	r2, #1
 810c192:	2202      	movne	r2, #2
 810c194:	6122      	str	r2, [r4, #16]
 810c196:	b1a5      	cbz	r5, 810c1c2 <__d2b+0x92>
 810c198:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810c19c:	4405      	add	r5, r0
 810c19e:	603d      	str	r5, [r7, #0]
 810c1a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810c1a4:	6030      	str	r0, [r6, #0]
 810c1a6:	4620      	mov	r0, r4
 810c1a8:	b003      	add	sp, #12
 810c1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c1ae:	6161      	str	r1, [r4, #20]
 810c1b0:	e7ea      	b.n	810c188 <__d2b+0x58>
 810c1b2:	a801      	add	r0, sp, #4
 810c1b4:	f7ff fce9 	bl	810bb8a <__lo0bits>
 810c1b8:	9b01      	ldr	r3, [sp, #4]
 810c1ba:	6163      	str	r3, [r4, #20]
 810c1bc:	3020      	adds	r0, #32
 810c1be:	2201      	movs	r2, #1
 810c1c0:	e7e8      	b.n	810c194 <__d2b+0x64>
 810c1c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c1c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810c1ca:	6038      	str	r0, [r7, #0]
 810c1cc:	6918      	ldr	r0, [r3, #16]
 810c1ce:	f7ff fcbd 	bl	810bb4c <__hi0bits>
 810c1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c1d6:	e7e5      	b.n	810c1a4 <__d2b+0x74>
 810c1d8:	0810e8f9 	.word	0x0810e8f9
 810c1dc:	0810e90a 	.word	0x0810e90a

0810c1e0 <__ratio>:
 810c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1e4:	b085      	sub	sp, #20
 810c1e6:	e9cd 1000 	strd	r1, r0, [sp]
 810c1ea:	a902      	add	r1, sp, #8
 810c1ec:	f7ff ff56 	bl	810c09c <__b2d>
 810c1f0:	9800      	ldr	r0, [sp, #0]
 810c1f2:	a903      	add	r1, sp, #12
 810c1f4:	ec55 4b10 	vmov	r4, r5, d0
 810c1f8:	f7ff ff50 	bl	810c09c <__b2d>
 810c1fc:	9b01      	ldr	r3, [sp, #4]
 810c1fe:	6919      	ldr	r1, [r3, #16]
 810c200:	9b00      	ldr	r3, [sp, #0]
 810c202:	691b      	ldr	r3, [r3, #16]
 810c204:	1ac9      	subs	r1, r1, r3
 810c206:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810c20a:	1a9b      	subs	r3, r3, r2
 810c20c:	ec5b ab10 	vmov	sl, fp, d0
 810c210:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810c214:	2b00      	cmp	r3, #0
 810c216:	bfce      	itee	gt
 810c218:	462a      	movgt	r2, r5
 810c21a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c21e:	465a      	movle	r2, fp
 810c220:	462f      	mov	r7, r5
 810c222:	46d9      	mov	r9, fp
 810c224:	bfcc      	ite	gt
 810c226:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c22a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810c22e:	464b      	mov	r3, r9
 810c230:	4652      	mov	r2, sl
 810c232:	4620      	mov	r0, r4
 810c234:	4639      	mov	r1, r7
 810c236:	f7f4 fb91 	bl	810095c <__aeabi_ddiv>
 810c23a:	ec41 0b10 	vmov	d0, r0, r1
 810c23e:	b005      	add	sp, #20
 810c240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c244 <__copybits>:
 810c244:	3901      	subs	r1, #1
 810c246:	b570      	push	{r4, r5, r6, lr}
 810c248:	1149      	asrs	r1, r1, #5
 810c24a:	6914      	ldr	r4, [r2, #16]
 810c24c:	3101      	adds	r1, #1
 810c24e:	f102 0314 	add.w	r3, r2, #20
 810c252:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c256:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c25a:	1f05      	subs	r5, r0, #4
 810c25c:	42a3      	cmp	r3, r4
 810c25e:	d30c      	bcc.n	810c27a <__copybits+0x36>
 810c260:	1aa3      	subs	r3, r4, r2
 810c262:	3b11      	subs	r3, #17
 810c264:	f023 0303 	bic.w	r3, r3, #3
 810c268:	3211      	adds	r2, #17
 810c26a:	42a2      	cmp	r2, r4
 810c26c:	bf88      	it	hi
 810c26e:	2300      	movhi	r3, #0
 810c270:	4418      	add	r0, r3
 810c272:	2300      	movs	r3, #0
 810c274:	4288      	cmp	r0, r1
 810c276:	d305      	bcc.n	810c284 <__copybits+0x40>
 810c278:	bd70      	pop	{r4, r5, r6, pc}
 810c27a:	f853 6b04 	ldr.w	r6, [r3], #4
 810c27e:	f845 6f04 	str.w	r6, [r5, #4]!
 810c282:	e7eb      	b.n	810c25c <__copybits+0x18>
 810c284:	f840 3b04 	str.w	r3, [r0], #4
 810c288:	e7f4      	b.n	810c274 <__copybits+0x30>

0810c28a <__any_on>:
 810c28a:	f100 0214 	add.w	r2, r0, #20
 810c28e:	6900      	ldr	r0, [r0, #16]
 810c290:	114b      	asrs	r3, r1, #5
 810c292:	4298      	cmp	r0, r3
 810c294:	b510      	push	{r4, lr}
 810c296:	db11      	blt.n	810c2bc <__any_on+0x32>
 810c298:	dd0a      	ble.n	810c2b0 <__any_on+0x26>
 810c29a:	f011 011f 	ands.w	r1, r1, #31
 810c29e:	d007      	beq.n	810c2b0 <__any_on+0x26>
 810c2a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c2a4:	fa24 f001 	lsr.w	r0, r4, r1
 810c2a8:	fa00 f101 	lsl.w	r1, r0, r1
 810c2ac:	428c      	cmp	r4, r1
 810c2ae:	d10b      	bne.n	810c2c8 <__any_on+0x3e>
 810c2b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c2b4:	4293      	cmp	r3, r2
 810c2b6:	d803      	bhi.n	810c2c0 <__any_on+0x36>
 810c2b8:	2000      	movs	r0, #0
 810c2ba:	bd10      	pop	{r4, pc}
 810c2bc:	4603      	mov	r3, r0
 810c2be:	e7f7      	b.n	810c2b0 <__any_on+0x26>
 810c2c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c2c4:	2900      	cmp	r1, #0
 810c2c6:	d0f5      	beq.n	810c2b4 <__any_on+0x2a>
 810c2c8:	2001      	movs	r0, #1
 810c2ca:	e7f6      	b.n	810c2ba <__any_on+0x30>

0810c2cc <sulp>:
 810c2cc:	b570      	push	{r4, r5, r6, lr}
 810c2ce:	4604      	mov	r4, r0
 810c2d0:	460d      	mov	r5, r1
 810c2d2:	ec45 4b10 	vmov	d0, r4, r5
 810c2d6:	4616      	mov	r6, r2
 810c2d8:	f7ff feba 	bl	810c050 <__ulp>
 810c2dc:	ec51 0b10 	vmov	r0, r1, d0
 810c2e0:	b17e      	cbz	r6, 810c302 <sulp+0x36>
 810c2e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810c2e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810c2ea:	2b00      	cmp	r3, #0
 810c2ec:	dd09      	ble.n	810c302 <sulp+0x36>
 810c2ee:	051b      	lsls	r3, r3, #20
 810c2f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810c2f4:	2400      	movs	r4, #0
 810c2f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810c2fa:	4622      	mov	r2, r4
 810c2fc:	462b      	mov	r3, r5
 810c2fe:	f7f4 fa03 	bl	8100708 <__aeabi_dmul>
 810c302:	ec41 0b10 	vmov	d0, r0, r1
 810c306:	bd70      	pop	{r4, r5, r6, pc}

0810c308 <_strtod_l>:
 810c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c30c:	b09f      	sub	sp, #124	@ 0x7c
 810c30e:	460c      	mov	r4, r1
 810c310:	9217      	str	r2, [sp, #92]	@ 0x5c
 810c312:	2200      	movs	r2, #0
 810c314:	921a      	str	r2, [sp, #104]	@ 0x68
 810c316:	9005      	str	r0, [sp, #20]
 810c318:	f04f 0a00 	mov.w	sl, #0
 810c31c:	f04f 0b00 	mov.w	fp, #0
 810c320:	460a      	mov	r2, r1
 810c322:	9219      	str	r2, [sp, #100]	@ 0x64
 810c324:	7811      	ldrb	r1, [r2, #0]
 810c326:	292b      	cmp	r1, #43	@ 0x2b
 810c328:	d04a      	beq.n	810c3c0 <_strtod_l+0xb8>
 810c32a:	d838      	bhi.n	810c39e <_strtod_l+0x96>
 810c32c:	290d      	cmp	r1, #13
 810c32e:	d832      	bhi.n	810c396 <_strtod_l+0x8e>
 810c330:	2908      	cmp	r1, #8
 810c332:	d832      	bhi.n	810c39a <_strtod_l+0x92>
 810c334:	2900      	cmp	r1, #0
 810c336:	d03b      	beq.n	810c3b0 <_strtod_l+0xa8>
 810c338:	2200      	movs	r2, #0
 810c33a:	920b      	str	r2, [sp, #44]	@ 0x2c
 810c33c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810c33e:	782a      	ldrb	r2, [r5, #0]
 810c340:	2a30      	cmp	r2, #48	@ 0x30
 810c342:	f040 80b3 	bne.w	810c4ac <_strtod_l+0x1a4>
 810c346:	786a      	ldrb	r2, [r5, #1]
 810c348:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810c34c:	2a58      	cmp	r2, #88	@ 0x58
 810c34e:	d16e      	bne.n	810c42e <_strtod_l+0x126>
 810c350:	9302      	str	r3, [sp, #8]
 810c352:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c354:	9301      	str	r3, [sp, #4]
 810c356:	ab1a      	add	r3, sp, #104	@ 0x68
 810c358:	9300      	str	r3, [sp, #0]
 810c35a:	4a8e      	ldr	r2, [pc, #568]	@ (810c594 <_strtod_l+0x28c>)
 810c35c:	9805      	ldr	r0, [sp, #20]
 810c35e:	ab1b      	add	r3, sp, #108	@ 0x6c
 810c360:	a919      	add	r1, sp, #100	@ 0x64
 810c362:	f001 fadf 	bl	810d924 <__gethex>
 810c366:	f010 060f 	ands.w	r6, r0, #15
 810c36a:	4604      	mov	r4, r0
 810c36c:	d005      	beq.n	810c37a <_strtod_l+0x72>
 810c36e:	2e06      	cmp	r6, #6
 810c370:	d128      	bne.n	810c3c4 <_strtod_l+0xbc>
 810c372:	3501      	adds	r5, #1
 810c374:	2300      	movs	r3, #0
 810c376:	9519      	str	r5, [sp, #100]	@ 0x64
 810c378:	930b      	str	r3, [sp, #44]	@ 0x2c
 810c37a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c37c:	2b00      	cmp	r3, #0
 810c37e:	f040 858e 	bne.w	810ce9e <_strtod_l+0xb96>
 810c382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c384:	b1cb      	cbz	r3, 810c3ba <_strtod_l+0xb2>
 810c386:	4652      	mov	r2, sl
 810c388:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810c38c:	ec43 2b10 	vmov	d0, r2, r3
 810c390:	b01f      	add	sp, #124	@ 0x7c
 810c392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c396:	2920      	cmp	r1, #32
 810c398:	d1ce      	bne.n	810c338 <_strtod_l+0x30>
 810c39a:	3201      	adds	r2, #1
 810c39c:	e7c1      	b.n	810c322 <_strtod_l+0x1a>
 810c39e:	292d      	cmp	r1, #45	@ 0x2d
 810c3a0:	d1ca      	bne.n	810c338 <_strtod_l+0x30>
 810c3a2:	2101      	movs	r1, #1
 810c3a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 810c3a6:	1c51      	adds	r1, r2, #1
 810c3a8:	9119      	str	r1, [sp, #100]	@ 0x64
 810c3aa:	7852      	ldrb	r2, [r2, #1]
 810c3ac:	2a00      	cmp	r2, #0
 810c3ae:	d1c5      	bne.n	810c33c <_strtod_l+0x34>
 810c3b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c3b2:	9419      	str	r4, [sp, #100]	@ 0x64
 810c3b4:	2b00      	cmp	r3, #0
 810c3b6:	f040 8570 	bne.w	810ce9a <_strtod_l+0xb92>
 810c3ba:	4652      	mov	r2, sl
 810c3bc:	465b      	mov	r3, fp
 810c3be:	e7e5      	b.n	810c38c <_strtod_l+0x84>
 810c3c0:	2100      	movs	r1, #0
 810c3c2:	e7ef      	b.n	810c3a4 <_strtod_l+0x9c>
 810c3c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810c3c6:	b13a      	cbz	r2, 810c3d8 <_strtod_l+0xd0>
 810c3c8:	2135      	movs	r1, #53	@ 0x35
 810c3ca:	a81c      	add	r0, sp, #112	@ 0x70
 810c3cc:	f7ff ff3a 	bl	810c244 <__copybits>
 810c3d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c3d2:	9805      	ldr	r0, [sp, #20]
 810c3d4:	f7ff fb08 	bl	810b9e8 <_Bfree>
 810c3d8:	3e01      	subs	r6, #1
 810c3da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810c3dc:	2e04      	cmp	r6, #4
 810c3de:	d806      	bhi.n	810c3ee <_strtod_l+0xe6>
 810c3e0:	e8df f006 	tbb	[pc, r6]
 810c3e4:	201d0314 	.word	0x201d0314
 810c3e8:	14          	.byte	0x14
 810c3e9:	00          	.byte	0x00
 810c3ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810c3ee:	05e1      	lsls	r1, r4, #23
 810c3f0:	bf48      	it	mi
 810c3f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810c3f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810c3fa:	0d1b      	lsrs	r3, r3, #20
 810c3fc:	051b      	lsls	r3, r3, #20
 810c3fe:	2b00      	cmp	r3, #0
 810c400:	d1bb      	bne.n	810c37a <_strtod_l+0x72>
 810c402:	f7fe fb23 	bl	810aa4c <__errno>
 810c406:	2322      	movs	r3, #34	@ 0x22
 810c408:	6003      	str	r3, [r0, #0]
 810c40a:	e7b6      	b.n	810c37a <_strtod_l+0x72>
 810c40c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810c410:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810c414:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810c418:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c41c:	e7e7      	b.n	810c3ee <_strtod_l+0xe6>
 810c41e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810c59c <_strtod_l+0x294>
 810c422:	e7e4      	b.n	810c3ee <_strtod_l+0xe6>
 810c424:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810c428:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810c42c:	e7df      	b.n	810c3ee <_strtod_l+0xe6>
 810c42e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c430:	1c5a      	adds	r2, r3, #1
 810c432:	9219      	str	r2, [sp, #100]	@ 0x64
 810c434:	785b      	ldrb	r3, [r3, #1]
 810c436:	2b30      	cmp	r3, #48	@ 0x30
 810c438:	d0f9      	beq.n	810c42e <_strtod_l+0x126>
 810c43a:	2b00      	cmp	r3, #0
 810c43c:	d09d      	beq.n	810c37a <_strtod_l+0x72>
 810c43e:	2301      	movs	r3, #1
 810c440:	9309      	str	r3, [sp, #36]	@ 0x24
 810c442:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c444:	930c      	str	r3, [sp, #48]	@ 0x30
 810c446:	2300      	movs	r3, #0
 810c448:	9308      	str	r3, [sp, #32]
 810c44a:	930a      	str	r3, [sp, #40]	@ 0x28
 810c44c:	461f      	mov	r7, r3
 810c44e:	220a      	movs	r2, #10
 810c450:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810c452:	7805      	ldrb	r5, [r0, #0]
 810c454:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810c458:	b2d9      	uxtb	r1, r3
 810c45a:	2909      	cmp	r1, #9
 810c45c:	d928      	bls.n	810c4b0 <_strtod_l+0x1a8>
 810c45e:	494e      	ldr	r1, [pc, #312]	@ (810c598 <_strtod_l+0x290>)
 810c460:	2201      	movs	r2, #1
 810c462:	f001 f979 	bl	810d758 <strncmp>
 810c466:	2800      	cmp	r0, #0
 810c468:	d032      	beq.n	810c4d0 <_strtod_l+0x1c8>
 810c46a:	2000      	movs	r0, #0
 810c46c:	462a      	mov	r2, r5
 810c46e:	4681      	mov	r9, r0
 810c470:	463d      	mov	r5, r7
 810c472:	4603      	mov	r3, r0
 810c474:	2a65      	cmp	r2, #101	@ 0x65
 810c476:	d001      	beq.n	810c47c <_strtod_l+0x174>
 810c478:	2a45      	cmp	r2, #69	@ 0x45
 810c47a:	d114      	bne.n	810c4a6 <_strtod_l+0x19e>
 810c47c:	b91d      	cbnz	r5, 810c486 <_strtod_l+0x17e>
 810c47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c480:	4302      	orrs	r2, r0
 810c482:	d095      	beq.n	810c3b0 <_strtod_l+0xa8>
 810c484:	2500      	movs	r5, #0
 810c486:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810c488:	1c62      	adds	r2, r4, #1
 810c48a:	9219      	str	r2, [sp, #100]	@ 0x64
 810c48c:	7862      	ldrb	r2, [r4, #1]
 810c48e:	2a2b      	cmp	r2, #43	@ 0x2b
 810c490:	d077      	beq.n	810c582 <_strtod_l+0x27a>
 810c492:	2a2d      	cmp	r2, #45	@ 0x2d
 810c494:	d07b      	beq.n	810c58e <_strtod_l+0x286>
 810c496:	f04f 0c00 	mov.w	ip, #0
 810c49a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810c49e:	2909      	cmp	r1, #9
 810c4a0:	f240 8082 	bls.w	810c5a8 <_strtod_l+0x2a0>
 810c4a4:	9419      	str	r4, [sp, #100]	@ 0x64
 810c4a6:	f04f 0800 	mov.w	r8, #0
 810c4aa:	e0a2      	b.n	810c5f2 <_strtod_l+0x2ea>
 810c4ac:	2300      	movs	r3, #0
 810c4ae:	e7c7      	b.n	810c440 <_strtod_l+0x138>
 810c4b0:	2f08      	cmp	r7, #8
 810c4b2:	bfd5      	itete	le
 810c4b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810c4b6:	9908      	ldrgt	r1, [sp, #32]
 810c4b8:	fb02 3301 	mlale	r3, r2, r1, r3
 810c4bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 810c4c0:	f100 0001 	add.w	r0, r0, #1
 810c4c4:	bfd4      	ite	le
 810c4c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 810c4c8:	9308      	strgt	r3, [sp, #32]
 810c4ca:	3701      	adds	r7, #1
 810c4cc:	9019      	str	r0, [sp, #100]	@ 0x64
 810c4ce:	e7bf      	b.n	810c450 <_strtod_l+0x148>
 810c4d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c4d2:	1c5a      	adds	r2, r3, #1
 810c4d4:	9219      	str	r2, [sp, #100]	@ 0x64
 810c4d6:	785a      	ldrb	r2, [r3, #1]
 810c4d8:	b37f      	cbz	r7, 810c53a <_strtod_l+0x232>
 810c4da:	4681      	mov	r9, r0
 810c4dc:	463d      	mov	r5, r7
 810c4de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810c4e2:	2b09      	cmp	r3, #9
 810c4e4:	d912      	bls.n	810c50c <_strtod_l+0x204>
 810c4e6:	2301      	movs	r3, #1
 810c4e8:	e7c4      	b.n	810c474 <_strtod_l+0x16c>
 810c4ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c4ec:	1c5a      	adds	r2, r3, #1
 810c4ee:	9219      	str	r2, [sp, #100]	@ 0x64
 810c4f0:	785a      	ldrb	r2, [r3, #1]
 810c4f2:	3001      	adds	r0, #1
 810c4f4:	2a30      	cmp	r2, #48	@ 0x30
 810c4f6:	d0f8      	beq.n	810c4ea <_strtod_l+0x1e2>
 810c4f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810c4fc:	2b08      	cmp	r3, #8
 810c4fe:	f200 84d3 	bhi.w	810cea8 <_strtod_l+0xba0>
 810c502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c504:	930c      	str	r3, [sp, #48]	@ 0x30
 810c506:	4681      	mov	r9, r0
 810c508:	2000      	movs	r0, #0
 810c50a:	4605      	mov	r5, r0
 810c50c:	3a30      	subs	r2, #48	@ 0x30
 810c50e:	f100 0301 	add.w	r3, r0, #1
 810c512:	d02a      	beq.n	810c56a <_strtod_l+0x262>
 810c514:	4499      	add	r9, r3
 810c516:	eb00 0c05 	add.w	ip, r0, r5
 810c51a:	462b      	mov	r3, r5
 810c51c:	210a      	movs	r1, #10
 810c51e:	4563      	cmp	r3, ip
 810c520:	d10d      	bne.n	810c53e <_strtod_l+0x236>
 810c522:	1c69      	adds	r1, r5, #1
 810c524:	4401      	add	r1, r0
 810c526:	4428      	add	r0, r5
 810c528:	2808      	cmp	r0, #8
 810c52a:	dc16      	bgt.n	810c55a <_strtod_l+0x252>
 810c52c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c52e:	230a      	movs	r3, #10
 810c530:	fb03 2300 	mla	r3, r3, r0, r2
 810c534:	930a      	str	r3, [sp, #40]	@ 0x28
 810c536:	2300      	movs	r3, #0
 810c538:	e018      	b.n	810c56c <_strtod_l+0x264>
 810c53a:	4638      	mov	r0, r7
 810c53c:	e7da      	b.n	810c4f4 <_strtod_l+0x1ec>
 810c53e:	2b08      	cmp	r3, #8
 810c540:	f103 0301 	add.w	r3, r3, #1
 810c544:	dc03      	bgt.n	810c54e <_strtod_l+0x246>
 810c546:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810c548:	434e      	muls	r6, r1
 810c54a:	960a      	str	r6, [sp, #40]	@ 0x28
 810c54c:	e7e7      	b.n	810c51e <_strtod_l+0x216>
 810c54e:	2b10      	cmp	r3, #16
 810c550:	bfde      	ittt	le
 810c552:	9e08      	ldrle	r6, [sp, #32]
 810c554:	434e      	mulle	r6, r1
 810c556:	9608      	strle	r6, [sp, #32]
 810c558:	e7e1      	b.n	810c51e <_strtod_l+0x216>
 810c55a:	280f      	cmp	r0, #15
 810c55c:	dceb      	bgt.n	810c536 <_strtod_l+0x22e>
 810c55e:	9808      	ldr	r0, [sp, #32]
 810c560:	230a      	movs	r3, #10
 810c562:	fb03 2300 	mla	r3, r3, r0, r2
 810c566:	9308      	str	r3, [sp, #32]
 810c568:	e7e5      	b.n	810c536 <_strtod_l+0x22e>
 810c56a:	4629      	mov	r1, r5
 810c56c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c56e:	1c50      	adds	r0, r2, #1
 810c570:	9019      	str	r0, [sp, #100]	@ 0x64
 810c572:	7852      	ldrb	r2, [r2, #1]
 810c574:	4618      	mov	r0, r3
 810c576:	460d      	mov	r5, r1
 810c578:	e7b1      	b.n	810c4de <_strtod_l+0x1d6>
 810c57a:	f04f 0900 	mov.w	r9, #0
 810c57e:	2301      	movs	r3, #1
 810c580:	e77d      	b.n	810c47e <_strtod_l+0x176>
 810c582:	f04f 0c00 	mov.w	ip, #0
 810c586:	1ca2      	adds	r2, r4, #2
 810c588:	9219      	str	r2, [sp, #100]	@ 0x64
 810c58a:	78a2      	ldrb	r2, [r4, #2]
 810c58c:	e785      	b.n	810c49a <_strtod_l+0x192>
 810c58e:	f04f 0c01 	mov.w	ip, #1
 810c592:	e7f8      	b.n	810c586 <_strtod_l+0x27e>
 810c594:	0810ea78 	.word	0x0810ea78
 810c598:	0810ea60 	.word	0x0810ea60
 810c59c:	7ff00000 	.word	0x7ff00000
 810c5a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c5a2:	1c51      	adds	r1, r2, #1
 810c5a4:	9119      	str	r1, [sp, #100]	@ 0x64
 810c5a6:	7852      	ldrb	r2, [r2, #1]
 810c5a8:	2a30      	cmp	r2, #48	@ 0x30
 810c5aa:	d0f9      	beq.n	810c5a0 <_strtod_l+0x298>
 810c5ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810c5b0:	2908      	cmp	r1, #8
 810c5b2:	f63f af78 	bhi.w	810c4a6 <_strtod_l+0x19e>
 810c5b6:	3a30      	subs	r2, #48	@ 0x30
 810c5b8:	920e      	str	r2, [sp, #56]	@ 0x38
 810c5ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c5bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 810c5be:	f04f 080a 	mov.w	r8, #10
 810c5c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c5c4:	1c56      	adds	r6, r2, #1
 810c5c6:	9619      	str	r6, [sp, #100]	@ 0x64
 810c5c8:	7852      	ldrb	r2, [r2, #1]
 810c5ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810c5ce:	f1be 0f09 	cmp.w	lr, #9
 810c5d2:	d939      	bls.n	810c648 <_strtod_l+0x340>
 810c5d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810c5d6:	1a76      	subs	r6, r6, r1
 810c5d8:	2e08      	cmp	r6, #8
 810c5da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810c5de:	dc03      	bgt.n	810c5e8 <_strtod_l+0x2e0>
 810c5e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c5e2:	4588      	cmp	r8, r1
 810c5e4:	bfa8      	it	ge
 810c5e6:	4688      	movge	r8, r1
 810c5e8:	f1bc 0f00 	cmp.w	ip, #0
 810c5ec:	d001      	beq.n	810c5f2 <_strtod_l+0x2ea>
 810c5ee:	f1c8 0800 	rsb	r8, r8, #0
 810c5f2:	2d00      	cmp	r5, #0
 810c5f4:	d14e      	bne.n	810c694 <_strtod_l+0x38c>
 810c5f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c5f8:	4308      	orrs	r0, r1
 810c5fa:	f47f aebe 	bne.w	810c37a <_strtod_l+0x72>
 810c5fe:	2b00      	cmp	r3, #0
 810c600:	f47f aed6 	bne.w	810c3b0 <_strtod_l+0xa8>
 810c604:	2a69      	cmp	r2, #105	@ 0x69
 810c606:	d028      	beq.n	810c65a <_strtod_l+0x352>
 810c608:	dc25      	bgt.n	810c656 <_strtod_l+0x34e>
 810c60a:	2a49      	cmp	r2, #73	@ 0x49
 810c60c:	d025      	beq.n	810c65a <_strtod_l+0x352>
 810c60e:	2a4e      	cmp	r2, #78	@ 0x4e
 810c610:	f47f aece 	bne.w	810c3b0 <_strtod_l+0xa8>
 810c614:	499b      	ldr	r1, [pc, #620]	@ (810c884 <_strtod_l+0x57c>)
 810c616:	a819      	add	r0, sp, #100	@ 0x64
 810c618:	f001 fba6 	bl	810dd68 <__match>
 810c61c:	2800      	cmp	r0, #0
 810c61e:	f43f aec7 	beq.w	810c3b0 <_strtod_l+0xa8>
 810c622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c624:	781b      	ldrb	r3, [r3, #0]
 810c626:	2b28      	cmp	r3, #40	@ 0x28
 810c628:	d12e      	bne.n	810c688 <_strtod_l+0x380>
 810c62a:	4997      	ldr	r1, [pc, #604]	@ (810c888 <_strtod_l+0x580>)
 810c62c:	aa1c      	add	r2, sp, #112	@ 0x70
 810c62e:	a819      	add	r0, sp, #100	@ 0x64
 810c630:	f001 fbae 	bl	810dd90 <__hexnan>
 810c634:	2805      	cmp	r0, #5
 810c636:	d127      	bne.n	810c688 <_strtod_l+0x380>
 810c638:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810c63a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810c63e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810c642:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810c646:	e698      	b.n	810c37a <_strtod_l+0x72>
 810c648:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c64a:	fb08 2101 	mla	r1, r8, r1, r2
 810c64e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810c652:	920e      	str	r2, [sp, #56]	@ 0x38
 810c654:	e7b5      	b.n	810c5c2 <_strtod_l+0x2ba>
 810c656:	2a6e      	cmp	r2, #110	@ 0x6e
 810c658:	e7da      	b.n	810c610 <_strtod_l+0x308>
 810c65a:	498c      	ldr	r1, [pc, #560]	@ (810c88c <_strtod_l+0x584>)
 810c65c:	a819      	add	r0, sp, #100	@ 0x64
 810c65e:	f001 fb83 	bl	810dd68 <__match>
 810c662:	2800      	cmp	r0, #0
 810c664:	f43f aea4 	beq.w	810c3b0 <_strtod_l+0xa8>
 810c668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c66a:	4989      	ldr	r1, [pc, #548]	@ (810c890 <_strtod_l+0x588>)
 810c66c:	3b01      	subs	r3, #1
 810c66e:	a819      	add	r0, sp, #100	@ 0x64
 810c670:	9319      	str	r3, [sp, #100]	@ 0x64
 810c672:	f001 fb79 	bl	810dd68 <__match>
 810c676:	b910      	cbnz	r0, 810c67e <_strtod_l+0x376>
 810c678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c67a:	3301      	adds	r3, #1
 810c67c:	9319      	str	r3, [sp, #100]	@ 0x64
 810c67e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810c8a0 <_strtod_l+0x598>
 810c682:	f04f 0a00 	mov.w	sl, #0
 810c686:	e678      	b.n	810c37a <_strtod_l+0x72>
 810c688:	4882      	ldr	r0, [pc, #520]	@ (810c894 <_strtod_l+0x58c>)
 810c68a:	f001 f8a9 	bl	810d7e0 <nan>
 810c68e:	ec5b ab10 	vmov	sl, fp, d0
 810c692:	e672      	b.n	810c37a <_strtod_l+0x72>
 810c694:	eba8 0309 	sub.w	r3, r8, r9
 810c698:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c69a:	9309      	str	r3, [sp, #36]	@ 0x24
 810c69c:	2f00      	cmp	r7, #0
 810c69e:	bf08      	it	eq
 810c6a0:	462f      	moveq	r7, r5
 810c6a2:	2d10      	cmp	r5, #16
 810c6a4:	462c      	mov	r4, r5
 810c6a6:	bfa8      	it	ge
 810c6a8:	2410      	movge	r4, #16
 810c6aa:	f7f3 ffb3 	bl	8100614 <__aeabi_ui2d>
 810c6ae:	2d09      	cmp	r5, #9
 810c6b0:	4682      	mov	sl, r0
 810c6b2:	468b      	mov	fp, r1
 810c6b4:	dc13      	bgt.n	810c6de <_strtod_l+0x3d6>
 810c6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c6b8:	2b00      	cmp	r3, #0
 810c6ba:	f43f ae5e 	beq.w	810c37a <_strtod_l+0x72>
 810c6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c6c0:	dd78      	ble.n	810c7b4 <_strtod_l+0x4ac>
 810c6c2:	2b16      	cmp	r3, #22
 810c6c4:	dc5f      	bgt.n	810c786 <_strtod_l+0x47e>
 810c6c6:	4974      	ldr	r1, [pc, #464]	@ (810c898 <_strtod_l+0x590>)
 810c6c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c6d0:	4652      	mov	r2, sl
 810c6d2:	465b      	mov	r3, fp
 810c6d4:	f7f4 f818 	bl	8100708 <__aeabi_dmul>
 810c6d8:	4682      	mov	sl, r0
 810c6da:	468b      	mov	fp, r1
 810c6dc:	e64d      	b.n	810c37a <_strtod_l+0x72>
 810c6de:	4b6e      	ldr	r3, [pc, #440]	@ (810c898 <_strtod_l+0x590>)
 810c6e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c6e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810c6e8:	f7f4 f80e 	bl	8100708 <__aeabi_dmul>
 810c6ec:	4682      	mov	sl, r0
 810c6ee:	9808      	ldr	r0, [sp, #32]
 810c6f0:	468b      	mov	fp, r1
 810c6f2:	f7f3 ff8f 	bl	8100614 <__aeabi_ui2d>
 810c6f6:	4602      	mov	r2, r0
 810c6f8:	460b      	mov	r3, r1
 810c6fa:	4650      	mov	r0, sl
 810c6fc:	4659      	mov	r1, fp
 810c6fe:	f7f3 fe4d 	bl	810039c <__adddf3>
 810c702:	2d0f      	cmp	r5, #15
 810c704:	4682      	mov	sl, r0
 810c706:	468b      	mov	fp, r1
 810c708:	ddd5      	ble.n	810c6b6 <_strtod_l+0x3ae>
 810c70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c70c:	1b2c      	subs	r4, r5, r4
 810c70e:	441c      	add	r4, r3
 810c710:	2c00      	cmp	r4, #0
 810c712:	f340 8096 	ble.w	810c842 <_strtod_l+0x53a>
 810c716:	f014 030f 	ands.w	r3, r4, #15
 810c71a:	d00a      	beq.n	810c732 <_strtod_l+0x42a>
 810c71c:	495e      	ldr	r1, [pc, #376]	@ (810c898 <_strtod_l+0x590>)
 810c71e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c722:	4652      	mov	r2, sl
 810c724:	465b      	mov	r3, fp
 810c726:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c72a:	f7f3 ffed 	bl	8100708 <__aeabi_dmul>
 810c72e:	4682      	mov	sl, r0
 810c730:	468b      	mov	fp, r1
 810c732:	f034 040f 	bics.w	r4, r4, #15
 810c736:	d073      	beq.n	810c820 <_strtod_l+0x518>
 810c738:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810c73c:	dd48      	ble.n	810c7d0 <_strtod_l+0x4c8>
 810c73e:	2400      	movs	r4, #0
 810c740:	46a0      	mov	r8, r4
 810c742:	940a      	str	r4, [sp, #40]	@ 0x28
 810c744:	46a1      	mov	r9, r4
 810c746:	9a05      	ldr	r2, [sp, #20]
 810c748:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810c8a0 <_strtod_l+0x598>
 810c74c:	2322      	movs	r3, #34	@ 0x22
 810c74e:	6013      	str	r3, [r2, #0]
 810c750:	f04f 0a00 	mov.w	sl, #0
 810c754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c756:	2b00      	cmp	r3, #0
 810c758:	f43f ae0f 	beq.w	810c37a <_strtod_l+0x72>
 810c75c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c75e:	9805      	ldr	r0, [sp, #20]
 810c760:	f7ff f942 	bl	810b9e8 <_Bfree>
 810c764:	9805      	ldr	r0, [sp, #20]
 810c766:	4649      	mov	r1, r9
 810c768:	f7ff f93e 	bl	810b9e8 <_Bfree>
 810c76c:	9805      	ldr	r0, [sp, #20]
 810c76e:	4641      	mov	r1, r8
 810c770:	f7ff f93a 	bl	810b9e8 <_Bfree>
 810c774:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810c776:	9805      	ldr	r0, [sp, #20]
 810c778:	f7ff f936 	bl	810b9e8 <_Bfree>
 810c77c:	9805      	ldr	r0, [sp, #20]
 810c77e:	4621      	mov	r1, r4
 810c780:	f7ff f932 	bl	810b9e8 <_Bfree>
 810c784:	e5f9      	b.n	810c37a <_strtod_l+0x72>
 810c786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c788:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810c78c:	4293      	cmp	r3, r2
 810c78e:	dbbc      	blt.n	810c70a <_strtod_l+0x402>
 810c790:	4c41      	ldr	r4, [pc, #260]	@ (810c898 <_strtod_l+0x590>)
 810c792:	f1c5 050f 	rsb	r5, r5, #15
 810c796:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c79a:	4652      	mov	r2, sl
 810c79c:	465b      	mov	r3, fp
 810c79e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c7a2:	f7f3 ffb1 	bl	8100708 <__aeabi_dmul>
 810c7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c7a8:	1b5d      	subs	r5, r3, r5
 810c7aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c7ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c7b2:	e78f      	b.n	810c6d4 <_strtod_l+0x3cc>
 810c7b4:	3316      	adds	r3, #22
 810c7b6:	dba8      	blt.n	810c70a <_strtod_l+0x402>
 810c7b8:	4b37      	ldr	r3, [pc, #220]	@ (810c898 <_strtod_l+0x590>)
 810c7ba:	eba9 0808 	sub.w	r8, r9, r8
 810c7be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810c7c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 810c7c6:	4650      	mov	r0, sl
 810c7c8:	4659      	mov	r1, fp
 810c7ca:	f7f4 f8c7 	bl	810095c <__aeabi_ddiv>
 810c7ce:	e783      	b.n	810c6d8 <_strtod_l+0x3d0>
 810c7d0:	4b32      	ldr	r3, [pc, #200]	@ (810c89c <_strtod_l+0x594>)
 810c7d2:	9308      	str	r3, [sp, #32]
 810c7d4:	2300      	movs	r3, #0
 810c7d6:	1124      	asrs	r4, r4, #4
 810c7d8:	4650      	mov	r0, sl
 810c7da:	4659      	mov	r1, fp
 810c7dc:	461e      	mov	r6, r3
 810c7de:	2c01      	cmp	r4, #1
 810c7e0:	dc21      	bgt.n	810c826 <_strtod_l+0x51e>
 810c7e2:	b10b      	cbz	r3, 810c7e8 <_strtod_l+0x4e0>
 810c7e4:	4682      	mov	sl, r0
 810c7e6:	468b      	mov	fp, r1
 810c7e8:	492c      	ldr	r1, [pc, #176]	@ (810c89c <_strtod_l+0x594>)
 810c7ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810c7ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810c7f2:	4652      	mov	r2, sl
 810c7f4:	465b      	mov	r3, fp
 810c7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c7fa:	f7f3 ff85 	bl	8100708 <__aeabi_dmul>
 810c7fe:	4b28      	ldr	r3, [pc, #160]	@ (810c8a0 <_strtod_l+0x598>)
 810c800:	460a      	mov	r2, r1
 810c802:	400b      	ands	r3, r1
 810c804:	4927      	ldr	r1, [pc, #156]	@ (810c8a4 <_strtod_l+0x59c>)
 810c806:	428b      	cmp	r3, r1
 810c808:	4682      	mov	sl, r0
 810c80a:	d898      	bhi.n	810c73e <_strtod_l+0x436>
 810c80c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810c810:	428b      	cmp	r3, r1
 810c812:	bf86      	itte	hi
 810c814:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810c8a8 <_strtod_l+0x5a0>
 810c818:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 810c81c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810c820:	2300      	movs	r3, #0
 810c822:	9308      	str	r3, [sp, #32]
 810c824:	e07a      	b.n	810c91c <_strtod_l+0x614>
 810c826:	07e2      	lsls	r2, r4, #31
 810c828:	d505      	bpl.n	810c836 <_strtod_l+0x52e>
 810c82a:	9b08      	ldr	r3, [sp, #32]
 810c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c830:	f7f3 ff6a 	bl	8100708 <__aeabi_dmul>
 810c834:	2301      	movs	r3, #1
 810c836:	9a08      	ldr	r2, [sp, #32]
 810c838:	3208      	adds	r2, #8
 810c83a:	3601      	adds	r6, #1
 810c83c:	1064      	asrs	r4, r4, #1
 810c83e:	9208      	str	r2, [sp, #32]
 810c840:	e7cd      	b.n	810c7de <_strtod_l+0x4d6>
 810c842:	d0ed      	beq.n	810c820 <_strtod_l+0x518>
 810c844:	4264      	negs	r4, r4
 810c846:	f014 020f 	ands.w	r2, r4, #15
 810c84a:	d00a      	beq.n	810c862 <_strtod_l+0x55a>
 810c84c:	4b12      	ldr	r3, [pc, #72]	@ (810c898 <_strtod_l+0x590>)
 810c84e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c852:	4650      	mov	r0, sl
 810c854:	4659      	mov	r1, fp
 810c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c85a:	f7f4 f87f 	bl	810095c <__aeabi_ddiv>
 810c85e:	4682      	mov	sl, r0
 810c860:	468b      	mov	fp, r1
 810c862:	1124      	asrs	r4, r4, #4
 810c864:	d0dc      	beq.n	810c820 <_strtod_l+0x518>
 810c866:	2c1f      	cmp	r4, #31
 810c868:	dd20      	ble.n	810c8ac <_strtod_l+0x5a4>
 810c86a:	2400      	movs	r4, #0
 810c86c:	46a0      	mov	r8, r4
 810c86e:	940a      	str	r4, [sp, #40]	@ 0x28
 810c870:	46a1      	mov	r9, r4
 810c872:	9a05      	ldr	r2, [sp, #20]
 810c874:	2322      	movs	r3, #34	@ 0x22
 810c876:	f04f 0a00 	mov.w	sl, #0
 810c87a:	f04f 0b00 	mov.w	fp, #0
 810c87e:	6013      	str	r3, [r2, #0]
 810c880:	e768      	b.n	810c754 <_strtod_l+0x44c>
 810c882:	bf00      	nop
 810c884:	0810e851 	.word	0x0810e851
 810c888:	0810ea64 	.word	0x0810ea64
 810c88c:	0810e849 	.word	0x0810e849
 810c890:	0810e880 	.word	0x0810e880
 810c894:	0810ec0d 	.word	0x0810ec0d
 810c898:	0810e998 	.word	0x0810e998
 810c89c:	0810e970 	.word	0x0810e970
 810c8a0:	7ff00000 	.word	0x7ff00000
 810c8a4:	7ca00000 	.word	0x7ca00000
 810c8a8:	7fefffff 	.word	0x7fefffff
 810c8ac:	f014 0310 	ands.w	r3, r4, #16
 810c8b0:	bf18      	it	ne
 810c8b2:	236a      	movne	r3, #106	@ 0x6a
 810c8b4:	4ea9      	ldr	r6, [pc, #676]	@ (810cb5c <_strtod_l+0x854>)
 810c8b6:	9308      	str	r3, [sp, #32]
 810c8b8:	4650      	mov	r0, sl
 810c8ba:	4659      	mov	r1, fp
 810c8bc:	2300      	movs	r3, #0
 810c8be:	07e2      	lsls	r2, r4, #31
 810c8c0:	d504      	bpl.n	810c8cc <_strtod_l+0x5c4>
 810c8c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 810c8c6:	f7f3 ff1f 	bl	8100708 <__aeabi_dmul>
 810c8ca:	2301      	movs	r3, #1
 810c8cc:	1064      	asrs	r4, r4, #1
 810c8ce:	f106 0608 	add.w	r6, r6, #8
 810c8d2:	d1f4      	bne.n	810c8be <_strtod_l+0x5b6>
 810c8d4:	b10b      	cbz	r3, 810c8da <_strtod_l+0x5d2>
 810c8d6:	4682      	mov	sl, r0
 810c8d8:	468b      	mov	fp, r1
 810c8da:	9b08      	ldr	r3, [sp, #32]
 810c8dc:	b1b3      	cbz	r3, 810c90c <_strtod_l+0x604>
 810c8de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810c8e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810c8e6:	2b00      	cmp	r3, #0
 810c8e8:	4659      	mov	r1, fp
 810c8ea:	dd0f      	ble.n	810c90c <_strtod_l+0x604>
 810c8ec:	2b1f      	cmp	r3, #31
 810c8ee:	dd55      	ble.n	810c99c <_strtod_l+0x694>
 810c8f0:	2b34      	cmp	r3, #52	@ 0x34
 810c8f2:	bfde      	ittt	le
 810c8f4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 810c8f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810c8fc:	4093      	lslle	r3, r2
 810c8fe:	f04f 0a00 	mov.w	sl, #0
 810c902:	bfcc      	ite	gt
 810c904:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810c908:	ea03 0b01 	andle.w	fp, r3, r1
 810c90c:	2200      	movs	r2, #0
 810c90e:	2300      	movs	r3, #0
 810c910:	4650      	mov	r0, sl
 810c912:	4659      	mov	r1, fp
 810c914:	f7f4 f960 	bl	8100bd8 <__aeabi_dcmpeq>
 810c918:	2800      	cmp	r0, #0
 810c91a:	d1a6      	bne.n	810c86a <_strtod_l+0x562>
 810c91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c91e:	9300      	str	r3, [sp, #0]
 810c920:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810c922:	9805      	ldr	r0, [sp, #20]
 810c924:	462b      	mov	r3, r5
 810c926:	463a      	mov	r2, r7
 810c928:	f7ff f8c6 	bl	810bab8 <__s2b>
 810c92c:	900a      	str	r0, [sp, #40]	@ 0x28
 810c92e:	2800      	cmp	r0, #0
 810c930:	f43f af05 	beq.w	810c73e <_strtod_l+0x436>
 810c934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c936:	2a00      	cmp	r2, #0
 810c938:	eba9 0308 	sub.w	r3, r9, r8
 810c93c:	bfa8      	it	ge
 810c93e:	2300      	movge	r3, #0
 810c940:	9312      	str	r3, [sp, #72]	@ 0x48
 810c942:	2400      	movs	r4, #0
 810c944:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810c948:	9316      	str	r3, [sp, #88]	@ 0x58
 810c94a:	46a0      	mov	r8, r4
 810c94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c94e:	9805      	ldr	r0, [sp, #20]
 810c950:	6859      	ldr	r1, [r3, #4]
 810c952:	f7ff f809 	bl	810b968 <_Balloc>
 810c956:	4681      	mov	r9, r0
 810c958:	2800      	cmp	r0, #0
 810c95a:	f43f aef4 	beq.w	810c746 <_strtod_l+0x43e>
 810c95e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c960:	691a      	ldr	r2, [r3, #16]
 810c962:	3202      	adds	r2, #2
 810c964:	f103 010c 	add.w	r1, r3, #12
 810c968:	0092      	lsls	r2, r2, #2
 810c96a:	300c      	adds	r0, #12
 810c96c:	f7fe f89b 	bl	810aaa6 <memcpy>
 810c970:	ec4b ab10 	vmov	d0, sl, fp
 810c974:	9805      	ldr	r0, [sp, #20]
 810c976:	aa1c      	add	r2, sp, #112	@ 0x70
 810c978:	a91b      	add	r1, sp, #108	@ 0x6c
 810c97a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810c97e:	f7ff fbd7 	bl	810c130 <__d2b>
 810c982:	901a      	str	r0, [sp, #104]	@ 0x68
 810c984:	2800      	cmp	r0, #0
 810c986:	f43f aede 	beq.w	810c746 <_strtod_l+0x43e>
 810c98a:	9805      	ldr	r0, [sp, #20]
 810c98c:	2101      	movs	r1, #1
 810c98e:	f7ff f929 	bl	810bbe4 <__i2b>
 810c992:	4680      	mov	r8, r0
 810c994:	b948      	cbnz	r0, 810c9aa <_strtod_l+0x6a2>
 810c996:	f04f 0800 	mov.w	r8, #0
 810c99a:	e6d4      	b.n	810c746 <_strtod_l+0x43e>
 810c99c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810c9a0:	fa02 f303 	lsl.w	r3, r2, r3
 810c9a4:	ea03 0a0a 	and.w	sl, r3, sl
 810c9a8:	e7b0      	b.n	810c90c <_strtod_l+0x604>
 810c9aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810c9ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810c9ae:	2d00      	cmp	r5, #0
 810c9b0:	bfab      	itete	ge
 810c9b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810c9b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810c9b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810c9b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810c9ba:	bfac      	ite	ge
 810c9bc:	18ef      	addge	r7, r5, r3
 810c9be:	1b5e      	sublt	r6, r3, r5
 810c9c0:	9b08      	ldr	r3, [sp, #32]
 810c9c2:	1aed      	subs	r5, r5, r3
 810c9c4:	4415      	add	r5, r2
 810c9c6:	4b66      	ldr	r3, [pc, #408]	@ (810cb60 <_strtod_l+0x858>)
 810c9c8:	3d01      	subs	r5, #1
 810c9ca:	429d      	cmp	r5, r3
 810c9cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810c9d0:	da50      	bge.n	810ca74 <_strtod_l+0x76c>
 810c9d2:	1b5b      	subs	r3, r3, r5
 810c9d4:	2b1f      	cmp	r3, #31
 810c9d6:	eba2 0203 	sub.w	r2, r2, r3
 810c9da:	f04f 0101 	mov.w	r1, #1
 810c9de:	dc3d      	bgt.n	810ca5c <_strtod_l+0x754>
 810c9e0:	fa01 f303 	lsl.w	r3, r1, r3
 810c9e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 810c9e6:	2300      	movs	r3, #0
 810c9e8:	9310      	str	r3, [sp, #64]	@ 0x40
 810c9ea:	18bd      	adds	r5, r7, r2
 810c9ec:	9b08      	ldr	r3, [sp, #32]
 810c9ee:	42af      	cmp	r7, r5
 810c9f0:	4416      	add	r6, r2
 810c9f2:	441e      	add	r6, r3
 810c9f4:	463b      	mov	r3, r7
 810c9f6:	bfa8      	it	ge
 810c9f8:	462b      	movge	r3, r5
 810c9fa:	42b3      	cmp	r3, r6
 810c9fc:	bfa8      	it	ge
 810c9fe:	4633      	movge	r3, r6
 810ca00:	2b00      	cmp	r3, #0
 810ca02:	bfc2      	ittt	gt
 810ca04:	1aed      	subgt	r5, r5, r3
 810ca06:	1af6      	subgt	r6, r6, r3
 810ca08:	1aff      	subgt	r7, r7, r3
 810ca0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810ca0c:	2b00      	cmp	r3, #0
 810ca0e:	dd16      	ble.n	810ca3e <_strtod_l+0x736>
 810ca10:	4641      	mov	r1, r8
 810ca12:	9805      	ldr	r0, [sp, #20]
 810ca14:	461a      	mov	r2, r3
 810ca16:	f7ff f9a5 	bl	810bd64 <__pow5mult>
 810ca1a:	4680      	mov	r8, r0
 810ca1c:	2800      	cmp	r0, #0
 810ca1e:	d0ba      	beq.n	810c996 <_strtod_l+0x68e>
 810ca20:	4601      	mov	r1, r0
 810ca22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810ca24:	9805      	ldr	r0, [sp, #20]
 810ca26:	f7ff f8f3 	bl	810bc10 <__multiply>
 810ca2a:	900e      	str	r0, [sp, #56]	@ 0x38
 810ca2c:	2800      	cmp	r0, #0
 810ca2e:	f43f ae8a 	beq.w	810c746 <_strtod_l+0x43e>
 810ca32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ca34:	9805      	ldr	r0, [sp, #20]
 810ca36:	f7fe ffd7 	bl	810b9e8 <_Bfree>
 810ca3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ca3c:	931a      	str	r3, [sp, #104]	@ 0x68
 810ca3e:	2d00      	cmp	r5, #0
 810ca40:	dc1d      	bgt.n	810ca7e <_strtod_l+0x776>
 810ca42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810ca44:	2b00      	cmp	r3, #0
 810ca46:	dd23      	ble.n	810ca90 <_strtod_l+0x788>
 810ca48:	4649      	mov	r1, r9
 810ca4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810ca4c:	9805      	ldr	r0, [sp, #20]
 810ca4e:	f7ff f989 	bl	810bd64 <__pow5mult>
 810ca52:	4681      	mov	r9, r0
 810ca54:	b9e0      	cbnz	r0, 810ca90 <_strtod_l+0x788>
 810ca56:	f04f 0900 	mov.w	r9, #0
 810ca5a:	e674      	b.n	810c746 <_strtod_l+0x43e>
 810ca5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810ca60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810ca64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810ca68:	35e2      	adds	r5, #226	@ 0xe2
 810ca6a:	fa01 f305 	lsl.w	r3, r1, r5
 810ca6e:	9310      	str	r3, [sp, #64]	@ 0x40
 810ca70:	9113      	str	r1, [sp, #76]	@ 0x4c
 810ca72:	e7ba      	b.n	810c9ea <_strtod_l+0x6e2>
 810ca74:	2300      	movs	r3, #0
 810ca76:	9310      	str	r3, [sp, #64]	@ 0x40
 810ca78:	2301      	movs	r3, #1
 810ca7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ca7c:	e7b5      	b.n	810c9ea <_strtod_l+0x6e2>
 810ca7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ca80:	9805      	ldr	r0, [sp, #20]
 810ca82:	462a      	mov	r2, r5
 810ca84:	f7ff f9c8 	bl	810be18 <__lshift>
 810ca88:	901a      	str	r0, [sp, #104]	@ 0x68
 810ca8a:	2800      	cmp	r0, #0
 810ca8c:	d1d9      	bne.n	810ca42 <_strtod_l+0x73a>
 810ca8e:	e65a      	b.n	810c746 <_strtod_l+0x43e>
 810ca90:	2e00      	cmp	r6, #0
 810ca92:	dd07      	ble.n	810caa4 <_strtod_l+0x79c>
 810ca94:	4649      	mov	r1, r9
 810ca96:	9805      	ldr	r0, [sp, #20]
 810ca98:	4632      	mov	r2, r6
 810ca9a:	f7ff f9bd 	bl	810be18 <__lshift>
 810ca9e:	4681      	mov	r9, r0
 810caa0:	2800      	cmp	r0, #0
 810caa2:	d0d8      	beq.n	810ca56 <_strtod_l+0x74e>
 810caa4:	2f00      	cmp	r7, #0
 810caa6:	dd08      	ble.n	810caba <_strtod_l+0x7b2>
 810caa8:	4641      	mov	r1, r8
 810caaa:	9805      	ldr	r0, [sp, #20]
 810caac:	463a      	mov	r2, r7
 810caae:	f7ff f9b3 	bl	810be18 <__lshift>
 810cab2:	4680      	mov	r8, r0
 810cab4:	2800      	cmp	r0, #0
 810cab6:	f43f ae46 	beq.w	810c746 <_strtod_l+0x43e>
 810caba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810cabc:	9805      	ldr	r0, [sp, #20]
 810cabe:	464a      	mov	r2, r9
 810cac0:	f7ff fa32 	bl	810bf28 <__mdiff>
 810cac4:	4604      	mov	r4, r0
 810cac6:	2800      	cmp	r0, #0
 810cac8:	f43f ae3d 	beq.w	810c746 <_strtod_l+0x43e>
 810cacc:	68c3      	ldr	r3, [r0, #12]
 810cace:	930f      	str	r3, [sp, #60]	@ 0x3c
 810cad0:	2300      	movs	r3, #0
 810cad2:	60c3      	str	r3, [r0, #12]
 810cad4:	4641      	mov	r1, r8
 810cad6:	f7ff fa0b 	bl	810bef0 <__mcmp>
 810cada:	2800      	cmp	r0, #0
 810cadc:	da46      	bge.n	810cb6c <_strtod_l+0x864>
 810cade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cae0:	ea53 030a 	orrs.w	r3, r3, sl
 810cae4:	d16c      	bne.n	810cbc0 <_strtod_l+0x8b8>
 810cae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810caea:	2b00      	cmp	r3, #0
 810caec:	d168      	bne.n	810cbc0 <_strtod_l+0x8b8>
 810caee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810caf2:	0d1b      	lsrs	r3, r3, #20
 810caf4:	051b      	lsls	r3, r3, #20
 810caf6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810cafa:	d961      	bls.n	810cbc0 <_strtod_l+0x8b8>
 810cafc:	6963      	ldr	r3, [r4, #20]
 810cafe:	b913      	cbnz	r3, 810cb06 <_strtod_l+0x7fe>
 810cb00:	6923      	ldr	r3, [r4, #16]
 810cb02:	2b01      	cmp	r3, #1
 810cb04:	dd5c      	ble.n	810cbc0 <_strtod_l+0x8b8>
 810cb06:	4621      	mov	r1, r4
 810cb08:	2201      	movs	r2, #1
 810cb0a:	9805      	ldr	r0, [sp, #20]
 810cb0c:	f7ff f984 	bl	810be18 <__lshift>
 810cb10:	4641      	mov	r1, r8
 810cb12:	4604      	mov	r4, r0
 810cb14:	f7ff f9ec 	bl	810bef0 <__mcmp>
 810cb18:	2800      	cmp	r0, #0
 810cb1a:	dd51      	ble.n	810cbc0 <_strtod_l+0x8b8>
 810cb1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cb20:	9a08      	ldr	r2, [sp, #32]
 810cb22:	0d1b      	lsrs	r3, r3, #20
 810cb24:	051b      	lsls	r3, r3, #20
 810cb26:	2a00      	cmp	r2, #0
 810cb28:	d06b      	beq.n	810cc02 <_strtod_l+0x8fa>
 810cb2a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810cb2e:	d868      	bhi.n	810cc02 <_strtod_l+0x8fa>
 810cb30:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810cb34:	f67f ae9d 	bls.w	810c872 <_strtod_l+0x56a>
 810cb38:	4b0a      	ldr	r3, [pc, #40]	@ (810cb64 <_strtod_l+0x85c>)
 810cb3a:	4650      	mov	r0, sl
 810cb3c:	4659      	mov	r1, fp
 810cb3e:	2200      	movs	r2, #0
 810cb40:	f7f3 fde2 	bl	8100708 <__aeabi_dmul>
 810cb44:	4b08      	ldr	r3, [pc, #32]	@ (810cb68 <_strtod_l+0x860>)
 810cb46:	400b      	ands	r3, r1
 810cb48:	4682      	mov	sl, r0
 810cb4a:	468b      	mov	fp, r1
 810cb4c:	2b00      	cmp	r3, #0
 810cb4e:	f47f ae05 	bne.w	810c75c <_strtod_l+0x454>
 810cb52:	9a05      	ldr	r2, [sp, #20]
 810cb54:	2322      	movs	r3, #34	@ 0x22
 810cb56:	6013      	str	r3, [r2, #0]
 810cb58:	e600      	b.n	810c75c <_strtod_l+0x454>
 810cb5a:	bf00      	nop
 810cb5c:	0810ea90 	.word	0x0810ea90
 810cb60:	fffffc02 	.word	0xfffffc02
 810cb64:	39500000 	.word	0x39500000
 810cb68:	7ff00000 	.word	0x7ff00000
 810cb6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cb70:	d165      	bne.n	810cc3e <_strtod_l+0x936>
 810cb72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810cb74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cb78:	b35a      	cbz	r2, 810cbd2 <_strtod_l+0x8ca>
 810cb7a:	4a9f      	ldr	r2, [pc, #636]	@ (810cdf8 <_strtod_l+0xaf0>)
 810cb7c:	4293      	cmp	r3, r2
 810cb7e:	d12b      	bne.n	810cbd8 <_strtod_l+0x8d0>
 810cb80:	9b08      	ldr	r3, [sp, #32]
 810cb82:	4651      	mov	r1, sl
 810cb84:	b303      	cbz	r3, 810cbc8 <_strtod_l+0x8c0>
 810cb86:	4b9d      	ldr	r3, [pc, #628]	@ (810cdfc <_strtod_l+0xaf4>)
 810cb88:	465a      	mov	r2, fp
 810cb8a:	4013      	ands	r3, r2
 810cb8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810cb90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810cb94:	d81b      	bhi.n	810cbce <_strtod_l+0x8c6>
 810cb96:	0d1b      	lsrs	r3, r3, #20
 810cb98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810cb9c:	fa02 f303 	lsl.w	r3, r2, r3
 810cba0:	4299      	cmp	r1, r3
 810cba2:	d119      	bne.n	810cbd8 <_strtod_l+0x8d0>
 810cba4:	4b96      	ldr	r3, [pc, #600]	@ (810ce00 <_strtod_l+0xaf8>)
 810cba6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cba8:	429a      	cmp	r2, r3
 810cbaa:	d102      	bne.n	810cbb2 <_strtod_l+0x8aa>
 810cbac:	3101      	adds	r1, #1
 810cbae:	f43f adca 	beq.w	810c746 <_strtod_l+0x43e>
 810cbb2:	4b92      	ldr	r3, [pc, #584]	@ (810cdfc <_strtod_l+0xaf4>)
 810cbb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cbb6:	401a      	ands	r2, r3
 810cbb8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810cbbc:	f04f 0a00 	mov.w	sl, #0
 810cbc0:	9b08      	ldr	r3, [sp, #32]
 810cbc2:	2b00      	cmp	r3, #0
 810cbc4:	d1b8      	bne.n	810cb38 <_strtod_l+0x830>
 810cbc6:	e5c9      	b.n	810c75c <_strtod_l+0x454>
 810cbc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810cbcc:	e7e8      	b.n	810cba0 <_strtod_l+0x898>
 810cbce:	4613      	mov	r3, r2
 810cbd0:	e7e6      	b.n	810cba0 <_strtod_l+0x898>
 810cbd2:	ea53 030a 	orrs.w	r3, r3, sl
 810cbd6:	d0a1      	beq.n	810cb1c <_strtod_l+0x814>
 810cbd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810cbda:	b1db      	cbz	r3, 810cc14 <_strtod_l+0x90c>
 810cbdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cbde:	4213      	tst	r3, r2
 810cbe0:	d0ee      	beq.n	810cbc0 <_strtod_l+0x8b8>
 810cbe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cbe4:	9a08      	ldr	r2, [sp, #32]
 810cbe6:	4650      	mov	r0, sl
 810cbe8:	4659      	mov	r1, fp
 810cbea:	b1bb      	cbz	r3, 810cc1c <_strtod_l+0x914>
 810cbec:	f7ff fb6e 	bl	810c2cc <sulp>
 810cbf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cbf4:	ec53 2b10 	vmov	r2, r3, d0
 810cbf8:	f7f3 fbd0 	bl	810039c <__adddf3>
 810cbfc:	4682      	mov	sl, r0
 810cbfe:	468b      	mov	fp, r1
 810cc00:	e7de      	b.n	810cbc0 <_strtod_l+0x8b8>
 810cc02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810cc06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810cc0a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810cc0e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810cc12:	e7d5      	b.n	810cbc0 <_strtod_l+0x8b8>
 810cc14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810cc16:	ea13 0f0a 	tst.w	r3, sl
 810cc1a:	e7e1      	b.n	810cbe0 <_strtod_l+0x8d8>
 810cc1c:	f7ff fb56 	bl	810c2cc <sulp>
 810cc20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cc24:	ec53 2b10 	vmov	r2, r3, d0
 810cc28:	f7f3 fbb6 	bl	8100398 <__aeabi_dsub>
 810cc2c:	2200      	movs	r2, #0
 810cc2e:	2300      	movs	r3, #0
 810cc30:	4682      	mov	sl, r0
 810cc32:	468b      	mov	fp, r1
 810cc34:	f7f3 ffd0 	bl	8100bd8 <__aeabi_dcmpeq>
 810cc38:	2800      	cmp	r0, #0
 810cc3a:	d0c1      	beq.n	810cbc0 <_strtod_l+0x8b8>
 810cc3c:	e619      	b.n	810c872 <_strtod_l+0x56a>
 810cc3e:	4641      	mov	r1, r8
 810cc40:	4620      	mov	r0, r4
 810cc42:	f7ff facd 	bl	810c1e0 <__ratio>
 810cc46:	ec57 6b10 	vmov	r6, r7, d0
 810cc4a:	2200      	movs	r2, #0
 810cc4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810cc50:	4630      	mov	r0, r6
 810cc52:	4639      	mov	r1, r7
 810cc54:	f7f3 ffd4 	bl	8100c00 <__aeabi_dcmple>
 810cc58:	2800      	cmp	r0, #0
 810cc5a:	d06f      	beq.n	810cd3c <_strtod_l+0xa34>
 810cc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cc5e:	2b00      	cmp	r3, #0
 810cc60:	d17a      	bne.n	810cd58 <_strtod_l+0xa50>
 810cc62:	f1ba 0f00 	cmp.w	sl, #0
 810cc66:	d158      	bne.n	810cd1a <_strtod_l+0xa12>
 810cc68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cc6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810cc6e:	2b00      	cmp	r3, #0
 810cc70:	d15a      	bne.n	810cd28 <_strtod_l+0xa20>
 810cc72:	4b64      	ldr	r3, [pc, #400]	@ (810ce04 <_strtod_l+0xafc>)
 810cc74:	2200      	movs	r2, #0
 810cc76:	4630      	mov	r0, r6
 810cc78:	4639      	mov	r1, r7
 810cc7a:	f7f3 ffb7 	bl	8100bec <__aeabi_dcmplt>
 810cc7e:	2800      	cmp	r0, #0
 810cc80:	d159      	bne.n	810cd36 <_strtod_l+0xa2e>
 810cc82:	4630      	mov	r0, r6
 810cc84:	4639      	mov	r1, r7
 810cc86:	4b60      	ldr	r3, [pc, #384]	@ (810ce08 <_strtod_l+0xb00>)
 810cc88:	2200      	movs	r2, #0
 810cc8a:	f7f3 fd3d 	bl	8100708 <__aeabi_dmul>
 810cc8e:	4606      	mov	r6, r0
 810cc90:	460f      	mov	r7, r1
 810cc92:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810cc96:	9606      	str	r6, [sp, #24]
 810cc98:	9307      	str	r3, [sp, #28]
 810cc9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cc9e:	4d57      	ldr	r5, [pc, #348]	@ (810cdfc <_strtod_l+0xaf4>)
 810cca0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810cca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cca6:	401d      	ands	r5, r3
 810cca8:	4b58      	ldr	r3, [pc, #352]	@ (810ce0c <_strtod_l+0xb04>)
 810ccaa:	429d      	cmp	r5, r3
 810ccac:	f040 80b2 	bne.w	810ce14 <_strtod_l+0xb0c>
 810ccb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ccb2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810ccb6:	ec4b ab10 	vmov	d0, sl, fp
 810ccba:	f7ff f9c9 	bl	810c050 <__ulp>
 810ccbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ccc2:	ec51 0b10 	vmov	r0, r1, d0
 810ccc6:	f7f3 fd1f 	bl	8100708 <__aeabi_dmul>
 810ccca:	4652      	mov	r2, sl
 810cccc:	465b      	mov	r3, fp
 810ccce:	f7f3 fb65 	bl	810039c <__adddf3>
 810ccd2:	460b      	mov	r3, r1
 810ccd4:	4949      	ldr	r1, [pc, #292]	@ (810cdfc <_strtod_l+0xaf4>)
 810ccd6:	4a4e      	ldr	r2, [pc, #312]	@ (810ce10 <_strtod_l+0xb08>)
 810ccd8:	4019      	ands	r1, r3
 810ccda:	4291      	cmp	r1, r2
 810ccdc:	4682      	mov	sl, r0
 810ccde:	d942      	bls.n	810cd66 <_strtod_l+0xa5e>
 810cce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810cce2:	4b47      	ldr	r3, [pc, #284]	@ (810ce00 <_strtod_l+0xaf8>)
 810cce4:	429a      	cmp	r2, r3
 810cce6:	d103      	bne.n	810ccf0 <_strtod_l+0x9e8>
 810cce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810ccea:	3301      	adds	r3, #1
 810ccec:	f43f ad2b 	beq.w	810c746 <_strtod_l+0x43e>
 810ccf0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810ce00 <_strtod_l+0xaf8>
 810ccf4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810ccf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ccfa:	9805      	ldr	r0, [sp, #20]
 810ccfc:	f7fe fe74 	bl	810b9e8 <_Bfree>
 810cd00:	9805      	ldr	r0, [sp, #20]
 810cd02:	4649      	mov	r1, r9
 810cd04:	f7fe fe70 	bl	810b9e8 <_Bfree>
 810cd08:	9805      	ldr	r0, [sp, #20]
 810cd0a:	4641      	mov	r1, r8
 810cd0c:	f7fe fe6c 	bl	810b9e8 <_Bfree>
 810cd10:	9805      	ldr	r0, [sp, #20]
 810cd12:	4621      	mov	r1, r4
 810cd14:	f7fe fe68 	bl	810b9e8 <_Bfree>
 810cd18:	e618      	b.n	810c94c <_strtod_l+0x644>
 810cd1a:	f1ba 0f01 	cmp.w	sl, #1
 810cd1e:	d103      	bne.n	810cd28 <_strtod_l+0xa20>
 810cd20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cd22:	2b00      	cmp	r3, #0
 810cd24:	f43f ada5 	beq.w	810c872 <_strtod_l+0x56a>
 810cd28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810cdd8 <_strtod_l+0xad0>
 810cd2c:	4f35      	ldr	r7, [pc, #212]	@ (810ce04 <_strtod_l+0xafc>)
 810cd2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cd32:	2600      	movs	r6, #0
 810cd34:	e7b1      	b.n	810cc9a <_strtod_l+0x992>
 810cd36:	4f34      	ldr	r7, [pc, #208]	@ (810ce08 <_strtod_l+0xb00>)
 810cd38:	2600      	movs	r6, #0
 810cd3a:	e7aa      	b.n	810cc92 <_strtod_l+0x98a>
 810cd3c:	4b32      	ldr	r3, [pc, #200]	@ (810ce08 <_strtod_l+0xb00>)
 810cd3e:	4630      	mov	r0, r6
 810cd40:	4639      	mov	r1, r7
 810cd42:	2200      	movs	r2, #0
 810cd44:	f7f3 fce0 	bl	8100708 <__aeabi_dmul>
 810cd48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cd4a:	4606      	mov	r6, r0
 810cd4c:	460f      	mov	r7, r1
 810cd4e:	2b00      	cmp	r3, #0
 810cd50:	d09f      	beq.n	810cc92 <_strtod_l+0x98a>
 810cd52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810cd56:	e7a0      	b.n	810cc9a <_strtod_l+0x992>
 810cd58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810cde0 <_strtod_l+0xad8>
 810cd5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cd60:	ec57 6b17 	vmov	r6, r7, d7
 810cd64:	e799      	b.n	810cc9a <_strtod_l+0x992>
 810cd66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810cd6a:	9b08      	ldr	r3, [sp, #32]
 810cd6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cd70:	2b00      	cmp	r3, #0
 810cd72:	d1c1      	bne.n	810ccf8 <_strtod_l+0x9f0>
 810cd74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cd78:	0d1b      	lsrs	r3, r3, #20
 810cd7a:	051b      	lsls	r3, r3, #20
 810cd7c:	429d      	cmp	r5, r3
 810cd7e:	d1bb      	bne.n	810ccf8 <_strtod_l+0x9f0>
 810cd80:	4630      	mov	r0, r6
 810cd82:	4639      	mov	r1, r7
 810cd84:	f7f4 f820 	bl	8100dc8 <__aeabi_d2lz>
 810cd88:	f7f3 fc90 	bl	81006ac <__aeabi_l2d>
 810cd8c:	4602      	mov	r2, r0
 810cd8e:	460b      	mov	r3, r1
 810cd90:	4630      	mov	r0, r6
 810cd92:	4639      	mov	r1, r7
 810cd94:	f7f3 fb00 	bl	8100398 <__aeabi_dsub>
 810cd98:	460b      	mov	r3, r1
 810cd9a:	4602      	mov	r2, r0
 810cd9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810cda0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810cda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cda6:	ea46 060a 	orr.w	r6, r6, sl
 810cdaa:	431e      	orrs	r6, r3
 810cdac:	d06f      	beq.n	810ce8e <_strtod_l+0xb86>
 810cdae:	a30e      	add	r3, pc, #56	@ (adr r3, 810cde8 <_strtod_l+0xae0>)
 810cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdb4:	f7f3 ff1a 	bl	8100bec <__aeabi_dcmplt>
 810cdb8:	2800      	cmp	r0, #0
 810cdba:	f47f accf 	bne.w	810c75c <_strtod_l+0x454>
 810cdbe:	a30c      	add	r3, pc, #48	@ (adr r3, 810cdf0 <_strtod_l+0xae8>)
 810cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cdc8:	f7f3 ff2e 	bl	8100c28 <__aeabi_dcmpgt>
 810cdcc:	2800      	cmp	r0, #0
 810cdce:	d093      	beq.n	810ccf8 <_strtod_l+0x9f0>
 810cdd0:	e4c4      	b.n	810c75c <_strtod_l+0x454>
 810cdd2:	bf00      	nop
 810cdd4:	f3af 8000 	nop.w
 810cdd8:	00000000 	.word	0x00000000
 810cddc:	bff00000 	.word	0xbff00000
 810cde0:	00000000 	.word	0x00000000
 810cde4:	3ff00000 	.word	0x3ff00000
 810cde8:	94a03595 	.word	0x94a03595
 810cdec:	3fdfffff 	.word	0x3fdfffff
 810cdf0:	35afe535 	.word	0x35afe535
 810cdf4:	3fe00000 	.word	0x3fe00000
 810cdf8:	000fffff 	.word	0x000fffff
 810cdfc:	7ff00000 	.word	0x7ff00000
 810ce00:	7fefffff 	.word	0x7fefffff
 810ce04:	3ff00000 	.word	0x3ff00000
 810ce08:	3fe00000 	.word	0x3fe00000
 810ce0c:	7fe00000 	.word	0x7fe00000
 810ce10:	7c9fffff 	.word	0x7c9fffff
 810ce14:	9b08      	ldr	r3, [sp, #32]
 810ce16:	b323      	cbz	r3, 810ce62 <_strtod_l+0xb5a>
 810ce18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810ce1c:	d821      	bhi.n	810ce62 <_strtod_l+0xb5a>
 810ce1e:	a328      	add	r3, pc, #160	@ (adr r3, 810cec0 <_strtod_l+0xbb8>)
 810ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce24:	4630      	mov	r0, r6
 810ce26:	4639      	mov	r1, r7
 810ce28:	f7f3 feea 	bl	8100c00 <__aeabi_dcmple>
 810ce2c:	b1a0      	cbz	r0, 810ce58 <_strtod_l+0xb50>
 810ce2e:	4639      	mov	r1, r7
 810ce30:	4630      	mov	r0, r6
 810ce32:	f7f3 ff41 	bl	8100cb8 <__aeabi_d2uiz>
 810ce36:	2801      	cmp	r0, #1
 810ce38:	bf38      	it	cc
 810ce3a:	2001      	movcc	r0, #1
 810ce3c:	f7f3 fbea 	bl	8100614 <__aeabi_ui2d>
 810ce40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ce42:	4606      	mov	r6, r0
 810ce44:	460f      	mov	r7, r1
 810ce46:	b9fb      	cbnz	r3, 810ce88 <_strtod_l+0xb80>
 810ce48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810ce4c:	9014      	str	r0, [sp, #80]	@ 0x50
 810ce4e:	9315      	str	r3, [sp, #84]	@ 0x54
 810ce50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810ce54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810ce58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810ce5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810ce5e:	1b5b      	subs	r3, r3, r5
 810ce60:	9311      	str	r3, [sp, #68]	@ 0x44
 810ce62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810ce66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810ce6a:	f7ff f8f1 	bl	810c050 <__ulp>
 810ce6e:	4650      	mov	r0, sl
 810ce70:	ec53 2b10 	vmov	r2, r3, d0
 810ce74:	4659      	mov	r1, fp
 810ce76:	f7f3 fc47 	bl	8100708 <__aeabi_dmul>
 810ce7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810ce7e:	f7f3 fa8d 	bl	810039c <__adddf3>
 810ce82:	4682      	mov	sl, r0
 810ce84:	468b      	mov	fp, r1
 810ce86:	e770      	b.n	810cd6a <_strtod_l+0xa62>
 810ce88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810ce8c:	e7e0      	b.n	810ce50 <_strtod_l+0xb48>
 810ce8e:	a30e      	add	r3, pc, #56	@ (adr r3, 810cec8 <_strtod_l+0xbc0>)
 810ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ce94:	f7f3 feaa 	bl	8100bec <__aeabi_dcmplt>
 810ce98:	e798      	b.n	810cdcc <_strtod_l+0xac4>
 810ce9a:	2300      	movs	r3, #0
 810ce9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 810ce9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810cea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810cea2:	6013      	str	r3, [r2, #0]
 810cea4:	f7ff ba6d 	b.w	810c382 <_strtod_l+0x7a>
 810cea8:	2a65      	cmp	r2, #101	@ 0x65
 810ceaa:	f43f ab66 	beq.w	810c57a <_strtod_l+0x272>
 810ceae:	2a45      	cmp	r2, #69	@ 0x45
 810ceb0:	f43f ab63 	beq.w	810c57a <_strtod_l+0x272>
 810ceb4:	2301      	movs	r3, #1
 810ceb6:	f7ff bb9e 	b.w	810c5f6 <_strtod_l+0x2ee>
 810ceba:	bf00      	nop
 810cebc:	f3af 8000 	nop.w
 810cec0:	ffc00000 	.word	0xffc00000
 810cec4:	41dfffff 	.word	0x41dfffff
 810cec8:	94a03595 	.word	0x94a03595
 810cecc:	3fcfffff 	.word	0x3fcfffff

0810ced0 <_strtod_r>:
 810ced0:	4b01      	ldr	r3, [pc, #4]	@ (810ced8 <_strtod_r+0x8>)
 810ced2:	f7ff ba19 	b.w	810c308 <_strtod_l>
 810ced6:	bf00      	nop
 810ced8:	10000078 	.word	0x10000078

0810cedc <_strtol_l.constprop.0>:
 810cedc:	2b24      	cmp	r3, #36	@ 0x24
 810cede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cee2:	4686      	mov	lr, r0
 810cee4:	4690      	mov	r8, r2
 810cee6:	d801      	bhi.n	810ceec <_strtol_l.constprop.0+0x10>
 810cee8:	2b01      	cmp	r3, #1
 810ceea:	d106      	bne.n	810cefa <_strtol_l.constprop.0+0x1e>
 810ceec:	f7fd fdae 	bl	810aa4c <__errno>
 810cef0:	2316      	movs	r3, #22
 810cef2:	6003      	str	r3, [r0, #0]
 810cef4:	2000      	movs	r0, #0
 810cef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810cefa:	4834      	ldr	r0, [pc, #208]	@ (810cfcc <_strtol_l.constprop.0+0xf0>)
 810cefc:	460d      	mov	r5, r1
 810cefe:	462a      	mov	r2, r5
 810cf00:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cf04:	5d06      	ldrb	r6, [r0, r4]
 810cf06:	f016 0608 	ands.w	r6, r6, #8
 810cf0a:	d1f8      	bne.n	810cefe <_strtol_l.constprop.0+0x22>
 810cf0c:	2c2d      	cmp	r4, #45	@ 0x2d
 810cf0e:	d12d      	bne.n	810cf6c <_strtol_l.constprop.0+0x90>
 810cf10:	782c      	ldrb	r4, [r5, #0]
 810cf12:	2601      	movs	r6, #1
 810cf14:	1c95      	adds	r5, r2, #2
 810cf16:	f033 0210 	bics.w	r2, r3, #16
 810cf1a:	d109      	bne.n	810cf30 <_strtol_l.constprop.0+0x54>
 810cf1c:	2c30      	cmp	r4, #48	@ 0x30
 810cf1e:	d12a      	bne.n	810cf76 <_strtol_l.constprop.0+0x9a>
 810cf20:	782a      	ldrb	r2, [r5, #0]
 810cf22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810cf26:	2a58      	cmp	r2, #88	@ 0x58
 810cf28:	d125      	bne.n	810cf76 <_strtol_l.constprop.0+0x9a>
 810cf2a:	786c      	ldrb	r4, [r5, #1]
 810cf2c:	2310      	movs	r3, #16
 810cf2e:	3502      	adds	r5, #2
 810cf30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810cf34:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 810cf38:	2200      	movs	r2, #0
 810cf3a:	fbbc f9f3 	udiv	r9, ip, r3
 810cf3e:	4610      	mov	r0, r2
 810cf40:	fb03 ca19 	mls	sl, r3, r9, ip
 810cf44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810cf48:	2f09      	cmp	r7, #9
 810cf4a:	d81b      	bhi.n	810cf84 <_strtol_l.constprop.0+0xa8>
 810cf4c:	463c      	mov	r4, r7
 810cf4e:	42a3      	cmp	r3, r4
 810cf50:	dd27      	ble.n	810cfa2 <_strtol_l.constprop.0+0xc6>
 810cf52:	1c57      	adds	r7, r2, #1
 810cf54:	d007      	beq.n	810cf66 <_strtol_l.constprop.0+0x8a>
 810cf56:	4581      	cmp	r9, r0
 810cf58:	d320      	bcc.n	810cf9c <_strtol_l.constprop.0+0xc0>
 810cf5a:	d101      	bne.n	810cf60 <_strtol_l.constprop.0+0x84>
 810cf5c:	45a2      	cmp	sl, r4
 810cf5e:	db1d      	blt.n	810cf9c <_strtol_l.constprop.0+0xc0>
 810cf60:	fb00 4003 	mla	r0, r0, r3, r4
 810cf64:	2201      	movs	r2, #1
 810cf66:	f815 4b01 	ldrb.w	r4, [r5], #1
 810cf6a:	e7eb      	b.n	810cf44 <_strtol_l.constprop.0+0x68>
 810cf6c:	2c2b      	cmp	r4, #43	@ 0x2b
 810cf6e:	bf04      	itt	eq
 810cf70:	782c      	ldrbeq	r4, [r5, #0]
 810cf72:	1c95      	addeq	r5, r2, #2
 810cf74:	e7cf      	b.n	810cf16 <_strtol_l.constprop.0+0x3a>
 810cf76:	2b00      	cmp	r3, #0
 810cf78:	d1da      	bne.n	810cf30 <_strtol_l.constprop.0+0x54>
 810cf7a:	2c30      	cmp	r4, #48	@ 0x30
 810cf7c:	bf0c      	ite	eq
 810cf7e:	2308      	moveq	r3, #8
 810cf80:	230a      	movne	r3, #10
 810cf82:	e7d5      	b.n	810cf30 <_strtol_l.constprop.0+0x54>
 810cf84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810cf88:	2f19      	cmp	r7, #25
 810cf8a:	d801      	bhi.n	810cf90 <_strtol_l.constprop.0+0xb4>
 810cf8c:	3c37      	subs	r4, #55	@ 0x37
 810cf8e:	e7de      	b.n	810cf4e <_strtol_l.constprop.0+0x72>
 810cf90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810cf94:	2f19      	cmp	r7, #25
 810cf96:	d804      	bhi.n	810cfa2 <_strtol_l.constprop.0+0xc6>
 810cf98:	3c57      	subs	r4, #87	@ 0x57
 810cf9a:	e7d8      	b.n	810cf4e <_strtol_l.constprop.0+0x72>
 810cf9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810cfa0:	e7e1      	b.n	810cf66 <_strtol_l.constprop.0+0x8a>
 810cfa2:	1c53      	adds	r3, r2, #1
 810cfa4:	d108      	bne.n	810cfb8 <_strtol_l.constprop.0+0xdc>
 810cfa6:	2322      	movs	r3, #34	@ 0x22
 810cfa8:	f8ce 3000 	str.w	r3, [lr]
 810cfac:	4660      	mov	r0, ip
 810cfae:	f1b8 0f00 	cmp.w	r8, #0
 810cfb2:	d0a0      	beq.n	810cef6 <_strtol_l.constprop.0+0x1a>
 810cfb4:	1e69      	subs	r1, r5, #1
 810cfb6:	e006      	b.n	810cfc6 <_strtol_l.constprop.0+0xea>
 810cfb8:	b106      	cbz	r6, 810cfbc <_strtol_l.constprop.0+0xe0>
 810cfba:	4240      	negs	r0, r0
 810cfbc:	f1b8 0f00 	cmp.w	r8, #0
 810cfc0:	d099      	beq.n	810cef6 <_strtol_l.constprop.0+0x1a>
 810cfc2:	2a00      	cmp	r2, #0
 810cfc4:	d1f6      	bne.n	810cfb4 <_strtol_l.constprop.0+0xd8>
 810cfc6:	f8c8 1000 	str.w	r1, [r8]
 810cfca:	e794      	b.n	810cef6 <_strtol_l.constprop.0+0x1a>
 810cfcc:	0810eab9 	.word	0x0810eab9

0810cfd0 <_strtol_r>:
 810cfd0:	f7ff bf84 	b.w	810cedc <_strtol_l.constprop.0>

0810cfd4 <__ssputs_r>:
 810cfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810cfd8:	688e      	ldr	r6, [r1, #8]
 810cfda:	461f      	mov	r7, r3
 810cfdc:	42be      	cmp	r6, r7
 810cfde:	680b      	ldr	r3, [r1, #0]
 810cfe0:	4682      	mov	sl, r0
 810cfe2:	460c      	mov	r4, r1
 810cfe4:	4690      	mov	r8, r2
 810cfe6:	d82d      	bhi.n	810d044 <__ssputs_r+0x70>
 810cfe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810cfec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810cff0:	d026      	beq.n	810d040 <__ssputs_r+0x6c>
 810cff2:	6965      	ldr	r5, [r4, #20]
 810cff4:	6909      	ldr	r1, [r1, #16]
 810cff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810cffa:	eba3 0901 	sub.w	r9, r3, r1
 810cffe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d002:	1c7b      	adds	r3, r7, #1
 810d004:	444b      	add	r3, r9
 810d006:	106d      	asrs	r5, r5, #1
 810d008:	429d      	cmp	r5, r3
 810d00a:	bf38      	it	cc
 810d00c:	461d      	movcc	r5, r3
 810d00e:	0553      	lsls	r3, r2, #21
 810d010:	d527      	bpl.n	810d062 <__ssputs_r+0x8e>
 810d012:	4629      	mov	r1, r5
 810d014:	f7fe fc1c 	bl	810b850 <_malloc_r>
 810d018:	4606      	mov	r6, r0
 810d01a:	b360      	cbz	r0, 810d076 <__ssputs_r+0xa2>
 810d01c:	6921      	ldr	r1, [r4, #16]
 810d01e:	464a      	mov	r2, r9
 810d020:	f7fd fd41 	bl	810aaa6 <memcpy>
 810d024:	89a3      	ldrh	r3, [r4, #12]
 810d026:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810d02a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810d02e:	81a3      	strh	r3, [r4, #12]
 810d030:	6126      	str	r6, [r4, #16]
 810d032:	6165      	str	r5, [r4, #20]
 810d034:	444e      	add	r6, r9
 810d036:	eba5 0509 	sub.w	r5, r5, r9
 810d03a:	6026      	str	r6, [r4, #0]
 810d03c:	60a5      	str	r5, [r4, #8]
 810d03e:	463e      	mov	r6, r7
 810d040:	42be      	cmp	r6, r7
 810d042:	d900      	bls.n	810d046 <__ssputs_r+0x72>
 810d044:	463e      	mov	r6, r7
 810d046:	6820      	ldr	r0, [r4, #0]
 810d048:	4632      	mov	r2, r6
 810d04a:	4641      	mov	r1, r8
 810d04c:	f000 fb6a 	bl	810d724 <memmove>
 810d050:	68a3      	ldr	r3, [r4, #8]
 810d052:	1b9b      	subs	r3, r3, r6
 810d054:	60a3      	str	r3, [r4, #8]
 810d056:	6823      	ldr	r3, [r4, #0]
 810d058:	4433      	add	r3, r6
 810d05a:	6023      	str	r3, [r4, #0]
 810d05c:	2000      	movs	r0, #0
 810d05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d062:	462a      	mov	r2, r5
 810d064:	f000 ff41 	bl	810deea <_realloc_r>
 810d068:	4606      	mov	r6, r0
 810d06a:	2800      	cmp	r0, #0
 810d06c:	d1e0      	bne.n	810d030 <__ssputs_r+0x5c>
 810d06e:	6921      	ldr	r1, [r4, #16]
 810d070:	4650      	mov	r0, sl
 810d072:	f7fe fb79 	bl	810b768 <_free_r>
 810d076:	230c      	movs	r3, #12
 810d078:	f8ca 3000 	str.w	r3, [sl]
 810d07c:	89a3      	ldrh	r3, [r4, #12]
 810d07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d082:	81a3      	strh	r3, [r4, #12]
 810d084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d088:	e7e9      	b.n	810d05e <__ssputs_r+0x8a>
	...

0810d08c <_svfiprintf_r>:
 810d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d090:	4698      	mov	r8, r3
 810d092:	898b      	ldrh	r3, [r1, #12]
 810d094:	061b      	lsls	r3, r3, #24
 810d096:	b09d      	sub	sp, #116	@ 0x74
 810d098:	4607      	mov	r7, r0
 810d09a:	460d      	mov	r5, r1
 810d09c:	4614      	mov	r4, r2
 810d09e:	d510      	bpl.n	810d0c2 <_svfiprintf_r+0x36>
 810d0a0:	690b      	ldr	r3, [r1, #16]
 810d0a2:	b973      	cbnz	r3, 810d0c2 <_svfiprintf_r+0x36>
 810d0a4:	2140      	movs	r1, #64	@ 0x40
 810d0a6:	f7fe fbd3 	bl	810b850 <_malloc_r>
 810d0aa:	6028      	str	r0, [r5, #0]
 810d0ac:	6128      	str	r0, [r5, #16]
 810d0ae:	b930      	cbnz	r0, 810d0be <_svfiprintf_r+0x32>
 810d0b0:	230c      	movs	r3, #12
 810d0b2:	603b      	str	r3, [r7, #0]
 810d0b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d0b8:	b01d      	add	sp, #116	@ 0x74
 810d0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d0be:	2340      	movs	r3, #64	@ 0x40
 810d0c0:	616b      	str	r3, [r5, #20]
 810d0c2:	2300      	movs	r3, #0
 810d0c4:	9309      	str	r3, [sp, #36]	@ 0x24
 810d0c6:	2320      	movs	r3, #32
 810d0c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d0cc:	f8cd 800c 	str.w	r8, [sp, #12]
 810d0d0:	2330      	movs	r3, #48	@ 0x30
 810d0d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810d270 <_svfiprintf_r+0x1e4>
 810d0d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d0da:	f04f 0901 	mov.w	r9, #1
 810d0de:	4623      	mov	r3, r4
 810d0e0:	469a      	mov	sl, r3
 810d0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d0e6:	b10a      	cbz	r2, 810d0ec <_svfiprintf_r+0x60>
 810d0e8:	2a25      	cmp	r2, #37	@ 0x25
 810d0ea:	d1f9      	bne.n	810d0e0 <_svfiprintf_r+0x54>
 810d0ec:	ebba 0b04 	subs.w	fp, sl, r4
 810d0f0:	d00b      	beq.n	810d10a <_svfiprintf_r+0x7e>
 810d0f2:	465b      	mov	r3, fp
 810d0f4:	4622      	mov	r2, r4
 810d0f6:	4629      	mov	r1, r5
 810d0f8:	4638      	mov	r0, r7
 810d0fa:	f7ff ff6b 	bl	810cfd4 <__ssputs_r>
 810d0fe:	3001      	adds	r0, #1
 810d100:	f000 80a7 	beq.w	810d252 <_svfiprintf_r+0x1c6>
 810d104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d106:	445a      	add	r2, fp
 810d108:	9209      	str	r2, [sp, #36]	@ 0x24
 810d10a:	f89a 3000 	ldrb.w	r3, [sl]
 810d10e:	2b00      	cmp	r3, #0
 810d110:	f000 809f 	beq.w	810d252 <_svfiprintf_r+0x1c6>
 810d114:	2300      	movs	r3, #0
 810d116:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d11a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d11e:	f10a 0a01 	add.w	sl, sl, #1
 810d122:	9304      	str	r3, [sp, #16]
 810d124:	9307      	str	r3, [sp, #28]
 810d126:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d12a:	931a      	str	r3, [sp, #104]	@ 0x68
 810d12c:	4654      	mov	r4, sl
 810d12e:	2205      	movs	r2, #5
 810d130:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d134:	484e      	ldr	r0, [pc, #312]	@ (810d270 <_svfiprintf_r+0x1e4>)
 810d136:	f7f3 f8d3 	bl	81002e0 <memchr>
 810d13a:	9a04      	ldr	r2, [sp, #16]
 810d13c:	b9d8      	cbnz	r0, 810d176 <_svfiprintf_r+0xea>
 810d13e:	06d0      	lsls	r0, r2, #27
 810d140:	bf44      	itt	mi
 810d142:	2320      	movmi	r3, #32
 810d144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d148:	0711      	lsls	r1, r2, #28
 810d14a:	bf44      	itt	mi
 810d14c:	232b      	movmi	r3, #43	@ 0x2b
 810d14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d152:	f89a 3000 	ldrb.w	r3, [sl]
 810d156:	2b2a      	cmp	r3, #42	@ 0x2a
 810d158:	d015      	beq.n	810d186 <_svfiprintf_r+0xfa>
 810d15a:	9a07      	ldr	r2, [sp, #28]
 810d15c:	4654      	mov	r4, sl
 810d15e:	2000      	movs	r0, #0
 810d160:	f04f 0c0a 	mov.w	ip, #10
 810d164:	4621      	mov	r1, r4
 810d166:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d16a:	3b30      	subs	r3, #48	@ 0x30
 810d16c:	2b09      	cmp	r3, #9
 810d16e:	d94b      	bls.n	810d208 <_svfiprintf_r+0x17c>
 810d170:	b1b0      	cbz	r0, 810d1a0 <_svfiprintf_r+0x114>
 810d172:	9207      	str	r2, [sp, #28]
 810d174:	e014      	b.n	810d1a0 <_svfiprintf_r+0x114>
 810d176:	eba0 0308 	sub.w	r3, r0, r8
 810d17a:	fa09 f303 	lsl.w	r3, r9, r3
 810d17e:	4313      	orrs	r3, r2
 810d180:	9304      	str	r3, [sp, #16]
 810d182:	46a2      	mov	sl, r4
 810d184:	e7d2      	b.n	810d12c <_svfiprintf_r+0xa0>
 810d186:	9b03      	ldr	r3, [sp, #12]
 810d188:	1d19      	adds	r1, r3, #4
 810d18a:	681b      	ldr	r3, [r3, #0]
 810d18c:	9103      	str	r1, [sp, #12]
 810d18e:	2b00      	cmp	r3, #0
 810d190:	bfbb      	ittet	lt
 810d192:	425b      	neglt	r3, r3
 810d194:	f042 0202 	orrlt.w	r2, r2, #2
 810d198:	9307      	strge	r3, [sp, #28]
 810d19a:	9307      	strlt	r3, [sp, #28]
 810d19c:	bfb8      	it	lt
 810d19e:	9204      	strlt	r2, [sp, #16]
 810d1a0:	7823      	ldrb	r3, [r4, #0]
 810d1a2:	2b2e      	cmp	r3, #46	@ 0x2e
 810d1a4:	d10a      	bne.n	810d1bc <_svfiprintf_r+0x130>
 810d1a6:	7863      	ldrb	r3, [r4, #1]
 810d1a8:	2b2a      	cmp	r3, #42	@ 0x2a
 810d1aa:	d132      	bne.n	810d212 <_svfiprintf_r+0x186>
 810d1ac:	9b03      	ldr	r3, [sp, #12]
 810d1ae:	1d1a      	adds	r2, r3, #4
 810d1b0:	681b      	ldr	r3, [r3, #0]
 810d1b2:	9203      	str	r2, [sp, #12]
 810d1b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d1b8:	3402      	adds	r4, #2
 810d1ba:	9305      	str	r3, [sp, #20]
 810d1bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810d280 <_svfiprintf_r+0x1f4>
 810d1c0:	7821      	ldrb	r1, [r4, #0]
 810d1c2:	2203      	movs	r2, #3
 810d1c4:	4650      	mov	r0, sl
 810d1c6:	f7f3 f88b 	bl	81002e0 <memchr>
 810d1ca:	b138      	cbz	r0, 810d1dc <_svfiprintf_r+0x150>
 810d1cc:	9b04      	ldr	r3, [sp, #16]
 810d1ce:	eba0 000a 	sub.w	r0, r0, sl
 810d1d2:	2240      	movs	r2, #64	@ 0x40
 810d1d4:	4082      	lsls	r2, r0
 810d1d6:	4313      	orrs	r3, r2
 810d1d8:	3401      	adds	r4, #1
 810d1da:	9304      	str	r3, [sp, #16]
 810d1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d1e0:	4824      	ldr	r0, [pc, #144]	@ (810d274 <_svfiprintf_r+0x1e8>)
 810d1e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d1e6:	2206      	movs	r2, #6
 810d1e8:	f7f3 f87a 	bl	81002e0 <memchr>
 810d1ec:	2800      	cmp	r0, #0
 810d1ee:	d036      	beq.n	810d25e <_svfiprintf_r+0x1d2>
 810d1f0:	4b21      	ldr	r3, [pc, #132]	@ (810d278 <_svfiprintf_r+0x1ec>)
 810d1f2:	bb1b      	cbnz	r3, 810d23c <_svfiprintf_r+0x1b0>
 810d1f4:	9b03      	ldr	r3, [sp, #12]
 810d1f6:	3307      	adds	r3, #7
 810d1f8:	f023 0307 	bic.w	r3, r3, #7
 810d1fc:	3308      	adds	r3, #8
 810d1fe:	9303      	str	r3, [sp, #12]
 810d200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d202:	4433      	add	r3, r6
 810d204:	9309      	str	r3, [sp, #36]	@ 0x24
 810d206:	e76a      	b.n	810d0de <_svfiprintf_r+0x52>
 810d208:	fb0c 3202 	mla	r2, ip, r2, r3
 810d20c:	460c      	mov	r4, r1
 810d20e:	2001      	movs	r0, #1
 810d210:	e7a8      	b.n	810d164 <_svfiprintf_r+0xd8>
 810d212:	2300      	movs	r3, #0
 810d214:	3401      	adds	r4, #1
 810d216:	9305      	str	r3, [sp, #20]
 810d218:	4619      	mov	r1, r3
 810d21a:	f04f 0c0a 	mov.w	ip, #10
 810d21e:	4620      	mov	r0, r4
 810d220:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d224:	3a30      	subs	r2, #48	@ 0x30
 810d226:	2a09      	cmp	r2, #9
 810d228:	d903      	bls.n	810d232 <_svfiprintf_r+0x1a6>
 810d22a:	2b00      	cmp	r3, #0
 810d22c:	d0c6      	beq.n	810d1bc <_svfiprintf_r+0x130>
 810d22e:	9105      	str	r1, [sp, #20]
 810d230:	e7c4      	b.n	810d1bc <_svfiprintf_r+0x130>
 810d232:	fb0c 2101 	mla	r1, ip, r1, r2
 810d236:	4604      	mov	r4, r0
 810d238:	2301      	movs	r3, #1
 810d23a:	e7f0      	b.n	810d21e <_svfiprintf_r+0x192>
 810d23c:	ab03      	add	r3, sp, #12
 810d23e:	9300      	str	r3, [sp, #0]
 810d240:	462a      	mov	r2, r5
 810d242:	4b0e      	ldr	r3, [pc, #56]	@ (810d27c <_svfiprintf_r+0x1f0>)
 810d244:	a904      	add	r1, sp, #16
 810d246:	4638      	mov	r0, r7
 810d248:	f7fc fbb8 	bl	81099bc <_printf_float>
 810d24c:	1c42      	adds	r2, r0, #1
 810d24e:	4606      	mov	r6, r0
 810d250:	d1d6      	bne.n	810d200 <_svfiprintf_r+0x174>
 810d252:	89ab      	ldrh	r3, [r5, #12]
 810d254:	065b      	lsls	r3, r3, #25
 810d256:	f53f af2d 	bmi.w	810d0b4 <_svfiprintf_r+0x28>
 810d25a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d25c:	e72c      	b.n	810d0b8 <_svfiprintf_r+0x2c>
 810d25e:	ab03      	add	r3, sp, #12
 810d260:	9300      	str	r3, [sp, #0]
 810d262:	462a      	mov	r2, r5
 810d264:	4b05      	ldr	r3, [pc, #20]	@ (810d27c <_svfiprintf_r+0x1f0>)
 810d266:	a904      	add	r1, sp, #16
 810d268:	4638      	mov	r0, r7
 810d26a:	f7fc fe3f 	bl	8109eec <_printf_i>
 810d26e:	e7ed      	b.n	810d24c <_svfiprintf_r+0x1c0>
 810d270:	0810ebb9 	.word	0x0810ebb9
 810d274:	0810ebc3 	.word	0x0810ebc3
 810d278:	081099bd 	.word	0x081099bd
 810d27c:	0810cfd5 	.word	0x0810cfd5
 810d280:	0810ebbf 	.word	0x0810ebbf

0810d284 <__sfputc_r>:
 810d284:	6893      	ldr	r3, [r2, #8]
 810d286:	3b01      	subs	r3, #1
 810d288:	2b00      	cmp	r3, #0
 810d28a:	b410      	push	{r4}
 810d28c:	6093      	str	r3, [r2, #8]
 810d28e:	da08      	bge.n	810d2a2 <__sfputc_r+0x1e>
 810d290:	6994      	ldr	r4, [r2, #24]
 810d292:	42a3      	cmp	r3, r4
 810d294:	db01      	blt.n	810d29a <__sfputc_r+0x16>
 810d296:	290a      	cmp	r1, #10
 810d298:	d103      	bne.n	810d2a2 <__sfputc_r+0x1e>
 810d29a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d29e:	f7fd baee 	b.w	810a87e <__swbuf_r>
 810d2a2:	6813      	ldr	r3, [r2, #0]
 810d2a4:	1c58      	adds	r0, r3, #1
 810d2a6:	6010      	str	r0, [r2, #0]
 810d2a8:	7019      	strb	r1, [r3, #0]
 810d2aa:	4608      	mov	r0, r1
 810d2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d2b0:	4770      	bx	lr

0810d2b2 <__sfputs_r>:
 810d2b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d2b4:	4606      	mov	r6, r0
 810d2b6:	460f      	mov	r7, r1
 810d2b8:	4614      	mov	r4, r2
 810d2ba:	18d5      	adds	r5, r2, r3
 810d2bc:	42ac      	cmp	r4, r5
 810d2be:	d101      	bne.n	810d2c4 <__sfputs_r+0x12>
 810d2c0:	2000      	movs	r0, #0
 810d2c2:	e007      	b.n	810d2d4 <__sfputs_r+0x22>
 810d2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d2c8:	463a      	mov	r2, r7
 810d2ca:	4630      	mov	r0, r6
 810d2cc:	f7ff ffda 	bl	810d284 <__sfputc_r>
 810d2d0:	1c43      	adds	r3, r0, #1
 810d2d2:	d1f3      	bne.n	810d2bc <__sfputs_r+0xa>
 810d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d2d8 <_vfiprintf_r>:
 810d2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d2dc:	460d      	mov	r5, r1
 810d2de:	b09d      	sub	sp, #116	@ 0x74
 810d2e0:	4614      	mov	r4, r2
 810d2e2:	4698      	mov	r8, r3
 810d2e4:	4606      	mov	r6, r0
 810d2e6:	b118      	cbz	r0, 810d2f0 <_vfiprintf_r+0x18>
 810d2e8:	6a03      	ldr	r3, [r0, #32]
 810d2ea:	b90b      	cbnz	r3, 810d2f0 <_vfiprintf_r+0x18>
 810d2ec:	f7fd f9be 	bl	810a66c <__sinit>
 810d2f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d2f2:	07d9      	lsls	r1, r3, #31
 810d2f4:	d405      	bmi.n	810d302 <_vfiprintf_r+0x2a>
 810d2f6:	89ab      	ldrh	r3, [r5, #12]
 810d2f8:	059a      	lsls	r2, r3, #22
 810d2fa:	d402      	bmi.n	810d302 <_vfiprintf_r+0x2a>
 810d2fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d2fe:	f7fd fbd0 	bl	810aaa2 <__retarget_lock_acquire_recursive>
 810d302:	89ab      	ldrh	r3, [r5, #12]
 810d304:	071b      	lsls	r3, r3, #28
 810d306:	d501      	bpl.n	810d30c <_vfiprintf_r+0x34>
 810d308:	692b      	ldr	r3, [r5, #16]
 810d30a:	b99b      	cbnz	r3, 810d334 <_vfiprintf_r+0x5c>
 810d30c:	4629      	mov	r1, r5
 810d30e:	4630      	mov	r0, r6
 810d310:	f7fd faf4 	bl	810a8fc <__swsetup_r>
 810d314:	b170      	cbz	r0, 810d334 <_vfiprintf_r+0x5c>
 810d316:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d318:	07dc      	lsls	r4, r3, #31
 810d31a:	d504      	bpl.n	810d326 <_vfiprintf_r+0x4e>
 810d31c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d320:	b01d      	add	sp, #116	@ 0x74
 810d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d326:	89ab      	ldrh	r3, [r5, #12]
 810d328:	0598      	lsls	r0, r3, #22
 810d32a:	d4f7      	bmi.n	810d31c <_vfiprintf_r+0x44>
 810d32c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d32e:	f7fd fbb9 	bl	810aaa4 <__retarget_lock_release_recursive>
 810d332:	e7f3      	b.n	810d31c <_vfiprintf_r+0x44>
 810d334:	2300      	movs	r3, #0
 810d336:	9309      	str	r3, [sp, #36]	@ 0x24
 810d338:	2320      	movs	r3, #32
 810d33a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d33e:	f8cd 800c 	str.w	r8, [sp, #12]
 810d342:	2330      	movs	r3, #48	@ 0x30
 810d344:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810d4f4 <_vfiprintf_r+0x21c>
 810d348:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d34c:	f04f 0901 	mov.w	r9, #1
 810d350:	4623      	mov	r3, r4
 810d352:	469a      	mov	sl, r3
 810d354:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d358:	b10a      	cbz	r2, 810d35e <_vfiprintf_r+0x86>
 810d35a:	2a25      	cmp	r2, #37	@ 0x25
 810d35c:	d1f9      	bne.n	810d352 <_vfiprintf_r+0x7a>
 810d35e:	ebba 0b04 	subs.w	fp, sl, r4
 810d362:	d00b      	beq.n	810d37c <_vfiprintf_r+0xa4>
 810d364:	465b      	mov	r3, fp
 810d366:	4622      	mov	r2, r4
 810d368:	4629      	mov	r1, r5
 810d36a:	4630      	mov	r0, r6
 810d36c:	f7ff ffa1 	bl	810d2b2 <__sfputs_r>
 810d370:	3001      	adds	r0, #1
 810d372:	f000 80a7 	beq.w	810d4c4 <_vfiprintf_r+0x1ec>
 810d376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d378:	445a      	add	r2, fp
 810d37a:	9209      	str	r2, [sp, #36]	@ 0x24
 810d37c:	f89a 3000 	ldrb.w	r3, [sl]
 810d380:	2b00      	cmp	r3, #0
 810d382:	f000 809f 	beq.w	810d4c4 <_vfiprintf_r+0x1ec>
 810d386:	2300      	movs	r3, #0
 810d388:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d38c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d390:	f10a 0a01 	add.w	sl, sl, #1
 810d394:	9304      	str	r3, [sp, #16]
 810d396:	9307      	str	r3, [sp, #28]
 810d398:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d39c:	931a      	str	r3, [sp, #104]	@ 0x68
 810d39e:	4654      	mov	r4, sl
 810d3a0:	2205      	movs	r2, #5
 810d3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d3a6:	4853      	ldr	r0, [pc, #332]	@ (810d4f4 <_vfiprintf_r+0x21c>)
 810d3a8:	f7f2 ff9a 	bl	81002e0 <memchr>
 810d3ac:	9a04      	ldr	r2, [sp, #16]
 810d3ae:	b9d8      	cbnz	r0, 810d3e8 <_vfiprintf_r+0x110>
 810d3b0:	06d1      	lsls	r1, r2, #27
 810d3b2:	bf44      	itt	mi
 810d3b4:	2320      	movmi	r3, #32
 810d3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d3ba:	0713      	lsls	r3, r2, #28
 810d3bc:	bf44      	itt	mi
 810d3be:	232b      	movmi	r3, #43	@ 0x2b
 810d3c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d3c4:	f89a 3000 	ldrb.w	r3, [sl]
 810d3c8:	2b2a      	cmp	r3, #42	@ 0x2a
 810d3ca:	d015      	beq.n	810d3f8 <_vfiprintf_r+0x120>
 810d3cc:	9a07      	ldr	r2, [sp, #28]
 810d3ce:	4654      	mov	r4, sl
 810d3d0:	2000      	movs	r0, #0
 810d3d2:	f04f 0c0a 	mov.w	ip, #10
 810d3d6:	4621      	mov	r1, r4
 810d3d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d3dc:	3b30      	subs	r3, #48	@ 0x30
 810d3de:	2b09      	cmp	r3, #9
 810d3e0:	d94b      	bls.n	810d47a <_vfiprintf_r+0x1a2>
 810d3e2:	b1b0      	cbz	r0, 810d412 <_vfiprintf_r+0x13a>
 810d3e4:	9207      	str	r2, [sp, #28]
 810d3e6:	e014      	b.n	810d412 <_vfiprintf_r+0x13a>
 810d3e8:	eba0 0308 	sub.w	r3, r0, r8
 810d3ec:	fa09 f303 	lsl.w	r3, r9, r3
 810d3f0:	4313      	orrs	r3, r2
 810d3f2:	9304      	str	r3, [sp, #16]
 810d3f4:	46a2      	mov	sl, r4
 810d3f6:	e7d2      	b.n	810d39e <_vfiprintf_r+0xc6>
 810d3f8:	9b03      	ldr	r3, [sp, #12]
 810d3fa:	1d19      	adds	r1, r3, #4
 810d3fc:	681b      	ldr	r3, [r3, #0]
 810d3fe:	9103      	str	r1, [sp, #12]
 810d400:	2b00      	cmp	r3, #0
 810d402:	bfbb      	ittet	lt
 810d404:	425b      	neglt	r3, r3
 810d406:	f042 0202 	orrlt.w	r2, r2, #2
 810d40a:	9307      	strge	r3, [sp, #28]
 810d40c:	9307      	strlt	r3, [sp, #28]
 810d40e:	bfb8      	it	lt
 810d410:	9204      	strlt	r2, [sp, #16]
 810d412:	7823      	ldrb	r3, [r4, #0]
 810d414:	2b2e      	cmp	r3, #46	@ 0x2e
 810d416:	d10a      	bne.n	810d42e <_vfiprintf_r+0x156>
 810d418:	7863      	ldrb	r3, [r4, #1]
 810d41a:	2b2a      	cmp	r3, #42	@ 0x2a
 810d41c:	d132      	bne.n	810d484 <_vfiprintf_r+0x1ac>
 810d41e:	9b03      	ldr	r3, [sp, #12]
 810d420:	1d1a      	adds	r2, r3, #4
 810d422:	681b      	ldr	r3, [r3, #0]
 810d424:	9203      	str	r2, [sp, #12]
 810d426:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d42a:	3402      	adds	r4, #2
 810d42c:	9305      	str	r3, [sp, #20]
 810d42e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810d504 <_vfiprintf_r+0x22c>
 810d432:	7821      	ldrb	r1, [r4, #0]
 810d434:	2203      	movs	r2, #3
 810d436:	4650      	mov	r0, sl
 810d438:	f7f2 ff52 	bl	81002e0 <memchr>
 810d43c:	b138      	cbz	r0, 810d44e <_vfiprintf_r+0x176>
 810d43e:	9b04      	ldr	r3, [sp, #16]
 810d440:	eba0 000a 	sub.w	r0, r0, sl
 810d444:	2240      	movs	r2, #64	@ 0x40
 810d446:	4082      	lsls	r2, r0
 810d448:	4313      	orrs	r3, r2
 810d44a:	3401      	adds	r4, #1
 810d44c:	9304      	str	r3, [sp, #16]
 810d44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d452:	4829      	ldr	r0, [pc, #164]	@ (810d4f8 <_vfiprintf_r+0x220>)
 810d454:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d458:	2206      	movs	r2, #6
 810d45a:	f7f2 ff41 	bl	81002e0 <memchr>
 810d45e:	2800      	cmp	r0, #0
 810d460:	d03f      	beq.n	810d4e2 <_vfiprintf_r+0x20a>
 810d462:	4b26      	ldr	r3, [pc, #152]	@ (810d4fc <_vfiprintf_r+0x224>)
 810d464:	bb1b      	cbnz	r3, 810d4ae <_vfiprintf_r+0x1d6>
 810d466:	9b03      	ldr	r3, [sp, #12]
 810d468:	3307      	adds	r3, #7
 810d46a:	f023 0307 	bic.w	r3, r3, #7
 810d46e:	3308      	adds	r3, #8
 810d470:	9303      	str	r3, [sp, #12]
 810d472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d474:	443b      	add	r3, r7
 810d476:	9309      	str	r3, [sp, #36]	@ 0x24
 810d478:	e76a      	b.n	810d350 <_vfiprintf_r+0x78>
 810d47a:	fb0c 3202 	mla	r2, ip, r2, r3
 810d47e:	460c      	mov	r4, r1
 810d480:	2001      	movs	r0, #1
 810d482:	e7a8      	b.n	810d3d6 <_vfiprintf_r+0xfe>
 810d484:	2300      	movs	r3, #0
 810d486:	3401      	adds	r4, #1
 810d488:	9305      	str	r3, [sp, #20]
 810d48a:	4619      	mov	r1, r3
 810d48c:	f04f 0c0a 	mov.w	ip, #10
 810d490:	4620      	mov	r0, r4
 810d492:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d496:	3a30      	subs	r2, #48	@ 0x30
 810d498:	2a09      	cmp	r2, #9
 810d49a:	d903      	bls.n	810d4a4 <_vfiprintf_r+0x1cc>
 810d49c:	2b00      	cmp	r3, #0
 810d49e:	d0c6      	beq.n	810d42e <_vfiprintf_r+0x156>
 810d4a0:	9105      	str	r1, [sp, #20]
 810d4a2:	e7c4      	b.n	810d42e <_vfiprintf_r+0x156>
 810d4a4:	fb0c 2101 	mla	r1, ip, r1, r2
 810d4a8:	4604      	mov	r4, r0
 810d4aa:	2301      	movs	r3, #1
 810d4ac:	e7f0      	b.n	810d490 <_vfiprintf_r+0x1b8>
 810d4ae:	ab03      	add	r3, sp, #12
 810d4b0:	9300      	str	r3, [sp, #0]
 810d4b2:	462a      	mov	r2, r5
 810d4b4:	4b12      	ldr	r3, [pc, #72]	@ (810d500 <_vfiprintf_r+0x228>)
 810d4b6:	a904      	add	r1, sp, #16
 810d4b8:	4630      	mov	r0, r6
 810d4ba:	f7fc fa7f 	bl	81099bc <_printf_float>
 810d4be:	4607      	mov	r7, r0
 810d4c0:	1c78      	adds	r0, r7, #1
 810d4c2:	d1d6      	bne.n	810d472 <_vfiprintf_r+0x19a>
 810d4c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d4c6:	07d9      	lsls	r1, r3, #31
 810d4c8:	d405      	bmi.n	810d4d6 <_vfiprintf_r+0x1fe>
 810d4ca:	89ab      	ldrh	r3, [r5, #12]
 810d4cc:	059a      	lsls	r2, r3, #22
 810d4ce:	d402      	bmi.n	810d4d6 <_vfiprintf_r+0x1fe>
 810d4d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d4d2:	f7fd fae7 	bl	810aaa4 <__retarget_lock_release_recursive>
 810d4d6:	89ab      	ldrh	r3, [r5, #12]
 810d4d8:	065b      	lsls	r3, r3, #25
 810d4da:	f53f af1f 	bmi.w	810d31c <_vfiprintf_r+0x44>
 810d4de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d4e0:	e71e      	b.n	810d320 <_vfiprintf_r+0x48>
 810d4e2:	ab03      	add	r3, sp, #12
 810d4e4:	9300      	str	r3, [sp, #0]
 810d4e6:	462a      	mov	r2, r5
 810d4e8:	4b05      	ldr	r3, [pc, #20]	@ (810d500 <_vfiprintf_r+0x228>)
 810d4ea:	a904      	add	r1, sp, #16
 810d4ec:	4630      	mov	r0, r6
 810d4ee:	f7fc fcfd 	bl	8109eec <_printf_i>
 810d4f2:	e7e4      	b.n	810d4be <_vfiprintf_r+0x1e6>
 810d4f4:	0810ebb9 	.word	0x0810ebb9
 810d4f8:	0810ebc3 	.word	0x0810ebc3
 810d4fc:	081099bd 	.word	0x081099bd
 810d500:	0810d2b3 	.word	0x0810d2b3
 810d504:	0810ebbf 	.word	0x0810ebbf

0810d508 <__sflush_r>:
 810d508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810d50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d510:	0716      	lsls	r6, r2, #28
 810d512:	4605      	mov	r5, r0
 810d514:	460c      	mov	r4, r1
 810d516:	d454      	bmi.n	810d5c2 <__sflush_r+0xba>
 810d518:	684b      	ldr	r3, [r1, #4]
 810d51a:	2b00      	cmp	r3, #0
 810d51c:	dc02      	bgt.n	810d524 <__sflush_r+0x1c>
 810d51e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810d520:	2b00      	cmp	r3, #0
 810d522:	dd48      	ble.n	810d5b6 <__sflush_r+0xae>
 810d524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d526:	2e00      	cmp	r6, #0
 810d528:	d045      	beq.n	810d5b6 <__sflush_r+0xae>
 810d52a:	2300      	movs	r3, #0
 810d52c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810d530:	682f      	ldr	r7, [r5, #0]
 810d532:	6a21      	ldr	r1, [r4, #32]
 810d534:	602b      	str	r3, [r5, #0]
 810d536:	d030      	beq.n	810d59a <__sflush_r+0x92>
 810d538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810d53a:	89a3      	ldrh	r3, [r4, #12]
 810d53c:	0759      	lsls	r1, r3, #29
 810d53e:	d505      	bpl.n	810d54c <__sflush_r+0x44>
 810d540:	6863      	ldr	r3, [r4, #4]
 810d542:	1ad2      	subs	r2, r2, r3
 810d544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810d546:	b10b      	cbz	r3, 810d54c <__sflush_r+0x44>
 810d548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810d54a:	1ad2      	subs	r2, r2, r3
 810d54c:	2300      	movs	r3, #0
 810d54e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d550:	6a21      	ldr	r1, [r4, #32]
 810d552:	4628      	mov	r0, r5
 810d554:	47b0      	blx	r6
 810d556:	1c43      	adds	r3, r0, #1
 810d558:	89a3      	ldrh	r3, [r4, #12]
 810d55a:	d106      	bne.n	810d56a <__sflush_r+0x62>
 810d55c:	6829      	ldr	r1, [r5, #0]
 810d55e:	291d      	cmp	r1, #29
 810d560:	d82b      	bhi.n	810d5ba <__sflush_r+0xb2>
 810d562:	4a2a      	ldr	r2, [pc, #168]	@ (810d60c <__sflush_r+0x104>)
 810d564:	410a      	asrs	r2, r1
 810d566:	07d6      	lsls	r6, r2, #31
 810d568:	d427      	bmi.n	810d5ba <__sflush_r+0xb2>
 810d56a:	2200      	movs	r2, #0
 810d56c:	6062      	str	r2, [r4, #4]
 810d56e:	04d9      	lsls	r1, r3, #19
 810d570:	6922      	ldr	r2, [r4, #16]
 810d572:	6022      	str	r2, [r4, #0]
 810d574:	d504      	bpl.n	810d580 <__sflush_r+0x78>
 810d576:	1c42      	adds	r2, r0, #1
 810d578:	d101      	bne.n	810d57e <__sflush_r+0x76>
 810d57a:	682b      	ldr	r3, [r5, #0]
 810d57c:	b903      	cbnz	r3, 810d580 <__sflush_r+0x78>
 810d57e:	6560      	str	r0, [r4, #84]	@ 0x54
 810d580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810d582:	602f      	str	r7, [r5, #0]
 810d584:	b1b9      	cbz	r1, 810d5b6 <__sflush_r+0xae>
 810d586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810d58a:	4299      	cmp	r1, r3
 810d58c:	d002      	beq.n	810d594 <__sflush_r+0x8c>
 810d58e:	4628      	mov	r0, r5
 810d590:	f7fe f8ea 	bl	810b768 <_free_r>
 810d594:	2300      	movs	r3, #0
 810d596:	6363      	str	r3, [r4, #52]	@ 0x34
 810d598:	e00d      	b.n	810d5b6 <__sflush_r+0xae>
 810d59a:	2301      	movs	r3, #1
 810d59c:	4628      	mov	r0, r5
 810d59e:	47b0      	blx	r6
 810d5a0:	4602      	mov	r2, r0
 810d5a2:	1c50      	adds	r0, r2, #1
 810d5a4:	d1c9      	bne.n	810d53a <__sflush_r+0x32>
 810d5a6:	682b      	ldr	r3, [r5, #0]
 810d5a8:	2b00      	cmp	r3, #0
 810d5aa:	d0c6      	beq.n	810d53a <__sflush_r+0x32>
 810d5ac:	2b1d      	cmp	r3, #29
 810d5ae:	d001      	beq.n	810d5b4 <__sflush_r+0xac>
 810d5b0:	2b16      	cmp	r3, #22
 810d5b2:	d11e      	bne.n	810d5f2 <__sflush_r+0xea>
 810d5b4:	602f      	str	r7, [r5, #0]
 810d5b6:	2000      	movs	r0, #0
 810d5b8:	e022      	b.n	810d600 <__sflush_r+0xf8>
 810d5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d5be:	b21b      	sxth	r3, r3
 810d5c0:	e01b      	b.n	810d5fa <__sflush_r+0xf2>
 810d5c2:	690f      	ldr	r7, [r1, #16]
 810d5c4:	2f00      	cmp	r7, #0
 810d5c6:	d0f6      	beq.n	810d5b6 <__sflush_r+0xae>
 810d5c8:	0793      	lsls	r3, r2, #30
 810d5ca:	680e      	ldr	r6, [r1, #0]
 810d5cc:	bf08      	it	eq
 810d5ce:	694b      	ldreq	r3, [r1, #20]
 810d5d0:	600f      	str	r7, [r1, #0]
 810d5d2:	bf18      	it	ne
 810d5d4:	2300      	movne	r3, #0
 810d5d6:	eba6 0807 	sub.w	r8, r6, r7
 810d5da:	608b      	str	r3, [r1, #8]
 810d5dc:	f1b8 0f00 	cmp.w	r8, #0
 810d5e0:	dde9      	ble.n	810d5b6 <__sflush_r+0xae>
 810d5e2:	6a21      	ldr	r1, [r4, #32]
 810d5e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810d5e6:	4643      	mov	r3, r8
 810d5e8:	463a      	mov	r2, r7
 810d5ea:	4628      	mov	r0, r5
 810d5ec:	47b0      	blx	r6
 810d5ee:	2800      	cmp	r0, #0
 810d5f0:	dc08      	bgt.n	810d604 <__sflush_r+0xfc>
 810d5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d5fa:	81a3      	strh	r3, [r4, #12]
 810d5fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d604:	4407      	add	r7, r0
 810d606:	eba8 0800 	sub.w	r8, r8, r0
 810d60a:	e7e7      	b.n	810d5dc <__sflush_r+0xd4>
 810d60c:	dfbffffe 	.word	0xdfbffffe

0810d610 <_fflush_r>:
 810d610:	b538      	push	{r3, r4, r5, lr}
 810d612:	690b      	ldr	r3, [r1, #16]
 810d614:	4605      	mov	r5, r0
 810d616:	460c      	mov	r4, r1
 810d618:	b913      	cbnz	r3, 810d620 <_fflush_r+0x10>
 810d61a:	2500      	movs	r5, #0
 810d61c:	4628      	mov	r0, r5
 810d61e:	bd38      	pop	{r3, r4, r5, pc}
 810d620:	b118      	cbz	r0, 810d62a <_fflush_r+0x1a>
 810d622:	6a03      	ldr	r3, [r0, #32]
 810d624:	b90b      	cbnz	r3, 810d62a <_fflush_r+0x1a>
 810d626:	f7fd f821 	bl	810a66c <__sinit>
 810d62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d62e:	2b00      	cmp	r3, #0
 810d630:	d0f3      	beq.n	810d61a <_fflush_r+0xa>
 810d632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810d634:	07d0      	lsls	r0, r2, #31
 810d636:	d404      	bmi.n	810d642 <_fflush_r+0x32>
 810d638:	0599      	lsls	r1, r3, #22
 810d63a:	d402      	bmi.n	810d642 <_fflush_r+0x32>
 810d63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d63e:	f7fd fa30 	bl	810aaa2 <__retarget_lock_acquire_recursive>
 810d642:	4628      	mov	r0, r5
 810d644:	4621      	mov	r1, r4
 810d646:	f7ff ff5f 	bl	810d508 <__sflush_r>
 810d64a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810d64c:	07da      	lsls	r2, r3, #31
 810d64e:	4605      	mov	r5, r0
 810d650:	d4e4      	bmi.n	810d61c <_fflush_r+0xc>
 810d652:	89a3      	ldrh	r3, [r4, #12]
 810d654:	059b      	lsls	r3, r3, #22
 810d656:	d4e1      	bmi.n	810d61c <_fflush_r+0xc>
 810d658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d65a:	f7fd fa23 	bl	810aaa4 <__retarget_lock_release_recursive>
 810d65e:	e7dd      	b.n	810d61c <_fflush_r+0xc>

0810d660 <__swhatbuf_r>:
 810d660:	b570      	push	{r4, r5, r6, lr}
 810d662:	460c      	mov	r4, r1
 810d664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d668:	2900      	cmp	r1, #0
 810d66a:	b096      	sub	sp, #88	@ 0x58
 810d66c:	4615      	mov	r5, r2
 810d66e:	461e      	mov	r6, r3
 810d670:	da0d      	bge.n	810d68e <__swhatbuf_r+0x2e>
 810d672:	89a3      	ldrh	r3, [r4, #12]
 810d674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810d678:	f04f 0100 	mov.w	r1, #0
 810d67c:	bf14      	ite	ne
 810d67e:	2340      	movne	r3, #64	@ 0x40
 810d680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810d684:	2000      	movs	r0, #0
 810d686:	6031      	str	r1, [r6, #0]
 810d688:	602b      	str	r3, [r5, #0]
 810d68a:	b016      	add	sp, #88	@ 0x58
 810d68c:	bd70      	pop	{r4, r5, r6, pc}
 810d68e:	466a      	mov	r2, sp
 810d690:	f000 f874 	bl	810d77c <_fstat_r>
 810d694:	2800      	cmp	r0, #0
 810d696:	dbec      	blt.n	810d672 <__swhatbuf_r+0x12>
 810d698:	9901      	ldr	r1, [sp, #4]
 810d69a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810d69e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810d6a2:	4259      	negs	r1, r3
 810d6a4:	4159      	adcs	r1, r3
 810d6a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810d6aa:	e7eb      	b.n	810d684 <__swhatbuf_r+0x24>

0810d6ac <__smakebuf_r>:
 810d6ac:	898b      	ldrh	r3, [r1, #12]
 810d6ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d6b0:	079d      	lsls	r5, r3, #30
 810d6b2:	4606      	mov	r6, r0
 810d6b4:	460c      	mov	r4, r1
 810d6b6:	d507      	bpl.n	810d6c8 <__smakebuf_r+0x1c>
 810d6b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810d6bc:	6023      	str	r3, [r4, #0]
 810d6be:	6123      	str	r3, [r4, #16]
 810d6c0:	2301      	movs	r3, #1
 810d6c2:	6163      	str	r3, [r4, #20]
 810d6c4:	b003      	add	sp, #12
 810d6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d6c8:	ab01      	add	r3, sp, #4
 810d6ca:	466a      	mov	r2, sp
 810d6cc:	f7ff ffc8 	bl	810d660 <__swhatbuf_r>
 810d6d0:	9f00      	ldr	r7, [sp, #0]
 810d6d2:	4605      	mov	r5, r0
 810d6d4:	4639      	mov	r1, r7
 810d6d6:	4630      	mov	r0, r6
 810d6d8:	f7fe f8ba 	bl	810b850 <_malloc_r>
 810d6dc:	b948      	cbnz	r0, 810d6f2 <__smakebuf_r+0x46>
 810d6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d6e2:	059a      	lsls	r2, r3, #22
 810d6e4:	d4ee      	bmi.n	810d6c4 <__smakebuf_r+0x18>
 810d6e6:	f023 0303 	bic.w	r3, r3, #3
 810d6ea:	f043 0302 	orr.w	r3, r3, #2
 810d6ee:	81a3      	strh	r3, [r4, #12]
 810d6f0:	e7e2      	b.n	810d6b8 <__smakebuf_r+0xc>
 810d6f2:	89a3      	ldrh	r3, [r4, #12]
 810d6f4:	6020      	str	r0, [r4, #0]
 810d6f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810d6fa:	81a3      	strh	r3, [r4, #12]
 810d6fc:	9b01      	ldr	r3, [sp, #4]
 810d6fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810d702:	b15b      	cbz	r3, 810d71c <__smakebuf_r+0x70>
 810d704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d708:	4630      	mov	r0, r6
 810d70a:	f000 f849 	bl	810d7a0 <_isatty_r>
 810d70e:	b128      	cbz	r0, 810d71c <__smakebuf_r+0x70>
 810d710:	89a3      	ldrh	r3, [r4, #12]
 810d712:	f023 0303 	bic.w	r3, r3, #3
 810d716:	f043 0301 	orr.w	r3, r3, #1
 810d71a:	81a3      	strh	r3, [r4, #12]
 810d71c:	89a3      	ldrh	r3, [r4, #12]
 810d71e:	431d      	orrs	r5, r3
 810d720:	81a5      	strh	r5, [r4, #12]
 810d722:	e7cf      	b.n	810d6c4 <__smakebuf_r+0x18>

0810d724 <memmove>:
 810d724:	4288      	cmp	r0, r1
 810d726:	b510      	push	{r4, lr}
 810d728:	eb01 0402 	add.w	r4, r1, r2
 810d72c:	d902      	bls.n	810d734 <memmove+0x10>
 810d72e:	4284      	cmp	r4, r0
 810d730:	4623      	mov	r3, r4
 810d732:	d807      	bhi.n	810d744 <memmove+0x20>
 810d734:	1e43      	subs	r3, r0, #1
 810d736:	42a1      	cmp	r1, r4
 810d738:	d008      	beq.n	810d74c <memmove+0x28>
 810d73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d73e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d742:	e7f8      	b.n	810d736 <memmove+0x12>
 810d744:	4402      	add	r2, r0
 810d746:	4601      	mov	r1, r0
 810d748:	428a      	cmp	r2, r1
 810d74a:	d100      	bne.n	810d74e <memmove+0x2a>
 810d74c:	bd10      	pop	{r4, pc}
 810d74e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d752:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d756:	e7f7      	b.n	810d748 <memmove+0x24>

0810d758 <strncmp>:
 810d758:	b510      	push	{r4, lr}
 810d75a:	b16a      	cbz	r2, 810d778 <strncmp+0x20>
 810d75c:	3901      	subs	r1, #1
 810d75e:	1884      	adds	r4, r0, r2
 810d760:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d764:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810d768:	429a      	cmp	r2, r3
 810d76a:	d103      	bne.n	810d774 <strncmp+0x1c>
 810d76c:	42a0      	cmp	r0, r4
 810d76e:	d001      	beq.n	810d774 <strncmp+0x1c>
 810d770:	2a00      	cmp	r2, #0
 810d772:	d1f5      	bne.n	810d760 <strncmp+0x8>
 810d774:	1ad0      	subs	r0, r2, r3
 810d776:	bd10      	pop	{r4, pc}
 810d778:	4610      	mov	r0, r2
 810d77a:	e7fc      	b.n	810d776 <strncmp+0x1e>

0810d77c <_fstat_r>:
 810d77c:	b538      	push	{r3, r4, r5, lr}
 810d77e:	4d07      	ldr	r5, [pc, #28]	@ (810d79c <_fstat_r+0x20>)
 810d780:	2300      	movs	r3, #0
 810d782:	4604      	mov	r4, r0
 810d784:	4608      	mov	r0, r1
 810d786:	4611      	mov	r1, r2
 810d788:	602b      	str	r3, [r5, #0]
 810d78a:	f7f5 fbf3 	bl	8102f74 <_fstat>
 810d78e:	1c43      	adds	r3, r0, #1
 810d790:	d102      	bne.n	810d798 <_fstat_r+0x1c>
 810d792:	682b      	ldr	r3, [r5, #0]
 810d794:	b103      	cbz	r3, 810d798 <_fstat_r+0x1c>
 810d796:	6023      	str	r3, [r4, #0]
 810d798:	bd38      	pop	{r3, r4, r5, pc}
 810d79a:	bf00      	nop
 810d79c:	100005b0 	.word	0x100005b0

0810d7a0 <_isatty_r>:
 810d7a0:	b538      	push	{r3, r4, r5, lr}
 810d7a2:	4d06      	ldr	r5, [pc, #24]	@ (810d7bc <_isatty_r+0x1c>)
 810d7a4:	2300      	movs	r3, #0
 810d7a6:	4604      	mov	r4, r0
 810d7a8:	4608      	mov	r0, r1
 810d7aa:	602b      	str	r3, [r5, #0]
 810d7ac:	f7f5 fbf2 	bl	8102f94 <_isatty>
 810d7b0:	1c43      	adds	r3, r0, #1
 810d7b2:	d102      	bne.n	810d7ba <_isatty_r+0x1a>
 810d7b4:	682b      	ldr	r3, [r5, #0]
 810d7b6:	b103      	cbz	r3, 810d7ba <_isatty_r+0x1a>
 810d7b8:	6023      	str	r3, [r4, #0]
 810d7ba:	bd38      	pop	{r3, r4, r5, pc}
 810d7bc:	100005b0 	.word	0x100005b0

0810d7c0 <_sbrk_r>:
 810d7c0:	b538      	push	{r3, r4, r5, lr}
 810d7c2:	4d06      	ldr	r5, [pc, #24]	@ (810d7dc <_sbrk_r+0x1c>)
 810d7c4:	2300      	movs	r3, #0
 810d7c6:	4604      	mov	r4, r0
 810d7c8:	4608      	mov	r0, r1
 810d7ca:	602b      	str	r3, [r5, #0]
 810d7cc:	f7f5 fbfa 	bl	8102fc4 <_sbrk>
 810d7d0:	1c43      	adds	r3, r0, #1
 810d7d2:	d102      	bne.n	810d7da <_sbrk_r+0x1a>
 810d7d4:	682b      	ldr	r3, [r5, #0]
 810d7d6:	b103      	cbz	r3, 810d7da <_sbrk_r+0x1a>
 810d7d8:	6023      	str	r3, [r4, #0]
 810d7da:	bd38      	pop	{r3, r4, r5, pc}
 810d7dc:	100005b0 	.word	0x100005b0

0810d7e0 <nan>:
 810d7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810d7e8 <nan+0x8>
 810d7e4:	4770      	bx	lr
 810d7e6:	bf00      	nop
 810d7e8:	00000000 	.word	0x00000000
 810d7ec:	7ff80000 	.word	0x7ff80000

0810d7f0 <__assert_func>:
 810d7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810d7f2:	4614      	mov	r4, r2
 810d7f4:	461a      	mov	r2, r3
 810d7f6:	4b09      	ldr	r3, [pc, #36]	@ (810d81c <__assert_func+0x2c>)
 810d7f8:	681b      	ldr	r3, [r3, #0]
 810d7fa:	4605      	mov	r5, r0
 810d7fc:	68d8      	ldr	r0, [r3, #12]
 810d7fe:	b954      	cbnz	r4, 810d816 <__assert_func+0x26>
 810d800:	4b07      	ldr	r3, [pc, #28]	@ (810d820 <__assert_func+0x30>)
 810d802:	461c      	mov	r4, r3
 810d804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810d808:	9100      	str	r1, [sp, #0]
 810d80a:	462b      	mov	r3, r5
 810d80c:	4905      	ldr	r1, [pc, #20]	@ (810d824 <__assert_func+0x34>)
 810d80e:	f000 fba7 	bl	810df60 <fiprintf>
 810d812:	f000 fbb7 	bl	810df84 <abort>
 810d816:	4b04      	ldr	r3, [pc, #16]	@ (810d828 <__assert_func+0x38>)
 810d818:	e7f4      	b.n	810d804 <__assert_func+0x14>
 810d81a:	bf00      	nop
 810d81c:	10000028 	.word	0x10000028
 810d820:	0810ec0d 	.word	0x0810ec0d
 810d824:	0810ebdf 	.word	0x0810ebdf
 810d828:	0810ebd2 	.word	0x0810ebd2

0810d82c <_calloc_r>:
 810d82c:	b570      	push	{r4, r5, r6, lr}
 810d82e:	fba1 5402 	umull	r5, r4, r1, r2
 810d832:	b93c      	cbnz	r4, 810d844 <_calloc_r+0x18>
 810d834:	4629      	mov	r1, r5
 810d836:	f7fe f80b 	bl	810b850 <_malloc_r>
 810d83a:	4606      	mov	r6, r0
 810d83c:	b928      	cbnz	r0, 810d84a <_calloc_r+0x1e>
 810d83e:	2600      	movs	r6, #0
 810d840:	4630      	mov	r0, r6
 810d842:	bd70      	pop	{r4, r5, r6, pc}
 810d844:	220c      	movs	r2, #12
 810d846:	6002      	str	r2, [r0, #0]
 810d848:	e7f9      	b.n	810d83e <_calloc_r+0x12>
 810d84a:	462a      	mov	r2, r5
 810d84c:	4621      	mov	r1, r4
 810d84e:	f7fd f8ab 	bl	810a9a8 <memset>
 810d852:	e7f5      	b.n	810d840 <_calloc_r+0x14>

0810d854 <rshift>:
 810d854:	6903      	ldr	r3, [r0, #16]
 810d856:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810d85a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d85e:	ea4f 1261 	mov.w	r2, r1, asr #5
 810d862:	f100 0414 	add.w	r4, r0, #20
 810d866:	dd45      	ble.n	810d8f4 <rshift+0xa0>
 810d868:	f011 011f 	ands.w	r1, r1, #31
 810d86c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810d870:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810d874:	d10c      	bne.n	810d890 <rshift+0x3c>
 810d876:	f100 0710 	add.w	r7, r0, #16
 810d87a:	4629      	mov	r1, r5
 810d87c:	42b1      	cmp	r1, r6
 810d87e:	d334      	bcc.n	810d8ea <rshift+0x96>
 810d880:	1a9b      	subs	r3, r3, r2
 810d882:	009b      	lsls	r3, r3, #2
 810d884:	1eea      	subs	r2, r5, #3
 810d886:	4296      	cmp	r6, r2
 810d888:	bf38      	it	cc
 810d88a:	2300      	movcc	r3, #0
 810d88c:	4423      	add	r3, r4
 810d88e:	e015      	b.n	810d8bc <rshift+0x68>
 810d890:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810d894:	f1c1 0820 	rsb	r8, r1, #32
 810d898:	40cf      	lsrs	r7, r1
 810d89a:	f105 0e04 	add.w	lr, r5, #4
 810d89e:	46a1      	mov	r9, r4
 810d8a0:	4576      	cmp	r6, lr
 810d8a2:	46f4      	mov	ip, lr
 810d8a4:	d815      	bhi.n	810d8d2 <rshift+0x7e>
 810d8a6:	1a9a      	subs	r2, r3, r2
 810d8a8:	0092      	lsls	r2, r2, #2
 810d8aa:	3a04      	subs	r2, #4
 810d8ac:	3501      	adds	r5, #1
 810d8ae:	42ae      	cmp	r6, r5
 810d8b0:	bf38      	it	cc
 810d8b2:	2200      	movcc	r2, #0
 810d8b4:	18a3      	adds	r3, r4, r2
 810d8b6:	50a7      	str	r7, [r4, r2]
 810d8b8:	b107      	cbz	r7, 810d8bc <rshift+0x68>
 810d8ba:	3304      	adds	r3, #4
 810d8bc:	1b1a      	subs	r2, r3, r4
 810d8be:	42a3      	cmp	r3, r4
 810d8c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810d8c4:	bf08      	it	eq
 810d8c6:	2300      	moveq	r3, #0
 810d8c8:	6102      	str	r2, [r0, #16]
 810d8ca:	bf08      	it	eq
 810d8cc:	6143      	streq	r3, [r0, #20]
 810d8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d8d2:	f8dc c000 	ldr.w	ip, [ip]
 810d8d6:	fa0c fc08 	lsl.w	ip, ip, r8
 810d8da:	ea4c 0707 	orr.w	r7, ip, r7
 810d8de:	f849 7b04 	str.w	r7, [r9], #4
 810d8e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 810d8e6:	40cf      	lsrs	r7, r1
 810d8e8:	e7da      	b.n	810d8a0 <rshift+0x4c>
 810d8ea:	f851 cb04 	ldr.w	ip, [r1], #4
 810d8ee:	f847 cf04 	str.w	ip, [r7, #4]!
 810d8f2:	e7c3      	b.n	810d87c <rshift+0x28>
 810d8f4:	4623      	mov	r3, r4
 810d8f6:	e7e1      	b.n	810d8bc <rshift+0x68>

0810d8f8 <__hexdig_fun>:
 810d8f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 810d8fc:	2b09      	cmp	r3, #9
 810d8fe:	d802      	bhi.n	810d906 <__hexdig_fun+0xe>
 810d900:	3820      	subs	r0, #32
 810d902:	b2c0      	uxtb	r0, r0
 810d904:	4770      	bx	lr
 810d906:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 810d90a:	2b05      	cmp	r3, #5
 810d90c:	d801      	bhi.n	810d912 <__hexdig_fun+0x1a>
 810d90e:	3847      	subs	r0, #71	@ 0x47
 810d910:	e7f7      	b.n	810d902 <__hexdig_fun+0xa>
 810d912:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 810d916:	2b05      	cmp	r3, #5
 810d918:	d801      	bhi.n	810d91e <__hexdig_fun+0x26>
 810d91a:	3827      	subs	r0, #39	@ 0x27
 810d91c:	e7f1      	b.n	810d902 <__hexdig_fun+0xa>
 810d91e:	2000      	movs	r0, #0
 810d920:	4770      	bx	lr
	...

0810d924 <__gethex>:
 810d924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d928:	b085      	sub	sp, #20
 810d92a:	468a      	mov	sl, r1
 810d92c:	9302      	str	r3, [sp, #8]
 810d92e:	680b      	ldr	r3, [r1, #0]
 810d930:	9001      	str	r0, [sp, #4]
 810d932:	4690      	mov	r8, r2
 810d934:	1c9c      	adds	r4, r3, #2
 810d936:	46a1      	mov	r9, r4
 810d938:	f814 0b01 	ldrb.w	r0, [r4], #1
 810d93c:	2830      	cmp	r0, #48	@ 0x30
 810d93e:	d0fa      	beq.n	810d936 <__gethex+0x12>
 810d940:	eba9 0303 	sub.w	r3, r9, r3
 810d944:	f1a3 0b02 	sub.w	fp, r3, #2
 810d948:	f7ff ffd6 	bl	810d8f8 <__hexdig_fun>
 810d94c:	4605      	mov	r5, r0
 810d94e:	2800      	cmp	r0, #0
 810d950:	d168      	bne.n	810da24 <__gethex+0x100>
 810d952:	49a0      	ldr	r1, [pc, #640]	@ (810dbd4 <__gethex+0x2b0>)
 810d954:	2201      	movs	r2, #1
 810d956:	4648      	mov	r0, r9
 810d958:	f7ff fefe 	bl	810d758 <strncmp>
 810d95c:	4607      	mov	r7, r0
 810d95e:	2800      	cmp	r0, #0
 810d960:	d167      	bne.n	810da32 <__gethex+0x10e>
 810d962:	f899 0001 	ldrb.w	r0, [r9, #1]
 810d966:	4626      	mov	r6, r4
 810d968:	f7ff ffc6 	bl	810d8f8 <__hexdig_fun>
 810d96c:	2800      	cmp	r0, #0
 810d96e:	d062      	beq.n	810da36 <__gethex+0x112>
 810d970:	4623      	mov	r3, r4
 810d972:	7818      	ldrb	r0, [r3, #0]
 810d974:	2830      	cmp	r0, #48	@ 0x30
 810d976:	4699      	mov	r9, r3
 810d978:	f103 0301 	add.w	r3, r3, #1
 810d97c:	d0f9      	beq.n	810d972 <__gethex+0x4e>
 810d97e:	f7ff ffbb 	bl	810d8f8 <__hexdig_fun>
 810d982:	fab0 f580 	clz	r5, r0
 810d986:	096d      	lsrs	r5, r5, #5
 810d988:	f04f 0b01 	mov.w	fp, #1
 810d98c:	464a      	mov	r2, r9
 810d98e:	4616      	mov	r6, r2
 810d990:	3201      	adds	r2, #1
 810d992:	7830      	ldrb	r0, [r6, #0]
 810d994:	f7ff ffb0 	bl	810d8f8 <__hexdig_fun>
 810d998:	2800      	cmp	r0, #0
 810d99a:	d1f8      	bne.n	810d98e <__gethex+0x6a>
 810d99c:	498d      	ldr	r1, [pc, #564]	@ (810dbd4 <__gethex+0x2b0>)
 810d99e:	2201      	movs	r2, #1
 810d9a0:	4630      	mov	r0, r6
 810d9a2:	f7ff fed9 	bl	810d758 <strncmp>
 810d9a6:	2800      	cmp	r0, #0
 810d9a8:	d13f      	bne.n	810da2a <__gethex+0x106>
 810d9aa:	b944      	cbnz	r4, 810d9be <__gethex+0x9a>
 810d9ac:	1c74      	adds	r4, r6, #1
 810d9ae:	4622      	mov	r2, r4
 810d9b0:	4616      	mov	r6, r2
 810d9b2:	3201      	adds	r2, #1
 810d9b4:	7830      	ldrb	r0, [r6, #0]
 810d9b6:	f7ff ff9f 	bl	810d8f8 <__hexdig_fun>
 810d9ba:	2800      	cmp	r0, #0
 810d9bc:	d1f8      	bne.n	810d9b0 <__gethex+0x8c>
 810d9be:	1ba4      	subs	r4, r4, r6
 810d9c0:	00a7      	lsls	r7, r4, #2
 810d9c2:	7833      	ldrb	r3, [r6, #0]
 810d9c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 810d9c8:	2b50      	cmp	r3, #80	@ 0x50
 810d9ca:	d13e      	bne.n	810da4a <__gethex+0x126>
 810d9cc:	7873      	ldrb	r3, [r6, #1]
 810d9ce:	2b2b      	cmp	r3, #43	@ 0x2b
 810d9d0:	d033      	beq.n	810da3a <__gethex+0x116>
 810d9d2:	2b2d      	cmp	r3, #45	@ 0x2d
 810d9d4:	d034      	beq.n	810da40 <__gethex+0x11c>
 810d9d6:	1c71      	adds	r1, r6, #1
 810d9d8:	2400      	movs	r4, #0
 810d9da:	7808      	ldrb	r0, [r1, #0]
 810d9dc:	f7ff ff8c 	bl	810d8f8 <__hexdig_fun>
 810d9e0:	1e43      	subs	r3, r0, #1
 810d9e2:	b2db      	uxtb	r3, r3
 810d9e4:	2b18      	cmp	r3, #24
 810d9e6:	d830      	bhi.n	810da4a <__gethex+0x126>
 810d9e8:	f1a0 0210 	sub.w	r2, r0, #16
 810d9ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810d9f0:	f7ff ff82 	bl	810d8f8 <__hexdig_fun>
 810d9f4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 810d9f8:	fa5f fc8c 	uxtb.w	ip, ip
 810d9fc:	f1bc 0f18 	cmp.w	ip, #24
 810da00:	f04f 030a 	mov.w	r3, #10
 810da04:	d91e      	bls.n	810da44 <__gethex+0x120>
 810da06:	b104      	cbz	r4, 810da0a <__gethex+0xe6>
 810da08:	4252      	negs	r2, r2
 810da0a:	4417      	add	r7, r2
 810da0c:	f8ca 1000 	str.w	r1, [sl]
 810da10:	b1ed      	cbz	r5, 810da4e <__gethex+0x12a>
 810da12:	f1bb 0f00 	cmp.w	fp, #0
 810da16:	bf0c      	ite	eq
 810da18:	2506      	moveq	r5, #6
 810da1a:	2500      	movne	r5, #0
 810da1c:	4628      	mov	r0, r5
 810da1e:	b005      	add	sp, #20
 810da20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810da24:	2500      	movs	r5, #0
 810da26:	462c      	mov	r4, r5
 810da28:	e7b0      	b.n	810d98c <__gethex+0x68>
 810da2a:	2c00      	cmp	r4, #0
 810da2c:	d1c7      	bne.n	810d9be <__gethex+0x9a>
 810da2e:	4627      	mov	r7, r4
 810da30:	e7c7      	b.n	810d9c2 <__gethex+0x9e>
 810da32:	464e      	mov	r6, r9
 810da34:	462f      	mov	r7, r5
 810da36:	2501      	movs	r5, #1
 810da38:	e7c3      	b.n	810d9c2 <__gethex+0x9e>
 810da3a:	2400      	movs	r4, #0
 810da3c:	1cb1      	adds	r1, r6, #2
 810da3e:	e7cc      	b.n	810d9da <__gethex+0xb6>
 810da40:	2401      	movs	r4, #1
 810da42:	e7fb      	b.n	810da3c <__gethex+0x118>
 810da44:	fb03 0002 	mla	r0, r3, r2, r0
 810da48:	e7ce      	b.n	810d9e8 <__gethex+0xc4>
 810da4a:	4631      	mov	r1, r6
 810da4c:	e7de      	b.n	810da0c <__gethex+0xe8>
 810da4e:	eba6 0309 	sub.w	r3, r6, r9
 810da52:	3b01      	subs	r3, #1
 810da54:	4629      	mov	r1, r5
 810da56:	2b07      	cmp	r3, #7
 810da58:	dc0a      	bgt.n	810da70 <__gethex+0x14c>
 810da5a:	9801      	ldr	r0, [sp, #4]
 810da5c:	f7fd ff84 	bl	810b968 <_Balloc>
 810da60:	4604      	mov	r4, r0
 810da62:	b940      	cbnz	r0, 810da76 <__gethex+0x152>
 810da64:	4b5c      	ldr	r3, [pc, #368]	@ (810dbd8 <__gethex+0x2b4>)
 810da66:	4602      	mov	r2, r0
 810da68:	21e4      	movs	r1, #228	@ 0xe4
 810da6a:	485c      	ldr	r0, [pc, #368]	@ (810dbdc <__gethex+0x2b8>)
 810da6c:	f7ff fec0 	bl	810d7f0 <__assert_func>
 810da70:	3101      	adds	r1, #1
 810da72:	105b      	asrs	r3, r3, #1
 810da74:	e7ef      	b.n	810da56 <__gethex+0x132>
 810da76:	f100 0a14 	add.w	sl, r0, #20
 810da7a:	2300      	movs	r3, #0
 810da7c:	4655      	mov	r5, sl
 810da7e:	469b      	mov	fp, r3
 810da80:	45b1      	cmp	r9, r6
 810da82:	d337      	bcc.n	810daf4 <__gethex+0x1d0>
 810da84:	f845 bb04 	str.w	fp, [r5], #4
 810da88:	eba5 050a 	sub.w	r5, r5, sl
 810da8c:	10ad      	asrs	r5, r5, #2
 810da8e:	6125      	str	r5, [r4, #16]
 810da90:	4658      	mov	r0, fp
 810da92:	f7fe f85b 	bl	810bb4c <__hi0bits>
 810da96:	016d      	lsls	r5, r5, #5
 810da98:	f8d8 6000 	ldr.w	r6, [r8]
 810da9c:	1a2d      	subs	r5, r5, r0
 810da9e:	42b5      	cmp	r5, r6
 810daa0:	dd54      	ble.n	810db4c <__gethex+0x228>
 810daa2:	1bad      	subs	r5, r5, r6
 810daa4:	4629      	mov	r1, r5
 810daa6:	4620      	mov	r0, r4
 810daa8:	f7fe fbef 	bl	810c28a <__any_on>
 810daac:	4681      	mov	r9, r0
 810daae:	b178      	cbz	r0, 810dad0 <__gethex+0x1ac>
 810dab0:	1e6b      	subs	r3, r5, #1
 810dab2:	1159      	asrs	r1, r3, #5
 810dab4:	f003 021f 	and.w	r2, r3, #31
 810dab8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810dabc:	f04f 0901 	mov.w	r9, #1
 810dac0:	fa09 f202 	lsl.w	r2, r9, r2
 810dac4:	420a      	tst	r2, r1
 810dac6:	d003      	beq.n	810dad0 <__gethex+0x1ac>
 810dac8:	454b      	cmp	r3, r9
 810daca:	dc36      	bgt.n	810db3a <__gethex+0x216>
 810dacc:	f04f 0902 	mov.w	r9, #2
 810dad0:	4629      	mov	r1, r5
 810dad2:	4620      	mov	r0, r4
 810dad4:	f7ff febe 	bl	810d854 <rshift>
 810dad8:	442f      	add	r7, r5
 810dada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810dade:	42bb      	cmp	r3, r7
 810dae0:	da42      	bge.n	810db68 <__gethex+0x244>
 810dae2:	9801      	ldr	r0, [sp, #4]
 810dae4:	4621      	mov	r1, r4
 810dae6:	f7fd ff7f 	bl	810b9e8 <_Bfree>
 810daea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810daec:	2300      	movs	r3, #0
 810daee:	6013      	str	r3, [r2, #0]
 810daf0:	25a3      	movs	r5, #163	@ 0xa3
 810daf2:	e793      	b.n	810da1c <__gethex+0xf8>
 810daf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 810daf8:	2a2e      	cmp	r2, #46	@ 0x2e
 810dafa:	d012      	beq.n	810db22 <__gethex+0x1fe>
 810dafc:	2b20      	cmp	r3, #32
 810dafe:	d104      	bne.n	810db0a <__gethex+0x1e6>
 810db00:	f845 bb04 	str.w	fp, [r5], #4
 810db04:	f04f 0b00 	mov.w	fp, #0
 810db08:	465b      	mov	r3, fp
 810db0a:	7830      	ldrb	r0, [r6, #0]
 810db0c:	9303      	str	r3, [sp, #12]
 810db0e:	f7ff fef3 	bl	810d8f8 <__hexdig_fun>
 810db12:	9b03      	ldr	r3, [sp, #12]
 810db14:	f000 000f 	and.w	r0, r0, #15
 810db18:	4098      	lsls	r0, r3
 810db1a:	ea4b 0b00 	orr.w	fp, fp, r0
 810db1e:	3304      	adds	r3, #4
 810db20:	e7ae      	b.n	810da80 <__gethex+0x15c>
 810db22:	45b1      	cmp	r9, r6
 810db24:	d8ea      	bhi.n	810dafc <__gethex+0x1d8>
 810db26:	492b      	ldr	r1, [pc, #172]	@ (810dbd4 <__gethex+0x2b0>)
 810db28:	9303      	str	r3, [sp, #12]
 810db2a:	2201      	movs	r2, #1
 810db2c:	4630      	mov	r0, r6
 810db2e:	f7ff fe13 	bl	810d758 <strncmp>
 810db32:	9b03      	ldr	r3, [sp, #12]
 810db34:	2800      	cmp	r0, #0
 810db36:	d1e1      	bne.n	810dafc <__gethex+0x1d8>
 810db38:	e7a2      	b.n	810da80 <__gethex+0x15c>
 810db3a:	1ea9      	subs	r1, r5, #2
 810db3c:	4620      	mov	r0, r4
 810db3e:	f7fe fba4 	bl	810c28a <__any_on>
 810db42:	2800      	cmp	r0, #0
 810db44:	d0c2      	beq.n	810dacc <__gethex+0x1a8>
 810db46:	f04f 0903 	mov.w	r9, #3
 810db4a:	e7c1      	b.n	810dad0 <__gethex+0x1ac>
 810db4c:	da09      	bge.n	810db62 <__gethex+0x23e>
 810db4e:	1b75      	subs	r5, r6, r5
 810db50:	4621      	mov	r1, r4
 810db52:	9801      	ldr	r0, [sp, #4]
 810db54:	462a      	mov	r2, r5
 810db56:	f7fe f95f 	bl	810be18 <__lshift>
 810db5a:	1b7f      	subs	r7, r7, r5
 810db5c:	4604      	mov	r4, r0
 810db5e:	f100 0a14 	add.w	sl, r0, #20
 810db62:	f04f 0900 	mov.w	r9, #0
 810db66:	e7b8      	b.n	810dada <__gethex+0x1b6>
 810db68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810db6c:	42bd      	cmp	r5, r7
 810db6e:	dd6f      	ble.n	810dc50 <__gethex+0x32c>
 810db70:	1bed      	subs	r5, r5, r7
 810db72:	42ae      	cmp	r6, r5
 810db74:	dc34      	bgt.n	810dbe0 <__gethex+0x2bc>
 810db76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810db7a:	2b02      	cmp	r3, #2
 810db7c:	d022      	beq.n	810dbc4 <__gethex+0x2a0>
 810db7e:	2b03      	cmp	r3, #3
 810db80:	d024      	beq.n	810dbcc <__gethex+0x2a8>
 810db82:	2b01      	cmp	r3, #1
 810db84:	d115      	bne.n	810dbb2 <__gethex+0x28e>
 810db86:	42ae      	cmp	r6, r5
 810db88:	d113      	bne.n	810dbb2 <__gethex+0x28e>
 810db8a:	2e01      	cmp	r6, #1
 810db8c:	d10b      	bne.n	810dba6 <__gethex+0x282>
 810db8e:	9a02      	ldr	r2, [sp, #8]
 810db90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810db94:	6013      	str	r3, [r2, #0]
 810db96:	2301      	movs	r3, #1
 810db98:	6123      	str	r3, [r4, #16]
 810db9a:	f8ca 3000 	str.w	r3, [sl]
 810db9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810dba0:	2562      	movs	r5, #98	@ 0x62
 810dba2:	601c      	str	r4, [r3, #0]
 810dba4:	e73a      	b.n	810da1c <__gethex+0xf8>
 810dba6:	1e71      	subs	r1, r6, #1
 810dba8:	4620      	mov	r0, r4
 810dbaa:	f7fe fb6e 	bl	810c28a <__any_on>
 810dbae:	2800      	cmp	r0, #0
 810dbb0:	d1ed      	bne.n	810db8e <__gethex+0x26a>
 810dbb2:	9801      	ldr	r0, [sp, #4]
 810dbb4:	4621      	mov	r1, r4
 810dbb6:	f7fd ff17 	bl	810b9e8 <_Bfree>
 810dbba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810dbbc:	2300      	movs	r3, #0
 810dbbe:	6013      	str	r3, [r2, #0]
 810dbc0:	2550      	movs	r5, #80	@ 0x50
 810dbc2:	e72b      	b.n	810da1c <__gethex+0xf8>
 810dbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dbc6:	2b00      	cmp	r3, #0
 810dbc8:	d1f3      	bne.n	810dbb2 <__gethex+0x28e>
 810dbca:	e7e0      	b.n	810db8e <__gethex+0x26a>
 810dbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dbce:	2b00      	cmp	r3, #0
 810dbd0:	d1dd      	bne.n	810db8e <__gethex+0x26a>
 810dbd2:	e7ee      	b.n	810dbb2 <__gethex+0x28e>
 810dbd4:	0810ea60 	.word	0x0810ea60
 810dbd8:	0810e8f9 	.word	0x0810e8f9
 810dbdc:	0810ec0e 	.word	0x0810ec0e
 810dbe0:	1e6f      	subs	r7, r5, #1
 810dbe2:	f1b9 0f00 	cmp.w	r9, #0
 810dbe6:	d130      	bne.n	810dc4a <__gethex+0x326>
 810dbe8:	b127      	cbz	r7, 810dbf4 <__gethex+0x2d0>
 810dbea:	4639      	mov	r1, r7
 810dbec:	4620      	mov	r0, r4
 810dbee:	f7fe fb4c 	bl	810c28a <__any_on>
 810dbf2:	4681      	mov	r9, r0
 810dbf4:	117a      	asrs	r2, r7, #5
 810dbf6:	2301      	movs	r3, #1
 810dbf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810dbfc:	f007 071f 	and.w	r7, r7, #31
 810dc00:	40bb      	lsls	r3, r7
 810dc02:	4213      	tst	r3, r2
 810dc04:	4629      	mov	r1, r5
 810dc06:	4620      	mov	r0, r4
 810dc08:	bf18      	it	ne
 810dc0a:	f049 0902 	orrne.w	r9, r9, #2
 810dc0e:	f7ff fe21 	bl	810d854 <rshift>
 810dc12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 810dc16:	1b76      	subs	r6, r6, r5
 810dc18:	2502      	movs	r5, #2
 810dc1a:	f1b9 0f00 	cmp.w	r9, #0
 810dc1e:	d047      	beq.n	810dcb0 <__gethex+0x38c>
 810dc20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810dc24:	2b02      	cmp	r3, #2
 810dc26:	d015      	beq.n	810dc54 <__gethex+0x330>
 810dc28:	2b03      	cmp	r3, #3
 810dc2a:	d017      	beq.n	810dc5c <__gethex+0x338>
 810dc2c:	2b01      	cmp	r3, #1
 810dc2e:	d109      	bne.n	810dc44 <__gethex+0x320>
 810dc30:	f019 0f02 	tst.w	r9, #2
 810dc34:	d006      	beq.n	810dc44 <__gethex+0x320>
 810dc36:	f8da 3000 	ldr.w	r3, [sl]
 810dc3a:	ea49 0903 	orr.w	r9, r9, r3
 810dc3e:	f019 0f01 	tst.w	r9, #1
 810dc42:	d10e      	bne.n	810dc62 <__gethex+0x33e>
 810dc44:	f045 0510 	orr.w	r5, r5, #16
 810dc48:	e032      	b.n	810dcb0 <__gethex+0x38c>
 810dc4a:	f04f 0901 	mov.w	r9, #1
 810dc4e:	e7d1      	b.n	810dbf4 <__gethex+0x2d0>
 810dc50:	2501      	movs	r5, #1
 810dc52:	e7e2      	b.n	810dc1a <__gethex+0x2f6>
 810dc54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dc56:	f1c3 0301 	rsb	r3, r3, #1
 810dc5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dc5e:	2b00      	cmp	r3, #0
 810dc60:	d0f0      	beq.n	810dc44 <__gethex+0x320>
 810dc62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810dc66:	f104 0314 	add.w	r3, r4, #20
 810dc6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810dc6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810dc72:	f04f 0c00 	mov.w	ip, #0
 810dc76:	4618      	mov	r0, r3
 810dc78:	f853 2b04 	ldr.w	r2, [r3], #4
 810dc7c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 810dc80:	d01b      	beq.n	810dcba <__gethex+0x396>
 810dc82:	3201      	adds	r2, #1
 810dc84:	6002      	str	r2, [r0, #0]
 810dc86:	2d02      	cmp	r5, #2
 810dc88:	f104 0314 	add.w	r3, r4, #20
 810dc8c:	d13c      	bne.n	810dd08 <__gethex+0x3e4>
 810dc8e:	f8d8 2000 	ldr.w	r2, [r8]
 810dc92:	3a01      	subs	r2, #1
 810dc94:	42b2      	cmp	r2, r6
 810dc96:	d109      	bne.n	810dcac <__gethex+0x388>
 810dc98:	1171      	asrs	r1, r6, #5
 810dc9a:	2201      	movs	r2, #1
 810dc9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810dca0:	f006 061f 	and.w	r6, r6, #31
 810dca4:	fa02 f606 	lsl.w	r6, r2, r6
 810dca8:	421e      	tst	r6, r3
 810dcaa:	d13a      	bne.n	810dd22 <__gethex+0x3fe>
 810dcac:	f045 0520 	orr.w	r5, r5, #32
 810dcb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810dcb2:	601c      	str	r4, [r3, #0]
 810dcb4:	9b02      	ldr	r3, [sp, #8]
 810dcb6:	601f      	str	r7, [r3, #0]
 810dcb8:	e6b0      	b.n	810da1c <__gethex+0xf8>
 810dcba:	4299      	cmp	r1, r3
 810dcbc:	f843 cc04 	str.w	ip, [r3, #-4]
 810dcc0:	d8d9      	bhi.n	810dc76 <__gethex+0x352>
 810dcc2:	68a3      	ldr	r3, [r4, #8]
 810dcc4:	459b      	cmp	fp, r3
 810dcc6:	db17      	blt.n	810dcf8 <__gethex+0x3d4>
 810dcc8:	6861      	ldr	r1, [r4, #4]
 810dcca:	9801      	ldr	r0, [sp, #4]
 810dccc:	3101      	adds	r1, #1
 810dcce:	f7fd fe4b 	bl	810b968 <_Balloc>
 810dcd2:	4681      	mov	r9, r0
 810dcd4:	b918      	cbnz	r0, 810dcde <__gethex+0x3ba>
 810dcd6:	4b1a      	ldr	r3, [pc, #104]	@ (810dd40 <__gethex+0x41c>)
 810dcd8:	4602      	mov	r2, r0
 810dcda:	2184      	movs	r1, #132	@ 0x84
 810dcdc:	e6c5      	b.n	810da6a <__gethex+0x146>
 810dcde:	6922      	ldr	r2, [r4, #16]
 810dce0:	3202      	adds	r2, #2
 810dce2:	f104 010c 	add.w	r1, r4, #12
 810dce6:	0092      	lsls	r2, r2, #2
 810dce8:	300c      	adds	r0, #12
 810dcea:	f7fc fedc 	bl	810aaa6 <memcpy>
 810dcee:	4621      	mov	r1, r4
 810dcf0:	9801      	ldr	r0, [sp, #4]
 810dcf2:	f7fd fe79 	bl	810b9e8 <_Bfree>
 810dcf6:	464c      	mov	r4, r9
 810dcf8:	6923      	ldr	r3, [r4, #16]
 810dcfa:	1c5a      	adds	r2, r3, #1
 810dcfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810dd00:	6122      	str	r2, [r4, #16]
 810dd02:	2201      	movs	r2, #1
 810dd04:	615a      	str	r2, [r3, #20]
 810dd06:	e7be      	b.n	810dc86 <__gethex+0x362>
 810dd08:	6922      	ldr	r2, [r4, #16]
 810dd0a:	455a      	cmp	r2, fp
 810dd0c:	dd0b      	ble.n	810dd26 <__gethex+0x402>
 810dd0e:	2101      	movs	r1, #1
 810dd10:	4620      	mov	r0, r4
 810dd12:	f7ff fd9f 	bl	810d854 <rshift>
 810dd16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810dd1a:	3701      	adds	r7, #1
 810dd1c:	42bb      	cmp	r3, r7
 810dd1e:	f6ff aee0 	blt.w	810dae2 <__gethex+0x1be>
 810dd22:	2501      	movs	r5, #1
 810dd24:	e7c2      	b.n	810dcac <__gethex+0x388>
 810dd26:	f016 061f 	ands.w	r6, r6, #31
 810dd2a:	d0fa      	beq.n	810dd22 <__gethex+0x3fe>
 810dd2c:	4453      	add	r3, sl
 810dd2e:	f1c6 0620 	rsb	r6, r6, #32
 810dd32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810dd36:	f7fd ff09 	bl	810bb4c <__hi0bits>
 810dd3a:	42b0      	cmp	r0, r6
 810dd3c:	dbe7      	blt.n	810dd0e <__gethex+0x3ea>
 810dd3e:	e7f0      	b.n	810dd22 <__gethex+0x3fe>
 810dd40:	0810e8f9 	.word	0x0810e8f9

0810dd44 <L_shift>:
 810dd44:	f1c2 0208 	rsb	r2, r2, #8
 810dd48:	0092      	lsls	r2, r2, #2
 810dd4a:	b570      	push	{r4, r5, r6, lr}
 810dd4c:	f1c2 0620 	rsb	r6, r2, #32
 810dd50:	6843      	ldr	r3, [r0, #4]
 810dd52:	6804      	ldr	r4, [r0, #0]
 810dd54:	fa03 f506 	lsl.w	r5, r3, r6
 810dd58:	432c      	orrs	r4, r5
 810dd5a:	40d3      	lsrs	r3, r2
 810dd5c:	6004      	str	r4, [r0, #0]
 810dd5e:	f840 3f04 	str.w	r3, [r0, #4]!
 810dd62:	4288      	cmp	r0, r1
 810dd64:	d3f4      	bcc.n	810dd50 <L_shift+0xc>
 810dd66:	bd70      	pop	{r4, r5, r6, pc}

0810dd68 <__match>:
 810dd68:	b530      	push	{r4, r5, lr}
 810dd6a:	6803      	ldr	r3, [r0, #0]
 810dd6c:	3301      	adds	r3, #1
 810dd6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810dd72:	b914      	cbnz	r4, 810dd7a <__match+0x12>
 810dd74:	6003      	str	r3, [r0, #0]
 810dd76:	2001      	movs	r0, #1
 810dd78:	bd30      	pop	{r4, r5, pc}
 810dd7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810dd7e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 810dd82:	2d19      	cmp	r5, #25
 810dd84:	bf98      	it	ls
 810dd86:	3220      	addls	r2, #32
 810dd88:	42a2      	cmp	r2, r4
 810dd8a:	d0f0      	beq.n	810dd6e <__match+0x6>
 810dd8c:	2000      	movs	r0, #0
 810dd8e:	e7f3      	b.n	810dd78 <__match+0x10>

0810dd90 <__hexnan>:
 810dd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dd94:	680b      	ldr	r3, [r1, #0]
 810dd96:	6801      	ldr	r1, [r0, #0]
 810dd98:	115e      	asrs	r6, r3, #5
 810dd9a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810dd9e:	f013 031f 	ands.w	r3, r3, #31
 810dda2:	b087      	sub	sp, #28
 810dda4:	bf18      	it	ne
 810dda6:	3604      	addne	r6, #4
 810dda8:	2500      	movs	r5, #0
 810ddaa:	1f37      	subs	r7, r6, #4
 810ddac:	4682      	mov	sl, r0
 810ddae:	4690      	mov	r8, r2
 810ddb0:	9301      	str	r3, [sp, #4]
 810ddb2:	f846 5c04 	str.w	r5, [r6, #-4]
 810ddb6:	46b9      	mov	r9, r7
 810ddb8:	463c      	mov	r4, r7
 810ddba:	9502      	str	r5, [sp, #8]
 810ddbc:	46ab      	mov	fp, r5
 810ddbe:	784a      	ldrb	r2, [r1, #1]
 810ddc0:	1c4b      	adds	r3, r1, #1
 810ddc2:	9303      	str	r3, [sp, #12]
 810ddc4:	b342      	cbz	r2, 810de18 <__hexnan+0x88>
 810ddc6:	4610      	mov	r0, r2
 810ddc8:	9105      	str	r1, [sp, #20]
 810ddca:	9204      	str	r2, [sp, #16]
 810ddcc:	f7ff fd94 	bl	810d8f8 <__hexdig_fun>
 810ddd0:	2800      	cmp	r0, #0
 810ddd2:	d151      	bne.n	810de78 <__hexnan+0xe8>
 810ddd4:	9a04      	ldr	r2, [sp, #16]
 810ddd6:	9905      	ldr	r1, [sp, #20]
 810ddd8:	2a20      	cmp	r2, #32
 810ddda:	d818      	bhi.n	810de0e <__hexnan+0x7e>
 810dddc:	9b02      	ldr	r3, [sp, #8]
 810ddde:	459b      	cmp	fp, r3
 810dde0:	dd13      	ble.n	810de0a <__hexnan+0x7a>
 810dde2:	454c      	cmp	r4, r9
 810dde4:	d206      	bcs.n	810ddf4 <__hexnan+0x64>
 810dde6:	2d07      	cmp	r5, #7
 810dde8:	dc04      	bgt.n	810ddf4 <__hexnan+0x64>
 810ddea:	462a      	mov	r2, r5
 810ddec:	4649      	mov	r1, r9
 810ddee:	4620      	mov	r0, r4
 810ddf0:	f7ff ffa8 	bl	810dd44 <L_shift>
 810ddf4:	4544      	cmp	r4, r8
 810ddf6:	d952      	bls.n	810de9e <__hexnan+0x10e>
 810ddf8:	2300      	movs	r3, #0
 810ddfa:	f1a4 0904 	sub.w	r9, r4, #4
 810ddfe:	f844 3c04 	str.w	r3, [r4, #-4]
 810de02:	f8cd b008 	str.w	fp, [sp, #8]
 810de06:	464c      	mov	r4, r9
 810de08:	461d      	mov	r5, r3
 810de0a:	9903      	ldr	r1, [sp, #12]
 810de0c:	e7d7      	b.n	810ddbe <__hexnan+0x2e>
 810de0e:	2a29      	cmp	r2, #41	@ 0x29
 810de10:	d157      	bne.n	810dec2 <__hexnan+0x132>
 810de12:	3102      	adds	r1, #2
 810de14:	f8ca 1000 	str.w	r1, [sl]
 810de18:	f1bb 0f00 	cmp.w	fp, #0
 810de1c:	d051      	beq.n	810dec2 <__hexnan+0x132>
 810de1e:	454c      	cmp	r4, r9
 810de20:	d206      	bcs.n	810de30 <__hexnan+0xa0>
 810de22:	2d07      	cmp	r5, #7
 810de24:	dc04      	bgt.n	810de30 <__hexnan+0xa0>
 810de26:	462a      	mov	r2, r5
 810de28:	4649      	mov	r1, r9
 810de2a:	4620      	mov	r0, r4
 810de2c:	f7ff ff8a 	bl	810dd44 <L_shift>
 810de30:	4544      	cmp	r4, r8
 810de32:	d936      	bls.n	810dea2 <__hexnan+0x112>
 810de34:	f1a8 0204 	sub.w	r2, r8, #4
 810de38:	4623      	mov	r3, r4
 810de3a:	f853 1b04 	ldr.w	r1, [r3], #4
 810de3e:	f842 1f04 	str.w	r1, [r2, #4]!
 810de42:	429f      	cmp	r7, r3
 810de44:	d2f9      	bcs.n	810de3a <__hexnan+0xaa>
 810de46:	1b3b      	subs	r3, r7, r4
 810de48:	f023 0303 	bic.w	r3, r3, #3
 810de4c:	3304      	adds	r3, #4
 810de4e:	3401      	adds	r4, #1
 810de50:	3e03      	subs	r6, #3
 810de52:	42b4      	cmp	r4, r6
 810de54:	bf88      	it	hi
 810de56:	2304      	movhi	r3, #4
 810de58:	4443      	add	r3, r8
 810de5a:	2200      	movs	r2, #0
 810de5c:	f843 2b04 	str.w	r2, [r3], #4
 810de60:	429f      	cmp	r7, r3
 810de62:	d2fb      	bcs.n	810de5c <__hexnan+0xcc>
 810de64:	683b      	ldr	r3, [r7, #0]
 810de66:	b91b      	cbnz	r3, 810de70 <__hexnan+0xe0>
 810de68:	4547      	cmp	r7, r8
 810de6a:	d128      	bne.n	810debe <__hexnan+0x12e>
 810de6c:	2301      	movs	r3, #1
 810de6e:	603b      	str	r3, [r7, #0]
 810de70:	2005      	movs	r0, #5
 810de72:	b007      	add	sp, #28
 810de74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810de78:	3501      	adds	r5, #1
 810de7a:	2d08      	cmp	r5, #8
 810de7c:	f10b 0b01 	add.w	fp, fp, #1
 810de80:	dd06      	ble.n	810de90 <__hexnan+0x100>
 810de82:	4544      	cmp	r4, r8
 810de84:	d9c1      	bls.n	810de0a <__hexnan+0x7a>
 810de86:	2300      	movs	r3, #0
 810de88:	f844 3c04 	str.w	r3, [r4, #-4]
 810de8c:	2501      	movs	r5, #1
 810de8e:	3c04      	subs	r4, #4
 810de90:	6822      	ldr	r2, [r4, #0]
 810de92:	f000 000f 	and.w	r0, r0, #15
 810de96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810de9a:	6020      	str	r0, [r4, #0]
 810de9c:	e7b5      	b.n	810de0a <__hexnan+0x7a>
 810de9e:	2508      	movs	r5, #8
 810dea0:	e7b3      	b.n	810de0a <__hexnan+0x7a>
 810dea2:	9b01      	ldr	r3, [sp, #4]
 810dea4:	2b00      	cmp	r3, #0
 810dea6:	d0dd      	beq.n	810de64 <__hexnan+0xd4>
 810dea8:	f1c3 0320 	rsb	r3, r3, #32
 810deac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810deb0:	40da      	lsrs	r2, r3
 810deb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810deb6:	4013      	ands	r3, r2
 810deb8:	f846 3c04 	str.w	r3, [r6, #-4]
 810debc:	e7d2      	b.n	810de64 <__hexnan+0xd4>
 810debe:	3f04      	subs	r7, #4
 810dec0:	e7d0      	b.n	810de64 <__hexnan+0xd4>
 810dec2:	2004      	movs	r0, #4
 810dec4:	e7d5      	b.n	810de72 <__hexnan+0xe2>

0810dec6 <__ascii_mbtowc>:
 810dec6:	b082      	sub	sp, #8
 810dec8:	b901      	cbnz	r1, 810decc <__ascii_mbtowc+0x6>
 810deca:	a901      	add	r1, sp, #4
 810decc:	b142      	cbz	r2, 810dee0 <__ascii_mbtowc+0x1a>
 810dece:	b14b      	cbz	r3, 810dee4 <__ascii_mbtowc+0x1e>
 810ded0:	7813      	ldrb	r3, [r2, #0]
 810ded2:	600b      	str	r3, [r1, #0]
 810ded4:	7812      	ldrb	r2, [r2, #0]
 810ded6:	1e10      	subs	r0, r2, #0
 810ded8:	bf18      	it	ne
 810deda:	2001      	movne	r0, #1
 810dedc:	b002      	add	sp, #8
 810dede:	4770      	bx	lr
 810dee0:	4610      	mov	r0, r2
 810dee2:	e7fb      	b.n	810dedc <__ascii_mbtowc+0x16>
 810dee4:	f06f 0001 	mvn.w	r0, #1
 810dee8:	e7f8      	b.n	810dedc <__ascii_mbtowc+0x16>

0810deea <_realloc_r>:
 810deea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810deee:	4680      	mov	r8, r0
 810def0:	4615      	mov	r5, r2
 810def2:	460c      	mov	r4, r1
 810def4:	b921      	cbnz	r1, 810df00 <_realloc_r+0x16>
 810def6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810defa:	4611      	mov	r1, r2
 810defc:	f7fd bca8 	b.w	810b850 <_malloc_r>
 810df00:	b92a      	cbnz	r2, 810df0e <_realloc_r+0x24>
 810df02:	f7fd fc31 	bl	810b768 <_free_r>
 810df06:	2400      	movs	r4, #0
 810df08:	4620      	mov	r0, r4
 810df0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810df0e:	f000 f840 	bl	810df92 <_malloc_usable_size_r>
 810df12:	4285      	cmp	r5, r0
 810df14:	4606      	mov	r6, r0
 810df16:	d802      	bhi.n	810df1e <_realloc_r+0x34>
 810df18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810df1c:	d8f4      	bhi.n	810df08 <_realloc_r+0x1e>
 810df1e:	4629      	mov	r1, r5
 810df20:	4640      	mov	r0, r8
 810df22:	f7fd fc95 	bl	810b850 <_malloc_r>
 810df26:	4607      	mov	r7, r0
 810df28:	2800      	cmp	r0, #0
 810df2a:	d0ec      	beq.n	810df06 <_realloc_r+0x1c>
 810df2c:	42b5      	cmp	r5, r6
 810df2e:	462a      	mov	r2, r5
 810df30:	4621      	mov	r1, r4
 810df32:	bf28      	it	cs
 810df34:	4632      	movcs	r2, r6
 810df36:	f7fc fdb6 	bl	810aaa6 <memcpy>
 810df3a:	4621      	mov	r1, r4
 810df3c:	4640      	mov	r0, r8
 810df3e:	f7fd fc13 	bl	810b768 <_free_r>
 810df42:	463c      	mov	r4, r7
 810df44:	e7e0      	b.n	810df08 <_realloc_r+0x1e>

0810df46 <__ascii_wctomb>:
 810df46:	4603      	mov	r3, r0
 810df48:	4608      	mov	r0, r1
 810df4a:	b141      	cbz	r1, 810df5e <__ascii_wctomb+0x18>
 810df4c:	2aff      	cmp	r2, #255	@ 0xff
 810df4e:	d904      	bls.n	810df5a <__ascii_wctomb+0x14>
 810df50:	228a      	movs	r2, #138	@ 0x8a
 810df52:	601a      	str	r2, [r3, #0]
 810df54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810df58:	4770      	bx	lr
 810df5a:	700a      	strb	r2, [r1, #0]
 810df5c:	2001      	movs	r0, #1
 810df5e:	4770      	bx	lr

0810df60 <fiprintf>:
 810df60:	b40e      	push	{r1, r2, r3}
 810df62:	b503      	push	{r0, r1, lr}
 810df64:	4601      	mov	r1, r0
 810df66:	ab03      	add	r3, sp, #12
 810df68:	4805      	ldr	r0, [pc, #20]	@ (810df80 <fiprintf+0x20>)
 810df6a:	f853 2b04 	ldr.w	r2, [r3], #4
 810df6e:	6800      	ldr	r0, [r0, #0]
 810df70:	9301      	str	r3, [sp, #4]
 810df72:	f7ff f9b1 	bl	810d2d8 <_vfiprintf_r>
 810df76:	b002      	add	sp, #8
 810df78:	f85d eb04 	ldr.w	lr, [sp], #4
 810df7c:	b003      	add	sp, #12
 810df7e:	4770      	bx	lr
 810df80:	10000028 	.word	0x10000028

0810df84 <abort>:
 810df84:	b508      	push	{r3, lr}
 810df86:	2006      	movs	r0, #6
 810df88:	f000 f834 	bl	810dff4 <raise>
 810df8c:	2001      	movs	r0, #1
 810df8e:	f7f4 ffa1 	bl	8102ed4 <_exit>

0810df92 <_malloc_usable_size_r>:
 810df92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810df96:	1f18      	subs	r0, r3, #4
 810df98:	2b00      	cmp	r3, #0
 810df9a:	bfbc      	itt	lt
 810df9c:	580b      	ldrlt	r3, [r1, r0]
 810df9e:	18c0      	addlt	r0, r0, r3
 810dfa0:	4770      	bx	lr

0810dfa2 <_raise_r>:
 810dfa2:	291f      	cmp	r1, #31
 810dfa4:	b538      	push	{r3, r4, r5, lr}
 810dfa6:	4605      	mov	r5, r0
 810dfa8:	460c      	mov	r4, r1
 810dfaa:	d904      	bls.n	810dfb6 <_raise_r+0x14>
 810dfac:	2316      	movs	r3, #22
 810dfae:	6003      	str	r3, [r0, #0]
 810dfb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810dfb4:	bd38      	pop	{r3, r4, r5, pc}
 810dfb6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810dfb8:	b112      	cbz	r2, 810dfc0 <_raise_r+0x1e>
 810dfba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810dfbe:	b94b      	cbnz	r3, 810dfd4 <_raise_r+0x32>
 810dfc0:	4628      	mov	r0, r5
 810dfc2:	f000 f831 	bl	810e028 <_getpid_r>
 810dfc6:	4622      	mov	r2, r4
 810dfc8:	4601      	mov	r1, r0
 810dfca:	4628      	mov	r0, r5
 810dfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810dfd0:	f000 b818 	b.w	810e004 <_kill_r>
 810dfd4:	2b01      	cmp	r3, #1
 810dfd6:	d00a      	beq.n	810dfee <_raise_r+0x4c>
 810dfd8:	1c59      	adds	r1, r3, #1
 810dfda:	d103      	bne.n	810dfe4 <_raise_r+0x42>
 810dfdc:	2316      	movs	r3, #22
 810dfde:	6003      	str	r3, [r0, #0]
 810dfe0:	2001      	movs	r0, #1
 810dfe2:	e7e7      	b.n	810dfb4 <_raise_r+0x12>
 810dfe4:	2100      	movs	r1, #0
 810dfe6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810dfea:	4620      	mov	r0, r4
 810dfec:	4798      	blx	r3
 810dfee:	2000      	movs	r0, #0
 810dff0:	e7e0      	b.n	810dfb4 <_raise_r+0x12>
	...

0810dff4 <raise>:
 810dff4:	4b02      	ldr	r3, [pc, #8]	@ (810e000 <raise+0xc>)
 810dff6:	4601      	mov	r1, r0
 810dff8:	6818      	ldr	r0, [r3, #0]
 810dffa:	f7ff bfd2 	b.w	810dfa2 <_raise_r>
 810dffe:	bf00      	nop
 810e000:	10000028 	.word	0x10000028

0810e004 <_kill_r>:
 810e004:	b538      	push	{r3, r4, r5, lr}
 810e006:	4d07      	ldr	r5, [pc, #28]	@ (810e024 <_kill_r+0x20>)
 810e008:	2300      	movs	r3, #0
 810e00a:	4604      	mov	r4, r0
 810e00c:	4608      	mov	r0, r1
 810e00e:	4611      	mov	r1, r2
 810e010:	602b      	str	r3, [r5, #0]
 810e012:	f7f4 ff4f 	bl	8102eb4 <_kill>
 810e016:	1c43      	adds	r3, r0, #1
 810e018:	d102      	bne.n	810e020 <_kill_r+0x1c>
 810e01a:	682b      	ldr	r3, [r5, #0]
 810e01c:	b103      	cbz	r3, 810e020 <_kill_r+0x1c>
 810e01e:	6023      	str	r3, [r4, #0]
 810e020:	bd38      	pop	{r3, r4, r5, pc}
 810e022:	bf00      	nop
 810e024:	100005b0 	.word	0x100005b0

0810e028 <_getpid_r>:
 810e028:	f7f4 bf3c 	b.w	8102ea4 <_getpid>

0810e02c <sqrt>:
 810e02c:	b538      	push	{r3, r4, r5, lr}
 810e02e:	ed2d 8b02 	vpush	{d8}
 810e032:	ec55 4b10 	vmov	r4, r5, d0
 810e036:	f000 f825 	bl	810e084 <__ieee754_sqrt>
 810e03a:	4622      	mov	r2, r4
 810e03c:	462b      	mov	r3, r5
 810e03e:	4620      	mov	r0, r4
 810e040:	4629      	mov	r1, r5
 810e042:	eeb0 8a40 	vmov.f32	s16, s0
 810e046:	eef0 8a60 	vmov.f32	s17, s1
 810e04a:	f7f2 fdf7 	bl	8100c3c <__aeabi_dcmpun>
 810e04e:	b990      	cbnz	r0, 810e076 <sqrt+0x4a>
 810e050:	2200      	movs	r2, #0
 810e052:	2300      	movs	r3, #0
 810e054:	4620      	mov	r0, r4
 810e056:	4629      	mov	r1, r5
 810e058:	f7f2 fdc8 	bl	8100bec <__aeabi_dcmplt>
 810e05c:	b158      	cbz	r0, 810e076 <sqrt+0x4a>
 810e05e:	f7fc fcf5 	bl	810aa4c <__errno>
 810e062:	2321      	movs	r3, #33	@ 0x21
 810e064:	6003      	str	r3, [r0, #0]
 810e066:	2200      	movs	r2, #0
 810e068:	2300      	movs	r3, #0
 810e06a:	4610      	mov	r0, r2
 810e06c:	4619      	mov	r1, r3
 810e06e:	f7f2 fc75 	bl	810095c <__aeabi_ddiv>
 810e072:	ec41 0b18 	vmov	d8, r0, r1
 810e076:	eeb0 0a48 	vmov.f32	s0, s16
 810e07a:	eef0 0a68 	vmov.f32	s1, s17
 810e07e:	ecbd 8b02 	vpop	{d8}
 810e082:	bd38      	pop	{r3, r4, r5, pc}

0810e084 <__ieee754_sqrt>:
 810e084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e088:	4a68      	ldr	r2, [pc, #416]	@ (810e22c <__ieee754_sqrt+0x1a8>)
 810e08a:	ec55 4b10 	vmov	r4, r5, d0
 810e08e:	43aa      	bics	r2, r5
 810e090:	462b      	mov	r3, r5
 810e092:	4621      	mov	r1, r4
 810e094:	d110      	bne.n	810e0b8 <__ieee754_sqrt+0x34>
 810e096:	4622      	mov	r2, r4
 810e098:	4620      	mov	r0, r4
 810e09a:	4629      	mov	r1, r5
 810e09c:	f7f2 fb34 	bl	8100708 <__aeabi_dmul>
 810e0a0:	4602      	mov	r2, r0
 810e0a2:	460b      	mov	r3, r1
 810e0a4:	4620      	mov	r0, r4
 810e0a6:	4629      	mov	r1, r5
 810e0a8:	f7f2 f978 	bl	810039c <__adddf3>
 810e0ac:	4604      	mov	r4, r0
 810e0ae:	460d      	mov	r5, r1
 810e0b0:	ec45 4b10 	vmov	d0, r4, r5
 810e0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e0b8:	2d00      	cmp	r5, #0
 810e0ba:	dc0e      	bgt.n	810e0da <__ieee754_sqrt+0x56>
 810e0bc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 810e0c0:	4322      	orrs	r2, r4
 810e0c2:	d0f5      	beq.n	810e0b0 <__ieee754_sqrt+0x2c>
 810e0c4:	b19d      	cbz	r5, 810e0ee <__ieee754_sqrt+0x6a>
 810e0c6:	4622      	mov	r2, r4
 810e0c8:	4620      	mov	r0, r4
 810e0ca:	4629      	mov	r1, r5
 810e0cc:	f7f2 f964 	bl	8100398 <__aeabi_dsub>
 810e0d0:	4602      	mov	r2, r0
 810e0d2:	460b      	mov	r3, r1
 810e0d4:	f7f2 fc42 	bl	810095c <__aeabi_ddiv>
 810e0d8:	e7e8      	b.n	810e0ac <__ieee754_sqrt+0x28>
 810e0da:	152a      	asrs	r2, r5, #20
 810e0dc:	d115      	bne.n	810e10a <__ieee754_sqrt+0x86>
 810e0de:	2000      	movs	r0, #0
 810e0e0:	e009      	b.n	810e0f6 <__ieee754_sqrt+0x72>
 810e0e2:	0acb      	lsrs	r3, r1, #11
 810e0e4:	3a15      	subs	r2, #21
 810e0e6:	0549      	lsls	r1, r1, #21
 810e0e8:	2b00      	cmp	r3, #0
 810e0ea:	d0fa      	beq.n	810e0e2 <__ieee754_sqrt+0x5e>
 810e0ec:	e7f7      	b.n	810e0de <__ieee754_sqrt+0x5a>
 810e0ee:	462a      	mov	r2, r5
 810e0f0:	e7fa      	b.n	810e0e8 <__ieee754_sqrt+0x64>
 810e0f2:	005b      	lsls	r3, r3, #1
 810e0f4:	3001      	adds	r0, #1
 810e0f6:	02dc      	lsls	r4, r3, #11
 810e0f8:	d5fb      	bpl.n	810e0f2 <__ieee754_sqrt+0x6e>
 810e0fa:	1e44      	subs	r4, r0, #1
 810e0fc:	1b12      	subs	r2, r2, r4
 810e0fe:	f1c0 0420 	rsb	r4, r0, #32
 810e102:	fa21 f404 	lsr.w	r4, r1, r4
 810e106:	4323      	orrs	r3, r4
 810e108:	4081      	lsls	r1, r0
 810e10a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e10e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 810e112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810e116:	07d2      	lsls	r2, r2, #31
 810e118:	bf5c      	itt	pl
 810e11a:	005b      	lslpl	r3, r3, #1
 810e11c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 810e120:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e124:	bf58      	it	pl
 810e126:	0049      	lslpl	r1, r1, #1
 810e128:	2600      	movs	r6, #0
 810e12a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 810e12e:	106d      	asrs	r5, r5, #1
 810e130:	0049      	lsls	r1, r1, #1
 810e132:	2016      	movs	r0, #22
 810e134:	4632      	mov	r2, r6
 810e136:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 810e13a:	1917      	adds	r7, r2, r4
 810e13c:	429f      	cmp	r7, r3
 810e13e:	bfde      	ittt	le
 810e140:	193a      	addle	r2, r7, r4
 810e142:	1bdb      	suble	r3, r3, r7
 810e144:	1936      	addle	r6, r6, r4
 810e146:	0fcf      	lsrs	r7, r1, #31
 810e148:	3801      	subs	r0, #1
 810e14a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 810e14e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e152:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810e156:	d1f0      	bne.n	810e13a <__ieee754_sqrt+0xb6>
 810e158:	4604      	mov	r4, r0
 810e15a:	2720      	movs	r7, #32
 810e15c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 810e160:	429a      	cmp	r2, r3
 810e162:	eb00 0e0c 	add.w	lr, r0, ip
 810e166:	db02      	blt.n	810e16e <__ieee754_sqrt+0xea>
 810e168:	d113      	bne.n	810e192 <__ieee754_sqrt+0x10e>
 810e16a:	458e      	cmp	lr, r1
 810e16c:	d811      	bhi.n	810e192 <__ieee754_sqrt+0x10e>
 810e16e:	f1be 0f00 	cmp.w	lr, #0
 810e172:	eb0e 000c 	add.w	r0, lr, ip
 810e176:	da42      	bge.n	810e1fe <__ieee754_sqrt+0x17a>
 810e178:	2800      	cmp	r0, #0
 810e17a:	db40      	blt.n	810e1fe <__ieee754_sqrt+0x17a>
 810e17c:	f102 0801 	add.w	r8, r2, #1
 810e180:	1a9b      	subs	r3, r3, r2
 810e182:	458e      	cmp	lr, r1
 810e184:	bf88      	it	hi
 810e186:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 810e18a:	eba1 010e 	sub.w	r1, r1, lr
 810e18e:	4464      	add	r4, ip
 810e190:	4642      	mov	r2, r8
 810e192:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 810e196:	3f01      	subs	r7, #1
 810e198:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 810e19c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e1a0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 810e1a4:	d1dc      	bne.n	810e160 <__ieee754_sqrt+0xdc>
 810e1a6:	4319      	orrs	r1, r3
 810e1a8:	d01b      	beq.n	810e1e2 <__ieee754_sqrt+0x15e>
 810e1aa:	f8df a084 	ldr.w	sl, [pc, #132]	@ 810e230 <__ieee754_sqrt+0x1ac>
 810e1ae:	f8df b084 	ldr.w	fp, [pc, #132]	@ 810e234 <__ieee754_sqrt+0x1b0>
 810e1b2:	e9da 0100 	ldrd	r0, r1, [sl]
 810e1b6:	e9db 2300 	ldrd	r2, r3, [fp]
 810e1ba:	f7f2 f8ed 	bl	8100398 <__aeabi_dsub>
 810e1be:	e9da 8900 	ldrd	r8, r9, [sl]
 810e1c2:	4602      	mov	r2, r0
 810e1c4:	460b      	mov	r3, r1
 810e1c6:	4640      	mov	r0, r8
 810e1c8:	4649      	mov	r1, r9
 810e1ca:	f7f2 fd19 	bl	8100c00 <__aeabi_dcmple>
 810e1ce:	b140      	cbz	r0, 810e1e2 <__ieee754_sqrt+0x15e>
 810e1d0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 810e1d4:	e9da 0100 	ldrd	r0, r1, [sl]
 810e1d8:	e9db 2300 	ldrd	r2, r3, [fp]
 810e1dc:	d111      	bne.n	810e202 <__ieee754_sqrt+0x17e>
 810e1de:	3601      	adds	r6, #1
 810e1e0:	463c      	mov	r4, r7
 810e1e2:	1072      	asrs	r2, r6, #1
 810e1e4:	0863      	lsrs	r3, r4, #1
 810e1e6:	07f1      	lsls	r1, r6, #31
 810e1e8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 810e1ec:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 810e1f0:	bf48      	it	mi
 810e1f2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 810e1f6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 810e1fa:	4618      	mov	r0, r3
 810e1fc:	e756      	b.n	810e0ac <__ieee754_sqrt+0x28>
 810e1fe:	4690      	mov	r8, r2
 810e200:	e7be      	b.n	810e180 <__ieee754_sqrt+0xfc>
 810e202:	f7f2 f8cb 	bl	810039c <__adddf3>
 810e206:	e9da 8900 	ldrd	r8, r9, [sl]
 810e20a:	4602      	mov	r2, r0
 810e20c:	460b      	mov	r3, r1
 810e20e:	4640      	mov	r0, r8
 810e210:	4649      	mov	r1, r9
 810e212:	f7f2 fceb 	bl	8100bec <__aeabi_dcmplt>
 810e216:	b120      	cbz	r0, 810e222 <__ieee754_sqrt+0x19e>
 810e218:	1ca0      	adds	r0, r4, #2
 810e21a:	bf08      	it	eq
 810e21c:	3601      	addeq	r6, #1
 810e21e:	3402      	adds	r4, #2
 810e220:	e7df      	b.n	810e1e2 <__ieee754_sqrt+0x15e>
 810e222:	1c63      	adds	r3, r4, #1
 810e224:	f023 0401 	bic.w	r4, r3, #1
 810e228:	e7db      	b.n	810e1e2 <__ieee754_sqrt+0x15e>
 810e22a:	bf00      	nop
 810e22c:	7ff00000 	.word	0x7ff00000
 810e230:	100001f0 	.word	0x100001f0
 810e234:	100001e8 	.word	0x100001e8

0810e238 <_init>:
 810e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e23a:	bf00      	nop
 810e23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e23e:	bc08      	pop	{r3}
 810e240:	469e      	mov	lr, r3
 810e242:	4770      	bx	lr

0810e244 <_fini>:
 810e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e246:	bf00      	nop
 810e248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e24a:	bc08      	pop	{r3}
 810e24c:	469e      	mov	lr, r3
 810e24e:	4770      	bx	lr
