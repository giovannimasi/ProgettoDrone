
Progetto Drone_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e148  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a50  0810e3e8  0810e3e8  0000f3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ee38  0810ee38  0000fe38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ee40  0810ee40  0000fe40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810ee44  0810ee44  0000fe44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000228  10000000  0810ee48  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003cc  10000228  0810f070  00010228  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100005f4  0810f070  000105f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c744  00000000  00000000  00010258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000330d  00000000  00000000  0002c99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001720  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001242  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc31  00000000  00000000  00032612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d18d  00000000  00000000  0006f243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018cbd4  00000000  00000000  0008c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00218fa4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000793c  00000000  00000000  00218fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  00220924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000228 	.word	0x10000228
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e3d0 	.word	0x0810e3d0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000022c 	.word	0x1000022c
 81002dc:	0810e3d0 	.word	0x0810e3d0

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8100dac:	f000 b9a0 	b.w	81010f0 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	@ (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	460c      	mov	r4, r1
 8100e3c:	2b00      	cmp	r3, #0
 8100e3e:	d14e      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e40:	4694      	mov	ip, r2
 8100e42:	458c      	cmp	ip, r1
 8100e44:	4686      	mov	lr, r0
 8100e46:	fab2 f282 	clz	r2, r2
 8100e4a:	d962      	bls.n	8100f12 <__udivmoddi4+0xde>
 8100e4c:	b14a      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e4e:	f1c2 0320 	rsb	r3, r2, #32
 8100e52:	4091      	lsls	r1, r2
 8100e54:	fa20 f303 	lsr.w	r3, r0, r3
 8100e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5c:	4319      	orrs	r1, r3
 8100e5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8100e62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e66:	fa1f f68c 	uxth.w	r6, ip
 8100e6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8100e6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100e72:	fb07 1114 	mls	r1, r7, r4, r1
 8100e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e7a:	fb04 f106 	mul.w	r1, r4, r6
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8100e8a:	f080 8112 	bcs.w	81010b2 <__udivmoddi4+0x27e>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 810f 	bls.w	81010b2 <__udivmoddi4+0x27e>
 8100e94:	3c02      	subs	r4, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a59      	subs	r1, r3, r1
 8100e9a:	fa1f f38e 	uxth.w	r3, lr
 8100e9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8100ea2:	fb07 1110 	mls	r1, r7, r0, r1
 8100ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100eaa:	fb00 f606 	mul.w	r6, r0, r6
 8100eae:	429e      	cmp	r6, r3
 8100eb0:	d90a      	bls.n	8100ec8 <__udivmoddi4+0x94>
 8100eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8100eb6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8100eba:	f080 80fc 	bcs.w	81010b6 <__udivmoddi4+0x282>
 8100ebe:	429e      	cmp	r6, r3
 8100ec0:	f240 80f9 	bls.w	81010b6 <__udivmoddi4+0x282>
 8100ec4:	4463      	add	r3, ip
 8100ec6:	3802      	subs	r0, #2
 8100ec8:	1b9b      	subs	r3, r3, r6
 8100eca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100ece:	2100      	movs	r1, #0
 8100ed0:	b11d      	cbz	r5, 8100eda <__udivmoddi4+0xa6>
 8100ed2:	40d3      	lsrs	r3, r2
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	e9c5 3200 	strd	r3, r2, [r5]
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d905      	bls.n	8100eee <__udivmoddi4+0xba>
 8100ee2:	b10d      	cbz	r5, 8100ee8 <__udivmoddi4+0xb4>
 8100ee4:	e9c5 0100 	strd	r0, r1, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	4608      	mov	r0, r1
 8100eec:	e7f5      	b.n	8100eda <__udivmoddi4+0xa6>
 8100eee:	fab3 f183 	clz	r1, r3
 8100ef2:	2900      	cmp	r1, #0
 8100ef4:	d146      	bne.n	8100f84 <__udivmoddi4+0x150>
 8100ef6:	42a3      	cmp	r3, r4
 8100ef8:	d302      	bcc.n	8100f00 <__udivmoddi4+0xcc>
 8100efa:	4290      	cmp	r0, r2
 8100efc:	f0c0 80f0 	bcc.w	81010e0 <__udivmoddi4+0x2ac>
 8100f00:	1a86      	subs	r6, r0, r2
 8100f02:	eb64 0303 	sbc.w	r3, r4, r3
 8100f06:	2001      	movs	r0, #1
 8100f08:	2d00      	cmp	r5, #0
 8100f0a:	d0e6      	beq.n	8100eda <__udivmoddi4+0xa6>
 8100f0c:	e9c5 6300 	strd	r6, r3, [r5]
 8100f10:	e7e3      	b.n	8100eda <__udivmoddi4+0xa6>
 8100f12:	2a00      	cmp	r2, #0
 8100f14:	f040 8090 	bne.w	8101038 <__udivmoddi4+0x204>
 8100f18:	eba1 040c 	sub.w	r4, r1, ip
 8100f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f20:	fa1f f78c 	uxth.w	r7, ip
 8100f24:	2101      	movs	r1, #1
 8100f26:	fbb4 f6f8 	udiv	r6, r4, r8
 8100f2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100f2e:	fb08 4416 	mls	r4, r8, r6, r4
 8100f32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f36:	fb07 f006 	mul.w	r0, r7, r6
 8100f3a:	4298      	cmp	r0, r3
 8100f3c:	d908      	bls.n	8100f50 <__udivmoddi4+0x11c>
 8100f3e:	eb1c 0303 	adds.w	r3, ip, r3
 8100f42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8100f46:	d202      	bcs.n	8100f4e <__udivmoddi4+0x11a>
 8100f48:	4298      	cmp	r0, r3
 8100f4a:	f200 80cd 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f4e:	4626      	mov	r6, r4
 8100f50:	1a1c      	subs	r4, r3, r0
 8100f52:	fa1f f38e 	uxth.w	r3, lr
 8100f56:	fbb4 f0f8 	udiv	r0, r4, r8
 8100f5a:	fb08 4410 	mls	r4, r8, r0, r4
 8100f5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100f62:	fb00 f707 	mul.w	r7, r0, r7
 8100f66:	429f      	cmp	r7, r3
 8100f68:	d908      	bls.n	8100f7c <__udivmoddi4+0x148>
 8100f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8100f6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8100f72:	d202      	bcs.n	8100f7a <__udivmoddi4+0x146>
 8100f74:	429f      	cmp	r7, r3
 8100f76:	f200 80b0 	bhi.w	81010da <__udivmoddi4+0x2a6>
 8100f7a:	4620      	mov	r0, r4
 8100f7c:	1bdb      	subs	r3, r3, r7
 8100f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100f82:	e7a5      	b.n	8100ed0 <__udivmoddi4+0x9c>
 8100f84:	f1c1 0620 	rsb	r6, r1, #32
 8100f88:	408b      	lsls	r3, r1
 8100f8a:	fa22 f706 	lsr.w	r7, r2, r6
 8100f8e:	431f      	orrs	r7, r3
 8100f90:	fa20 fc06 	lsr.w	ip, r0, r6
 8100f94:	fa04 f301 	lsl.w	r3, r4, r1
 8100f98:	ea43 030c 	orr.w	r3, r3, ip
 8100f9c:	40f4      	lsrs	r4, r6
 8100f9e:	fa00 f801 	lsl.w	r8, r0, r1
 8100fa2:	0c38      	lsrs	r0, r7, #16
 8100fa4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100fa8:	fbb4 fef0 	udiv	lr, r4, r0
 8100fac:	fa1f fc87 	uxth.w	ip, r7
 8100fb0:	fb00 441e 	mls	r4, r0, lr, r4
 8100fb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fb8:	fb0e f90c 	mul.w	r9, lr, ip
 8100fbc:	45a1      	cmp	r9, r4
 8100fbe:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc2:	d90a      	bls.n	8100fda <__udivmoddi4+0x1a6>
 8100fc4:	193c      	adds	r4, r7, r4
 8100fc6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8100fca:	f080 8084 	bcs.w	81010d6 <__udivmoddi4+0x2a2>
 8100fce:	45a1      	cmp	r9, r4
 8100fd0:	f240 8081 	bls.w	81010d6 <__udivmoddi4+0x2a2>
 8100fd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8100fd8:	443c      	add	r4, r7
 8100fda:	eba4 0409 	sub.w	r4, r4, r9
 8100fde:	fa1f f983 	uxth.w	r9, r3
 8100fe2:	fbb4 f3f0 	udiv	r3, r4, r0
 8100fe6:	fb00 4413 	mls	r4, r0, r3, r4
 8100fea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100fee:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ff2:	45a4      	cmp	ip, r4
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x1d2>
 8100ff6:	193c      	adds	r4, r7, r4
 8100ff8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8100ffc:	d267      	bcs.n	81010ce <__udivmoddi4+0x29a>
 8100ffe:	45a4      	cmp	ip, r4
 8101000:	d965      	bls.n	81010ce <__udivmoddi4+0x29a>
 8101002:	3b02      	subs	r3, #2
 8101004:	443c      	add	r4, r7
 8101006:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 810100a:	fba0 9302 	umull	r9, r3, r0, r2
 810100e:	eba4 040c 	sub.w	r4, r4, ip
 8101012:	429c      	cmp	r4, r3
 8101014:	46ce      	mov	lr, r9
 8101016:	469c      	mov	ip, r3
 8101018:	d351      	bcc.n	81010be <__udivmoddi4+0x28a>
 810101a:	d04e      	beq.n	81010ba <__udivmoddi4+0x286>
 810101c:	b155      	cbz	r5, 8101034 <__udivmoddi4+0x200>
 810101e:	ebb8 030e 	subs.w	r3, r8, lr
 8101022:	eb64 040c 	sbc.w	r4, r4, ip
 8101026:	fa04 f606 	lsl.w	r6, r4, r6
 810102a:	40cb      	lsrs	r3, r1
 810102c:	431e      	orrs	r6, r3
 810102e:	40cc      	lsrs	r4, r1
 8101030:	e9c5 6400 	strd	r6, r4, [r5]
 8101034:	2100      	movs	r1, #0
 8101036:	e750      	b.n	8100eda <__udivmoddi4+0xa6>
 8101038:	f1c2 0320 	rsb	r3, r2, #32
 810103c:	fa20 f103 	lsr.w	r1, r0, r3
 8101040:	fa0c fc02 	lsl.w	ip, ip, r2
 8101044:	fa24 f303 	lsr.w	r3, r4, r3
 8101048:	4094      	lsls	r4, r2
 810104a:	430c      	orrs	r4, r1
 810104c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8101050:	fa00 fe02 	lsl.w	lr, r0, r2
 8101054:	fa1f f78c 	uxth.w	r7, ip
 8101058:	fbb3 f0f8 	udiv	r0, r3, r8
 810105c:	fb08 3110 	mls	r1, r8, r0, r3
 8101060:	0c23      	lsrs	r3, r4, #16
 8101062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101066:	fb00 f107 	mul.w	r1, r0, r7
 810106a:	4299      	cmp	r1, r3
 810106c:	d908      	bls.n	8101080 <__udivmoddi4+0x24c>
 810106e:	eb1c 0303 	adds.w	r3, ip, r3
 8101072:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8101076:	d22c      	bcs.n	81010d2 <__udivmoddi4+0x29e>
 8101078:	4299      	cmp	r1, r3
 810107a:	d92a      	bls.n	81010d2 <__udivmoddi4+0x29e>
 810107c:	3802      	subs	r0, #2
 810107e:	4463      	add	r3, ip
 8101080:	1a5b      	subs	r3, r3, r1
 8101082:	b2a4      	uxth	r4, r4
 8101084:	fbb3 f1f8 	udiv	r1, r3, r8
 8101088:	fb08 3311 	mls	r3, r8, r1, r3
 810108c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101090:	fb01 f307 	mul.w	r3, r1, r7
 8101094:	42a3      	cmp	r3, r4
 8101096:	d908      	bls.n	81010aa <__udivmoddi4+0x276>
 8101098:	eb1c 0404 	adds.w	r4, ip, r4
 810109c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 81010a0:	d213      	bcs.n	81010ca <__udivmoddi4+0x296>
 81010a2:	42a3      	cmp	r3, r4
 81010a4:	d911      	bls.n	81010ca <__udivmoddi4+0x296>
 81010a6:	3902      	subs	r1, #2
 81010a8:	4464      	add	r4, ip
 81010aa:	1ae4      	subs	r4, r4, r3
 81010ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81010b0:	e739      	b.n	8100f26 <__udivmoddi4+0xf2>
 81010b2:	4604      	mov	r4, r0
 81010b4:	e6f0      	b.n	8100e98 <__udivmoddi4+0x64>
 81010b6:	4608      	mov	r0, r1
 81010b8:	e706      	b.n	8100ec8 <__udivmoddi4+0x94>
 81010ba:	45c8      	cmp	r8, r9
 81010bc:	d2ae      	bcs.n	810101c <__udivmoddi4+0x1e8>
 81010be:	ebb9 0e02 	subs.w	lr, r9, r2
 81010c2:	eb63 0c07 	sbc.w	ip, r3, r7
 81010c6:	3801      	subs	r0, #1
 81010c8:	e7a8      	b.n	810101c <__udivmoddi4+0x1e8>
 81010ca:	4631      	mov	r1, r6
 81010cc:	e7ed      	b.n	81010aa <__udivmoddi4+0x276>
 81010ce:	4603      	mov	r3, r0
 81010d0:	e799      	b.n	8101006 <__udivmoddi4+0x1d2>
 81010d2:	4630      	mov	r0, r6
 81010d4:	e7d4      	b.n	8101080 <__udivmoddi4+0x24c>
 81010d6:	46d6      	mov	lr, sl
 81010d8:	e77f      	b.n	8100fda <__udivmoddi4+0x1a6>
 81010da:	4463      	add	r3, ip
 81010dc:	3802      	subs	r0, #2
 81010de:	e74d      	b.n	8100f7c <__udivmoddi4+0x148>
 81010e0:	4606      	mov	r6, r0
 81010e2:	4623      	mov	r3, r4
 81010e4:	4608      	mov	r0, r1
 81010e6:	e70f      	b.n	8100f08 <__udivmoddi4+0xd4>
 81010e8:	3e02      	subs	r6, #2
 81010ea:	4463      	add	r3, ip
 81010ec:	e730      	b.n	8100f50 <__udivmoddi4+0x11c>
 81010ee:	bf00      	nop

081010f0 <__aeabi_idiv0>:
 81010f0:	4770      	bx	lr
 81010f2:	bf00      	nop

081010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81010f8:	4b09      	ldr	r3, [pc, #36]	@ (8101120 <SystemInit+0x2c>)
 81010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81010fe:	4a08      	ldr	r2, [pc, #32]	@ (8101120 <SystemInit+0x2c>)
 8101100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101108:	4b05      	ldr	r3, [pc, #20]	@ (8101120 <SystemInit+0x2c>)
 810110a:	691b      	ldr	r3, [r3, #16]
 810110c:	4a04      	ldr	r2, [pc, #16]	@ (8101120 <SystemInit+0x2c>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101114:	bf00      	nop
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
 810111e:	bf00      	nop
 8101120:	e000ed00 	.word	0xe000ed00

08101124 <ESC_Calibrate>:
 */
#include "main.h"
#include <ESC.h>


void ESC_Calibrate(){
 8101124:	b580      	push	{r7, lr}
 8101126:	af00      	add	r7, sp, #0
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 8101128:	4b32      	ldr	r3, [pc, #200]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810112a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810112c:	4613      	mov	r3, r2
 810112e:	009b      	lsls	r3, r3, #2
 8101130:	4413      	add	r3, r2
 8101132:	005b      	lsls	r3, r3, #1
 8101134:	4619      	mov	r1, r3
 8101136:	4a2f      	ldr	r2, [pc, #188]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101138:	4b2f      	ldr	r3, [pc, #188]	@ (81011f8 <ESC_Calibrate+0xd4>)
 810113a:	fba3 1301 	umull	r1, r3, r3, r1
 810113e:	095b      	lsrs	r3, r3, #5
 8101140:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 8101142:	4b2c      	ldr	r3, [pc, #176]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101146:	4613      	mov	r3, r2
 8101148:	009b      	lsls	r3, r3, #2
 810114a:	4413      	add	r3, r2
 810114c:	005b      	lsls	r3, r3, #1
 810114e:	4619      	mov	r1, r3
 8101150:	4a28      	ldr	r2, [pc, #160]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101152:	4b29      	ldr	r3, [pc, #164]	@ (81011f8 <ESC_Calibrate+0xd4>)
 8101154:	fba3 1301 	umull	r1, r3, r3, r1
 8101158:	095b      	lsrs	r3, r3, #5
 810115a:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 810115c:	4b25      	ldr	r3, [pc, #148]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810115e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101160:	4613      	mov	r3, r2
 8101162:	009b      	lsls	r3, r3, #2
 8101164:	4413      	add	r3, r2
 8101166:	005b      	lsls	r3, r3, #1
 8101168:	4619      	mov	r1, r3
 810116a:	4a22      	ldr	r2, [pc, #136]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810116c:	4b22      	ldr	r3, [pc, #136]	@ (81011f8 <ESC_Calibrate+0xd4>)
 810116e:	fba3 1301 	umull	r1, r3, r3, r1
 8101172:	095b      	lsrs	r3, r3, #5
 8101174:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * LIMIT_DUTY / 100);
 8101176:	4b1f      	ldr	r3, [pc, #124]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810117a:	4613      	mov	r3, r2
 810117c:	009b      	lsls	r3, r3, #2
 810117e:	4413      	add	r3, r2
 8101180:	005b      	lsls	r3, r3, #1
 8101182:	4619      	mov	r1, r3
 8101184:	4a1b      	ldr	r2, [pc, #108]	@ (81011f4 <ESC_Calibrate+0xd0>)
 8101186:	4b1c      	ldr	r3, [pc, #112]	@ (81011f8 <ESC_Calibrate+0xd4>)
 8101188:	fba3 1301 	umull	r1, r3, r3, r1
 810118c:	095b      	lsrs	r3, r3, #5
 810118e:	6413      	str	r3, [r2, #64]	@ 0x40
	HAL_Delay(3000);
 8101190:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8101194:	f002 f8f6 	bl	8103384 <HAL_Delay>
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101198:	4b16      	ldr	r3, [pc, #88]	@ (81011f4 <ESC_Calibrate+0xd0>)
 810119a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810119c:	4613      	mov	r3, r2
 810119e:	009b      	lsls	r3, r3, #2
 81011a0:	4413      	add	r3, r2
 81011a2:	4a14      	ldr	r2, [pc, #80]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011a4:	4914      	ldr	r1, [pc, #80]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011a6:	fba1 1303 	umull	r1, r3, r1, r3
 81011aa:	095b      	lsrs	r3, r3, #5
 81011ac:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81011ae:	4b11      	ldr	r3, [pc, #68]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81011b2:	4613      	mov	r3, r2
 81011b4:	009b      	lsls	r3, r3, #2
 81011b6:	4413      	add	r3, r2
 81011b8:	4a0e      	ldr	r2, [pc, #56]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011ba:	490f      	ldr	r1, [pc, #60]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011bc:	fba1 1303 	umull	r1, r3, r1, r3
 81011c0:	095b      	lsrs	r3, r3, #5
 81011c2:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81011c4:	4b0b      	ldr	r3, [pc, #44]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81011c8:	4613      	mov	r3, r2
 81011ca:	009b      	lsls	r3, r3, #2
 81011cc:	4413      	add	r3, r2
 81011ce:	4a09      	ldr	r2, [pc, #36]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011d0:	4909      	ldr	r1, [pc, #36]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011d2:	fba1 1303 	umull	r1, r3, r1, r3
 81011d6:	095b      	lsrs	r3, r3, #5
 81011d8:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81011da:	4b06      	ldr	r3, [pc, #24]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81011de:	4613      	mov	r3, r2
 81011e0:	009b      	lsls	r3, r3, #2
 81011e2:	4413      	add	r3, r2
 81011e4:	4a03      	ldr	r2, [pc, #12]	@ (81011f4 <ESC_Calibrate+0xd0>)
 81011e6:	4904      	ldr	r1, [pc, #16]	@ (81011f8 <ESC_Calibrate+0xd4>)
 81011e8:	fba1 1303 	umull	r1, r3, r1, r3
 81011ec:	095b      	lsrs	r3, r3, #5
 81011ee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 81011f0:	bf00      	nop
 81011f2:	bd80      	pop	{r7, pc}
 81011f4:	40000400 	.word	0x40000400
 81011f8:	51eb851f 	.word	0x51eb851f
 81011fc:	00000000 	.word	0x00000000

08101200 <rangeDuty>:

float rangeDuty(float duty){
 8101200:	b580      	push	{r7, lr}
 8101202:	b082      	sub	sp, #8
 8101204:	af00      	add	r7, sp, #0
 8101206:	ed87 0a01 	vstr	s0, [r7, #4]
	if(duty<MIN_DUTY){
 810120a:	6878      	ldr	r0, [r7, #4]
 810120c:	f7ff fa24 	bl	8100658 <__aeabi_f2d>
 8101210:	a311      	add	r3, pc, #68	@ (adr r3, 8101258 <rangeDuty+0x58>)
 8101212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101216:	f7ff fce9 	bl	8100bec <__aeabi_dcmplt>
 810121a:	4603      	mov	r3, r0
 810121c:	2b00      	cmp	r3, #0
 810121e:	d001      	beq.n	8101224 <rangeDuty+0x24>
		return MIN_DUTY;
 8101220:	4b0b      	ldr	r3, [pc, #44]	@ (8101250 <rangeDuty+0x50>)
 8101222:	e00b      	b.n	810123c <rangeDuty+0x3c>
	}
	else if (duty>MAX_DUTY){
 8101224:	edd7 7a01 	vldr	s15, [r7, #4]
 8101228:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 810122c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101234:	dd01      	ble.n	810123a <rangeDuty+0x3a>
		return MAX_DUTY;
 8101236:	4b07      	ldr	r3, [pc, #28]	@ (8101254 <rangeDuty+0x54>)
 8101238:	e000      	b.n	810123c <rangeDuty+0x3c>
	}
	return duty;
 810123a:	687b      	ldr	r3, [r7, #4]
}
 810123c:	ee07 3a90 	vmov	s15, r3
 8101240:	eeb0 0a67 	vmov.f32	s0, s15
 8101244:	3708      	adds	r7, #8
 8101246:	46bd      	mov	sp, r7
 8101248:	bd80      	pop	{r7, pc}
 810124a:	bf00      	nop
 810124c:	f3af 8000 	nop.w
 8101250:	40accccd 	.word	0x40accccd
 8101254:	40d00000 	.word	0x40d00000
 8101258:	9999999a 	.word	0x9999999a
 810125c:	40159999 	.word	0x40159999

08101260 <setPWM>:

void setPWM(float pwm1, float pwm2, float pwm3, float pwm4){
 8101260:	b580      	push	{r7, lr}
 8101262:	ed2d 8b02 	vpush	{d8}
 8101266:	b084      	sub	sp, #16
 8101268:	af00      	add	r7, sp, #0
 810126a:	ed87 0a03 	vstr	s0, [r7, #12]
 810126e:	edc7 0a02 	vstr	s1, [r7, #8]
 8101272:	ed87 1a01 	vstr	s2, [r7, #4]
 8101276:	edc7 1a00 	vstr	s3, [r7]
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * rangeDuty(pwm1) / 100);
 810127a:	4b33      	ldr	r3, [pc, #204]	@ (8101348 <setPWM+0xe8>)
 810127c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810127e:	ee07 3a90 	vmov	s15, r3
 8101282:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8101286:	ed97 0a03 	vldr	s0, [r7, #12]
 810128a:	f7ff ffb9 	bl	8101200 <rangeDuty>
 810128e:	eef0 7a40 	vmov.f32	s15, s0
 8101292:	ee28 7a27 	vmul.f32	s14, s16, s15
 8101296:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 810134c <setPWM+0xec>
 810129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810129e:	4b2a      	ldr	r3, [pc, #168]	@ (8101348 <setPWM+0xe8>)
 81012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012a4:	ee17 2a90 	vmov	r2, s15
 81012a8:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * rangeDuty(pwm2) / 100);
 81012aa:	4b27      	ldr	r3, [pc, #156]	@ (8101348 <setPWM+0xe8>)
 81012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012ae:	ee07 3a90 	vmov	s15, r3
 81012b2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 81012b6:	ed97 0a02 	vldr	s0, [r7, #8]
 81012ba:	f7ff ffa1 	bl	8101200 <rangeDuty>
 81012be:	eef0 7a40 	vmov.f32	s15, s0
 81012c2:	ee28 7a27 	vmul.f32	s14, s16, s15
 81012c6:	eddf 6a21 	vldr	s13, [pc, #132]	@ 810134c <setPWM+0xec>
 81012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8101348 <setPWM+0xe8>)
 81012d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012d4:	ee17 2a90 	vmov	r2, s15
 81012d8:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * rangeDuty(pwm3) / 100);
 81012da:	4b1b      	ldr	r3, [pc, #108]	@ (8101348 <setPWM+0xe8>)
 81012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81012de:	ee07 3a90 	vmov	s15, r3
 81012e2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 81012e6:	ed97 0a01 	vldr	s0, [r7, #4]
 81012ea:	f7ff ff89 	bl	8101200 <rangeDuty>
 81012ee:	eef0 7a40 	vmov.f32	s15, s0
 81012f2:	ee28 7a27 	vmul.f32	s14, s16, s15
 81012f6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 810134c <setPWM+0xec>
 81012fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81012fe:	4b12      	ldr	r3, [pc, #72]	@ (8101348 <setPWM+0xe8>)
 8101300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101304:	ee17 2a90 	vmov	r2, s15
 8101308:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * rangeDuty(pwm4) / 100);
 810130a:	4b0f      	ldr	r3, [pc, #60]	@ (8101348 <setPWM+0xe8>)
 810130c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810130e:	ee07 3a90 	vmov	s15, r3
 8101312:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8101316:	ed97 0a00 	vldr	s0, [r7]
 810131a:	f7ff ff71 	bl	8101200 <rangeDuty>
 810131e:	eef0 7a40 	vmov.f32	s15, s0
 8101322:	ee28 7a27 	vmul.f32	s14, s16, s15
 8101326:	eddf 6a09 	vldr	s13, [pc, #36]	@ 810134c <setPWM+0xec>
 810132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810132e:	4b06      	ldr	r3, [pc, #24]	@ (8101348 <setPWM+0xe8>)
 8101330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101334:	ee17 2a90 	vmov	r2, s15
 8101338:	641a      	str	r2, [r3, #64]	@ 0x40
}
 810133a:	bf00      	nop
 810133c:	3710      	adds	r7, #16
 810133e:	46bd      	mov	sp, r7
 8101340:	ecbd 8b02 	vpop	{d8}
 8101344:	bd80      	pop	{r7, pc}
 8101346:	bf00      	nop
 8101348:	40000400 	.word	0x40000400
 810134c:	42c80000 	.word	0x42c80000

08101350 <SpeedCompute>:

float* SpeedCompute(float virtualInputs[])
{
 8101350:	b5b0      	push	{r4, r5, r7, lr}
 8101352:	b082      	sub	sp, #8
 8101354:	af00      	add	r7, sp, #0
 8101356:	6078      	str	r0, [r7, #4]
    static float Speeds_quad[4];
    static float Speeds[4];

    Speeds_quad[0] = (1/(4*b))*virtualInputs[0] 							   - (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	681b      	ldr	r3, [r3, #0]
 810135c:	4618      	mov	r0, r3
 810135e:	f7ff f97b 	bl	8100658 <__aeabi_f2d>
 8101362:	a3a3      	add	r3, pc, #652	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 8101364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101368:	f7ff f9ce 	bl	8100708 <__aeabi_dmul>
 810136c:	4602      	mov	r2, r0
 810136e:	460b      	mov	r3, r1
 8101370:	4614      	mov	r4, r2
 8101372:	461d      	mov	r5, r3
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	3308      	adds	r3, #8
 8101378:	681b      	ldr	r3, [r3, #0]
 810137a:	4618      	mov	r0, r3
 810137c:	f7ff f96c 	bl	8100658 <__aeabi_f2d>
 8101380:	a39d      	add	r3, pc, #628	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 8101382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101386:	f7ff f9bf 	bl	8100708 <__aeabi_dmul>
 810138a:	4602      	mov	r2, r0
 810138c:	460b      	mov	r3, r1
 810138e:	4620      	mov	r0, r4
 8101390:	4629      	mov	r1, r5
 8101392:	f7ff f801 	bl	8100398 <__aeabi_dsub>
 8101396:	4602      	mov	r2, r0
 8101398:	460b      	mov	r3, r1
 810139a:	4614      	mov	r4, r2
 810139c:	461d      	mov	r5, r3
 810139e:	687b      	ldr	r3, [r7, #4]
 81013a0:	330c      	adds	r3, #12
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	4618      	mov	r0, r3
 81013a6:	f7ff f957 	bl	8100658 <__aeabi_f2d>
 81013aa:	a395      	add	r3, pc, #596	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 81013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013b0:	f7ff f9aa 	bl	8100708 <__aeabi_dmul>
 81013b4:	4602      	mov	r2, r0
 81013b6:	460b      	mov	r3, r1
 81013b8:	4620      	mov	r0, r4
 81013ba:	4629      	mov	r1, r5
 81013bc:	f7fe ffee 	bl	810039c <__adddf3>
 81013c0:	4602      	mov	r2, r0
 81013c2:	460b      	mov	r3, r1
 81013c4:	4610      	mov	r0, r2
 81013c6:	4619      	mov	r1, r3
 81013c8:	f7ff fc96 	bl	8100cf8 <__aeabi_d2f>
 81013cc:	4603      	mov	r3, r0
 81013ce:	4a8e      	ldr	r2, [pc, #568]	@ (8101608 <SpeedCompute+0x2b8>)
 81013d0:	6013      	str	r3, [r2, #0]
    Speeds_quad[1] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[1] 								  - (1/(4*d))*virtualInputs[3];
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	681b      	ldr	r3, [r3, #0]
 81013d6:	4618      	mov	r0, r3
 81013d8:	f7ff f93e 	bl	8100658 <__aeabi_f2d>
 81013dc:	a384      	add	r3, pc, #528	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 81013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81013e2:	f7ff f991 	bl	8100708 <__aeabi_dmul>
 81013e6:	4602      	mov	r2, r0
 81013e8:	460b      	mov	r3, r1
 81013ea:	4614      	mov	r4, r2
 81013ec:	461d      	mov	r5, r3
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	3304      	adds	r3, #4
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	4618      	mov	r0, r3
 81013f6:	f7ff f92f 	bl	8100658 <__aeabi_f2d>
 81013fa:	a37f      	add	r3, pc, #508	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 81013fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101400:	f7ff f982 	bl	8100708 <__aeabi_dmul>
 8101404:	4602      	mov	r2, r0
 8101406:	460b      	mov	r3, r1
 8101408:	4620      	mov	r0, r4
 810140a:	4629      	mov	r1, r5
 810140c:	f7fe ffc4 	bl	8100398 <__aeabi_dsub>
 8101410:	4602      	mov	r2, r0
 8101412:	460b      	mov	r3, r1
 8101414:	4614      	mov	r4, r2
 8101416:	461d      	mov	r5, r3
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	330c      	adds	r3, #12
 810141c:	681b      	ldr	r3, [r3, #0]
 810141e:	4618      	mov	r0, r3
 8101420:	f7ff f91a 	bl	8100658 <__aeabi_f2d>
 8101424:	a376      	add	r3, pc, #472	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 8101426:	e9d3 2300 	ldrd	r2, r3, [r3]
 810142a:	f7ff f96d 	bl	8100708 <__aeabi_dmul>
 810142e:	4602      	mov	r2, r0
 8101430:	460b      	mov	r3, r1
 8101432:	4620      	mov	r0, r4
 8101434:	4629      	mov	r1, r5
 8101436:	f7fe ffaf 	bl	8100398 <__aeabi_dsub>
 810143a:	4602      	mov	r2, r0
 810143c:	460b      	mov	r3, r1
 810143e:	4610      	mov	r0, r2
 8101440:	4619      	mov	r1, r3
 8101442:	f7ff fc59 	bl	8100cf8 <__aeabi_d2f>
 8101446:	4603      	mov	r3, r0
 8101448:	4a6f      	ldr	r2, [pc, #444]	@ (8101608 <SpeedCompute+0x2b8>)
 810144a:	6053      	str	r3, [r2, #4]
    Speeds_quad[2] = (1/(4*b))*virtualInputs[0] 							   + (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 810144c:	687b      	ldr	r3, [r7, #4]
 810144e:	681b      	ldr	r3, [r3, #0]
 8101450:	4618      	mov	r0, r3
 8101452:	f7ff f901 	bl	8100658 <__aeabi_f2d>
 8101456:	a366      	add	r3, pc, #408	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 8101458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810145c:	f7ff f954 	bl	8100708 <__aeabi_dmul>
 8101460:	4602      	mov	r2, r0
 8101462:	460b      	mov	r3, r1
 8101464:	4614      	mov	r4, r2
 8101466:	461d      	mov	r5, r3
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	3308      	adds	r3, #8
 810146c:	681b      	ldr	r3, [r3, #0]
 810146e:	4618      	mov	r0, r3
 8101470:	f7ff f8f2 	bl	8100658 <__aeabi_f2d>
 8101474:	a360      	add	r3, pc, #384	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 8101476:	e9d3 2300 	ldrd	r2, r3, [r3]
 810147a:	f7ff f945 	bl	8100708 <__aeabi_dmul>
 810147e:	4602      	mov	r2, r0
 8101480:	460b      	mov	r3, r1
 8101482:	4620      	mov	r0, r4
 8101484:	4629      	mov	r1, r5
 8101486:	f7fe ff89 	bl	810039c <__adddf3>
 810148a:	4602      	mov	r2, r0
 810148c:	460b      	mov	r3, r1
 810148e:	4614      	mov	r4, r2
 8101490:	461d      	mov	r5, r3
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	330c      	adds	r3, #12
 8101496:	681b      	ldr	r3, [r3, #0]
 8101498:	4618      	mov	r0, r3
 810149a:	f7ff f8dd 	bl	8100658 <__aeabi_f2d>
 810149e:	a358      	add	r3, pc, #352	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 81014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014a4:	f7ff f930 	bl	8100708 <__aeabi_dmul>
 81014a8:	4602      	mov	r2, r0
 81014aa:	460b      	mov	r3, r1
 81014ac:	4620      	mov	r0, r4
 81014ae:	4629      	mov	r1, r5
 81014b0:	f7fe ff74 	bl	810039c <__adddf3>
 81014b4:	4602      	mov	r2, r0
 81014b6:	460b      	mov	r3, r1
 81014b8:	4610      	mov	r0, r2
 81014ba:	4619      	mov	r1, r3
 81014bc:	f7ff fc1c 	bl	8100cf8 <__aeabi_d2f>
 81014c0:	4603      	mov	r3, r0
 81014c2:	4a51      	ldr	r2, [pc, #324]	@ (8101608 <SpeedCompute+0x2b8>)
 81014c4:	6093      	str	r3, [r2, #8]
    Speeds_quad[3] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[1] 								  - (1/(4*d))*virtualInputs[3];
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	681b      	ldr	r3, [r3, #0]
 81014ca:	4618      	mov	r0, r3
 81014cc:	f7ff f8c4 	bl	8100658 <__aeabi_f2d>
 81014d0:	a347      	add	r3, pc, #284	@ (adr r3, 81015f0 <SpeedCompute+0x2a0>)
 81014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014d6:	f7ff f917 	bl	8100708 <__aeabi_dmul>
 81014da:	4602      	mov	r2, r0
 81014dc:	460b      	mov	r3, r1
 81014de:	4614      	mov	r4, r2
 81014e0:	461d      	mov	r5, r3
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	3304      	adds	r3, #4
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	4618      	mov	r0, r3
 81014ea:	f7ff f8b5 	bl	8100658 <__aeabi_f2d>
 81014ee:	a342      	add	r3, pc, #264	@ (adr r3, 81015f8 <SpeedCompute+0x2a8>)
 81014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81014f4:	f7ff f908 	bl	8100708 <__aeabi_dmul>
 81014f8:	4602      	mov	r2, r0
 81014fa:	460b      	mov	r3, r1
 81014fc:	4620      	mov	r0, r4
 81014fe:	4629      	mov	r1, r5
 8101500:	f7fe ff4c 	bl	810039c <__adddf3>
 8101504:	4602      	mov	r2, r0
 8101506:	460b      	mov	r3, r1
 8101508:	4614      	mov	r4, r2
 810150a:	461d      	mov	r5, r3
 810150c:	687b      	ldr	r3, [r7, #4]
 810150e:	330c      	adds	r3, #12
 8101510:	681b      	ldr	r3, [r3, #0]
 8101512:	4618      	mov	r0, r3
 8101514:	f7ff f8a0 	bl	8100658 <__aeabi_f2d>
 8101518:	a339      	add	r3, pc, #228	@ (adr r3, 8101600 <SpeedCompute+0x2b0>)
 810151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810151e:	f7ff f8f3 	bl	8100708 <__aeabi_dmul>
 8101522:	4602      	mov	r2, r0
 8101524:	460b      	mov	r3, r1
 8101526:	4620      	mov	r0, r4
 8101528:	4629      	mov	r1, r5
 810152a:	f7fe ff35 	bl	8100398 <__aeabi_dsub>
 810152e:	4602      	mov	r2, r0
 8101530:	460b      	mov	r3, r1
 8101532:	4610      	mov	r0, r2
 8101534:	4619      	mov	r1, r3
 8101536:	f7ff fbdf 	bl	8100cf8 <__aeabi_d2f>
 810153a:	4603      	mov	r3, r0
 810153c:	4a32      	ldr	r2, [pc, #200]	@ (8101608 <SpeedCompute+0x2b8>)
 810153e:	60d3      	str	r3, [r2, #12]
     * Calcoliamo le velocità dei motori al quadrato, poiché non possono essere negative.
     * Partendo dal valore di throttle e seguendo le matrici di controllo dei droni andiamo
     * a sommare e sottrarre le variabili date tramite il PID per il controllo delle velocità.
     */

    Speeds[0] = sqrt(Speeds_quad[0]);
 8101540:	4b31      	ldr	r3, [pc, #196]	@ (8101608 <SpeedCompute+0x2b8>)
 8101542:	681b      	ldr	r3, [r3, #0]
 8101544:	4618      	mov	r0, r3
 8101546:	f7ff f887 	bl	8100658 <__aeabi_f2d>
 810154a:	4602      	mov	r2, r0
 810154c:	460b      	mov	r3, r1
 810154e:	ec43 2b10 	vmov	d0, r2, r3
 8101552:	f00c fe37 	bl	810e1c4 <sqrt>
 8101556:	ec53 2b10 	vmov	r2, r3, d0
 810155a:	4610      	mov	r0, r2
 810155c:	4619      	mov	r1, r3
 810155e:	f7ff fbcb 	bl	8100cf8 <__aeabi_d2f>
 8101562:	4603      	mov	r3, r0
 8101564:	4a29      	ldr	r2, [pc, #164]	@ (810160c <SpeedCompute+0x2bc>)
 8101566:	6013      	str	r3, [r2, #0]
    Speeds[1] = sqrt(Speeds_quad[1]);
 8101568:	4b27      	ldr	r3, [pc, #156]	@ (8101608 <SpeedCompute+0x2b8>)
 810156a:	685b      	ldr	r3, [r3, #4]
 810156c:	4618      	mov	r0, r3
 810156e:	f7ff f873 	bl	8100658 <__aeabi_f2d>
 8101572:	4602      	mov	r2, r0
 8101574:	460b      	mov	r3, r1
 8101576:	ec43 2b10 	vmov	d0, r2, r3
 810157a:	f00c fe23 	bl	810e1c4 <sqrt>
 810157e:	ec53 2b10 	vmov	r2, r3, d0
 8101582:	4610      	mov	r0, r2
 8101584:	4619      	mov	r1, r3
 8101586:	f7ff fbb7 	bl	8100cf8 <__aeabi_d2f>
 810158a:	4603      	mov	r3, r0
 810158c:	4a1f      	ldr	r2, [pc, #124]	@ (810160c <SpeedCompute+0x2bc>)
 810158e:	6053      	str	r3, [r2, #4]
    Speeds[2] = sqrt(Speeds_quad[2]);
 8101590:	4b1d      	ldr	r3, [pc, #116]	@ (8101608 <SpeedCompute+0x2b8>)
 8101592:	689b      	ldr	r3, [r3, #8]
 8101594:	4618      	mov	r0, r3
 8101596:	f7ff f85f 	bl	8100658 <__aeabi_f2d>
 810159a:	4602      	mov	r2, r0
 810159c:	460b      	mov	r3, r1
 810159e:	ec43 2b10 	vmov	d0, r2, r3
 81015a2:	f00c fe0f 	bl	810e1c4 <sqrt>
 81015a6:	ec53 2b10 	vmov	r2, r3, d0
 81015aa:	4610      	mov	r0, r2
 81015ac:	4619      	mov	r1, r3
 81015ae:	f7ff fba3 	bl	8100cf8 <__aeabi_d2f>
 81015b2:	4603      	mov	r3, r0
 81015b4:	4a15      	ldr	r2, [pc, #84]	@ (810160c <SpeedCompute+0x2bc>)
 81015b6:	6093      	str	r3, [r2, #8]
    Speeds[3] = sqrt(Speeds_quad[3]);
 81015b8:	4b13      	ldr	r3, [pc, #76]	@ (8101608 <SpeedCompute+0x2b8>)
 81015ba:	68db      	ldr	r3, [r3, #12]
 81015bc:	4618      	mov	r0, r3
 81015be:	f7ff f84b 	bl	8100658 <__aeabi_f2d>
 81015c2:	4602      	mov	r2, r0
 81015c4:	460b      	mov	r3, r1
 81015c6:	ec43 2b10 	vmov	d0, r2, r3
 81015ca:	f00c fdfb 	bl	810e1c4 <sqrt>
 81015ce:	ec53 2b10 	vmov	r2, r3, d0
 81015d2:	4610      	mov	r0, r2
 81015d4:	4619      	mov	r1, r3
 81015d6:	f7ff fb8f 	bl	8100cf8 <__aeabi_d2f>
 81015da:	4603      	mov	r3, r0
 81015dc:	4a0b      	ldr	r2, [pc, #44]	@ (810160c <SpeedCompute+0x2bc>)
 81015de:	60d3      	str	r3, [r2, #12]

    // Una volta calcolata la velocità dei motori al quadrato, viene eseguita la radice

    return Speeds;
 81015e0:	4b0a      	ldr	r3, [pc, #40]	@ (810160c <SpeedCompute+0x2bc>)
}
 81015e2:	4618      	mov	r0, r3
 81015e4:	3708      	adds	r7, #8
 81015e6:	46bd      	mov	sp, r7
 81015e8:	bdb0      	pop	{r4, r5, r7, pc}
 81015ea:	bf00      	nop
 81015ec:	f3af 8000 	nop.w
 81015f0:	5d54bf10 	.word	0x5d54bf10
 81015f4:	40d4fe08 	.word	0x40d4fe08
 81015f8:	4dc69f38 	.word	0x4dc69f38
 81015fc:	41017e5c 	.word	0x41017e5c
 8101600:	ffffffff 	.word	0xffffffff
 8101604:	40a869ff 	.word	0x40a869ff
 8101608:	10000244 	.word	0x10000244
 810160c:	10000254 	.word	0x10000254

08101610 <map>:


float map(float val){
 8101610:	b580      	push	{r7, lr}
 8101612:	b084      	sub	sp, #16
 8101614:	af00      	add	r7, sp, #0
 8101616:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty = (((MAX_DUTY-MIN_DUTY)*val) + ((MIN_DUTY * MAX_SPEED)-(MAX_DUTY*MIN_SPEED)))/(MAX_SPEED-MIN_SPEED);
 810161a:	6878      	ldr	r0, [r7, #4]
 810161c:	f7ff f81c 	bl	8100658 <__aeabi_f2d>
 8101620:	a321      	add	r3, pc, #132	@ (adr r3, 81016a8 <map+0x98>)
 8101622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101626:	f7ff f86f 	bl	8100708 <__aeabi_dmul>
 810162a:	4602      	mov	r2, r0
 810162c:	460b      	mov	r3, r1
 810162e:	4610      	mov	r0, r2
 8101630:	4619      	mov	r1, r3
 8101632:	a31f      	add	r3, pc, #124	@ (adr r3, 81016b0 <map+0xa0>)
 8101634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101638:	f7fe feb0 	bl	810039c <__adddf3>
 810163c:	4602      	mov	r2, r0
 810163e:	460b      	mov	r3, r1
 8101640:	4610      	mov	r0, r2
 8101642:	4619      	mov	r1, r3
 8101644:	a31c      	add	r3, pc, #112	@ (adr r3, 81016b8 <map+0xa8>)
 8101646:	e9d3 2300 	ldrd	r2, r3, [r3]
 810164a:	f7ff f987 	bl	810095c <__aeabi_ddiv>
 810164e:	4602      	mov	r2, r0
 8101650:	460b      	mov	r3, r1
 8101652:	4610      	mov	r0, r2
 8101654:	4619      	mov	r1, r3
 8101656:	f7ff fb4f 	bl	8100cf8 <__aeabi_d2f>
 810165a:	4603      	mov	r3, r0
 810165c:	60fb      	str	r3, [r7, #12]

	if (duty<MIN_DUTY) duty=MIN_DUTY;
 810165e:	68f8      	ldr	r0, [r7, #12]
 8101660:	f7fe fffa 	bl	8100658 <__aeabi_f2d>
 8101664:	a316      	add	r3, pc, #88	@ (adr r3, 81016c0 <map+0xb0>)
 8101666:	e9d3 2300 	ldrd	r2, r3, [r3]
 810166a:	f7ff fabf 	bl	8100bec <__aeabi_dcmplt>
 810166e:	4603      	mov	r3, r0
 8101670:	2b00      	cmp	r3, #0
 8101672:	d002      	beq.n	810167a <map+0x6a>
 8101674:	4b0a      	ldr	r3, [pc, #40]	@ (81016a0 <map+0x90>)
 8101676:	60fb      	str	r3, [r7, #12]
 8101678:	e00a      	b.n	8101690 <map+0x80>
	else if (duty>MAX_DUTY) duty = MAX_DUTY;
 810167a:	edd7 7a03 	vldr	s15, [r7, #12]
 810167e:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 8101682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8101686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810168a:	dd01      	ble.n	8101690 <map+0x80>
 810168c:	4b05      	ldr	r3, [pc, #20]	@ (81016a4 <map+0x94>)
 810168e:	60fb      	str	r3, [r7, #12]
	return duty;
 8101690:	68fb      	ldr	r3, [r7, #12]
 8101692:	ee07 3a90 	vmov	s15, r3
}
 8101696:	eeb0 0a67 	vmov.f32	s0, s15
 810169a:	3710      	adds	r7, #16
 810169c:	46bd      	mov	sp, r7
 810169e:	bd80      	pop	{r7, pc}
 81016a0:	40accccd 	.word	0x40accccd
 81016a4:	40d00000 	.word	0x40d00000
 81016a8:	99999998 	.word	0x99999998
 81016ac:	3ff19999 	.word	0x3ff19999
 81016b0:	00000000 	.word	0x00000000
 81016b4:	409e5400 	.word	0x409e5400
 81016b8:	00000000 	.word	0x00000000
 81016bc:	407b2000 	.word	0x407b2000
 81016c0:	9999999a 	.word	0x9999999a
 81016c4:	40159999 	.word	0x40159999

081016c8 <init_PID>:
#include <PID.h>

void init_PID(PID* p, float Kp, float Ki, float Kd, float dt, float u_max, float u_min){
 81016c8:	b480      	push	{r7}
 81016ca:	b089      	sub	sp, #36	@ 0x24
 81016cc:	af00      	add	r7, sp, #0
 81016ce:	61f8      	str	r0, [r7, #28]
 81016d0:	ed87 0a06 	vstr	s0, [r7, #24]
 81016d4:	edc7 0a05 	vstr	s1, [r7, #20]
 81016d8:	ed87 1a04 	vstr	s2, [r7, #16]
 81016dc:	edc7 1a03 	vstr	s3, [r7, #12]
 81016e0:	ed87 2a02 	vstr	s4, [r7, #8]
 81016e4:	edc7 2a01 	vstr	s5, [r7, #4]
	p->Kp=Kp;
 81016e8:	69fb      	ldr	r3, [r7, #28]
 81016ea:	69ba      	ldr	r2, [r7, #24]
 81016ec:	601a      	str	r2, [r3, #0]
	p->Ki=Ki;
 81016ee:	69fb      	ldr	r3, [r7, #28]
 81016f0:	697a      	ldr	r2, [r7, #20]
 81016f2:	605a      	str	r2, [r3, #4]
	p->Kd=Kd;
 81016f4:	69fb      	ldr	r3, [r7, #28]
 81016f6:	693a      	ldr	r2, [r7, #16]
 81016f8:	609a      	str	r2, [r3, #8]
	p->dt = dt;
 81016fa:	69fb      	ldr	r3, [r7, #28]
 81016fc:	68fa      	ldr	r2, [r7, #12]
 81016fe:	60da      	str	r2, [r3, #12]
	p->Iterm = 0;
 8101700:	69fb      	ldr	r3, [r7, #28]
 8101702:	f04f 0200 	mov.w	r2, #0
 8101706:	611a      	str	r2, [r3, #16]
	p->lastError = 0;
 8101708:	69fb      	ldr	r3, [r7, #28]
 810170a:	f04f 0200 	mov.w	r2, #0
 810170e:	615a      	str	r2, [r3, #20]
	p->u_max=u_max;
 8101710:	69fb      	ldr	r3, [r7, #28]
 8101712:	68ba      	ldr	r2, [r7, #8]
 8101714:	619a      	str	r2, [r3, #24]
	p->u_min=u_min;
 8101716:	69fb      	ldr	r3, [r7, #28]
 8101718:	687a      	ldr	r2, [r7, #4]
 810171a:	61da      	str	r2, [r3, #28]
}
 810171c:	bf00      	nop
 810171e:	3724      	adds	r7, #36	@ 0x24
 8101720:	46bd      	mov	sp, r7
 8101722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101726:	4770      	bx	lr

08101728 <PID_controller>:

float PID_controller(PID* p, float input, float setPoint){
 8101728:	b480      	push	{r7}
 810172a:	b08b      	sub	sp, #44	@ 0x2c
 810172c:	af00      	add	r7, sp, #0
 810172e:	60f8      	str	r0, [r7, #12]
 8101730:	ed87 0a02 	vstr	s0, [r7, #8]
 8101734:	edc7 0a01 	vstr	s1, [r7, #4]
    float u;
    float newIterm;

    float e = setPoint - input;
 8101738:	ed97 7a01 	vldr	s14, [r7, #4]
 810173c:	edd7 7a02 	vldr	s15, [r7, #8]
 8101740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101744:	edc7 7a08 	vstr	s15, [r7, #32]

    float Pterm = p->Kp * e;
 8101748:	68fb      	ldr	r3, [r7, #12]
 810174a:	edd3 7a00 	vldr	s15, [r3]
 810174e:	ed97 7a08 	vldr	s14, [r7, #32]
 8101752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101756:	edc7 7a07 	vstr	s15, [r7, #28]
    newIterm = p->Iterm + (p->Ki)*p->dt * p->lastError;
 810175a:	68fb      	ldr	r3, [r7, #12]
 810175c:	ed93 7a04 	vldr	s14, [r3, #16]
 8101760:	68fb      	ldr	r3, [r7, #12]
 8101762:	edd3 6a01 	vldr	s13, [r3, #4]
 8101766:	68fb      	ldr	r3, [r7, #12]
 8101768:	edd3 7a03 	vldr	s15, [r3, #12]
 810176c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8101770:	68fb      	ldr	r3, [r7, #12]
 8101772:	edd3 7a05 	vldr	s15, [r3, #20]
 8101776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810177a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810177e:	edc7 7a06 	vstr	s15, [r7, #24]
    float Dterm = (p->Kd/p->dt) * (e - p->lastError);
 8101782:	68fb      	ldr	r3, [r7, #12]
 8101784:	edd3 6a02 	vldr	s13, [r3, #8]
 8101788:	68fb      	ldr	r3, [r7, #12]
 810178a:	edd3 7a03 	vldr	s15, [r3, #12]
 810178e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101792:	68fb      	ldr	r3, [r7, #12]
 8101794:	edd3 7a05 	vldr	s15, [r3, #20]
 8101798:	edd7 6a08 	vldr	s13, [r7, #32]
 810179c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 81017a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81017a4:	edc7 7a05 	vstr	s15, [r7, #20]

    p->lastError = e;
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	6a3a      	ldr	r2, [r7, #32]
 81017ac:	615a      	str	r2, [r3, #20]

    u = Pterm + newIterm + Dterm;
 81017ae:	ed97 7a07 	vldr	s14, [r7, #28]
 81017b2:	edd7 7a06 	vldr	s15, [r7, #24]
 81017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 81017ba:	ed97 7a05 	vldr	s14, [r7, #20]
 81017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 81017c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    if(u > p->u_max){
 81017c6:	68fb      	ldr	r3, [r7, #12]
 81017c8:	edd3 7a06 	vldr	s15, [r3, #24]
 81017cc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 81017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81017d8:	dd03      	ble.n	81017e2 <PID_controller+0xba>
        u = p->u_max; // upper limit saturation
 81017da:	68fb      	ldr	r3, [r7, #12]
 81017dc:	699b      	ldr	r3, [r3, #24]
 81017de:	627b      	str	r3, [r7, #36]	@ 0x24
 81017e0:	e010      	b.n	8101804 <PID_controller+0xdc>
    } else if (u < p->u_min){
 81017e2:	68fb      	ldr	r3, [r7, #12]
 81017e4:	edd3 7a07 	vldr	s15, [r3, #28]
 81017e8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 81017ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81017f4:	d503      	bpl.n	81017fe <PID_controller+0xd6>
        u = p->u_min; // lower limit saturation
 81017f6:	68fb      	ldr	r3, [r7, #12]
 81017f8:	69db      	ldr	r3, [r3, #28]
 81017fa:	627b      	str	r3, [r7, #36]	@ 0x24
 81017fc:	e002      	b.n	8101804 <PID_controller+0xdc>
    } else {
        p->Iterm= newIterm; // clamping anti-windup
 81017fe:	68fb      	ldr	r3, [r7, #12]
 8101800:	69ba      	ldr	r2, [r7, #24]
 8101802:	611a      	str	r2, [r3, #16]
    }

    return u;
 8101804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8101806:	ee07 3a90 	vmov	s15, r3
}
 810180a:	eeb0 0a67 	vmov.f32	s0, s15
 810180e:	372c      	adds	r7, #44	@ 0x2c
 8101810:	46bd      	mov	sp, r7
 8101812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101816:	4770      	bx	lr

08101818 <bno055_setPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

// Imposta la pagina di registro del sensore BNO055
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8101818:	b580      	push	{r7, lr}
 810181a:	b082      	sub	sp, #8
 810181c:	af00      	add	r7, sp, #0
 810181e:	4603      	mov	r3, r0
 8101820:	71fb      	strb	r3, [r7, #7]
 8101822:	79fb      	ldrb	r3, [r7, #7]
 8101824:	4619      	mov	r1, r3
 8101826:	2007      	movs	r0, #7
 8101828:	f000 fa02 	bl	8101c30 <bno055_writeData>
 810182c:	bf00      	nop
 810182e:	3708      	adds	r7, #8
 8101830:	46bd      	mov	sp, r7
 8101832:	bd80      	pop	{r7, pc}

08101834 <bno055_setOperationMode>:
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

// Imposta la modalità operativa del sensore BNO055 e attende un ritardo in base alla modalità
void bno055_setOperationMode(bno055_opmode_t mode) {
 8101834:	b580      	push	{r7, lr}
 8101836:	b082      	sub	sp, #8
 8101838:	af00      	add	r7, sp, #0
 810183a:	4603      	mov	r3, r0
 810183c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 810183e:	79fb      	ldrb	r3, [r7, #7]
 8101840:	4619      	mov	r1, r3
 8101842:	203d      	movs	r0, #61	@ 0x3d
 8101844:	f000 f9f4 	bl	8101c30 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8101848:	79fb      	ldrb	r3, [r7, #7]
 810184a:	2b00      	cmp	r3, #0
 810184c:	d103      	bne.n	8101856 <bno055_setOperationMode+0x22>
    bno055_delay(100);
 810184e:	2064      	movs	r0, #100	@ 0x64
 8101850:	f000 f9e2 	bl	8101c18 <bno055_delay>
  } else {
    bno055_delay(80);
  }
}
 8101854:	e002      	b.n	810185c <bno055_setOperationMode+0x28>
    bno055_delay(80);
 8101856:	2050      	movs	r0, #80	@ 0x50
 8101858:	f000 f9de 	bl	8101c18 <bno055_delay>
}
 810185c:	bf00      	nop
 810185e:	3708      	adds	r7, #8
 8101860:	46bd      	mov	sp, r7
 8101862:	bd80      	pop	{r7, pc}

08101864 <bno055_setOperationModeConfig>:

// NON FUSION MODE

// Imposta la modalità operativa del sensore BNO055 su configurazione
void bno055_setOperationModeConfig() {
 8101864:	b580      	push	{r7, lr}
 8101866:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8101868:	2000      	movs	r0, #0
 810186a:	f7ff ffe3 	bl	8101834 <bno055_setOperationMode>
}
 810186e:	bf00      	nop
 8101870:	bd80      	pop	{r7, pc}

08101872 <bno055_setOperationModeNDOF>:
void bno055_setOperationModeNDOF_FMC_OFF(){
	bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF_FMC_OFF);
}

// Imposta la modalità operativa del sensore BNO055 su NDOF (Nine Degrees of Freedom)
void bno055_setOperationModeNDOF() {
 8101872:	b580      	push	{r7, lr}
 8101874:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101876:	200c      	movs	r0, #12
 8101878:	f7ff ffdc 	bl	8101834 <bno055_setOperationMode>
}
 810187c:	bf00      	nop
 810187e:	bd80      	pop	{r7, pc}

08101880 <bno055_reset>:
void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
// Disabilita l'uso di un cristallo esterno per il sensore BNO055
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

// Esegue una procedura di reset per il sensore BNO055
void bno055_reset() {
 8101880:	b580      	push	{r7, lr}
 8101882:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8101884:	2120      	movs	r1, #32
 8101886:	203f      	movs	r0, #63	@ 0x3f
 8101888:	f000 f9d2 	bl	8101c30 <bno055_writeData>
  bno055_delay(700);
 810188c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8101890:	f000 f9c2 	bl	8101c18 <bno055_delay>
}
 8101894:	bf00      	nop
 8101896:	bd80      	pop	{r7, pc}

08101898 <bno055_setup>:
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

// Inizializza il sensore BNO055 eseguendo una procedura di reset e configurazione iniziale
void bno055_setup() {
 8101898:	b580      	push	{r7, lr}
 810189a:	b082      	sub	sp, #8
 810189c:	af00      	add	r7, sp, #0
  bno055_reset();
 810189e:	f7ff ffef 	bl	8101880 <bno055_reset>

  uint8_t id = 0;
 81018a2:	2300      	movs	r3, #0
 81018a4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 81018a6:	1dfb      	adds	r3, r7, #7
 81018a8:	2201      	movs	r2, #1
 81018aa:	4619      	mov	r1, r3
 81018ac:	2000      	movs	r0, #0
 81018ae:	f000 fa99 	bl	8101de4 <bno055_readData>
  if (id != BNO055_ID) {
 81018b2:	79fb      	ldrb	r3, [r7, #7]
 81018b4:	2ba0      	cmp	r3, #160	@ 0xa0
 81018b6:	d004      	beq.n	81018c2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81018b8:	79fb      	ldrb	r3, [r7, #7]
 81018ba:	4619      	mov	r1, r3
 81018bc:	4809      	ldr	r0, [pc, #36]	@ (81018e4 <bno055_setup+0x4c>)
 81018be:	f008 ffd7 	bl	810a870 <iprintf>
  }
  bno055_setPage(0);
 81018c2:	2000      	movs	r0, #0
 81018c4:	f7ff ffa8 	bl	8101818 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81018c8:	2100      	movs	r1, #0
 81018ca:	203f      	movs	r0, #63	@ 0x3f
 81018cc:	f000 f9b0 	bl	8101c30 <bno055_writeData>

  // Seleziona la modalità di configurazione del BNO055
  bno055_setOperationModeConfig();
 81018d0:	f7ff ffc8 	bl	8101864 <bno055_setOperationModeConfig>
  bno055_delay(10);
 81018d4:	200a      	movs	r0, #10
 81018d6:	f000 f99f 	bl	8101c18 <bno055_delay>
}
 81018da:	bf00      	nop
 81018dc:	3708      	adds	r7, #8
 81018de:	46bd      	mov	sp, r7
 81018e0:	bd80      	pop	{r7, pc}
 81018e2:	bf00      	nop
 81018e4:	0810e3e8 	.word	0x0810e3e8

081018e8 <bno055_getVector>:

  bno055_setOperationMode(operationMode);
}

//Ottiene un vettore specifico dal sensore BNO055 con la possibilità di specificare la scala del vettore
bno055_vector_t bno055_getVector(uint8_t vec) {
 81018e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81018ec:	b09e      	sub	sp, #120	@ 0x78
 81018ee:	af00      	add	r7, sp, #0
 81018f0:	4603      	mov	r3, r0
 81018f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 81018f6:	2000      	movs	r0, #0
 81018f8:	f7ff ff8e 	bl	8101818 <bno055_setPage>
  uint8_t buffer[8];    // I quaternioni richiedono 8 byte

  if (vec == BNO055_VECTOR_QUATERNION)
 81018fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101900:	2b20      	cmp	r3, #32
 8101902:	d108      	bne.n	8101916 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8101904:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8101908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810190c:	2208      	movs	r2, #8
 810190e:	4618      	mov	r0, r3
 8101910:	f000 fa68 	bl	8101de4 <bno055_readData>
 8101914:	e007      	b.n	8101926 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8101916:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 810191a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810191e:	2206      	movs	r2, #6
 8101920:	4618      	mov	r0, r3
 8101922:	f000 fa5f 	bl	8101de4 <bno055_readData>

  double scale = 1;
 8101926:	f04f 0200 	mov.w	r2, #0
 810192a:	4b8b      	ldr	r3, [pc, #556]	@ (8101b58 <bno055_getVector+0x270>)
 810192c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8101930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101934:	2b0e      	cmp	r3, #14
 8101936:	d109      	bne.n	810194c <bno055_getVector+0x64>
    scale = magScale;
 8101938:	4b88      	ldr	r3, [pc, #544]	@ (8101b5c <bno055_getVector+0x274>)
 810193a:	881b      	ldrh	r3, [r3, #0]
 810193c:	4618      	mov	r0, r3
 810193e:	f7fe fe69 	bl	8100614 <__aeabi_ui2d>
 8101942:	4602      	mov	r2, r0
 8101944:	460b      	mov	r3, r1
 8101946:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 810194a:	e03e      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 810194c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101950:	2b08      	cmp	r3, #8
 8101952:	d007      	beq.n	8101964 <bno055_getVector+0x7c>
 8101954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101958:	2b28      	cmp	r3, #40	@ 0x28
 810195a:	d003      	beq.n	8101964 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 810195c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101960:	2b2e      	cmp	r3, #46	@ 0x2e
 8101962:	d109      	bne.n	8101978 <bno055_getVector+0x90>
    scale = accelScale;
 8101964:	4b7e      	ldr	r3, [pc, #504]	@ (8101b60 <bno055_getVector+0x278>)
 8101966:	881b      	ldrh	r3, [r3, #0]
 8101968:	4618      	mov	r0, r3
 810196a:	f7fe fe53 	bl	8100614 <__aeabi_ui2d>
 810196e:	4602      	mov	r2, r0
 8101970:	460b      	mov	r3, r1
 8101972:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101976:	e028      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8101978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810197c:	2b14      	cmp	r3, #20
 810197e:	d109      	bne.n	8101994 <bno055_getVector+0xac>
    scale = angularRateScale;
 8101980:	4b78      	ldr	r3, [pc, #480]	@ (8101b64 <bno055_getVector+0x27c>)
 8101982:	881b      	ldrh	r3, [r3, #0]
 8101984:	4618      	mov	r0, r3
 8101986:	f7fe fe45 	bl	8100614 <__aeabi_ui2d>
 810198a:	4602      	mov	r2, r0
 810198c:	460b      	mov	r3, r1
 810198e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8101992:	e01a      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8101994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101998:	2b1a      	cmp	r3, #26
 810199a:	d109      	bne.n	81019b0 <bno055_getVector+0xc8>
    scale = eulerScale;
 810199c:	4b72      	ldr	r3, [pc, #456]	@ (8101b68 <bno055_getVector+0x280>)
 810199e:	881b      	ldrh	r3, [r3, #0]
 81019a0:	4618      	mov	r0, r3
 81019a2:	f7fe fe37 	bl	8100614 <__aeabi_ui2d>
 81019a6:	4602      	mov	r2, r0
 81019a8:	460b      	mov	r3, r1
 81019aa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 81019ae:	e00c      	b.n	81019ca <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 81019b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81019b4:	2b20      	cmp	r3, #32
 81019b6:	d108      	bne.n	81019ca <bno055_getVector+0xe2>
    scale = quaScale;
 81019b8:	4b6c      	ldr	r3, [pc, #432]	@ (8101b6c <bno055_getVector+0x284>)
 81019ba:	881b      	ldrh	r3, [r3, #0]
 81019bc:	4618      	mov	r0, r3
 81019be:	f7fe fe29 	bl	8100614 <__aeabi_ui2d>
 81019c2:	4602      	mov	r2, r0
 81019c4:	460b      	mov	r3, r1
 81019c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81019ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81019ce:	2220      	movs	r2, #32
 81019d0:	2100      	movs	r1, #0
 81019d2:	4618      	mov	r0, r3
 81019d4:	f009 f8b4 	bl	810ab40 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 81019d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81019dc:	2b20      	cmp	r3, #32
 81019de:	d150      	bne.n	8101a82 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 81019e0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 81019e4:	021b      	lsls	r3, r3, #8
 81019e6:	b21a      	sxth	r2, r3
 81019e8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 81019ec:	b21b      	sxth	r3, r3
 81019ee:	4313      	orrs	r3, r2
 81019f0:	b21b      	sxth	r3, r3
 81019f2:	4618      	mov	r0, r3
 81019f4:	f7fe fe1e 	bl	8100634 <__aeabi_i2d>
 81019f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 81019fc:	f7fe ffae 	bl	810095c <__aeabi_ddiv>
 8101a00:	4602      	mov	r2, r0
 8101a02:	460b      	mov	r3, r1
 8101a04:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101a08:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101a0c:	021b      	lsls	r3, r3, #8
 8101a0e:	b21a      	sxth	r2, r3
 8101a10:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101a14:	b21b      	sxth	r3, r3
 8101a16:	4313      	orrs	r3, r2
 8101a18:	b21b      	sxth	r3, r3
 8101a1a:	4618      	mov	r0, r3
 8101a1c:	f7fe fe0a 	bl	8100634 <__aeabi_i2d>
 8101a20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a24:	f7fe ff9a 	bl	810095c <__aeabi_ddiv>
 8101a28:	4602      	mov	r2, r0
 8101a2a:	460b      	mov	r3, r1
 8101a2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101a30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101a34:	021b      	lsls	r3, r3, #8
 8101a36:	b21a      	sxth	r2, r3
 8101a38:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101a3c:	b21b      	sxth	r3, r3
 8101a3e:	4313      	orrs	r3, r2
 8101a40:	b21b      	sxth	r3, r3
 8101a42:	4618      	mov	r0, r3
 8101a44:	f7fe fdf6 	bl	8100634 <__aeabi_i2d>
 8101a48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a4c:	f7fe ff86 	bl	810095c <__aeabi_ddiv>
 8101a50:	4602      	mov	r2, r0
 8101a52:	460b      	mov	r3, r1
 8101a54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8101a58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8101a5c:	021b      	lsls	r3, r3, #8
 8101a5e:	b21a      	sxth	r2, r3
 8101a60:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8101a64:	b21b      	sxth	r3, r3
 8101a66:	4313      	orrs	r3, r2
 8101a68:	b21b      	sxth	r3, r3
 8101a6a:	4618      	mov	r0, r3
 8101a6c:	f7fe fde2 	bl	8100634 <__aeabi_i2d>
 8101a70:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a74:	f7fe ff72 	bl	810095c <__aeabi_ddiv>
 8101a78:	4602      	mov	r2, r0
 8101a7a:	460b      	mov	r3, r1
 8101a7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8101a80:	e03b      	b.n	8101afa <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8101a82:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8101a86:	021b      	lsls	r3, r3, #8
 8101a88:	b21a      	sxth	r2, r3
 8101a8a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8101a8e:	b21b      	sxth	r3, r3
 8101a90:	4313      	orrs	r3, r2
 8101a92:	b21b      	sxth	r3, r3
 8101a94:	4618      	mov	r0, r3
 8101a96:	f7fe fdcd 	bl	8100634 <__aeabi_i2d>
 8101a9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101a9e:	f7fe ff5d 	bl	810095c <__aeabi_ddiv>
 8101aa2:	4602      	mov	r2, r0
 8101aa4:	460b      	mov	r3, r1
 8101aa6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8101aaa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8101aae:	021b      	lsls	r3, r3, #8
 8101ab0:	b21a      	sxth	r2, r3
 8101ab2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8101ab6:	b21b      	sxth	r3, r3
 8101ab8:	4313      	orrs	r3, r2
 8101aba:	b21b      	sxth	r3, r3
 8101abc:	4618      	mov	r0, r3
 8101abe:	f7fe fdb9 	bl	8100634 <__aeabi_i2d>
 8101ac2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101ac6:	f7fe ff49 	bl	810095c <__aeabi_ddiv>
 8101aca:	4602      	mov	r2, r0
 8101acc:	460b      	mov	r3, r1
 8101ace:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8101ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8101ad6:	021b      	lsls	r3, r3, #8
 8101ad8:	b21a      	sxth	r2, r3
 8101ada:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8101ade:	b21b      	sxth	r3, r3
 8101ae0:	4313      	orrs	r3, r2
 8101ae2:	b21b      	sxth	r3, r3
 8101ae4:	4618      	mov	r0, r3
 8101ae6:	f7fe fda5 	bl	8100634 <__aeabi_i2d>
 8101aea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8101aee:	f7fe ff35 	bl	810095c <__aeabi_ddiv>
 8101af2:	4602      	mov	r2, r0
 8101af4:	460b      	mov	r3, r1
 8101af6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8101afa:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8101afe:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8101b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101b06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101b0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101b0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8101b12:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8101b16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8101b1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8101b1e:	ec49 8b14 	vmov	d4, r8, r9
 8101b22:	ec45 4b15 	vmov	d5, r4, r5
 8101b26:	ec41 0b16 	vmov	d6, r0, r1
 8101b2a:	ec43 2b17 	vmov	d7, r2, r3
}
 8101b2e:	eeb0 0a44 	vmov.f32	s0, s8
 8101b32:	eef0 0a64 	vmov.f32	s1, s9
 8101b36:	eeb0 1a45 	vmov.f32	s2, s10
 8101b3a:	eef0 1a65 	vmov.f32	s3, s11
 8101b3e:	eeb0 2a46 	vmov.f32	s4, s12
 8101b42:	eef0 2a66 	vmov.f32	s5, s13
 8101b46:	eeb0 3a47 	vmov.f32	s6, s14
 8101b4a:	eef0 3a67 	vmov.f32	s7, s15
 8101b4e:	3778      	adds	r7, #120	@ 0x78
 8101b50:	46bd      	mov	sp, r7
 8101b52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101b56:	bf00      	nop
 8101b58:	3ff00000 	.word	0x3ff00000
 8101b5c:	1000000e 	.word	0x1000000e
 8101b60:	10000008 	.word	0x10000008
 8101b64:	1000000a 	.word	0x1000000a
 8101b68:	1000000c 	.word	0x1000000c
 8101b6c:	10000010 	.word	0x10000010

08101b70 <bno055_getVectorEuler>:
// Ottiene un vettore giroscopico dal sensore BNO055
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
// Ottiene un vettore di angoli di Eulero dal sensore BNO055
bno055_vector_t bno055_getVectorEuler() {
 8101b70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101b74:	b090      	sub	sp, #64	@ 0x40
 8101b76:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8101b78:	201a      	movs	r0, #26
 8101b7a:	f7ff feb5 	bl	81018e8 <bno055_getVector>
 8101b7e:	eeb0 4a40 	vmov.f32	s8, s0
 8101b82:	eef0 4a60 	vmov.f32	s9, s1
 8101b86:	eeb0 5a41 	vmov.f32	s10, s2
 8101b8a:	eef0 5a61 	vmov.f32	s11, s3
 8101b8e:	eeb0 6a42 	vmov.f32	s12, s4
 8101b92:	eef0 6a62 	vmov.f32	s13, s5
 8101b96:	eeb0 7a43 	vmov.f32	s14, s6
 8101b9a:	eef0 7a63 	vmov.f32	s15, s7
 8101b9e:	ed87 4b08 	vstr	d4, [r7, #32]
 8101ba2:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8101ba6:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8101baa:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8101bae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8101bb2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8101bb6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8101bba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8101bbe:	ec49 8b14 	vmov	d4, r8, r9
 8101bc2:	ec45 4b15 	vmov	d5, r4, r5
 8101bc6:	ec41 0b16 	vmov	d6, r0, r1
 8101bca:	ec43 2b17 	vmov	d7, r2, r3
}
 8101bce:	eeb0 0a44 	vmov.f32	s0, s8
 8101bd2:	eef0 0a64 	vmov.f32	s1, s9
 8101bd6:	eeb0 1a45 	vmov.f32	s2, s10
 8101bda:	eef0 1a65 	vmov.f32	s3, s11
 8101bde:	eeb0 2a46 	vmov.f32	s4, s12
 8101be2:	eef0 2a66 	vmov.f32	s5, s13
 8101be6:	eeb0 3a47 	vmov.f32	s6, s14
 8101bea:	eef0 3a67 	vmov.f32	s7, s15
 8101bee:	3740      	adds	r7, #64	@ 0x40
 8101bf0:	46bd      	mov	sp, r7
 8101bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08101bf8 <bno055_assignI2C>:
  uint8_t axisMapSign = (axis.x_sign << 2) | (axis.y_sign << 1) | (axis.z_sign);
  bno055_writeData(BNO055_AXIS_MAP_CONFIG, axisRemap);
  bno055_writeData(BNO055_AXIS_MAP_SIGN, axisMapSign);
}

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8101bf8:	b480      	push	{r7}
 8101bfa:	b083      	sub	sp, #12
 8101bfc:	af00      	add	r7, sp, #0
 8101bfe:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8101c00:	4a04      	ldr	r2, [pc, #16]	@ (8101c14 <bno055_assignI2C+0x1c>)
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	6013      	str	r3, [r2, #0]
}
 8101c06:	bf00      	nop
 8101c08:	370c      	adds	r7, #12
 8101c0a:	46bd      	mov	sp, r7
 8101c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c10:	4770      	bx	lr
 8101c12:	bf00      	nop
 8101c14:	10000264 	.word	0x10000264

08101c18 <bno055_delay>:

void bno055_delay(int time) {
 8101c18:	b580      	push	{r7, lr}
 8101c1a:	b082      	sub	sp, #8
 8101c1c:	af00      	add	r7, sp, #0
 8101c1e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	4618      	mov	r0, r3
 8101c24:	f001 fbae 	bl	8103384 <HAL_Delay>
#endif
}
 8101c28:	bf00      	nop
 8101c2a:	3708      	adds	r7, #8
 8101c2c:	46bd      	mov	sp, r7
 8101c2e:	bd80      	pop	{r7, pc}

08101c30 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8101c30:	b580      	push	{r7, lr}
 8101c32:	b088      	sub	sp, #32
 8101c34:	af02      	add	r7, sp, #8
 8101c36:	4603      	mov	r3, r0
 8101c38:	460a      	mov	r2, r1
 8101c3a:	71fb      	strb	r3, [r7, #7]
 8101c3c:	4613      	mov	r3, r2
 8101c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8101c40:	79fb      	ldrb	r3, [r7, #7]
 8101c42:	733b      	strb	r3, [r7, #12]
 8101c44:	79bb      	ldrb	r3, [r7, #6]
 8101c46:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8101c48:	4b53      	ldr	r3, [pc, #332]	@ (8101d98 <bno055_writeData+0x168>)
 8101c4a:	6818      	ldr	r0, [r3, #0]
 8101c4c:	f107 020c 	add.w	r2, r7, #12
 8101c50:	230a      	movs	r3, #10
 8101c52:	9300      	str	r3, [sp, #0]
 8101c54:	2302      	movs	r3, #2
 8101c56:	2150      	movs	r1, #80	@ 0x50
 8101c58:	f001 ff3a 	bl	8103ad0 <HAL_I2C_Master_Transmit>
 8101c5c:	4603      	mov	r3, r0
 8101c5e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 8101c60:	7dfb      	ldrb	r3, [r7, #23]
 8101c62:	2b00      	cmp	r3, #0
 8101c64:	f000 8092 	beq.w	8101d8c <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 8101c68:	7dfb      	ldrb	r3, [r7, #23]
 8101c6a:	2b01      	cmp	r3, #1
 8101c6c:	d103      	bne.n	8101c76 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101c6e:	484b      	ldr	r0, [pc, #300]	@ (8101d9c <bno055_writeData+0x16c>)
 8101c70:	f008 fe66 	bl	810a940 <puts>
 8101c74:	e012      	b.n	8101c9c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8101c76:	7dfb      	ldrb	r3, [r7, #23]
 8101c78:	2b03      	cmp	r3, #3
 8101c7a:	d103      	bne.n	8101c84 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101c7c:	4848      	ldr	r0, [pc, #288]	@ (8101da0 <bno055_writeData+0x170>)
 8101c7e:	f008 fe5f 	bl	810a940 <puts>
 8101c82:	e00b      	b.n	8101c9c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8101c84:	7dfb      	ldrb	r3, [r7, #23]
 8101c86:	2b02      	cmp	r3, #2
 8101c88:	d103      	bne.n	8101c92 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101c8a:	4846      	ldr	r0, [pc, #280]	@ (8101da4 <bno055_writeData+0x174>)
 8101c8c:	f008 fe58 	bl	810a940 <puts>
 8101c90:	e004      	b.n	8101c9c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8101c92:	7dfb      	ldrb	r3, [r7, #23]
 8101c94:	4619      	mov	r1, r3
 8101c96:	4844      	ldr	r0, [pc, #272]	@ (8101da8 <bno055_writeData+0x178>)
 8101c98:	f008 fdea 	bl	810a870 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8101c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8101d98 <bno055_writeData+0x168>)
 8101c9e:	681b      	ldr	r3, [r3, #0]
 8101ca0:	4618      	mov	r0, r3
 8101ca2:	f002 f931 	bl	8103f08 <HAL_I2C_GetError>
 8101ca6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8101ca8:	693b      	ldr	r3, [r7, #16]
 8101caa:	2b00      	cmp	r3, #0
 8101cac:	d070      	beq.n	8101d90 <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8101cae:	693b      	ldr	r3, [r7, #16]
 8101cb0:	2b01      	cmp	r3, #1
 8101cb2:	d103      	bne.n	8101cbc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8101cb4:	483d      	ldr	r0, [pc, #244]	@ (8101dac <bno055_writeData+0x17c>)
 8101cb6:	f008 fe43 	bl	810a940 <puts>
 8101cba:	e021      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8101cbc:	693b      	ldr	r3, [r7, #16]
 8101cbe:	2b02      	cmp	r3, #2
 8101cc0:	d103      	bne.n	8101cca <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8101cc2:	483b      	ldr	r0, [pc, #236]	@ (8101db0 <bno055_writeData+0x180>)
 8101cc4:	f008 fe3c 	bl	810a940 <puts>
 8101cc8:	e01a      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8101cca:	693b      	ldr	r3, [r7, #16]
 8101ccc:	2b04      	cmp	r3, #4
 8101cce:	d103      	bne.n	8101cd8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8101cd0:	4838      	ldr	r0, [pc, #224]	@ (8101db4 <bno055_writeData+0x184>)
 8101cd2:	f008 fe35 	bl	810a940 <puts>
 8101cd6:	e013      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8101cd8:	693b      	ldr	r3, [r7, #16]
 8101cda:	2b08      	cmp	r3, #8
 8101cdc:	d103      	bne.n	8101ce6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8101cde:	4836      	ldr	r0, [pc, #216]	@ (8101db8 <bno055_writeData+0x188>)
 8101ce0:	f008 fe2e 	bl	810a940 <puts>
 8101ce4:	e00c      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8101ce6:	693b      	ldr	r3, [r7, #16]
 8101ce8:	2b10      	cmp	r3, #16
 8101cea:	d103      	bne.n	8101cf4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8101cec:	4833      	ldr	r0, [pc, #204]	@ (8101dbc <bno055_writeData+0x18c>)
 8101cee:	f008 fe27 	bl	810a940 <puts>
 8101cf2:	e005      	b.n	8101d00 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8101cf4:	693b      	ldr	r3, [r7, #16]
 8101cf6:	2b20      	cmp	r3, #32
 8101cf8:	d102      	bne.n	8101d00 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8101cfa:	4831      	ldr	r0, [pc, #196]	@ (8101dc0 <bno055_writeData+0x190>)
 8101cfc:	f008 fe20 	bl	810a940 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8101d00:	4b25      	ldr	r3, [pc, #148]	@ (8101d98 <bno055_writeData+0x168>)
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	4618      	mov	r0, r3
 8101d06:	f002 f8f1 	bl	8103eec <HAL_I2C_GetState>
 8101d0a:	4603      	mov	r3, r0
 8101d0c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8101d0e:	7bfb      	ldrb	r3, [r7, #15]
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	d103      	bne.n	8101d1c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101d14:	482b      	ldr	r0, [pc, #172]	@ (8101dc4 <bno055_writeData+0x194>)
 8101d16:	f008 fe13 	bl	810a940 <puts>
 8101d1a:	e03a      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 8101d1c:	7bfb      	ldrb	r3, [r7, #15]
 8101d1e:	2b20      	cmp	r3, #32
 8101d20:	d103      	bne.n	8101d2a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8101d22:	4828      	ldr	r0, [pc, #160]	@ (8101dc4 <bno055_writeData+0x194>)
 8101d24:	f008 fe0c 	bl	810a940 <puts>
 8101d28:	e033      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8101d2a:	7bfb      	ldrb	r3, [r7, #15]
 8101d2c:	2b24      	cmp	r3, #36	@ 0x24
 8101d2e:	d103      	bne.n	8101d38 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8101d30:	4825      	ldr	r0, [pc, #148]	@ (8101dc8 <bno055_writeData+0x198>)
 8101d32:	f008 fe05 	bl	810a940 <puts>
 8101d36:	e02c      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8101d38:	7bfb      	ldrb	r3, [r7, #15]
 8101d3a:	2b21      	cmp	r3, #33	@ 0x21
 8101d3c:	d103      	bne.n	8101d46 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8101d3e:	4823      	ldr	r0, [pc, #140]	@ (8101dcc <bno055_writeData+0x19c>)
 8101d40:	f008 fdfe 	bl	810a940 <puts>
 8101d44:	e025      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8101d46:	7bfb      	ldrb	r3, [r7, #15]
 8101d48:	2b22      	cmp	r3, #34	@ 0x22
 8101d4a:	d103      	bne.n	8101d54 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8101d4c:	4820      	ldr	r0, [pc, #128]	@ (8101dd0 <bno055_writeData+0x1a0>)
 8101d4e:	f008 fdf7 	bl	810a940 <puts>
 8101d52:	e01e      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8101d54:	7bfb      	ldrb	r3, [r7, #15]
 8101d56:	2b28      	cmp	r3, #40	@ 0x28
 8101d58:	d103      	bne.n	8101d62 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8101d5a:	481e      	ldr	r0, [pc, #120]	@ (8101dd4 <bno055_writeData+0x1a4>)
 8101d5c:	f008 fdf0 	bl	810a940 <puts>
 8101d60:	e017      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8101d62:	7bfb      	ldrb	r3, [r7, #15]
 8101d64:	2b29      	cmp	r3, #41	@ 0x29
 8101d66:	d103      	bne.n	8101d70 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8101d68:	481b      	ldr	r0, [pc, #108]	@ (8101dd8 <bno055_writeData+0x1a8>)
 8101d6a:	f008 fde9 	bl	810a940 <puts>
 8101d6e:	e010      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8101d70:	7bfb      	ldrb	r3, [r7, #15]
 8101d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8101d74:	d103      	bne.n	8101d7e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8101d76:	4819      	ldr	r0, [pc, #100]	@ (8101ddc <bno055_writeData+0x1ac>)
 8101d78:	f008 fde2 	bl	810a940 <puts>
 8101d7c:	e009      	b.n	8101d92 <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8101d7e:	7bfb      	ldrb	r3, [r7, #15]
 8101d80:	2b60      	cmp	r3, #96	@ 0x60
 8101d82:	d106      	bne.n	8101d92 <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8101d84:	4816      	ldr	r0, [pc, #88]	@ (8101de0 <bno055_writeData+0x1b0>)
 8101d86:	f008 fddb 	bl	810a940 <puts>
 8101d8a:	e002      	b.n	8101d92 <bno055_writeData+0x162>
    return;
 8101d8c:	bf00      	nop
 8101d8e:	e000      	b.n	8101d92 <bno055_writeData+0x162>
    return;
 8101d90:	bf00      	nop
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
}
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8101d92:	3718      	adds	r7, #24
 8101d94:	46bd      	mov	sp, r7
 8101d96:	bd80      	pop	{r7, pc}
 8101d98:	10000264 	.word	0x10000264
 8101d9c:	0810e488 	.word	0x0810e488
 8101da0:	0810e4ac 	.word	0x0810e4ac
 8101da4:	0810e4d4 	.word	0x0810e4d4
 8101da8:	0810e4f8 	.word	0x0810e4f8
 8101dac:	0810e510 	.word	0x0810e510
 8101db0:	0810e524 	.word	0x0810e524
 8101db4:	0810e538 	.word	0x0810e538
 8101db8:	0810e54c 	.word	0x0810e54c
 8101dbc:	0810e560 	.word	0x0810e560
 8101dc0:	0810e574 	.word	0x0810e574
 8101dc4:	0810e58c 	.word	0x0810e58c
 8101dc8:	0810e5a4 	.word	0x0810e5a4
 8101dcc:	0810e5b8 	.word	0x0810e5b8
 8101dd0:	0810e5d0 	.word	0x0810e5d0
 8101dd4:	0810e5e8 	.word	0x0810e5e8
 8101dd8:	0810e600 	.word	0x0810e600
 8101ddc:	0810e620 	.word	0x0810e620
 8101de0:	0810e640 	.word	0x0810e640

08101de4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8101de4:	b580      	push	{r7, lr}
 8101de6:	b086      	sub	sp, #24
 8101de8:	af02      	add	r7, sp, #8
 8101dea:	4603      	mov	r3, r0
 8101dec:	6039      	str	r1, [r7, #0]
 8101dee:	71fb      	strb	r3, [r7, #7]
 8101df0:	4613      	mov	r3, r2
 8101df2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8101df4:	4b1c      	ldr	r3, [pc, #112]	@ (8101e68 <bno055_readData+0x84>)
 8101df6:	6818      	ldr	r0, [r3, #0]
 8101df8:	1dfa      	adds	r2, r7, #7
 8101dfa:	2364      	movs	r3, #100	@ 0x64
 8101dfc:	9300      	str	r3, [sp, #0]
 8101dfe:	2301      	movs	r3, #1
 8101e00:	2150      	movs	r1, #80	@ 0x50
 8101e02:	f001 fe65 	bl	8103ad0 <HAL_I2C_Master_Transmit>
 8101e06:	4603      	mov	r3, r0
 8101e08:	73fb      	strb	r3, [r7, #15]
                          100);
	ret = HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8101e0a:	4b17      	ldr	r3, [pc, #92]	@ (8101e68 <bno055_readData+0x84>)
 8101e0c:	6818      	ldr	r0, [r3, #0]
 8101e0e:	79bb      	ldrb	r3, [r7, #6]
 8101e10:	b29b      	uxth	r3, r3
 8101e12:	2264      	movs	r2, #100	@ 0x64
 8101e14:	9200      	str	r2, [sp, #0]
 8101e16:	683a      	ldr	r2, [r7, #0]
 8101e18:	2150      	movs	r1, #80	@ 0x50
 8101e1a:	f001 ff71 	bl	8103d00 <HAL_I2C_Master_Receive>
 8101e1e:	4603      	mov	r3, r0
 8101e20:	73fb      	strb	r3, [r7, #15]
                         100);
	  if (ret == HAL_OK) {
 8101e22:	7bfb      	ldrb	r3, [r7, #15]
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	d01a      	beq.n	8101e5e <bno055_readData+0x7a>
	    return;
	  }

	  if (ret == HAL_ERROR) {
 8101e28:	7bfb      	ldrb	r3, [r7, #15]
 8101e2a:	2b01      	cmp	r3, #1
 8101e2c:	d103      	bne.n	8101e36 <bno055_readData+0x52>
	    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8101e2e:	480f      	ldr	r0, [pc, #60]	@ (8101e6c <bno055_readData+0x88>)
 8101e30:	f008 fd86 	bl	810a940 <puts>
 8101e34:	e014      	b.n	8101e60 <bno055_readData+0x7c>
	  } else if (ret == HAL_TIMEOUT) {
 8101e36:	7bfb      	ldrb	r3, [r7, #15]
 8101e38:	2b03      	cmp	r3, #3
 8101e3a:	d103      	bne.n	8101e44 <bno055_readData+0x60>
	    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8101e3c:	480c      	ldr	r0, [pc, #48]	@ (8101e70 <bno055_readData+0x8c>)
 8101e3e:	f008 fd7f 	bl	810a940 <puts>
 8101e42:	e00d      	b.n	8101e60 <bno055_readData+0x7c>
	  } else if (ret == HAL_BUSY) {
 8101e44:	7bfb      	ldrb	r3, [r7, #15]
 8101e46:	2b02      	cmp	r3, #2
 8101e48:	d103      	bne.n	8101e52 <bno055_readData+0x6e>
	    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8101e4a:	480a      	ldr	r0, [pc, #40]	@ (8101e74 <bno055_readData+0x90>)
 8101e4c:	f008 fd78 	bl	810a940 <puts>
 8101e50:	e006      	b.n	8101e60 <bno055_readData+0x7c>
	  } else {
	    printf("Unknown status data %d", ret);
 8101e52:	7bfb      	ldrb	r3, [r7, #15]
 8101e54:	4619      	mov	r1, r3
 8101e56:	4808      	ldr	r0, [pc, #32]	@ (8101e78 <bno055_readData+0x94>)
 8101e58:	f008 fd0a 	bl	810a870 <iprintf>
 8101e5c:	e000      	b.n	8101e60 <bno055_readData+0x7c>
	    return;
 8101e5e:	bf00      	nop
	  }
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8101e60:	3710      	adds	r7, #16
 8101e62:	46bd      	mov	sp, r7
 8101e64:	bd80      	pop	{r7, pc}
 8101e66:	bf00      	nop
 8101e68:	10000264 	.word	0x10000264
 8101e6c:	0810e488 	.word	0x0810e488
 8101e70:	0810e4ac 	.word	0x0810e4ac
 8101e74:	0810e4d4 	.word	0x0810e4d4
 8101e78:	0810e4f8 	.word	0x0810e4f8

08101e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e7c:	b5b0      	push	{r4, r5, r7, lr}
 8101e7e:	b082      	sub	sp, #8
 8101e80:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e82:	4b81      	ldr	r3, [pc, #516]	@ (8102088 <main+0x20c>)
 8101e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e88:	4a7f      	ldr	r2, [pc, #508]	@ (8102088 <main+0x20c>)
 8101e8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101e92:	4b7d      	ldr	r3, [pc, #500]	@ (8102088 <main+0x20c>)
 8101e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101e9c:	607b      	str	r3, [r7, #4]
 8101e9e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101ea0:	2001      	movs	r0, #1
 8101ea2:	f001 fd67 	bl	8103974 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101ea6:	f002 fbf3 	bl	8104690 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101eaa:	2201      	movs	r2, #1
 8101eac:	2102      	movs	r1, #2
 8101eae:	2000      	movs	r0, #0
 8101eb0:	f002 fb74 	bl	810459c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101eb4:	4b75      	ldr	r3, [pc, #468]	@ (810208c <main+0x210>)
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	091b      	lsrs	r3, r3, #4
 8101eba:	f003 030f 	and.w	r3, r3, #15
 8101ebe:	2b07      	cmp	r3, #7
 8101ec0:	d108      	bne.n	8101ed4 <main+0x58>
 8101ec2:	4b73      	ldr	r3, [pc, #460]	@ (8102090 <main+0x214>)
 8101ec4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101ec8:	4a71      	ldr	r2, [pc, #452]	@ (8102090 <main+0x214>)
 8101eca:	f043 0301 	orr.w	r3, r3, #1
 8101ece:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101ed2:	e007      	b.n	8101ee4 <main+0x68>
 8101ed4:	4b6e      	ldr	r3, [pc, #440]	@ (8102090 <main+0x214>)
 8101ed6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101eda:	4a6d      	ldr	r2, [pc, #436]	@ (8102090 <main+0x214>)
 8101edc:	f043 0301 	orr.w	r3, r3, #1
 8101ee0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101ee4:	f001 f99a 	bl	810321c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101ee8:	f000 fb12 	bl	8102510 <MX_GPIO_Init>
  MX_TIM1_Init();
 8101eec:	f000 f93a 	bl	8102164 <MX_TIM1_Init>
  MX_I2C1_Init();
 8101ef0:	f000 f8f8 	bl	81020e4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8101ef4:	f000 f98a 	bl	810220c <MX_TIM3_Init>
  MX_TIM5_Init();
 8101ef8:	f000 fa20 	bl	810233c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 8101efc:	f000 fabc 	bl	8102478 <MX_USART3_UART_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8101f00:	4864      	ldr	r0, [pc, #400]	@ (8102094 <main+0x218>)
 8101f02:	f004 fc2f 	bl	8106764 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8101f06:	2100      	movs	r1, #0
 8101f08:	4863      	ldr	r0, [pc, #396]	@ (8102098 <main+0x21c>)
 8101f0a:	f004 fd05 	bl	8106918 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8101f0e:	2104      	movs	r1, #4
 8101f10:	4861      	ldr	r0, [pc, #388]	@ (8102098 <main+0x21c>)
 8101f12:	f004 fd01 	bl	8106918 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8101f16:	2108      	movs	r1, #8
 8101f18:	485f      	ldr	r0, [pc, #380]	@ (8102098 <main+0x21c>)
 8101f1a:	f004 fcfd 	bl	8106918 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8101f1e:	210c      	movs	r1, #12
 8101f20:	485d      	ldr	r0, [pc, #372]	@ (8102098 <main+0x21c>)
 8101f22:	f004 fcf9 	bl	8106918 <HAL_TIM_PWM_Start>
  TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101f26:	4b5d      	ldr	r3, [pc, #372]	@ (810209c <main+0x220>)
 8101f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101f2a:	4613      	mov	r3, r2
 8101f2c:	009b      	lsls	r3, r3, #2
 8101f2e:	4413      	add	r3, r2
 8101f30:	4a5a      	ldr	r2, [pc, #360]	@ (810209c <main+0x220>)
 8101f32:	495b      	ldr	r1, [pc, #364]	@ (81020a0 <main+0x224>)
 8101f34:	fba1 1303 	umull	r1, r3, r1, r3
 8101f38:	095b      	lsrs	r3, r3, #5
 8101f3a:	6353      	str	r3, [r2, #52]	@ 0x34
  	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101f3c:	4b57      	ldr	r3, [pc, #348]	@ (810209c <main+0x220>)
 8101f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101f40:	4613      	mov	r3, r2
 8101f42:	009b      	lsls	r3, r3, #2
 8101f44:	4413      	add	r3, r2
 8101f46:	4a55      	ldr	r2, [pc, #340]	@ (810209c <main+0x220>)
 8101f48:	4955      	ldr	r1, [pc, #340]	@ (81020a0 <main+0x224>)
 8101f4a:	fba1 1303 	umull	r1, r3, r1, r3
 8101f4e:	095b      	lsrs	r3, r3, #5
 8101f50:	6393      	str	r3, [r2, #56]	@ 0x38
  	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101f52:	4b52      	ldr	r3, [pc, #328]	@ (810209c <main+0x220>)
 8101f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101f56:	4613      	mov	r3, r2
 8101f58:	009b      	lsls	r3, r3, #2
 8101f5a:	4413      	add	r3, r2
 8101f5c:	4a4f      	ldr	r2, [pc, #316]	@ (810209c <main+0x220>)
 8101f5e:	4950      	ldr	r1, [pc, #320]	@ (81020a0 <main+0x224>)
 8101f60:	fba1 1303 	umull	r1, r3, r1, r3
 8101f64:	095b      	lsrs	r3, r3, #5
 8101f66:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 8101f68:	4b4c      	ldr	r3, [pc, #304]	@ (810209c <main+0x220>)
 8101f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8101f6c:	4613      	mov	r3, r2
 8101f6e:	009b      	lsls	r3, r3, #2
 8101f70:	4413      	add	r3, r2
 8101f72:	4a4a      	ldr	r2, [pc, #296]	@ (810209c <main+0x220>)
 8101f74:	494a      	ldr	r1, [pc, #296]	@ (81020a0 <main+0x224>)
 8101f76:	fba1 1303 	umull	r1, r3, r1, r3
 8101f7a:	095b      	lsrs	r3, r3, #5
 8101f7c:	6413      	str	r3, [r2, #64]	@ 0x40
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);   // main channel
 8101f7e:	2100      	movs	r1, #0
 8101f80:	4848      	ldr	r0, [pc, #288]	@ (81020a4 <main+0x228>)
 8101f82:	f004 ff3d 	bl	8106e00 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);   // indirect channel
 8101f86:	2104      	movs	r1, #4
 8101f88:	4846      	ldr	r0, [pc, #280]	@ (81020a4 <main+0x228>)
 8101f8a:	f004 fe35 	bl	8106bf8 <HAL_TIM_IC_Start>

if (calibrate){
 8101f8e:	4b46      	ldr	r3, [pc, #280]	@ (81020a8 <main+0x22c>)
 8101f90:	681b      	ldr	r3, [r3, #0]
 8101f92:	2b00      	cmp	r3, #0
 8101f94:	d002      	beq.n	8101f9c <main+0x120>
  ESC_Calibrate();
 8101f96:	f7ff f8c5 	bl	8101124 <ESC_Calibrate>
 8101f9a:	e070      	b.n	810207e <main+0x202>
}else{
  bno055_assignI2C(&hi2c1);
 8101f9c:	4843      	ldr	r0, [pc, #268]	@ (81020ac <main+0x230>)
 8101f9e:	f7ff fe2b 	bl	8101bf8 <bno055_assignI2C>
  bno055_setup();
 8101fa2:	f7ff fc79 	bl	8101898 <bno055_setup>
  bno055_setOperationModeNDOF();
 8101fa6:	f7ff fc64 	bl	8101872 <bno055_setOperationModeNDOF>
  init_PID(&PitchPID, KPP, KIP, KDP, 0.01, 1.3, -1.3);
 8101faa:	4b41      	ldr	r3, [pc, #260]	@ (81020b0 <main+0x234>)
 8101fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fb0:	4610      	mov	r0, r2
 8101fb2:	4619      	mov	r1, r3
 8101fb4:	f7fe fea0 	bl	8100cf8 <__aeabi_d2f>
 8101fb8:	4604      	mov	r4, r0
 8101fba:	4b3e      	ldr	r3, [pc, #248]	@ (81020b4 <main+0x238>)
 8101fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fc0:	4610      	mov	r0, r2
 8101fc2:	4619      	mov	r1, r3
 8101fc4:	f7fe fe98 	bl	8100cf8 <__aeabi_d2f>
 8101fc8:	4605      	mov	r5, r0
 8101fca:	4b3b      	ldr	r3, [pc, #236]	@ (81020b8 <main+0x23c>)
 8101fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fd0:	4610      	mov	r0, r2
 8101fd2:	4619      	mov	r1, r3
 8101fd4:	f7fe fe90 	bl	8100cf8 <__aeabi_d2f>
 8101fd8:	4603      	mov	r3, r0
 8101fda:	eddf 2a38 	vldr	s5, [pc, #224]	@ 81020bc <main+0x240>
 8101fde:	ed9f 2a38 	vldr	s4, [pc, #224]	@ 81020c0 <main+0x244>
 8101fe2:	eddf 1a38 	vldr	s3, [pc, #224]	@ 81020c4 <main+0x248>
 8101fe6:	ee01 3a10 	vmov	s2, r3
 8101fea:	ee00 5a90 	vmov	s1, r5
 8101fee:	ee00 4a10 	vmov	s0, r4
 8101ff2:	4835      	ldr	r0, [pc, #212]	@ (81020c8 <main+0x24c>)
 8101ff4:	f7ff fb68 	bl	81016c8 <init_PID>
  init_PID(&RollPID, KPR, KIR, KDR, 0.01, 1.3, -1.3);
 8101ff8:	4b34      	ldr	r3, [pc, #208]	@ (81020cc <main+0x250>)
 8101ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101ffe:	4610      	mov	r0, r2
 8102000:	4619      	mov	r1, r3
 8102002:	f7fe fe79 	bl	8100cf8 <__aeabi_d2f>
 8102006:	4604      	mov	r4, r0
 8102008:	4b31      	ldr	r3, [pc, #196]	@ (81020d0 <main+0x254>)
 810200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810200e:	4610      	mov	r0, r2
 8102010:	4619      	mov	r1, r3
 8102012:	f7fe fe71 	bl	8100cf8 <__aeabi_d2f>
 8102016:	4605      	mov	r5, r0
 8102018:	4b2e      	ldr	r3, [pc, #184]	@ (81020d4 <main+0x258>)
 810201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810201e:	4610      	mov	r0, r2
 8102020:	4619      	mov	r1, r3
 8102022:	f7fe fe69 	bl	8100cf8 <__aeabi_d2f>
 8102026:	4603      	mov	r3, r0
 8102028:	eddf 2a24 	vldr	s5, [pc, #144]	@ 81020bc <main+0x240>
 810202c:	ed9f 2a24 	vldr	s4, [pc, #144]	@ 81020c0 <main+0x244>
 8102030:	eddf 1a24 	vldr	s3, [pc, #144]	@ 81020c4 <main+0x248>
 8102034:	ee01 3a10 	vmov	s2, r3
 8102038:	ee00 5a90 	vmov	s1, r5
 810203c:	ee00 4a10 	vmov	s0, r4
 8102040:	4825      	ldr	r0, [pc, #148]	@ (81020d8 <main+0x25c>)
 8102042:	f7ff fb41 	bl	81016c8 <init_PID>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_Tc){
 8102046:	4b25      	ldr	r3, [pc, #148]	@ (81020dc <main+0x260>)
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	2b00      	cmp	r3, #0
 810204c:	d0fb      	beq.n	8102046 <main+0x1ca>
		  switch(mode){
 810204e:	4b24      	ldr	r3, [pc, #144]	@ (81020e0 <main+0x264>)
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	2b02      	cmp	r3, #2
 8102054:	d00c      	beq.n	8102070 <main+0x1f4>
 8102056:	2b02      	cmp	r3, #2
 8102058:	dc0d      	bgt.n	8102076 <main+0x1fa>
 810205a:	2b00      	cmp	r3, #0
 810205c:	d002      	beq.n	8102064 <main+0x1e8>
 810205e:	2b01      	cmp	r3, #1
 8102060:	d003      	beq.n	810206a <main+0x1ee>
 8102062:	e008      	b.n	8102076 <main+0x1fa>
		  case 0:
			   stopMotors(); break;
 8102064:	f000 fa9c 	bl	81025a0 <stopMotors>
 8102068:	e008      	b.n	810207c <main+0x200>
		  case 1:
			  armingMotors(); break;
 810206a:	f000 fb45 	bl	81026f8 <armingMotors>
 810206e:	e005      	b.n	810207c <main+0x200>
		  case 2:
			  stabilize(); break;
 8102070:	f000 fc28 	bl	81028c4 <stabilize>
 8102074:	e002      	b.n	810207c <main+0x200>
		  default:
			  stopMotors(); break;
 8102076:	f000 fa93 	bl	81025a0 <stopMotors>
 810207a:	bf00      	nop
	  if(flag_Tc){
 810207c:	e7e3      	b.n	8102046 <main+0x1ca>
 810207e:	2300      	movs	r3, #0
		  }
	  }
  }
}
  /* USER CODE END 3 */
}
 8102080:	4618      	mov	r0, r3
 8102082:	3708      	adds	r7, #8
 8102084:	46bd      	mov	sp, r7
 8102086:	bdb0      	pop	{r4, r5, r7, pc}
 8102088:	58024400 	.word	0x58024400
 810208c:	e000ed00 	.word	0xe000ed00
 8102090:	58026400 	.word	0x58026400
 8102094:	100002bc 	.word	0x100002bc
 8102098:	10000308 	.word	0x10000308
 810209c:	40000400 	.word	0x40000400
 81020a0:	51eb851f 	.word	0x51eb851f
 81020a4:	10000354 	.word	0x10000354
 81020a8:	10000434 	.word	0x10000434
 81020ac:	10000268 	.word	0x10000268
 81020b0:	10000018 	.word	0x10000018
 81020b4:	10000020 	.word	0x10000020
 81020b8:	10000028 	.word	0x10000028
 81020bc:	bfa66666 	.word	0xbfa66666
 81020c0:	3fa66666 	.word	0x3fa66666
 81020c4:	3c23d70a 	.word	0x3c23d70a
 81020c8:	10000440 	.word	0x10000440
 81020cc:	10000030 	.word	0x10000030
 81020d0:	10000038 	.word	0x10000038
 81020d4:	10000040 	.word	0x10000040
 81020d8:	10000460 	.word	0x10000460
 81020dc:	10000438 	.word	0x10000438
 81020e0:	1000043c 	.word	0x1000043c

081020e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81020e4:	b580      	push	{r7, lr}
 81020e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8102158 <MX_I2C1_Init+0x74>)
 81020ea:	4a1c      	ldr	r2, [pc, #112]	@ (810215c <MX_I2C1_Init+0x78>)
 81020ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 81020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8102158 <MX_I2C1_Init+0x74>)
 81020f0:	4a1b      	ldr	r2, [pc, #108]	@ (8102160 <MX_I2C1_Init+0x7c>)
 81020f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81020f4:	4b18      	ldr	r3, [pc, #96]	@ (8102158 <MX_I2C1_Init+0x74>)
 81020f6:	2200      	movs	r2, #0
 81020f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81020fa:	4b17      	ldr	r3, [pc, #92]	@ (8102158 <MX_I2C1_Init+0x74>)
 81020fc:	2201      	movs	r2, #1
 81020fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8102100:	4b15      	ldr	r3, [pc, #84]	@ (8102158 <MX_I2C1_Init+0x74>)
 8102102:	2200      	movs	r2, #0
 8102104:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102106:	4b14      	ldr	r3, [pc, #80]	@ (8102158 <MX_I2C1_Init+0x74>)
 8102108:	2200      	movs	r2, #0
 810210a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810210c:	4b12      	ldr	r3, [pc, #72]	@ (8102158 <MX_I2C1_Init+0x74>)
 810210e:	2200      	movs	r2, #0
 8102110:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8102112:	4b11      	ldr	r3, [pc, #68]	@ (8102158 <MX_I2C1_Init+0x74>)
 8102114:	2200      	movs	r2, #0
 8102116:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102118:	4b0f      	ldr	r3, [pc, #60]	@ (8102158 <MX_I2C1_Init+0x74>)
 810211a:	2200      	movs	r2, #0
 810211c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810211e:	480e      	ldr	r0, [pc, #56]	@ (8102158 <MX_I2C1_Init+0x74>)
 8102120:	f001 fc3a 	bl	8103998 <HAL_I2C_Init>
 8102124:	4603      	mov	r3, r0
 8102126:	2b00      	cmp	r3, #0
 8102128:	d001      	beq.n	810212e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810212a:	f000 fd4b 	bl	8102bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810212e:	2100      	movs	r1, #0
 8102130:	4809      	ldr	r0, [pc, #36]	@ (8102158 <MX_I2C1_Init+0x74>)
 8102132:	f002 f99b 	bl	810446c <HAL_I2CEx_ConfigAnalogFilter>
 8102136:	4603      	mov	r3, r0
 8102138:	2b00      	cmp	r3, #0
 810213a:	d001      	beq.n	8102140 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810213c:	f000 fd42 	bl	8102bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8102140:	2100      	movs	r1, #0
 8102142:	4805      	ldr	r0, [pc, #20]	@ (8102158 <MX_I2C1_Init+0x74>)
 8102144:	f002 f9dd 	bl	8104502 <HAL_I2CEx_ConfigDigitalFilter>
 8102148:	4603      	mov	r3, r0
 810214a:	2b00      	cmp	r3, #0
 810214c:	d001      	beq.n	8102152 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810214e:	f000 fd39 	bl	8102bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8102152:	bf00      	nop
 8102154:	bd80      	pop	{r7, pc}
 8102156:	bf00      	nop
 8102158:	10000268 	.word	0x10000268
 810215c:	40005400 	.word	0x40005400
 8102160:	00301242 	.word	0x00301242

08102164 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8102164:	b580      	push	{r7, lr}
 8102166:	b088      	sub	sp, #32
 8102168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810216a:	f107 0310 	add.w	r3, r7, #16
 810216e:	2200      	movs	r2, #0
 8102170:	601a      	str	r2, [r3, #0]
 8102172:	605a      	str	r2, [r3, #4]
 8102174:	609a      	str	r2, [r3, #8]
 8102176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102178:	1d3b      	adds	r3, r7, #4
 810217a:	2200      	movs	r2, #0
 810217c:	601a      	str	r2, [r3, #0]
 810217e:	605a      	str	r2, [r3, #4]
 8102180:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8102182:	4b20      	ldr	r3, [pc, #128]	@ (8102204 <MX_TIM1_Init+0xa0>)
 8102184:	4a20      	ldr	r2, [pc, #128]	@ (8102208 <MX_TIM1_Init+0xa4>)
 8102186:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8102188:	4b1e      	ldr	r3, [pc, #120]	@ (8102204 <MX_TIM1_Init+0xa0>)
 810218a:	224a      	movs	r2, #74	@ 0x4a
 810218c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810218e:	4b1d      	ldr	r3, [pc, #116]	@ (8102204 <MX_TIM1_Init+0xa0>)
 8102190:	2200      	movs	r2, #0
 8102192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8102194:	4b1b      	ldr	r3, [pc, #108]	@ (8102204 <MX_TIM1_Init+0xa0>)
 8102196:	f242 720f 	movw	r2, #9999	@ 0x270f
 810219a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810219c:	4b19      	ldr	r3, [pc, #100]	@ (8102204 <MX_TIM1_Init+0xa0>)
 810219e:	2200      	movs	r2, #0
 81021a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81021a2:	4b18      	ldr	r3, [pc, #96]	@ (8102204 <MX_TIM1_Init+0xa0>)
 81021a4:	2200      	movs	r2, #0
 81021a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81021a8:	4b16      	ldr	r3, [pc, #88]	@ (8102204 <MX_TIM1_Init+0xa0>)
 81021aa:	2200      	movs	r2, #0
 81021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81021ae:	4815      	ldr	r0, [pc, #84]	@ (8102204 <MX_TIM1_Init+0xa0>)
 81021b0:	f004 fa80 	bl	81066b4 <HAL_TIM_Base_Init>
 81021b4:	4603      	mov	r3, r0
 81021b6:	2b00      	cmp	r3, #0
 81021b8:	d001      	beq.n	81021be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 81021ba:	f000 fd03 	bl	8102bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81021be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81021c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 81021c4:	f107 0310 	add.w	r3, r7, #16
 81021c8:	4619      	mov	r1, r3
 81021ca:	480e      	ldr	r0, [pc, #56]	@ (8102204 <MX_TIM1_Init+0xa0>)
 81021cc:	f005 fa20 	bl	8107610 <HAL_TIM_ConfigClockSource>
 81021d0:	4603      	mov	r3, r0
 81021d2:	2b00      	cmp	r3, #0
 81021d4:	d001      	beq.n	81021da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 81021d6:	f000 fcf5 	bl	8102bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81021da:	2300      	movs	r3, #0
 81021dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81021de:	2300      	movs	r3, #0
 81021e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81021e2:	2300      	movs	r3, #0
 81021e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81021e6:	1d3b      	adds	r3, r7, #4
 81021e8:	4619      	mov	r1, r3
 81021ea:	4806      	ldr	r0, [pc, #24]	@ (8102204 <MX_TIM1_Init+0xa0>)
 81021ec:	f006 f9fe 	bl	81085ec <HAL_TIMEx_MasterConfigSynchronization>
 81021f0:	4603      	mov	r3, r0
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d001      	beq.n	81021fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 81021f6:	f000 fce5 	bl	8102bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 81021fa:	bf00      	nop
 81021fc:	3720      	adds	r7, #32
 81021fe:	46bd      	mov	sp, r7
 8102200:	bd80      	pop	{r7, pc}
 8102202:	bf00      	nop
 8102204:	100002bc 	.word	0x100002bc
 8102208:	40010000 	.word	0x40010000

0810220c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 810220c:	b580      	push	{r7, lr}
 810220e:	b08e      	sub	sp, #56	@ 0x38
 8102210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102216:	2200      	movs	r2, #0
 8102218:	601a      	str	r2, [r3, #0]
 810221a:	605a      	str	r2, [r3, #4]
 810221c:	609a      	str	r2, [r3, #8]
 810221e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102220:	f107 031c 	add.w	r3, r7, #28
 8102224:	2200      	movs	r2, #0
 8102226:	601a      	str	r2, [r3, #0]
 8102228:	605a      	str	r2, [r3, #4]
 810222a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810222c:	463b      	mov	r3, r7
 810222e:	2200      	movs	r2, #0
 8102230:	601a      	str	r2, [r3, #0]
 8102232:	605a      	str	r2, [r3, #4]
 8102234:	609a      	str	r2, [r3, #8]
 8102236:	60da      	str	r2, [r3, #12]
 8102238:	611a      	str	r2, [r3, #16]
 810223a:	615a      	str	r2, [r3, #20]
 810223c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810223e:	4b3d      	ldr	r3, [pc, #244]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102240:	4a3d      	ldr	r2, [pc, #244]	@ (8102338 <MX_TIM3_Init+0x12c>)
 8102242:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75-1;
 8102244:	4b3b      	ldr	r3, [pc, #236]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102246:	224a      	movs	r2, #74	@ 0x4a
 8102248:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 810224a:	4b3a      	ldr	r3, [pc, #232]	@ (8102334 <MX_TIM3_Init+0x128>)
 810224c:	2200      	movs	r2, #0
 810224e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8102250:	4b38      	ldr	r3, [pc, #224]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102252:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8102256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102258:	4b36      	ldr	r3, [pc, #216]	@ (8102334 <MX_TIM3_Init+0x128>)
 810225a:	2200      	movs	r2, #0
 810225c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810225e:	4b35      	ldr	r3, [pc, #212]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102260:	2200      	movs	r2, #0
 8102262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8102264:	4833      	ldr	r0, [pc, #204]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102266:	f004 fa25 	bl	81066b4 <HAL_TIM_Base_Init>
 810226a:	4603      	mov	r3, r0
 810226c:	2b00      	cmp	r3, #0
 810226e:	d001      	beq.n	8102274 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8102270:	f000 fca8 	bl	8102bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8102278:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 810227a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810227e:	4619      	mov	r1, r3
 8102280:	482c      	ldr	r0, [pc, #176]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102282:	f005 f9c5 	bl	8107610 <HAL_TIM_ConfigClockSource>
 8102286:	4603      	mov	r3, r0
 8102288:	2b00      	cmp	r3, #0
 810228a:	d001      	beq.n	8102290 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 810228c:	f000 fc9a 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102290:	4828      	ldr	r0, [pc, #160]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102292:	f004 fadf 	bl	8106854 <HAL_TIM_PWM_Init>
 8102296:	4603      	mov	r3, r0
 8102298:	2b00      	cmp	r3, #0
 810229a:	d001      	beq.n	81022a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 810229c:	f000 fc92 	bl	8102bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81022a0:	2300      	movs	r3, #0
 81022a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81022a4:	2300      	movs	r3, #0
 81022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81022a8:	f107 031c 	add.w	r3, r7, #28
 81022ac:	4619      	mov	r1, r3
 81022ae:	4821      	ldr	r0, [pc, #132]	@ (8102334 <MX_TIM3_Init+0x128>)
 81022b0:	f006 f99c 	bl	81085ec <HAL_TIMEx_MasterConfigSynchronization>
 81022b4:	4603      	mov	r3, r0
 81022b6:	2b00      	cmp	r3, #0
 81022b8:	d001      	beq.n	81022be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 81022ba:	f000 fc83 	bl	8102bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81022be:	2360      	movs	r3, #96	@ 0x60
 81022c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 81022c2:	2300      	movs	r3, #0
 81022c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81022c6:	2300      	movs	r3, #0
 81022c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81022ca:	2300      	movs	r3, #0
 81022cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81022ce:	463b      	mov	r3, r7
 81022d0:	2200      	movs	r2, #0
 81022d2:	4619      	mov	r1, r3
 81022d4:	4817      	ldr	r0, [pc, #92]	@ (8102334 <MX_TIM3_Init+0x128>)
 81022d6:	f005 f887 	bl	81073e8 <HAL_TIM_PWM_ConfigChannel>
 81022da:	4603      	mov	r3, r0
 81022dc:	2b00      	cmp	r3, #0
 81022de:	d001      	beq.n	81022e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 81022e0:	f000 fc70 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81022e4:	463b      	mov	r3, r7
 81022e6:	2204      	movs	r2, #4
 81022e8:	4619      	mov	r1, r3
 81022ea:	4812      	ldr	r0, [pc, #72]	@ (8102334 <MX_TIM3_Init+0x128>)
 81022ec:	f005 f87c 	bl	81073e8 <HAL_TIM_PWM_ConfigChannel>
 81022f0:	4603      	mov	r3, r0
 81022f2:	2b00      	cmp	r3, #0
 81022f4:	d001      	beq.n	81022fa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 81022f6:	f000 fc65 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81022fa:	463b      	mov	r3, r7
 81022fc:	2208      	movs	r2, #8
 81022fe:	4619      	mov	r1, r3
 8102300:	480c      	ldr	r0, [pc, #48]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102302:	f005 f871 	bl	81073e8 <HAL_TIM_PWM_ConfigChannel>
 8102306:	4603      	mov	r3, r0
 8102308:	2b00      	cmp	r3, #0
 810230a:	d001      	beq.n	8102310 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 810230c:	f000 fc5a 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8102310:	463b      	mov	r3, r7
 8102312:	220c      	movs	r2, #12
 8102314:	4619      	mov	r1, r3
 8102316:	4807      	ldr	r0, [pc, #28]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102318:	f005 f866 	bl	81073e8 <HAL_TIM_PWM_ConfigChannel>
 810231c:	4603      	mov	r3, r0
 810231e:	2b00      	cmp	r3, #0
 8102320:	d001      	beq.n	8102326 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8102322:	f000 fc4f 	bl	8102bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8102326:	4803      	ldr	r0, [pc, #12]	@ (8102334 <MX_TIM3_Init+0x128>)
 8102328:	f000 fd5c 	bl	8102de4 <HAL_TIM_MspPostInit>

}
 810232c:	bf00      	nop
 810232e:	3738      	adds	r7, #56	@ 0x38
 8102330:	46bd      	mov	sp, r7
 8102332:	bd80      	pop	{r7, pc}
 8102334:	10000308 	.word	0x10000308
 8102338:	40000400 	.word	0x40000400

0810233c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 810233c:	b580      	push	{r7, lr}
 810233e:	b090      	sub	sp, #64	@ 0x40
 8102340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8102342:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8102346:	2200      	movs	r2, #0
 8102348:	601a      	str	r2, [r3, #0]
 810234a:	605a      	str	r2, [r3, #4]
 810234c:	609a      	str	r2, [r3, #8]
 810234e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8102350:	f107 031c 	add.w	r3, r7, #28
 8102354:	2200      	movs	r2, #0
 8102356:	601a      	str	r2, [r3, #0]
 8102358:	605a      	str	r2, [r3, #4]
 810235a:	609a      	str	r2, [r3, #8]
 810235c:	60da      	str	r2, [r3, #12]
 810235e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8102360:	f107 030c 	add.w	r3, r7, #12
 8102364:	2200      	movs	r2, #0
 8102366:	601a      	str	r2, [r3, #0]
 8102368:	605a      	str	r2, [r3, #4]
 810236a:	609a      	str	r2, [r3, #8]
 810236c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810236e:	463b      	mov	r3, r7
 8102370:	2200      	movs	r2, #0
 8102372:	601a      	str	r2, [r3, #0]
 8102374:	605a      	str	r2, [r3, #4]
 8102376:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8102378:	4b3d      	ldr	r3, [pc, #244]	@ (8102470 <MX_TIM5_Init+0x134>)
 810237a:	4a3e      	ldr	r2, [pc, #248]	@ (8102474 <MX_TIM5_Init+0x138>)
 810237c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 75-1;
 810237e:	4b3c      	ldr	r3, [pc, #240]	@ (8102470 <MX_TIM5_Init+0x134>)
 8102380:	224a      	movs	r2, #74	@ 0x4a
 8102382:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102384:	4b3a      	ldr	r3, [pc, #232]	@ (8102470 <MX_TIM5_Init+0x134>)
 8102386:	2200      	movs	r2, #0
 8102388:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 810238a:	4b39      	ldr	r3, [pc, #228]	@ (8102470 <MX_TIM5_Init+0x134>)
 810238c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8102390:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8102392:	4b37      	ldr	r3, [pc, #220]	@ (8102470 <MX_TIM5_Init+0x134>)
 8102394:	2200      	movs	r2, #0
 8102396:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102398:	4b35      	ldr	r3, [pc, #212]	@ (8102470 <MX_TIM5_Init+0x134>)
 810239a:	2200      	movs	r2, #0
 810239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 810239e:	4834      	ldr	r0, [pc, #208]	@ (8102470 <MX_TIM5_Init+0x134>)
 81023a0:	f004 f988 	bl	81066b4 <HAL_TIM_Base_Init>
 81023a4:	4603      	mov	r3, r0
 81023a6:	2b00      	cmp	r3, #0
 81023a8:	d001      	beq.n	81023ae <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 81023aa:	f000 fc0b 	bl	8102bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81023ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 81023b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 81023b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 81023b8:	4619      	mov	r1, r3
 81023ba:	482d      	ldr	r0, [pc, #180]	@ (8102470 <MX_TIM5_Init+0x134>)
 81023bc:	f005 f928 	bl	8107610 <HAL_TIM_ConfigClockSource>
 81023c0:	4603      	mov	r3, r0
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d001      	beq.n	81023ca <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 81023c6:	f000 fbfd 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 81023ca:	4829      	ldr	r0, [pc, #164]	@ (8102470 <MX_TIM5_Init+0x134>)
 81023cc:	f004 fbb2 	bl	8106b34 <HAL_TIM_IC_Init>
 81023d0:	4603      	mov	r3, r0
 81023d2:	2b00      	cmp	r3, #0
 81023d4:	d001      	beq.n	81023da <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 81023d6:	f000 fbf5 	bl	8102bc4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 81023da:	2304      	movs	r3, #4
 81023dc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 81023de:	2350      	movs	r3, #80	@ 0x50
 81023e0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 81023e2:	2300      	movs	r3, #0
 81023e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 81023e6:	2300      	movs	r3, #0
 81023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 81023ea:	2300      	movs	r3, #0
 81023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 81023ee:	f107 031c 	add.w	r3, r7, #28
 81023f2:	4619      	mov	r1, r3
 81023f4:	481e      	ldr	r0, [pc, #120]	@ (8102470 <MX_TIM5_Init+0x134>)
 81023f6:	f005 fa03 	bl	8107800 <HAL_TIM_SlaveConfigSynchro>
 81023fa:	4603      	mov	r3, r0
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d001      	beq.n	8102404 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8102400:	f000 fbe0 	bl	8102bc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102404:	2300      	movs	r3, #0
 8102406:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8102408:	2301      	movs	r3, #1
 810240a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 810240c:	2300      	movs	r3, #0
 810240e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8102410:	2300      	movs	r3, #0
 8102412:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8102414:	f107 030c 	add.w	r3, r7, #12
 8102418:	2200      	movs	r2, #0
 810241a:	4619      	mov	r1, r3
 810241c:	4814      	ldr	r0, [pc, #80]	@ (8102470 <MX_TIM5_Init+0x134>)
 810241e:	f004 ff46 	bl	81072ae <HAL_TIM_IC_ConfigChannel>
 8102422:	4603      	mov	r3, r0
 8102424:	2b00      	cmp	r3, #0
 8102426:	d001      	beq.n	810242c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8102428:	f000 fbcc 	bl	8102bc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 810242c:	2302      	movs	r3, #2
 810242e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8102430:	2302      	movs	r3, #2
 8102432:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8102434:	f107 030c 	add.w	r3, r7, #12
 8102438:	2204      	movs	r2, #4
 810243a:	4619      	mov	r1, r3
 810243c:	480c      	ldr	r0, [pc, #48]	@ (8102470 <MX_TIM5_Init+0x134>)
 810243e:	f004 ff36 	bl	81072ae <HAL_TIM_IC_ConfigChannel>
 8102442:	4603      	mov	r3, r0
 8102444:	2b00      	cmp	r3, #0
 8102446:	d001      	beq.n	810244c <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8102448:	f000 fbbc 	bl	8102bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810244c:	2300      	movs	r3, #0
 810244e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102450:	2300      	movs	r3, #0
 8102452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8102454:	463b      	mov	r3, r7
 8102456:	4619      	mov	r1, r3
 8102458:	4805      	ldr	r0, [pc, #20]	@ (8102470 <MX_TIM5_Init+0x134>)
 810245a:	f006 f8c7 	bl	81085ec <HAL_TIMEx_MasterConfigSynchronization>
 810245e:	4603      	mov	r3, r0
 8102460:	2b00      	cmp	r3, #0
 8102462:	d001      	beq.n	8102468 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8102464:	f000 fbae 	bl	8102bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8102468:	bf00      	nop
 810246a:	3740      	adds	r7, #64	@ 0x40
 810246c:	46bd      	mov	sp, r7
 810246e:	bd80      	pop	{r7, pc}
 8102470:	10000354 	.word	0x10000354
 8102474:	40000c00 	.word	0x40000c00

08102478 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8102478:	b580      	push	{r7, lr}
 810247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810247c:	4b22      	ldr	r3, [pc, #136]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 810247e:	4a23      	ldr	r2, [pc, #140]	@ (810250c <MX_USART3_UART_Init+0x94>)
 8102480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102482:	4b21      	ldr	r3, [pc, #132]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 8102484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8102488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810248a:	4b1f      	ldr	r3, [pc, #124]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 810248c:	2200      	movs	r2, #0
 810248e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102490:	4b1d      	ldr	r3, [pc, #116]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 8102492:	2200      	movs	r2, #0
 8102494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102496:	4b1c      	ldr	r3, [pc, #112]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 8102498:	2200      	movs	r2, #0
 810249a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810249c:	4b1a      	ldr	r3, [pc, #104]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 810249e:	220c      	movs	r2, #12
 81024a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81024a2:	4b19      	ldr	r3, [pc, #100]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024a4:	2200      	movs	r2, #0
 81024a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81024a8:	4b17      	ldr	r3, [pc, #92]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024aa:	2200      	movs	r2, #0
 81024ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81024ae:	4b16      	ldr	r3, [pc, #88]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024b0:	2200      	movs	r2, #0
 81024b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81024b4:	4b14      	ldr	r3, [pc, #80]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024b6:	2200      	movs	r2, #0
 81024b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81024ba:	4b13      	ldr	r3, [pc, #76]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024bc:	2200      	movs	r2, #0
 81024be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81024c0:	4811      	ldr	r0, [pc, #68]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024c2:	f006 f93f 	bl	8108744 <HAL_UART_Init>
 81024c6:	4603      	mov	r3, r0
 81024c8:	2b00      	cmp	r3, #0
 81024ca:	d001      	beq.n	81024d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81024cc:	f000 fb7a 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81024d0:	2100      	movs	r1, #0
 81024d2:	480d      	ldr	r0, [pc, #52]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024d4:	f007 f9d4 	bl	8109880 <HAL_UARTEx_SetTxFifoThreshold>
 81024d8:	4603      	mov	r3, r0
 81024da:	2b00      	cmp	r3, #0
 81024dc:	d001      	beq.n	81024e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81024de:	f000 fb71 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81024e2:	2100      	movs	r1, #0
 81024e4:	4808      	ldr	r0, [pc, #32]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024e6:	f007 fa09 	bl	81098fc <HAL_UARTEx_SetRxFifoThreshold>
 81024ea:	4603      	mov	r3, r0
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	d001      	beq.n	81024f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81024f0:	f000 fb68 	bl	8102bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81024f4:	4804      	ldr	r0, [pc, #16]	@ (8102508 <MX_USART3_UART_Init+0x90>)
 81024f6:	f007 f98a 	bl	810980e <HAL_UARTEx_DisableFifoMode>
 81024fa:	4603      	mov	r3, r0
 81024fc:	2b00      	cmp	r3, #0
 81024fe:	d001      	beq.n	8102504 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102500:	f000 fb60 	bl	8102bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102504:	bf00      	nop
 8102506:	bd80      	pop	{r7, pc}
 8102508:	100003a0 	.word	0x100003a0
 810250c:	40004800 	.word	0x40004800

08102510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102510:	b480      	push	{r7}
 8102512:	b085      	sub	sp, #20
 8102514:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102516:	4b21      	ldr	r3, [pc, #132]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810251c:	4a1f      	ldr	r2, [pc, #124]	@ (810259c <MX_GPIO_Init+0x8c>)
 810251e:	f043 0301 	orr.w	r3, r3, #1
 8102522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102526:	4b1d      	ldr	r3, [pc, #116]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810252c:	f003 0301 	and.w	r3, r3, #1
 8102530:	60fb      	str	r3, [r7, #12]
 8102532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102534:	4b19      	ldr	r3, [pc, #100]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810253a:	4a18      	ldr	r2, [pc, #96]	@ (810259c <MX_GPIO_Init+0x8c>)
 810253c:	f043 0302 	orr.w	r3, r3, #2
 8102540:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102544:	4b15      	ldr	r3, [pc, #84]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810254a:	f003 0302 	and.w	r3, r3, #2
 810254e:	60bb      	str	r3, [r7, #8]
 8102550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102552:	4b12      	ldr	r3, [pc, #72]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102558:	4a10      	ldr	r2, [pc, #64]	@ (810259c <MX_GPIO_Init+0x8c>)
 810255a:	f043 0308 	orr.w	r3, r3, #8
 810255e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102562:	4b0e      	ldr	r3, [pc, #56]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102568:	f003 0308 	and.w	r3, r3, #8
 810256c:	607b      	str	r3, [r7, #4]
 810256e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102570:	4b0a      	ldr	r3, [pc, #40]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102576:	4a09      	ldr	r2, [pc, #36]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102578:	f043 0304 	orr.w	r3, r3, #4
 810257c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102580:	4b06      	ldr	r3, [pc, #24]	@ (810259c <MX_GPIO_Init+0x8c>)
 8102582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102586:	f003 0304 	and.w	r3, r3, #4
 810258a:	603b      	str	r3, [r7, #0]
 810258c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810258e:	bf00      	nop
 8102590:	3714      	adds	r7, #20
 8102592:	46bd      	mov	sp, r7
 8102594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102598:	4770      	bx	lr
 810259a:	bf00      	nop
 810259c:	58024400 	.word	0x58024400

081025a0 <stopMotors>:

/* USER CODE BEGIN 4 */
void stopMotors(){
 81025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81025a4:	b09e      	sub	sp, #120	@ 0x78
 81025a6:	af1e      	add	r7, sp, #120	@ 0x78
	TIM3->CCR1 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81025a8:	4b46      	ldr	r3, [pc, #280]	@ (81026c4 <stopMotors+0x124>)
 81025aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81025ac:	4613      	mov	r3, r2
 81025ae:	009b      	lsls	r3, r3, #2
 81025b0:	4413      	add	r3, r2
 81025b2:	4a44      	ldr	r2, [pc, #272]	@ (81026c4 <stopMotors+0x124>)
 81025b4:	4944      	ldr	r1, [pc, #272]	@ (81026c8 <stopMotors+0x128>)
 81025b6:	fba1 1303 	umull	r1, r3, r1, r3
 81025ba:	095b      	lsrs	r3, r3, #5
 81025bc:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR2 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81025be:	4b41      	ldr	r3, [pc, #260]	@ (81026c4 <stopMotors+0x124>)
 81025c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81025c2:	4613      	mov	r3, r2
 81025c4:	009b      	lsls	r3, r3, #2
 81025c6:	4413      	add	r3, r2
 81025c8:	4a3e      	ldr	r2, [pc, #248]	@ (81026c4 <stopMotors+0x124>)
 81025ca:	493f      	ldr	r1, [pc, #252]	@ (81026c8 <stopMotors+0x128>)
 81025cc:	fba1 1303 	umull	r1, r3, r1, r3
 81025d0:	095b      	lsrs	r3, r3, #5
 81025d2:	6393      	str	r3, [r2, #56]	@ 0x38
	TIM3->CCR3 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81025d4:	4b3b      	ldr	r3, [pc, #236]	@ (81026c4 <stopMotors+0x124>)
 81025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81025d8:	4613      	mov	r3, r2
 81025da:	009b      	lsls	r3, r3, #2
 81025dc:	4413      	add	r3, r2
 81025de:	4a39      	ldr	r2, [pc, #228]	@ (81026c4 <stopMotors+0x124>)
 81025e0:	4939      	ldr	r1, [pc, #228]	@ (81026c8 <stopMotors+0x128>)
 81025e2:	fba1 1303 	umull	r1, r3, r1, r3
 81025e6:	095b      	lsrs	r3, r3, #5
 81025e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
	TIM3->CCR4 = (uint32_t) (TIM3->ARR * OFF_DUTY / 100);
 81025ea:	4b36      	ldr	r3, [pc, #216]	@ (81026c4 <stopMotors+0x124>)
 81025ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81025ee:	4613      	mov	r3, r2
 81025f0:	009b      	lsls	r3, r3, #2
 81025f2:	4413      	add	r3, r2
 81025f4:	4a33      	ldr	r2, [pc, #204]	@ (81026c4 <stopMotors+0x124>)
 81025f6:	4934      	ldr	r1, [pc, #208]	@ (81026c8 <stopMotors+0x128>)
 81025f8:	fba1 1303 	umull	r1, r3, r1, r3
 81025fc:	095b      	lsrs	r3, r3, #5
 81025fe:	6413      	str	r3, [r2, #64]	@ 0x40
	readImu();
 8102600:	f000 f904 	bl	810280c <readImu>
	if(flag_print){
 8102604:	4b31      	ldr	r3, [pc, #196]	@ (81026cc <stopMotors+0x12c>)
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	2b00      	cmp	r3, #0
 810260a:	d057      	beq.n	81026bc <stopMotors+0x11c>
		printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f \r\n", (double) OFF_DUTY, (double) OFF_DUTY,(double) OFF_DUTY, (double) OFF_DUTY, (double) roll, (double) pitch, 0.0, 0.0, 0.0, 0.0, (double) KPR, (double) KIR, (double) KDR, (double) KPP, (double) KIP, (double) KDP);
 810260c:	4b30      	ldr	r3, [pc, #192]	@ (81026d0 <stopMotors+0x130>)
 810260e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8102612:	4b30      	ldr	r3, [pc, #192]	@ (81026d4 <stopMotors+0x134>)
 8102614:	e9d3 4500 	ldrd	r4, r5, [r3]
 8102618:	4b2f      	ldr	r3, [pc, #188]	@ (81026d8 <stopMotors+0x138>)
 810261a:	e9d3 8900 	ldrd	r8, r9, [r3]
 810261e:	4b2f      	ldr	r3, [pc, #188]	@ (81026dc <stopMotors+0x13c>)
 8102620:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8102624:	4b2e      	ldr	r3, [pc, #184]	@ (81026e0 <stopMotors+0x140>)
 8102626:	ed93 7b00 	vldr	d7, [r3]
 810262a:	4b2e      	ldr	r3, [pc, #184]	@ (81026e4 <stopMotors+0x144>)
 810262c:	ed93 6b00 	vldr	d6, [r3]
 8102630:	4b2d      	ldr	r3, [pc, #180]	@ (81026e8 <stopMotors+0x148>)
 8102632:	ed93 5b00 	vldr	d5, [r3]
 8102636:	4b2d      	ldr	r3, [pc, #180]	@ (81026ec <stopMotors+0x14c>)
 8102638:	e9d3 2300 	ldrd	r2, r3, [r3]
 810263c:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8102640:	ed8d 5b1a 	vstr	d5, [sp, #104]	@ 0x68
 8102644:	ed8d 6b18 	vstr	d6, [sp, #96]	@ 0x60
 8102648:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 810264c:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8102650:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8102654:	f04f 0200 	mov.w	r2, #0
 8102658:	f04f 0300 	mov.w	r3, #0
 810265c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8102660:	f04f 0200 	mov.w	r2, #0
 8102664:	f04f 0300 	mov.w	r3, #0
 8102668:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 810266c:	f04f 0200 	mov.w	r2, #0
 8102670:	f04f 0300 	mov.w	r3, #0
 8102674:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8102678:	f04f 0200 	mov.w	r2, #0
 810267c:	f04f 0300 	mov.w	r3, #0
 8102680:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8102684:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8102688:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810268c:	f04f 0200 	mov.w	r2, #0
 8102690:	4b17      	ldr	r3, [pc, #92]	@ (81026f0 <stopMotors+0x150>)
 8102692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8102696:	f04f 0200 	mov.w	r2, #0
 810269a:	4b15      	ldr	r3, [pc, #84]	@ (81026f0 <stopMotors+0x150>)
 810269c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81026a0:	f04f 0200 	mov.w	r2, #0
 81026a4:	4b12      	ldr	r3, [pc, #72]	@ (81026f0 <stopMotors+0x150>)
 81026a6:	e9cd 2300 	strd	r2, r3, [sp]
 81026aa:	f04f 0200 	mov.w	r2, #0
 81026ae:	4b10      	ldr	r3, [pc, #64]	@ (81026f0 <stopMotors+0x150>)
 81026b0:	4810      	ldr	r0, [pc, #64]	@ (81026f4 <stopMotors+0x154>)
 81026b2:	f008 f8dd 	bl	810a870 <iprintf>
		flag_print=0;
 81026b6:	4b05      	ldr	r3, [pc, #20]	@ (81026cc <stopMotors+0x12c>)
 81026b8:	2200      	movs	r2, #0
 81026ba:	601a      	str	r2, [r3, #0]
	}

}
 81026bc:	bf00      	nop
 81026be:	46bd      	mov	sp, r7
 81026c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81026c4:	40000400 	.word	0x40000400
 81026c8:	51eb851f 	.word	0x51eb851f
 81026cc:	1000049c 	.word	0x1000049c
 81026d0:	10000488 	.word	0x10000488
 81026d4:	10000480 	.word	0x10000480
 81026d8:	10000030 	.word	0x10000030
 81026dc:	10000038 	.word	0x10000038
 81026e0:	10000040 	.word	0x10000040
 81026e4:	10000018 	.word	0x10000018
 81026e8:	10000020 	.word	0x10000020
 81026ec:	10000028 	.word	0x10000028
 81026f0:	40140000 	.word	0x40140000
 81026f4:	0810e93c 	.word	0x0810e93c

081026f8 <armingMotors>:

void armingMotors(){
 81026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81026fc:	b09e      	sub	sp, #120	@ 0x78
 81026fe:	af1e      	add	r7, sp, #120	@ 0x78
	setPWM(MIN_DUTY, MIN_DUTY, MIN_DUTY, MIN_DUTY);
 8102700:	eddf 1a37 	vldr	s3, [pc, #220]	@ 81027e0 <armingMotors+0xe8>
 8102704:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 81027e0 <armingMotors+0xe8>
 8102708:	eddf 0a35 	vldr	s1, [pc, #212]	@ 81027e0 <armingMotors+0xe8>
 810270c:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 81027e0 <armingMotors+0xe8>
 8102710:	f7fe fda6 	bl	8101260 <setPWM>
	readImu();
 8102714:	f000 f87a 	bl	810280c <readImu>
	if(flag_print) {
 8102718:	4b32      	ldr	r3, [pc, #200]	@ (81027e4 <armingMotors+0xec>)
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	2b00      	cmp	r3, #0
 810271e:	d057      	beq.n	81027d0 <armingMotors+0xd8>
		printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\r\n", (double) MIN_DUTY, (double) MIN_DUTY, (double) MIN_DUTY, (double) MIN_DUTY, (double) roll, (double) pitch, 0.0, 0.0, 0.0, 0.0, (double) KPR, (double) KIR, (double) KDR, (double) KPP, (double) KIP, (double) KDP);
 8102720:	4b31      	ldr	r3, [pc, #196]	@ (81027e8 <armingMotors+0xf0>)
 8102722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8102726:	4b31      	ldr	r3, [pc, #196]	@ (81027ec <armingMotors+0xf4>)
 8102728:	e9d3 4500 	ldrd	r4, r5, [r3]
 810272c:	4b30      	ldr	r3, [pc, #192]	@ (81027f0 <armingMotors+0xf8>)
 810272e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8102732:	4b30      	ldr	r3, [pc, #192]	@ (81027f4 <armingMotors+0xfc>)
 8102734:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8102738:	4b2f      	ldr	r3, [pc, #188]	@ (81027f8 <armingMotors+0x100>)
 810273a:	ed93 7b00 	vldr	d7, [r3]
 810273e:	4b2f      	ldr	r3, [pc, #188]	@ (81027fc <armingMotors+0x104>)
 8102740:	ed93 6b00 	vldr	d6, [r3]
 8102744:	4b2e      	ldr	r3, [pc, #184]	@ (8102800 <armingMotors+0x108>)
 8102746:	ed93 5b00 	vldr	d5, [r3]
 810274a:	4b2e      	ldr	r3, [pc, #184]	@ (8102804 <armingMotors+0x10c>)
 810274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102750:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8102754:	ed8d 5b1a 	vstr	d5, [sp, #104]	@ 0x68
 8102758:	ed8d 6b18 	vstr	d6, [sp, #96]	@ 0x60
 810275c:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8102760:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8102764:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8102768:	f04f 0200 	mov.w	r2, #0
 810276c:	f04f 0300 	mov.w	r3, #0
 8102770:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8102774:	f04f 0200 	mov.w	r2, #0
 8102778:	f04f 0300 	mov.w	r3, #0
 810277c:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8102780:	f04f 0200 	mov.w	r2, #0
 8102784:	f04f 0300 	mov.w	r3, #0
 8102788:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810278c:	f04f 0200 	mov.w	r2, #0
 8102790:	f04f 0300 	mov.w	r3, #0
 8102794:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8102798:	e9cd 4508 	strd	r4, r5, [sp, #32]
 810279c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 81027a0:	a30d      	add	r3, pc, #52	@ (adr r3, 81027d8 <armingMotors+0xe0>)
 81027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 81027aa:	a30b      	add	r3, pc, #44	@ (adr r3, 81027d8 <armingMotors+0xe0>)
 81027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81027b4:	a308      	add	r3, pc, #32	@ (adr r3, 81027d8 <armingMotors+0xe0>)
 81027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ba:	e9cd 2300 	strd	r2, r3, [sp]
 81027be:	a306      	add	r3, pc, #24	@ (adr r3, 81027d8 <armingMotors+0xe0>)
 81027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027c4:	4810      	ldr	r0, [pc, #64]	@ (8102808 <armingMotors+0x110>)
 81027c6:	f008 f853 	bl	810a870 <iprintf>
		flag_print=0;
 81027ca:	4b06      	ldr	r3, [pc, #24]	@ (81027e4 <armingMotors+0xec>)
 81027cc:	2200      	movs	r2, #0
 81027ce:	601a      	str	r2, [r3, #0]
	}
}
 81027d0:	bf00      	nop
 81027d2:	46bd      	mov	sp, r7
 81027d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81027d8:	9999999a 	.word	0x9999999a
 81027dc:	40159999 	.word	0x40159999
 81027e0:	40accccd 	.word	0x40accccd
 81027e4:	1000049c 	.word	0x1000049c
 81027e8:	10000488 	.word	0x10000488
 81027ec:	10000480 	.word	0x10000480
 81027f0:	10000030 	.word	0x10000030
 81027f4:	10000038 	.word	0x10000038
 81027f8:	10000040 	.word	0x10000040
 81027fc:	10000018 	.word	0x10000018
 8102800:	10000020 	.word	0x10000020
 8102804:	10000028 	.word	0x10000028
 8102808:	0810e988 	.word	0x0810e988

0810280c <readImu>:


void readImu(){
 810280c:	b5b0      	push	{r4, r5, r7, lr}
 810280e:	b088      	sub	sp, #32
 8102810:	af00      	add	r7, sp, #0
	bno055_vector_t v = bno055_getVectorEuler();
 8102812:	f7ff f9ad 	bl	8101b70 <bno055_getVectorEuler>
 8102816:	eeb0 4a40 	vmov.f32	s8, s0
 810281a:	eef0 4a60 	vmov.f32	s9, s1
 810281e:	eeb0 5a41 	vmov.f32	s10, s2
 8102822:	eef0 5a61 	vmov.f32	s11, s3
 8102826:	eeb0 6a42 	vmov.f32	s12, s4
 810282a:	eef0 6a62 	vmov.f32	s13, s5
 810282e:	eeb0 7a43 	vmov.f32	s14, s6
 8102832:	eef0 7a63 	vmov.f32	s15, s7
 8102836:	ed87 4b00 	vstr	d4, [r7]
 810283a:	ed87 5b02 	vstr	d5, [r7, #8]
 810283e:	ed87 6b04 	vstr	d6, [r7, #16]
 8102842:	ed87 7b06 	vstr	d7, [r7, #24]
		  roll = v.y;
 8102846:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 810284a:	491a      	ldr	r1, [pc, #104]	@ (81028b4 <readImu+0xa8>)
 810284c:	e9c1 2300 	strd	r2, r3, [r1]
		  if (v.z < 0){
 8102850:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8102854:	f04f 0200 	mov.w	r2, #0
 8102858:	f04f 0300 	mov.w	r3, #0
 810285c:	f7fe f9c6 	bl	8100bec <__aeabi_dcmplt>
 8102860:	4603      	mov	r3, r0
 8102862:	2b00      	cmp	r3, #0
 8102864:	d011      	beq.n	810288a <readImu+0x7e>
			  pitch = -v.z - 180;
 8102866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810286a:	4614      	mov	r4, r2
 810286c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8102870:	f04f 0200 	mov.w	r2, #0
 8102874:	4b10      	ldr	r3, [pc, #64]	@ (81028b8 <readImu+0xac>)
 8102876:	4620      	mov	r0, r4
 8102878:	4629      	mov	r1, r5
 810287a:	f7fd fd8d 	bl	8100398 <__aeabi_dsub>
 810287e:	4602      	mov	r2, r0
 8102880:	460b      	mov	r3, r1
 8102882:	490e      	ldr	r1, [pc, #56]	@ (81028bc <readImu+0xb0>)
 8102884:	e9c1 2300 	strd	r2, r3, [r1]
 8102888:	e00b      	b.n	81028a2 <readImu+0x96>
		  }
		  else{
			  pitch = -v.z + 180;
 810288a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 810288e:	f04f 0000 	mov.w	r0, #0
 8102892:	4909      	ldr	r1, [pc, #36]	@ (81028b8 <readImu+0xac>)
 8102894:	f7fd fd80 	bl	8100398 <__aeabi_dsub>
 8102898:	4602      	mov	r2, r0
 810289a:	460b      	mov	r3, r1
 810289c:	4907      	ldr	r1, [pc, #28]	@ (81028bc <readImu+0xb0>)
 810289e:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  yaw=v.x;
 81028a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 81028a6:	4906      	ldr	r1, [pc, #24]	@ (81028c0 <readImu+0xb4>)
 81028a8:	e9c1 2300 	strd	r2, r3, [r1]

}
 81028ac:	bf00      	nop
 81028ae:	3720      	adds	r7, #32
 81028b0:	46bd      	mov	sp, r7
 81028b2:	bdb0      	pop	{r4, r5, r7, pc}
 81028b4:	10000488 	.word	0x10000488
 81028b8:	40668000 	.word	0x40668000
 81028bc:	10000480 	.word	0x10000480
 81028c0:	10000490 	.word	0x10000490

081028c4 <stabilize>:

void stabilize(){
 81028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81028c8:	ed2d 8b04 	vpush	{d8-d9}
 81028cc:	b0b8      	sub	sp, #224	@ 0xe0
 81028ce:	af1e      	add	r7, sp, #120	@ 0x78
	float virtualInputs[4];
	readImu();
 81028d0:	f7ff ff9c 	bl	810280c <readImu>
	  virtualInputs[0] = 11;
 81028d4:	4b72      	ldr	r3, [pc, #456]	@ (8102aa0 <stabilize+0x1dc>)
 81028d6:	647b      	str	r3, [r7, #68]	@ 0x44
	  virtualInputs[1] = PID_controller(&RollPID, roll, 0);
 81028d8:	4b72      	ldr	r3, [pc, #456]	@ (8102aa4 <stabilize+0x1e0>)
 81028da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028de:	4610      	mov	r0, r2
 81028e0:	4619      	mov	r1, r3
 81028e2:	f7fe fa09 	bl	8100cf8 <__aeabi_d2f>
 81028e6:	4603      	mov	r3, r0
 81028e8:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8102aa8 <stabilize+0x1e4>
 81028ec:	ee00 3a10 	vmov	s0, r3
 81028f0:	486e      	ldr	r0, [pc, #440]	@ (8102aac <stabilize+0x1e8>)
 81028f2:	f7fe ff19 	bl	8101728 <PID_controller>
 81028f6:	eef0 7a40 	vmov.f32	s15, s0
 81028fa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	  virtualInputs[2] = PID_controller(&PitchPID, pitch, 0);
 81028fe:	4b6c      	ldr	r3, [pc, #432]	@ (8102ab0 <stabilize+0x1ec>)
 8102900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102904:	4610      	mov	r0, r2
 8102906:	4619      	mov	r1, r3
 8102908:	f7fe f9f6 	bl	8100cf8 <__aeabi_d2f>
 810290c:	4603      	mov	r3, r0
 810290e:	eddf 0a66 	vldr	s1, [pc, #408]	@ 8102aa8 <stabilize+0x1e4>
 8102912:	ee00 3a10 	vmov	s0, r3
 8102916:	4867      	ldr	r0, [pc, #412]	@ (8102ab4 <stabilize+0x1f0>)
 8102918:	f7fe ff06 	bl	8101728 <PID_controller>
 810291c:	eef0 7a40 	vmov.f32	s15, s0
 8102920:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	  virtualInputs[3] = 0;
 8102924:	f04f 0300 	mov.w	r3, #0
 8102928:	653b      	str	r3, [r7, #80]	@ 0x50

	  float* Speeds;
	  Speeds = SpeedCompute(virtualInputs);
 810292a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 810292e:	4618      	mov	r0, r3
 8102930:	f7fe fd0e 	bl	8101350 <SpeedCompute>
 8102934:	6678      	str	r0, [r7, #100]	@ 0x64

	  //Sono stati messi degli offset nel tentativo di bilanciare se spinte dei due motori

	  float avgMotor1 = map(*(Speeds+0)) /*+ 0.019*/;
 8102936:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8102938:	edd3 7a00 	vldr	s15, [r3]
 810293c:	eeb0 0a67 	vmov.f32	s0, s15
 8102940:	f7fe fe66 	bl	8101610 <map>
 8102944:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
	  float avgMotor2 = map(*(Speeds+1)) /*+ 0.0295*/;
 8102948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810294a:	3304      	adds	r3, #4
 810294c:	edd3 7a00 	vldr	s15, [r3]
 8102950:	eeb0 0a67 	vmov.f32	s0, s15
 8102954:	f7fe fe5c 	bl	8101610 <map>
 8102958:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	  float avgMotor3 = map(*(Speeds+2)) /*- 0.019*/;
 810295c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 810295e:	3308      	adds	r3, #8
 8102960:	edd3 7a00 	vldr	s15, [r3]
 8102964:	eeb0 0a67 	vmov.f32	s0, s15
 8102968:	f7fe fe52 	bl	8101610 <map>
 810296c:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
	  float avgMotor4 = map(*(Speeds+3)) /*- 0.0295*/;
 8102970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8102972:	330c      	adds	r3, #12
 8102974:	edd3 7a00 	vldr	s15, [r3]
 8102978:	eeb0 0a67 	vmov.f32	s0, s15
 810297c:	f7fe fe48 	bl	8101610 <map>
 8102980:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54

	  if(flag_print) {
 8102984:	4b4c      	ldr	r3, [pc, #304]	@ (8102ab8 <stabilize+0x1f4>)
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	2b00      	cmp	r3, #0
 810298a:	d077      	beq.n	8102a7c <stabilize+0x1b8>
		  printf("%.2f, %.2f, %.2f, %.2f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\r\n", avgMotor1, avgMotor2, avgMotor3, avgMotor4, roll, pitch, virtualInputs[0], virtualInputs[1], virtualInputs[2], virtualInputs[3], (double) KPR, (double) KIR, (double) KDR, (double) KPP, (double) KIP, (double) KDP);
 810298c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 810298e:	f7fd fe63 	bl	8100658 <__aeabi_f2d>
 8102992:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8102996:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8102998:	f7fd fe5e 	bl	8100658 <__aeabi_f2d>
 810299c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 81029a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 81029a2:	f7fd fe59 	bl	8100658 <__aeabi_f2d>
 81029a6:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 81029aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 81029ac:	f7fd fe54 	bl	8100658 <__aeabi_f2d>
 81029b0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 81029b4:	4b3b      	ldr	r3, [pc, #236]	@ (8102aa4 <stabilize+0x1e0>)
 81029b6:	ed93 8b00 	vldr	d8, [r3]
 81029ba:	4b3d      	ldr	r3, [pc, #244]	@ (8102ab0 <stabilize+0x1ec>)
 81029bc:	ed93 9b00 	vldr	d9, [r3]
 81029c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81029c2:	4618      	mov	r0, r3
 81029c4:	f7fd fe48 	bl	8100658 <__aeabi_f2d>
 81029c8:	e9c7 0106 	strd	r0, r1, [r7, #24]
 81029cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81029ce:	4618      	mov	r0, r3
 81029d0:	f7fd fe42 	bl	8100658 <__aeabi_f2d>
 81029d4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 81029d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81029da:	4618      	mov	r0, r3
 81029dc:	f7fd fe3c 	bl	8100658 <__aeabi_f2d>
 81029e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 81029e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 81029e6:	4618      	mov	r0, r3
 81029e8:	f7fd fe36 	bl	8100658 <__aeabi_f2d>
 81029ec:	e9c7 0100 	strd	r0, r1, [r7]
 81029f0:	4b32      	ldr	r3, [pc, #200]	@ (8102abc <stabilize+0x1f8>)
 81029f2:	ed93 7b00 	vldr	d7, [r3]
 81029f6:	4b32      	ldr	r3, [pc, #200]	@ (8102ac0 <stabilize+0x1fc>)
 81029f8:	e9d3 ab00 	ldrd	sl, fp, [r3]
 81029fc:	4b31      	ldr	r3, [pc, #196]	@ (8102ac4 <stabilize+0x200>)
 81029fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8102a02:	4b31      	ldr	r3, [pc, #196]	@ (8102ac8 <stabilize+0x204>)
 8102a04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8102a08:	4b30      	ldr	r3, [pc, #192]	@ (8102acc <stabilize+0x208>)
 8102a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8102a0e:	4b30      	ldr	r3, [pc, #192]	@ (8102ad0 <stabilize+0x20c>)
 8102a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a14:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8102a18:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 8102a1c:	e9cd 4518 	strd	r4, r5, [sp, #96]	@ 0x60
 8102a20:	e9cd 8916 	strd	r8, r9, [sp, #88]	@ 0x58
 8102a24:	e9cd ab14 	strd	sl, fp, [sp, #80]	@ 0x50
 8102a28:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8102a2c:	ed97 7b00 	vldr	d7, [r7]
 8102a30:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8102a34:	ed97 7b02 	vldr	d7, [r7, #8]
 8102a38:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8102a3c:	ed97 7b04 	vldr	d7, [r7, #16]
 8102a40:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8102a44:	ed97 7b06 	vldr	d7, [r7, #24]
 8102a48:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8102a4c:	ed8d 9b08 	vstr	d9, [sp, #32]
 8102a50:	ed8d 8b06 	vstr	d8, [sp, #24]
 8102a54:	ed97 7b08 	vldr	d7, [r7, #32]
 8102a58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8102a5c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8102a60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8102a64:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8102a68:	ed8d 7b00 	vstr	d7, [sp]
 8102a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8102a70:	4818      	ldr	r0, [pc, #96]	@ (8102ad4 <stabilize+0x210>)
 8102a72:	f007 fefd 	bl	810a870 <iprintf>
		  flag_print=0;
 8102a76:	4b10      	ldr	r3, [pc, #64]	@ (8102ab8 <stabilize+0x1f4>)
 8102a78:	2200      	movs	r2, #0
 8102a7a:	601a      	str	r2, [r3, #0]
	  }

	  setPWM(avgMotor1, avgMotor2, avgMotor3, avgMotor4);
 8102a7c:	edd7 1a15 	vldr	s3, [r7, #84]	@ 0x54
 8102a80:	ed97 1a16 	vldr	s2, [r7, #88]	@ 0x58
 8102a84:	edd7 0a17 	vldr	s1, [r7, #92]	@ 0x5c
 8102a88:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8102a8c:	f7fe fbe8 	bl	8101260 <setPWM>

}
 8102a90:	bf00      	nop
 8102a92:	3768      	adds	r7, #104	@ 0x68
 8102a94:	46bd      	mov	sp, r7
 8102a96:	ecbd 8b04 	vpop	{d8-d9}
 8102a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102a9e:	bf00      	nop
 8102aa0:	41300000 	.word	0x41300000
 8102aa4:	10000488 	.word	0x10000488
 8102aa8:	00000000 	.word	0x00000000
 8102aac:	10000460 	.word	0x10000460
 8102ab0:	10000480 	.word	0x10000480
 8102ab4:	10000440 	.word	0x10000440
 8102ab8:	1000049c 	.word	0x1000049c
 8102abc:	10000030 	.word	0x10000030
 8102ac0:	10000038 	.word	0x10000038
 8102ac4:	10000040 	.word	0x10000040
 8102ac8:	10000018 	.word	0x10000018
 8102acc:	10000020 	.word	0x10000020
 8102ad0:	10000028 	.word	0x10000028
 8102ad4:	0810e988 	.word	0x0810e988

08102ad8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8102ad8:	b480      	push	{r7}
 8102ada:	b083      	sub	sp, #12
 8102adc:	af00      	add	r7, sp, #0
 8102ade:	6078      	str	r0, [r7, #4]
	flag_Tc=1;
 8102ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8102b1c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8102ae2:	2201      	movs	r2, #1
 8102ae4:	601a      	str	r2, [r3, #0]
	if(htim==&htim1){
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8102b20 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8102aea:	4293      	cmp	r3, r2
 8102aec:	d10f      	bne.n	8102b0e <HAL_TIM_PeriodElapsedCallback+0x36>
		if(n==10){
 8102aee:	4b0d      	ldr	r3, [pc, #52]	@ (8102b24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	2b0a      	cmp	r3, #10
 8102af4:	d106      	bne.n	8102b04 <HAL_TIM_PeriodElapsedCallback+0x2c>
			n=0;
 8102af6:	4b0b      	ldr	r3, [pc, #44]	@ (8102b24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102af8:	2200      	movs	r2, #0
 8102afa:	601a      	str	r2, [r3, #0]
			flag_print=1;
 8102afc:	4b0a      	ldr	r3, [pc, #40]	@ (8102b28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102afe:	2201      	movs	r2, #1
 8102b00:	601a      	str	r2, [r3, #0]
		}
		else{
			n++;
		}
	}
}
 8102b02:	e004      	b.n	8102b0e <HAL_TIM_PeriodElapsedCallback+0x36>
			n++;
 8102b04:	4b07      	ldr	r3, [pc, #28]	@ (8102b24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	3301      	adds	r3, #1
 8102b0a:	4a06      	ldr	r2, [pc, #24]	@ (8102b24 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102b0c:	6013      	str	r3, [r2, #0]
}
 8102b0e:	bf00      	nop
 8102b10:	370c      	adds	r7, #12
 8102b12:	46bd      	mov	sp, r7
 8102b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b18:	4770      	bx	lr
 8102b1a:	bf00      	nop
 8102b1c:	10000438 	.word	0x10000438
 8102b20:	100002bc 	.word	0x100002bc
 8102b24:	10000498 	.word	0x10000498
 8102b28:	1000049c 	.word	0x1000049c

08102b2c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102b2c:	b580      	push	{r7, lr}
 8102b2e:	b084      	sub	sp, #16
 8102b30:	af00      	add	r7, sp, #0
 8102b32:	6078      	str	r0, [r7, #4]
	if(htim==&htim5){
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	4a18      	ldr	r2, [pc, #96]	@ (8102b98 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8102b38:	4293      	cmp	r3, r2
 8102b3a:	d128      	bne.n	8102b8e <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	7f1b      	ldrb	r3, [r3, #28]
 8102b40:	2b01      	cmp	r3, #1
 8102b42:	d124      	bne.n	8102b8e <HAL_TIM_IC_CaptureCallback+0x62>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8102b44:	2100      	movs	r1, #0
 8102b46:	6878      	ldr	r0, [r7, #4]
 8102b48:	f004 fe9c 	bl	8107884 <HAL_TIM_ReadCapturedValue>
 8102b4c:	60f8      	str	r0, [r7, #12]

			if (ICValue != 0)
 8102b4e:	68fb      	ldr	r3, [r7, #12]
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d01c      	beq.n	8102b8e <HAL_TIM_IC_CaptureCallback+0x62>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 8102b54:	2104      	movs	r1, #4
 8102b56:	6878      	ldr	r0, [r7, #4]
 8102b58:	f004 fe94 	bl	8107884 <HAL_TIM_ReadCapturedValue>
 8102b5c:	4603      	mov	r3, r0
 8102b5e:	2264      	movs	r2, #100	@ 0x64
 8102b60:	fb03 f202 	mul.w	r2, r3, r2
 8102b64:	68fb      	ldr	r3, [r7, #12]
 8102b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8102b6a:	60bb      	str	r3, [r7, #8]
				if(duty_received >= 11){
 8102b6c:	68bb      	ldr	r3, [r7, #8]
 8102b6e:	2b0a      	cmp	r3, #10
 8102b70:	d903      	bls.n	8102b7a <HAL_TIM_IC_CaptureCallback+0x4e>
					mode = 0;
 8102b72:	4b0a      	ldr	r3, [pc, #40]	@ (8102b9c <HAL_TIM_IC_CaptureCallback+0x70>)
 8102b74:	2200      	movs	r2, #0
 8102b76:	601a      	str	r2, [r3, #0]
					mode = 1;
				}
			}
		}
	}
}
 8102b78:	e009      	b.n	8102b8e <HAL_TIM_IC_CaptureCallback+0x62>
				else if (duty_received <= 8){
 8102b7a:	68bb      	ldr	r3, [r7, #8]
 8102b7c:	2b08      	cmp	r3, #8
 8102b7e:	d803      	bhi.n	8102b88 <HAL_TIM_IC_CaptureCallback+0x5c>
					mode = 2;
 8102b80:	4b06      	ldr	r3, [pc, #24]	@ (8102b9c <HAL_TIM_IC_CaptureCallback+0x70>)
 8102b82:	2202      	movs	r2, #2
 8102b84:	601a      	str	r2, [r3, #0]
}
 8102b86:	e002      	b.n	8102b8e <HAL_TIM_IC_CaptureCallback+0x62>
					mode = 1;
 8102b88:	4b04      	ldr	r3, [pc, #16]	@ (8102b9c <HAL_TIM_IC_CaptureCallback+0x70>)
 8102b8a:	2201      	movs	r2, #1
 8102b8c:	601a      	str	r2, [r3, #0]
}
 8102b8e:	bf00      	nop
 8102b90:	3710      	adds	r7, #16
 8102b92:	46bd      	mov	sp, r7
 8102b94:	bd80      	pop	{r7, pc}
 8102b96:	bf00      	nop
 8102b98:	10000354 	.word	0x10000354
 8102b9c:	1000043c 	.word	0x1000043c

08102ba0 <__io_putchar>:


int __io_putchar(int ch){
 8102ba0:	b580      	push	{r7, lr}
 8102ba2:	b082      	sub	sp, #8
 8102ba4:	af00      	add	r7, sp, #0
 8102ba6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xffff);
 8102ba8:	1d39      	adds	r1, r7, #4
 8102baa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8102bae:	2201      	movs	r2, #1
 8102bb0:	4803      	ldr	r0, [pc, #12]	@ (8102bc0 <__io_putchar+0x20>)
 8102bb2:	f005 fe17 	bl	81087e4 <HAL_UART_Transmit>
	return ch;
 8102bb6:	687b      	ldr	r3, [r7, #4]
}
 8102bb8:	4618      	mov	r0, r3
 8102bba:	3708      	adds	r7, #8
 8102bbc:	46bd      	mov	sp, r7
 8102bbe:	bd80      	pop	{r7, pc}
 8102bc0:	100003a0 	.word	0x100003a0

08102bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102bc4:	b480      	push	{r7}
 8102bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102bc8:	b672      	cpsid	i
}
 8102bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102bcc:	bf00      	nop
 8102bce:	e7fd      	b.n	8102bcc <Error_Handler+0x8>

08102bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102bd0:	b480      	push	{r7}
 8102bd2:	b083      	sub	sp, #12
 8102bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8102c00 <HAL_MspInit+0x30>)
 8102bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102bdc:	4a08      	ldr	r2, [pc, #32]	@ (8102c00 <HAL_MspInit+0x30>)
 8102bde:	f043 0302 	orr.w	r3, r3, #2
 8102be2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102be6:	4b06      	ldr	r3, [pc, #24]	@ (8102c00 <HAL_MspInit+0x30>)
 8102be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102bec:	f003 0302 	and.w	r3, r3, #2
 8102bf0:	607b      	str	r3, [r7, #4]
 8102bf2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102bf4:	bf00      	nop
 8102bf6:	370c      	adds	r7, #12
 8102bf8:	46bd      	mov	sp, r7
 8102bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfe:	4770      	bx	lr
 8102c00:	58024400 	.word	0x58024400

08102c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102c04:	b580      	push	{r7, lr}
 8102c06:	b0ba      	sub	sp, #232	@ 0xe8
 8102c08:	af00      	add	r7, sp, #0
 8102c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102c0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102c10:	2200      	movs	r2, #0
 8102c12:	601a      	str	r2, [r3, #0]
 8102c14:	605a      	str	r2, [r3, #4]
 8102c16:	609a      	str	r2, [r3, #8]
 8102c18:	60da      	str	r2, [r3, #12]
 8102c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102c1c:	f107 0310 	add.w	r3, r7, #16
 8102c20:	22c0      	movs	r2, #192	@ 0xc0
 8102c22:	2100      	movs	r1, #0
 8102c24:	4618      	mov	r0, r3
 8102c26:	f007 ff8b 	bl	810ab40 <memset>
  if(hi2c->Instance==I2C1)
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	4a26      	ldr	r2, [pc, #152]	@ (8102cc8 <HAL_I2C_MspInit+0xc4>)
 8102c30:	4293      	cmp	r3, r2
 8102c32:	d145      	bne.n	8102cc0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102c34:	f04f 0208 	mov.w	r2, #8
 8102c38:	f04f 0300 	mov.w	r3, #0
 8102c3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102c40:	2300      	movs	r3, #0
 8102c42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102c46:	f107 0310 	add.w	r3, r7, #16
 8102c4a:	4618      	mov	r0, r3
 8102c4c:	f001 ff06 	bl	8104a5c <HAL_RCCEx_PeriphCLKConfig>
 8102c50:	4603      	mov	r3, r0
 8102c52:	2b00      	cmp	r3, #0
 8102c54:	d001      	beq.n	8102c5a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102c56:	f7ff ffb5 	bl	8102bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8102ccc <HAL_I2C_MspInit+0xc8>)
 8102c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c60:	4a1a      	ldr	r2, [pc, #104]	@ (8102ccc <HAL_I2C_MspInit+0xc8>)
 8102c62:	f043 0302 	orr.w	r3, r3, #2
 8102c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102c6a:	4b18      	ldr	r3, [pc, #96]	@ (8102ccc <HAL_I2C_MspInit+0xc8>)
 8102c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102c70:	f003 0302 	and.w	r3, r3, #2
 8102c74:	60fb      	str	r3, [r7, #12]
 8102c76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102c78:	23c0      	movs	r3, #192	@ 0xc0
 8102c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102c7e:	2312      	movs	r3, #18
 8102c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102c84:	2300      	movs	r3, #0
 8102c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102c8a:	2300      	movs	r3, #0
 8102c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102c90:	2304      	movs	r3, #4
 8102c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102c96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102c9a:	4619      	mov	r1, r3
 8102c9c:	480c      	ldr	r0, [pc, #48]	@ (8102cd0 <HAL_I2C_MspInit+0xcc>)
 8102c9e:	f000 fcb9 	bl	8103614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8102ccc <HAL_I2C_MspInit+0xc8>)
 8102ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102ca8:	4a08      	ldr	r2, [pc, #32]	@ (8102ccc <HAL_I2C_MspInit+0xc8>)
 8102caa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102cae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102cb2:	4b06      	ldr	r3, [pc, #24]	@ (8102ccc <HAL_I2C_MspInit+0xc8>)
 8102cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102cbc:	60bb      	str	r3, [r7, #8]
 8102cbe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8102cc0:	bf00      	nop
 8102cc2:	37e8      	adds	r7, #232	@ 0xe8
 8102cc4:	46bd      	mov	sp, r7
 8102cc6:	bd80      	pop	{r7, pc}
 8102cc8:	40005400 	.word	0x40005400
 8102ccc:	58024400 	.word	0x58024400
 8102cd0:	58020400 	.word	0x58020400

08102cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102cd4:	b580      	push	{r7, lr}
 8102cd6:	b08c      	sub	sp, #48	@ 0x30
 8102cd8:	af00      	add	r7, sp, #0
 8102cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102cdc:	f107 031c 	add.w	r3, r7, #28
 8102ce0:	2200      	movs	r2, #0
 8102ce2:	601a      	str	r2, [r3, #0]
 8102ce4:	605a      	str	r2, [r3, #4]
 8102ce6:	609a      	str	r2, [r3, #8]
 8102ce8:	60da      	str	r2, [r3, #12]
 8102cea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a37      	ldr	r2, [pc, #220]	@ (8102dd0 <HAL_TIM_Base_MspInit+0xfc>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d117      	bne.n	8102d26 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102cf6:	4b37      	ldr	r3, [pc, #220]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102cfc:	4a35      	ldr	r2, [pc, #212]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102cfe:	f043 0301 	orr.w	r3, r3, #1
 8102d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102d06:	4b33      	ldr	r3, [pc, #204]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102d0c:	f003 0301 	and.w	r3, r3, #1
 8102d10:	61bb      	str	r3, [r7, #24]
 8102d12:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8102d14:	2200      	movs	r2, #0
 8102d16:	2100      	movs	r1, #0
 8102d18:	2019      	movs	r0, #25
 8102d1a:	f000 fc32 	bl	8103582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8102d1e:	2019      	movs	r0, #25
 8102d20:	f000 fc49 	bl	81035b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8102d24:	e04f      	b.n	8102dc6 <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8102dd8 <HAL_TIM_Base_MspInit+0x104>)
 8102d2c:	4293      	cmp	r3, r2
 8102d2e:	d10f      	bne.n	8102d50 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102d30:	4b28      	ldr	r3, [pc, #160]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d36:	4a27      	ldr	r2, [pc, #156]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d38:	f043 0302 	orr.w	r3, r3, #2
 8102d3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102d40:	4b24      	ldr	r3, [pc, #144]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d46:	f003 0302 	and.w	r3, r3, #2
 8102d4a:	617b      	str	r3, [r7, #20]
 8102d4c:	697b      	ldr	r3, [r7, #20]
}
 8102d4e:	e03a      	b.n	8102dc6 <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM5)
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	4a21      	ldr	r2, [pc, #132]	@ (8102ddc <HAL_TIM_Base_MspInit+0x108>)
 8102d56:	4293      	cmp	r3, r2
 8102d58:	d135      	bne.n	8102dc6 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8102d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d60:	4a1c      	ldr	r2, [pc, #112]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d62:	f043 0308 	orr.w	r3, r3, #8
 8102d66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102d70:	f003 0308 	and.w	r3, r3, #8
 8102d74:	613b      	str	r3, [r7, #16]
 8102d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102d78:	4b16      	ldr	r3, [pc, #88]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d7e:	4a15      	ldr	r2, [pc, #84]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d80:	f043 0301 	orr.w	r3, r3, #1
 8102d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102d88:	4b12      	ldr	r3, [pc, #72]	@ (8102dd4 <HAL_TIM_Base_MspInit+0x100>)
 8102d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102d8e:	f003 0301 	and.w	r3, r3, #1
 8102d92:	60fb      	str	r3, [r7, #12]
 8102d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102d96:	2301      	movs	r3, #1
 8102d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102d9a:	2302      	movs	r3, #2
 8102d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102d9e:	2300      	movs	r3, #0
 8102da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102da2:	2300      	movs	r3, #0
 8102da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8102da6:	2302      	movs	r3, #2
 8102da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102daa:	f107 031c 	add.w	r3, r7, #28
 8102dae:	4619      	mov	r1, r3
 8102db0:	480b      	ldr	r0, [pc, #44]	@ (8102de0 <HAL_TIM_Base_MspInit+0x10c>)
 8102db2:	f000 fc2f 	bl	8103614 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8102db6:	2200      	movs	r2, #0
 8102db8:	2100      	movs	r1, #0
 8102dba:	2032      	movs	r0, #50	@ 0x32
 8102dbc:	f000 fbe1 	bl	8103582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102dc0:	2032      	movs	r0, #50	@ 0x32
 8102dc2:	f000 fbf8 	bl	81035b6 <HAL_NVIC_EnableIRQ>
}
 8102dc6:	bf00      	nop
 8102dc8:	3730      	adds	r7, #48	@ 0x30
 8102dca:	46bd      	mov	sp, r7
 8102dcc:	bd80      	pop	{r7, pc}
 8102dce:	bf00      	nop
 8102dd0:	40010000 	.word	0x40010000
 8102dd4:	58024400 	.word	0x58024400
 8102dd8:	40000400 	.word	0x40000400
 8102ddc:	40000c00 	.word	0x40000c00
 8102de0:	58020000 	.word	0x58020000

08102de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102de4:	b580      	push	{r7, lr}
 8102de6:	b08a      	sub	sp, #40	@ 0x28
 8102de8:	af00      	add	r7, sp, #0
 8102dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102dec:	f107 0314 	add.w	r3, r7, #20
 8102df0:	2200      	movs	r2, #0
 8102df2:	601a      	str	r2, [r3, #0]
 8102df4:	605a      	str	r2, [r3, #4]
 8102df6:	609a      	str	r2, [r3, #8]
 8102df8:	60da      	str	r2, [r3, #12]
 8102dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	4a32      	ldr	r2, [pc, #200]	@ (8102ecc <HAL_TIM_MspPostInit+0xe8>)
 8102e02:	4293      	cmp	r3, r2
 8102e04:	d15d      	bne.n	8102ec2 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102e06:	4b32      	ldr	r3, [pc, #200]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e0c:	4a30      	ldr	r2, [pc, #192]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e0e:	f043 0301 	orr.w	r3, r3, #1
 8102e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102e16:	4b2e      	ldr	r3, [pc, #184]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e1c:	f003 0301 	and.w	r3, r3, #1
 8102e20:	613b      	str	r3, [r7, #16]
 8102e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102e24:	4b2a      	ldr	r3, [pc, #168]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e2a:	4a29      	ldr	r2, [pc, #164]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e2c:	f043 0302 	orr.w	r3, r3, #2
 8102e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102e34:	4b26      	ldr	r3, [pc, #152]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e3a:	f003 0302 	and.w	r3, r3, #2
 8102e3e:	60fb      	str	r3, [r7, #12]
 8102e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8102e42:	4b23      	ldr	r3, [pc, #140]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e48:	4a21      	ldr	r2, [pc, #132]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e4a:	f043 0304 	orr.w	r3, r3, #4
 8102e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102e52:	4b1f      	ldr	r3, [pc, #124]	@ (8102ed0 <HAL_TIM_MspPostInit+0xec>)
 8102e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102e58:	f003 0304 	and.w	r3, r3, #4
 8102e5c:	60bb      	str	r3, [r7, #8]
 8102e5e:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8102e60:	2340      	movs	r3, #64	@ 0x40
 8102e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102e64:	2302      	movs	r3, #2
 8102e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e68:	2300      	movs	r3, #0
 8102e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e6c:	2300      	movs	r3, #0
 8102e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102e70:	2302      	movs	r3, #2
 8102e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102e74:	f107 0314 	add.w	r3, r7, #20
 8102e78:	4619      	mov	r1, r3
 8102e7a:	4816      	ldr	r0, [pc, #88]	@ (8102ed4 <HAL_TIM_MspPostInit+0xf0>)
 8102e7c:	f000 fbca 	bl	8103614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8102e80:	2302      	movs	r3, #2
 8102e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102e84:	2302      	movs	r3, #2
 8102e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e88:	2300      	movs	r3, #0
 8102e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e8c:	2300      	movs	r3, #0
 8102e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102e90:	2302      	movs	r3, #2
 8102e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102e94:	f107 0314 	add.w	r3, r7, #20
 8102e98:	4619      	mov	r1, r3
 8102e9a:	480f      	ldr	r0, [pc, #60]	@ (8102ed8 <HAL_TIM_MspPostInit+0xf4>)
 8102e9c:	f000 fbba 	bl	8103614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8102ea0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8102ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102ea6:	2302      	movs	r3, #2
 8102ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102eaa:	2300      	movs	r3, #0
 8102eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102eae:	2300      	movs	r3, #0
 8102eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8102eb2:	2302      	movs	r3, #2
 8102eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8102eb6:	f107 0314 	add.w	r3, r7, #20
 8102eba:	4619      	mov	r1, r3
 8102ebc:	4807      	ldr	r0, [pc, #28]	@ (8102edc <HAL_TIM_MspPostInit+0xf8>)
 8102ebe:	f000 fba9 	bl	8103614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8102ec2:	bf00      	nop
 8102ec4:	3728      	adds	r7, #40	@ 0x28
 8102ec6:	46bd      	mov	sp, r7
 8102ec8:	bd80      	pop	{r7, pc}
 8102eca:	bf00      	nop
 8102ecc:	40000400 	.word	0x40000400
 8102ed0:	58024400 	.word	0x58024400
 8102ed4:	58020000 	.word	0x58020000
 8102ed8:	58020400 	.word	0x58020400
 8102edc:	58020800 	.word	0x58020800

08102ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102ee0:	b580      	push	{r7, lr}
 8102ee2:	b0ba      	sub	sp, #232	@ 0xe8
 8102ee4:	af00      	add	r7, sp, #0
 8102ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ee8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102eec:	2200      	movs	r2, #0
 8102eee:	601a      	str	r2, [r3, #0]
 8102ef0:	605a      	str	r2, [r3, #4]
 8102ef2:	609a      	str	r2, [r3, #8]
 8102ef4:	60da      	str	r2, [r3, #12]
 8102ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102ef8:	f107 0310 	add.w	r3, r7, #16
 8102efc:	22c0      	movs	r2, #192	@ 0xc0
 8102efe:	2100      	movs	r1, #0
 8102f00:	4618      	mov	r0, r3
 8102f02:	f007 fe1d 	bl	810ab40 <memset>
  if(huart->Instance==USART3)
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	681b      	ldr	r3, [r3, #0]
 8102f0a:	4a27      	ldr	r2, [pc, #156]	@ (8102fa8 <HAL_UART_MspInit+0xc8>)
 8102f0c:	4293      	cmp	r3, r2
 8102f0e:	d146      	bne.n	8102f9e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102f10:	f04f 0202 	mov.w	r2, #2
 8102f14:	f04f 0300 	mov.w	r3, #0
 8102f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102f1c:	2300      	movs	r3, #0
 8102f1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102f22:	f107 0310 	add.w	r3, r7, #16
 8102f26:	4618      	mov	r0, r3
 8102f28:	f001 fd98 	bl	8104a5c <HAL_RCCEx_PeriphCLKConfig>
 8102f2c:	4603      	mov	r3, r0
 8102f2e:	2b00      	cmp	r3, #0
 8102f30:	d001      	beq.n	8102f36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8102f32:	f7ff fe47 	bl	8102bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102f36:	4b1d      	ldr	r3, [pc, #116]	@ (8102fac <HAL_UART_MspInit+0xcc>)
 8102f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8102fac <HAL_UART_MspInit+0xcc>)
 8102f3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8102f42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102f46:	4b19      	ldr	r3, [pc, #100]	@ (8102fac <HAL_UART_MspInit+0xcc>)
 8102f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102f4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8102f50:	60fb      	str	r3, [r7, #12]
 8102f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102f54:	4b15      	ldr	r3, [pc, #84]	@ (8102fac <HAL_UART_MspInit+0xcc>)
 8102f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f5a:	4a14      	ldr	r2, [pc, #80]	@ (8102fac <HAL_UART_MspInit+0xcc>)
 8102f5c:	f043 0308 	orr.w	r3, r3, #8
 8102f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102f64:	4b11      	ldr	r3, [pc, #68]	@ (8102fac <HAL_UART_MspInit+0xcc>)
 8102f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102f6a:	f003 0308 	and.w	r3, r3, #8
 8102f6e:	60bb      	str	r3, [r7, #8]
 8102f70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102f72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f7a:	2302      	movs	r3, #2
 8102f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f80:	2300      	movs	r3, #0
 8102f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f86:	2300      	movs	r3, #0
 8102f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102f8c:	2307      	movs	r3, #7
 8102f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102f92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102f96:	4619      	mov	r1, r3
 8102f98:	4805      	ldr	r0, [pc, #20]	@ (8102fb0 <HAL_UART_MspInit+0xd0>)
 8102f9a:	f000 fb3b 	bl	8103614 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8102f9e:	bf00      	nop
 8102fa0:	37e8      	adds	r7, #232	@ 0xe8
 8102fa2:	46bd      	mov	sp, r7
 8102fa4:	bd80      	pop	{r7, pc}
 8102fa6:	bf00      	nop
 8102fa8:	40004800 	.word	0x40004800
 8102fac:	58024400 	.word	0x58024400
 8102fb0:	58020c00 	.word	0x58020c00

08102fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102fb4:	b480      	push	{r7}
 8102fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102fb8:	bf00      	nop
 8102fba:	e7fd      	b.n	8102fb8 <NMI_Handler+0x4>

08102fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102fbc:	b480      	push	{r7}
 8102fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102fc0:	bf00      	nop
 8102fc2:	e7fd      	b.n	8102fc0 <HardFault_Handler+0x4>

08102fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102fc4:	b480      	push	{r7}
 8102fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102fc8:	bf00      	nop
 8102fca:	e7fd      	b.n	8102fc8 <MemManage_Handler+0x4>

08102fcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102fcc:	b480      	push	{r7}
 8102fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102fd0:	bf00      	nop
 8102fd2:	e7fd      	b.n	8102fd0 <BusFault_Handler+0x4>

08102fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102fd4:	b480      	push	{r7}
 8102fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102fd8:	bf00      	nop
 8102fda:	e7fd      	b.n	8102fd8 <UsageFault_Handler+0x4>

08102fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102fdc:	b480      	push	{r7}
 8102fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102fe0:	bf00      	nop
 8102fe2:	46bd      	mov	sp, r7
 8102fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fe8:	4770      	bx	lr

08102fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102fea:	b480      	push	{r7}
 8102fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102fee:	bf00      	nop
 8102ff0:	46bd      	mov	sp, r7
 8102ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ff6:	4770      	bx	lr

08102ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102ff8:	b480      	push	{r7}
 8102ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102ffc:	bf00      	nop
 8102ffe:	46bd      	mov	sp, r7
 8103000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103004:	4770      	bx	lr

08103006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8103006:	b580      	push	{r7, lr}
 8103008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810300a:	f000 f99b 	bl	8103344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810300e:	bf00      	nop
 8103010:	bd80      	pop	{r7, pc}
	...

08103014 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8103014:	b580      	push	{r7, lr}
 8103016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8103018:	4802      	ldr	r0, [pc, #8]	@ (8103024 <TIM1_UP_IRQHandler+0x10>)
 810301a:	f004 f841 	bl	81070a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 810301e:	bf00      	nop
 8103020:	bd80      	pop	{r7, pc}
 8103022:	bf00      	nop
 8103024:	100002bc 	.word	0x100002bc

08103028 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8103028:	b580      	push	{r7, lr}
 810302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 810302c:	4802      	ldr	r0, [pc, #8]	@ (8103038 <TIM5_IRQHandler+0x10>)
 810302e:	f004 f837 	bl	81070a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8103032:	bf00      	nop
 8103034:	bd80      	pop	{r7, pc}
 8103036:	bf00      	nop
 8103038:	10000354 	.word	0x10000354

0810303c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 810303c:	b480      	push	{r7}
 810303e:	af00      	add	r7, sp, #0
  return 1;
 8103040:	2301      	movs	r3, #1
}
 8103042:	4618      	mov	r0, r3
 8103044:	46bd      	mov	sp, r7
 8103046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810304a:	4770      	bx	lr

0810304c <_kill>:

int _kill(int pid, int sig)
{
 810304c:	b580      	push	{r7, lr}
 810304e:	b082      	sub	sp, #8
 8103050:	af00      	add	r7, sp, #0
 8103052:	6078      	str	r0, [r7, #4]
 8103054:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8103056:	f007 fdc5 	bl	810abe4 <__errno>
 810305a:	4603      	mov	r3, r0
 810305c:	2216      	movs	r2, #22
 810305e:	601a      	str	r2, [r3, #0]
  return -1;
 8103060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8103064:	4618      	mov	r0, r3
 8103066:	3708      	adds	r7, #8
 8103068:	46bd      	mov	sp, r7
 810306a:	bd80      	pop	{r7, pc}

0810306c <_exit>:

void _exit (int status)
{
 810306c:	b580      	push	{r7, lr}
 810306e:	b082      	sub	sp, #8
 8103070:	af00      	add	r7, sp, #0
 8103072:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8103074:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8103078:	6878      	ldr	r0, [r7, #4]
 810307a:	f7ff ffe7 	bl	810304c <_kill>
  while (1) {}    /* Make sure we hang here */
 810307e:	bf00      	nop
 8103080:	e7fd      	b.n	810307e <_exit+0x12>

08103082 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8103082:	b580      	push	{r7, lr}
 8103084:	b086      	sub	sp, #24
 8103086:	af00      	add	r7, sp, #0
 8103088:	60f8      	str	r0, [r7, #12]
 810308a:	60b9      	str	r1, [r7, #8]
 810308c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810308e:	2300      	movs	r3, #0
 8103090:	617b      	str	r3, [r7, #20]
 8103092:	e00a      	b.n	81030aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8103094:	f3af 8000 	nop.w
 8103098:	4601      	mov	r1, r0
 810309a:	68bb      	ldr	r3, [r7, #8]
 810309c:	1c5a      	adds	r2, r3, #1
 810309e:	60ba      	str	r2, [r7, #8]
 81030a0:	b2ca      	uxtb	r2, r1
 81030a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81030a4:	697b      	ldr	r3, [r7, #20]
 81030a6:	3301      	adds	r3, #1
 81030a8:	617b      	str	r3, [r7, #20]
 81030aa:	697a      	ldr	r2, [r7, #20]
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	429a      	cmp	r2, r3
 81030b0:	dbf0      	blt.n	8103094 <_read+0x12>
  }

  return len;
 81030b2:	687b      	ldr	r3, [r7, #4]
}
 81030b4:	4618      	mov	r0, r3
 81030b6:	3718      	adds	r7, #24
 81030b8:	46bd      	mov	sp, r7
 81030ba:	bd80      	pop	{r7, pc}

081030bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81030bc:	b580      	push	{r7, lr}
 81030be:	b086      	sub	sp, #24
 81030c0:	af00      	add	r7, sp, #0
 81030c2:	60f8      	str	r0, [r7, #12]
 81030c4:	60b9      	str	r1, [r7, #8]
 81030c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81030c8:	2300      	movs	r3, #0
 81030ca:	617b      	str	r3, [r7, #20]
 81030cc:	e009      	b.n	81030e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81030ce:	68bb      	ldr	r3, [r7, #8]
 81030d0:	1c5a      	adds	r2, r3, #1
 81030d2:	60ba      	str	r2, [r7, #8]
 81030d4:	781b      	ldrb	r3, [r3, #0]
 81030d6:	4618      	mov	r0, r3
 81030d8:	f7ff fd62 	bl	8102ba0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81030dc:	697b      	ldr	r3, [r7, #20]
 81030de:	3301      	adds	r3, #1
 81030e0:	617b      	str	r3, [r7, #20]
 81030e2:	697a      	ldr	r2, [r7, #20]
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	429a      	cmp	r2, r3
 81030e8:	dbf1      	blt.n	81030ce <_write+0x12>
  }
  return len;
 81030ea:	687b      	ldr	r3, [r7, #4]
}
 81030ec:	4618      	mov	r0, r3
 81030ee:	3718      	adds	r7, #24
 81030f0:	46bd      	mov	sp, r7
 81030f2:	bd80      	pop	{r7, pc}

081030f4 <_close>:

int _close(int file)
{
 81030f4:	b480      	push	{r7}
 81030f6:	b083      	sub	sp, #12
 81030f8:	af00      	add	r7, sp, #0
 81030fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81030fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8103100:	4618      	mov	r0, r3
 8103102:	370c      	adds	r7, #12
 8103104:	46bd      	mov	sp, r7
 8103106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810310a:	4770      	bx	lr

0810310c <_fstat>:


int _fstat(int file, struct stat *st)
{
 810310c:	b480      	push	{r7}
 810310e:	b083      	sub	sp, #12
 8103110:	af00      	add	r7, sp, #0
 8103112:	6078      	str	r0, [r7, #4]
 8103114:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8103116:	683b      	ldr	r3, [r7, #0]
 8103118:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 810311c:	605a      	str	r2, [r3, #4]
  return 0;
 810311e:	2300      	movs	r3, #0
}
 8103120:	4618      	mov	r0, r3
 8103122:	370c      	adds	r7, #12
 8103124:	46bd      	mov	sp, r7
 8103126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810312a:	4770      	bx	lr

0810312c <_isatty>:

int _isatty(int file)
{
 810312c:	b480      	push	{r7}
 810312e:	b083      	sub	sp, #12
 8103130:	af00      	add	r7, sp, #0
 8103132:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8103134:	2301      	movs	r3, #1
}
 8103136:	4618      	mov	r0, r3
 8103138:	370c      	adds	r7, #12
 810313a:	46bd      	mov	sp, r7
 810313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103140:	4770      	bx	lr

08103142 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103142:	b480      	push	{r7}
 8103144:	b085      	sub	sp, #20
 8103146:	af00      	add	r7, sp, #0
 8103148:	60f8      	str	r0, [r7, #12]
 810314a:	60b9      	str	r1, [r7, #8]
 810314c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810314e:	2300      	movs	r3, #0
}
 8103150:	4618      	mov	r0, r3
 8103152:	3714      	adds	r7, #20
 8103154:	46bd      	mov	sp, r7
 8103156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810315a:	4770      	bx	lr

0810315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810315c:	b580      	push	{r7, lr}
 810315e:	b086      	sub	sp, #24
 8103160:	af00      	add	r7, sp, #0
 8103162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103164:	4a14      	ldr	r2, [pc, #80]	@ (81031b8 <_sbrk+0x5c>)
 8103166:	4b15      	ldr	r3, [pc, #84]	@ (81031bc <_sbrk+0x60>)
 8103168:	1ad3      	subs	r3, r2, r3
 810316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810316c:	697b      	ldr	r3, [r7, #20]
 810316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103170:	4b13      	ldr	r3, [pc, #76]	@ (81031c0 <_sbrk+0x64>)
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	2b00      	cmp	r3, #0
 8103176:	d102      	bne.n	810317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103178:	4b11      	ldr	r3, [pc, #68]	@ (81031c0 <_sbrk+0x64>)
 810317a:	4a12      	ldr	r2, [pc, #72]	@ (81031c4 <_sbrk+0x68>)
 810317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810317e:	4b10      	ldr	r3, [pc, #64]	@ (81031c0 <_sbrk+0x64>)
 8103180:	681a      	ldr	r2, [r3, #0]
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	4413      	add	r3, r2
 8103186:	693a      	ldr	r2, [r7, #16]
 8103188:	429a      	cmp	r2, r3
 810318a:	d207      	bcs.n	810319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810318c:	f007 fd2a 	bl	810abe4 <__errno>
 8103190:	4603      	mov	r3, r0
 8103192:	220c      	movs	r2, #12
 8103194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8103196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810319a:	e009      	b.n	81031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810319c:	4b08      	ldr	r3, [pc, #32]	@ (81031c0 <_sbrk+0x64>)
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81031a2:	4b07      	ldr	r3, [pc, #28]	@ (81031c0 <_sbrk+0x64>)
 81031a4:	681a      	ldr	r2, [r3, #0]
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	4413      	add	r3, r2
 81031aa:	4a05      	ldr	r2, [pc, #20]	@ (81031c0 <_sbrk+0x64>)
 81031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81031ae:	68fb      	ldr	r3, [r7, #12]
}
 81031b0:	4618      	mov	r0, r3
 81031b2:	3718      	adds	r7, #24
 81031b4:	46bd      	mov	sp, r7
 81031b6:	bd80      	pop	{r7, pc}
 81031b8:	10048000 	.word	0x10048000
 81031bc:	00000400 	.word	0x00000400
 81031c0:	100004a0 	.word	0x100004a0
 81031c4:	100005f8 	.word	0x100005f8

081031c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81031c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8103200 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81031cc:	f7fd ff92 	bl	81010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81031d0:	480c      	ldr	r0, [pc, #48]	@ (8103204 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81031d2:	490d      	ldr	r1, [pc, #52]	@ (8103208 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81031d4:	4a0d      	ldr	r2, [pc, #52]	@ (810320c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81031d8:	e002      	b.n	81031e0 <LoopCopyDataInit>

081031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81031de:	3304      	adds	r3, #4

081031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81031e4:	d3f9      	bcc.n	81031da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81031e6:	4a0a      	ldr	r2, [pc, #40]	@ (8103210 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81031e8:	4c0a      	ldr	r4, [pc, #40]	@ (8103214 <LoopFillZerobss+0x22>)
  movs r3, #0
 81031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 81031ec:	e001      	b.n	81031f2 <LoopFillZerobss>

081031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81031f0:	3204      	adds	r2, #4

081031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81031f4:	d3fb      	bcc.n	81031ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81031f6:	f007 fcfb 	bl	810abf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81031fa:	f7fe fe3f 	bl	8101e7c <main>
  bx  lr
 81031fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103200:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103204:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103208:	10000228 	.word	0x10000228
  ldr r2, =_sidata
 810320c:	0810ee48 	.word	0x0810ee48
  ldr r2, =_sbss
 8103210:	10000228 	.word	0x10000228
  ldr r4, =_ebss
 8103214:	100005f4 	.word	0x100005f4

08103218 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103218:	e7fe      	b.n	8103218 <ADC3_IRQHandler>
	...

0810321c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810321c:	b580      	push	{r7, lr}
 810321e:	b082      	sub	sp, #8
 8103220:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103222:	4b28      	ldr	r3, [pc, #160]	@ (81032c4 <HAL_Init+0xa8>)
 8103224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103228:	4a26      	ldr	r2, [pc, #152]	@ (81032c4 <HAL_Init+0xa8>)
 810322a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810322e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8103232:	4b24      	ldr	r3, [pc, #144]	@ (81032c4 <HAL_Init+0xa8>)
 8103234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8103238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810323c:	603b      	str	r3, [r7, #0]
 810323e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103240:	4b21      	ldr	r3, [pc, #132]	@ (81032c8 <HAL_Init+0xac>)
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8103248:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 810324c:	4a1e      	ldr	r2, [pc, #120]	@ (81032c8 <HAL_Init+0xac>)
 810324e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8103252:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103254:	4b1c      	ldr	r3, [pc, #112]	@ (81032c8 <HAL_Init+0xac>)
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	4a1b      	ldr	r2, [pc, #108]	@ (81032c8 <HAL_Init+0xac>)
 810325a:	f043 0301 	orr.w	r3, r3, #1
 810325e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103260:	2003      	movs	r0, #3
 8103262:	f000 f983 	bl	810356c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103266:	f001 fa21 	bl	81046ac <HAL_RCC_GetSysClockFreq>
 810326a:	4602      	mov	r2, r0
 810326c:	4b15      	ldr	r3, [pc, #84]	@ (81032c4 <HAL_Init+0xa8>)
 810326e:	699b      	ldr	r3, [r3, #24]
 8103270:	0a1b      	lsrs	r3, r3, #8
 8103272:	f003 030f 	and.w	r3, r3, #15
 8103276:	4915      	ldr	r1, [pc, #84]	@ (81032cc <HAL_Init+0xb0>)
 8103278:	5ccb      	ldrb	r3, [r1, r3]
 810327a:	f003 031f 	and.w	r3, r3, #31
 810327e:	fa22 f303 	lsr.w	r3, r2, r3
 8103282:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103284:	4b0f      	ldr	r3, [pc, #60]	@ (81032c4 <HAL_Init+0xa8>)
 8103286:	699b      	ldr	r3, [r3, #24]
 8103288:	f003 030f 	and.w	r3, r3, #15
 810328c:	4a0f      	ldr	r2, [pc, #60]	@ (81032cc <HAL_Init+0xb0>)
 810328e:	5cd3      	ldrb	r3, [r2, r3]
 8103290:	f003 031f 	and.w	r3, r3, #31
 8103294:	687a      	ldr	r2, [r7, #4]
 8103296:	fa22 f303 	lsr.w	r3, r2, r3
 810329a:	4a0d      	ldr	r2, [pc, #52]	@ (81032d0 <HAL_Init+0xb4>)
 810329c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810329e:	4b0c      	ldr	r3, [pc, #48]	@ (81032d0 <HAL_Init+0xb4>)
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	4a0c      	ldr	r2, [pc, #48]	@ (81032d4 <HAL_Init+0xb8>)
 81032a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81032a6:	2000      	movs	r0, #0
 81032a8:	f000 f816 	bl	81032d8 <HAL_InitTick>
 81032ac:	4603      	mov	r3, r0
 81032ae:	2b00      	cmp	r3, #0
 81032b0:	d001      	beq.n	81032b6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81032b2:	2301      	movs	r3, #1
 81032b4:	e002      	b.n	81032bc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81032b6:	f7ff fc8b 	bl	8102bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81032ba:	2300      	movs	r3, #0
}
 81032bc:	4618      	mov	r0, r3
 81032be:	3708      	adds	r7, #8
 81032c0:	46bd      	mov	sp, r7
 81032c2:	bd80      	pop	{r7, pc}
 81032c4:	58024400 	.word	0x58024400
 81032c8:	40024400 	.word	0x40024400
 81032cc:	0810e9d4 	.word	0x0810e9d4
 81032d0:	10000004 	.word	0x10000004
 81032d4:	10000000 	.word	0x10000000

081032d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81032d8:	b580      	push	{r7, lr}
 81032da:	b082      	sub	sp, #8
 81032dc:	af00      	add	r7, sp, #0
 81032de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81032e0:	4b15      	ldr	r3, [pc, #84]	@ (8103338 <HAL_InitTick+0x60>)
 81032e2:	781b      	ldrb	r3, [r3, #0]
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	d101      	bne.n	81032ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81032e8:	2301      	movs	r3, #1
 81032ea:	e021      	b.n	8103330 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81032ec:	4b13      	ldr	r3, [pc, #76]	@ (810333c <HAL_InitTick+0x64>)
 81032ee:	681a      	ldr	r2, [r3, #0]
 81032f0:	4b11      	ldr	r3, [pc, #68]	@ (8103338 <HAL_InitTick+0x60>)
 81032f2:	781b      	ldrb	r3, [r3, #0]
 81032f4:	4619      	mov	r1, r3
 81032f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81032fa:	fbb3 f3f1 	udiv	r3, r3, r1
 81032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8103302:	4618      	mov	r0, r3
 8103304:	f000 f965 	bl	81035d2 <HAL_SYSTICK_Config>
 8103308:	4603      	mov	r3, r0
 810330a:	2b00      	cmp	r3, #0
 810330c:	d001      	beq.n	8103312 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810330e:	2301      	movs	r3, #1
 8103310:	e00e      	b.n	8103330 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	2b0f      	cmp	r3, #15
 8103316:	d80a      	bhi.n	810332e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103318:	2200      	movs	r2, #0
 810331a:	6879      	ldr	r1, [r7, #4]
 810331c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103320:	f000 f92f 	bl	8103582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103324:	4a06      	ldr	r2, [pc, #24]	@ (8103340 <HAL_InitTick+0x68>)
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810332a:	2300      	movs	r3, #0
 810332c:	e000      	b.n	8103330 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810332e:	2301      	movs	r3, #1
}
 8103330:	4618      	mov	r0, r3
 8103332:	3708      	adds	r7, #8
 8103334:	46bd      	mov	sp, r7
 8103336:	bd80      	pop	{r7, pc}
 8103338:	1000004c 	.word	0x1000004c
 810333c:	10000000 	.word	0x10000000
 8103340:	10000048 	.word	0x10000048

08103344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103344:	b480      	push	{r7}
 8103346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103348:	4b06      	ldr	r3, [pc, #24]	@ (8103364 <HAL_IncTick+0x20>)
 810334a:	781b      	ldrb	r3, [r3, #0]
 810334c:	461a      	mov	r2, r3
 810334e:	4b06      	ldr	r3, [pc, #24]	@ (8103368 <HAL_IncTick+0x24>)
 8103350:	681b      	ldr	r3, [r3, #0]
 8103352:	4413      	add	r3, r2
 8103354:	4a04      	ldr	r2, [pc, #16]	@ (8103368 <HAL_IncTick+0x24>)
 8103356:	6013      	str	r3, [r2, #0]
}
 8103358:	bf00      	nop
 810335a:	46bd      	mov	sp, r7
 810335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103360:	4770      	bx	lr
 8103362:	bf00      	nop
 8103364:	1000004c 	.word	0x1000004c
 8103368:	100004a4 	.word	0x100004a4

0810336c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810336c:	b480      	push	{r7}
 810336e:	af00      	add	r7, sp, #0
  return uwTick;
 8103370:	4b03      	ldr	r3, [pc, #12]	@ (8103380 <HAL_GetTick+0x14>)
 8103372:	681b      	ldr	r3, [r3, #0]
}
 8103374:	4618      	mov	r0, r3
 8103376:	46bd      	mov	sp, r7
 8103378:	f85d 7b04 	ldr.w	r7, [sp], #4
 810337c:	4770      	bx	lr
 810337e:	bf00      	nop
 8103380:	100004a4 	.word	0x100004a4

08103384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103384:	b580      	push	{r7, lr}
 8103386:	b084      	sub	sp, #16
 8103388:	af00      	add	r7, sp, #0
 810338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810338c:	f7ff ffee 	bl	810336c <HAL_GetTick>
 8103390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8103396:	68fb      	ldr	r3, [r7, #12]
 8103398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810339c:	d005      	beq.n	81033aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810339e:	4b0a      	ldr	r3, [pc, #40]	@ (81033c8 <HAL_Delay+0x44>)
 81033a0:	781b      	ldrb	r3, [r3, #0]
 81033a2:	461a      	mov	r2, r3
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	4413      	add	r3, r2
 81033a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81033aa:	bf00      	nop
 81033ac:	f7ff ffde 	bl	810336c <HAL_GetTick>
 81033b0:	4602      	mov	r2, r0
 81033b2:	68bb      	ldr	r3, [r7, #8]
 81033b4:	1ad3      	subs	r3, r2, r3
 81033b6:	68fa      	ldr	r2, [r7, #12]
 81033b8:	429a      	cmp	r2, r3
 81033ba:	d8f7      	bhi.n	81033ac <HAL_Delay+0x28>
  {
  }
}
 81033bc:	bf00      	nop
 81033be:	bf00      	nop
 81033c0:	3710      	adds	r7, #16
 81033c2:	46bd      	mov	sp, r7
 81033c4:	bd80      	pop	{r7, pc}
 81033c6:	bf00      	nop
 81033c8:	1000004c 	.word	0x1000004c

081033cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81033cc:	b480      	push	{r7}
 81033ce:	b085      	sub	sp, #20
 81033d0:	af00      	add	r7, sp, #0
 81033d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	f003 0307 	and.w	r3, r3, #7
 81033da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8103410 <__NVIC_SetPriorityGrouping+0x44>)
 81033de:	68db      	ldr	r3, [r3, #12]
 81033e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81033e2:	68ba      	ldr	r2, [r7, #8]
 81033e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81033e8:	4013      	ands	r3, r2
 81033ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81033ec:	68fb      	ldr	r3, [r7, #12]
 81033ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81033f0:	68bb      	ldr	r3, [r7, #8]
 81033f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81033f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81033f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81033fe:	4a04      	ldr	r2, [pc, #16]	@ (8103410 <__NVIC_SetPriorityGrouping+0x44>)
 8103400:	68bb      	ldr	r3, [r7, #8]
 8103402:	60d3      	str	r3, [r2, #12]
}
 8103404:	bf00      	nop
 8103406:	3714      	adds	r7, #20
 8103408:	46bd      	mov	sp, r7
 810340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810340e:	4770      	bx	lr
 8103410:	e000ed00 	.word	0xe000ed00

08103414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103414:	b480      	push	{r7}
 8103416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103418:	4b04      	ldr	r3, [pc, #16]	@ (810342c <__NVIC_GetPriorityGrouping+0x18>)
 810341a:	68db      	ldr	r3, [r3, #12]
 810341c:	0a1b      	lsrs	r3, r3, #8
 810341e:	f003 0307 	and.w	r3, r3, #7
}
 8103422:	4618      	mov	r0, r3
 8103424:	46bd      	mov	sp, r7
 8103426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342a:	4770      	bx	lr
 810342c:	e000ed00 	.word	0xe000ed00

08103430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103430:	b480      	push	{r7}
 8103432:	b083      	sub	sp, #12
 8103434:	af00      	add	r7, sp, #0
 8103436:	4603      	mov	r3, r0
 8103438:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810343a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810343e:	2b00      	cmp	r3, #0
 8103440:	db0b      	blt.n	810345a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103442:	88fb      	ldrh	r3, [r7, #6]
 8103444:	f003 021f 	and.w	r2, r3, #31
 8103448:	4907      	ldr	r1, [pc, #28]	@ (8103468 <__NVIC_EnableIRQ+0x38>)
 810344a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810344e:	095b      	lsrs	r3, r3, #5
 8103450:	2001      	movs	r0, #1
 8103452:	fa00 f202 	lsl.w	r2, r0, r2
 8103456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810345a:	bf00      	nop
 810345c:	370c      	adds	r7, #12
 810345e:	46bd      	mov	sp, r7
 8103460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103464:	4770      	bx	lr
 8103466:	bf00      	nop
 8103468:	e000e100 	.word	0xe000e100

0810346c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810346c:	b480      	push	{r7}
 810346e:	b083      	sub	sp, #12
 8103470:	af00      	add	r7, sp, #0
 8103472:	4603      	mov	r3, r0
 8103474:	6039      	str	r1, [r7, #0]
 8103476:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810347c:	2b00      	cmp	r3, #0
 810347e:	db0a      	blt.n	8103496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103480:	683b      	ldr	r3, [r7, #0]
 8103482:	b2da      	uxtb	r2, r3
 8103484:	490c      	ldr	r1, [pc, #48]	@ (81034b8 <__NVIC_SetPriority+0x4c>)
 8103486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810348a:	0112      	lsls	r2, r2, #4
 810348c:	b2d2      	uxtb	r2, r2
 810348e:	440b      	add	r3, r1
 8103490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103494:	e00a      	b.n	81034ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103496:	683b      	ldr	r3, [r7, #0]
 8103498:	b2da      	uxtb	r2, r3
 810349a:	4908      	ldr	r1, [pc, #32]	@ (81034bc <__NVIC_SetPriority+0x50>)
 810349c:	88fb      	ldrh	r3, [r7, #6]
 810349e:	f003 030f 	and.w	r3, r3, #15
 81034a2:	3b04      	subs	r3, #4
 81034a4:	0112      	lsls	r2, r2, #4
 81034a6:	b2d2      	uxtb	r2, r2
 81034a8:	440b      	add	r3, r1
 81034aa:	761a      	strb	r2, [r3, #24]
}
 81034ac:	bf00      	nop
 81034ae:	370c      	adds	r7, #12
 81034b0:	46bd      	mov	sp, r7
 81034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b6:	4770      	bx	lr
 81034b8:	e000e100 	.word	0xe000e100
 81034bc:	e000ed00 	.word	0xe000ed00

081034c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81034c0:	b480      	push	{r7}
 81034c2:	b089      	sub	sp, #36	@ 0x24
 81034c4:	af00      	add	r7, sp, #0
 81034c6:	60f8      	str	r0, [r7, #12]
 81034c8:	60b9      	str	r1, [r7, #8]
 81034ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81034cc:	68fb      	ldr	r3, [r7, #12]
 81034ce:	f003 0307 	and.w	r3, r3, #7
 81034d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81034d4:	69fb      	ldr	r3, [r7, #28]
 81034d6:	f1c3 0307 	rsb	r3, r3, #7
 81034da:	2b04      	cmp	r3, #4
 81034dc:	bf28      	it	cs
 81034de:	2304      	movcs	r3, #4
 81034e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81034e2:	69fb      	ldr	r3, [r7, #28]
 81034e4:	3304      	adds	r3, #4
 81034e6:	2b06      	cmp	r3, #6
 81034e8:	d902      	bls.n	81034f0 <NVIC_EncodePriority+0x30>
 81034ea:	69fb      	ldr	r3, [r7, #28]
 81034ec:	3b03      	subs	r3, #3
 81034ee:	e000      	b.n	81034f2 <NVIC_EncodePriority+0x32>
 81034f0:	2300      	movs	r3, #0
 81034f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81034f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81034f8:	69bb      	ldr	r3, [r7, #24]
 81034fa:	fa02 f303 	lsl.w	r3, r2, r3
 81034fe:	43da      	mvns	r2, r3
 8103500:	68bb      	ldr	r3, [r7, #8]
 8103502:	401a      	ands	r2, r3
 8103504:	697b      	ldr	r3, [r7, #20]
 8103506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103508:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 810350c:	697b      	ldr	r3, [r7, #20]
 810350e:	fa01 f303 	lsl.w	r3, r1, r3
 8103512:	43d9      	mvns	r1, r3
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103518:	4313      	orrs	r3, r2
         );
}
 810351a:	4618      	mov	r0, r3
 810351c:	3724      	adds	r7, #36	@ 0x24
 810351e:	46bd      	mov	sp, r7
 8103520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103524:	4770      	bx	lr
	...

08103528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103528:	b580      	push	{r7, lr}
 810352a:	b082      	sub	sp, #8
 810352c:	af00      	add	r7, sp, #0
 810352e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	3b01      	subs	r3, #1
 8103534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103538:	d301      	bcc.n	810353e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810353a:	2301      	movs	r3, #1
 810353c:	e00f      	b.n	810355e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810353e:	4a0a      	ldr	r2, [pc, #40]	@ (8103568 <SysTick_Config+0x40>)
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	3b01      	subs	r3, #1
 8103544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103546:	210f      	movs	r1, #15
 8103548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810354c:	f7ff ff8e 	bl	810346c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103550:	4b05      	ldr	r3, [pc, #20]	@ (8103568 <SysTick_Config+0x40>)
 8103552:	2200      	movs	r2, #0
 8103554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103556:	4b04      	ldr	r3, [pc, #16]	@ (8103568 <SysTick_Config+0x40>)
 8103558:	2207      	movs	r2, #7
 810355a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810355c:	2300      	movs	r3, #0
}
 810355e:	4618      	mov	r0, r3
 8103560:	3708      	adds	r7, #8
 8103562:	46bd      	mov	sp, r7
 8103564:	bd80      	pop	{r7, pc}
 8103566:	bf00      	nop
 8103568:	e000e010 	.word	0xe000e010

0810356c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810356c:	b580      	push	{r7, lr}
 810356e:	b082      	sub	sp, #8
 8103570:	af00      	add	r7, sp, #0
 8103572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103574:	6878      	ldr	r0, [r7, #4]
 8103576:	f7ff ff29 	bl	81033cc <__NVIC_SetPriorityGrouping>
}
 810357a:	bf00      	nop
 810357c:	3708      	adds	r7, #8
 810357e:	46bd      	mov	sp, r7
 8103580:	bd80      	pop	{r7, pc}

08103582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103582:	b580      	push	{r7, lr}
 8103584:	b086      	sub	sp, #24
 8103586:	af00      	add	r7, sp, #0
 8103588:	4603      	mov	r3, r0
 810358a:	60b9      	str	r1, [r7, #8]
 810358c:	607a      	str	r2, [r7, #4]
 810358e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103590:	f7ff ff40 	bl	8103414 <__NVIC_GetPriorityGrouping>
 8103594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103596:	687a      	ldr	r2, [r7, #4]
 8103598:	68b9      	ldr	r1, [r7, #8]
 810359a:	6978      	ldr	r0, [r7, #20]
 810359c:	f7ff ff90 	bl	81034c0 <NVIC_EncodePriority>
 81035a0:	4602      	mov	r2, r0
 81035a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81035a6:	4611      	mov	r1, r2
 81035a8:	4618      	mov	r0, r3
 81035aa:	f7ff ff5f 	bl	810346c <__NVIC_SetPriority>
}
 81035ae:	bf00      	nop
 81035b0:	3718      	adds	r7, #24
 81035b2:	46bd      	mov	sp, r7
 81035b4:	bd80      	pop	{r7, pc}

081035b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81035b6:	b580      	push	{r7, lr}
 81035b8:	b082      	sub	sp, #8
 81035ba:	af00      	add	r7, sp, #0
 81035bc:	4603      	mov	r3, r0
 81035be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81035c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81035c4:	4618      	mov	r0, r3
 81035c6:	f7ff ff33 	bl	8103430 <__NVIC_EnableIRQ>
}
 81035ca:	bf00      	nop
 81035cc:	3708      	adds	r7, #8
 81035ce:	46bd      	mov	sp, r7
 81035d0:	bd80      	pop	{r7, pc}

081035d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81035d2:	b580      	push	{r7, lr}
 81035d4:	b082      	sub	sp, #8
 81035d6:	af00      	add	r7, sp, #0
 81035d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81035da:	6878      	ldr	r0, [r7, #4]
 81035dc:	f7ff ffa4 	bl	8103528 <SysTick_Config>
 81035e0:	4603      	mov	r3, r0
}
 81035e2:	4618      	mov	r0, r3
 81035e4:	3708      	adds	r7, #8
 81035e6:	46bd      	mov	sp, r7
 81035e8:	bd80      	pop	{r7, pc}
	...

081035ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81035ec:	b480      	push	{r7}
 81035ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81035f0:	4b07      	ldr	r3, [pc, #28]	@ (8103610 <HAL_GetCurrentCPUID+0x24>)
 81035f2:	681b      	ldr	r3, [r3, #0]
 81035f4:	091b      	lsrs	r3, r3, #4
 81035f6:	f003 030f 	and.w	r3, r3, #15
 81035fa:	2b07      	cmp	r3, #7
 81035fc:	d101      	bne.n	8103602 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81035fe:	2303      	movs	r3, #3
 8103600:	e000      	b.n	8103604 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103602:	2301      	movs	r3, #1
  }
}
 8103604:	4618      	mov	r0, r3
 8103606:	46bd      	mov	sp, r7
 8103608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810360c:	4770      	bx	lr
 810360e:	bf00      	nop
 8103610:	e000ed00 	.word	0xe000ed00

08103614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103614:	b480      	push	{r7}
 8103616:	b089      	sub	sp, #36	@ 0x24
 8103618:	af00      	add	r7, sp, #0
 810361a:	6078      	str	r0, [r7, #4]
 810361c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810361e:	2300      	movs	r3, #0
 8103620:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103622:	4b89      	ldr	r3, [pc, #548]	@ (8103848 <HAL_GPIO_Init+0x234>)
 8103624:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103626:	e194      	b.n	8103952 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103628:	683b      	ldr	r3, [r7, #0]
 810362a:	681a      	ldr	r2, [r3, #0]
 810362c:	2101      	movs	r1, #1
 810362e:	69fb      	ldr	r3, [r7, #28]
 8103630:	fa01 f303 	lsl.w	r3, r1, r3
 8103634:	4013      	ands	r3, r2
 8103636:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103638:	693b      	ldr	r3, [r7, #16]
 810363a:	2b00      	cmp	r3, #0
 810363c:	f000 8186 	beq.w	810394c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103640:	683b      	ldr	r3, [r7, #0]
 8103642:	685b      	ldr	r3, [r3, #4]
 8103644:	f003 0303 	and.w	r3, r3, #3
 8103648:	2b01      	cmp	r3, #1
 810364a:	d005      	beq.n	8103658 <HAL_GPIO_Init+0x44>
 810364c:	683b      	ldr	r3, [r7, #0]
 810364e:	685b      	ldr	r3, [r3, #4]
 8103650:	f003 0303 	and.w	r3, r3, #3
 8103654:	2b02      	cmp	r3, #2
 8103656:	d130      	bne.n	81036ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	689b      	ldr	r3, [r3, #8]
 810365c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810365e:	69fb      	ldr	r3, [r7, #28]
 8103660:	005b      	lsls	r3, r3, #1
 8103662:	2203      	movs	r2, #3
 8103664:	fa02 f303 	lsl.w	r3, r2, r3
 8103668:	43db      	mvns	r3, r3
 810366a:	69ba      	ldr	r2, [r7, #24]
 810366c:	4013      	ands	r3, r2
 810366e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103670:	683b      	ldr	r3, [r7, #0]
 8103672:	68da      	ldr	r2, [r3, #12]
 8103674:	69fb      	ldr	r3, [r7, #28]
 8103676:	005b      	lsls	r3, r3, #1
 8103678:	fa02 f303 	lsl.w	r3, r2, r3
 810367c:	69ba      	ldr	r2, [r7, #24]
 810367e:	4313      	orrs	r3, r2
 8103680:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	69ba      	ldr	r2, [r7, #24]
 8103686:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	685b      	ldr	r3, [r3, #4]
 810368c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810368e:	2201      	movs	r2, #1
 8103690:	69fb      	ldr	r3, [r7, #28]
 8103692:	fa02 f303 	lsl.w	r3, r2, r3
 8103696:	43db      	mvns	r3, r3
 8103698:	69ba      	ldr	r2, [r7, #24]
 810369a:	4013      	ands	r3, r2
 810369c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810369e:	683b      	ldr	r3, [r7, #0]
 81036a0:	685b      	ldr	r3, [r3, #4]
 81036a2:	091b      	lsrs	r3, r3, #4
 81036a4:	f003 0201 	and.w	r2, r3, #1
 81036a8:	69fb      	ldr	r3, [r7, #28]
 81036aa:	fa02 f303 	lsl.w	r3, r2, r3
 81036ae:	69ba      	ldr	r2, [r7, #24]
 81036b0:	4313      	orrs	r3, r2
 81036b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	69ba      	ldr	r2, [r7, #24]
 81036b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81036ba:	683b      	ldr	r3, [r7, #0]
 81036bc:	685b      	ldr	r3, [r3, #4]
 81036be:	f003 0303 	and.w	r3, r3, #3
 81036c2:	2b03      	cmp	r3, #3
 81036c4:	d017      	beq.n	81036f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	68db      	ldr	r3, [r3, #12]
 81036ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81036cc:	69fb      	ldr	r3, [r7, #28]
 81036ce:	005b      	lsls	r3, r3, #1
 81036d0:	2203      	movs	r2, #3
 81036d2:	fa02 f303 	lsl.w	r3, r2, r3
 81036d6:	43db      	mvns	r3, r3
 81036d8:	69ba      	ldr	r2, [r7, #24]
 81036da:	4013      	ands	r3, r2
 81036dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81036de:	683b      	ldr	r3, [r7, #0]
 81036e0:	689a      	ldr	r2, [r3, #8]
 81036e2:	69fb      	ldr	r3, [r7, #28]
 81036e4:	005b      	lsls	r3, r3, #1
 81036e6:	fa02 f303 	lsl.w	r3, r2, r3
 81036ea:	69ba      	ldr	r2, [r7, #24]
 81036ec:	4313      	orrs	r3, r2
 81036ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	69ba      	ldr	r2, [r7, #24]
 81036f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81036f6:	683b      	ldr	r3, [r7, #0]
 81036f8:	685b      	ldr	r3, [r3, #4]
 81036fa:	f003 0303 	and.w	r3, r3, #3
 81036fe:	2b02      	cmp	r3, #2
 8103700:	d123      	bne.n	810374a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103702:	69fb      	ldr	r3, [r7, #28]
 8103704:	08da      	lsrs	r2, r3, #3
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	3208      	adds	r2, #8
 810370a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103710:	69fb      	ldr	r3, [r7, #28]
 8103712:	f003 0307 	and.w	r3, r3, #7
 8103716:	009b      	lsls	r3, r3, #2
 8103718:	220f      	movs	r2, #15
 810371a:	fa02 f303 	lsl.w	r3, r2, r3
 810371e:	43db      	mvns	r3, r3
 8103720:	69ba      	ldr	r2, [r7, #24]
 8103722:	4013      	ands	r3, r2
 8103724:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103726:	683b      	ldr	r3, [r7, #0]
 8103728:	691a      	ldr	r2, [r3, #16]
 810372a:	69fb      	ldr	r3, [r7, #28]
 810372c:	f003 0307 	and.w	r3, r3, #7
 8103730:	009b      	lsls	r3, r3, #2
 8103732:	fa02 f303 	lsl.w	r3, r2, r3
 8103736:	69ba      	ldr	r2, [r7, #24]
 8103738:	4313      	orrs	r3, r2
 810373a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810373c:	69fb      	ldr	r3, [r7, #28]
 810373e:	08da      	lsrs	r2, r3, #3
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	3208      	adds	r2, #8
 8103744:	69b9      	ldr	r1, [r7, #24]
 8103746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103750:	69fb      	ldr	r3, [r7, #28]
 8103752:	005b      	lsls	r3, r3, #1
 8103754:	2203      	movs	r2, #3
 8103756:	fa02 f303 	lsl.w	r3, r2, r3
 810375a:	43db      	mvns	r3, r3
 810375c:	69ba      	ldr	r2, [r7, #24]
 810375e:	4013      	ands	r3, r2
 8103760:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103762:	683b      	ldr	r3, [r7, #0]
 8103764:	685b      	ldr	r3, [r3, #4]
 8103766:	f003 0203 	and.w	r2, r3, #3
 810376a:	69fb      	ldr	r3, [r7, #28]
 810376c:	005b      	lsls	r3, r3, #1
 810376e:	fa02 f303 	lsl.w	r3, r2, r3
 8103772:	69ba      	ldr	r2, [r7, #24]
 8103774:	4313      	orrs	r3, r2
 8103776:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	69ba      	ldr	r2, [r7, #24]
 810377c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810377e:	683b      	ldr	r3, [r7, #0]
 8103780:	685b      	ldr	r3, [r3, #4]
 8103782:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103786:	2b00      	cmp	r3, #0
 8103788:	f000 80e0 	beq.w	810394c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810378c:	4b2f      	ldr	r3, [pc, #188]	@ (810384c <HAL_GPIO_Init+0x238>)
 810378e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8103792:	4a2e      	ldr	r2, [pc, #184]	@ (810384c <HAL_GPIO_Init+0x238>)
 8103794:	f043 0302 	orr.w	r3, r3, #2
 8103798:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810379c:	4b2b      	ldr	r3, [pc, #172]	@ (810384c <HAL_GPIO_Init+0x238>)
 810379e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81037a2:	f003 0302 	and.w	r3, r3, #2
 81037a6:	60fb      	str	r3, [r7, #12]
 81037a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81037aa:	4a29      	ldr	r2, [pc, #164]	@ (8103850 <HAL_GPIO_Init+0x23c>)
 81037ac:	69fb      	ldr	r3, [r7, #28]
 81037ae:	089b      	lsrs	r3, r3, #2
 81037b0:	3302      	adds	r3, #2
 81037b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81037b8:	69fb      	ldr	r3, [r7, #28]
 81037ba:	f003 0303 	and.w	r3, r3, #3
 81037be:	009b      	lsls	r3, r3, #2
 81037c0:	220f      	movs	r2, #15
 81037c2:	fa02 f303 	lsl.w	r3, r2, r3
 81037c6:	43db      	mvns	r3, r3
 81037c8:	69ba      	ldr	r2, [r7, #24]
 81037ca:	4013      	ands	r3, r2
 81037cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	4a20      	ldr	r2, [pc, #128]	@ (8103854 <HAL_GPIO_Init+0x240>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d052      	beq.n	810387c <HAL_GPIO_Init+0x268>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	4a1f      	ldr	r2, [pc, #124]	@ (8103858 <HAL_GPIO_Init+0x244>)
 81037da:	4293      	cmp	r3, r2
 81037dc:	d031      	beq.n	8103842 <HAL_GPIO_Init+0x22e>
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	4a1e      	ldr	r2, [pc, #120]	@ (810385c <HAL_GPIO_Init+0x248>)
 81037e2:	4293      	cmp	r3, r2
 81037e4:	d02b      	beq.n	810383e <HAL_GPIO_Init+0x22a>
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	4a1d      	ldr	r2, [pc, #116]	@ (8103860 <HAL_GPIO_Init+0x24c>)
 81037ea:	4293      	cmp	r3, r2
 81037ec:	d025      	beq.n	810383a <HAL_GPIO_Init+0x226>
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8103864 <HAL_GPIO_Init+0x250>)
 81037f2:	4293      	cmp	r3, r2
 81037f4:	d01f      	beq.n	8103836 <HAL_GPIO_Init+0x222>
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	4a1b      	ldr	r2, [pc, #108]	@ (8103868 <HAL_GPIO_Init+0x254>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d019      	beq.n	8103832 <HAL_GPIO_Init+0x21e>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	4a1a      	ldr	r2, [pc, #104]	@ (810386c <HAL_GPIO_Init+0x258>)
 8103802:	4293      	cmp	r3, r2
 8103804:	d013      	beq.n	810382e <HAL_GPIO_Init+0x21a>
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	4a19      	ldr	r2, [pc, #100]	@ (8103870 <HAL_GPIO_Init+0x25c>)
 810380a:	4293      	cmp	r3, r2
 810380c:	d00d      	beq.n	810382a <HAL_GPIO_Init+0x216>
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	4a18      	ldr	r2, [pc, #96]	@ (8103874 <HAL_GPIO_Init+0x260>)
 8103812:	4293      	cmp	r3, r2
 8103814:	d007      	beq.n	8103826 <HAL_GPIO_Init+0x212>
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	4a17      	ldr	r2, [pc, #92]	@ (8103878 <HAL_GPIO_Init+0x264>)
 810381a:	4293      	cmp	r3, r2
 810381c:	d101      	bne.n	8103822 <HAL_GPIO_Init+0x20e>
 810381e:	2309      	movs	r3, #9
 8103820:	e02d      	b.n	810387e <HAL_GPIO_Init+0x26a>
 8103822:	230a      	movs	r3, #10
 8103824:	e02b      	b.n	810387e <HAL_GPIO_Init+0x26a>
 8103826:	2308      	movs	r3, #8
 8103828:	e029      	b.n	810387e <HAL_GPIO_Init+0x26a>
 810382a:	2307      	movs	r3, #7
 810382c:	e027      	b.n	810387e <HAL_GPIO_Init+0x26a>
 810382e:	2306      	movs	r3, #6
 8103830:	e025      	b.n	810387e <HAL_GPIO_Init+0x26a>
 8103832:	2305      	movs	r3, #5
 8103834:	e023      	b.n	810387e <HAL_GPIO_Init+0x26a>
 8103836:	2304      	movs	r3, #4
 8103838:	e021      	b.n	810387e <HAL_GPIO_Init+0x26a>
 810383a:	2303      	movs	r3, #3
 810383c:	e01f      	b.n	810387e <HAL_GPIO_Init+0x26a>
 810383e:	2302      	movs	r3, #2
 8103840:	e01d      	b.n	810387e <HAL_GPIO_Init+0x26a>
 8103842:	2301      	movs	r3, #1
 8103844:	e01b      	b.n	810387e <HAL_GPIO_Init+0x26a>
 8103846:	bf00      	nop
 8103848:	580000c0 	.word	0x580000c0
 810384c:	58024400 	.word	0x58024400
 8103850:	58000400 	.word	0x58000400
 8103854:	58020000 	.word	0x58020000
 8103858:	58020400 	.word	0x58020400
 810385c:	58020800 	.word	0x58020800
 8103860:	58020c00 	.word	0x58020c00
 8103864:	58021000 	.word	0x58021000
 8103868:	58021400 	.word	0x58021400
 810386c:	58021800 	.word	0x58021800
 8103870:	58021c00 	.word	0x58021c00
 8103874:	58022000 	.word	0x58022000
 8103878:	58022400 	.word	0x58022400
 810387c:	2300      	movs	r3, #0
 810387e:	69fa      	ldr	r2, [r7, #28]
 8103880:	f002 0203 	and.w	r2, r2, #3
 8103884:	0092      	lsls	r2, r2, #2
 8103886:	4093      	lsls	r3, r2
 8103888:	69ba      	ldr	r2, [r7, #24]
 810388a:	4313      	orrs	r3, r2
 810388c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810388e:	4938      	ldr	r1, [pc, #224]	@ (8103970 <HAL_GPIO_Init+0x35c>)
 8103890:	69fb      	ldr	r3, [r7, #28]
 8103892:	089b      	lsrs	r3, r3, #2
 8103894:	3302      	adds	r3, #2
 8103896:	69ba      	ldr	r2, [r7, #24]
 8103898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810389c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81038a0:	681b      	ldr	r3, [r3, #0]
 81038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81038a4:	693b      	ldr	r3, [r7, #16]
 81038a6:	43db      	mvns	r3, r3
 81038a8:	69ba      	ldr	r2, [r7, #24]
 81038aa:	4013      	ands	r3, r2
 81038ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81038ae:	683b      	ldr	r3, [r7, #0]
 81038b0:	685b      	ldr	r3, [r3, #4]
 81038b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81038b6:	2b00      	cmp	r3, #0
 81038b8:	d003      	beq.n	81038c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81038ba:	69ba      	ldr	r2, [r7, #24]
 81038bc:	693b      	ldr	r3, [r7, #16]
 81038be:	4313      	orrs	r3, r2
 81038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81038c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81038c6:	69bb      	ldr	r3, [r7, #24]
 81038c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81038ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81038ce:	685b      	ldr	r3, [r3, #4]
 81038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81038d2:	693b      	ldr	r3, [r7, #16]
 81038d4:	43db      	mvns	r3, r3
 81038d6:	69ba      	ldr	r2, [r7, #24]
 81038d8:	4013      	ands	r3, r2
 81038da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81038dc:	683b      	ldr	r3, [r7, #0]
 81038de:	685b      	ldr	r3, [r3, #4]
 81038e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81038e4:	2b00      	cmp	r3, #0
 81038e6:	d003      	beq.n	81038f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81038e8:	69ba      	ldr	r2, [r7, #24]
 81038ea:	693b      	ldr	r3, [r7, #16]
 81038ec:	4313      	orrs	r3, r2
 81038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81038f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81038f4:	69bb      	ldr	r3, [r7, #24]
 81038f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81038f8:	697b      	ldr	r3, [r7, #20]
 81038fa:	685b      	ldr	r3, [r3, #4]
 81038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81038fe:	693b      	ldr	r3, [r7, #16]
 8103900:	43db      	mvns	r3, r3
 8103902:	69ba      	ldr	r2, [r7, #24]
 8103904:	4013      	ands	r3, r2
 8103906:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103908:	683b      	ldr	r3, [r7, #0]
 810390a:	685b      	ldr	r3, [r3, #4]
 810390c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103910:	2b00      	cmp	r3, #0
 8103912:	d003      	beq.n	810391c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103914:	69ba      	ldr	r2, [r7, #24]
 8103916:	693b      	ldr	r3, [r7, #16]
 8103918:	4313      	orrs	r3, r2
 810391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810391c:	697b      	ldr	r3, [r7, #20]
 810391e:	69ba      	ldr	r2, [r7, #24]
 8103920:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103922:	697b      	ldr	r3, [r7, #20]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103928:	693b      	ldr	r3, [r7, #16]
 810392a:	43db      	mvns	r3, r3
 810392c:	69ba      	ldr	r2, [r7, #24]
 810392e:	4013      	ands	r3, r2
 8103930:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103932:	683b      	ldr	r3, [r7, #0]
 8103934:	685b      	ldr	r3, [r3, #4]
 8103936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810393a:	2b00      	cmp	r3, #0
 810393c:	d003      	beq.n	8103946 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810393e:	69ba      	ldr	r2, [r7, #24]
 8103940:	693b      	ldr	r3, [r7, #16]
 8103942:	4313      	orrs	r3, r2
 8103944:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103946:	697b      	ldr	r3, [r7, #20]
 8103948:	69ba      	ldr	r2, [r7, #24]
 810394a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810394c:	69fb      	ldr	r3, [r7, #28]
 810394e:	3301      	adds	r3, #1
 8103950:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103952:	683b      	ldr	r3, [r7, #0]
 8103954:	681a      	ldr	r2, [r3, #0]
 8103956:	69fb      	ldr	r3, [r7, #28]
 8103958:	fa22 f303 	lsr.w	r3, r2, r3
 810395c:	2b00      	cmp	r3, #0
 810395e:	f47f ae63 	bne.w	8103628 <HAL_GPIO_Init+0x14>
  }
}
 8103962:	bf00      	nop
 8103964:	bf00      	nop
 8103966:	3724      	adds	r7, #36	@ 0x24
 8103968:	46bd      	mov	sp, r7
 810396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810396e:	4770      	bx	lr
 8103970:	58000400 	.word	0x58000400

08103974 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103974:	b480      	push	{r7}
 8103976:	b083      	sub	sp, #12
 8103978:	af00      	add	r7, sp, #0
 810397a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810397c:	4b05      	ldr	r3, [pc, #20]	@ (8103994 <HAL_HSEM_ActivateNotification+0x20>)
 810397e:	681a      	ldr	r2, [r3, #0]
 8103980:	4904      	ldr	r1, [pc, #16]	@ (8103994 <HAL_HSEM_ActivateNotification+0x20>)
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	4313      	orrs	r3, r2
 8103986:	600b      	str	r3, [r1, #0]
#endif
}
 8103988:	bf00      	nop
 810398a:	370c      	adds	r7, #12
 810398c:	46bd      	mov	sp, r7
 810398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103992:	4770      	bx	lr
 8103994:	58026510 	.word	0x58026510

08103998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103998:	b580      	push	{r7, lr}
 810399a:	b082      	sub	sp, #8
 810399c:	af00      	add	r7, sp, #0
 810399e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	2b00      	cmp	r3, #0
 81039a4:	d101      	bne.n	81039aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81039a6:	2301      	movs	r3, #1
 81039a8:	e08d      	b.n	8103ac6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81039b0:	b2db      	uxtb	r3, r3
 81039b2:	2b00      	cmp	r3, #0
 81039b4:	d106      	bne.n	81039c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	2200      	movs	r2, #0
 81039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81039be:	6878      	ldr	r0, [r7, #4]
 81039c0:	f7ff f920 	bl	8102c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	2224      	movs	r2, #36	@ 0x24
 81039c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	681a      	ldr	r2, [r3, #0]
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	f022 0201 	bic.w	r2, r2, #1
 81039da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	685a      	ldr	r2, [r3, #4]
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 81039e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	689a      	ldr	r2, [r3, #8]
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 81039f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	68db      	ldr	r3, [r3, #12]
 81039fe:	2b01      	cmp	r3, #1
 8103a00:	d107      	bne.n	8103a12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	689a      	ldr	r2, [r3, #8]
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	681b      	ldr	r3, [r3, #0]
 8103a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8103a0e:	609a      	str	r2, [r3, #8]
 8103a10:	e006      	b.n	8103a20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	689a      	ldr	r2, [r3, #8]
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8103a1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	68db      	ldr	r3, [r3, #12]
 8103a24:	2b02      	cmp	r3, #2
 8103a26:	d108      	bne.n	8103a3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	685a      	ldr	r2, [r3, #4]
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8103a36:	605a      	str	r2, [r3, #4]
 8103a38:	e007      	b.n	8103a4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	685a      	ldr	r2, [r3, #4]
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8103a48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	685b      	ldr	r3, [r3, #4]
 8103a50:	687a      	ldr	r2, [r7, #4]
 8103a52:	6812      	ldr	r2, [r2, #0]
 8103a54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8103a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8103a5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	681b      	ldr	r3, [r3, #0]
 8103a62:	68da      	ldr	r2, [r3, #12]
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8103a6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	691a      	ldr	r2, [r3, #16]
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	695b      	ldr	r3, [r3, #20]
 8103a76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	699b      	ldr	r3, [r3, #24]
 8103a7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	430a      	orrs	r2, r1
 8103a86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	69d9      	ldr	r1, [r3, #28]
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	6a1a      	ldr	r2, [r3, #32]
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	681b      	ldr	r3, [r3, #0]
 8103a94:	430a      	orrs	r2, r1
 8103a96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	681a      	ldr	r2, [r3, #0]
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	f042 0201 	orr.w	r2, r2, #1
 8103aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	2200      	movs	r2, #0
 8103aac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103aae:	687b      	ldr	r3, [r7, #4]
 8103ab0:	2220      	movs	r2, #32
 8103ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	2200      	movs	r2, #0
 8103aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	2200      	movs	r2, #0
 8103ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8103ac4:	2300      	movs	r3, #0
}
 8103ac6:	4618      	mov	r0, r3
 8103ac8:	3708      	adds	r7, #8
 8103aca:	46bd      	mov	sp, r7
 8103acc:	bd80      	pop	{r7, pc}
	...

08103ad0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8103ad0:	b580      	push	{r7, lr}
 8103ad2:	b088      	sub	sp, #32
 8103ad4:	af02      	add	r7, sp, #8
 8103ad6:	60f8      	str	r0, [r7, #12]
 8103ad8:	607a      	str	r2, [r7, #4]
 8103ada:	461a      	mov	r2, r3
 8103adc:	460b      	mov	r3, r1
 8103ade:	817b      	strh	r3, [r7, #10]
 8103ae0:	4613      	mov	r3, r2
 8103ae2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103ae4:	68fb      	ldr	r3, [r7, #12]
 8103ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103aea:	b2db      	uxtb	r3, r3
 8103aec:	2b20      	cmp	r3, #32
 8103aee:	f040 80fd 	bne.w	8103cec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103af2:	68fb      	ldr	r3, [r7, #12]
 8103af4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103af8:	2b01      	cmp	r3, #1
 8103afa:	d101      	bne.n	8103b00 <HAL_I2C_Master_Transmit+0x30>
 8103afc:	2302      	movs	r3, #2
 8103afe:	e0f6      	b.n	8103cee <HAL_I2C_Master_Transmit+0x21e>
 8103b00:	68fb      	ldr	r3, [r7, #12]
 8103b02:	2201      	movs	r2, #1
 8103b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103b08:	f7ff fc30 	bl	810336c <HAL_GetTick>
 8103b0c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103b0e:	693b      	ldr	r3, [r7, #16]
 8103b10:	9300      	str	r3, [sp, #0]
 8103b12:	2319      	movs	r3, #25
 8103b14:	2201      	movs	r2, #1
 8103b16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8103b1a:	68f8      	ldr	r0, [r7, #12]
 8103b1c:	f000 fa24 	bl	8103f68 <I2C_WaitOnFlagUntilTimeout>
 8103b20:	4603      	mov	r3, r0
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d001      	beq.n	8103b2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8103b26:	2301      	movs	r3, #1
 8103b28:	e0e1      	b.n	8103cee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103b2a:	68fb      	ldr	r3, [r7, #12]
 8103b2c:	2221      	movs	r2, #33	@ 0x21
 8103b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103b32:	68fb      	ldr	r3, [r7, #12]
 8103b34:	2210      	movs	r2, #16
 8103b36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103b3a:	68fb      	ldr	r3, [r7, #12]
 8103b3c:	2200      	movs	r2, #0
 8103b3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103b40:	68fb      	ldr	r3, [r7, #12]
 8103b42:	687a      	ldr	r2, [r7, #4]
 8103b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8103b46:	68fb      	ldr	r3, [r7, #12]
 8103b48:	893a      	ldrh	r2, [r7, #8]
 8103b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8103b4c:	68fb      	ldr	r3, [r7, #12]
 8103b4e:	2200      	movs	r2, #0
 8103b50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103b52:	68fb      	ldr	r3, [r7, #12]
 8103b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103b56:	b29b      	uxth	r3, r3
 8103b58:	2bff      	cmp	r3, #255	@ 0xff
 8103b5a:	d906      	bls.n	8103b6a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103b5c:	68fb      	ldr	r3, [r7, #12]
 8103b5e:	22ff      	movs	r2, #255	@ 0xff
 8103b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8103b62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103b66:	617b      	str	r3, [r7, #20]
 8103b68:	e007      	b.n	8103b7a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103b6a:	68fb      	ldr	r3, [r7, #12]
 8103b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103b6e:	b29a      	uxth	r2, r3
 8103b70:	68fb      	ldr	r3, [r7, #12]
 8103b72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8103b74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103b78:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8103b7a:	68fb      	ldr	r3, [r7, #12]
 8103b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	d024      	beq.n	8103bcc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103b82:	68fb      	ldr	r3, [r7, #12]
 8103b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103b86:	781a      	ldrb	r2, [r3, #0]
 8103b88:	68fb      	ldr	r3, [r7, #12]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103b8e:	68fb      	ldr	r3, [r7, #12]
 8103b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103b92:	1c5a      	adds	r2, r3, #1
 8103b94:	68fb      	ldr	r3, [r7, #12]
 8103b96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103b9c:	b29b      	uxth	r3, r3
 8103b9e:	3b01      	subs	r3, #1
 8103ba0:	b29a      	uxth	r2, r3
 8103ba2:	68fb      	ldr	r3, [r7, #12]
 8103ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8103ba6:	68fb      	ldr	r3, [r7, #12]
 8103ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103baa:	3b01      	subs	r3, #1
 8103bac:	b29a      	uxth	r2, r3
 8103bae:	68fb      	ldr	r3, [r7, #12]
 8103bb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103bb6:	b2db      	uxtb	r3, r3
 8103bb8:	3301      	adds	r3, #1
 8103bba:	b2da      	uxtb	r2, r3
 8103bbc:	8979      	ldrh	r1, [r7, #10]
 8103bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8103cf8 <HAL_I2C_Master_Transmit+0x228>)
 8103bc0:	9300      	str	r3, [sp, #0]
 8103bc2:	697b      	ldr	r3, [r7, #20]
 8103bc4:	68f8      	ldr	r0, [r7, #12]
 8103bc6:	f000 fc1f 	bl	8104408 <I2C_TransferConfig>
 8103bca:	e066      	b.n	8103c9a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8103bcc:	68fb      	ldr	r3, [r7, #12]
 8103bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103bd0:	b2da      	uxtb	r2, r3
 8103bd2:	8979      	ldrh	r1, [r7, #10]
 8103bd4:	4b48      	ldr	r3, [pc, #288]	@ (8103cf8 <HAL_I2C_Master_Transmit+0x228>)
 8103bd6:	9300      	str	r3, [sp, #0]
 8103bd8:	697b      	ldr	r3, [r7, #20]
 8103bda:	68f8      	ldr	r0, [r7, #12]
 8103bdc:	f000 fc14 	bl	8104408 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8103be0:	e05b      	b.n	8103c9a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103be2:	693a      	ldr	r2, [r7, #16]
 8103be4:	6a39      	ldr	r1, [r7, #32]
 8103be6:	68f8      	ldr	r0, [r7, #12]
 8103be8:	f000 fa17 	bl	810401a <I2C_WaitOnTXISFlagUntilTimeout>
 8103bec:	4603      	mov	r3, r0
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	d001      	beq.n	8103bf6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8103bf2:	2301      	movs	r3, #1
 8103bf4:	e07b      	b.n	8103cee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103bf6:	68fb      	ldr	r3, [r7, #12]
 8103bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103bfa:	781a      	ldrb	r2, [r3, #0]
 8103bfc:	68fb      	ldr	r3, [r7, #12]
 8103bfe:	681b      	ldr	r3, [r3, #0]
 8103c00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103c02:	68fb      	ldr	r3, [r7, #12]
 8103c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c06:	1c5a      	adds	r2, r3, #1
 8103c08:	68fb      	ldr	r3, [r7, #12]
 8103c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c10:	b29b      	uxth	r3, r3
 8103c12:	3b01      	subs	r3, #1
 8103c14:	b29a      	uxth	r2, r3
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8103c1a:	68fb      	ldr	r3, [r7, #12]
 8103c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c1e:	3b01      	subs	r3, #1
 8103c20:	b29a      	uxth	r2, r3
 8103c22:	68fb      	ldr	r3, [r7, #12]
 8103c24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103c26:	68fb      	ldr	r3, [r7, #12]
 8103c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c2a:	b29b      	uxth	r3, r3
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d034      	beq.n	8103c9a <HAL_I2C_Master_Transmit+0x1ca>
 8103c30:	68fb      	ldr	r3, [r7, #12]
 8103c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c34:	2b00      	cmp	r3, #0
 8103c36:	d130      	bne.n	8103c9a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103c38:	693b      	ldr	r3, [r7, #16]
 8103c3a:	9300      	str	r3, [sp, #0]
 8103c3c:	6a3b      	ldr	r3, [r7, #32]
 8103c3e:	2200      	movs	r2, #0
 8103c40:	2180      	movs	r1, #128	@ 0x80
 8103c42:	68f8      	ldr	r0, [r7, #12]
 8103c44:	f000 f990 	bl	8103f68 <I2C_WaitOnFlagUntilTimeout>
 8103c48:	4603      	mov	r3, r0
 8103c4a:	2b00      	cmp	r3, #0
 8103c4c:	d001      	beq.n	8103c52 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8103c4e:	2301      	movs	r3, #1
 8103c50:	e04d      	b.n	8103cee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103c52:	68fb      	ldr	r3, [r7, #12]
 8103c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c56:	b29b      	uxth	r3, r3
 8103c58:	2bff      	cmp	r3, #255	@ 0xff
 8103c5a:	d90e      	bls.n	8103c7a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	22ff      	movs	r2, #255	@ 0xff
 8103c60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103c62:	68fb      	ldr	r3, [r7, #12]
 8103c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c66:	b2da      	uxtb	r2, r3
 8103c68:	8979      	ldrh	r1, [r7, #10]
 8103c6a:	2300      	movs	r3, #0
 8103c6c:	9300      	str	r3, [sp, #0]
 8103c6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103c72:	68f8      	ldr	r0, [r7, #12]
 8103c74:	f000 fbc8 	bl	8104408 <I2C_TransferConfig>
 8103c78:	e00f      	b.n	8103c9a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c7e:	b29a      	uxth	r2, r3
 8103c80:	68fb      	ldr	r3, [r7, #12]
 8103c82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103c84:	68fb      	ldr	r3, [r7, #12]
 8103c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103c88:	b2da      	uxtb	r2, r3
 8103c8a:	8979      	ldrh	r1, [r7, #10]
 8103c8c:	2300      	movs	r3, #0
 8103c8e:	9300      	str	r3, [sp, #0]
 8103c90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103c94:	68f8      	ldr	r0, [r7, #12]
 8103c96:	f000 fbb7 	bl	8104408 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103c9a:	68fb      	ldr	r3, [r7, #12]
 8103c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103c9e:	b29b      	uxth	r3, r3
 8103ca0:	2b00      	cmp	r3, #0
 8103ca2:	d19e      	bne.n	8103be2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103ca4:	693a      	ldr	r2, [r7, #16]
 8103ca6:	6a39      	ldr	r1, [r7, #32]
 8103ca8:	68f8      	ldr	r0, [r7, #12]
 8103caa:	f000 f9fd 	bl	81040a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103cae:	4603      	mov	r3, r0
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d001      	beq.n	8103cb8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8103cb4:	2301      	movs	r3, #1
 8103cb6:	e01a      	b.n	8103cee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	2220      	movs	r2, #32
 8103cbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103cc0:	68fb      	ldr	r3, [r7, #12]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	6859      	ldr	r1, [r3, #4]
 8103cc6:	68fb      	ldr	r3, [r7, #12]
 8103cc8:	681a      	ldr	r2, [r3, #0]
 8103cca:	4b0c      	ldr	r3, [pc, #48]	@ (8103cfc <HAL_I2C_Master_Transmit+0x22c>)
 8103ccc:	400b      	ands	r3, r1
 8103cce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103cd0:	68fb      	ldr	r3, [r7, #12]
 8103cd2:	2220      	movs	r2, #32
 8103cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103cd8:	68fb      	ldr	r3, [r7, #12]
 8103cda:	2200      	movs	r2, #0
 8103cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103ce0:	68fb      	ldr	r3, [r7, #12]
 8103ce2:	2200      	movs	r2, #0
 8103ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103ce8:	2300      	movs	r3, #0
 8103cea:	e000      	b.n	8103cee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8103cec:	2302      	movs	r3, #2
  }
}
 8103cee:	4618      	mov	r0, r3
 8103cf0:	3718      	adds	r7, #24
 8103cf2:	46bd      	mov	sp, r7
 8103cf4:	bd80      	pop	{r7, pc}
 8103cf6:	bf00      	nop
 8103cf8:	80002000 	.word	0x80002000
 8103cfc:	fe00e800 	.word	0xfe00e800

08103d00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8103d00:	b580      	push	{r7, lr}
 8103d02:	b088      	sub	sp, #32
 8103d04:	af02      	add	r7, sp, #8
 8103d06:	60f8      	str	r0, [r7, #12]
 8103d08:	607a      	str	r2, [r7, #4]
 8103d0a:	461a      	mov	r2, r3
 8103d0c:	460b      	mov	r3, r1
 8103d0e:	817b      	strh	r3, [r7, #10]
 8103d10:	4613      	mov	r3, r2
 8103d12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103d14:	68fb      	ldr	r3, [r7, #12]
 8103d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103d1a:	b2db      	uxtb	r3, r3
 8103d1c:	2b20      	cmp	r3, #32
 8103d1e:	f040 80db 	bne.w	8103ed8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103d22:	68fb      	ldr	r3, [r7, #12]
 8103d24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103d28:	2b01      	cmp	r3, #1
 8103d2a:	d101      	bne.n	8103d30 <HAL_I2C_Master_Receive+0x30>
 8103d2c:	2302      	movs	r3, #2
 8103d2e:	e0d4      	b.n	8103eda <HAL_I2C_Master_Receive+0x1da>
 8103d30:	68fb      	ldr	r3, [r7, #12]
 8103d32:	2201      	movs	r2, #1
 8103d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103d38:	f7ff fb18 	bl	810336c <HAL_GetTick>
 8103d3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103d3e:	697b      	ldr	r3, [r7, #20]
 8103d40:	9300      	str	r3, [sp, #0]
 8103d42:	2319      	movs	r3, #25
 8103d44:	2201      	movs	r2, #1
 8103d46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8103d4a:	68f8      	ldr	r0, [r7, #12]
 8103d4c:	f000 f90c 	bl	8103f68 <I2C_WaitOnFlagUntilTimeout>
 8103d50:	4603      	mov	r3, r0
 8103d52:	2b00      	cmp	r3, #0
 8103d54:	d001      	beq.n	8103d5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8103d56:	2301      	movs	r3, #1
 8103d58:	e0bf      	b.n	8103eda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103d5a:	68fb      	ldr	r3, [r7, #12]
 8103d5c:	2222      	movs	r2, #34	@ 0x22
 8103d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8103d62:	68fb      	ldr	r3, [r7, #12]
 8103d64:	2210      	movs	r2, #16
 8103d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103d6a:	68fb      	ldr	r3, [r7, #12]
 8103d6c:	2200      	movs	r2, #0
 8103d6e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103d70:	68fb      	ldr	r3, [r7, #12]
 8103d72:	687a      	ldr	r2, [r7, #4]
 8103d74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8103d76:	68fb      	ldr	r3, [r7, #12]
 8103d78:	893a      	ldrh	r2, [r7, #8]
 8103d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8103d7c:	68fb      	ldr	r3, [r7, #12]
 8103d7e:	2200      	movs	r2, #0
 8103d80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103d82:	68fb      	ldr	r3, [r7, #12]
 8103d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103d86:	b29b      	uxth	r3, r3
 8103d88:	2bff      	cmp	r3, #255	@ 0xff
 8103d8a:	d90e      	bls.n	8103daa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103d8c:	68fb      	ldr	r3, [r7, #12]
 8103d8e:	22ff      	movs	r2, #255	@ 0xff
 8103d90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103d92:	68fb      	ldr	r3, [r7, #12]
 8103d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103d96:	b2da      	uxtb	r2, r3
 8103d98:	8979      	ldrh	r1, [r7, #10]
 8103d9a:	4b52      	ldr	r3, [pc, #328]	@ (8103ee4 <HAL_I2C_Master_Receive+0x1e4>)
 8103d9c:	9300      	str	r3, [sp, #0]
 8103d9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103da2:	68f8      	ldr	r0, [r7, #12]
 8103da4:	f000 fb30 	bl	8104408 <I2C_TransferConfig>
 8103da8:	e06d      	b.n	8103e86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103daa:	68fb      	ldr	r3, [r7, #12]
 8103dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103dae:	b29a      	uxth	r2, r3
 8103db0:	68fb      	ldr	r3, [r7, #12]
 8103db2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103db8:	b2da      	uxtb	r2, r3
 8103dba:	8979      	ldrh	r1, [r7, #10]
 8103dbc:	4b49      	ldr	r3, [pc, #292]	@ (8103ee4 <HAL_I2C_Master_Receive+0x1e4>)
 8103dbe:	9300      	str	r3, [sp, #0]
 8103dc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103dc4:	68f8      	ldr	r0, [r7, #12]
 8103dc6:	f000 fb1f 	bl	8104408 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8103dca:	e05c      	b.n	8103e86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103dcc:	697a      	ldr	r2, [r7, #20]
 8103dce:	6a39      	ldr	r1, [r7, #32]
 8103dd0:	68f8      	ldr	r0, [r7, #12]
 8103dd2:	f000 f9ad 	bl	8104130 <I2C_WaitOnRXNEFlagUntilTimeout>
 8103dd6:	4603      	mov	r3, r0
 8103dd8:	2b00      	cmp	r3, #0
 8103dda:	d001      	beq.n	8103de0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8103ddc:	2301      	movs	r3, #1
 8103dde:	e07c      	b.n	8103eda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103dea:	b2d2      	uxtb	r2, r2
 8103dec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103df2:	1c5a      	adds	r2, r3, #1
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8103df8:	68fb      	ldr	r3, [r7, #12]
 8103dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103dfc:	3b01      	subs	r3, #1
 8103dfe:	b29a      	uxth	r2, r3
 8103e00:	68fb      	ldr	r3, [r7, #12]
 8103e02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103e08:	b29b      	uxth	r3, r3
 8103e0a:	3b01      	subs	r3, #1
 8103e0c:	b29a      	uxth	r2, r3
 8103e0e:	68fb      	ldr	r3, [r7, #12]
 8103e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103e16:	b29b      	uxth	r3, r3
 8103e18:	2b00      	cmp	r3, #0
 8103e1a:	d034      	beq.n	8103e86 <HAL_I2C_Master_Receive+0x186>
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103e20:	2b00      	cmp	r3, #0
 8103e22:	d130      	bne.n	8103e86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103e24:	697b      	ldr	r3, [r7, #20]
 8103e26:	9300      	str	r3, [sp, #0]
 8103e28:	6a3b      	ldr	r3, [r7, #32]
 8103e2a:	2200      	movs	r2, #0
 8103e2c:	2180      	movs	r1, #128	@ 0x80
 8103e2e:	68f8      	ldr	r0, [r7, #12]
 8103e30:	f000 f89a 	bl	8103f68 <I2C_WaitOnFlagUntilTimeout>
 8103e34:	4603      	mov	r3, r0
 8103e36:	2b00      	cmp	r3, #0
 8103e38:	d001      	beq.n	8103e3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8103e3a:	2301      	movs	r3, #1
 8103e3c:	e04d      	b.n	8103eda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103e3e:	68fb      	ldr	r3, [r7, #12]
 8103e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103e42:	b29b      	uxth	r3, r3
 8103e44:	2bff      	cmp	r3, #255	@ 0xff
 8103e46:	d90e      	bls.n	8103e66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103e48:	68fb      	ldr	r3, [r7, #12]
 8103e4a:	22ff      	movs	r2, #255	@ 0xff
 8103e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103e52:	b2da      	uxtb	r2, r3
 8103e54:	8979      	ldrh	r1, [r7, #10]
 8103e56:	2300      	movs	r3, #0
 8103e58:	9300      	str	r3, [sp, #0]
 8103e5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103e5e:	68f8      	ldr	r0, [r7, #12]
 8103e60:	f000 fad2 	bl	8104408 <I2C_TransferConfig>
 8103e64:	e00f      	b.n	8103e86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103e66:	68fb      	ldr	r3, [r7, #12]
 8103e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103e6a:	b29a      	uxth	r2, r3
 8103e6c:	68fb      	ldr	r3, [r7, #12]
 8103e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103e70:	68fb      	ldr	r3, [r7, #12]
 8103e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8103e74:	b2da      	uxtb	r2, r3
 8103e76:	8979      	ldrh	r1, [r7, #10]
 8103e78:	2300      	movs	r3, #0
 8103e7a:	9300      	str	r3, [sp, #0]
 8103e7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8103e80:	68f8      	ldr	r0, [r7, #12]
 8103e82:	f000 fac1 	bl	8104408 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8103e86:	68fb      	ldr	r3, [r7, #12]
 8103e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8103e8a:	b29b      	uxth	r3, r3
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d19d      	bne.n	8103dcc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103e90:	697a      	ldr	r2, [r7, #20]
 8103e92:	6a39      	ldr	r1, [r7, #32]
 8103e94:	68f8      	ldr	r0, [r7, #12]
 8103e96:	f000 f907 	bl	81040a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103e9a:	4603      	mov	r3, r0
 8103e9c:	2b00      	cmp	r3, #0
 8103e9e:	d001      	beq.n	8103ea4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8103ea0:	2301      	movs	r3, #1
 8103ea2:	e01a      	b.n	8103eda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	2220      	movs	r2, #32
 8103eaa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103eac:	68fb      	ldr	r3, [r7, #12]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	6859      	ldr	r1, [r3, #4]
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	681a      	ldr	r2, [r3, #0]
 8103eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8103ee8 <HAL_I2C_Master_Receive+0x1e8>)
 8103eb8:	400b      	ands	r3, r1
 8103eba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	2220      	movs	r2, #32
 8103ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	2200      	movs	r2, #0
 8103ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	2200      	movs	r2, #0
 8103ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103ed4:	2300      	movs	r3, #0
 8103ed6:	e000      	b.n	8103eda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8103ed8:	2302      	movs	r3, #2
  }
}
 8103eda:	4618      	mov	r0, r3
 8103edc:	3718      	adds	r7, #24
 8103ede:	46bd      	mov	sp, r7
 8103ee0:	bd80      	pop	{r7, pc}
 8103ee2:	bf00      	nop
 8103ee4:	80002400 	.word	0x80002400
 8103ee8:	fe00e800 	.word	0xfe00e800

08103eec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8103eec:	b480      	push	{r7}
 8103eee:	b083      	sub	sp, #12
 8103ef0:	af00      	add	r7, sp, #0
 8103ef2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8103efa:	b2db      	uxtb	r3, r3
}
 8103efc:	4618      	mov	r0, r3
 8103efe:	370c      	adds	r7, #12
 8103f00:	46bd      	mov	sp, r7
 8103f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f06:	4770      	bx	lr

08103f08 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8103f08:	b480      	push	{r7}
 8103f0a:	b083      	sub	sp, #12
 8103f0c:	af00      	add	r7, sp, #0
 8103f0e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8103f10:	687b      	ldr	r3, [r7, #4]
 8103f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8103f14:	4618      	mov	r0, r3
 8103f16:	370c      	adds	r7, #12
 8103f18:	46bd      	mov	sp, r7
 8103f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f1e:	4770      	bx	lr

08103f20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8103f20:	b480      	push	{r7}
 8103f22:	b083      	sub	sp, #12
 8103f24:	af00      	add	r7, sp, #0
 8103f26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	699b      	ldr	r3, [r3, #24]
 8103f2e:	f003 0302 	and.w	r3, r3, #2
 8103f32:	2b02      	cmp	r3, #2
 8103f34:	d103      	bne.n	8103f3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	2200      	movs	r2, #0
 8103f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	699b      	ldr	r3, [r3, #24]
 8103f44:	f003 0301 	and.w	r3, r3, #1
 8103f48:	2b01      	cmp	r3, #1
 8103f4a:	d007      	beq.n	8103f5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	699a      	ldr	r2, [r3, #24]
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	681b      	ldr	r3, [r3, #0]
 8103f56:	f042 0201 	orr.w	r2, r2, #1
 8103f5a:	619a      	str	r2, [r3, #24]
  }
}
 8103f5c:	bf00      	nop
 8103f5e:	370c      	adds	r7, #12
 8103f60:	46bd      	mov	sp, r7
 8103f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f66:	4770      	bx	lr

08103f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8103f68:	b580      	push	{r7, lr}
 8103f6a:	b084      	sub	sp, #16
 8103f6c:	af00      	add	r7, sp, #0
 8103f6e:	60f8      	str	r0, [r7, #12]
 8103f70:	60b9      	str	r1, [r7, #8]
 8103f72:	603b      	str	r3, [r7, #0]
 8103f74:	4613      	mov	r3, r2
 8103f76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103f78:	e03b      	b.n	8103ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103f7a:	69ba      	ldr	r2, [r7, #24]
 8103f7c:	6839      	ldr	r1, [r7, #0]
 8103f7e:	68f8      	ldr	r0, [r7, #12]
 8103f80:	f000 f962 	bl	8104248 <I2C_IsErrorOccurred>
 8103f84:	4603      	mov	r3, r0
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d001      	beq.n	8103f8e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8103f8a:	2301      	movs	r3, #1
 8103f8c:	e041      	b.n	8104012 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103f8e:	683b      	ldr	r3, [r7, #0]
 8103f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103f94:	d02d      	beq.n	8103ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103f96:	f7ff f9e9 	bl	810336c <HAL_GetTick>
 8103f9a:	4602      	mov	r2, r0
 8103f9c:	69bb      	ldr	r3, [r7, #24]
 8103f9e:	1ad3      	subs	r3, r2, r3
 8103fa0:	683a      	ldr	r2, [r7, #0]
 8103fa2:	429a      	cmp	r2, r3
 8103fa4:	d302      	bcc.n	8103fac <I2C_WaitOnFlagUntilTimeout+0x44>
 8103fa6:	683b      	ldr	r3, [r7, #0]
 8103fa8:	2b00      	cmp	r3, #0
 8103faa:	d122      	bne.n	8103ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	681b      	ldr	r3, [r3, #0]
 8103fb0:	699a      	ldr	r2, [r3, #24]
 8103fb2:	68bb      	ldr	r3, [r7, #8]
 8103fb4:	4013      	ands	r3, r2
 8103fb6:	68ba      	ldr	r2, [r7, #8]
 8103fb8:	429a      	cmp	r2, r3
 8103fba:	bf0c      	ite	eq
 8103fbc:	2301      	moveq	r3, #1
 8103fbe:	2300      	movne	r3, #0
 8103fc0:	b2db      	uxtb	r3, r3
 8103fc2:	461a      	mov	r2, r3
 8103fc4:	79fb      	ldrb	r3, [r7, #7]
 8103fc6:	429a      	cmp	r2, r3
 8103fc8:	d113      	bne.n	8103ff2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8103fca:	68fb      	ldr	r3, [r7, #12]
 8103fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103fce:	f043 0220 	orr.w	r2, r3, #32
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8103fd6:	68fb      	ldr	r3, [r7, #12]
 8103fd8:	2220      	movs	r2, #32
 8103fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8103fde:	68fb      	ldr	r3, [r7, #12]
 8103fe0:	2200      	movs	r2, #0
 8103fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103fe6:	68fb      	ldr	r3, [r7, #12]
 8103fe8:	2200      	movs	r2, #0
 8103fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8103fee:	2301      	movs	r3, #1
 8103ff0:	e00f      	b.n	8104012 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	699a      	ldr	r2, [r3, #24]
 8103ff8:	68bb      	ldr	r3, [r7, #8]
 8103ffa:	4013      	ands	r3, r2
 8103ffc:	68ba      	ldr	r2, [r7, #8]
 8103ffe:	429a      	cmp	r2, r3
 8104000:	bf0c      	ite	eq
 8104002:	2301      	moveq	r3, #1
 8104004:	2300      	movne	r3, #0
 8104006:	b2db      	uxtb	r3, r3
 8104008:	461a      	mov	r2, r3
 810400a:	79fb      	ldrb	r3, [r7, #7]
 810400c:	429a      	cmp	r2, r3
 810400e:	d0b4      	beq.n	8103f7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8104010:	2300      	movs	r3, #0
}
 8104012:	4618      	mov	r0, r3
 8104014:	3710      	adds	r7, #16
 8104016:	46bd      	mov	sp, r7
 8104018:	bd80      	pop	{r7, pc}

0810401a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 810401a:	b580      	push	{r7, lr}
 810401c:	b084      	sub	sp, #16
 810401e:	af00      	add	r7, sp, #0
 8104020:	60f8      	str	r0, [r7, #12]
 8104022:	60b9      	str	r1, [r7, #8]
 8104024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104026:	e033      	b.n	8104090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104028:	687a      	ldr	r2, [r7, #4]
 810402a:	68b9      	ldr	r1, [r7, #8]
 810402c:	68f8      	ldr	r0, [r7, #12]
 810402e:	f000 f90b 	bl	8104248 <I2C_IsErrorOccurred>
 8104032:	4603      	mov	r3, r0
 8104034:	2b00      	cmp	r3, #0
 8104036:	d001      	beq.n	810403c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104038:	2301      	movs	r3, #1
 810403a:	e031      	b.n	81040a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810403c:	68bb      	ldr	r3, [r7, #8]
 810403e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8104042:	d025      	beq.n	8104090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104044:	f7ff f992 	bl	810336c <HAL_GetTick>
 8104048:	4602      	mov	r2, r0
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	1ad3      	subs	r3, r2, r3
 810404e:	68ba      	ldr	r2, [r7, #8]
 8104050:	429a      	cmp	r2, r3
 8104052:	d302      	bcc.n	810405a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8104054:	68bb      	ldr	r3, [r7, #8]
 8104056:	2b00      	cmp	r3, #0
 8104058:	d11a      	bne.n	8104090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 810405a:	68fb      	ldr	r3, [r7, #12]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	699b      	ldr	r3, [r3, #24]
 8104060:	f003 0302 	and.w	r3, r3, #2
 8104064:	2b02      	cmp	r3, #2
 8104066:	d013      	beq.n	8104090 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104068:	68fb      	ldr	r3, [r7, #12]
 810406a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810406c:	f043 0220 	orr.w	r2, r3, #32
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	2220      	movs	r2, #32
 8104078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810407c:	68fb      	ldr	r3, [r7, #12]
 810407e:	2200      	movs	r2, #0
 8104080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104084:	68fb      	ldr	r3, [r7, #12]
 8104086:	2200      	movs	r2, #0
 8104088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810408c:	2301      	movs	r3, #1
 810408e:	e007      	b.n	81040a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104090:	68fb      	ldr	r3, [r7, #12]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	699b      	ldr	r3, [r3, #24]
 8104096:	f003 0302 	and.w	r3, r3, #2
 810409a:	2b02      	cmp	r3, #2
 810409c:	d1c4      	bne.n	8104028 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810409e:	2300      	movs	r3, #0
}
 81040a0:	4618      	mov	r0, r3
 81040a2:	3710      	adds	r7, #16
 81040a4:	46bd      	mov	sp, r7
 81040a6:	bd80      	pop	{r7, pc}

081040a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81040a8:	b580      	push	{r7, lr}
 81040aa:	b084      	sub	sp, #16
 81040ac:	af00      	add	r7, sp, #0
 81040ae:	60f8      	str	r0, [r7, #12]
 81040b0:	60b9      	str	r1, [r7, #8]
 81040b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81040b4:	e02f      	b.n	8104116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81040b6:	687a      	ldr	r2, [r7, #4]
 81040b8:	68b9      	ldr	r1, [r7, #8]
 81040ba:	68f8      	ldr	r0, [r7, #12]
 81040bc:	f000 f8c4 	bl	8104248 <I2C_IsErrorOccurred>
 81040c0:	4603      	mov	r3, r0
 81040c2:	2b00      	cmp	r3, #0
 81040c4:	d001      	beq.n	81040ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81040c6:	2301      	movs	r3, #1
 81040c8:	e02d      	b.n	8104126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81040ca:	f7ff f94f 	bl	810336c <HAL_GetTick>
 81040ce:	4602      	mov	r2, r0
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	1ad3      	subs	r3, r2, r3
 81040d4:	68ba      	ldr	r2, [r7, #8]
 81040d6:	429a      	cmp	r2, r3
 81040d8:	d302      	bcc.n	81040e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 81040da:	68bb      	ldr	r3, [r7, #8]
 81040dc:	2b00      	cmp	r3, #0
 81040de:	d11a      	bne.n	8104116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 81040e0:	68fb      	ldr	r3, [r7, #12]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	699b      	ldr	r3, [r3, #24]
 81040e6:	f003 0320 	and.w	r3, r3, #32
 81040ea:	2b20      	cmp	r3, #32
 81040ec:	d013      	beq.n	8104116 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81040ee:	68fb      	ldr	r3, [r7, #12]
 81040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81040f2:	f043 0220 	orr.w	r2, r3, #32
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81040fa:	68fb      	ldr	r3, [r7, #12]
 81040fc:	2220      	movs	r2, #32
 81040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104102:	68fb      	ldr	r3, [r7, #12]
 8104104:	2200      	movs	r2, #0
 8104106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810410a:	68fb      	ldr	r3, [r7, #12]
 810410c:	2200      	movs	r2, #0
 810410e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8104112:	2301      	movs	r3, #1
 8104114:	e007      	b.n	8104126 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104116:	68fb      	ldr	r3, [r7, #12]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	699b      	ldr	r3, [r3, #24]
 810411c:	f003 0320 	and.w	r3, r3, #32
 8104120:	2b20      	cmp	r3, #32
 8104122:	d1c8      	bne.n	81040b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8104124:	2300      	movs	r3, #0
}
 8104126:	4618      	mov	r0, r3
 8104128:	3710      	adds	r7, #16
 810412a:	46bd      	mov	sp, r7
 810412c:	bd80      	pop	{r7, pc}
	...

08104130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104130:	b580      	push	{r7, lr}
 8104132:	b086      	sub	sp, #24
 8104134:	af00      	add	r7, sp, #0
 8104136:	60f8      	str	r0, [r7, #12]
 8104138:	60b9      	str	r1, [r7, #8]
 810413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810413c:	2300      	movs	r3, #0
 810413e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8104140:	e071      	b.n	8104226 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104142:	687a      	ldr	r2, [r7, #4]
 8104144:	68b9      	ldr	r1, [r7, #8]
 8104146:	68f8      	ldr	r0, [r7, #12]
 8104148:	f000 f87e 	bl	8104248 <I2C_IsErrorOccurred>
 810414c:	4603      	mov	r3, r0
 810414e:	2b00      	cmp	r3, #0
 8104150:	d001      	beq.n	8104156 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8104152:	2301      	movs	r3, #1
 8104154:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8104156:	68fb      	ldr	r3, [r7, #12]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	699b      	ldr	r3, [r3, #24]
 810415c:	f003 0320 	and.w	r3, r3, #32
 8104160:	2b20      	cmp	r3, #32
 8104162:	d13b      	bne.n	81041dc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8104164:	7dfb      	ldrb	r3, [r7, #23]
 8104166:	2b00      	cmp	r3, #0
 8104168:	d138      	bne.n	81041dc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 810416a:	68fb      	ldr	r3, [r7, #12]
 810416c:	681b      	ldr	r3, [r3, #0]
 810416e:	699b      	ldr	r3, [r3, #24]
 8104170:	f003 0304 	and.w	r3, r3, #4
 8104174:	2b04      	cmp	r3, #4
 8104176:	d105      	bne.n	8104184 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8104178:	68fb      	ldr	r3, [r7, #12]
 810417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810417c:	2b00      	cmp	r3, #0
 810417e:	d001      	beq.n	8104184 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8104180:	2300      	movs	r3, #0
 8104182:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	699b      	ldr	r3, [r3, #24]
 810418a:	f003 0310 	and.w	r3, r3, #16
 810418e:	2b10      	cmp	r3, #16
 8104190:	d121      	bne.n	81041d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	2210      	movs	r2, #16
 8104198:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	2204      	movs	r2, #4
 810419e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	2220      	movs	r2, #32
 81041a6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 81041a8:	68fb      	ldr	r3, [r7, #12]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	6859      	ldr	r1, [r3, #4]
 81041ae:	68fb      	ldr	r3, [r7, #12]
 81041b0:	681a      	ldr	r2, [r3, #0]
 81041b2:	4b24      	ldr	r3, [pc, #144]	@ (8104244 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 81041b4:	400b      	ands	r3, r1
 81041b6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	2220      	movs	r2, #32
 81041bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81041c0:	68fb      	ldr	r3, [r7, #12]
 81041c2:	2200      	movs	r2, #0
 81041c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	2200      	movs	r2, #0
 81041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 81041d0:	2301      	movs	r3, #1
 81041d2:	75fb      	strb	r3, [r7, #23]
 81041d4:	e002      	b.n	81041dc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81041d6:	68fb      	ldr	r3, [r7, #12]
 81041d8:	2200      	movs	r2, #0
 81041da:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 81041dc:	f7ff f8c6 	bl	810336c <HAL_GetTick>
 81041e0:	4602      	mov	r2, r0
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	1ad3      	subs	r3, r2, r3
 81041e6:	68ba      	ldr	r2, [r7, #8]
 81041e8:	429a      	cmp	r2, r3
 81041ea:	d302      	bcc.n	81041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 81041ec:	68bb      	ldr	r3, [r7, #8]
 81041ee:	2b00      	cmp	r3, #0
 81041f0:	d119      	bne.n	8104226 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 81041f2:	7dfb      	ldrb	r3, [r7, #23]
 81041f4:	2b00      	cmp	r3, #0
 81041f6:	d116      	bne.n	8104226 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 81041f8:	68fb      	ldr	r3, [r7, #12]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	699b      	ldr	r3, [r3, #24]
 81041fe:	f003 0304 	and.w	r3, r3, #4
 8104202:	2b04      	cmp	r3, #4
 8104204:	d00f      	beq.n	8104226 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810420a:	f043 0220 	orr.w	r2, r3, #32
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104212:	68fb      	ldr	r3, [r7, #12]
 8104214:	2220      	movs	r2, #32
 8104216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810421a:	68fb      	ldr	r3, [r7, #12]
 810421c:	2200      	movs	r2, #0
 810421e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8104222:	2301      	movs	r3, #1
 8104224:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	699b      	ldr	r3, [r3, #24]
 810422c:	f003 0304 	and.w	r3, r3, #4
 8104230:	2b04      	cmp	r3, #4
 8104232:	d002      	beq.n	810423a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8104234:	7dfb      	ldrb	r3, [r7, #23]
 8104236:	2b00      	cmp	r3, #0
 8104238:	d083      	beq.n	8104142 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 810423a:	7dfb      	ldrb	r3, [r7, #23]
}
 810423c:	4618      	mov	r0, r3
 810423e:	3718      	adds	r7, #24
 8104240:	46bd      	mov	sp, r7
 8104242:	bd80      	pop	{r7, pc}
 8104244:	fe00e800 	.word	0xfe00e800

08104248 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104248:	b580      	push	{r7, lr}
 810424a:	b08a      	sub	sp, #40	@ 0x28
 810424c:	af00      	add	r7, sp, #0
 810424e:	60f8      	str	r0, [r7, #12]
 8104250:	60b9      	str	r1, [r7, #8]
 8104252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104254:	2300      	movs	r3, #0
 8104256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 810425a:	68fb      	ldr	r3, [r7, #12]
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	699b      	ldr	r3, [r3, #24]
 8104260:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8104262:	2300      	movs	r3, #0
 8104264:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8104266:	687b      	ldr	r3, [r7, #4]
 8104268:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 810426a:	69bb      	ldr	r3, [r7, #24]
 810426c:	f003 0310 	and.w	r3, r3, #16
 8104270:	2b00      	cmp	r3, #0
 8104272:	d068      	beq.n	8104346 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104274:	68fb      	ldr	r3, [r7, #12]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	2210      	movs	r2, #16
 810427a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810427c:	e049      	b.n	8104312 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810427e:	68bb      	ldr	r3, [r7, #8]
 8104280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8104284:	d045      	beq.n	8104312 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8104286:	f7ff f871 	bl	810336c <HAL_GetTick>
 810428a:	4602      	mov	r2, r0
 810428c:	69fb      	ldr	r3, [r7, #28]
 810428e:	1ad3      	subs	r3, r2, r3
 8104290:	68ba      	ldr	r2, [r7, #8]
 8104292:	429a      	cmp	r2, r3
 8104294:	d302      	bcc.n	810429c <I2C_IsErrorOccurred+0x54>
 8104296:	68bb      	ldr	r3, [r7, #8]
 8104298:	2b00      	cmp	r3, #0
 810429a:	d13a      	bne.n	8104312 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	685b      	ldr	r3, [r3, #4]
 81042a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81042a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 81042a8:	68fb      	ldr	r3, [r7, #12]
 81042aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 81042ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 81042b0:	68fb      	ldr	r3, [r7, #12]
 81042b2:	681b      	ldr	r3, [r3, #0]
 81042b4:	699b      	ldr	r3, [r3, #24]
 81042b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81042ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81042be:	d121      	bne.n	8104304 <I2C_IsErrorOccurred+0xbc>
 81042c0:	697b      	ldr	r3, [r7, #20]
 81042c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81042c6:	d01d      	beq.n	8104304 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 81042c8:	7cfb      	ldrb	r3, [r7, #19]
 81042ca:	2b20      	cmp	r3, #32
 81042cc:	d01a      	beq.n	8104304 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 81042ce:	68fb      	ldr	r3, [r7, #12]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	685a      	ldr	r2, [r3, #4]
 81042d4:	68fb      	ldr	r3, [r7, #12]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 81042dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 81042de:	f7ff f845 	bl	810336c <HAL_GetTick>
 81042e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81042e4:	e00e      	b.n	8104304 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 81042e6:	f7ff f841 	bl	810336c <HAL_GetTick>
 81042ea:	4602      	mov	r2, r0
 81042ec:	69fb      	ldr	r3, [r7, #28]
 81042ee:	1ad3      	subs	r3, r2, r3
 81042f0:	2b19      	cmp	r3, #25
 81042f2:	d907      	bls.n	8104304 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 81042f4:	6a3b      	ldr	r3, [r7, #32]
 81042f6:	f043 0320 	orr.w	r3, r3, #32
 81042fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 81042fc:	2301      	movs	r3, #1
 81042fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8104302:	e006      	b.n	8104312 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	699b      	ldr	r3, [r3, #24]
 810430a:	f003 0320 	and.w	r3, r3, #32
 810430e:	2b20      	cmp	r3, #32
 8104310:	d1e9      	bne.n	81042e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	699b      	ldr	r3, [r3, #24]
 8104318:	f003 0320 	and.w	r3, r3, #32
 810431c:	2b20      	cmp	r3, #32
 810431e:	d003      	beq.n	8104328 <I2C_IsErrorOccurred+0xe0>
 8104320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8104324:	2b00      	cmp	r3, #0
 8104326:	d0aa      	beq.n	810427e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8104328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810432c:	2b00      	cmp	r3, #0
 810432e:	d103      	bne.n	8104338 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104330:	68fb      	ldr	r3, [r7, #12]
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	2220      	movs	r2, #32
 8104336:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8104338:	6a3b      	ldr	r3, [r7, #32]
 810433a:	f043 0304 	orr.w	r3, r3, #4
 810433e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8104340:	2301      	movs	r3, #1
 8104342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8104346:	68fb      	ldr	r3, [r7, #12]
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	699b      	ldr	r3, [r3, #24]
 810434c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 810434e:	69bb      	ldr	r3, [r7, #24]
 8104350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104354:	2b00      	cmp	r3, #0
 8104356:	d00b      	beq.n	8104370 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8104358:	6a3b      	ldr	r3, [r7, #32]
 810435a:	f043 0301 	orr.w	r3, r3, #1
 810435e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8104360:	68fb      	ldr	r3, [r7, #12]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8104368:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810436a:	2301      	movs	r3, #1
 810436c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8104370:	69bb      	ldr	r3, [r7, #24]
 8104372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8104376:	2b00      	cmp	r3, #0
 8104378:	d00b      	beq.n	8104392 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810437a:	6a3b      	ldr	r3, [r7, #32]
 810437c:	f043 0308 	orr.w	r3, r3, #8
 8104380:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8104382:	68fb      	ldr	r3, [r7, #12]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810438a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810438c:	2301      	movs	r3, #1
 810438e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8104392:	69bb      	ldr	r3, [r7, #24]
 8104394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8104398:	2b00      	cmp	r3, #0
 810439a:	d00b      	beq.n	81043b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 810439c:	6a3b      	ldr	r3, [r7, #32]
 810439e:	f043 0302 	orr.w	r3, r3, #2
 81043a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 81043a4:	68fb      	ldr	r3, [r7, #12]
 81043a6:	681b      	ldr	r3, [r3, #0]
 81043a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81043ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81043ae:	2301      	movs	r3, #1
 81043b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 81043b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81043b8:	2b00      	cmp	r3, #0
 81043ba:	d01c      	beq.n	81043f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81043bc:	68f8      	ldr	r0, [r7, #12]
 81043be:	f7ff fdaf 	bl	8103f20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	6859      	ldr	r1, [r3, #4]
 81043c8:	68fb      	ldr	r3, [r7, #12]
 81043ca:	681a      	ldr	r2, [r3, #0]
 81043cc:	4b0d      	ldr	r3, [pc, #52]	@ (8104404 <I2C_IsErrorOccurred+0x1bc>)
 81043ce:	400b      	ands	r3, r1
 81043d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81043d2:	68fb      	ldr	r3, [r7, #12]
 81043d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81043d6:	6a3b      	ldr	r3, [r7, #32]
 81043d8:	431a      	orrs	r2, r3
 81043da:	68fb      	ldr	r3, [r7, #12]
 81043dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81043de:	68fb      	ldr	r3, [r7, #12]
 81043e0:	2220      	movs	r2, #32
 81043e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81043e6:	68fb      	ldr	r3, [r7, #12]
 81043e8:	2200      	movs	r2, #0
 81043ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81043ee:	68fb      	ldr	r3, [r7, #12]
 81043f0:	2200      	movs	r2, #0
 81043f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 81043f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 81043fa:	4618      	mov	r0, r3
 81043fc:	3728      	adds	r7, #40	@ 0x28
 81043fe:	46bd      	mov	sp, r7
 8104400:	bd80      	pop	{r7, pc}
 8104402:	bf00      	nop
 8104404:	fe00e800 	.word	0xfe00e800

08104408 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104408:	b480      	push	{r7}
 810440a:	b087      	sub	sp, #28
 810440c:	af00      	add	r7, sp, #0
 810440e:	60f8      	str	r0, [r7, #12]
 8104410:	607b      	str	r3, [r7, #4]
 8104412:	460b      	mov	r3, r1
 8104414:	817b      	strh	r3, [r7, #10]
 8104416:	4613      	mov	r3, r2
 8104418:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810441a:	897b      	ldrh	r3, [r7, #10]
 810441c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8104420:	7a7b      	ldrb	r3, [r7, #9]
 8104422:	041b      	lsls	r3, r3, #16
 8104424:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8104428:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 810442e:	6a3b      	ldr	r3, [r7, #32]
 8104430:	4313      	orrs	r3, r2
 8104432:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104436:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	681b      	ldr	r3, [r3, #0]
 810443c:	685a      	ldr	r2, [r3, #4]
 810443e:	6a3b      	ldr	r3, [r7, #32]
 8104440:	0d5b      	lsrs	r3, r3, #21
 8104442:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8104446:	4b08      	ldr	r3, [pc, #32]	@ (8104468 <I2C_TransferConfig+0x60>)
 8104448:	430b      	orrs	r3, r1
 810444a:	43db      	mvns	r3, r3
 810444c:	ea02 0103 	and.w	r1, r2, r3
 8104450:	68fb      	ldr	r3, [r7, #12]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	697a      	ldr	r2, [r7, #20]
 8104456:	430a      	orrs	r2, r1
 8104458:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810445a:	bf00      	nop
 810445c:	371c      	adds	r7, #28
 810445e:	46bd      	mov	sp, r7
 8104460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104464:	4770      	bx	lr
 8104466:	bf00      	nop
 8104468:	03ff63ff 	.word	0x03ff63ff

0810446c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 810446c:	b480      	push	{r7}
 810446e:	b083      	sub	sp, #12
 8104470:	af00      	add	r7, sp, #0
 8104472:	6078      	str	r0, [r7, #4]
 8104474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810447c:	b2db      	uxtb	r3, r3
 810447e:	2b20      	cmp	r3, #32
 8104480:	d138      	bne.n	81044f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8104488:	2b01      	cmp	r3, #1
 810448a:	d101      	bne.n	8104490 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 810448c:	2302      	movs	r3, #2
 810448e:	e032      	b.n	81044f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	2201      	movs	r2, #1
 8104494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	2224      	movs	r2, #36	@ 0x24
 810449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81044a0:	687b      	ldr	r3, [r7, #4]
 81044a2:	681b      	ldr	r3, [r3, #0]
 81044a4:	681a      	ldr	r2, [r3, #0]
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	f022 0201 	bic.w	r2, r2, #1
 81044ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	681b      	ldr	r3, [r3, #0]
 81044b4:	681a      	ldr	r2, [r3, #0]
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 81044be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	6819      	ldr	r1, [r3, #0]
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	681b      	ldr	r3, [r3, #0]
 81044ca:	683a      	ldr	r2, [r7, #0]
 81044cc:	430a      	orrs	r2, r1
 81044ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	681a      	ldr	r2, [r3, #0]
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	681b      	ldr	r3, [r3, #0]
 81044da:	f042 0201 	orr.w	r2, r2, #1
 81044de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	2220      	movs	r2, #32
 81044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	2200      	movs	r2, #0
 81044ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81044f0:	2300      	movs	r3, #0
 81044f2:	e000      	b.n	81044f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81044f4:	2302      	movs	r3, #2
  }
}
 81044f6:	4618      	mov	r0, r3
 81044f8:	370c      	adds	r7, #12
 81044fa:	46bd      	mov	sp, r7
 81044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104500:	4770      	bx	lr

08104502 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8104502:	b480      	push	{r7}
 8104504:	b085      	sub	sp, #20
 8104506:	af00      	add	r7, sp, #0
 8104508:	6078      	str	r0, [r7, #4]
 810450a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8104512:	b2db      	uxtb	r3, r3
 8104514:	2b20      	cmp	r3, #32
 8104516:	d139      	bne.n	810458c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810451e:	2b01      	cmp	r3, #1
 8104520:	d101      	bne.n	8104526 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8104522:	2302      	movs	r3, #2
 8104524:	e033      	b.n	810458e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	2201      	movs	r2, #1
 810452a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810452e:	687b      	ldr	r3, [r7, #4]
 8104530:	2224      	movs	r2, #36	@ 0x24
 8104532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	681a      	ldr	r2, [r3, #0]
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	f022 0201 	bic.w	r2, r2, #1
 8104544:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 810454e:	68fb      	ldr	r3, [r7, #12]
 8104550:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104554:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104556:	683b      	ldr	r3, [r7, #0]
 8104558:	021b      	lsls	r3, r3, #8
 810455a:	68fa      	ldr	r2, [r7, #12]
 810455c:	4313      	orrs	r3, r2
 810455e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104560:	687b      	ldr	r3, [r7, #4]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	68fa      	ldr	r2, [r7, #12]
 8104566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	681b      	ldr	r3, [r3, #0]
 810456c:	681a      	ldr	r2, [r3, #0]
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	f042 0201 	orr.w	r2, r2, #1
 8104576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	2220      	movs	r2, #32
 810457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	2200      	movs	r2, #0
 8104584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8104588:	2300      	movs	r3, #0
 810458a:	e000      	b.n	810458e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 810458c:	2302      	movs	r3, #2
  }
}
 810458e:	4618      	mov	r0, r3
 8104590:	3714      	adds	r7, #20
 8104592:	46bd      	mov	sp, r7
 8104594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104598:	4770      	bx	lr
	...

0810459c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810459c:	b580      	push	{r7, lr}
 810459e:	b084      	sub	sp, #16
 81045a0:	af00      	add	r7, sp, #0
 81045a2:	60f8      	str	r0, [r7, #12]
 81045a4:	460b      	mov	r3, r1
 81045a6:	607a      	str	r2, [r7, #4]
 81045a8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81045aa:	4b37      	ldr	r3, [pc, #220]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	f023 0201 	bic.w	r2, r3, #1
 81045b2:	4935      	ldr	r1, [pc, #212]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045b4:	68fb      	ldr	r3, [r7, #12]
 81045b6:	4313      	orrs	r3, r2
 81045b8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	2b00      	cmp	r3, #0
 81045be:	d123      	bne.n	8104608 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81045c0:	f7ff f814 	bl	81035ec <HAL_GetCurrentCPUID>
 81045c4:	4603      	mov	r3, r0
 81045c6:	2b03      	cmp	r3, #3
 81045c8:	d158      	bne.n	810467c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81045ca:	4b2f      	ldr	r3, [pc, #188]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045cc:	691b      	ldr	r3, [r3, #16]
 81045ce:	4a2e      	ldr	r2, [pc, #184]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 81045d0:	f023 0301 	bic.w	r3, r3, #1
 81045d4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81045d6:	4b2d      	ldr	r3, [pc, #180]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81045d8:	691b      	ldr	r3, [r3, #16]
 81045da:	4a2c      	ldr	r2, [pc, #176]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81045dc:	f043 0304 	orr.w	r3, r3, #4
 81045e0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81045e2:	f3bf 8f4f 	dsb	sy
}
 81045e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81045e8:	f3bf 8f6f 	isb	sy
}
 81045ec:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81045ee:	7afb      	ldrb	r3, [r7, #11]
 81045f0:	2b01      	cmp	r3, #1
 81045f2:	d101      	bne.n	81045f8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81045f4:	bf30      	wfi
 81045f6:	e000      	b.n	81045fa <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81045f8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81045fa:	4b24      	ldr	r3, [pc, #144]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81045fc:	691b      	ldr	r3, [r3, #16]
 81045fe:	4a23      	ldr	r2, [pc, #140]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104600:	f023 0304 	bic.w	r3, r3, #4
 8104604:	6113      	str	r3, [r2, #16]
 8104606:	e03c      	b.n	8104682 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	2b01      	cmp	r3, #1
 810460c:	d123      	bne.n	8104656 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810460e:	f7fe ffed 	bl	81035ec <HAL_GetCurrentCPUID>
 8104612:	4603      	mov	r3, r0
 8104614:	2b01      	cmp	r3, #1
 8104616:	d133      	bne.n	8104680 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104618:	4b1b      	ldr	r3, [pc, #108]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 810461a:	695b      	ldr	r3, [r3, #20]
 810461c:	4a1a      	ldr	r2, [pc, #104]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 810461e:	f023 0302 	bic.w	r3, r3, #2
 8104622:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104624:	4b19      	ldr	r3, [pc, #100]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104626:	691b      	ldr	r3, [r3, #16]
 8104628:	4a18      	ldr	r2, [pc, #96]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810462a:	f043 0304 	orr.w	r3, r3, #4
 810462e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104630:	f3bf 8f4f 	dsb	sy
}
 8104634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104636:	f3bf 8f6f 	isb	sy
}
 810463a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810463c:	7afb      	ldrb	r3, [r7, #11]
 810463e:	2b01      	cmp	r3, #1
 8104640:	d101      	bne.n	8104646 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104642:	bf30      	wfi
 8104644:	e000      	b.n	8104648 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104646:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104648:	4b10      	ldr	r3, [pc, #64]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810464a:	691b      	ldr	r3, [r3, #16]
 810464c:	4a0f      	ldr	r2, [pc, #60]	@ (810468c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810464e:	f023 0304 	bic.w	r3, r3, #4
 8104652:	6113      	str	r3, [r2, #16]
 8104654:	e015      	b.n	8104682 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104656:	f7fe ffc9 	bl	81035ec <HAL_GetCurrentCPUID>
 810465a:	4603      	mov	r3, r0
 810465c:	2b03      	cmp	r3, #3
 810465e:	d106      	bne.n	810466e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104660:	4b09      	ldr	r3, [pc, #36]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104662:	691b      	ldr	r3, [r3, #16]
 8104664:	4a08      	ldr	r2, [pc, #32]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104666:	f023 0304 	bic.w	r3, r3, #4
 810466a:	6113      	str	r3, [r2, #16]
 810466c:	e009      	b.n	8104682 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810466e:	4b06      	ldr	r3, [pc, #24]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104670:	695b      	ldr	r3, [r3, #20]
 8104672:	4a05      	ldr	r2, [pc, #20]	@ (8104688 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104674:	f023 0304 	bic.w	r3, r3, #4
 8104678:	6153      	str	r3, [r2, #20]
 810467a:	e002      	b.n	8104682 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810467c:	bf00      	nop
 810467e:	e000      	b.n	8104682 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104680:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104682:	3710      	adds	r7, #16
 8104684:	46bd      	mov	sp, r7
 8104686:	bd80      	pop	{r7, pc}
 8104688:	58024800 	.word	0x58024800
 810468c:	e000ed00 	.word	0xe000ed00

08104690 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104690:	b580      	push	{r7, lr}
 8104692:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104694:	f7fe ffaa 	bl	81035ec <HAL_GetCurrentCPUID>
 8104698:	4603      	mov	r3, r0
 810469a:	2b03      	cmp	r3, #3
 810469c:	d101      	bne.n	81046a2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810469e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81046a0:	e001      	b.n	81046a6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81046a2:	bf40      	sev
    __WFE ();
 81046a4:	bf20      	wfe
}
 81046a6:	bf00      	nop
 81046a8:	bd80      	pop	{r7, pc}
	...

081046ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81046ac:	b480      	push	{r7}
 81046ae:	b089      	sub	sp, #36	@ 0x24
 81046b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81046b2:	4bb3      	ldr	r3, [pc, #716]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81046b4:	691b      	ldr	r3, [r3, #16]
 81046b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81046ba:	2b18      	cmp	r3, #24
 81046bc:	f200 8155 	bhi.w	810496a <HAL_RCC_GetSysClockFreq+0x2be>
 81046c0:	a201      	add	r2, pc, #4	@ (adr r2, 81046c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046c6:	bf00      	nop
 81046c8:	0810472d 	.word	0x0810472d
 81046cc:	0810496b 	.word	0x0810496b
 81046d0:	0810496b 	.word	0x0810496b
 81046d4:	0810496b 	.word	0x0810496b
 81046d8:	0810496b 	.word	0x0810496b
 81046dc:	0810496b 	.word	0x0810496b
 81046e0:	0810496b 	.word	0x0810496b
 81046e4:	0810496b 	.word	0x0810496b
 81046e8:	08104753 	.word	0x08104753
 81046ec:	0810496b 	.word	0x0810496b
 81046f0:	0810496b 	.word	0x0810496b
 81046f4:	0810496b 	.word	0x0810496b
 81046f8:	0810496b 	.word	0x0810496b
 81046fc:	0810496b 	.word	0x0810496b
 8104700:	0810496b 	.word	0x0810496b
 8104704:	0810496b 	.word	0x0810496b
 8104708:	08104759 	.word	0x08104759
 810470c:	0810496b 	.word	0x0810496b
 8104710:	0810496b 	.word	0x0810496b
 8104714:	0810496b 	.word	0x0810496b
 8104718:	0810496b 	.word	0x0810496b
 810471c:	0810496b 	.word	0x0810496b
 8104720:	0810496b 	.word	0x0810496b
 8104724:	0810496b 	.word	0x0810496b
 8104728:	0810475f 	.word	0x0810475f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810472c:	4b94      	ldr	r3, [pc, #592]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	f003 0320 	and.w	r3, r3, #32
 8104734:	2b00      	cmp	r3, #0
 8104736:	d009      	beq.n	810474c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104738:	4b91      	ldr	r3, [pc, #580]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	08db      	lsrs	r3, r3, #3
 810473e:	f003 0303 	and.w	r3, r3, #3
 8104742:	4a90      	ldr	r2, [pc, #576]	@ (8104984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104744:	fa22 f303 	lsr.w	r3, r2, r3
 8104748:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810474a:	e111      	b.n	8104970 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810474c:	4b8d      	ldr	r3, [pc, #564]	@ (8104984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810474e:	61bb      	str	r3, [r7, #24]
      break;
 8104750:	e10e      	b.n	8104970 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8104752:	4b8d      	ldr	r3, [pc, #564]	@ (8104988 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104754:	61bb      	str	r3, [r7, #24]
      break;
 8104756:	e10b      	b.n	8104970 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8104758:	4b8c      	ldr	r3, [pc, #560]	@ (810498c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810475a:	61bb      	str	r3, [r7, #24]
      break;
 810475c:	e108      	b.n	8104970 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810475e:	4b88      	ldr	r3, [pc, #544]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104762:	f003 0303 	and.w	r3, r3, #3
 8104766:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8104768:	4b85      	ldr	r3, [pc, #532]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810476c:	091b      	lsrs	r3, r3, #4
 810476e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104772:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104774:	4b82      	ldr	r3, [pc, #520]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104778:	f003 0301 	and.w	r3, r3, #1
 810477c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810477e:	4b80      	ldr	r3, [pc, #512]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104782:	08db      	lsrs	r3, r3, #3
 8104784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104788:	68fa      	ldr	r2, [r7, #12]
 810478a:	fb02 f303 	mul.w	r3, r2, r3
 810478e:	ee07 3a90 	vmov	s15, r3
 8104792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104796:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810479a:	693b      	ldr	r3, [r7, #16]
 810479c:	2b00      	cmp	r3, #0
 810479e:	f000 80e1 	beq.w	8104964 <HAL_RCC_GetSysClockFreq+0x2b8>
 81047a2:	697b      	ldr	r3, [r7, #20]
 81047a4:	2b02      	cmp	r3, #2
 81047a6:	f000 8083 	beq.w	81048b0 <HAL_RCC_GetSysClockFreq+0x204>
 81047aa:	697b      	ldr	r3, [r7, #20]
 81047ac:	2b02      	cmp	r3, #2
 81047ae:	f200 80a1 	bhi.w	81048f4 <HAL_RCC_GetSysClockFreq+0x248>
 81047b2:	697b      	ldr	r3, [r7, #20]
 81047b4:	2b00      	cmp	r3, #0
 81047b6:	d003      	beq.n	81047c0 <HAL_RCC_GetSysClockFreq+0x114>
 81047b8:	697b      	ldr	r3, [r7, #20]
 81047ba:	2b01      	cmp	r3, #1
 81047bc:	d056      	beq.n	810486c <HAL_RCC_GetSysClockFreq+0x1c0>
 81047be:	e099      	b.n	81048f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81047c0:	4b6f      	ldr	r3, [pc, #444]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	f003 0320 	and.w	r3, r3, #32
 81047c8:	2b00      	cmp	r3, #0
 81047ca:	d02d      	beq.n	8104828 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81047cc:	4b6c      	ldr	r3, [pc, #432]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047ce:	681b      	ldr	r3, [r3, #0]
 81047d0:	08db      	lsrs	r3, r3, #3
 81047d2:	f003 0303 	and.w	r3, r3, #3
 81047d6:	4a6b      	ldr	r2, [pc, #428]	@ (8104984 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81047d8:	fa22 f303 	lsr.w	r3, r2, r3
 81047dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	ee07 3a90 	vmov	s15, r3
 81047e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047e8:	693b      	ldr	r3, [r7, #16]
 81047ea:	ee07 3a90 	vmov	s15, r3
 81047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81047f6:	4b62      	ldr	r3, [pc, #392]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81047fe:	ee07 3a90 	vmov	s15, r3
 8104802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104806:	ed97 6a02 	vldr	s12, [r7, #8]
 810480a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8104990 <HAL_RCC_GetSysClockFreq+0x2e4>
 810480e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810481a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104822:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104826:	e087      	b.n	8104938 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104828:	693b      	ldr	r3, [r7, #16]
 810482a:	ee07 3a90 	vmov	s15, r3
 810482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104832:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8104994 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810483a:	4b51      	ldr	r3, [pc, #324]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810483c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104842:	ee07 3a90 	vmov	s15, r3
 8104846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810484a:	ed97 6a02 	vldr	s12, [r7, #8]
 810484e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8104990 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810485a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810485e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810486a:	e065      	b.n	8104938 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810486c:	693b      	ldr	r3, [r7, #16]
 810486e:	ee07 3a90 	vmov	s15, r3
 8104872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104876:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8104998 <HAL_RCC_GetSysClockFreq+0x2ec>
 810487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810487e:	4b40      	ldr	r3, [pc, #256]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104886:	ee07 3a90 	vmov	s15, r3
 810488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810488e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104892:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8104990 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810489a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810489e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81048a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81048ae:	e043      	b.n	8104938 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81048b0:	693b      	ldr	r3, [r7, #16]
 81048b2:	ee07 3a90 	vmov	s15, r3
 81048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810499c <HAL_RCC_GetSysClockFreq+0x2f0>
 81048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81048c2:	4b2f      	ldr	r3, [pc, #188]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81048ca:	ee07 3a90 	vmov	s15, r3
 81048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81048d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81048d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8104990 <HAL_RCC_GetSysClockFreq+0x2e4>
 81048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81048f2:	e021      	b.n	8104938 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81048f4:	693b      	ldr	r3, [r7, #16]
 81048f6:	ee07 3a90 	vmov	s15, r3
 81048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8104998 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104906:	4b1e      	ldr	r3, [pc, #120]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810490e:	ee07 3a90 	vmov	s15, r3
 8104912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104916:	ed97 6a02 	vldr	s12, [r7, #8]
 810491a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8104990 <HAL_RCC_GetSysClockFreq+0x2e4>
 810491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104932:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104936:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104938:	4b11      	ldr	r3, [pc, #68]	@ (8104980 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810493a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810493c:	0a5b      	lsrs	r3, r3, #9
 810493e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104942:	3301      	adds	r3, #1
 8104944:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104946:	683b      	ldr	r3, [r7, #0]
 8104948:	ee07 3a90 	vmov	s15, r3
 810494c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104950:	edd7 6a07 	vldr	s13, [r7, #28]
 8104954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810495c:	ee17 3a90 	vmov	r3, s15
 8104960:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104962:	e005      	b.n	8104970 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104964:	2300      	movs	r3, #0
 8104966:	61bb      	str	r3, [r7, #24]
      break;
 8104968:	e002      	b.n	8104970 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810496a:	4b07      	ldr	r3, [pc, #28]	@ (8104988 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810496c:	61bb      	str	r3, [r7, #24]
      break;
 810496e:	bf00      	nop
  }

  return sysclockfreq;
 8104970:	69bb      	ldr	r3, [r7, #24]
}
 8104972:	4618      	mov	r0, r3
 8104974:	3724      	adds	r7, #36	@ 0x24
 8104976:	46bd      	mov	sp, r7
 8104978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810497c:	4770      	bx	lr
 810497e:	bf00      	nop
 8104980:	58024400 	.word	0x58024400
 8104984:	03d09000 	.word	0x03d09000
 8104988:	003d0900 	.word	0x003d0900
 810498c:	007a1200 	.word	0x007a1200
 8104990:	46000000 	.word	0x46000000
 8104994:	4c742400 	.word	0x4c742400
 8104998:	4a742400 	.word	0x4a742400
 810499c:	4af42400 	.word	0x4af42400

081049a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81049a0:	b580      	push	{r7, lr}
 81049a2:	b082      	sub	sp, #8
 81049a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81049a6:	f7ff fe81 	bl	81046ac <HAL_RCC_GetSysClockFreq>
 81049aa:	4602      	mov	r2, r0
 81049ac:	4b11      	ldr	r3, [pc, #68]	@ (81049f4 <HAL_RCC_GetHCLKFreq+0x54>)
 81049ae:	699b      	ldr	r3, [r3, #24]
 81049b0:	0a1b      	lsrs	r3, r3, #8
 81049b2:	f003 030f 	and.w	r3, r3, #15
 81049b6:	4910      	ldr	r1, [pc, #64]	@ (81049f8 <HAL_RCC_GetHCLKFreq+0x58>)
 81049b8:	5ccb      	ldrb	r3, [r1, r3]
 81049ba:	f003 031f 	and.w	r3, r3, #31
 81049be:	fa22 f303 	lsr.w	r3, r2, r3
 81049c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81049c4:	4b0b      	ldr	r3, [pc, #44]	@ (81049f4 <HAL_RCC_GetHCLKFreq+0x54>)
 81049c6:	699b      	ldr	r3, [r3, #24]
 81049c8:	f003 030f 	and.w	r3, r3, #15
 81049cc:	4a0a      	ldr	r2, [pc, #40]	@ (81049f8 <HAL_RCC_GetHCLKFreq+0x58>)
 81049ce:	5cd3      	ldrb	r3, [r2, r3]
 81049d0:	f003 031f 	and.w	r3, r3, #31
 81049d4:	687a      	ldr	r2, [r7, #4]
 81049d6:	fa22 f303 	lsr.w	r3, r2, r3
 81049da:	4a08      	ldr	r2, [pc, #32]	@ (81049fc <HAL_RCC_GetHCLKFreq+0x5c>)
 81049dc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81049de:	4b07      	ldr	r3, [pc, #28]	@ (81049fc <HAL_RCC_GetHCLKFreq+0x5c>)
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	4a07      	ldr	r2, [pc, #28]	@ (8104a00 <HAL_RCC_GetHCLKFreq+0x60>)
 81049e4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81049e6:	4b05      	ldr	r3, [pc, #20]	@ (81049fc <HAL_RCC_GetHCLKFreq+0x5c>)
 81049e8:	681b      	ldr	r3, [r3, #0]
}
 81049ea:	4618      	mov	r0, r3
 81049ec:	3708      	adds	r7, #8
 81049ee:	46bd      	mov	sp, r7
 81049f0:	bd80      	pop	{r7, pc}
 81049f2:	bf00      	nop
 81049f4:	58024400 	.word	0x58024400
 81049f8:	0810e9d4 	.word	0x0810e9d4
 81049fc:	10000004 	.word	0x10000004
 8104a00:	10000000 	.word	0x10000000

08104a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104a04:	b580      	push	{r7, lr}
 8104a06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104a08:	f7ff ffca 	bl	81049a0 <HAL_RCC_GetHCLKFreq>
 8104a0c:	4602      	mov	r2, r0
 8104a0e:	4b06      	ldr	r3, [pc, #24]	@ (8104a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104a10:	69db      	ldr	r3, [r3, #28]
 8104a12:	091b      	lsrs	r3, r3, #4
 8104a14:	f003 0307 	and.w	r3, r3, #7
 8104a18:	4904      	ldr	r1, [pc, #16]	@ (8104a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8104a1a:	5ccb      	ldrb	r3, [r1, r3]
 8104a1c:	f003 031f 	and.w	r3, r3, #31
 8104a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104a24:	4618      	mov	r0, r3
 8104a26:	bd80      	pop	{r7, pc}
 8104a28:	58024400 	.word	0x58024400
 8104a2c:	0810e9d4 	.word	0x0810e9d4

08104a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104a30:	b580      	push	{r7, lr}
 8104a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104a34:	f7ff ffb4 	bl	81049a0 <HAL_RCC_GetHCLKFreq>
 8104a38:	4602      	mov	r2, r0
 8104a3a:	4b06      	ldr	r3, [pc, #24]	@ (8104a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8104a3c:	69db      	ldr	r3, [r3, #28]
 8104a3e:	0a1b      	lsrs	r3, r3, #8
 8104a40:	f003 0307 	and.w	r3, r3, #7
 8104a44:	4904      	ldr	r1, [pc, #16]	@ (8104a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104a46:	5ccb      	ldrb	r3, [r1, r3]
 8104a48:	f003 031f 	and.w	r3, r3, #31
 8104a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104a50:	4618      	mov	r0, r3
 8104a52:	bd80      	pop	{r7, pc}
 8104a54:	58024400 	.word	0x58024400
 8104a58:	0810e9d4 	.word	0x0810e9d4

08104a5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104a60:	b0ca      	sub	sp, #296	@ 0x128
 8104a62:	af00      	add	r7, sp, #0
 8104a64:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104a68:	2300      	movs	r3, #0
 8104a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104a6e:	2300      	movs	r3, #0
 8104a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a7c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8104a80:	2500      	movs	r5, #0
 8104a82:	ea54 0305 	orrs.w	r3, r4, r5
 8104a86:	d049      	beq.n	8104b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104a8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104a92:	d02f      	beq.n	8104af4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104a94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8104a98:	d828      	bhi.n	8104aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104a9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104a9e:	d01a      	beq.n	8104ad6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104aa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104aa4:	d822      	bhi.n	8104aec <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104aa6:	2b00      	cmp	r3, #0
 8104aa8:	d003      	beq.n	8104ab2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104aaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104aae:	d007      	beq.n	8104ac0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104ab0:	e01c      	b.n	8104aec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ab2:	4bb8      	ldr	r3, [pc, #736]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ab6:	4ab7      	ldr	r2, [pc, #732]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104abe:	e01a      	b.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ac4:	3308      	adds	r3, #8
 8104ac6:	2102      	movs	r1, #2
 8104ac8:	4618      	mov	r0, r3
 8104aca:	f001 fc8f 	bl	81063ec <RCCEx_PLL2_Config>
 8104ace:	4603      	mov	r3, r0
 8104ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104ad4:	e00f      	b.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ada:	3328      	adds	r3, #40	@ 0x28
 8104adc:	2102      	movs	r1, #2
 8104ade:	4618      	mov	r0, r3
 8104ae0:	f001 fd36 	bl	8106550 <RCCEx_PLL3_Config>
 8104ae4:	4603      	mov	r3, r0
 8104ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104aea:	e004      	b.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104aec:	2301      	movs	r3, #1
 8104aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104af2:	e000      	b.n	8104af6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8104af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104afa:	2b00      	cmp	r3, #0
 8104afc:	d10a      	bne.n	8104b14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104afe:	4ba5      	ldr	r3, [pc, #660]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104b02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8104b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b0c:	4aa1      	ldr	r2, [pc, #644]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b0e:	430b      	orrs	r3, r1
 8104b10:	6513      	str	r3, [r2, #80]	@ 0x50
 8104b12:	e003      	b.n	8104b1c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b24:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8104b28:	f04f 0900 	mov.w	r9, #0
 8104b2c:	ea58 0309 	orrs.w	r3, r8, r9
 8104b30:	d047      	beq.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8104b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104b38:	2b04      	cmp	r3, #4
 8104b3a:	d82a      	bhi.n	8104b92 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8104b44 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b42:	bf00      	nop
 8104b44:	08104b59 	.word	0x08104b59
 8104b48:	08104b67 	.word	0x08104b67
 8104b4c:	08104b7d 	.word	0x08104b7d
 8104b50:	08104b9b 	.word	0x08104b9b
 8104b54:	08104b9b 	.word	0x08104b9b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b58:	4b8e      	ldr	r3, [pc, #568]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104b5c:	4a8d      	ldr	r2, [pc, #564]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b64:	e01a      	b.n	8104b9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b6a:	3308      	adds	r3, #8
 8104b6c:	2100      	movs	r1, #0
 8104b6e:	4618      	mov	r0, r3
 8104b70:	f001 fc3c 	bl	81063ec <RCCEx_PLL2_Config>
 8104b74:	4603      	mov	r3, r0
 8104b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b7a:	e00f      	b.n	8104b9c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b80:	3328      	adds	r3, #40	@ 0x28
 8104b82:	2100      	movs	r1, #0
 8104b84:	4618      	mov	r0, r3
 8104b86:	f001 fce3 	bl	8106550 <RCCEx_PLL3_Config>
 8104b8a:	4603      	mov	r3, r0
 8104b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104b90:	e004      	b.n	8104b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104b92:	2301      	movs	r3, #1
 8104b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104b98:	e000      	b.n	8104b9c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ba0:	2b00      	cmp	r3, #0
 8104ba2:	d10a      	bne.n	8104bba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104ba8:	f023 0107 	bic.w	r1, r3, #7
 8104bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104bb2:	4a78      	ldr	r2, [pc, #480]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104bb4:	430b      	orrs	r3, r1
 8104bb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8104bb8:	e003      	b.n	8104bc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8104bce:	f04f 0b00 	mov.w	fp, #0
 8104bd2:	ea5a 030b 	orrs.w	r3, sl, fp
 8104bd6:	d04c      	beq.n	8104c72 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104be2:	d030      	beq.n	8104c46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104be8:	d829      	bhi.n	8104c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8104bec:	d02d      	beq.n	8104c4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8104bf0:	d825      	bhi.n	8104c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104bf2:	2b80      	cmp	r3, #128	@ 0x80
 8104bf4:	d018      	beq.n	8104c28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104bf6:	2b80      	cmp	r3, #128	@ 0x80
 8104bf8:	d821      	bhi.n	8104c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d002      	beq.n	8104c04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104bfe:	2b40      	cmp	r3, #64	@ 0x40
 8104c00:	d007      	beq.n	8104c12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104c02:	e01c      	b.n	8104c3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c04:	4b63      	ldr	r3, [pc, #396]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104c08:	4a62      	ldr	r2, [pc, #392]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104c10:	e01c      	b.n	8104c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c16:	3308      	adds	r3, #8
 8104c18:	2100      	movs	r1, #0
 8104c1a:	4618      	mov	r0, r3
 8104c1c:	f001 fbe6 	bl	81063ec <RCCEx_PLL2_Config>
 8104c20:	4603      	mov	r3, r0
 8104c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104c26:	e011      	b.n	8104c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c2c:	3328      	adds	r3, #40	@ 0x28
 8104c2e:	2100      	movs	r1, #0
 8104c30:	4618      	mov	r0, r3
 8104c32:	f001 fc8d 	bl	8106550 <RCCEx_PLL3_Config>
 8104c36:	4603      	mov	r3, r0
 8104c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104c3c:	e006      	b.n	8104c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104c3e:	2301      	movs	r3, #1
 8104c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104c44:	e002      	b.n	8104c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104c46:	bf00      	nop
 8104c48:	e000      	b.n	8104c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c50:	2b00      	cmp	r3, #0
 8104c52:	d10a      	bne.n	8104c6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104c54:	4b4f      	ldr	r3, [pc, #316]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104c58:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8104c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104c62:	4a4c      	ldr	r2, [pc, #304]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104c64:	430b      	orrs	r3, r1
 8104c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8104c68:	e003      	b.n	8104c72 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c7a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104c7e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8104c82:	2300      	movs	r3, #0
 8104c84:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8104c88:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8104c8c:	460b      	mov	r3, r1
 8104c8e:	4313      	orrs	r3, r2
 8104c90:	d053      	beq.n	8104d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104c96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104c9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104c9e:	d035      	beq.n	8104d0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104ca0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8104ca4:	d82e      	bhi.n	8104d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104ca6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104caa:	d031      	beq.n	8104d10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104cac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8104cb0:	d828      	bhi.n	8104d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104cb6:	d01a      	beq.n	8104cee <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104cbc:	d822      	bhi.n	8104d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104cbe:	2b00      	cmp	r3, #0
 8104cc0:	d003      	beq.n	8104cca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104cc6:	d007      	beq.n	8104cd8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104cc8:	e01c      	b.n	8104d04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104cca:	4b32      	ldr	r3, [pc, #200]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cce:	4a31      	ldr	r2, [pc, #196]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104cd6:	e01c      	b.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cdc:	3308      	adds	r3, #8
 8104cde:	2100      	movs	r1, #0
 8104ce0:	4618      	mov	r0, r3
 8104ce2:	f001 fb83 	bl	81063ec <RCCEx_PLL2_Config>
 8104ce6:	4603      	mov	r3, r0
 8104ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104cec:	e011      	b.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104cf2:	3328      	adds	r3, #40	@ 0x28
 8104cf4:	2100      	movs	r1, #0
 8104cf6:	4618      	mov	r0, r3
 8104cf8:	f001 fc2a 	bl	8106550 <RCCEx_PLL3_Config>
 8104cfc:	4603      	mov	r3, r0
 8104cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104d02:	e006      	b.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104d04:	2301      	movs	r3, #1
 8104d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104d0a:	e002      	b.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104d0c:	bf00      	nop
 8104d0e:	e000      	b.n	8104d12 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d16:	2b00      	cmp	r3, #0
 8104d18:	d10b      	bne.n	8104d32 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104d1e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8104d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8104d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8104d94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d2c:	430b      	orrs	r3, r1
 8104d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8104d30:	e003      	b.n	8104d3a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8104d46:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8104d4a:	2300      	movs	r3, #0
 8104d4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8104d50:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8104d54:	460b      	mov	r3, r1
 8104d56:	4313      	orrs	r3, r2
 8104d58:	d056      	beq.n	8104e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104d5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104d62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104d66:	d038      	beq.n	8104dda <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104d68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104d6c:	d831      	bhi.n	8104dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104d6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104d72:	d034      	beq.n	8104dde <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104d74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8104d78:	d82b      	bhi.n	8104dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d7e:	d01d      	beq.n	8104dbc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8104d80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8104d84:	d825      	bhi.n	8104dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104d86:	2b00      	cmp	r3, #0
 8104d88:	d006      	beq.n	8104d98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8104d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104d8e:	d00a      	beq.n	8104da6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104d90:	e01f      	b.n	8104dd2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104d92:	bf00      	nop
 8104d94:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d98:	4ba2      	ldr	r3, [pc, #648]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d9c:	4aa1      	ldr	r2, [pc, #644]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104da4:	e01c      	b.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104daa:	3308      	adds	r3, #8
 8104dac:	2100      	movs	r1, #0
 8104dae:	4618      	mov	r0, r3
 8104db0:	f001 fb1c 	bl	81063ec <RCCEx_PLL2_Config>
 8104db4:	4603      	mov	r3, r0
 8104db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104dba:	e011      	b.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104dc0:	3328      	adds	r3, #40	@ 0x28
 8104dc2:	2100      	movs	r1, #0
 8104dc4:	4618      	mov	r0, r3
 8104dc6:	f001 fbc3 	bl	8106550 <RCCEx_PLL3_Config>
 8104dca:	4603      	mov	r3, r0
 8104dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104dd0:	e006      	b.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104dd2:	2301      	movs	r3, #1
 8104dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104dd8:	e002      	b.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104dda:	bf00      	nop
 8104ddc:	e000      	b.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8104dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104de4:	2b00      	cmp	r3, #0
 8104de6:	d10b      	bne.n	8104e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8104de8:	4b8e      	ldr	r3, [pc, #568]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104dec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8104df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104df4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8104df8:	4a8a      	ldr	r2, [pc, #552]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104dfa:	430b      	orrs	r3, r1
 8104dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8104dfe:	e003      	b.n	8104e08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8104e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8104e14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8104e18:	2300      	movs	r3, #0
 8104e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8104e1e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8104e22:	460b      	mov	r3, r1
 8104e24:	4313      	orrs	r3, r2
 8104e26:	d03a      	beq.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8104e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104e2e:	2b30      	cmp	r3, #48	@ 0x30
 8104e30:	d01f      	beq.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8104e32:	2b30      	cmp	r3, #48	@ 0x30
 8104e34:	d819      	bhi.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104e36:	2b20      	cmp	r3, #32
 8104e38:	d00c      	beq.n	8104e54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8104e3a:	2b20      	cmp	r3, #32
 8104e3c:	d815      	bhi.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8104e3e:	2b00      	cmp	r3, #0
 8104e40:	d019      	beq.n	8104e76 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8104e42:	2b10      	cmp	r3, #16
 8104e44:	d111      	bne.n	8104e6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e46:	4b77      	ldr	r3, [pc, #476]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e4a:	4a76      	ldr	r2, [pc, #472]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104e52:	e011      	b.n	8104e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e58:	3308      	adds	r3, #8
 8104e5a:	2102      	movs	r1, #2
 8104e5c:	4618      	mov	r0, r3
 8104e5e:	f001 fac5 	bl	81063ec <RCCEx_PLL2_Config>
 8104e62:	4603      	mov	r3, r0
 8104e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8104e68:	e006      	b.n	8104e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8104e6a:	2301      	movs	r3, #1
 8104e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104e70:	e002      	b.n	8104e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104e72:	bf00      	nop
 8104e74:	e000      	b.n	8104e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8104e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e7c:	2b00      	cmp	r3, #0
 8104e7e:	d10a      	bne.n	8104e96 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8104e80:	4b68      	ldr	r3, [pc, #416]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104e84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104e8e:	4a65      	ldr	r2, [pc, #404]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104e90:	430b      	orrs	r3, r1
 8104e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8104e94:	e003      	b.n	8104e9e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104e9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ea6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8104eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8104eae:	2300      	movs	r3, #0
 8104eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8104eb4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8104eb8:	460b      	mov	r3, r1
 8104eba:	4313      	orrs	r3, r2
 8104ebc:	d051      	beq.n	8104f62 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8104ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104ec4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104ec8:	d035      	beq.n	8104f36 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8104eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104ece:	d82e      	bhi.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104ed0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104ed4:	d031      	beq.n	8104f3a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8104ed6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104eda:	d828      	bhi.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104ee0:	d01a      	beq.n	8104f18 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8104ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104ee6:	d822      	bhi.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8104ee8:	2b00      	cmp	r3, #0
 8104eea:	d003      	beq.n	8104ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8104eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104ef0:	d007      	beq.n	8104f02 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8104ef2:	e01c      	b.n	8104f2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104efe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104f00:	e01c      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f06:	3308      	adds	r3, #8
 8104f08:	2100      	movs	r1, #0
 8104f0a:	4618      	mov	r0, r3
 8104f0c:	f001 fa6e 	bl	81063ec <RCCEx_PLL2_Config>
 8104f10:	4603      	mov	r3, r0
 8104f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104f16:	e011      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f1c:	3328      	adds	r3, #40	@ 0x28
 8104f1e:	2100      	movs	r1, #0
 8104f20:	4618      	mov	r0, r3
 8104f22:	f001 fb15 	bl	8106550 <RCCEx_PLL3_Config>
 8104f26:	4603      	mov	r3, r0
 8104f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8104f2c:	e006      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104f2e:	2301      	movs	r3, #1
 8104f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104f34:	e002      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104f36:	bf00      	nop
 8104f38:	e000      	b.n	8104f3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8104f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f40:	2b00      	cmp	r3, #0
 8104f42:	d10a      	bne.n	8104f5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8104f44:	4b37      	ldr	r3, [pc, #220]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104f48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8104f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104f52:	4a34      	ldr	r2, [pc, #208]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8104f54:	430b      	orrs	r3, r1
 8104f56:	6513      	str	r3, [r2, #80]	@ 0x50
 8104f58:	e003      	b.n	8104f62 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8104f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104f6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8104f72:	2300      	movs	r3, #0
 8104f74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8104f78:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8104f7c:	460b      	mov	r3, r1
 8104f7e:	4313      	orrs	r3, r2
 8104f80:	d056      	beq.n	8105030 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104f8c:	d033      	beq.n	8104ff6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8104f92:	d82c      	bhi.n	8104fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104f94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104f98:	d02f      	beq.n	8104ffa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8104f9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104f9e:	d826      	bhi.n	8104fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104fa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104fa4:	d02b      	beq.n	8104ffe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104fa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104faa:	d820      	bhi.n	8104fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104fb0:	d012      	beq.n	8104fd8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104fb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104fb6:	d81a      	bhi.n	8104fee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104fb8:	2b00      	cmp	r3, #0
 8104fba:	d022      	beq.n	8105002 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8104fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104fc0:	d115      	bne.n	8104fee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fc6:	3308      	adds	r3, #8
 8104fc8:	2101      	movs	r1, #1
 8104fca:	4618      	mov	r0, r3
 8104fcc:	f001 fa0e 	bl	81063ec <RCCEx_PLL2_Config>
 8104fd0:	4603      	mov	r3, r0
 8104fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104fd6:	e015      	b.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104fdc:	3328      	adds	r3, #40	@ 0x28
 8104fde:	2101      	movs	r1, #1
 8104fe0:	4618      	mov	r0, r3
 8104fe2:	f001 fab5 	bl	8106550 <RCCEx_PLL3_Config>
 8104fe6:	4603      	mov	r3, r0
 8104fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104fec:	e00a      	b.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104fee:	2301      	movs	r3, #1
 8104ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104ff4:	e006      	b.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104ff6:	bf00      	nop
 8104ff8:	e004      	b.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104ffa:	bf00      	nop
 8104ffc:	e002      	b.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104ffe:	bf00      	nop
 8105000:	e000      	b.n	8105004 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105008:	2b00      	cmp	r3, #0
 810500a:	d10d      	bne.n	8105028 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810500c:	4b05      	ldr	r3, [pc, #20]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810500e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105010:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8105014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810501a:	4a02      	ldr	r2, [pc, #8]	@ (8105024 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810501c:	430b      	orrs	r3, r1
 810501e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105020:	e006      	b.n	8105030 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105022:	bf00      	nop
 8105024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810502c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105038:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810503c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8105040:	2300      	movs	r3, #0
 8105042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8105046:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810504a:	460b      	mov	r3, r1
 810504c:	4313      	orrs	r3, r2
 810504e:	d055      	beq.n	81050fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8105050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105054:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810505c:	d033      	beq.n	81050c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810505e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105062:	d82c      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105068:	d02f      	beq.n	81050ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810506a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810506e:	d826      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105070:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105074:	d02b      	beq.n	81050ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8105076:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810507a:	d820      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x662>
 810507c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105080:	d012      	beq.n	81050a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105086:	d81a      	bhi.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105088:	2b00      	cmp	r3, #0
 810508a:	d022      	beq.n	81050d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810508c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105090:	d115      	bne.n	81050be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105096:	3308      	adds	r3, #8
 8105098:	2101      	movs	r1, #1
 810509a:	4618      	mov	r0, r3
 810509c:	f001 f9a6 	bl	81063ec <RCCEx_PLL2_Config>
 81050a0:	4603      	mov	r3, r0
 81050a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81050a6:	e015      	b.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81050a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050ac:	3328      	adds	r3, #40	@ 0x28
 81050ae:	2101      	movs	r1, #1
 81050b0:	4618      	mov	r0, r3
 81050b2:	f001 fa4d 	bl	8106550 <RCCEx_PLL3_Config>
 81050b6:	4603      	mov	r3, r0
 81050b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81050bc:	e00a      	b.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81050be:	2301      	movs	r3, #1
 81050c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81050c4:	e006      	b.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81050c6:	bf00      	nop
 81050c8:	e004      	b.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81050ca:	bf00      	nop
 81050cc:	e002      	b.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81050ce:	bf00      	nop
 81050d0:	e000      	b.n	81050d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81050d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81050d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050d8:	2b00      	cmp	r3, #0
 81050da:	d10b      	bne.n	81050f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81050dc:	4ba4      	ldr	r3, [pc, #656]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81050e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81050e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81050ec:	4aa0      	ldr	r2, [pc, #640]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81050ee:	430b      	orrs	r3, r1
 81050f0:	6593      	str	r3, [r2, #88]	@ 0x58
 81050f2:	e003      	b.n	81050fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81050f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81050f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105104:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8105108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810510c:	2300      	movs	r3, #0
 810510e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8105112:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8105116:	460b      	mov	r3, r1
 8105118:	4313      	orrs	r3, r2
 810511a:	d037      	beq.n	810518c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810511c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8105122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105126:	d00e      	beq.n	8105146 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8105128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810512c:	d816      	bhi.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x700>
 810512e:	2b00      	cmp	r3, #0
 8105130:	d018      	beq.n	8105164 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8105132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105136:	d111      	bne.n	810515c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105138:	4b8d      	ldr	r3, [pc, #564]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810513c:	4a8c      	ldr	r2, [pc, #560]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810513e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105142:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105144:	e00f      	b.n	8105166 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810514a:	3308      	adds	r3, #8
 810514c:	2101      	movs	r1, #1
 810514e:	4618      	mov	r0, r3
 8105150:	f001 f94c 	bl	81063ec <RCCEx_PLL2_Config>
 8105154:	4603      	mov	r3, r0
 8105156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810515a:	e004      	b.n	8105166 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810515c:	2301      	movs	r3, #1
 810515e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105162:	e000      	b.n	8105166 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8105164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810516a:	2b00      	cmp	r3, #0
 810516c:	d10a      	bne.n	8105184 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810516e:	4b80      	ldr	r3, [pc, #512]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105172:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810517a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810517c:	4a7c      	ldr	r2, [pc, #496]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810517e:	430b      	orrs	r3, r1
 8105180:	6513      	str	r3, [r2, #80]	@ 0x50
 8105182:	e003      	b.n	810518c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105194:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8105198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810519c:	2300      	movs	r3, #0
 810519e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81051a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81051a6:	460b      	mov	r3, r1
 81051a8:	4313      	orrs	r3, r2
 81051aa:	d039      	beq.n	8105220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81051ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81051b2:	2b03      	cmp	r3, #3
 81051b4:	d81c      	bhi.n	81051f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81051b6:	a201      	add	r2, pc, #4	@ (adr r2, 81051bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051bc:	081051f9 	.word	0x081051f9
 81051c0:	081051cd 	.word	0x081051cd
 81051c4:	081051db 	.word	0x081051db
 81051c8:	081051f9 	.word	0x081051f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051cc:	4b68      	ldr	r3, [pc, #416]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81051d0:	4a67      	ldr	r2, [pc, #412]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81051d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81051d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81051d8:	e00f      	b.n	81051fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81051de:	3308      	adds	r3, #8
 81051e0:	2102      	movs	r1, #2
 81051e2:	4618      	mov	r0, r3
 81051e4:	f001 f902 	bl	81063ec <RCCEx_PLL2_Config>
 81051e8:	4603      	mov	r3, r0
 81051ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81051ee:	e004      	b.n	81051fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81051f0:	2301      	movs	r3, #1
 81051f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81051f6:	e000      	b.n	81051fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81051f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81051fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81051fe:	2b00      	cmp	r3, #0
 8105200:	d10a      	bne.n	8105218 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105202:	4b5b      	ldr	r3, [pc, #364]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105206:	f023 0103 	bic.w	r1, r3, #3
 810520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810520e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105210:	4a57      	ldr	r2, [pc, #348]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105212:	430b      	orrs	r3, r1
 8105214:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105216:	e003      	b.n	8105220 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810521c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105228:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810522c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8105230:	2300      	movs	r3, #0
 8105232:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8105236:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810523a:	460b      	mov	r3, r1
 810523c:	4313      	orrs	r3, r2
 810523e:	f000 809f 	beq.w	8105380 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105242:	4b4c      	ldr	r3, [pc, #304]	@ (8105374 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	4a4b      	ldr	r2, [pc, #300]	@ (8105374 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105248:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810524c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810524e:	f7fe f88d 	bl	810336c <HAL_GetTick>
 8105252:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105256:	e00b      	b.n	8105270 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105258:	f7fe f888 	bl	810336c <HAL_GetTick>
 810525c:	4602      	mov	r2, r0
 810525e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8105262:	1ad3      	subs	r3, r2, r3
 8105264:	2b64      	cmp	r3, #100	@ 0x64
 8105266:	d903      	bls.n	8105270 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8105268:	2303      	movs	r3, #3
 810526a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810526e:	e005      	b.n	810527c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105270:	4b40      	ldr	r3, [pc, #256]	@ (8105374 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105278:	2b00      	cmp	r3, #0
 810527a:	d0ed      	beq.n	8105258 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810527c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105280:	2b00      	cmp	r3, #0
 8105282:	d179      	bne.n	8105378 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105284:	4b3a      	ldr	r3, [pc, #232]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105286:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8105288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810528c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105290:	4053      	eors	r3, r2
 8105292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105296:	2b00      	cmp	r3, #0
 8105298:	d015      	beq.n	81052c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810529a:	4b35      	ldr	r3, [pc, #212]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810529e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81052a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81052a6:	4b32      	ldr	r3, [pc, #200]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81052a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81052aa:	4a31      	ldr	r2, [pc, #196]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81052ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81052b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81052b2:	4b2f      	ldr	r3, [pc, #188]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81052b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81052b6:	4a2e      	ldr	r2, [pc, #184]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81052b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81052bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81052be:	4a2c      	ldr	r2, [pc, #176]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81052c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81052c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81052ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81052ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81052d2:	d118      	bne.n	8105306 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81052d4:	f7fe f84a 	bl	810336c <HAL_GetTick>
 81052d8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81052dc:	e00d      	b.n	81052fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81052de:	f7fe f845 	bl	810336c <HAL_GetTick>
 81052e2:	4602      	mov	r2, r0
 81052e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81052e8:	1ad2      	subs	r2, r2, r3
 81052ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 81052ee:	429a      	cmp	r2, r3
 81052f0:	d903      	bls.n	81052fa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81052f2:	2303      	movs	r3, #3
 81052f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81052f8:	e005      	b.n	8105306 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81052fa:	4b1d      	ldr	r3, [pc, #116]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81052fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81052fe:	f003 0302 	and.w	r3, r3, #2
 8105302:	2b00      	cmp	r3, #0
 8105304:	d0eb      	beq.n	81052de <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8105306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810530a:	2b00      	cmp	r3, #0
 810530c:	d12b      	bne.n	8105366 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810531a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810531e:	d110      	bne.n	8105342 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105320:	4b13      	ldr	r3, [pc, #76]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105322:	691b      	ldr	r3, [r3, #16]
 8105324:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8105328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810532c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105330:	091b      	lsrs	r3, r3, #4
 8105332:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105336:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810533a:	4a0d      	ldr	r2, [pc, #52]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810533c:	430b      	orrs	r3, r1
 810533e:	6113      	str	r3, [r2, #16]
 8105340:	e005      	b.n	810534e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8105342:	4b0b      	ldr	r3, [pc, #44]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105344:	691b      	ldr	r3, [r3, #16]
 8105346:	4a0a      	ldr	r2, [pc, #40]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105348:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810534c:	6113      	str	r3, [r2, #16]
 810534e:	4b08      	ldr	r3, [pc, #32]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105350:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8105352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810535a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810535e:	4a04      	ldr	r2, [pc, #16]	@ (8105370 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105360:	430b      	orrs	r3, r1
 8105362:	6713      	str	r3, [r2, #112]	@ 0x70
 8105364:	e00c      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810536a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810536e:	e007      	b.n	8105380 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8105370:	58024400 	.word	0x58024400
 8105374:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810537c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105388:	f002 0301 	and.w	r3, r2, #1
 810538c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8105390:	2300      	movs	r3, #0
 8105392:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8105396:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810539a:	460b      	mov	r3, r1
 810539c:	4313      	orrs	r3, r2
 810539e:	f000 8089 	beq.w	81054b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81053a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81053a8:	2b28      	cmp	r3, #40	@ 0x28
 81053aa:	d86b      	bhi.n	8105484 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81053ac:	a201      	add	r2, pc, #4	@ (adr r2, 81053b4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053b2:	bf00      	nop
 81053b4:	0810548d 	.word	0x0810548d
 81053b8:	08105485 	.word	0x08105485
 81053bc:	08105485 	.word	0x08105485
 81053c0:	08105485 	.word	0x08105485
 81053c4:	08105485 	.word	0x08105485
 81053c8:	08105485 	.word	0x08105485
 81053cc:	08105485 	.word	0x08105485
 81053d0:	08105485 	.word	0x08105485
 81053d4:	08105459 	.word	0x08105459
 81053d8:	08105485 	.word	0x08105485
 81053dc:	08105485 	.word	0x08105485
 81053e0:	08105485 	.word	0x08105485
 81053e4:	08105485 	.word	0x08105485
 81053e8:	08105485 	.word	0x08105485
 81053ec:	08105485 	.word	0x08105485
 81053f0:	08105485 	.word	0x08105485
 81053f4:	0810546f 	.word	0x0810546f
 81053f8:	08105485 	.word	0x08105485
 81053fc:	08105485 	.word	0x08105485
 8105400:	08105485 	.word	0x08105485
 8105404:	08105485 	.word	0x08105485
 8105408:	08105485 	.word	0x08105485
 810540c:	08105485 	.word	0x08105485
 8105410:	08105485 	.word	0x08105485
 8105414:	0810548d 	.word	0x0810548d
 8105418:	08105485 	.word	0x08105485
 810541c:	08105485 	.word	0x08105485
 8105420:	08105485 	.word	0x08105485
 8105424:	08105485 	.word	0x08105485
 8105428:	08105485 	.word	0x08105485
 810542c:	08105485 	.word	0x08105485
 8105430:	08105485 	.word	0x08105485
 8105434:	0810548d 	.word	0x0810548d
 8105438:	08105485 	.word	0x08105485
 810543c:	08105485 	.word	0x08105485
 8105440:	08105485 	.word	0x08105485
 8105444:	08105485 	.word	0x08105485
 8105448:	08105485 	.word	0x08105485
 810544c:	08105485 	.word	0x08105485
 8105450:	08105485 	.word	0x08105485
 8105454:	0810548d 	.word	0x0810548d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810545c:	3308      	adds	r3, #8
 810545e:	2101      	movs	r1, #1
 8105460:	4618      	mov	r0, r3
 8105462:	f000 ffc3 	bl	81063ec <RCCEx_PLL2_Config>
 8105466:	4603      	mov	r3, r0
 8105468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810546c:	e00f      	b.n	810548e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105472:	3328      	adds	r3, #40	@ 0x28
 8105474:	2101      	movs	r1, #1
 8105476:	4618      	mov	r0, r3
 8105478:	f001 f86a 	bl	8106550 <RCCEx_PLL3_Config>
 810547c:	4603      	mov	r3, r0
 810547e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105482:	e004      	b.n	810548e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105484:	2301      	movs	r3, #1
 8105486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810548a:	e000      	b.n	810548e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810548c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810548e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105492:	2b00      	cmp	r3, #0
 8105494:	d10a      	bne.n	81054ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105496:	4bbf      	ldr	r3, [pc, #764]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810549a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81054a4:	4abb      	ldr	r2, [pc, #748]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81054a6:	430b      	orrs	r3, r1
 81054a8:	6553      	str	r3, [r2, #84]	@ 0x54
 81054aa:	e003      	b.n	81054b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81054b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054bc:	f002 0302 	and.w	r3, r2, #2
 81054c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81054c4:	2300      	movs	r3, #0
 81054c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81054ca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81054ce:	460b      	mov	r3, r1
 81054d0:	4313      	orrs	r3, r2
 81054d2:	d041      	beq.n	8105558 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81054d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81054d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81054da:	2b05      	cmp	r3, #5
 81054dc:	d824      	bhi.n	8105528 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81054de:	a201      	add	r2, pc, #4	@ (adr r2, 81054e4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054e4:	08105531 	.word	0x08105531
 81054e8:	081054fd 	.word	0x081054fd
 81054ec:	08105513 	.word	0x08105513
 81054f0:	08105531 	.word	0x08105531
 81054f4:	08105531 	.word	0x08105531
 81054f8:	08105531 	.word	0x08105531
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105500:	3308      	adds	r3, #8
 8105502:	2101      	movs	r1, #1
 8105504:	4618      	mov	r0, r3
 8105506:	f000 ff71 	bl	81063ec <RCCEx_PLL2_Config>
 810550a:	4603      	mov	r3, r0
 810550c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105510:	e00f      	b.n	8105532 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105516:	3328      	adds	r3, #40	@ 0x28
 8105518:	2101      	movs	r1, #1
 810551a:	4618      	mov	r0, r3
 810551c:	f001 f818 	bl	8106550 <RCCEx_PLL3_Config>
 8105520:	4603      	mov	r3, r0
 8105522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105526:	e004      	b.n	8105532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105528:	2301      	movs	r3, #1
 810552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810552e:	e000      	b.n	8105532 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105536:	2b00      	cmp	r3, #0
 8105538:	d10a      	bne.n	8105550 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810553a:	4b96      	ldr	r3, [pc, #600]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810553e:	f023 0107 	bic.w	r1, r3, #7
 8105542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105546:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8105548:	4a92      	ldr	r2, [pc, #584]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810554a:	430b      	orrs	r3, r1
 810554c:	6553      	str	r3, [r2, #84]	@ 0x54
 810554e:	e003      	b.n	8105558 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105560:	f002 0304 	and.w	r3, r2, #4
 8105564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8105568:	2300      	movs	r3, #0
 810556a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810556e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8105572:	460b      	mov	r3, r1
 8105574:	4313      	orrs	r3, r2
 8105576:	d044      	beq.n	8105602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810557c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105580:	2b05      	cmp	r3, #5
 8105582:	d825      	bhi.n	81055d0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8105584:	a201      	add	r2, pc, #4	@ (adr r2, 810558c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8105586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810558a:	bf00      	nop
 810558c:	081055d9 	.word	0x081055d9
 8105590:	081055a5 	.word	0x081055a5
 8105594:	081055bb 	.word	0x081055bb
 8105598:	081055d9 	.word	0x081055d9
 810559c:	081055d9 	.word	0x081055d9
 81055a0:	081055d9 	.word	0x081055d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055a8:	3308      	adds	r3, #8
 81055aa:	2101      	movs	r1, #1
 81055ac:	4618      	mov	r0, r3
 81055ae:	f000 ff1d 	bl	81063ec <RCCEx_PLL2_Config>
 81055b2:	4603      	mov	r3, r0
 81055b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81055b8:	e00f      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055be:	3328      	adds	r3, #40	@ 0x28
 81055c0:	2101      	movs	r1, #1
 81055c2:	4618      	mov	r0, r3
 81055c4:	f000 ffc4 	bl	8106550 <RCCEx_PLL3_Config>
 81055c8:	4603      	mov	r3, r0
 81055ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81055ce:	e004      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055d0:	2301      	movs	r3, #1
 81055d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81055d6:	e000      	b.n	81055da <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81055d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81055da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055de:	2b00      	cmp	r3, #0
 81055e0:	d10b      	bne.n	81055fa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81055e2:	4b6c      	ldr	r3, [pc, #432]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81055e6:	f023 0107 	bic.w	r1, r3, #7
 81055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81055ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81055f2:	4a68      	ldr	r2, [pc, #416]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81055f4:	430b      	orrs	r3, r1
 81055f6:	6593      	str	r3, [r2, #88]	@ 0x58
 81055f8:	e003      	b.n	8105602 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81055fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105606:	e9d3 2300 	ldrd	r2, r3, [r3]
 810560a:	f002 0320 	and.w	r3, r2, #32
 810560e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8105612:	2300      	movs	r3, #0
 8105614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8105618:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810561c:	460b      	mov	r3, r1
 810561e:	4313      	orrs	r3, r2
 8105620:	d055      	beq.n	81056ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810562a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810562e:	d033      	beq.n	8105698 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105634:	d82c      	bhi.n	8105690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810563a:	d02f      	beq.n	810569c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810563c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105640:	d826      	bhi.n	8105690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105642:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105646:	d02b      	beq.n	81056a0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105648:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810564c:	d820      	bhi.n	8105690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810564e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105652:	d012      	beq.n	810567a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8105654:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105658:	d81a      	bhi.n	8105690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810565a:	2b00      	cmp	r3, #0
 810565c:	d022      	beq.n	81056a4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810565e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105662:	d115      	bne.n	8105690 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105668:	3308      	adds	r3, #8
 810566a:	2100      	movs	r1, #0
 810566c:	4618      	mov	r0, r3
 810566e:	f000 febd 	bl	81063ec <RCCEx_PLL2_Config>
 8105672:	4603      	mov	r3, r0
 8105674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105678:	e015      	b.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810567a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810567e:	3328      	adds	r3, #40	@ 0x28
 8105680:	2102      	movs	r1, #2
 8105682:	4618      	mov	r0, r3
 8105684:	f000 ff64 	bl	8106550 <RCCEx_PLL3_Config>
 8105688:	4603      	mov	r3, r0
 810568a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810568e:	e00a      	b.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105690:	2301      	movs	r3, #1
 8105692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105696:	e006      	b.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105698:	bf00      	nop
 810569a:	e004      	b.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810569c:	bf00      	nop
 810569e:	e002      	b.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81056a0:	bf00      	nop
 81056a2:	e000      	b.n	81056a6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81056a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81056a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056aa:	2b00      	cmp	r3, #0
 81056ac:	d10b      	bne.n	81056c6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81056ae:	4b39      	ldr	r3, [pc, #228]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81056b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81056be:	4a35      	ldr	r2, [pc, #212]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81056c0:	430b      	orrs	r3, r1
 81056c2:	6553      	str	r3, [r2, #84]	@ 0x54
 81056c4:	e003      	b.n	81056ce <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81056ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81056da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81056de:	2300      	movs	r3, #0
 81056e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81056e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81056e8:	460b      	mov	r3, r1
 81056ea:	4313      	orrs	r3, r2
 81056ec:	d058      	beq.n	81057a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81056f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81056f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81056fa:	d033      	beq.n	8105764 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81056fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8105700:	d82c      	bhi.n	810575c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105706:	d02f      	beq.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810570c:	d826      	bhi.n	810575c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810570e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105712:	d02b      	beq.n	810576c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8105714:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8105718:	d820      	bhi.n	810575c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810571a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810571e:	d012      	beq.n	8105746 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8105720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8105724:	d81a      	bhi.n	810575c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105726:	2b00      	cmp	r3, #0
 8105728:	d022      	beq.n	8105770 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810572a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810572e:	d115      	bne.n	810575c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105734:	3308      	adds	r3, #8
 8105736:	2100      	movs	r1, #0
 8105738:	4618      	mov	r0, r3
 810573a:	f000 fe57 	bl	81063ec <RCCEx_PLL2_Config>
 810573e:	4603      	mov	r3, r0
 8105740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8105744:	e015      	b.n	8105772 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810574a:	3328      	adds	r3, #40	@ 0x28
 810574c:	2102      	movs	r1, #2
 810574e:	4618      	mov	r0, r3
 8105750:	f000 fefe 	bl	8106550 <RCCEx_PLL3_Config>
 8105754:	4603      	mov	r3, r0
 8105756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810575a:	e00a      	b.n	8105772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810575c:	2301      	movs	r3, #1
 810575e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105762:	e006      	b.n	8105772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105764:	bf00      	nop
 8105766:	e004      	b.n	8105772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105768:	bf00      	nop
 810576a:	e002      	b.n	8105772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810576c:	bf00      	nop
 810576e:	e000      	b.n	8105772 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8105770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105776:	2b00      	cmp	r3, #0
 8105778:	d10e      	bne.n	8105798 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810577a:	4b06      	ldr	r3, [pc, #24]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810577c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810577e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8105782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810578a:	4a02      	ldr	r2, [pc, #8]	@ (8105794 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810578c:	430b      	orrs	r3, r1
 810578e:	6593      	str	r3, [r2, #88]	@ 0x58
 8105790:	e006      	b.n	81057a0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105792:	bf00      	nop
 8105794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810579c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81057a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 81057ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81057b0:	2300      	movs	r3, #0
 81057b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81057b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81057ba:	460b      	mov	r3, r1
 81057bc:	4313      	orrs	r3, r2
 81057be:	d055      	beq.n	810586c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81057c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81057c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81057cc:	d033      	beq.n	8105836 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81057ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81057d2:	d82c      	bhi.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81057d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81057d8:	d02f      	beq.n	810583a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81057da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81057de:	d826      	bhi.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81057e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81057e4:	d02b      	beq.n	810583e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81057e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81057ea:	d820      	bhi.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81057ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81057f0:	d012      	beq.n	8105818 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81057f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81057f6:	d81a      	bhi.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81057f8:	2b00      	cmp	r3, #0
 81057fa:	d022      	beq.n	8105842 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81057fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105800:	d115      	bne.n	810582e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105806:	3308      	adds	r3, #8
 8105808:	2100      	movs	r1, #0
 810580a:	4618      	mov	r0, r3
 810580c:	f000 fdee 	bl	81063ec <RCCEx_PLL2_Config>
 8105810:	4603      	mov	r3, r0
 8105812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105816:	e015      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810581c:	3328      	adds	r3, #40	@ 0x28
 810581e:	2102      	movs	r1, #2
 8105820:	4618      	mov	r0, r3
 8105822:	f000 fe95 	bl	8106550 <RCCEx_PLL3_Config>
 8105826:	4603      	mov	r3, r0
 8105828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810582c:	e00a      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810582e:	2301      	movs	r3, #1
 8105830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105834:	e006      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105836:	bf00      	nop
 8105838:	e004      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810583a:	bf00      	nop
 810583c:	e002      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810583e:	bf00      	nop
 8105840:	e000      	b.n	8105844 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105848:	2b00      	cmp	r3, #0
 810584a:	d10b      	bne.n	8105864 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810584c:	4ba1      	ldr	r3, [pc, #644]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810584e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105850:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8105854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810585c:	4a9d      	ldr	r2, [pc, #628]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810585e:	430b      	orrs	r3, r1
 8105860:	6593      	str	r3, [r2, #88]	@ 0x58
 8105862:	e003      	b.n	810586c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810586c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105874:	f002 0308 	and.w	r3, r2, #8
 8105878:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810587c:	2300      	movs	r3, #0
 810587e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8105882:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8105886:	460b      	mov	r3, r1
 8105888:	4313      	orrs	r3, r2
 810588a:	d01e      	beq.n	81058ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105898:	d10c      	bne.n	81058b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810589a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810589e:	3328      	adds	r3, #40	@ 0x28
 81058a0:	2102      	movs	r1, #2
 81058a2:	4618      	mov	r0, r3
 81058a4:	f000 fe54 	bl	8106550 <RCCEx_PLL3_Config>
 81058a8:	4603      	mov	r3, r0
 81058aa:	2b00      	cmp	r3, #0
 81058ac:	d002      	beq.n	81058b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81058ae:	2301      	movs	r3, #1
 81058b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81058b4:	4b87      	ldr	r3, [pc, #540]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81058b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81058c4:	4a83      	ldr	r2, [pc, #524]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81058c6:	430b      	orrs	r3, r1
 81058c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058d2:	f002 0310 	and.w	r3, r2, #16
 81058d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81058da:	2300      	movs	r3, #0
 81058dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81058e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81058e4:	460b      	mov	r3, r1
 81058e6:	4313      	orrs	r3, r2
 81058e8:	d01e      	beq.n	8105928 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81058f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81058f6:	d10c      	bne.n	8105912 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81058fc:	3328      	adds	r3, #40	@ 0x28
 81058fe:	2102      	movs	r1, #2
 8105900:	4618      	mov	r0, r3
 8105902:	f000 fe25 	bl	8106550 <RCCEx_PLL3_Config>
 8105906:	4603      	mov	r3, r0
 8105908:	2b00      	cmp	r3, #0
 810590a:	d002      	beq.n	8105912 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810590c:	2301      	movs	r3, #1
 810590e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105912:	4b70      	ldr	r3, [pc, #448]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105916:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810591e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8105922:	4a6c      	ldr	r2, [pc, #432]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105924:	430b      	orrs	r3, r1
 8105926:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810592c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105930:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8105934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8105938:	2300      	movs	r3, #0
 810593a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810593e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8105942:	460b      	mov	r3, r1
 8105944:	4313      	orrs	r3, r2
 8105946:	d03e      	beq.n	81059c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810594c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8105950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105954:	d022      	beq.n	810599c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8105956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810595a:	d81b      	bhi.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810595c:	2b00      	cmp	r3, #0
 810595e:	d003      	beq.n	8105968 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105964:	d00b      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8105966:	e015      	b.n	8105994 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810596c:	3308      	adds	r3, #8
 810596e:	2100      	movs	r1, #0
 8105970:	4618      	mov	r0, r3
 8105972:	f000 fd3b 	bl	81063ec <RCCEx_PLL2_Config>
 8105976:	4603      	mov	r3, r0
 8105978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810597c:	e00f      	b.n	810599e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105982:	3328      	adds	r3, #40	@ 0x28
 8105984:	2102      	movs	r1, #2
 8105986:	4618      	mov	r0, r3
 8105988:	f000 fde2 	bl	8106550 <RCCEx_PLL3_Config>
 810598c:	4603      	mov	r3, r0
 810598e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105992:	e004      	b.n	810599e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105994:	2301      	movs	r3, #1
 8105996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810599a:	e000      	b.n	810599e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810599c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810599e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81059a2:	2b00      	cmp	r3, #0
 81059a4:	d10b      	bne.n	81059be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81059a6:	4b4b      	ldr	r3, [pc, #300]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81059a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81059aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81059b6:	4a47      	ldr	r2, [pc, #284]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81059b8:	430b      	orrs	r3, r1
 81059ba:	6593      	str	r3, [r2, #88]	@ 0x58
 81059bc:	e003      	b.n	81059c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81059be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81059c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81059d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 81059d4:	2300      	movs	r3, #0
 81059d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81059d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81059dc:	460b      	mov	r3, r1
 81059de:	4313      	orrs	r3, r2
 81059e0:	d03b      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81059ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81059ee:	d01f      	beq.n	8105a30 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81059f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81059f4:	d818      	bhi.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81059fa:	d003      	beq.n	8105a04 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81059fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105a00:	d007      	beq.n	8105a12 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8105a02:	e011      	b.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a04:	4b33      	ldr	r3, [pc, #204]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a08:	4a32      	ldr	r2, [pc, #200]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105a10:	e00f      	b.n	8105a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a16:	3328      	adds	r3, #40	@ 0x28
 8105a18:	2101      	movs	r1, #1
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	f000 fd98 	bl	8106550 <RCCEx_PLL3_Config>
 8105a20:	4603      	mov	r3, r0
 8105a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8105a26:	e004      	b.n	8105a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105a28:	2301      	movs	r3, #1
 8105a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105a2e:	e000      	b.n	8105a32 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a36:	2b00      	cmp	r3, #0
 8105a38:	d10b      	bne.n	8105a52 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105a3a:	4b26      	ldr	r3, [pc, #152]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105a3e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105a4a:	4a22      	ldr	r2, [pc, #136]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105a4c:	430b      	orrs	r3, r1
 8105a4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8105a50:	e003      	b.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a62:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8105a66:	673b      	str	r3, [r7, #112]	@ 0x70
 8105a68:	2300      	movs	r3, #0
 8105a6a:	677b      	str	r3, [r7, #116]	@ 0x74
 8105a6c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8105a70:	460b      	mov	r3, r1
 8105a72:	4313      	orrs	r3, r2
 8105a74:	d034      	beq.n	8105ae0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8105a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a7c:	2b00      	cmp	r3, #0
 8105a7e:	d003      	beq.n	8105a88 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105a84:	d007      	beq.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8105a86:	e011      	b.n	8105aac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a88:	4b12      	ldr	r3, [pc, #72]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a8c:	4a11      	ldr	r2, [pc, #68]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105a94:	e00e      	b.n	8105ab4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105a9a:	3308      	adds	r3, #8
 8105a9c:	2102      	movs	r1, #2
 8105a9e:	4618      	mov	r0, r3
 8105aa0:	f000 fca4 	bl	81063ec <RCCEx_PLL2_Config>
 8105aa4:	4603      	mov	r3, r0
 8105aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105aaa:	e003      	b.n	8105ab4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105aac:	2301      	movs	r3, #1
 8105aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ab8:	2b00      	cmp	r3, #0
 8105aba:	d10d      	bne.n	8105ad8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105abc:	4b05      	ldr	r3, [pc, #20]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105ac0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8105ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105aca:	4a02      	ldr	r2, [pc, #8]	@ (8105ad4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105acc:	430b      	orrs	r3, r1
 8105ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105ad0:	e006      	b.n	8105ae0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8105ad2:	bf00      	nop
 8105ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105adc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ae8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8105aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8105aee:	2300      	movs	r3, #0
 8105af0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8105af2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8105af6:	460b      	mov	r3, r1
 8105af8:	4313      	orrs	r3, r2
 8105afa:	d00c      	beq.n	8105b16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b00:	3328      	adds	r3, #40	@ 0x28
 8105b02:	2102      	movs	r1, #2
 8105b04:	4618      	mov	r0, r3
 8105b06:	f000 fd23 	bl	8106550 <RCCEx_PLL3_Config>
 8105b0a:	4603      	mov	r3, r0
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	d002      	beq.n	8105b16 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105b10:	2301      	movs	r3, #1
 8105b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8105b22:	663b      	str	r3, [r7, #96]	@ 0x60
 8105b24:	2300      	movs	r3, #0
 8105b26:	667b      	str	r3, [r7, #100]	@ 0x64
 8105b28:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8105b2c:	460b      	mov	r3, r1
 8105b2e:	4313      	orrs	r3, r2
 8105b30:	d038      	beq.n	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8105b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8105b3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105b3e:	d018      	beq.n	8105b72 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105b40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105b44:	d811      	bhi.n	8105b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105b4a:	d014      	beq.n	8105b76 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8105b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105b50:	d80b      	bhi.n	8105b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105b52:	2b00      	cmp	r3, #0
 8105b54:	d011      	beq.n	8105b7a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8105b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b5a:	d106      	bne.n	8105b6a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b5c:	4bc3      	ldr	r3, [pc, #780]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b60:	4ac2      	ldr	r2, [pc, #776]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105b68:	e008      	b.n	8105b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105b6a:	2301      	movs	r3, #1
 8105b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105b70:	e004      	b.n	8105b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105b72:	bf00      	nop
 8105b74:	e002      	b.n	8105b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105b76:	bf00      	nop
 8105b78:	e000      	b.n	8105b7c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105b80:	2b00      	cmp	r3, #0
 8105b82:	d10b      	bne.n	8105b9c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105b84:	4bb9      	ldr	r3, [pc, #740]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105b88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8105b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8105b94:	4ab5      	ldr	r2, [pc, #724]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105b96:	430b      	orrs	r3, r1
 8105b98:	6553      	str	r3, [r2, #84]	@ 0x54
 8105b9a:	e003      	b.n	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8105bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8105bb2:	2300      	movs	r3, #0
 8105bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8105bb6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8105bba:	460b      	mov	r3, r1
 8105bbc:	4313      	orrs	r3, r2
 8105bbe:	d009      	beq.n	8105bd4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105bc0:	4baa      	ldr	r3, [pc, #680]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105bc4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8105bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8105bce:	4aa7      	ldr	r2, [pc, #668]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105bd0:	430b      	orrs	r3, r1
 8105bd2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bdc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8105be0:	653b      	str	r3, [r7, #80]	@ 0x50
 8105be2:	2300      	movs	r3, #0
 8105be4:	657b      	str	r3, [r7, #84]	@ 0x54
 8105be6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8105bea:	460b      	mov	r3, r1
 8105bec:	4313      	orrs	r3, r2
 8105bee:	d00a      	beq.n	8105c06 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105bf0:	4b9e      	ldr	r3, [pc, #632]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105bf2:	691b      	ldr	r3, [r3, #16]
 8105bf4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8105bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8105c00:	4a9a      	ldr	r2, [pc, #616]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c02:	430b      	orrs	r3, r1
 8105c04:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c0e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8105c12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105c14:	2300      	movs	r3, #0
 8105c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105c18:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105c1c:	460b      	mov	r3, r1
 8105c1e:	4313      	orrs	r3, r2
 8105c20:	d009      	beq.n	8105c36 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105c22:	4b92      	ldr	r3, [pc, #584]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105c26:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8105c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105c30:	4a8e      	ldr	r2, [pc, #568]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c32:	430b      	orrs	r3, r1
 8105c34:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c3e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8105c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8105c44:	2300      	movs	r3, #0
 8105c46:	647b      	str	r3, [r7, #68]	@ 0x44
 8105c48:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8105c4c:	460b      	mov	r3, r1
 8105c4e:	4313      	orrs	r3, r2
 8105c50:	d00e      	beq.n	8105c70 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105c52:	4b86      	ldr	r3, [pc, #536]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c54:	691b      	ldr	r3, [r3, #16]
 8105c56:	4a85      	ldr	r2, [pc, #532]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8105c5c:	6113      	str	r3, [r2, #16]
 8105c5e:	4b83      	ldr	r3, [pc, #524]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c60:	6919      	ldr	r1, [r3, #16]
 8105c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105c6a:	4a80      	ldr	r2, [pc, #512]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c6c:	430b      	orrs	r3, r1
 8105c6e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c78:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8105c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105c7e:	2300      	movs	r3, #0
 8105c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8105c82:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105c86:	460b      	mov	r3, r1
 8105c88:	4313      	orrs	r3, r2
 8105c8a:	d009      	beq.n	8105ca0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105c8c:	4b77      	ldr	r3, [pc, #476]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105c90:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8105c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105c9a:	4a74      	ldr	r2, [pc, #464]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105c9c:	430b      	orrs	r3, r1
 8105c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ca8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8105cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8105cae:	2300      	movs	r3, #0
 8105cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8105cb2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8105cb6:	460b      	mov	r3, r1
 8105cb8:	4313      	orrs	r3, r2
 8105cba:	d00a      	beq.n	8105cd2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105cc0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8105cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8105ccc:	4a67      	ldr	r2, [pc, #412]	@ (8105e6c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105cce:	430b      	orrs	r3, r1
 8105cd0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cda:	2100      	movs	r1, #0
 8105cdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8105cde:	f003 0301 	and.w	r3, r3, #1
 8105ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8105ce4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8105ce8:	460b      	mov	r3, r1
 8105cea:	4313      	orrs	r3, r2
 8105cec:	d011      	beq.n	8105d12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105cf2:	3308      	adds	r3, #8
 8105cf4:	2100      	movs	r1, #0
 8105cf6:	4618      	mov	r0, r3
 8105cf8:	f000 fb78 	bl	81063ec <RCCEx_PLL2_Config>
 8105cfc:	4603      	mov	r3, r0
 8105cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d06:	2b00      	cmp	r3, #0
 8105d08:	d003      	beq.n	8105d12 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d1a:	2100      	movs	r1, #0
 8105d1c:	6239      	str	r1, [r7, #32]
 8105d1e:	f003 0302 	and.w	r3, r3, #2
 8105d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8105d24:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105d28:	460b      	mov	r3, r1
 8105d2a:	4313      	orrs	r3, r2
 8105d2c:	d011      	beq.n	8105d52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d32:	3308      	adds	r3, #8
 8105d34:	2101      	movs	r1, #1
 8105d36:	4618      	mov	r0, r3
 8105d38:	f000 fb58 	bl	81063ec <RCCEx_PLL2_Config>
 8105d3c:	4603      	mov	r3, r0
 8105d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	d003      	beq.n	8105d52 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d5a:	2100      	movs	r1, #0
 8105d5c:	61b9      	str	r1, [r7, #24]
 8105d5e:	f003 0304 	and.w	r3, r3, #4
 8105d62:	61fb      	str	r3, [r7, #28]
 8105d64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105d68:	460b      	mov	r3, r1
 8105d6a:	4313      	orrs	r3, r2
 8105d6c:	d011      	beq.n	8105d92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d72:	3308      	adds	r3, #8
 8105d74:	2102      	movs	r1, #2
 8105d76:	4618      	mov	r0, r3
 8105d78:	f000 fb38 	bl	81063ec <RCCEx_PLL2_Config>
 8105d7c:	4603      	mov	r3, r0
 8105d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d86:	2b00      	cmp	r3, #0
 8105d88:	d003      	beq.n	8105d92 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8105d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d9a:	2100      	movs	r1, #0
 8105d9c:	6139      	str	r1, [r7, #16]
 8105d9e:	f003 0308 	and.w	r3, r3, #8
 8105da2:	617b      	str	r3, [r7, #20]
 8105da4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8105da8:	460b      	mov	r3, r1
 8105daa:	4313      	orrs	r3, r2
 8105dac:	d011      	beq.n	8105dd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105db2:	3328      	adds	r3, #40	@ 0x28
 8105db4:	2100      	movs	r1, #0
 8105db6:	4618      	mov	r0, r3
 8105db8:	f000 fbca 	bl	8106550 <RCCEx_PLL3_Config>
 8105dbc:	4603      	mov	r3, r0
 8105dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8105dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105dc6:	2b00      	cmp	r3, #0
 8105dc8:	d003      	beq.n	8105dd2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8105dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105dda:	2100      	movs	r1, #0
 8105ddc:	60b9      	str	r1, [r7, #8]
 8105dde:	f003 0310 	and.w	r3, r3, #16
 8105de2:	60fb      	str	r3, [r7, #12]
 8105de4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105de8:	460b      	mov	r3, r1
 8105dea:	4313      	orrs	r3, r2
 8105dec:	d011      	beq.n	8105e12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105df2:	3328      	adds	r3, #40	@ 0x28
 8105df4:	2101      	movs	r1, #1
 8105df6:	4618      	mov	r0, r3
 8105df8:	f000 fbaa 	bl	8106550 <RCCEx_PLL3_Config>
 8105dfc:	4603      	mov	r3, r0
 8105dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e06:	2b00      	cmp	r3, #0
 8105e08:	d003      	beq.n	8105e12 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8105e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e1a:	2100      	movs	r1, #0
 8105e1c:	6039      	str	r1, [r7, #0]
 8105e1e:	f003 0320 	and.w	r3, r3, #32
 8105e22:	607b      	str	r3, [r7, #4]
 8105e24:	e9d7 1200 	ldrd	r1, r2, [r7]
 8105e28:	460b      	mov	r3, r1
 8105e2a:	4313      	orrs	r3, r2
 8105e2c:	d011      	beq.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e32:	3328      	adds	r3, #40	@ 0x28
 8105e34:	2102      	movs	r1, #2
 8105e36:	4618      	mov	r0, r3
 8105e38:	f000 fb8a 	bl	8106550 <RCCEx_PLL3_Config>
 8105e3c:	4603      	mov	r3, r0
 8105e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8105e42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e46:	2b00      	cmp	r3, #0
 8105e48:	d003      	beq.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8105e52:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8105e56:	2b00      	cmp	r3, #0
 8105e58:	d101      	bne.n	8105e5e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8105e5a:	2300      	movs	r3, #0
 8105e5c:	e000      	b.n	8105e60 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8105e5e:	2301      	movs	r3, #1
}
 8105e60:	4618      	mov	r0, r3
 8105e62:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8105e66:	46bd      	mov	sp, r7
 8105e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105e6c:	58024400 	.word	0x58024400

08105e70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105e70:	b580      	push	{r7, lr}
 8105e72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105e74:	f7fe fd94 	bl	81049a0 <HAL_RCC_GetHCLKFreq>
 8105e78:	4602      	mov	r2, r0
 8105e7a:	4b06      	ldr	r3, [pc, #24]	@ (8105e94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105e7c:	6a1b      	ldr	r3, [r3, #32]
 8105e7e:	091b      	lsrs	r3, r3, #4
 8105e80:	f003 0307 	and.w	r3, r3, #7
 8105e84:	4904      	ldr	r1, [pc, #16]	@ (8105e98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105e86:	5ccb      	ldrb	r3, [r1, r3]
 8105e88:	f003 031f 	and.w	r3, r3, #31
 8105e8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105e90:	4618      	mov	r0, r3
 8105e92:	bd80      	pop	{r7, pc}
 8105e94:	58024400 	.word	0x58024400
 8105e98:	0810e9d4 	.word	0x0810e9d4

08105e9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105e9c:	b480      	push	{r7}
 8105e9e:	b089      	sub	sp, #36	@ 0x24
 8105ea0:	af00      	add	r7, sp, #0
 8105ea2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105ea4:	4ba1      	ldr	r3, [pc, #644]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ea8:	f003 0303 	and.w	r3, r3, #3
 8105eac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105eae:	4b9f      	ldr	r3, [pc, #636]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105eb2:	0b1b      	lsrs	r3, r3, #12
 8105eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105eb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105eba:	4b9c      	ldr	r3, [pc, #624]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105ebe:	091b      	lsrs	r3, r3, #4
 8105ec0:	f003 0301 	and.w	r3, r3, #1
 8105ec4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105ec6:	4b99      	ldr	r3, [pc, #612]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105eca:	08db      	lsrs	r3, r3, #3
 8105ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105ed0:	693a      	ldr	r2, [r7, #16]
 8105ed2:	fb02 f303 	mul.w	r3, r2, r3
 8105ed6:	ee07 3a90 	vmov	s15, r3
 8105eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105ee2:	697b      	ldr	r3, [r7, #20]
 8105ee4:	2b00      	cmp	r3, #0
 8105ee6:	f000 8111 	beq.w	810610c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105eea:	69bb      	ldr	r3, [r7, #24]
 8105eec:	2b02      	cmp	r3, #2
 8105eee:	f000 8083 	beq.w	8105ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105ef2:	69bb      	ldr	r3, [r7, #24]
 8105ef4:	2b02      	cmp	r3, #2
 8105ef6:	f200 80a1 	bhi.w	810603c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105efa:	69bb      	ldr	r3, [r7, #24]
 8105efc:	2b00      	cmp	r3, #0
 8105efe:	d003      	beq.n	8105f08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105f00:	69bb      	ldr	r3, [r7, #24]
 8105f02:	2b01      	cmp	r3, #1
 8105f04:	d056      	beq.n	8105fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105f06:	e099      	b.n	810603c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f08:	4b88      	ldr	r3, [pc, #544]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	f003 0320 	and.w	r3, r3, #32
 8105f10:	2b00      	cmp	r3, #0
 8105f12:	d02d      	beq.n	8105f70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105f14:	4b85      	ldr	r3, [pc, #532]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f16:	681b      	ldr	r3, [r3, #0]
 8105f18:	08db      	lsrs	r3, r3, #3
 8105f1a:	f003 0303 	and.w	r3, r3, #3
 8105f1e:	4a84      	ldr	r2, [pc, #528]	@ (8106130 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105f20:	fa22 f303 	lsr.w	r3, r2, r3
 8105f24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105f26:	68bb      	ldr	r3, [r7, #8]
 8105f28:	ee07 3a90 	vmov	s15, r3
 8105f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f30:	697b      	ldr	r3, [r7, #20]
 8105f32:	ee07 3a90 	vmov	s15, r3
 8105f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f3e:	4b7b      	ldr	r3, [pc, #492]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f46:	ee07 3a90 	vmov	s15, r3
 8105f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8106134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105f6e:	e087      	b.n	8106080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105f70:	697b      	ldr	r3, [r7, #20]
 8105f72:	ee07 3a90 	vmov	s15, r3
 8105f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8106138 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f82:	4b6a      	ldr	r3, [pc, #424]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f8a:	ee07 3a90 	vmov	s15, r3
 8105f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8106134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105fb2:	e065      	b.n	8106080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105fb4:	697b      	ldr	r3, [r7, #20]
 8105fb6:	ee07 3a90 	vmov	s15, r3
 8105fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fbe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810613c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105fc6:	4b59      	ldr	r3, [pc, #356]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105fce:	ee07 3a90 	vmov	s15, r3
 8105fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8105fda:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8106134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105fe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ff6:	e043      	b.n	8106080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105ff8:	697b      	ldr	r3, [r7, #20]
 8105ffa:	ee07 3a90 	vmov	s15, r3
 8105ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106002:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8106140 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8106006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810600a:	4b48      	ldr	r3, [pc, #288]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810600c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106012:	ee07 3a90 	vmov	s15, r3
 8106016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810601a:	ed97 6a03 	vldr	s12, [r7, #12]
 810601e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8106134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810602a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810602e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810603a:	e021      	b.n	8106080 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810603c:	697b      	ldr	r3, [r7, #20]
 810603e:	ee07 3a90 	vmov	s15, r3
 8106042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106046:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810613c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810604e:	4b37      	ldr	r3, [pc, #220]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106056:	ee07 3a90 	vmov	s15, r3
 810605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810605e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106062:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8106134 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810606e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106076:	ee67 7a27 	vmul.f32	s15, s14, s15
 810607a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810607e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106080:	4b2a      	ldr	r3, [pc, #168]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106084:	0a5b      	lsrs	r3, r3, #9
 8106086:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810608a:	ee07 3a90 	vmov	s15, r3
 810608e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106092:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8106096:	ee37 7a87 	vadd.f32	s14, s15, s14
 810609a:	edd7 6a07 	vldr	s13, [r7, #28]
 810609e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81060a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81060a6:	ee17 2a90 	vmov	r2, s15
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81060ae:	4b1f      	ldr	r3, [pc, #124]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81060b2:	0c1b      	lsrs	r3, r3, #16
 81060b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81060b8:	ee07 3a90 	vmov	s15, r3
 81060bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81060c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81060c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81060cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81060d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81060d4:	ee17 2a90 	vmov	r2, s15
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81060dc:	4b13      	ldr	r3, [pc, #76]	@ (810612c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81060e0:	0e1b      	lsrs	r3, r3, #24
 81060e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81060e6:	ee07 3a90 	vmov	s15, r3
 81060ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81060f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81060f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81060fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81060fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106102:	ee17 2a90 	vmov	r2, s15
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810610a:	e008      	b.n	810611e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	2200      	movs	r2, #0
 8106110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	2200      	movs	r2, #0
 8106116:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	2200      	movs	r2, #0
 810611c:	609a      	str	r2, [r3, #8]
}
 810611e:	bf00      	nop
 8106120:	3724      	adds	r7, #36	@ 0x24
 8106122:	46bd      	mov	sp, r7
 8106124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106128:	4770      	bx	lr
 810612a:	bf00      	nop
 810612c:	58024400 	.word	0x58024400
 8106130:	03d09000 	.word	0x03d09000
 8106134:	46000000 	.word	0x46000000
 8106138:	4c742400 	.word	0x4c742400
 810613c:	4a742400 	.word	0x4a742400
 8106140:	4af42400 	.word	0x4af42400

08106144 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8106144:	b480      	push	{r7}
 8106146:	b089      	sub	sp, #36	@ 0x24
 8106148:	af00      	add	r7, sp, #0
 810614a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810614c:	4ba1      	ldr	r3, [pc, #644]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106150:	f003 0303 	and.w	r3, r3, #3
 8106154:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8106156:	4b9f      	ldr	r3, [pc, #636]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810615a:	0d1b      	lsrs	r3, r3, #20
 810615c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8106160:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8106162:	4b9c      	ldr	r3, [pc, #624]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106166:	0a1b      	lsrs	r3, r3, #8
 8106168:	f003 0301 	and.w	r3, r3, #1
 810616c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810616e:	4b99      	ldr	r3, [pc, #612]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8106172:	08db      	lsrs	r3, r3, #3
 8106174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106178:	693a      	ldr	r2, [r7, #16]
 810617a:	fb02 f303 	mul.w	r3, r2, r3
 810617e:	ee07 3a90 	vmov	s15, r3
 8106182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106186:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810618a:	697b      	ldr	r3, [r7, #20]
 810618c:	2b00      	cmp	r3, #0
 810618e:	f000 8111 	beq.w	81063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8106192:	69bb      	ldr	r3, [r7, #24]
 8106194:	2b02      	cmp	r3, #2
 8106196:	f000 8083 	beq.w	81062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810619a:	69bb      	ldr	r3, [r7, #24]
 810619c:	2b02      	cmp	r3, #2
 810619e:	f200 80a1 	bhi.w	81062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81061a2:	69bb      	ldr	r3, [r7, #24]
 81061a4:	2b00      	cmp	r3, #0
 81061a6:	d003      	beq.n	81061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81061a8:	69bb      	ldr	r3, [r7, #24]
 81061aa:	2b01      	cmp	r3, #1
 81061ac:	d056      	beq.n	810625c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81061ae:	e099      	b.n	81062e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81061b0:	4b88      	ldr	r3, [pc, #544]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	f003 0320 	and.w	r3, r3, #32
 81061b8:	2b00      	cmp	r3, #0
 81061ba:	d02d      	beq.n	8106218 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81061bc:	4b85      	ldr	r3, [pc, #532]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81061be:	681b      	ldr	r3, [r3, #0]
 81061c0:	08db      	lsrs	r3, r3, #3
 81061c2:	f003 0303 	and.w	r3, r3, #3
 81061c6:	4a84      	ldr	r2, [pc, #528]	@ (81063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81061c8:	fa22 f303 	lsr.w	r3, r2, r3
 81061cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81061ce:	68bb      	ldr	r3, [r7, #8]
 81061d0:	ee07 3a90 	vmov	s15, r3
 81061d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061d8:	697b      	ldr	r3, [r7, #20]
 81061da:	ee07 3a90 	vmov	s15, r3
 81061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061e6:	4b7b      	ldr	r3, [pc, #492]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061ee:	ee07 3a90 	vmov	s15, r3
 81061f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81061fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81063dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81061fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810620a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810620e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106212:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8106216:	e087      	b.n	8106328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106218:	697b      	ldr	r3, [r7, #20]
 810621a:	ee07 3a90 	vmov	s15, r3
 810621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106222:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81063e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8106226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810622a:	4b6a      	ldr	r3, [pc, #424]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810622e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106232:	ee07 3a90 	vmov	s15, r3
 8106236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810623a:	ed97 6a03 	vldr	s12, [r7, #12]
 810623e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81063dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810624a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810625a:	e065      	b.n	8106328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810625c:	697b      	ldr	r3, [r7, #20]
 810625e:	ee07 3a90 	vmov	s15, r3
 8106262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106266:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810626a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810626e:	4b59      	ldr	r3, [pc, #356]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106276:	ee07 3a90 	vmov	s15, r3
 810627a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810627e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106282:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81063dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810628a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810628e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8106292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106296:	ee67 7a27 	vmul.f32	s15, s14, s15
 810629a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810629e:	e043      	b.n	8106328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81062a0:	697b      	ldr	r3, [r7, #20]
 81062a2:	ee07 3a90 	vmov	s15, r3
 81062a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81063e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81062ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062b2:	4b48      	ldr	r3, [pc, #288]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81062b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062ba:	ee07 3a90 	vmov	s15, r3
 81062be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81062c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81063dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81062ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81062d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062e2:	e021      	b.n	8106328 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81062e4:	697b      	ldr	r3, [r7, #20]
 81062e6:	ee07 3a90 	vmov	s15, r3
 81062ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062f6:	4b37      	ldr	r3, [pc, #220]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81062fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062fe:	ee07 3a90 	vmov	s15, r3
 8106302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106306:	ed97 6a03 	vldr	s12, [r7, #12]
 810630a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81063dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810630e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810631a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810631e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106326:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8106328:	4b2a      	ldr	r3, [pc, #168]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810632a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810632c:	0a5b      	lsrs	r3, r3, #9
 810632e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106332:	ee07 3a90 	vmov	s15, r3
 8106336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810633a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810633e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106342:	edd7 6a07 	vldr	s13, [r7, #28]
 8106346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810634a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810634e:	ee17 2a90 	vmov	r2, s15
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8106356:	4b1f      	ldr	r3, [pc, #124]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810635a:	0c1b      	lsrs	r3, r3, #16
 810635c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8106360:	ee07 3a90 	vmov	s15, r3
 8106364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106368:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810636c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106370:	edd7 6a07 	vldr	s13, [r7, #28]
 8106374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810637c:	ee17 2a90 	vmov	r2, s15
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8106384:	4b13      	ldr	r3, [pc, #76]	@ (81063d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106388:	0e1b      	lsrs	r3, r3, #24
 810638a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810638e:	ee07 3a90 	vmov	s15, r3
 8106392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810639a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810639e:	edd7 6a07 	vldr	s13, [r7, #28]
 81063a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81063a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81063aa:	ee17 2a90 	vmov	r2, s15
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81063b2:	e008      	b.n	81063c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	2200      	movs	r2, #0
 81063b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	2200      	movs	r2, #0
 81063be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	2200      	movs	r2, #0
 81063c4:	609a      	str	r2, [r3, #8]
}
 81063c6:	bf00      	nop
 81063c8:	3724      	adds	r7, #36	@ 0x24
 81063ca:	46bd      	mov	sp, r7
 81063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063d0:	4770      	bx	lr
 81063d2:	bf00      	nop
 81063d4:	58024400 	.word	0x58024400
 81063d8:	03d09000 	.word	0x03d09000
 81063dc:	46000000 	.word	0x46000000
 81063e0:	4c742400 	.word	0x4c742400
 81063e4:	4a742400 	.word	0x4a742400
 81063e8:	4af42400 	.word	0x4af42400

081063ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81063ec:	b580      	push	{r7, lr}
 81063ee:	b084      	sub	sp, #16
 81063f0:	af00      	add	r7, sp, #0
 81063f2:	6078      	str	r0, [r7, #4]
 81063f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81063f6:	2300      	movs	r3, #0
 81063f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81063fa:	4b54      	ldr	r3, [pc, #336]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81063fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81063fe:	f003 0303 	and.w	r3, r3, #3
 8106402:	2b03      	cmp	r3, #3
 8106404:	d101      	bne.n	810640a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8106406:	2301      	movs	r3, #1
 8106408:	e09b      	b.n	8106542 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810640a:	4b50      	ldr	r3, [pc, #320]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	4a4f      	ldr	r2, [pc, #316]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106410:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8106414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106416:	f7fc ffa9 	bl	810336c <HAL_GetTick>
 810641a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810641c:	e008      	b.n	8106430 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810641e:	f7fc ffa5 	bl	810336c <HAL_GetTick>
 8106422:	4602      	mov	r2, r0
 8106424:	68bb      	ldr	r3, [r7, #8]
 8106426:	1ad3      	subs	r3, r2, r3
 8106428:	2b02      	cmp	r3, #2
 810642a:	d901      	bls.n	8106430 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810642c:	2303      	movs	r3, #3
 810642e:	e088      	b.n	8106542 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8106430:	4b46      	ldr	r3, [pc, #280]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106438:	2b00      	cmp	r3, #0
 810643a:	d1f0      	bne.n	810641e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810643c:	4b43      	ldr	r3, [pc, #268]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 810643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106440:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	681b      	ldr	r3, [r3, #0]
 8106448:	031b      	lsls	r3, r3, #12
 810644a:	4940      	ldr	r1, [pc, #256]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 810644c:	4313      	orrs	r3, r2
 810644e:	628b      	str	r3, [r1, #40]	@ 0x28
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	685b      	ldr	r3, [r3, #4]
 8106454:	3b01      	subs	r3, #1
 8106456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	689b      	ldr	r3, [r3, #8]
 810645e:	3b01      	subs	r3, #1
 8106460:	025b      	lsls	r3, r3, #9
 8106462:	b29b      	uxth	r3, r3
 8106464:	431a      	orrs	r2, r3
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	68db      	ldr	r3, [r3, #12]
 810646a:	3b01      	subs	r3, #1
 810646c:	041b      	lsls	r3, r3, #16
 810646e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8106472:	431a      	orrs	r2, r3
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	691b      	ldr	r3, [r3, #16]
 8106478:	3b01      	subs	r3, #1
 810647a:	061b      	lsls	r3, r3, #24
 810647c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8106480:	4932      	ldr	r1, [pc, #200]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106482:	4313      	orrs	r3, r2
 8106484:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8106486:	4b31      	ldr	r3, [pc, #196]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810648a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	695b      	ldr	r3, [r3, #20]
 8106492:	492e      	ldr	r1, [pc, #184]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106494:	4313      	orrs	r3, r2
 8106496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106498:	4b2c      	ldr	r3, [pc, #176]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 810649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810649c:	f023 0220 	bic.w	r2, r3, #32
 81064a0:	687b      	ldr	r3, [r7, #4]
 81064a2:	699b      	ldr	r3, [r3, #24]
 81064a4:	4929      	ldr	r1, [pc, #164]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064a6:	4313      	orrs	r3, r2
 81064a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81064aa:	4b28      	ldr	r3, [pc, #160]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064ae:	4a27      	ldr	r2, [pc, #156]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064b0:	f023 0310 	bic.w	r3, r3, #16
 81064b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81064b6:	4b25      	ldr	r3, [pc, #148]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81064ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81064be:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81064c2:	687a      	ldr	r2, [r7, #4]
 81064c4:	69d2      	ldr	r2, [r2, #28]
 81064c6:	00d2      	lsls	r2, r2, #3
 81064c8:	4920      	ldr	r1, [pc, #128]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064ca:	4313      	orrs	r3, r2
 81064cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81064ce:	4b1f      	ldr	r3, [pc, #124]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064d2:	4a1e      	ldr	r2, [pc, #120]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064d4:	f043 0310 	orr.w	r3, r3, #16
 81064d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81064da:	683b      	ldr	r3, [r7, #0]
 81064dc:	2b00      	cmp	r3, #0
 81064de:	d106      	bne.n	81064ee <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81064e0:	4b1a      	ldr	r3, [pc, #104]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064e4:	4a19      	ldr	r2, [pc, #100]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81064ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81064ec:	e00f      	b.n	810650e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81064ee:	683b      	ldr	r3, [r7, #0]
 81064f0:	2b01      	cmp	r3, #1
 81064f2:	d106      	bne.n	8106502 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81064f4:	4b15      	ldr	r3, [pc, #84]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064f8:	4a14      	ldr	r2, [pc, #80]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 81064fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106500:	e005      	b.n	810650e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8106502:	4b12      	ldr	r3, [pc, #72]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106506:	4a11      	ldr	r2, [pc, #68]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106508:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810650c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810650e:	4b0f      	ldr	r3, [pc, #60]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106510:	681b      	ldr	r3, [r3, #0]
 8106512:	4a0e      	ldr	r2, [pc, #56]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106514:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8106518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810651a:	f7fc ff27 	bl	810336c <HAL_GetTick>
 810651e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106520:	e008      	b.n	8106534 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8106522:	f7fc ff23 	bl	810336c <HAL_GetTick>
 8106526:	4602      	mov	r2, r0
 8106528:	68bb      	ldr	r3, [r7, #8]
 810652a:	1ad3      	subs	r3, r2, r3
 810652c:	2b02      	cmp	r3, #2
 810652e:	d901      	bls.n	8106534 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106530:	2303      	movs	r3, #3
 8106532:	e006      	b.n	8106542 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8106534:	4b05      	ldr	r3, [pc, #20]	@ (810654c <RCCEx_PLL2_Config+0x160>)
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810653c:	2b00      	cmp	r3, #0
 810653e:	d0f0      	beq.n	8106522 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8106540:	7bfb      	ldrb	r3, [r7, #15]
}
 8106542:	4618      	mov	r0, r3
 8106544:	3710      	adds	r7, #16
 8106546:	46bd      	mov	sp, r7
 8106548:	bd80      	pop	{r7, pc}
 810654a:	bf00      	nop
 810654c:	58024400 	.word	0x58024400

08106550 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106550:	b580      	push	{r7, lr}
 8106552:	b084      	sub	sp, #16
 8106554:	af00      	add	r7, sp, #0
 8106556:	6078      	str	r0, [r7, #4]
 8106558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810655a:	2300      	movs	r3, #0
 810655c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810655e:	4b54      	ldr	r3, [pc, #336]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8106562:	f003 0303 	and.w	r3, r3, #3
 8106566:	2b03      	cmp	r3, #3
 8106568:	d101      	bne.n	810656e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810656a:	2301      	movs	r3, #1
 810656c:	e09b      	b.n	81066a6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810656e:	4b50      	ldr	r3, [pc, #320]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	4a4f      	ldr	r2, [pc, #316]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810657a:	f7fc fef7 	bl	810336c <HAL_GetTick>
 810657e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106580:	e008      	b.n	8106594 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106582:	f7fc fef3 	bl	810336c <HAL_GetTick>
 8106586:	4602      	mov	r2, r0
 8106588:	68bb      	ldr	r3, [r7, #8]
 810658a:	1ad3      	subs	r3, r2, r3
 810658c:	2b02      	cmp	r3, #2
 810658e:	d901      	bls.n	8106594 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106590:	2303      	movs	r3, #3
 8106592:	e088      	b.n	81066a6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106594:	4b46      	ldr	r3, [pc, #280]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810659c:	2b00      	cmp	r3, #0
 810659e:	d1f0      	bne.n	8106582 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81065a0:	4b43      	ldr	r3, [pc, #268]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 81065a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81065a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	681b      	ldr	r3, [r3, #0]
 81065ac:	051b      	lsls	r3, r3, #20
 81065ae:	4940      	ldr	r1, [pc, #256]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 81065b0:	4313      	orrs	r3, r2
 81065b2:	628b      	str	r3, [r1, #40]	@ 0x28
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	685b      	ldr	r3, [r3, #4]
 81065b8:	3b01      	subs	r3, #1
 81065ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	689b      	ldr	r3, [r3, #8]
 81065c2:	3b01      	subs	r3, #1
 81065c4:	025b      	lsls	r3, r3, #9
 81065c6:	b29b      	uxth	r3, r3
 81065c8:	431a      	orrs	r2, r3
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	68db      	ldr	r3, [r3, #12]
 81065ce:	3b01      	subs	r3, #1
 81065d0:	041b      	lsls	r3, r3, #16
 81065d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81065d6:	431a      	orrs	r2, r3
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	691b      	ldr	r3, [r3, #16]
 81065dc:	3b01      	subs	r3, #1
 81065de:	061b      	lsls	r3, r3, #24
 81065e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81065e4:	4932      	ldr	r1, [pc, #200]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 81065e6:	4313      	orrs	r3, r2
 81065e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81065ea:	4b31      	ldr	r3, [pc, #196]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 81065ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	695b      	ldr	r3, [r3, #20]
 81065f6:	492e      	ldr	r1, [pc, #184]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 81065f8:	4313      	orrs	r3, r2
 81065fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81065fc:	4b2c      	ldr	r3, [pc, #176]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 81065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106600:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	699b      	ldr	r3, [r3, #24]
 8106608:	4929      	ldr	r1, [pc, #164]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810660a:	4313      	orrs	r3, r2
 810660c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810660e:	4b28      	ldr	r3, [pc, #160]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106612:	4a27      	ldr	r2, [pc, #156]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8106618:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810661a:	4b25      	ldr	r3, [pc, #148]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810661c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810661e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8106622:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8106626:	687a      	ldr	r2, [r7, #4]
 8106628:	69d2      	ldr	r2, [r2, #28]
 810662a:	00d2      	lsls	r2, r2, #3
 810662c:	4920      	ldr	r1, [pc, #128]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810662e:	4313      	orrs	r3, r2
 8106630:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106632:	4b1f      	ldr	r3, [pc, #124]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106636:	4a1e      	ldr	r2, [pc, #120]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810663c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810663e:	683b      	ldr	r3, [r7, #0]
 8106640:	2b00      	cmp	r3, #0
 8106642:	d106      	bne.n	8106652 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106644:	4b1a      	ldr	r3, [pc, #104]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106648:	4a19      	ldr	r2, [pc, #100]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810664a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810664e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106650:	e00f      	b.n	8106672 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106652:	683b      	ldr	r3, [r7, #0]
 8106654:	2b01      	cmp	r3, #1
 8106656:	d106      	bne.n	8106666 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106658:	4b15      	ldr	r3, [pc, #84]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810665a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810665c:	4a14      	ldr	r2, [pc, #80]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810665e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8106662:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8106664:	e005      	b.n	8106672 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106666:	4b12      	ldr	r3, [pc, #72]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810666a:	4a11      	ldr	r2, [pc, #68]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810666c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8106670:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106672:	4b0f      	ldr	r3, [pc, #60]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106674:	681b      	ldr	r3, [r3, #0]
 8106676:	4a0e      	ldr	r2, [pc, #56]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 8106678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810667c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810667e:	f7fc fe75 	bl	810336c <HAL_GetTick>
 8106682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106684:	e008      	b.n	8106698 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106686:	f7fc fe71 	bl	810336c <HAL_GetTick>
 810668a:	4602      	mov	r2, r0
 810668c:	68bb      	ldr	r3, [r7, #8]
 810668e:	1ad3      	subs	r3, r2, r3
 8106690:	2b02      	cmp	r3, #2
 8106692:	d901      	bls.n	8106698 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106694:	2303      	movs	r3, #3
 8106696:	e006      	b.n	81066a6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106698:	4b05      	ldr	r3, [pc, #20]	@ (81066b0 <RCCEx_PLL3_Config+0x160>)
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81066a0:	2b00      	cmp	r3, #0
 81066a2:	d0f0      	beq.n	8106686 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 81066a6:	4618      	mov	r0, r3
 81066a8:	3710      	adds	r7, #16
 81066aa:	46bd      	mov	sp, r7
 81066ac:	bd80      	pop	{r7, pc}
 81066ae:	bf00      	nop
 81066b0:	58024400 	.word	0x58024400

081066b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81066b4:	b580      	push	{r7, lr}
 81066b6:	b082      	sub	sp, #8
 81066b8:	af00      	add	r7, sp, #0
 81066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81066bc:	687b      	ldr	r3, [r7, #4]
 81066be:	2b00      	cmp	r3, #0
 81066c0:	d101      	bne.n	81066c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81066c2:	2301      	movs	r3, #1
 81066c4:	e049      	b.n	810675a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81066cc:	b2db      	uxtb	r3, r3
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	d106      	bne.n	81066e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	2200      	movs	r2, #0
 81066d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81066da:	6878      	ldr	r0, [r7, #4]
 81066dc:	f7fc fafa 	bl	8102cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	2202      	movs	r2, #2
 81066e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	681a      	ldr	r2, [r3, #0]
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	3304      	adds	r3, #4
 81066f0:	4619      	mov	r1, r3
 81066f2:	4610      	mov	r0, r2
 81066f4:	f001 f928 	bl	8107948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	2201      	movs	r2, #1
 81066fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	2201      	movs	r2, #1
 8106704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106708:	687b      	ldr	r3, [r7, #4]
 810670a:	2201      	movs	r2, #1
 810670c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	2201      	movs	r2, #1
 8106714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	2201      	movs	r2, #1
 810671c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	2201      	movs	r2, #1
 8106724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	2201      	movs	r2, #1
 810672c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	2201      	movs	r2, #1
 8106734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2201      	movs	r2, #1
 810673c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	2201      	movs	r2, #1
 8106744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	2201      	movs	r2, #1
 810674c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	2201      	movs	r2, #1
 8106754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106758:	2300      	movs	r3, #0
}
 810675a:	4618      	mov	r0, r3
 810675c:	3708      	adds	r7, #8
 810675e:	46bd      	mov	sp, r7
 8106760:	bd80      	pop	{r7, pc}
	...

08106764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106764:	b480      	push	{r7}
 8106766:	b085      	sub	sp, #20
 8106768:	af00      	add	r7, sp, #0
 810676a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106772:	b2db      	uxtb	r3, r3
 8106774:	2b01      	cmp	r3, #1
 8106776:	d001      	beq.n	810677c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106778:	2301      	movs	r3, #1
 810677a:	e054      	b.n	8106826 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	2202      	movs	r2, #2
 8106780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	681b      	ldr	r3, [r3, #0]
 8106788:	68da      	ldr	r2, [r3, #12]
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	f042 0201 	orr.w	r2, r2, #1
 8106792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106794:	687b      	ldr	r3, [r7, #4]
 8106796:	681b      	ldr	r3, [r3, #0]
 8106798:	4a26      	ldr	r2, [pc, #152]	@ (8106834 <HAL_TIM_Base_Start_IT+0xd0>)
 810679a:	4293      	cmp	r3, r2
 810679c:	d022      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 810679e:	687b      	ldr	r3, [r7, #4]
 81067a0:	681b      	ldr	r3, [r3, #0]
 81067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81067a6:	d01d      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	681b      	ldr	r3, [r3, #0]
 81067ac:	4a22      	ldr	r2, [pc, #136]	@ (8106838 <HAL_TIM_Base_Start_IT+0xd4>)
 81067ae:	4293      	cmp	r3, r2
 81067b0:	d018      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	681b      	ldr	r3, [r3, #0]
 81067b6:	4a21      	ldr	r2, [pc, #132]	@ (810683c <HAL_TIM_Base_Start_IT+0xd8>)
 81067b8:	4293      	cmp	r3, r2
 81067ba:	d013      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 81067bc:	687b      	ldr	r3, [r7, #4]
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	4a1f      	ldr	r2, [pc, #124]	@ (8106840 <HAL_TIM_Base_Start_IT+0xdc>)
 81067c2:	4293      	cmp	r3, r2
 81067c4:	d00e      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	681b      	ldr	r3, [r3, #0]
 81067ca:	4a1e      	ldr	r2, [pc, #120]	@ (8106844 <HAL_TIM_Base_Start_IT+0xe0>)
 81067cc:	4293      	cmp	r3, r2
 81067ce:	d009      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 81067d0:	687b      	ldr	r3, [r7, #4]
 81067d2:	681b      	ldr	r3, [r3, #0]
 81067d4:	4a1c      	ldr	r2, [pc, #112]	@ (8106848 <HAL_TIM_Base_Start_IT+0xe4>)
 81067d6:	4293      	cmp	r3, r2
 81067d8:	d004      	beq.n	81067e4 <HAL_TIM_Base_Start_IT+0x80>
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	681b      	ldr	r3, [r3, #0]
 81067de:	4a1b      	ldr	r2, [pc, #108]	@ (810684c <HAL_TIM_Base_Start_IT+0xe8>)
 81067e0:	4293      	cmp	r3, r2
 81067e2:	d115      	bne.n	8106810 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	681b      	ldr	r3, [r3, #0]
 81067e8:	689a      	ldr	r2, [r3, #8]
 81067ea:	4b19      	ldr	r3, [pc, #100]	@ (8106850 <HAL_TIM_Base_Start_IT+0xec>)
 81067ec:	4013      	ands	r3, r2
 81067ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81067f0:	68fb      	ldr	r3, [r7, #12]
 81067f2:	2b06      	cmp	r3, #6
 81067f4:	d015      	beq.n	8106822 <HAL_TIM_Base_Start_IT+0xbe>
 81067f6:	68fb      	ldr	r3, [r7, #12]
 81067f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81067fc:	d011      	beq.n	8106822 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	681b      	ldr	r3, [r3, #0]
 8106802:	681a      	ldr	r2, [r3, #0]
 8106804:	687b      	ldr	r3, [r7, #4]
 8106806:	681b      	ldr	r3, [r3, #0]
 8106808:	f042 0201 	orr.w	r2, r2, #1
 810680c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810680e:	e008      	b.n	8106822 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	681b      	ldr	r3, [r3, #0]
 8106814:	681a      	ldr	r2, [r3, #0]
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	681b      	ldr	r3, [r3, #0]
 810681a:	f042 0201 	orr.w	r2, r2, #1
 810681e:	601a      	str	r2, [r3, #0]
 8106820:	e000      	b.n	8106824 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106824:	2300      	movs	r3, #0
}
 8106826:	4618      	mov	r0, r3
 8106828:	3714      	adds	r7, #20
 810682a:	46bd      	mov	sp, r7
 810682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106830:	4770      	bx	lr
 8106832:	bf00      	nop
 8106834:	40010000 	.word	0x40010000
 8106838:	40000400 	.word	0x40000400
 810683c:	40000800 	.word	0x40000800
 8106840:	40000c00 	.word	0x40000c00
 8106844:	40010400 	.word	0x40010400
 8106848:	40001800 	.word	0x40001800
 810684c:	40014000 	.word	0x40014000
 8106850:	00010007 	.word	0x00010007

08106854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106854:	b580      	push	{r7, lr}
 8106856:	b082      	sub	sp, #8
 8106858:	af00      	add	r7, sp, #0
 810685a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	2b00      	cmp	r3, #0
 8106860:	d101      	bne.n	8106866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106862:	2301      	movs	r3, #1
 8106864:	e049      	b.n	81068fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810686c:	b2db      	uxtb	r3, r3
 810686e:	2b00      	cmp	r3, #0
 8106870:	d106      	bne.n	8106880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	2200      	movs	r2, #0
 8106876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810687a:	6878      	ldr	r0, [r7, #4]
 810687c:	f000 f841 	bl	8106902 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	2202      	movs	r2, #2
 8106884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	681a      	ldr	r2, [r3, #0]
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	3304      	adds	r3, #4
 8106890:	4619      	mov	r1, r3
 8106892:	4610      	mov	r0, r2
 8106894:	f001 f858 	bl	8107948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	2201      	movs	r2, #1
 810689c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	2201      	movs	r2, #1
 81068a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	2201      	movs	r2, #1
 81068ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	2201      	movs	r2, #1
 81068b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81068b8:	687b      	ldr	r3, [r7, #4]
 81068ba:	2201      	movs	r2, #1
 81068bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	2201      	movs	r2, #1
 81068c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81068c8:	687b      	ldr	r3, [r7, #4]
 81068ca:	2201      	movs	r2, #1
 81068cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	2201      	movs	r2, #1
 81068d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	2201      	movs	r2, #1
 81068dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	2201      	movs	r2, #1
 81068e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81068e8:	687b      	ldr	r3, [r7, #4]
 81068ea:	2201      	movs	r2, #1
 81068ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	2201      	movs	r2, #1
 81068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 81068f8:	2300      	movs	r3, #0
}
 81068fa:	4618      	mov	r0, r3
 81068fc:	3708      	adds	r7, #8
 81068fe:	46bd      	mov	sp, r7
 8106900:	bd80      	pop	{r7, pc}

08106902 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106902:	b480      	push	{r7}
 8106904:	b083      	sub	sp, #12
 8106906:	af00      	add	r7, sp, #0
 8106908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810690a:	bf00      	nop
 810690c:	370c      	adds	r7, #12
 810690e:	46bd      	mov	sp, r7
 8106910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106914:	4770      	bx	lr
	...

08106918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106918:	b580      	push	{r7, lr}
 810691a:	b084      	sub	sp, #16
 810691c:	af00      	add	r7, sp, #0
 810691e:	6078      	str	r0, [r7, #4]
 8106920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106922:	683b      	ldr	r3, [r7, #0]
 8106924:	2b00      	cmp	r3, #0
 8106926:	d109      	bne.n	810693c <HAL_TIM_PWM_Start+0x24>
 8106928:	687b      	ldr	r3, [r7, #4]
 810692a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 810692e:	b2db      	uxtb	r3, r3
 8106930:	2b01      	cmp	r3, #1
 8106932:	bf14      	ite	ne
 8106934:	2301      	movne	r3, #1
 8106936:	2300      	moveq	r3, #0
 8106938:	b2db      	uxtb	r3, r3
 810693a:	e03c      	b.n	81069b6 <HAL_TIM_PWM_Start+0x9e>
 810693c:	683b      	ldr	r3, [r7, #0]
 810693e:	2b04      	cmp	r3, #4
 8106940:	d109      	bne.n	8106956 <HAL_TIM_PWM_Start+0x3e>
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106948:	b2db      	uxtb	r3, r3
 810694a:	2b01      	cmp	r3, #1
 810694c:	bf14      	ite	ne
 810694e:	2301      	movne	r3, #1
 8106950:	2300      	moveq	r3, #0
 8106952:	b2db      	uxtb	r3, r3
 8106954:	e02f      	b.n	81069b6 <HAL_TIM_PWM_Start+0x9e>
 8106956:	683b      	ldr	r3, [r7, #0]
 8106958:	2b08      	cmp	r3, #8
 810695a:	d109      	bne.n	8106970 <HAL_TIM_PWM_Start+0x58>
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106962:	b2db      	uxtb	r3, r3
 8106964:	2b01      	cmp	r3, #1
 8106966:	bf14      	ite	ne
 8106968:	2301      	movne	r3, #1
 810696a:	2300      	moveq	r3, #0
 810696c:	b2db      	uxtb	r3, r3
 810696e:	e022      	b.n	81069b6 <HAL_TIM_PWM_Start+0x9e>
 8106970:	683b      	ldr	r3, [r7, #0]
 8106972:	2b0c      	cmp	r3, #12
 8106974:	d109      	bne.n	810698a <HAL_TIM_PWM_Start+0x72>
 8106976:	687b      	ldr	r3, [r7, #4]
 8106978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810697c:	b2db      	uxtb	r3, r3
 810697e:	2b01      	cmp	r3, #1
 8106980:	bf14      	ite	ne
 8106982:	2301      	movne	r3, #1
 8106984:	2300      	moveq	r3, #0
 8106986:	b2db      	uxtb	r3, r3
 8106988:	e015      	b.n	81069b6 <HAL_TIM_PWM_Start+0x9e>
 810698a:	683b      	ldr	r3, [r7, #0]
 810698c:	2b10      	cmp	r3, #16
 810698e:	d109      	bne.n	81069a4 <HAL_TIM_PWM_Start+0x8c>
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106996:	b2db      	uxtb	r3, r3
 8106998:	2b01      	cmp	r3, #1
 810699a:	bf14      	ite	ne
 810699c:	2301      	movne	r3, #1
 810699e:	2300      	moveq	r3, #0
 81069a0:	b2db      	uxtb	r3, r3
 81069a2:	e008      	b.n	81069b6 <HAL_TIM_PWM_Start+0x9e>
 81069a4:	687b      	ldr	r3, [r7, #4]
 81069a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 81069aa:	b2db      	uxtb	r3, r3
 81069ac:	2b01      	cmp	r3, #1
 81069ae:	bf14      	ite	ne
 81069b0:	2301      	movne	r3, #1
 81069b2:	2300      	moveq	r3, #0
 81069b4:	b2db      	uxtb	r3, r3
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d001      	beq.n	81069be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81069ba:	2301      	movs	r3, #1
 81069bc:	e0a1      	b.n	8106b02 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81069be:	683b      	ldr	r3, [r7, #0]
 81069c0:	2b00      	cmp	r3, #0
 81069c2:	d104      	bne.n	81069ce <HAL_TIM_PWM_Start+0xb6>
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	2202      	movs	r2, #2
 81069c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81069cc:	e023      	b.n	8106a16 <HAL_TIM_PWM_Start+0xfe>
 81069ce:	683b      	ldr	r3, [r7, #0]
 81069d0:	2b04      	cmp	r3, #4
 81069d2:	d104      	bne.n	81069de <HAL_TIM_PWM_Start+0xc6>
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	2202      	movs	r2, #2
 81069d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81069dc:	e01b      	b.n	8106a16 <HAL_TIM_PWM_Start+0xfe>
 81069de:	683b      	ldr	r3, [r7, #0]
 81069e0:	2b08      	cmp	r3, #8
 81069e2:	d104      	bne.n	81069ee <HAL_TIM_PWM_Start+0xd6>
 81069e4:	687b      	ldr	r3, [r7, #4]
 81069e6:	2202      	movs	r2, #2
 81069e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81069ec:	e013      	b.n	8106a16 <HAL_TIM_PWM_Start+0xfe>
 81069ee:	683b      	ldr	r3, [r7, #0]
 81069f0:	2b0c      	cmp	r3, #12
 81069f2:	d104      	bne.n	81069fe <HAL_TIM_PWM_Start+0xe6>
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	2202      	movs	r2, #2
 81069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81069fc:	e00b      	b.n	8106a16 <HAL_TIM_PWM_Start+0xfe>
 81069fe:	683b      	ldr	r3, [r7, #0]
 8106a00:	2b10      	cmp	r3, #16
 8106a02:	d104      	bne.n	8106a0e <HAL_TIM_PWM_Start+0xf6>
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	2202      	movs	r2, #2
 8106a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106a0c:	e003      	b.n	8106a16 <HAL_TIM_PWM_Start+0xfe>
 8106a0e:	687b      	ldr	r3, [r7, #4]
 8106a10:	2202      	movs	r2, #2
 8106a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106a16:	687b      	ldr	r3, [r7, #4]
 8106a18:	681b      	ldr	r3, [r3, #0]
 8106a1a:	2201      	movs	r2, #1
 8106a1c:	6839      	ldr	r1, [r7, #0]
 8106a1e:	4618      	mov	r0, r3
 8106a20:	f001 fdbe 	bl	81085a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	681b      	ldr	r3, [r3, #0]
 8106a28:	4a38      	ldr	r2, [pc, #224]	@ (8106b0c <HAL_TIM_PWM_Start+0x1f4>)
 8106a2a:	4293      	cmp	r3, r2
 8106a2c:	d013      	beq.n	8106a56 <HAL_TIM_PWM_Start+0x13e>
 8106a2e:	687b      	ldr	r3, [r7, #4]
 8106a30:	681b      	ldr	r3, [r3, #0]
 8106a32:	4a37      	ldr	r2, [pc, #220]	@ (8106b10 <HAL_TIM_PWM_Start+0x1f8>)
 8106a34:	4293      	cmp	r3, r2
 8106a36:	d00e      	beq.n	8106a56 <HAL_TIM_PWM_Start+0x13e>
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	681b      	ldr	r3, [r3, #0]
 8106a3c:	4a35      	ldr	r2, [pc, #212]	@ (8106b14 <HAL_TIM_PWM_Start+0x1fc>)
 8106a3e:	4293      	cmp	r3, r2
 8106a40:	d009      	beq.n	8106a56 <HAL_TIM_PWM_Start+0x13e>
 8106a42:	687b      	ldr	r3, [r7, #4]
 8106a44:	681b      	ldr	r3, [r3, #0]
 8106a46:	4a34      	ldr	r2, [pc, #208]	@ (8106b18 <HAL_TIM_PWM_Start+0x200>)
 8106a48:	4293      	cmp	r3, r2
 8106a4a:	d004      	beq.n	8106a56 <HAL_TIM_PWM_Start+0x13e>
 8106a4c:	687b      	ldr	r3, [r7, #4]
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	4a32      	ldr	r2, [pc, #200]	@ (8106b1c <HAL_TIM_PWM_Start+0x204>)
 8106a52:	4293      	cmp	r3, r2
 8106a54:	d101      	bne.n	8106a5a <HAL_TIM_PWM_Start+0x142>
 8106a56:	2301      	movs	r3, #1
 8106a58:	e000      	b.n	8106a5c <HAL_TIM_PWM_Start+0x144>
 8106a5a:	2300      	movs	r3, #0
 8106a5c:	2b00      	cmp	r3, #0
 8106a5e:	d007      	beq.n	8106a70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	681b      	ldr	r3, [r3, #0]
 8106a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8106a66:	687b      	ldr	r3, [r7, #4]
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8106a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	681b      	ldr	r3, [r3, #0]
 8106a74:	4a25      	ldr	r2, [pc, #148]	@ (8106b0c <HAL_TIM_PWM_Start+0x1f4>)
 8106a76:	4293      	cmp	r3, r2
 8106a78:	d022      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	681b      	ldr	r3, [r3, #0]
 8106a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106a82:	d01d      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106a84:	687b      	ldr	r3, [r7, #4]
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	4a25      	ldr	r2, [pc, #148]	@ (8106b20 <HAL_TIM_PWM_Start+0x208>)
 8106a8a:	4293      	cmp	r3, r2
 8106a8c:	d018      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	4a24      	ldr	r2, [pc, #144]	@ (8106b24 <HAL_TIM_PWM_Start+0x20c>)
 8106a94:	4293      	cmp	r3, r2
 8106a96:	d013      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106a98:	687b      	ldr	r3, [r7, #4]
 8106a9a:	681b      	ldr	r3, [r3, #0]
 8106a9c:	4a22      	ldr	r2, [pc, #136]	@ (8106b28 <HAL_TIM_PWM_Start+0x210>)
 8106a9e:	4293      	cmp	r3, r2
 8106aa0:	d00e      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	681b      	ldr	r3, [r3, #0]
 8106aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8106b10 <HAL_TIM_PWM_Start+0x1f8>)
 8106aa8:	4293      	cmp	r3, r2
 8106aaa:	d009      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	681b      	ldr	r3, [r3, #0]
 8106ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8106b2c <HAL_TIM_PWM_Start+0x214>)
 8106ab2:	4293      	cmp	r3, r2
 8106ab4:	d004      	beq.n	8106ac0 <HAL_TIM_PWM_Start+0x1a8>
 8106ab6:	687b      	ldr	r3, [r7, #4]
 8106ab8:	681b      	ldr	r3, [r3, #0]
 8106aba:	4a16      	ldr	r2, [pc, #88]	@ (8106b14 <HAL_TIM_PWM_Start+0x1fc>)
 8106abc:	4293      	cmp	r3, r2
 8106abe:	d115      	bne.n	8106aec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106ac0:	687b      	ldr	r3, [r7, #4]
 8106ac2:	681b      	ldr	r3, [r3, #0]
 8106ac4:	689a      	ldr	r2, [r3, #8]
 8106ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8106b30 <HAL_TIM_PWM_Start+0x218>)
 8106ac8:	4013      	ands	r3, r2
 8106aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106acc:	68fb      	ldr	r3, [r7, #12]
 8106ace:	2b06      	cmp	r3, #6
 8106ad0:	d015      	beq.n	8106afe <HAL_TIM_PWM_Start+0x1e6>
 8106ad2:	68fb      	ldr	r3, [r7, #12]
 8106ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106ad8:	d011      	beq.n	8106afe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	681b      	ldr	r3, [r3, #0]
 8106ade:	681a      	ldr	r2, [r3, #0]
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	681b      	ldr	r3, [r3, #0]
 8106ae4:	f042 0201 	orr.w	r2, r2, #1
 8106ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106aea:	e008      	b.n	8106afe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	681a      	ldr	r2, [r3, #0]
 8106af2:	687b      	ldr	r3, [r7, #4]
 8106af4:	681b      	ldr	r3, [r3, #0]
 8106af6:	f042 0201 	orr.w	r2, r2, #1
 8106afa:	601a      	str	r2, [r3, #0]
 8106afc:	e000      	b.n	8106b00 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106b00:	2300      	movs	r3, #0
}
 8106b02:	4618      	mov	r0, r3
 8106b04:	3710      	adds	r7, #16
 8106b06:	46bd      	mov	sp, r7
 8106b08:	bd80      	pop	{r7, pc}
 8106b0a:	bf00      	nop
 8106b0c:	40010000 	.word	0x40010000
 8106b10:	40010400 	.word	0x40010400
 8106b14:	40014000 	.word	0x40014000
 8106b18:	40014400 	.word	0x40014400
 8106b1c:	40014800 	.word	0x40014800
 8106b20:	40000400 	.word	0x40000400
 8106b24:	40000800 	.word	0x40000800
 8106b28:	40000c00 	.word	0x40000c00
 8106b2c:	40001800 	.word	0x40001800
 8106b30:	00010007 	.word	0x00010007

08106b34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106b34:	b580      	push	{r7, lr}
 8106b36:	b082      	sub	sp, #8
 8106b38:	af00      	add	r7, sp, #0
 8106b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106b3c:	687b      	ldr	r3, [r7, #4]
 8106b3e:	2b00      	cmp	r3, #0
 8106b40:	d101      	bne.n	8106b46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8106b42:	2301      	movs	r3, #1
 8106b44:	e049      	b.n	8106bda <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106b46:	687b      	ldr	r3, [r7, #4]
 8106b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8106b4c:	b2db      	uxtb	r3, r3
 8106b4e:	2b00      	cmp	r3, #0
 8106b50:	d106      	bne.n	8106b60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	2200      	movs	r2, #0
 8106b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8106b5a:	6878      	ldr	r0, [r7, #4]
 8106b5c:	f000 f841 	bl	8106be2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	2202      	movs	r2, #2
 8106b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	681a      	ldr	r2, [r3, #0]
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	3304      	adds	r3, #4
 8106b70:	4619      	mov	r1, r3
 8106b72:	4610      	mov	r0, r2
 8106b74:	f000 fee8 	bl	8107948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	2201      	movs	r2, #1
 8106b7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	2201      	movs	r2, #1
 8106b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	2201      	movs	r2, #1
 8106b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	2201      	movs	r2, #1
 8106b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	2201      	movs	r2, #1
 8106b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106ba0:	687b      	ldr	r3, [r7, #4]
 8106ba2:	2201      	movs	r2, #1
 8106ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	2201      	movs	r2, #1
 8106bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	2201      	movs	r2, #1
 8106bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106bb8:	687b      	ldr	r3, [r7, #4]
 8106bba:	2201      	movs	r2, #1
 8106bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106bc0:	687b      	ldr	r3, [r7, #4]
 8106bc2:	2201      	movs	r2, #1
 8106bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106bc8:	687b      	ldr	r3, [r7, #4]
 8106bca:	2201      	movs	r2, #1
 8106bcc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	2201      	movs	r2, #1
 8106bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8106bd8:	2300      	movs	r3, #0
}
 8106bda:	4618      	mov	r0, r3
 8106bdc:	3708      	adds	r7, #8
 8106bde:	46bd      	mov	sp, r7
 8106be0:	bd80      	pop	{r7, pc}

08106be2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8106be2:	b480      	push	{r7}
 8106be4:	b083      	sub	sp, #12
 8106be6:	af00      	add	r7, sp, #0
 8106be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106bea:	bf00      	nop
 8106bec:	370c      	adds	r7, #12
 8106bee:	46bd      	mov	sp, r7
 8106bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bf4:	4770      	bx	lr
	...

08106bf8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106bf8:	b580      	push	{r7, lr}
 8106bfa:	b084      	sub	sp, #16
 8106bfc:	af00      	add	r7, sp, #0
 8106bfe:	6078      	str	r0, [r7, #4]
 8106c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106c02:	683b      	ldr	r3, [r7, #0]
 8106c04:	2b00      	cmp	r3, #0
 8106c06:	d104      	bne.n	8106c12 <HAL_TIM_IC_Start+0x1a>
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106c0e:	b2db      	uxtb	r3, r3
 8106c10:	e023      	b.n	8106c5a <HAL_TIM_IC_Start+0x62>
 8106c12:	683b      	ldr	r3, [r7, #0]
 8106c14:	2b04      	cmp	r3, #4
 8106c16:	d104      	bne.n	8106c22 <HAL_TIM_IC_Start+0x2a>
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106c1e:	b2db      	uxtb	r3, r3
 8106c20:	e01b      	b.n	8106c5a <HAL_TIM_IC_Start+0x62>
 8106c22:	683b      	ldr	r3, [r7, #0]
 8106c24:	2b08      	cmp	r3, #8
 8106c26:	d104      	bne.n	8106c32 <HAL_TIM_IC_Start+0x3a>
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106c2e:	b2db      	uxtb	r3, r3
 8106c30:	e013      	b.n	8106c5a <HAL_TIM_IC_Start+0x62>
 8106c32:	683b      	ldr	r3, [r7, #0]
 8106c34:	2b0c      	cmp	r3, #12
 8106c36:	d104      	bne.n	8106c42 <HAL_TIM_IC_Start+0x4a>
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106c3e:	b2db      	uxtb	r3, r3
 8106c40:	e00b      	b.n	8106c5a <HAL_TIM_IC_Start+0x62>
 8106c42:	683b      	ldr	r3, [r7, #0]
 8106c44:	2b10      	cmp	r3, #16
 8106c46:	d104      	bne.n	8106c52 <HAL_TIM_IC_Start+0x5a>
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106c4e:	b2db      	uxtb	r3, r3
 8106c50:	e003      	b.n	8106c5a <HAL_TIM_IC_Start+0x62>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106c58:	b2db      	uxtb	r3, r3
 8106c5a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106c5c:	683b      	ldr	r3, [r7, #0]
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d104      	bne.n	8106c6c <HAL_TIM_IC_Start+0x74>
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106c68:	b2db      	uxtb	r3, r3
 8106c6a:	e013      	b.n	8106c94 <HAL_TIM_IC_Start+0x9c>
 8106c6c:	683b      	ldr	r3, [r7, #0]
 8106c6e:	2b04      	cmp	r3, #4
 8106c70:	d104      	bne.n	8106c7c <HAL_TIM_IC_Start+0x84>
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106c78:	b2db      	uxtb	r3, r3
 8106c7a:	e00b      	b.n	8106c94 <HAL_TIM_IC_Start+0x9c>
 8106c7c:	683b      	ldr	r3, [r7, #0]
 8106c7e:	2b08      	cmp	r3, #8
 8106c80:	d104      	bne.n	8106c8c <HAL_TIM_IC_Start+0x94>
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106c88:	b2db      	uxtb	r3, r3
 8106c8a:	e003      	b.n	8106c94 <HAL_TIM_IC_Start+0x9c>
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8106c92:	b2db      	uxtb	r3, r3
 8106c94:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106c96:	7bfb      	ldrb	r3, [r7, #15]
 8106c98:	2b01      	cmp	r3, #1
 8106c9a:	d102      	bne.n	8106ca2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106c9c:	7bbb      	ldrb	r3, [r7, #14]
 8106c9e:	2b01      	cmp	r3, #1
 8106ca0:	d001      	beq.n	8106ca6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8106ca2:	2301      	movs	r3, #1
 8106ca4:	e097      	b.n	8106dd6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106ca6:	683b      	ldr	r3, [r7, #0]
 8106ca8:	2b00      	cmp	r3, #0
 8106caa:	d104      	bne.n	8106cb6 <HAL_TIM_IC_Start+0xbe>
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	2202      	movs	r2, #2
 8106cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106cb4:	e023      	b.n	8106cfe <HAL_TIM_IC_Start+0x106>
 8106cb6:	683b      	ldr	r3, [r7, #0]
 8106cb8:	2b04      	cmp	r3, #4
 8106cba:	d104      	bne.n	8106cc6 <HAL_TIM_IC_Start+0xce>
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	2202      	movs	r2, #2
 8106cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106cc4:	e01b      	b.n	8106cfe <HAL_TIM_IC_Start+0x106>
 8106cc6:	683b      	ldr	r3, [r7, #0]
 8106cc8:	2b08      	cmp	r3, #8
 8106cca:	d104      	bne.n	8106cd6 <HAL_TIM_IC_Start+0xde>
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	2202      	movs	r2, #2
 8106cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106cd4:	e013      	b.n	8106cfe <HAL_TIM_IC_Start+0x106>
 8106cd6:	683b      	ldr	r3, [r7, #0]
 8106cd8:	2b0c      	cmp	r3, #12
 8106cda:	d104      	bne.n	8106ce6 <HAL_TIM_IC_Start+0xee>
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	2202      	movs	r2, #2
 8106ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106ce4:	e00b      	b.n	8106cfe <HAL_TIM_IC_Start+0x106>
 8106ce6:	683b      	ldr	r3, [r7, #0]
 8106ce8:	2b10      	cmp	r3, #16
 8106cea:	d104      	bne.n	8106cf6 <HAL_TIM_IC_Start+0xfe>
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	2202      	movs	r2, #2
 8106cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106cf4:	e003      	b.n	8106cfe <HAL_TIM_IC_Start+0x106>
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	2202      	movs	r2, #2
 8106cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106cfe:	683b      	ldr	r3, [r7, #0]
 8106d00:	2b00      	cmp	r3, #0
 8106d02:	d104      	bne.n	8106d0e <HAL_TIM_IC_Start+0x116>
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	2202      	movs	r2, #2
 8106d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106d0c:	e013      	b.n	8106d36 <HAL_TIM_IC_Start+0x13e>
 8106d0e:	683b      	ldr	r3, [r7, #0]
 8106d10:	2b04      	cmp	r3, #4
 8106d12:	d104      	bne.n	8106d1e <HAL_TIM_IC_Start+0x126>
 8106d14:	687b      	ldr	r3, [r7, #4]
 8106d16:	2202      	movs	r2, #2
 8106d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106d1c:	e00b      	b.n	8106d36 <HAL_TIM_IC_Start+0x13e>
 8106d1e:	683b      	ldr	r3, [r7, #0]
 8106d20:	2b08      	cmp	r3, #8
 8106d22:	d104      	bne.n	8106d2e <HAL_TIM_IC_Start+0x136>
 8106d24:	687b      	ldr	r3, [r7, #4]
 8106d26:	2202      	movs	r2, #2
 8106d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106d2c:	e003      	b.n	8106d36 <HAL_TIM_IC_Start+0x13e>
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	2202      	movs	r2, #2
 8106d32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	2201      	movs	r2, #1
 8106d3c:	6839      	ldr	r1, [r7, #0]
 8106d3e:	4618      	mov	r0, r3
 8106d40:	f001 fc2e 	bl	81085a0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	4a25      	ldr	r2, [pc, #148]	@ (8106de0 <HAL_TIM_IC_Start+0x1e8>)
 8106d4a:	4293      	cmp	r3, r2
 8106d4c:	d022      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	681b      	ldr	r3, [r3, #0]
 8106d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106d56:	d01d      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	4a21      	ldr	r2, [pc, #132]	@ (8106de4 <HAL_TIM_IC_Start+0x1ec>)
 8106d5e:	4293      	cmp	r3, r2
 8106d60:	d018      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	4a20      	ldr	r2, [pc, #128]	@ (8106de8 <HAL_TIM_IC_Start+0x1f0>)
 8106d68:	4293      	cmp	r3, r2
 8106d6a:	d013      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d6c:	687b      	ldr	r3, [r7, #4]
 8106d6e:	681b      	ldr	r3, [r3, #0]
 8106d70:	4a1e      	ldr	r2, [pc, #120]	@ (8106dec <HAL_TIM_IC_Start+0x1f4>)
 8106d72:	4293      	cmp	r3, r2
 8106d74:	d00e      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d76:	687b      	ldr	r3, [r7, #4]
 8106d78:	681b      	ldr	r3, [r3, #0]
 8106d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8106df0 <HAL_TIM_IC_Start+0x1f8>)
 8106d7c:	4293      	cmp	r3, r2
 8106d7e:	d009      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d80:	687b      	ldr	r3, [r7, #4]
 8106d82:	681b      	ldr	r3, [r3, #0]
 8106d84:	4a1b      	ldr	r2, [pc, #108]	@ (8106df4 <HAL_TIM_IC_Start+0x1fc>)
 8106d86:	4293      	cmp	r3, r2
 8106d88:	d004      	beq.n	8106d94 <HAL_TIM_IC_Start+0x19c>
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8106df8 <HAL_TIM_IC_Start+0x200>)
 8106d90:	4293      	cmp	r3, r2
 8106d92:	d115      	bne.n	8106dc0 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106d94:	687b      	ldr	r3, [r7, #4]
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	689a      	ldr	r2, [r3, #8]
 8106d9a:	4b18      	ldr	r3, [pc, #96]	@ (8106dfc <HAL_TIM_IC_Start+0x204>)
 8106d9c:	4013      	ands	r3, r2
 8106d9e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106da0:	68bb      	ldr	r3, [r7, #8]
 8106da2:	2b06      	cmp	r3, #6
 8106da4:	d015      	beq.n	8106dd2 <HAL_TIM_IC_Start+0x1da>
 8106da6:	68bb      	ldr	r3, [r7, #8]
 8106da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106dac:	d011      	beq.n	8106dd2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8106dae:	687b      	ldr	r3, [r7, #4]
 8106db0:	681b      	ldr	r3, [r3, #0]
 8106db2:	681a      	ldr	r2, [r3, #0]
 8106db4:	687b      	ldr	r3, [r7, #4]
 8106db6:	681b      	ldr	r3, [r3, #0]
 8106db8:	f042 0201 	orr.w	r2, r2, #1
 8106dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106dbe:	e008      	b.n	8106dd2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	681b      	ldr	r3, [r3, #0]
 8106dc4:	681a      	ldr	r2, [r3, #0]
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	681b      	ldr	r3, [r3, #0]
 8106dca:	f042 0201 	orr.w	r2, r2, #1
 8106dce:	601a      	str	r2, [r3, #0]
 8106dd0:	e000      	b.n	8106dd4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106dd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106dd4:	2300      	movs	r3, #0
}
 8106dd6:	4618      	mov	r0, r3
 8106dd8:	3710      	adds	r7, #16
 8106dda:	46bd      	mov	sp, r7
 8106ddc:	bd80      	pop	{r7, pc}
 8106dde:	bf00      	nop
 8106de0:	40010000 	.word	0x40010000
 8106de4:	40000400 	.word	0x40000400
 8106de8:	40000800 	.word	0x40000800
 8106dec:	40000c00 	.word	0x40000c00
 8106df0:	40010400 	.word	0x40010400
 8106df4:	40001800 	.word	0x40001800
 8106df8:	40014000 	.word	0x40014000
 8106dfc:	00010007 	.word	0x00010007

08106e00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106e00:	b580      	push	{r7, lr}
 8106e02:	b084      	sub	sp, #16
 8106e04:	af00      	add	r7, sp, #0
 8106e06:	6078      	str	r0, [r7, #4]
 8106e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8106e0a:	2300      	movs	r3, #0
 8106e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106e0e:	683b      	ldr	r3, [r7, #0]
 8106e10:	2b00      	cmp	r3, #0
 8106e12:	d104      	bne.n	8106e1e <HAL_TIM_IC_Start_IT+0x1e>
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8106e1a:	b2db      	uxtb	r3, r3
 8106e1c:	e023      	b.n	8106e66 <HAL_TIM_IC_Start_IT+0x66>
 8106e1e:	683b      	ldr	r3, [r7, #0]
 8106e20:	2b04      	cmp	r3, #4
 8106e22:	d104      	bne.n	8106e2e <HAL_TIM_IC_Start_IT+0x2e>
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8106e2a:	b2db      	uxtb	r3, r3
 8106e2c:	e01b      	b.n	8106e66 <HAL_TIM_IC_Start_IT+0x66>
 8106e2e:	683b      	ldr	r3, [r7, #0]
 8106e30:	2b08      	cmp	r3, #8
 8106e32:	d104      	bne.n	8106e3e <HAL_TIM_IC_Start_IT+0x3e>
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8106e3a:	b2db      	uxtb	r3, r3
 8106e3c:	e013      	b.n	8106e66 <HAL_TIM_IC_Start_IT+0x66>
 8106e3e:	683b      	ldr	r3, [r7, #0]
 8106e40:	2b0c      	cmp	r3, #12
 8106e42:	d104      	bne.n	8106e4e <HAL_TIM_IC_Start_IT+0x4e>
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8106e4a:	b2db      	uxtb	r3, r3
 8106e4c:	e00b      	b.n	8106e66 <HAL_TIM_IC_Start_IT+0x66>
 8106e4e:	683b      	ldr	r3, [r7, #0]
 8106e50:	2b10      	cmp	r3, #16
 8106e52:	d104      	bne.n	8106e5e <HAL_TIM_IC_Start_IT+0x5e>
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8106e5a:	b2db      	uxtb	r3, r3
 8106e5c:	e003      	b.n	8106e66 <HAL_TIM_IC_Start_IT+0x66>
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8106e64:	b2db      	uxtb	r3, r3
 8106e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106e68:	683b      	ldr	r3, [r7, #0]
 8106e6a:	2b00      	cmp	r3, #0
 8106e6c:	d104      	bne.n	8106e78 <HAL_TIM_IC_Start_IT+0x78>
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106e74:	b2db      	uxtb	r3, r3
 8106e76:	e013      	b.n	8106ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8106e78:	683b      	ldr	r3, [r7, #0]
 8106e7a:	2b04      	cmp	r3, #4
 8106e7c:	d104      	bne.n	8106e88 <HAL_TIM_IC_Start_IT+0x88>
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106e84:	b2db      	uxtb	r3, r3
 8106e86:	e00b      	b.n	8106ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8106e88:	683b      	ldr	r3, [r7, #0]
 8106e8a:	2b08      	cmp	r3, #8
 8106e8c:	d104      	bne.n	8106e98 <HAL_TIM_IC_Start_IT+0x98>
 8106e8e:	687b      	ldr	r3, [r7, #4]
 8106e90:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106e94:	b2db      	uxtb	r3, r3
 8106e96:	e003      	b.n	8106ea0 <HAL_TIM_IC_Start_IT+0xa0>
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8106e9e:	b2db      	uxtb	r3, r3
 8106ea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106ea2:	7bbb      	ldrb	r3, [r7, #14]
 8106ea4:	2b01      	cmp	r3, #1
 8106ea6:	d102      	bne.n	8106eae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106ea8:	7b7b      	ldrb	r3, [r7, #13]
 8106eaa:	2b01      	cmp	r3, #1
 8106eac:	d001      	beq.n	8106eb2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8106eae:	2301      	movs	r3, #1
 8106eb0:	e0e2      	b.n	8107078 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106eb2:	683b      	ldr	r3, [r7, #0]
 8106eb4:	2b00      	cmp	r3, #0
 8106eb6:	d104      	bne.n	8106ec2 <HAL_TIM_IC_Start_IT+0xc2>
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	2202      	movs	r2, #2
 8106ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8106ec0:	e023      	b.n	8106f0a <HAL_TIM_IC_Start_IT+0x10a>
 8106ec2:	683b      	ldr	r3, [r7, #0]
 8106ec4:	2b04      	cmp	r3, #4
 8106ec6:	d104      	bne.n	8106ed2 <HAL_TIM_IC_Start_IT+0xd2>
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	2202      	movs	r2, #2
 8106ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8106ed0:	e01b      	b.n	8106f0a <HAL_TIM_IC_Start_IT+0x10a>
 8106ed2:	683b      	ldr	r3, [r7, #0]
 8106ed4:	2b08      	cmp	r3, #8
 8106ed6:	d104      	bne.n	8106ee2 <HAL_TIM_IC_Start_IT+0xe2>
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	2202      	movs	r2, #2
 8106edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8106ee0:	e013      	b.n	8106f0a <HAL_TIM_IC_Start_IT+0x10a>
 8106ee2:	683b      	ldr	r3, [r7, #0]
 8106ee4:	2b0c      	cmp	r3, #12
 8106ee6:	d104      	bne.n	8106ef2 <HAL_TIM_IC_Start_IT+0xf2>
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	2202      	movs	r2, #2
 8106eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8106ef0:	e00b      	b.n	8106f0a <HAL_TIM_IC_Start_IT+0x10a>
 8106ef2:	683b      	ldr	r3, [r7, #0]
 8106ef4:	2b10      	cmp	r3, #16
 8106ef6:	d104      	bne.n	8106f02 <HAL_TIM_IC_Start_IT+0x102>
 8106ef8:	687b      	ldr	r3, [r7, #4]
 8106efa:	2202      	movs	r2, #2
 8106efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8106f00:	e003      	b.n	8106f0a <HAL_TIM_IC_Start_IT+0x10a>
 8106f02:	687b      	ldr	r3, [r7, #4]
 8106f04:	2202      	movs	r2, #2
 8106f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106f0a:	683b      	ldr	r3, [r7, #0]
 8106f0c:	2b00      	cmp	r3, #0
 8106f0e:	d104      	bne.n	8106f1a <HAL_TIM_IC_Start_IT+0x11a>
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	2202      	movs	r2, #2
 8106f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106f18:	e013      	b.n	8106f42 <HAL_TIM_IC_Start_IT+0x142>
 8106f1a:	683b      	ldr	r3, [r7, #0]
 8106f1c:	2b04      	cmp	r3, #4
 8106f1e:	d104      	bne.n	8106f2a <HAL_TIM_IC_Start_IT+0x12a>
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	2202      	movs	r2, #2
 8106f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106f28:	e00b      	b.n	8106f42 <HAL_TIM_IC_Start_IT+0x142>
 8106f2a:	683b      	ldr	r3, [r7, #0]
 8106f2c:	2b08      	cmp	r3, #8
 8106f2e:	d104      	bne.n	8106f3a <HAL_TIM_IC_Start_IT+0x13a>
 8106f30:	687b      	ldr	r3, [r7, #4]
 8106f32:	2202      	movs	r2, #2
 8106f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8106f38:	e003      	b.n	8106f42 <HAL_TIM_IC_Start_IT+0x142>
 8106f3a:	687b      	ldr	r3, [r7, #4]
 8106f3c:	2202      	movs	r2, #2
 8106f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8106f42:	683b      	ldr	r3, [r7, #0]
 8106f44:	2b0c      	cmp	r3, #12
 8106f46:	d841      	bhi.n	8106fcc <HAL_TIM_IC_Start_IT+0x1cc>
 8106f48:	a201      	add	r2, pc, #4	@ (adr r2, 8106f50 <HAL_TIM_IC_Start_IT+0x150>)
 8106f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f4e:	bf00      	nop
 8106f50:	08106f85 	.word	0x08106f85
 8106f54:	08106fcd 	.word	0x08106fcd
 8106f58:	08106fcd 	.word	0x08106fcd
 8106f5c:	08106fcd 	.word	0x08106fcd
 8106f60:	08106f97 	.word	0x08106f97
 8106f64:	08106fcd 	.word	0x08106fcd
 8106f68:	08106fcd 	.word	0x08106fcd
 8106f6c:	08106fcd 	.word	0x08106fcd
 8106f70:	08106fa9 	.word	0x08106fa9
 8106f74:	08106fcd 	.word	0x08106fcd
 8106f78:	08106fcd 	.word	0x08106fcd
 8106f7c:	08106fcd 	.word	0x08106fcd
 8106f80:	08106fbb 	.word	0x08106fbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	68da      	ldr	r2, [r3, #12]
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	681b      	ldr	r3, [r3, #0]
 8106f8e:	f042 0202 	orr.w	r2, r2, #2
 8106f92:	60da      	str	r2, [r3, #12]
      break;
 8106f94:	e01d      	b.n	8106fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	681b      	ldr	r3, [r3, #0]
 8106f9a:	68da      	ldr	r2, [r3, #12]
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	f042 0204 	orr.w	r2, r2, #4
 8106fa4:	60da      	str	r2, [r3, #12]
      break;
 8106fa6:	e014      	b.n	8106fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	68da      	ldr	r2, [r3, #12]
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	681b      	ldr	r3, [r3, #0]
 8106fb2:	f042 0208 	orr.w	r2, r2, #8
 8106fb6:	60da      	str	r2, [r3, #12]
      break;
 8106fb8:	e00b      	b.n	8106fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	68da      	ldr	r2, [r3, #12]
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	681b      	ldr	r3, [r3, #0]
 8106fc4:	f042 0210 	orr.w	r2, r2, #16
 8106fc8:	60da      	str	r2, [r3, #12]
      break;
 8106fca:	e002      	b.n	8106fd2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8106fcc:	2301      	movs	r3, #1
 8106fce:	73fb      	strb	r3, [r7, #15]
      break;
 8106fd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8106fd2:	7bfb      	ldrb	r3, [r7, #15]
 8106fd4:	2b00      	cmp	r3, #0
 8106fd6:	d14e      	bne.n	8107076 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	2201      	movs	r2, #1
 8106fde:	6839      	ldr	r1, [r7, #0]
 8106fe0:	4618      	mov	r0, r3
 8106fe2:	f001 fadd 	bl	81085a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	681b      	ldr	r3, [r3, #0]
 8106fea:	4a25      	ldr	r2, [pc, #148]	@ (8107080 <HAL_TIM_IC_Start_IT+0x280>)
 8106fec:	4293      	cmp	r3, r2
 8106fee:	d022      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 8106ff0:	687b      	ldr	r3, [r7, #4]
 8106ff2:	681b      	ldr	r3, [r3, #0]
 8106ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106ff8:	d01d      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	681b      	ldr	r3, [r3, #0]
 8106ffe:	4a21      	ldr	r2, [pc, #132]	@ (8107084 <HAL_TIM_IC_Start_IT+0x284>)
 8107000:	4293      	cmp	r3, r2
 8107002:	d018      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	4a1f      	ldr	r2, [pc, #124]	@ (8107088 <HAL_TIM_IC_Start_IT+0x288>)
 810700a:	4293      	cmp	r3, r2
 810700c:	d013      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	681b      	ldr	r3, [r3, #0]
 8107012:	4a1e      	ldr	r2, [pc, #120]	@ (810708c <HAL_TIM_IC_Start_IT+0x28c>)
 8107014:	4293      	cmp	r3, r2
 8107016:	d00e      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 8107018:	687b      	ldr	r3, [r7, #4]
 810701a:	681b      	ldr	r3, [r3, #0]
 810701c:	4a1c      	ldr	r2, [pc, #112]	@ (8107090 <HAL_TIM_IC_Start_IT+0x290>)
 810701e:	4293      	cmp	r3, r2
 8107020:	d009      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	681b      	ldr	r3, [r3, #0]
 8107026:	4a1b      	ldr	r2, [pc, #108]	@ (8107094 <HAL_TIM_IC_Start_IT+0x294>)
 8107028:	4293      	cmp	r3, r2
 810702a:	d004      	beq.n	8107036 <HAL_TIM_IC_Start_IT+0x236>
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	681b      	ldr	r3, [r3, #0]
 8107030:	4a19      	ldr	r2, [pc, #100]	@ (8107098 <HAL_TIM_IC_Start_IT+0x298>)
 8107032:	4293      	cmp	r3, r2
 8107034:	d115      	bne.n	8107062 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	681b      	ldr	r3, [r3, #0]
 810703a:	689a      	ldr	r2, [r3, #8]
 810703c:	4b17      	ldr	r3, [pc, #92]	@ (810709c <HAL_TIM_IC_Start_IT+0x29c>)
 810703e:	4013      	ands	r3, r2
 8107040:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107042:	68bb      	ldr	r3, [r7, #8]
 8107044:	2b06      	cmp	r3, #6
 8107046:	d015      	beq.n	8107074 <HAL_TIM_IC_Start_IT+0x274>
 8107048:	68bb      	ldr	r3, [r7, #8]
 810704a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810704e:	d011      	beq.n	8107074 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	681a      	ldr	r2, [r3, #0]
 8107056:	687b      	ldr	r3, [r7, #4]
 8107058:	681b      	ldr	r3, [r3, #0]
 810705a:	f042 0201 	orr.w	r2, r2, #1
 810705e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107060:	e008      	b.n	8107074 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	681b      	ldr	r3, [r3, #0]
 8107066:	681a      	ldr	r2, [r3, #0]
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	f042 0201 	orr.w	r2, r2, #1
 8107070:	601a      	str	r2, [r3, #0]
 8107072:	e000      	b.n	8107076 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107074:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8107076:	7bfb      	ldrb	r3, [r7, #15]
}
 8107078:	4618      	mov	r0, r3
 810707a:	3710      	adds	r7, #16
 810707c:	46bd      	mov	sp, r7
 810707e:	bd80      	pop	{r7, pc}
 8107080:	40010000 	.word	0x40010000
 8107084:	40000400 	.word	0x40000400
 8107088:	40000800 	.word	0x40000800
 810708c:	40000c00 	.word	0x40000c00
 8107090:	40010400 	.word	0x40010400
 8107094:	40001800 	.word	0x40001800
 8107098:	40014000 	.word	0x40014000
 810709c:	00010007 	.word	0x00010007

081070a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81070a0:	b580      	push	{r7, lr}
 81070a2:	b084      	sub	sp, #16
 81070a4:	af00      	add	r7, sp, #0
 81070a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	681b      	ldr	r3, [r3, #0]
 81070ac:	68db      	ldr	r3, [r3, #12]
 81070ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	681b      	ldr	r3, [r3, #0]
 81070b4:	691b      	ldr	r3, [r3, #16]
 81070b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81070b8:	68bb      	ldr	r3, [r7, #8]
 81070ba:	f003 0302 	and.w	r3, r3, #2
 81070be:	2b00      	cmp	r3, #0
 81070c0:	d020      	beq.n	8107104 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 81070c2:	68fb      	ldr	r3, [r7, #12]
 81070c4:	f003 0302 	and.w	r3, r3, #2
 81070c8:	2b00      	cmp	r3, #0
 81070ca:	d01b      	beq.n	8107104 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	681b      	ldr	r3, [r3, #0]
 81070d0:	f06f 0202 	mvn.w	r2, #2
 81070d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	2201      	movs	r2, #1
 81070da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	681b      	ldr	r3, [r3, #0]
 81070e0:	699b      	ldr	r3, [r3, #24]
 81070e2:	f003 0303 	and.w	r3, r3, #3
 81070e6:	2b00      	cmp	r3, #0
 81070e8:	d003      	beq.n	81070f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81070ea:	6878      	ldr	r0, [r7, #4]
 81070ec:	f7fb fd1e 	bl	8102b2c <HAL_TIM_IC_CaptureCallback>
 81070f0:	e005      	b.n	81070fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81070f2:	6878      	ldr	r0, [r7, #4]
 81070f4:	f000 fc0a 	bl	810790c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81070f8:	6878      	ldr	r0, [r7, #4]
 81070fa:	f000 fc11 	bl	8107920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	2200      	movs	r2, #0
 8107102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8107104:	68bb      	ldr	r3, [r7, #8]
 8107106:	f003 0304 	and.w	r3, r3, #4
 810710a:	2b00      	cmp	r3, #0
 810710c:	d020      	beq.n	8107150 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 810710e:	68fb      	ldr	r3, [r7, #12]
 8107110:	f003 0304 	and.w	r3, r3, #4
 8107114:	2b00      	cmp	r3, #0
 8107116:	d01b      	beq.n	8107150 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	681b      	ldr	r3, [r3, #0]
 810711c:	f06f 0204 	mvn.w	r2, #4
 8107120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	2202      	movs	r2, #2
 8107126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	681b      	ldr	r3, [r3, #0]
 810712c:	699b      	ldr	r3, [r3, #24]
 810712e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107132:	2b00      	cmp	r3, #0
 8107134:	d003      	beq.n	810713e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107136:	6878      	ldr	r0, [r7, #4]
 8107138:	f7fb fcf8 	bl	8102b2c <HAL_TIM_IC_CaptureCallback>
 810713c:	e005      	b.n	810714a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810713e:	6878      	ldr	r0, [r7, #4]
 8107140:	f000 fbe4 	bl	810790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107144:	6878      	ldr	r0, [r7, #4]
 8107146:	f000 fbeb 	bl	8107920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	2200      	movs	r2, #0
 810714e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8107150:	68bb      	ldr	r3, [r7, #8]
 8107152:	f003 0308 	and.w	r3, r3, #8
 8107156:	2b00      	cmp	r3, #0
 8107158:	d020      	beq.n	810719c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	f003 0308 	and.w	r3, r3, #8
 8107160:	2b00      	cmp	r3, #0
 8107162:	d01b      	beq.n	810719c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8107164:	687b      	ldr	r3, [r7, #4]
 8107166:	681b      	ldr	r3, [r3, #0]
 8107168:	f06f 0208 	mvn.w	r2, #8
 810716c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	2204      	movs	r2, #4
 8107172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8107174:	687b      	ldr	r3, [r7, #4]
 8107176:	681b      	ldr	r3, [r3, #0]
 8107178:	69db      	ldr	r3, [r3, #28]
 810717a:	f003 0303 	and.w	r3, r3, #3
 810717e:	2b00      	cmp	r3, #0
 8107180:	d003      	beq.n	810718a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107182:	6878      	ldr	r0, [r7, #4]
 8107184:	f7fb fcd2 	bl	8102b2c <HAL_TIM_IC_CaptureCallback>
 8107188:	e005      	b.n	8107196 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810718a:	6878      	ldr	r0, [r7, #4]
 810718c:	f000 fbbe 	bl	810790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107190:	6878      	ldr	r0, [r7, #4]
 8107192:	f000 fbc5 	bl	8107920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107196:	687b      	ldr	r3, [r7, #4]
 8107198:	2200      	movs	r2, #0
 810719a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 810719c:	68bb      	ldr	r3, [r7, #8]
 810719e:	f003 0310 	and.w	r3, r3, #16
 81071a2:	2b00      	cmp	r3, #0
 81071a4:	d020      	beq.n	81071e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81071a6:	68fb      	ldr	r3, [r7, #12]
 81071a8:	f003 0310 	and.w	r3, r3, #16
 81071ac:	2b00      	cmp	r3, #0
 81071ae:	d01b      	beq.n	81071e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81071b0:	687b      	ldr	r3, [r7, #4]
 81071b2:	681b      	ldr	r3, [r3, #0]
 81071b4:	f06f 0210 	mvn.w	r2, #16
 81071b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	2208      	movs	r2, #8
 81071be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	681b      	ldr	r3, [r3, #0]
 81071c4:	69db      	ldr	r3, [r3, #28]
 81071c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81071ca:	2b00      	cmp	r3, #0
 81071cc:	d003      	beq.n	81071d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81071ce:	6878      	ldr	r0, [r7, #4]
 81071d0:	f7fb fcac 	bl	8102b2c <HAL_TIM_IC_CaptureCallback>
 81071d4:	e005      	b.n	81071e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81071d6:	6878      	ldr	r0, [r7, #4]
 81071d8:	f000 fb98 	bl	810790c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81071dc:	6878      	ldr	r0, [r7, #4]
 81071de:	f000 fb9f 	bl	8107920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81071e2:	687b      	ldr	r3, [r7, #4]
 81071e4:	2200      	movs	r2, #0
 81071e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 81071e8:	68bb      	ldr	r3, [r7, #8]
 81071ea:	f003 0301 	and.w	r3, r3, #1
 81071ee:	2b00      	cmp	r3, #0
 81071f0:	d00c      	beq.n	810720c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 81071f2:	68fb      	ldr	r3, [r7, #12]
 81071f4:	f003 0301 	and.w	r3, r3, #1
 81071f8:	2b00      	cmp	r3, #0
 81071fa:	d007      	beq.n	810720c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 81071fc:	687b      	ldr	r3, [r7, #4]
 81071fe:	681b      	ldr	r3, [r3, #0]
 8107200:	f06f 0201 	mvn.w	r2, #1
 8107204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8107206:	6878      	ldr	r0, [r7, #4]
 8107208:	f7fb fc66 	bl	8102ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810720c:	68bb      	ldr	r3, [r7, #8]
 810720e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107212:	2b00      	cmp	r3, #0
 8107214:	d104      	bne.n	8107220 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8107216:	68bb      	ldr	r3, [r7, #8]
 8107218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 810721c:	2b00      	cmp	r3, #0
 810721e:	d00c      	beq.n	810723a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107220:	68fb      	ldr	r3, [r7, #12]
 8107222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107226:	2b00      	cmp	r3, #0
 8107228:	d007      	beq.n	810723a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810722a:	687b      	ldr	r3, [r7, #4]
 810722c:	681b      	ldr	r3, [r3, #0]
 810722e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8107232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8107234:	6878      	ldr	r0, [r7, #4]
 8107236:	f001 fa71 	bl	810871c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810723a:	68bb      	ldr	r3, [r7, #8]
 810723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107240:	2b00      	cmp	r3, #0
 8107242:	d00c      	beq.n	810725e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107244:	68fb      	ldr	r3, [r7, #12]
 8107246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810724a:	2b00      	cmp	r3, #0
 810724c:	d007      	beq.n	810725e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810724e:	687b      	ldr	r3, [r7, #4]
 8107250:	681b      	ldr	r3, [r3, #0]
 8107252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8107256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8107258:	6878      	ldr	r0, [r7, #4]
 810725a:	f001 fa69 	bl	8108730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 810725e:	68bb      	ldr	r3, [r7, #8]
 8107260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8107264:	2b00      	cmp	r3, #0
 8107266:	d00c      	beq.n	8107282 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8107268:	68fb      	ldr	r3, [r7, #12]
 810726a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810726e:	2b00      	cmp	r3, #0
 8107270:	d007      	beq.n	8107282 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8107272:	687b      	ldr	r3, [r7, #4]
 8107274:	681b      	ldr	r3, [r3, #0]
 8107276:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 810727a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810727c:	6878      	ldr	r0, [r7, #4]
 810727e:	f000 fb59 	bl	8107934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8107282:	68bb      	ldr	r3, [r7, #8]
 8107284:	f003 0320 	and.w	r3, r3, #32
 8107288:	2b00      	cmp	r3, #0
 810728a:	d00c      	beq.n	81072a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	f003 0320 	and.w	r3, r3, #32
 8107292:	2b00      	cmp	r3, #0
 8107294:	d007      	beq.n	81072a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8107296:	687b      	ldr	r3, [r7, #4]
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	f06f 0220 	mvn.w	r2, #32
 810729e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81072a0:	6878      	ldr	r0, [r7, #4]
 81072a2:	f001 fa31 	bl	8108708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81072a6:	bf00      	nop
 81072a8:	3710      	adds	r7, #16
 81072aa:	46bd      	mov	sp, r7
 81072ac:	bd80      	pop	{r7, pc}

081072ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 81072ae:	b580      	push	{r7, lr}
 81072b0:	b086      	sub	sp, #24
 81072b2:	af00      	add	r7, sp, #0
 81072b4:	60f8      	str	r0, [r7, #12]
 81072b6:	60b9      	str	r1, [r7, #8]
 81072b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81072ba:	2300      	movs	r3, #0
 81072bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 81072be:	68fb      	ldr	r3, [r7, #12]
 81072c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81072c4:	2b01      	cmp	r3, #1
 81072c6:	d101      	bne.n	81072cc <HAL_TIM_IC_ConfigChannel+0x1e>
 81072c8:	2302      	movs	r3, #2
 81072ca:	e088      	b.n	81073de <HAL_TIM_IC_ConfigChannel+0x130>
 81072cc:	68fb      	ldr	r3, [r7, #12]
 81072ce:	2201      	movs	r2, #1
 81072d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 81072d4:	687b      	ldr	r3, [r7, #4]
 81072d6:	2b00      	cmp	r3, #0
 81072d8:	d11b      	bne.n	8107312 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81072de:	68bb      	ldr	r3, [r7, #8]
 81072e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81072e2:	68bb      	ldr	r3, [r7, #8]
 81072e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81072e6:	68bb      	ldr	r3, [r7, #8]
 81072e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 81072ea:	f000 ff93 	bl	8108214 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 81072ee:	68fb      	ldr	r3, [r7, #12]
 81072f0:	681b      	ldr	r3, [r3, #0]
 81072f2:	699a      	ldr	r2, [r3, #24]
 81072f4:	68fb      	ldr	r3, [r7, #12]
 81072f6:	681b      	ldr	r3, [r3, #0]
 81072f8:	f022 020c 	bic.w	r2, r2, #12
 81072fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 81072fe:	68fb      	ldr	r3, [r7, #12]
 8107300:	681b      	ldr	r3, [r3, #0]
 8107302:	6999      	ldr	r1, [r3, #24]
 8107304:	68bb      	ldr	r3, [r7, #8]
 8107306:	689a      	ldr	r2, [r3, #8]
 8107308:	68fb      	ldr	r3, [r7, #12]
 810730a:	681b      	ldr	r3, [r3, #0]
 810730c:	430a      	orrs	r2, r1
 810730e:	619a      	str	r2, [r3, #24]
 8107310:	e060      	b.n	81073d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8107312:	687b      	ldr	r3, [r7, #4]
 8107314:	2b04      	cmp	r3, #4
 8107316:	d11c      	bne.n	8107352 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810731c:	68bb      	ldr	r3, [r7, #8]
 810731e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107320:	68bb      	ldr	r3, [r7, #8]
 8107322:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107324:	68bb      	ldr	r3, [r7, #8]
 8107326:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8107328:	f001 f817 	bl	810835a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 810732c:	68fb      	ldr	r3, [r7, #12]
 810732e:	681b      	ldr	r3, [r3, #0]
 8107330:	699a      	ldr	r2, [r3, #24]
 8107332:	68fb      	ldr	r3, [r7, #12]
 8107334:	681b      	ldr	r3, [r3, #0]
 8107336:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810733a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	681b      	ldr	r3, [r3, #0]
 8107340:	6999      	ldr	r1, [r3, #24]
 8107342:	68bb      	ldr	r3, [r7, #8]
 8107344:	689b      	ldr	r3, [r3, #8]
 8107346:	021a      	lsls	r2, r3, #8
 8107348:	68fb      	ldr	r3, [r7, #12]
 810734a:	681b      	ldr	r3, [r3, #0]
 810734c:	430a      	orrs	r2, r1
 810734e:	619a      	str	r2, [r3, #24]
 8107350:	e040      	b.n	81073d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	2b08      	cmp	r3, #8
 8107356:	d11b      	bne.n	8107390 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8107358:	68fb      	ldr	r3, [r7, #12]
 810735a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810735c:	68bb      	ldr	r3, [r7, #8]
 810735e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107360:	68bb      	ldr	r3, [r7, #8]
 8107362:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107364:	68bb      	ldr	r3, [r7, #8]
 8107366:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8107368:	f001 f864 	bl	8108434 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 810736c:	68fb      	ldr	r3, [r7, #12]
 810736e:	681b      	ldr	r3, [r3, #0]
 8107370:	69da      	ldr	r2, [r3, #28]
 8107372:	68fb      	ldr	r3, [r7, #12]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	f022 020c 	bic.w	r2, r2, #12
 810737a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 810737c:	68fb      	ldr	r3, [r7, #12]
 810737e:	681b      	ldr	r3, [r3, #0]
 8107380:	69d9      	ldr	r1, [r3, #28]
 8107382:	68bb      	ldr	r3, [r7, #8]
 8107384:	689a      	ldr	r2, [r3, #8]
 8107386:	68fb      	ldr	r3, [r7, #12]
 8107388:	681b      	ldr	r3, [r3, #0]
 810738a:	430a      	orrs	r2, r1
 810738c:	61da      	str	r2, [r3, #28]
 810738e:	e021      	b.n	81073d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	2b0c      	cmp	r3, #12
 8107394:	d11c      	bne.n	81073d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8107396:	68fb      	ldr	r3, [r7, #12]
 8107398:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810739a:	68bb      	ldr	r3, [r7, #8]
 810739c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810739e:	68bb      	ldr	r3, [r7, #8]
 81073a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81073a2:	68bb      	ldr	r3, [r7, #8]
 81073a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 81073a6:	f001 f881 	bl	81084ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 81073aa:	68fb      	ldr	r3, [r7, #12]
 81073ac:	681b      	ldr	r3, [r3, #0]
 81073ae:	69da      	ldr	r2, [r3, #28]
 81073b0:	68fb      	ldr	r3, [r7, #12]
 81073b2:	681b      	ldr	r3, [r3, #0]
 81073b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 81073b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 81073ba:	68fb      	ldr	r3, [r7, #12]
 81073bc:	681b      	ldr	r3, [r3, #0]
 81073be:	69d9      	ldr	r1, [r3, #28]
 81073c0:	68bb      	ldr	r3, [r7, #8]
 81073c2:	689b      	ldr	r3, [r3, #8]
 81073c4:	021a      	lsls	r2, r3, #8
 81073c6:	68fb      	ldr	r3, [r7, #12]
 81073c8:	681b      	ldr	r3, [r3, #0]
 81073ca:	430a      	orrs	r2, r1
 81073cc:	61da      	str	r2, [r3, #28]
 81073ce:	e001      	b.n	81073d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 81073d0:	2301      	movs	r3, #1
 81073d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 81073d4:	68fb      	ldr	r3, [r7, #12]
 81073d6:	2200      	movs	r2, #0
 81073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 81073dc:	7dfb      	ldrb	r3, [r7, #23]
}
 81073de:	4618      	mov	r0, r3
 81073e0:	3718      	adds	r7, #24
 81073e2:	46bd      	mov	sp, r7
 81073e4:	bd80      	pop	{r7, pc}
	...

081073e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81073e8:	b580      	push	{r7, lr}
 81073ea:	b086      	sub	sp, #24
 81073ec:	af00      	add	r7, sp, #0
 81073ee:	60f8      	str	r0, [r7, #12]
 81073f0:	60b9      	str	r1, [r7, #8]
 81073f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81073f4:	2300      	movs	r3, #0
 81073f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81073fe:	2b01      	cmp	r3, #1
 8107400:	d101      	bne.n	8107406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8107402:	2302      	movs	r3, #2
 8107404:	e0ff      	b.n	8107606 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8107406:	68fb      	ldr	r3, [r7, #12]
 8107408:	2201      	movs	r2, #1
 810740a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810740e:	687b      	ldr	r3, [r7, #4]
 8107410:	2b14      	cmp	r3, #20
 8107412:	f200 80f0 	bhi.w	81075f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107416:	a201      	add	r2, pc, #4	@ (adr r2, 810741c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810741c:	08107471 	.word	0x08107471
 8107420:	081075f7 	.word	0x081075f7
 8107424:	081075f7 	.word	0x081075f7
 8107428:	081075f7 	.word	0x081075f7
 810742c:	081074b1 	.word	0x081074b1
 8107430:	081075f7 	.word	0x081075f7
 8107434:	081075f7 	.word	0x081075f7
 8107438:	081075f7 	.word	0x081075f7
 810743c:	081074f3 	.word	0x081074f3
 8107440:	081075f7 	.word	0x081075f7
 8107444:	081075f7 	.word	0x081075f7
 8107448:	081075f7 	.word	0x081075f7
 810744c:	08107533 	.word	0x08107533
 8107450:	081075f7 	.word	0x081075f7
 8107454:	081075f7 	.word	0x081075f7
 8107458:	081075f7 	.word	0x081075f7
 810745c:	08107575 	.word	0x08107575
 8107460:	081075f7 	.word	0x081075f7
 8107464:	081075f7 	.word	0x081075f7
 8107468:	081075f7 	.word	0x081075f7
 810746c:	081075b5 	.word	0x081075b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107470:	68fb      	ldr	r3, [r7, #12]
 8107472:	681b      	ldr	r3, [r3, #0]
 8107474:	68b9      	ldr	r1, [r7, #8]
 8107476:	4618      	mov	r0, r3
 8107478:	f000 fb0c 	bl	8107a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	699a      	ldr	r2, [r3, #24]
 8107482:	68fb      	ldr	r3, [r7, #12]
 8107484:	681b      	ldr	r3, [r3, #0]
 8107486:	f042 0208 	orr.w	r2, r2, #8
 810748a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810748c:	68fb      	ldr	r3, [r7, #12]
 810748e:	681b      	ldr	r3, [r3, #0]
 8107490:	699a      	ldr	r2, [r3, #24]
 8107492:	68fb      	ldr	r3, [r7, #12]
 8107494:	681b      	ldr	r3, [r3, #0]
 8107496:	f022 0204 	bic.w	r2, r2, #4
 810749a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810749c:	68fb      	ldr	r3, [r7, #12]
 810749e:	681b      	ldr	r3, [r3, #0]
 81074a0:	6999      	ldr	r1, [r3, #24]
 81074a2:	68bb      	ldr	r3, [r7, #8]
 81074a4:	691a      	ldr	r2, [r3, #16]
 81074a6:	68fb      	ldr	r3, [r7, #12]
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	430a      	orrs	r2, r1
 81074ac:	619a      	str	r2, [r3, #24]
      break;
 81074ae:	e0a5      	b.n	81075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81074b0:	68fb      	ldr	r3, [r7, #12]
 81074b2:	681b      	ldr	r3, [r3, #0]
 81074b4:	68b9      	ldr	r1, [r7, #8]
 81074b6:	4618      	mov	r0, r3
 81074b8:	f000 fb7c 	bl	8107bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81074bc:	68fb      	ldr	r3, [r7, #12]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	699a      	ldr	r2, [r3, #24]
 81074c2:	68fb      	ldr	r3, [r7, #12]
 81074c4:	681b      	ldr	r3, [r3, #0]
 81074c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81074ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	699a      	ldr	r2, [r3, #24]
 81074d2:	68fb      	ldr	r3, [r7, #12]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81074da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81074dc:	68fb      	ldr	r3, [r7, #12]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	6999      	ldr	r1, [r3, #24]
 81074e2:	68bb      	ldr	r3, [r7, #8]
 81074e4:	691b      	ldr	r3, [r3, #16]
 81074e6:	021a      	lsls	r2, r3, #8
 81074e8:	68fb      	ldr	r3, [r7, #12]
 81074ea:	681b      	ldr	r3, [r3, #0]
 81074ec:	430a      	orrs	r2, r1
 81074ee:	619a      	str	r2, [r3, #24]
      break;
 81074f0:	e084      	b.n	81075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	681b      	ldr	r3, [r3, #0]
 81074f6:	68b9      	ldr	r1, [r7, #8]
 81074f8:	4618      	mov	r0, r3
 81074fa:	f000 fbe5 	bl	8107cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81074fe:	68fb      	ldr	r3, [r7, #12]
 8107500:	681b      	ldr	r3, [r3, #0]
 8107502:	69da      	ldr	r2, [r3, #28]
 8107504:	68fb      	ldr	r3, [r7, #12]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	f042 0208 	orr.w	r2, r2, #8
 810750c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810750e:	68fb      	ldr	r3, [r7, #12]
 8107510:	681b      	ldr	r3, [r3, #0]
 8107512:	69da      	ldr	r2, [r3, #28]
 8107514:	68fb      	ldr	r3, [r7, #12]
 8107516:	681b      	ldr	r3, [r3, #0]
 8107518:	f022 0204 	bic.w	r2, r2, #4
 810751c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810751e:	68fb      	ldr	r3, [r7, #12]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	69d9      	ldr	r1, [r3, #28]
 8107524:	68bb      	ldr	r3, [r7, #8]
 8107526:	691a      	ldr	r2, [r3, #16]
 8107528:	68fb      	ldr	r3, [r7, #12]
 810752a:	681b      	ldr	r3, [r3, #0]
 810752c:	430a      	orrs	r2, r1
 810752e:	61da      	str	r2, [r3, #28]
      break;
 8107530:	e064      	b.n	81075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8107532:	68fb      	ldr	r3, [r7, #12]
 8107534:	681b      	ldr	r3, [r3, #0]
 8107536:	68b9      	ldr	r1, [r7, #8]
 8107538:	4618      	mov	r0, r3
 810753a:	f000 fc4d 	bl	8107dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810753e:	68fb      	ldr	r3, [r7, #12]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	69da      	ldr	r2, [r3, #28]
 8107544:	68fb      	ldr	r3, [r7, #12]
 8107546:	681b      	ldr	r3, [r3, #0]
 8107548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810754c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810754e:	68fb      	ldr	r3, [r7, #12]
 8107550:	681b      	ldr	r3, [r3, #0]
 8107552:	69da      	ldr	r2, [r3, #28]
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810755c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810755e:	68fb      	ldr	r3, [r7, #12]
 8107560:	681b      	ldr	r3, [r3, #0]
 8107562:	69d9      	ldr	r1, [r3, #28]
 8107564:	68bb      	ldr	r3, [r7, #8]
 8107566:	691b      	ldr	r3, [r3, #16]
 8107568:	021a      	lsls	r2, r3, #8
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	681b      	ldr	r3, [r3, #0]
 810756e:	430a      	orrs	r2, r1
 8107570:	61da      	str	r2, [r3, #28]
      break;
 8107572:	e043      	b.n	81075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8107574:	68fb      	ldr	r3, [r7, #12]
 8107576:	681b      	ldr	r3, [r3, #0]
 8107578:	68b9      	ldr	r1, [r7, #8]
 810757a:	4618      	mov	r0, r3
 810757c:	f000 fc96 	bl	8107eac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107580:	68fb      	ldr	r3, [r7, #12]
 8107582:	681b      	ldr	r3, [r3, #0]
 8107584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	f042 0208 	orr.w	r2, r2, #8
 810758e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107590:	68fb      	ldr	r3, [r7, #12]
 8107592:	681b      	ldr	r3, [r3, #0]
 8107594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8107596:	68fb      	ldr	r3, [r7, #12]
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	f022 0204 	bic.w	r2, r2, #4
 810759e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81075a0:	68fb      	ldr	r3, [r7, #12]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81075a6:	68bb      	ldr	r3, [r7, #8]
 81075a8:	691a      	ldr	r2, [r3, #16]
 81075aa:	68fb      	ldr	r3, [r7, #12]
 81075ac:	681b      	ldr	r3, [r3, #0]
 81075ae:	430a      	orrs	r2, r1
 81075b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81075b2:	e023      	b.n	81075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81075b4:	68fb      	ldr	r3, [r7, #12]
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	68b9      	ldr	r1, [r7, #8]
 81075ba:	4618      	mov	r0, r3
 81075bc:	f000 fcda 	bl	8107f74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	681b      	ldr	r3, [r3, #0]
 81075c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81075c6:	68fb      	ldr	r3, [r7, #12]
 81075c8:	681b      	ldr	r3, [r3, #0]
 81075ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81075ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81075d0:	68fb      	ldr	r3, [r7, #12]
 81075d2:	681b      	ldr	r3, [r3, #0]
 81075d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81075de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81075e0:	68fb      	ldr	r3, [r7, #12]
 81075e2:	681b      	ldr	r3, [r3, #0]
 81075e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81075e6:	68bb      	ldr	r3, [r7, #8]
 81075e8:	691b      	ldr	r3, [r3, #16]
 81075ea:	021a      	lsls	r2, r3, #8
 81075ec:	68fb      	ldr	r3, [r7, #12]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	430a      	orrs	r2, r1
 81075f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81075f4:	e002      	b.n	81075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81075f6:	2301      	movs	r3, #1
 81075f8:	75fb      	strb	r3, [r7, #23]
      break;
 81075fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81075fc:	68fb      	ldr	r3, [r7, #12]
 81075fe:	2200      	movs	r2, #0
 8107600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8107604:	7dfb      	ldrb	r3, [r7, #23]
}
 8107606:	4618      	mov	r0, r3
 8107608:	3718      	adds	r7, #24
 810760a:	46bd      	mov	sp, r7
 810760c:	bd80      	pop	{r7, pc}
 810760e:	bf00      	nop

08107610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8107610:	b580      	push	{r7, lr}
 8107612:	b084      	sub	sp, #16
 8107614:	af00      	add	r7, sp, #0
 8107616:	6078      	str	r0, [r7, #4]
 8107618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810761a:	2300      	movs	r3, #0
 810761c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810761e:	687b      	ldr	r3, [r7, #4]
 8107620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107624:	2b01      	cmp	r3, #1
 8107626:	d101      	bne.n	810762c <HAL_TIM_ConfigClockSource+0x1c>
 8107628:	2302      	movs	r3, #2
 810762a:	e0de      	b.n	81077ea <HAL_TIM_ConfigClockSource+0x1da>
 810762c:	687b      	ldr	r3, [r7, #4]
 810762e:	2201      	movs	r2, #1
 8107630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	2202      	movs	r2, #2
 8107638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	681b      	ldr	r3, [r3, #0]
 8107640:	689b      	ldr	r3, [r3, #8]
 8107642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8107644:	68bb      	ldr	r3, [r7, #8]
 8107646:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810764a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810764e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107650:	68bb      	ldr	r3, [r7, #8]
 8107652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8107658:	687b      	ldr	r3, [r7, #4]
 810765a:	681b      	ldr	r3, [r3, #0]
 810765c:	68ba      	ldr	r2, [r7, #8]
 810765e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8107660:	683b      	ldr	r3, [r7, #0]
 8107662:	681b      	ldr	r3, [r3, #0]
 8107664:	4a63      	ldr	r2, [pc, #396]	@ (81077f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8107666:	4293      	cmp	r3, r2
 8107668:	f000 80a9 	beq.w	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 810766c:	4a61      	ldr	r2, [pc, #388]	@ (81077f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 810766e:	4293      	cmp	r3, r2
 8107670:	f200 80ae 	bhi.w	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8107674:	4a60      	ldr	r2, [pc, #384]	@ (81077f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8107676:	4293      	cmp	r3, r2
 8107678:	f000 80a1 	beq.w	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 810767c:	4a5e      	ldr	r2, [pc, #376]	@ (81077f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 810767e:	4293      	cmp	r3, r2
 8107680:	f200 80a6 	bhi.w	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8107684:	4a5d      	ldr	r2, [pc, #372]	@ (81077fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8107686:	4293      	cmp	r3, r2
 8107688:	f000 8099 	beq.w	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 810768c:	4a5b      	ldr	r2, [pc, #364]	@ (81077fc <HAL_TIM_ConfigClockSource+0x1ec>)
 810768e:	4293      	cmp	r3, r2
 8107690:	f200 809e 	bhi.w	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8107694:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8107698:	f000 8091 	beq.w	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 810769c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81076a0:	f200 8096 	bhi.w	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81076a8:	f000 8089 	beq.w	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 81076ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81076b0:	f200 808e 	bhi.w	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81076b8:	d03e      	beq.n	8107738 <HAL_TIM_ConfigClockSource+0x128>
 81076ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81076be:	f200 8087 	bhi.w	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81076c6:	f000 8086 	beq.w	81077d6 <HAL_TIM_ConfigClockSource+0x1c6>
 81076ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81076ce:	d87f      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076d0:	2b70      	cmp	r3, #112	@ 0x70
 81076d2:	d01a      	beq.n	810770a <HAL_TIM_ConfigClockSource+0xfa>
 81076d4:	2b70      	cmp	r3, #112	@ 0x70
 81076d6:	d87b      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076d8:	2b60      	cmp	r3, #96	@ 0x60
 81076da:	d050      	beq.n	810777e <HAL_TIM_ConfigClockSource+0x16e>
 81076dc:	2b60      	cmp	r3, #96	@ 0x60
 81076de:	d877      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076e0:	2b50      	cmp	r3, #80	@ 0x50
 81076e2:	d03c      	beq.n	810775e <HAL_TIM_ConfigClockSource+0x14e>
 81076e4:	2b50      	cmp	r3, #80	@ 0x50
 81076e6:	d873      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076e8:	2b40      	cmp	r3, #64	@ 0x40
 81076ea:	d058      	beq.n	810779e <HAL_TIM_ConfigClockSource+0x18e>
 81076ec:	2b40      	cmp	r3, #64	@ 0x40
 81076ee:	d86f      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076f0:	2b30      	cmp	r3, #48	@ 0x30
 81076f2:	d064      	beq.n	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 81076f4:	2b30      	cmp	r3, #48	@ 0x30
 81076f6:	d86b      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81076f8:	2b20      	cmp	r3, #32
 81076fa:	d060      	beq.n	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 81076fc:	2b20      	cmp	r3, #32
 81076fe:	d867      	bhi.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8107700:	2b00      	cmp	r3, #0
 8107702:	d05c      	beq.n	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 8107704:	2b10      	cmp	r3, #16
 8107706:	d05a      	beq.n	81077be <HAL_TIM_ConfigClockSource+0x1ae>
 8107708:	e062      	b.n	81077d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810770a:	687b      	ldr	r3, [r7, #4]
 810770c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810770e:	683b      	ldr	r3, [r7, #0]
 8107710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8107712:	683b      	ldr	r3, [r7, #0]
 8107714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8107716:	683b      	ldr	r3, [r7, #0]
 8107718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810771a:	f000 ff21 	bl	8108560 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	681b      	ldr	r3, [r3, #0]
 8107722:	689b      	ldr	r3, [r3, #8]
 8107724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8107726:	68bb      	ldr	r3, [r7, #8]
 8107728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810772c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810772e:	687b      	ldr	r3, [r7, #4]
 8107730:	681b      	ldr	r3, [r3, #0]
 8107732:	68ba      	ldr	r2, [r7, #8]
 8107734:	609a      	str	r2, [r3, #8]
      break;
 8107736:	e04f      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107738:	687b      	ldr	r3, [r7, #4]
 810773a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810773c:	683b      	ldr	r3, [r7, #0]
 810773e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8107740:	683b      	ldr	r3, [r7, #0]
 8107742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8107744:	683b      	ldr	r3, [r7, #0]
 8107746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8107748:	f000 ff0a 	bl	8108560 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810774c:	687b      	ldr	r3, [r7, #4]
 810774e:	681b      	ldr	r3, [r3, #0]
 8107750:	689a      	ldr	r2, [r3, #8]
 8107752:	687b      	ldr	r3, [r7, #4]
 8107754:	681b      	ldr	r3, [r3, #0]
 8107756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810775a:	609a      	str	r2, [r3, #8]
      break;
 810775c:	e03c      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810775e:	687b      	ldr	r3, [r7, #4]
 8107760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8107762:	683b      	ldr	r3, [r7, #0]
 8107764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8107766:	683b      	ldr	r3, [r7, #0]
 8107768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810776a:	461a      	mov	r2, r3
 810776c:	f000 fdc6 	bl	81082fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8107770:	687b      	ldr	r3, [r7, #4]
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	2150      	movs	r1, #80	@ 0x50
 8107776:	4618      	mov	r0, r3
 8107778:	f000 fed5 	bl	8108526 <TIM_ITRx_SetConfig>
      break;
 810777c:	e02c      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810777e:	687b      	ldr	r3, [r7, #4]
 8107780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8107782:	683b      	ldr	r3, [r7, #0]
 8107784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8107786:	683b      	ldr	r3, [r7, #0]
 8107788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810778a:	461a      	mov	r2, r3
 810778c:	f000 fe22 	bl	81083d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8107790:	687b      	ldr	r3, [r7, #4]
 8107792:	681b      	ldr	r3, [r3, #0]
 8107794:	2160      	movs	r1, #96	@ 0x60
 8107796:	4618      	mov	r0, r3
 8107798:	f000 fec5 	bl	8108526 <TIM_ITRx_SetConfig>
      break;
 810779c:	e01c      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810779e:	687b      	ldr	r3, [r7, #4]
 81077a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81077a2:	683b      	ldr	r3, [r7, #0]
 81077a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81077a6:	683b      	ldr	r3, [r7, #0]
 81077a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81077aa:	461a      	mov	r2, r3
 81077ac:	f000 fda6 	bl	81082fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81077b0:	687b      	ldr	r3, [r7, #4]
 81077b2:	681b      	ldr	r3, [r3, #0]
 81077b4:	2140      	movs	r1, #64	@ 0x40
 81077b6:	4618      	mov	r0, r3
 81077b8:	f000 feb5 	bl	8108526 <TIM_ITRx_SetConfig>
      break;
 81077bc:	e00c      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81077be:	687b      	ldr	r3, [r7, #4]
 81077c0:	681a      	ldr	r2, [r3, #0]
 81077c2:	683b      	ldr	r3, [r7, #0]
 81077c4:	681b      	ldr	r3, [r3, #0]
 81077c6:	4619      	mov	r1, r3
 81077c8:	4610      	mov	r0, r2
 81077ca:	f000 feac 	bl	8108526 <TIM_ITRx_SetConfig>
      break;
 81077ce:	e003      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81077d0:	2301      	movs	r3, #1
 81077d2:	73fb      	strb	r3, [r7, #15]
      break;
 81077d4:	e000      	b.n	81077d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81077d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	2201      	movs	r2, #1
 81077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81077e0:	687b      	ldr	r3, [r7, #4]
 81077e2:	2200      	movs	r2, #0
 81077e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 81077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81077ea:	4618      	mov	r0, r3
 81077ec:	3710      	adds	r7, #16
 81077ee:	46bd      	mov	sp, r7
 81077f0:	bd80      	pop	{r7, pc}
 81077f2:	bf00      	nop
 81077f4:	00100040 	.word	0x00100040
 81077f8:	00100030 	.word	0x00100030
 81077fc:	00100020 	.word	0x00100020

08107800 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107800:	b580      	push	{r7, lr}
 8107802:	b082      	sub	sp, #8
 8107804:	af00      	add	r7, sp, #0
 8107806:	6078      	str	r0, [r7, #4]
 8107808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8107810:	2b01      	cmp	r3, #1
 8107812:	d101      	bne.n	8107818 <HAL_TIM_SlaveConfigSynchro+0x18>
 8107814:	2302      	movs	r3, #2
 8107816:	e031      	b.n	810787c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8107818:	687b      	ldr	r3, [r7, #4]
 810781a:	2201      	movs	r2, #1
 810781c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	2202      	movs	r2, #2
 8107824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8107828:	6839      	ldr	r1, [r7, #0]
 810782a:	6878      	ldr	r0, [r7, #4]
 810782c:	f000 fc08 	bl	8108040 <TIM_SlaveTimer_SetConfig>
 8107830:	4603      	mov	r3, r0
 8107832:	2b00      	cmp	r3, #0
 8107834:	d009      	beq.n	810784a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	2201      	movs	r2, #1
 810783a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	2200      	movs	r2, #0
 8107842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8107846:	2301      	movs	r3, #1
 8107848:	e018      	b.n	810787c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	681b      	ldr	r3, [r3, #0]
 810784e:	68da      	ldr	r2, [r3, #12]
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	681b      	ldr	r3, [r3, #0]
 8107854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8107858:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 810785a:	687b      	ldr	r3, [r7, #4]
 810785c:	681b      	ldr	r3, [r3, #0]
 810785e:	68da      	ldr	r2, [r3, #12]
 8107860:	687b      	ldr	r3, [r7, #4]
 8107862:	681b      	ldr	r3, [r3, #0]
 8107864:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8107868:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	2201      	movs	r2, #1
 810786e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	2200      	movs	r2, #0
 8107876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810787a:	2300      	movs	r3, #0
}
 810787c:	4618      	mov	r0, r3
 810787e:	3708      	adds	r7, #8
 8107880:	46bd      	mov	sp, r7
 8107882:	bd80      	pop	{r7, pc}

08107884 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107884:	b480      	push	{r7}
 8107886:	b085      	sub	sp, #20
 8107888:	af00      	add	r7, sp, #0
 810788a:	6078      	str	r0, [r7, #4]
 810788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 810788e:	2300      	movs	r3, #0
 8107890:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8107892:	683b      	ldr	r3, [r7, #0]
 8107894:	2b0c      	cmp	r3, #12
 8107896:	d831      	bhi.n	81078fc <HAL_TIM_ReadCapturedValue+0x78>
 8107898:	a201      	add	r2, pc, #4	@ (adr r2, 81078a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 810789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810789e:	bf00      	nop
 81078a0:	081078d5 	.word	0x081078d5
 81078a4:	081078fd 	.word	0x081078fd
 81078a8:	081078fd 	.word	0x081078fd
 81078ac:	081078fd 	.word	0x081078fd
 81078b0:	081078df 	.word	0x081078df
 81078b4:	081078fd 	.word	0x081078fd
 81078b8:	081078fd 	.word	0x081078fd
 81078bc:	081078fd 	.word	0x081078fd
 81078c0:	081078e9 	.word	0x081078e9
 81078c4:	081078fd 	.word	0x081078fd
 81078c8:	081078fd 	.word	0x081078fd
 81078cc:	081078fd 	.word	0x081078fd
 81078d0:	081078f3 	.word	0x081078f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	681b      	ldr	r3, [r3, #0]
 81078d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81078da:	60fb      	str	r3, [r7, #12]

      break;
 81078dc:	e00f      	b.n	81078fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 81078de:	687b      	ldr	r3, [r7, #4]
 81078e0:	681b      	ldr	r3, [r3, #0]
 81078e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81078e4:	60fb      	str	r3, [r7, #12]

      break;
 81078e6:	e00a      	b.n	81078fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	681b      	ldr	r3, [r3, #0]
 81078ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81078ee:	60fb      	str	r3, [r7, #12]

      break;
 81078f0:	e005      	b.n	81078fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	681b      	ldr	r3, [r3, #0]
 81078f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81078f8:	60fb      	str	r3, [r7, #12]

      break;
 81078fa:	e000      	b.n	81078fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 81078fc:	bf00      	nop
  }

  return tmpreg;
 81078fe:	68fb      	ldr	r3, [r7, #12]
}
 8107900:	4618      	mov	r0, r3
 8107902:	3714      	adds	r7, #20
 8107904:	46bd      	mov	sp, r7
 8107906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810790a:	4770      	bx	lr

0810790c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810790c:	b480      	push	{r7}
 810790e:	b083      	sub	sp, #12
 8107910:	af00      	add	r7, sp, #0
 8107912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107914:	bf00      	nop
 8107916:	370c      	adds	r7, #12
 8107918:	46bd      	mov	sp, r7
 810791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810791e:	4770      	bx	lr

08107920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107920:	b480      	push	{r7}
 8107922:	b083      	sub	sp, #12
 8107924:	af00      	add	r7, sp, #0
 8107926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107928:	bf00      	nop
 810792a:	370c      	adds	r7, #12
 810792c:	46bd      	mov	sp, r7
 810792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107932:	4770      	bx	lr

08107934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107934:	b480      	push	{r7}
 8107936:	b083      	sub	sp, #12
 8107938:	af00      	add	r7, sp, #0
 810793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810793c:	bf00      	nop
 810793e:	370c      	adds	r7, #12
 8107940:	46bd      	mov	sp, r7
 8107942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107946:	4770      	bx	lr

08107948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107948:	b480      	push	{r7}
 810794a:	b085      	sub	sp, #20
 810794c:	af00      	add	r7, sp, #0
 810794e:	6078      	str	r0, [r7, #4]
 8107950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	4a46      	ldr	r2, [pc, #280]	@ (8107a74 <TIM_Base_SetConfig+0x12c>)
 810795c:	4293      	cmp	r3, r2
 810795e:	d013      	beq.n	8107988 <TIM_Base_SetConfig+0x40>
 8107960:	687b      	ldr	r3, [r7, #4]
 8107962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107966:	d00f      	beq.n	8107988 <TIM_Base_SetConfig+0x40>
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	4a43      	ldr	r2, [pc, #268]	@ (8107a78 <TIM_Base_SetConfig+0x130>)
 810796c:	4293      	cmp	r3, r2
 810796e:	d00b      	beq.n	8107988 <TIM_Base_SetConfig+0x40>
 8107970:	687b      	ldr	r3, [r7, #4]
 8107972:	4a42      	ldr	r2, [pc, #264]	@ (8107a7c <TIM_Base_SetConfig+0x134>)
 8107974:	4293      	cmp	r3, r2
 8107976:	d007      	beq.n	8107988 <TIM_Base_SetConfig+0x40>
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	4a41      	ldr	r2, [pc, #260]	@ (8107a80 <TIM_Base_SetConfig+0x138>)
 810797c:	4293      	cmp	r3, r2
 810797e:	d003      	beq.n	8107988 <TIM_Base_SetConfig+0x40>
 8107980:	687b      	ldr	r3, [r7, #4]
 8107982:	4a40      	ldr	r2, [pc, #256]	@ (8107a84 <TIM_Base_SetConfig+0x13c>)
 8107984:	4293      	cmp	r3, r2
 8107986:	d108      	bne.n	810799a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107988:	68fb      	ldr	r3, [r7, #12]
 810798a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810798e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107990:	683b      	ldr	r3, [r7, #0]
 8107992:	685b      	ldr	r3, [r3, #4]
 8107994:	68fa      	ldr	r2, [r7, #12]
 8107996:	4313      	orrs	r3, r2
 8107998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	4a35      	ldr	r2, [pc, #212]	@ (8107a74 <TIM_Base_SetConfig+0x12c>)
 810799e:	4293      	cmp	r3, r2
 81079a0:	d01f      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81079a8:	d01b      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	4a32      	ldr	r2, [pc, #200]	@ (8107a78 <TIM_Base_SetConfig+0x130>)
 81079ae:	4293      	cmp	r3, r2
 81079b0:	d017      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079b2:	687b      	ldr	r3, [r7, #4]
 81079b4:	4a31      	ldr	r2, [pc, #196]	@ (8107a7c <TIM_Base_SetConfig+0x134>)
 81079b6:	4293      	cmp	r3, r2
 81079b8:	d013      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	4a30      	ldr	r2, [pc, #192]	@ (8107a80 <TIM_Base_SetConfig+0x138>)
 81079be:	4293      	cmp	r3, r2
 81079c0:	d00f      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079c2:	687b      	ldr	r3, [r7, #4]
 81079c4:	4a2f      	ldr	r2, [pc, #188]	@ (8107a84 <TIM_Base_SetConfig+0x13c>)
 81079c6:	4293      	cmp	r3, r2
 81079c8:	d00b      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079ca:	687b      	ldr	r3, [r7, #4]
 81079cc:	4a2e      	ldr	r2, [pc, #184]	@ (8107a88 <TIM_Base_SetConfig+0x140>)
 81079ce:	4293      	cmp	r3, r2
 81079d0:	d007      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079d2:	687b      	ldr	r3, [r7, #4]
 81079d4:	4a2d      	ldr	r2, [pc, #180]	@ (8107a8c <TIM_Base_SetConfig+0x144>)
 81079d6:	4293      	cmp	r3, r2
 81079d8:	d003      	beq.n	81079e2 <TIM_Base_SetConfig+0x9a>
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	4a2c      	ldr	r2, [pc, #176]	@ (8107a90 <TIM_Base_SetConfig+0x148>)
 81079de:	4293      	cmp	r3, r2
 81079e0:	d108      	bne.n	81079f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81079e2:	68fb      	ldr	r3, [r7, #12]
 81079e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81079e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81079ea:	683b      	ldr	r3, [r7, #0]
 81079ec:	68db      	ldr	r3, [r3, #12]
 81079ee:	68fa      	ldr	r2, [r7, #12]
 81079f0:	4313      	orrs	r3, r2
 81079f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81079f4:	68fb      	ldr	r3, [r7, #12]
 81079f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 81079fa:	683b      	ldr	r3, [r7, #0]
 81079fc:	695b      	ldr	r3, [r3, #20]
 81079fe:	4313      	orrs	r3, r2
 8107a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107a02:	687b      	ldr	r3, [r7, #4]
 8107a04:	68fa      	ldr	r2, [r7, #12]
 8107a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107a08:	683b      	ldr	r3, [r7, #0]
 8107a0a:	689a      	ldr	r2, [r3, #8]
 8107a0c:	687b      	ldr	r3, [r7, #4]
 8107a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107a10:	683b      	ldr	r3, [r7, #0]
 8107a12:	681a      	ldr	r2, [r3, #0]
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	4a16      	ldr	r2, [pc, #88]	@ (8107a74 <TIM_Base_SetConfig+0x12c>)
 8107a1c:	4293      	cmp	r3, r2
 8107a1e:	d00f      	beq.n	8107a40 <TIM_Base_SetConfig+0xf8>
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	4a18      	ldr	r2, [pc, #96]	@ (8107a84 <TIM_Base_SetConfig+0x13c>)
 8107a24:	4293      	cmp	r3, r2
 8107a26:	d00b      	beq.n	8107a40 <TIM_Base_SetConfig+0xf8>
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	4a17      	ldr	r2, [pc, #92]	@ (8107a88 <TIM_Base_SetConfig+0x140>)
 8107a2c:	4293      	cmp	r3, r2
 8107a2e:	d007      	beq.n	8107a40 <TIM_Base_SetConfig+0xf8>
 8107a30:	687b      	ldr	r3, [r7, #4]
 8107a32:	4a16      	ldr	r2, [pc, #88]	@ (8107a8c <TIM_Base_SetConfig+0x144>)
 8107a34:	4293      	cmp	r3, r2
 8107a36:	d003      	beq.n	8107a40 <TIM_Base_SetConfig+0xf8>
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	4a15      	ldr	r2, [pc, #84]	@ (8107a90 <TIM_Base_SetConfig+0x148>)
 8107a3c:	4293      	cmp	r3, r2
 8107a3e:	d103      	bne.n	8107a48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107a40:	683b      	ldr	r3, [r7, #0]
 8107a42:	691a      	ldr	r2, [r3, #16]
 8107a44:	687b      	ldr	r3, [r7, #4]
 8107a46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107a48:	687b      	ldr	r3, [r7, #4]
 8107a4a:	2201      	movs	r2, #1
 8107a4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8107a4e:	687b      	ldr	r3, [r7, #4]
 8107a50:	691b      	ldr	r3, [r3, #16]
 8107a52:	f003 0301 	and.w	r3, r3, #1
 8107a56:	2b01      	cmp	r3, #1
 8107a58:	d105      	bne.n	8107a66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107a5a:	687b      	ldr	r3, [r7, #4]
 8107a5c:	691b      	ldr	r3, [r3, #16]
 8107a5e:	f023 0201 	bic.w	r2, r3, #1
 8107a62:	687b      	ldr	r3, [r7, #4]
 8107a64:	611a      	str	r2, [r3, #16]
  }
}
 8107a66:	bf00      	nop
 8107a68:	3714      	adds	r7, #20
 8107a6a:	46bd      	mov	sp, r7
 8107a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a70:	4770      	bx	lr
 8107a72:	bf00      	nop
 8107a74:	40010000 	.word	0x40010000
 8107a78:	40000400 	.word	0x40000400
 8107a7c:	40000800 	.word	0x40000800
 8107a80:	40000c00 	.word	0x40000c00
 8107a84:	40010400 	.word	0x40010400
 8107a88:	40014000 	.word	0x40014000
 8107a8c:	40014400 	.word	0x40014400
 8107a90:	40014800 	.word	0x40014800

08107a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107a94:	b480      	push	{r7}
 8107a96:	b087      	sub	sp, #28
 8107a98:	af00      	add	r7, sp, #0
 8107a9a:	6078      	str	r0, [r7, #4]
 8107a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	6a1b      	ldr	r3, [r3, #32]
 8107aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107aa4:	687b      	ldr	r3, [r7, #4]
 8107aa6:	6a1b      	ldr	r3, [r3, #32]
 8107aa8:	f023 0201 	bic.w	r2, r3, #1
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	685b      	ldr	r3, [r3, #4]
 8107ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	699b      	ldr	r3, [r3, #24]
 8107aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107abc:	68fb      	ldr	r3, [r7, #12]
 8107abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107ac8:	68fb      	ldr	r3, [r7, #12]
 8107aca:	f023 0303 	bic.w	r3, r3, #3
 8107ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107ad0:	683b      	ldr	r3, [r7, #0]
 8107ad2:	681b      	ldr	r3, [r3, #0]
 8107ad4:	68fa      	ldr	r2, [r7, #12]
 8107ad6:	4313      	orrs	r3, r2
 8107ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107ada:	697b      	ldr	r3, [r7, #20]
 8107adc:	f023 0302 	bic.w	r3, r3, #2
 8107ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107ae2:	683b      	ldr	r3, [r7, #0]
 8107ae4:	689b      	ldr	r3, [r3, #8]
 8107ae6:	697a      	ldr	r2, [r7, #20]
 8107ae8:	4313      	orrs	r3, r2
 8107aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	4a2c      	ldr	r2, [pc, #176]	@ (8107ba0 <TIM_OC1_SetConfig+0x10c>)
 8107af0:	4293      	cmp	r3, r2
 8107af2:	d00f      	beq.n	8107b14 <TIM_OC1_SetConfig+0x80>
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	4a2b      	ldr	r2, [pc, #172]	@ (8107ba4 <TIM_OC1_SetConfig+0x110>)
 8107af8:	4293      	cmp	r3, r2
 8107afa:	d00b      	beq.n	8107b14 <TIM_OC1_SetConfig+0x80>
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	4a2a      	ldr	r2, [pc, #168]	@ (8107ba8 <TIM_OC1_SetConfig+0x114>)
 8107b00:	4293      	cmp	r3, r2
 8107b02:	d007      	beq.n	8107b14 <TIM_OC1_SetConfig+0x80>
 8107b04:	687b      	ldr	r3, [r7, #4]
 8107b06:	4a29      	ldr	r2, [pc, #164]	@ (8107bac <TIM_OC1_SetConfig+0x118>)
 8107b08:	4293      	cmp	r3, r2
 8107b0a:	d003      	beq.n	8107b14 <TIM_OC1_SetConfig+0x80>
 8107b0c:	687b      	ldr	r3, [r7, #4]
 8107b0e:	4a28      	ldr	r2, [pc, #160]	@ (8107bb0 <TIM_OC1_SetConfig+0x11c>)
 8107b10:	4293      	cmp	r3, r2
 8107b12:	d10c      	bne.n	8107b2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107b14:	697b      	ldr	r3, [r7, #20]
 8107b16:	f023 0308 	bic.w	r3, r3, #8
 8107b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107b1c:	683b      	ldr	r3, [r7, #0]
 8107b1e:	68db      	ldr	r3, [r3, #12]
 8107b20:	697a      	ldr	r2, [r7, #20]
 8107b22:	4313      	orrs	r3, r2
 8107b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107b26:	697b      	ldr	r3, [r7, #20]
 8107b28:	f023 0304 	bic.w	r3, r3, #4
 8107b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	4a1b      	ldr	r2, [pc, #108]	@ (8107ba0 <TIM_OC1_SetConfig+0x10c>)
 8107b32:	4293      	cmp	r3, r2
 8107b34:	d00f      	beq.n	8107b56 <TIM_OC1_SetConfig+0xc2>
 8107b36:	687b      	ldr	r3, [r7, #4]
 8107b38:	4a1a      	ldr	r2, [pc, #104]	@ (8107ba4 <TIM_OC1_SetConfig+0x110>)
 8107b3a:	4293      	cmp	r3, r2
 8107b3c:	d00b      	beq.n	8107b56 <TIM_OC1_SetConfig+0xc2>
 8107b3e:	687b      	ldr	r3, [r7, #4]
 8107b40:	4a19      	ldr	r2, [pc, #100]	@ (8107ba8 <TIM_OC1_SetConfig+0x114>)
 8107b42:	4293      	cmp	r3, r2
 8107b44:	d007      	beq.n	8107b56 <TIM_OC1_SetConfig+0xc2>
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	4a18      	ldr	r2, [pc, #96]	@ (8107bac <TIM_OC1_SetConfig+0x118>)
 8107b4a:	4293      	cmp	r3, r2
 8107b4c:	d003      	beq.n	8107b56 <TIM_OC1_SetConfig+0xc2>
 8107b4e:	687b      	ldr	r3, [r7, #4]
 8107b50:	4a17      	ldr	r2, [pc, #92]	@ (8107bb0 <TIM_OC1_SetConfig+0x11c>)
 8107b52:	4293      	cmp	r3, r2
 8107b54:	d111      	bne.n	8107b7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107b56:	693b      	ldr	r3, [r7, #16]
 8107b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107b5e:	693b      	ldr	r3, [r7, #16]
 8107b60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107b66:	683b      	ldr	r3, [r7, #0]
 8107b68:	695b      	ldr	r3, [r3, #20]
 8107b6a:	693a      	ldr	r2, [r7, #16]
 8107b6c:	4313      	orrs	r3, r2
 8107b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107b70:	683b      	ldr	r3, [r7, #0]
 8107b72:	699b      	ldr	r3, [r3, #24]
 8107b74:	693a      	ldr	r2, [r7, #16]
 8107b76:	4313      	orrs	r3, r2
 8107b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	693a      	ldr	r2, [r7, #16]
 8107b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	68fa      	ldr	r2, [r7, #12]
 8107b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107b86:	683b      	ldr	r3, [r7, #0]
 8107b88:	685a      	ldr	r2, [r3, #4]
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	697a      	ldr	r2, [r7, #20]
 8107b92:	621a      	str	r2, [r3, #32]
}
 8107b94:	bf00      	nop
 8107b96:	371c      	adds	r7, #28
 8107b98:	46bd      	mov	sp, r7
 8107b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b9e:	4770      	bx	lr
 8107ba0:	40010000 	.word	0x40010000
 8107ba4:	40010400 	.word	0x40010400
 8107ba8:	40014000 	.word	0x40014000
 8107bac:	40014400 	.word	0x40014400
 8107bb0:	40014800 	.word	0x40014800

08107bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107bb4:	b480      	push	{r7}
 8107bb6:	b087      	sub	sp, #28
 8107bb8:	af00      	add	r7, sp, #0
 8107bba:	6078      	str	r0, [r7, #4]
 8107bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107bbe:	687b      	ldr	r3, [r7, #4]
 8107bc0:	6a1b      	ldr	r3, [r3, #32]
 8107bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	6a1b      	ldr	r3, [r3, #32]
 8107bc8:	f023 0210 	bic.w	r2, r3, #16
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107bd0:	687b      	ldr	r3, [r7, #4]
 8107bd2:	685b      	ldr	r3, [r3, #4]
 8107bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	699b      	ldr	r3, [r3, #24]
 8107bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107bdc:	68fb      	ldr	r3, [r7, #12]
 8107bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107be2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107be8:	68fb      	ldr	r3, [r7, #12]
 8107bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107bf0:	683b      	ldr	r3, [r7, #0]
 8107bf2:	681b      	ldr	r3, [r3, #0]
 8107bf4:	021b      	lsls	r3, r3, #8
 8107bf6:	68fa      	ldr	r2, [r7, #12]
 8107bf8:	4313      	orrs	r3, r2
 8107bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107bfc:	697b      	ldr	r3, [r7, #20]
 8107bfe:	f023 0320 	bic.w	r3, r3, #32
 8107c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107c04:	683b      	ldr	r3, [r7, #0]
 8107c06:	689b      	ldr	r3, [r3, #8]
 8107c08:	011b      	lsls	r3, r3, #4
 8107c0a:	697a      	ldr	r2, [r7, #20]
 8107c0c:	4313      	orrs	r3, r2
 8107c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	4a28      	ldr	r2, [pc, #160]	@ (8107cb4 <TIM_OC2_SetConfig+0x100>)
 8107c14:	4293      	cmp	r3, r2
 8107c16:	d003      	beq.n	8107c20 <TIM_OC2_SetConfig+0x6c>
 8107c18:	687b      	ldr	r3, [r7, #4]
 8107c1a:	4a27      	ldr	r2, [pc, #156]	@ (8107cb8 <TIM_OC2_SetConfig+0x104>)
 8107c1c:	4293      	cmp	r3, r2
 8107c1e:	d10d      	bne.n	8107c3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107c20:	697b      	ldr	r3, [r7, #20]
 8107c22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8107c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107c28:	683b      	ldr	r3, [r7, #0]
 8107c2a:	68db      	ldr	r3, [r3, #12]
 8107c2c:	011b      	lsls	r3, r3, #4
 8107c2e:	697a      	ldr	r2, [r7, #20]
 8107c30:	4313      	orrs	r3, r2
 8107c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107c34:	697b      	ldr	r3, [r7, #20]
 8107c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8107c3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107c3c:	687b      	ldr	r3, [r7, #4]
 8107c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8107cb4 <TIM_OC2_SetConfig+0x100>)
 8107c40:	4293      	cmp	r3, r2
 8107c42:	d00f      	beq.n	8107c64 <TIM_OC2_SetConfig+0xb0>
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	4a1c      	ldr	r2, [pc, #112]	@ (8107cb8 <TIM_OC2_SetConfig+0x104>)
 8107c48:	4293      	cmp	r3, r2
 8107c4a:	d00b      	beq.n	8107c64 <TIM_OC2_SetConfig+0xb0>
 8107c4c:	687b      	ldr	r3, [r7, #4]
 8107c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8107cbc <TIM_OC2_SetConfig+0x108>)
 8107c50:	4293      	cmp	r3, r2
 8107c52:	d007      	beq.n	8107c64 <TIM_OC2_SetConfig+0xb0>
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	4a1a      	ldr	r2, [pc, #104]	@ (8107cc0 <TIM_OC2_SetConfig+0x10c>)
 8107c58:	4293      	cmp	r3, r2
 8107c5a:	d003      	beq.n	8107c64 <TIM_OC2_SetConfig+0xb0>
 8107c5c:	687b      	ldr	r3, [r7, #4]
 8107c5e:	4a19      	ldr	r2, [pc, #100]	@ (8107cc4 <TIM_OC2_SetConfig+0x110>)
 8107c60:	4293      	cmp	r3, r2
 8107c62:	d113      	bne.n	8107c8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107c64:	693b      	ldr	r3, [r7, #16]
 8107c66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107c6c:	693b      	ldr	r3, [r7, #16]
 8107c6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107c74:	683b      	ldr	r3, [r7, #0]
 8107c76:	695b      	ldr	r3, [r3, #20]
 8107c78:	009b      	lsls	r3, r3, #2
 8107c7a:	693a      	ldr	r2, [r7, #16]
 8107c7c:	4313      	orrs	r3, r2
 8107c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107c80:	683b      	ldr	r3, [r7, #0]
 8107c82:	699b      	ldr	r3, [r3, #24]
 8107c84:	009b      	lsls	r3, r3, #2
 8107c86:	693a      	ldr	r2, [r7, #16]
 8107c88:	4313      	orrs	r3, r2
 8107c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	693a      	ldr	r2, [r7, #16]
 8107c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	68fa      	ldr	r2, [r7, #12]
 8107c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107c98:	683b      	ldr	r3, [r7, #0]
 8107c9a:	685a      	ldr	r2, [r3, #4]
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	697a      	ldr	r2, [r7, #20]
 8107ca4:	621a      	str	r2, [r3, #32]
}
 8107ca6:	bf00      	nop
 8107ca8:	371c      	adds	r7, #28
 8107caa:	46bd      	mov	sp, r7
 8107cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cb0:	4770      	bx	lr
 8107cb2:	bf00      	nop
 8107cb4:	40010000 	.word	0x40010000
 8107cb8:	40010400 	.word	0x40010400
 8107cbc:	40014000 	.word	0x40014000
 8107cc0:	40014400 	.word	0x40014400
 8107cc4:	40014800 	.word	0x40014800

08107cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107cc8:	b480      	push	{r7}
 8107cca:	b087      	sub	sp, #28
 8107ccc:	af00      	add	r7, sp, #0
 8107cce:	6078      	str	r0, [r7, #4]
 8107cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	6a1b      	ldr	r3, [r3, #32]
 8107cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107cd8:	687b      	ldr	r3, [r7, #4]
 8107cda:	6a1b      	ldr	r3, [r3, #32]
 8107cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	685b      	ldr	r3, [r3, #4]
 8107ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	69db      	ldr	r3, [r3, #28]
 8107cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107cf0:	68fb      	ldr	r3, [r7, #12]
 8107cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107cfc:	68fb      	ldr	r3, [r7, #12]
 8107cfe:	f023 0303 	bic.w	r3, r3, #3
 8107d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107d04:	683b      	ldr	r3, [r7, #0]
 8107d06:	681b      	ldr	r3, [r3, #0]
 8107d08:	68fa      	ldr	r2, [r7, #12]
 8107d0a:	4313      	orrs	r3, r2
 8107d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107d0e:	697b      	ldr	r3, [r7, #20]
 8107d10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8107d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107d16:	683b      	ldr	r3, [r7, #0]
 8107d18:	689b      	ldr	r3, [r3, #8]
 8107d1a:	021b      	lsls	r3, r3, #8
 8107d1c:	697a      	ldr	r2, [r7, #20]
 8107d1e:	4313      	orrs	r3, r2
 8107d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107d22:	687b      	ldr	r3, [r7, #4]
 8107d24:	4a27      	ldr	r2, [pc, #156]	@ (8107dc4 <TIM_OC3_SetConfig+0xfc>)
 8107d26:	4293      	cmp	r3, r2
 8107d28:	d003      	beq.n	8107d32 <TIM_OC3_SetConfig+0x6a>
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	4a26      	ldr	r2, [pc, #152]	@ (8107dc8 <TIM_OC3_SetConfig+0x100>)
 8107d2e:	4293      	cmp	r3, r2
 8107d30:	d10d      	bne.n	8107d4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107d32:	697b      	ldr	r3, [r7, #20]
 8107d34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8107d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107d3a:	683b      	ldr	r3, [r7, #0]
 8107d3c:	68db      	ldr	r3, [r3, #12]
 8107d3e:	021b      	lsls	r3, r3, #8
 8107d40:	697a      	ldr	r2, [r7, #20]
 8107d42:	4313      	orrs	r3, r2
 8107d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107d46:	697b      	ldr	r3, [r7, #20]
 8107d48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8107d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107d4e:	687b      	ldr	r3, [r7, #4]
 8107d50:	4a1c      	ldr	r2, [pc, #112]	@ (8107dc4 <TIM_OC3_SetConfig+0xfc>)
 8107d52:	4293      	cmp	r3, r2
 8107d54:	d00f      	beq.n	8107d76 <TIM_OC3_SetConfig+0xae>
 8107d56:	687b      	ldr	r3, [r7, #4]
 8107d58:	4a1b      	ldr	r2, [pc, #108]	@ (8107dc8 <TIM_OC3_SetConfig+0x100>)
 8107d5a:	4293      	cmp	r3, r2
 8107d5c:	d00b      	beq.n	8107d76 <TIM_OC3_SetConfig+0xae>
 8107d5e:	687b      	ldr	r3, [r7, #4]
 8107d60:	4a1a      	ldr	r2, [pc, #104]	@ (8107dcc <TIM_OC3_SetConfig+0x104>)
 8107d62:	4293      	cmp	r3, r2
 8107d64:	d007      	beq.n	8107d76 <TIM_OC3_SetConfig+0xae>
 8107d66:	687b      	ldr	r3, [r7, #4]
 8107d68:	4a19      	ldr	r2, [pc, #100]	@ (8107dd0 <TIM_OC3_SetConfig+0x108>)
 8107d6a:	4293      	cmp	r3, r2
 8107d6c:	d003      	beq.n	8107d76 <TIM_OC3_SetConfig+0xae>
 8107d6e:	687b      	ldr	r3, [r7, #4]
 8107d70:	4a18      	ldr	r2, [pc, #96]	@ (8107dd4 <TIM_OC3_SetConfig+0x10c>)
 8107d72:	4293      	cmp	r3, r2
 8107d74:	d113      	bne.n	8107d9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107d76:	693b      	ldr	r3, [r7, #16]
 8107d78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107d7e:	693b      	ldr	r3, [r7, #16]
 8107d80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8107d86:	683b      	ldr	r3, [r7, #0]
 8107d88:	695b      	ldr	r3, [r3, #20]
 8107d8a:	011b      	lsls	r3, r3, #4
 8107d8c:	693a      	ldr	r2, [r7, #16]
 8107d8e:	4313      	orrs	r3, r2
 8107d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8107d92:	683b      	ldr	r3, [r7, #0]
 8107d94:	699b      	ldr	r3, [r3, #24]
 8107d96:	011b      	lsls	r3, r3, #4
 8107d98:	693a      	ldr	r2, [r7, #16]
 8107d9a:	4313      	orrs	r3, r2
 8107d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	693a      	ldr	r2, [r7, #16]
 8107da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	68fa      	ldr	r2, [r7, #12]
 8107da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107daa:	683b      	ldr	r3, [r7, #0]
 8107dac:	685a      	ldr	r2, [r3, #4]
 8107dae:	687b      	ldr	r3, [r7, #4]
 8107db0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	697a      	ldr	r2, [r7, #20]
 8107db6:	621a      	str	r2, [r3, #32]
}
 8107db8:	bf00      	nop
 8107dba:	371c      	adds	r7, #28
 8107dbc:	46bd      	mov	sp, r7
 8107dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dc2:	4770      	bx	lr
 8107dc4:	40010000 	.word	0x40010000
 8107dc8:	40010400 	.word	0x40010400
 8107dcc:	40014000 	.word	0x40014000
 8107dd0:	40014400 	.word	0x40014400
 8107dd4:	40014800 	.word	0x40014800

08107dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107dd8:	b480      	push	{r7}
 8107dda:	b087      	sub	sp, #28
 8107ddc:	af00      	add	r7, sp, #0
 8107dde:	6078      	str	r0, [r7, #4]
 8107de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	6a1b      	ldr	r3, [r3, #32]
 8107de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	6a1b      	ldr	r3, [r3, #32]
 8107dec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8107df0:	687b      	ldr	r3, [r7, #4]
 8107df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	685b      	ldr	r3, [r3, #4]
 8107df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107dfa:	687b      	ldr	r3, [r7, #4]
 8107dfc:	69db      	ldr	r3, [r3, #28]
 8107dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107e00:	68fb      	ldr	r3, [r7, #12]
 8107e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107e0c:	68fb      	ldr	r3, [r7, #12]
 8107e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107e14:	683b      	ldr	r3, [r7, #0]
 8107e16:	681b      	ldr	r3, [r3, #0]
 8107e18:	021b      	lsls	r3, r3, #8
 8107e1a:	68fa      	ldr	r2, [r7, #12]
 8107e1c:	4313      	orrs	r3, r2
 8107e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107e20:	693b      	ldr	r3, [r7, #16]
 8107e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8107e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107e28:	683b      	ldr	r3, [r7, #0]
 8107e2a:	689b      	ldr	r3, [r3, #8]
 8107e2c:	031b      	lsls	r3, r3, #12
 8107e2e:	693a      	ldr	r2, [r7, #16]
 8107e30:	4313      	orrs	r3, r2
 8107e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	4a18      	ldr	r2, [pc, #96]	@ (8107e98 <TIM_OC4_SetConfig+0xc0>)
 8107e38:	4293      	cmp	r3, r2
 8107e3a:	d00f      	beq.n	8107e5c <TIM_OC4_SetConfig+0x84>
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	4a17      	ldr	r2, [pc, #92]	@ (8107e9c <TIM_OC4_SetConfig+0xc4>)
 8107e40:	4293      	cmp	r3, r2
 8107e42:	d00b      	beq.n	8107e5c <TIM_OC4_SetConfig+0x84>
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	4a16      	ldr	r2, [pc, #88]	@ (8107ea0 <TIM_OC4_SetConfig+0xc8>)
 8107e48:	4293      	cmp	r3, r2
 8107e4a:	d007      	beq.n	8107e5c <TIM_OC4_SetConfig+0x84>
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	4a15      	ldr	r2, [pc, #84]	@ (8107ea4 <TIM_OC4_SetConfig+0xcc>)
 8107e50:	4293      	cmp	r3, r2
 8107e52:	d003      	beq.n	8107e5c <TIM_OC4_SetConfig+0x84>
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	4a14      	ldr	r2, [pc, #80]	@ (8107ea8 <TIM_OC4_SetConfig+0xd0>)
 8107e58:	4293      	cmp	r3, r2
 8107e5a:	d109      	bne.n	8107e70 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107e5c:	697b      	ldr	r3, [r7, #20]
 8107e5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8107e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107e64:	683b      	ldr	r3, [r7, #0]
 8107e66:	695b      	ldr	r3, [r3, #20]
 8107e68:	019b      	lsls	r3, r3, #6
 8107e6a:	697a      	ldr	r2, [r7, #20]
 8107e6c:	4313      	orrs	r3, r2
 8107e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e70:	687b      	ldr	r3, [r7, #4]
 8107e72:	697a      	ldr	r2, [r7, #20]
 8107e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	68fa      	ldr	r2, [r7, #12]
 8107e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107e7c:	683b      	ldr	r3, [r7, #0]
 8107e7e:	685a      	ldr	r2, [r3, #4]
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e84:	687b      	ldr	r3, [r7, #4]
 8107e86:	693a      	ldr	r2, [r7, #16]
 8107e88:	621a      	str	r2, [r3, #32]
}
 8107e8a:	bf00      	nop
 8107e8c:	371c      	adds	r7, #28
 8107e8e:	46bd      	mov	sp, r7
 8107e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e94:	4770      	bx	lr
 8107e96:	bf00      	nop
 8107e98:	40010000 	.word	0x40010000
 8107e9c:	40010400 	.word	0x40010400
 8107ea0:	40014000 	.word	0x40014000
 8107ea4:	40014400 	.word	0x40014400
 8107ea8:	40014800 	.word	0x40014800

08107eac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107eac:	b480      	push	{r7}
 8107eae:	b087      	sub	sp, #28
 8107eb0:	af00      	add	r7, sp, #0
 8107eb2:	6078      	str	r0, [r7, #4]
 8107eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	6a1b      	ldr	r3, [r3, #32]
 8107eba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8107ebc:	687b      	ldr	r3, [r7, #4]
 8107ebe:	6a1b      	ldr	r3, [r3, #32]
 8107ec0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	685b      	ldr	r3, [r3, #4]
 8107ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107ece:	687b      	ldr	r3, [r7, #4]
 8107ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107ed4:	68fb      	ldr	r3, [r7, #12]
 8107ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8107ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107ee0:	683b      	ldr	r3, [r7, #0]
 8107ee2:	681b      	ldr	r3, [r3, #0]
 8107ee4:	68fa      	ldr	r2, [r7, #12]
 8107ee6:	4313      	orrs	r3, r2
 8107ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8107eea:	693b      	ldr	r3, [r7, #16]
 8107eec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8107ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107ef2:	683b      	ldr	r3, [r7, #0]
 8107ef4:	689b      	ldr	r3, [r3, #8]
 8107ef6:	041b      	lsls	r3, r3, #16
 8107ef8:	693a      	ldr	r2, [r7, #16]
 8107efa:	4313      	orrs	r3, r2
 8107efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	4a17      	ldr	r2, [pc, #92]	@ (8107f60 <TIM_OC5_SetConfig+0xb4>)
 8107f02:	4293      	cmp	r3, r2
 8107f04:	d00f      	beq.n	8107f26 <TIM_OC5_SetConfig+0x7a>
 8107f06:	687b      	ldr	r3, [r7, #4]
 8107f08:	4a16      	ldr	r2, [pc, #88]	@ (8107f64 <TIM_OC5_SetConfig+0xb8>)
 8107f0a:	4293      	cmp	r3, r2
 8107f0c:	d00b      	beq.n	8107f26 <TIM_OC5_SetConfig+0x7a>
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	4a15      	ldr	r2, [pc, #84]	@ (8107f68 <TIM_OC5_SetConfig+0xbc>)
 8107f12:	4293      	cmp	r3, r2
 8107f14:	d007      	beq.n	8107f26 <TIM_OC5_SetConfig+0x7a>
 8107f16:	687b      	ldr	r3, [r7, #4]
 8107f18:	4a14      	ldr	r2, [pc, #80]	@ (8107f6c <TIM_OC5_SetConfig+0xc0>)
 8107f1a:	4293      	cmp	r3, r2
 8107f1c:	d003      	beq.n	8107f26 <TIM_OC5_SetConfig+0x7a>
 8107f1e:	687b      	ldr	r3, [r7, #4]
 8107f20:	4a13      	ldr	r2, [pc, #76]	@ (8107f70 <TIM_OC5_SetConfig+0xc4>)
 8107f22:	4293      	cmp	r3, r2
 8107f24:	d109      	bne.n	8107f3a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107f26:	697b      	ldr	r3, [r7, #20]
 8107f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8107f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107f2e:	683b      	ldr	r3, [r7, #0]
 8107f30:	695b      	ldr	r3, [r3, #20]
 8107f32:	021b      	lsls	r3, r3, #8
 8107f34:	697a      	ldr	r2, [r7, #20]
 8107f36:	4313      	orrs	r3, r2
 8107f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107f3a:	687b      	ldr	r3, [r7, #4]
 8107f3c:	697a      	ldr	r2, [r7, #20]
 8107f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107f40:	687b      	ldr	r3, [r7, #4]
 8107f42:	68fa      	ldr	r2, [r7, #12]
 8107f44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107f46:	683b      	ldr	r3, [r7, #0]
 8107f48:	685a      	ldr	r2, [r3, #4]
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107f4e:	687b      	ldr	r3, [r7, #4]
 8107f50:	693a      	ldr	r2, [r7, #16]
 8107f52:	621a      	str	r2, [r3, #32]
}
 8107f54:	bf00      	nop
 8107f56:	371c      	adds	r7, #28
 8107f58:	46bd      	mov	sp, r7
 8107f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f5e:	4770      	bx	lr
 8107f60:	40010000 	.word	0x40010000
 8107f64:	40010400 	.word	0x40010400
 8107f68:	40014000 	.word	0x40014000
 8107f6c:	40014400 	.word	0x40014400
 8107f70:	40014800 	.word	0x40014800

08107f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107f74:	b480      	push	{r7}
 8107f76:	b087      	sub	sp, #28
 8107f78:	af00      	add	r7, sp, #0
 8107f7a:	6078      	str	r0, [r7, #4]
 8107f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f7e:	687b      	ldr	r3, [r7, #4]
 8107f80:	6a1b      	ldr	r3, [r3, #32]
 8107f82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107f84:	687b      	ldr	r3, [r7, #4]
 8107f86:	6a1b      	ldr	r3, [r3, #32]
 8107f88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f90:	687b      	ldr	r3, [r7, #4]
 8107f92:	685b      	ldr	r3, [r3, #4]
 8107f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107f9c:	68fb      	ldr	r3, [r7, #12]
 8107f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8107fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8107fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107fa8:	683b      	ldr	r3, [r7, #0]
 8107faa:	681b      	ldr	r3, [r3, #0]
 8107fac:	021b      	lsls	r3, r3, #8
 8107fae:	68fa      	ldr	r2, [r7, #12]
 8107fb0:	4313      	orrs	r3, r2
 8107fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107fb4:	693b      	ldr	r3, [r7, #16]
 8107fb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8107fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107fbc:	683b      	ldr	r3, [r7, #0]
 8107fbe:	689b      	ldr	r3, [r3, #8]
 8107fc0:	051b      	lsls	r3, r3, #20
 8107fc2:	693a      	ldr	r2, [r7, #16]
 8107fc4:	4313      	orrs	r3, r2
 8107fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	4a18      	ldr	r2, [pc, #96]	@ (810802c <TIM_OC6_SetConfig+0xb8>)
 8107fcc:	4293      	cmp	r3, r2
 8107fce:	d00f      	beq.n	8107ff0 <TIM_OC6_SetConfig+0x7c>
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	4a17      	ldr	r2, [pc, #92]	@ (8108030 <TIM_OC6_SetConfig+0xbc>)
 8107fd4:	4293      	cmp	r3, r2
 8107fd6:	d00b      	beq.n	8107ff0 <TIM_OC6_SetConfig+0x7c>
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	4a16      	ldr	r2, [pc, #88]	@ (8108034 <TIM_OC6_SetConfig+0xc0>)
 8107fdc:	4293      	cmp	r3, r2
 8107fde:	d007      	beq.n	8107ff0 <TIM_OC6_SetConfig+0x7c>
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	4a15      	ldr	r2, [pc, #84]	@ (8108038 <TIM_OC6_SetConfig+0xc4>)
 8107fe4:	4293      	cmp	r3, r2
 8107fe6:	d003      	beq.n	8107ff0 <TIM_OC6_SetConfig+0x7c>
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	4a14      	ldr	r2, [pc, #80]	@ (810803c <TIM_OC6_SetConfig+0xc8>)
 8107fec:	4293      	cmp	r3, r2
 8107fee:	d109      	bne.n	8108004 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107ff0:	697b      	ldr	r3, [r7, #20]
 8107ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8107ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107ff8:	683b      	ldr	r3, [r7, #0]
 8107ffa:	695b      	ldr	r3, [r3, #20]
 8107ffc:	029b      	lsls	r3, r3, #10
 8107ffe:	697a      	ldr	r2, [r7, #20]
 8108000:	4313      	orrs	r3, r2
 8108002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	697a      	ldr	r2, [r7, #20]
 8108008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	68fa      	ldr	r2, [r7, #12]
 810800e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108010:	683b      	ldr	r3, [r7, #0]
 8108012:	685a      	ldr	r2, [r3, #4]
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108018:	687b      	ldr	r3, [r7, #4]
 810801a:	693a      	ldr	r2, [r7, #16]
 810801c:	621a      	str	r2, [r3, #32]
}
 810801e:	bf00      	nop
 8108020:	371c      	adds	r7, #28
 8108022:	46bd      	mov	sp, r7
 8108024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108028:	4770      	bx	lr
 810802a:	bf00      	nop
 810802c:	40010000 	.word	0x40010000
 8108030:	40010400 	.word	0x40010400
 8108034:	40014000 	.word	0x40014000
 8108038:	40014400 	.word	0x40014400
 810803c:	40014800 	.word	0x40014800

08108040 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8108040:	b580      	push	{r7, lr}
 8108042:	b086      	sub	sp, #24
 8108044:	af00      	add	r7, sp, #0
 8108046:	6078      	str	r0, [r7, #4]
 8108048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810804a:	2300      	movs	r3, #0
 810804c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	689b      	ldr	r3, [r3, #8]
 8108054:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8108056:	693b      	ldr	r3, [r7, #16]
 8108058:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810805c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108060:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8108062:	683b      	ldr	r3, [r7, #0]
 8108064:	685b      	ldr	r3, [r3, #4]
 8108066:	693a      	ldr	r2, [r7, #16]
 8108068:	4313      	orrs	r3, r2
 810806a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 810806c:	693b      	ldr	r3, [r7, #16]
 810806e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108072:	f023 0307 	bic.w	r3, r3, #7
 8108076:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8108078:	683b      	ldr	r3, [r7, #0]
 810807a:	681b      	ldr	r3, [r3, #0]
 810807c:	693a      	ldr	r2, [r7, #16]
 810807e:	4313      	orrs	r3, r2
 8108080:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	681b      	ldr	r3, [r3, #0]
 8108086:	693a      	ldr	r2, [r7, #16]
 8108088:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 810808a:	683b      	ldr	r3, [r7, #0]
 810808c:	685b      	ldr	r3, [r3, #4]
 810808e:	4a5a      	ldr	r2, [pc, #360]	@ (81081f8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8108090:	4293      	cmp	r3, r2
 8108092:	f000 80ab 	beq.w	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 8108096:	4a58      	ldr	r2, [pc, #352]	@ (81081f8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8108098:	4293      	cmp	r3, r2
 810809a:	f200 80a4 	bhi.w	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 810809e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81080a2:	f000 80a3 	beq.w	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81080aa:	f200 809c 	bhi.w	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 81080ae:	4a53      	ldr	r2, [pc, #332]	@ (81081fc <TIM_SlaveTimer_SetConfig+0x1bc>)
 81080b0:	4293      	cmp	r3, r2
 81080b2:	f000 809b 	beq.w	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080b6:	4a51      	ldr	r2, [pc, #324]	@ (81081fc <TIM_SlaveTimer_SetConfig+0x1bc>)
 81080b8:	4293      	cmp	r3, r2
 81080ba:	f200 8094 	bhi.w	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 81080be:	4a50      	ldr	r2, [pc, #320]	@ (8108200 <TIM_SlaveTimer_SetConfig+0x1c0>)
 81080c0:	4293      	cmp	r3, r2
 81080c2:	f000 8093 	beq.w	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080c6:	4a4e      	ldr	r2, [pc, #312]	@ (8108200 <TIM_SlaveTimer_SetConfig+0x1c0>)
 81080c8:	4293      	cmp	r3, r2
 81080ca:	f200 808c 	bhi.w	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 81080ce:	4a4d      	ldr	r2, [pc, #308]	@ (8108204 <TIM_SlaveTimer_SetConfig+0x1c4>)
 81080d0:	4293      	cmp	r3, r2
 81080d2:	f000 808b 	beq.w	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080d6:	4a4b      	ldr	r2, [pc, #300]	@ (8108204 <TIM_SlaveTimer_SetConfig+0x1c4>)
 81080d8:	4293      	cmp	r3, r2
 81080da:	f200 8084 	bhi.w	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 81080de:	4a4a      	ldr	r2, [pc, #296]	@ (8108208 <TIM_SlaveTimer_SetConfig+0x1c8>)
 81080e0:	4293      	cmp	r3, r2
 81080e2:	f000 8083 	beq.w	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080e6:	4a48      	ldr	r2, [pc, #288]	@ (8108208 <TIM_SlaveTimer_SetConfig+0x1c8>)
 81080e8:	4293      	cmp	r3, r2
 81080ea:	d87c      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 81080ec:	4a47      	ldr	r2, [pc, #284]	@ (810820c <TIM_SlaveTimer_SetConfig+0x1cc>)
 81080ee:	4293      	cmp	r3, r2
 81080f0:	d07c      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080f2:	4a46      	ldr	r2, [pc, #280]	@ (810820c <TIM_SlaveTimer_SetConfig+0x1cc>)
 81080f4:	4293      	cmp	r3, r2
 81080f6:	d876      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 81080f8:	4a45      	ldr	r2, [pc, #276]	@ (8108210 <TIM_SlaveTimer_SetConfig+0x1d0>)
 81080fa:	4293      	cmp	r3, r2
 81080fc:	d076      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 81080fe:	4a44      	ldr	r2, [pc, #272]	@ (8108210 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8108100:	4293      	cmp	r3, r2
 8108102:	d870      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108104:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8108108:	d070      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 810810a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 810810e:	d86a      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8108114:	d06a      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 8108116:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810811a:	d864      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 810811c:	2b70      	cmp	r3, #112	@ 0x70
 810811e:	d01a      	beq.n	8108156 <TIM_SlaveTimer_SetConfig+0x116>
 8108120:	2b70      	cmp	r3, #112	@ 0x70
 8108122:	d860      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108124:	2b60      	cmp	r3, #96	@ 0x60
 8108126:	d054      	beq.n	81081d2 <TIM_SlaveTimer_SetConfig+0x192>
 8108128:	2b60      	cmp	r3, #96	@ 0x60
 810812a:	d85c      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 810812c:	2b50      	cmp	r3, #80	@ 0x50
 810812e:	d046      	beq.n	81081be <TIM_SlaveTimer_SetConfig+0x17e>
 8108130:	2b50      	cmp	r3, #80	@ 0x50
 8108132:	d858      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108134:	2b40      	cmp	r3, #64	@ 0x40
 8108136:	d019      	beq.n	810816c <TIM_SlaveTimer_SetConfig+0x12c>
 8108138:	2b40      	cmp	r3, #64	@ 0x40
 810813a:	d854      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 810813c:	2b30      	cmp	r3, #48	@ 0x30
 810813e:	d055      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 8108140:	2b30      	cmp	r3, #48	@ 0x30
 8108142:	d850      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 8108144:	2b20      	cmp	r3, #32
 8108146:	d051      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 8108148:	2b20      	cmp	r3, #32
 810814a:	d84c      	bhi.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
 810814c:	2b00      	cmp	r3, #0
 810814e:	d04d      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 8108150:	2b10      	cmp	r3, #16
 8108152:	d04b      	beq.n	81081ec <TIM_SlaveTimer_SetConfig+0x1ac>
 8108154:	e047      	b.n	81081e6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 810815a:	683b      	ldr	r3, [r7, #0]
 810815c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 810815e:	683b      	ldr	r3, [r7, #0]
 8108160:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8108162:	683b      	ldr	r3, [r7, #0]
 8108164:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8108166:	f000 f9fb 	bl	8108560 <TIM_ETR_SetConfig>
      break;
 810816a:	e040      	b.n	81081ee <TIM_SlaveTimer_SetConfig+0x1ae>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 810816c:	683b      	ldr	r3, [r7, #0]
 810816e:	681b      	ldr	r3, [r3, #0]
 8108170:	2b05      	cmp	r3, #5
 8108172:	d101      	bne.n	8108178 <TIM_SlaveTimer_SetConfig+0x138>
      {
        return HAL_ERROR;
 8108174:	2301      	movs	r3, #1
 8108176:	e03b      	b.n	81081f0 <TIM_SlaveTimer_SetConfig+0x1b0>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	681b      	ldr	r3, [r3, #0]
 810817c:	6a1b      	ldr	r3, [r3, #32]
 810817e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	681b      	ldr	r3, [r3, #0]
 8108184:	6a1a      	ldr	r2, [r3, #32]
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	681b      	ldr	r3, [r3, #0]
 810818a:	f022 0201 	bic.w	r2, r2, #1
 810818e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	681b      	ldr	r3, [r3, #0]
 8108194:	699b      	ldr	r3, [r3, #24]
 8108196:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108198:	68bb      	ldr	r3, [r7, #8]
 810819a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810819e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 81081a0:	683b      	ldr	r3, [r7, #0]
 81081a2:	691b      	ldr	r3, [r3, #16]
 81081a4:	011b      	lsls	r3, r3, #4
 81081a6:	68ba      	ldr	r2, [r7, #8]
 81081a8:	4313      	orrs	r3, r2
 81081aa:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 81081ac:	687b      	ldr	r3, [r7, #4]
 81081ae:	681b      	ldr	r3, [r3, #0]
 81081b0:	68ba      	ldr	r2, [r7, #8]
 81081b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 81081b4:	687b      	ldr	r3, [r7, #4]
 81081b6:	681b      	ldr	r3, [r3, #0]
 81081b8:	68fa      	ldr	r2, [r7, #12]
 81081ba:	621a      	str	r2, [r3, #32]
      break;
 81081bc:	e017      	b.n	81081ee <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 81081c2:	683b      	ldr	r3, [r7, #0]
 81081c4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 81081c6:	683b      	ldr	r3, [r7, #0]
 81081c8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81081ca:	461a      	mov	r2, r3
 81081cc:	f000 f896 	bl	81082fc <TIM_TI1_ConfigInputStage>
      break;
 81081d0:	e00d      	b.n	81081ee <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 81081d6:	683b      	ldr	r3, [r7, #0]
 81081d8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 81081da:	683b      	ldr	r3, [r7, #0]
 81081dc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 81081de:	461a      	mov	r2, r3
 81081e0:	f000 f8f8 	bl	81083d4 <TIM_TI2_ConfigInputStage>
      break;
 81081e4:	e003      	b.n	81081ee <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 81081e6:	2301      	movs	r3, #1
 81081e8:	75fb      	strb	r3, [r7, #23]
      break;
 81081ea:	e000      	b.n	81081ee <TIM_SlaveTimer_SetConfig+0x1ae>
      break;
 81081ec:	bf00      	nop
  }

  return status;
 81081ee:	7dfb      	ldrb	r3, [r7, #23]
}
 81081f0:	4618      	mov	r0, r3
 81081f2:	3718      	adds	r7, #24
 81081f4:	46bd      	mov	sp, r7
 81081f6:	bd80      	pop	{r7, pc}
 81081f8:	00200010 	.word	0x00200010
 81081fc:	00100070 	.word	0x00100070
 8108200:	00100060 	.word	0x00100060
 8108204:	00100050 	.word	0x00100050
 8108208:	00100040 	.word	0x00100040
 810820c:	00100030 	.word	0x00100030
 8108210:	00100020 	.word	0x00100020

08108214 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8108214:	b480      	push	{r7}
 8108216:	b087      	sub	sp, #28
 8108218:	af00      	add	r7, sp, #0
 810821a:	60f8      	str	r0, [r7, #12]
 810821c:	60b9      	str	r1, [r7, #8]
 810821e:	607a      	str	r2, [r7, #4]
 8108220:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108222:	68fb      	ldr	r3, [r7, #12]
 8108224:	6a1b      	ldr	r3, [r3, #32]
 8108226:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108228:	68fb      	ldr	r3, [r7, #12]
 810822a:	6a1b      	ldr	r3, [r3, #32]
 810822c:	f023 0201 	bic.w	r2, r3, #1
 8108230:	68fb      	ldr	r3, [r7, #12]
 8108232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108234:	68fb      	ldr	r3, [r7, #12]
 8108236:	699b      	ldr	r3, [r3, #24]
 8108238:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810823a:	68fb      	ldr	r3, [r7, #12]
 810823c:	4a28      	ldr	r2, [pc, #160]	@ (81082e0 <TIM_TI1_SetConfig+0xcc>)
 810823e:	4293      	cmp	r3, r2
 8108240:	d01b      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 8108242:	68fb      	ldr	r3, [r7, #12]
 8108244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108248:	d017      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 810824a:	68fb      	ldr	r3, [r7, #12]
 810824c:	4a25      	ldr	r2, [pc, #148]	@ (81082e4 <TIM_TI1_SetConfig+0xd0>)
 810824e:	4293      	cmp	r3, r2
 8108250:	d013      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 8108252:	68fb      	ldr	r3, [r7, #12]
 8108254:	4a24      	ldr	r2, [pc, #144]	@ (81082e8 <TIM_TI1_SetConfig+0xd4>)
 8108256:	4293      	cmp	r3, r2
 8108258:	d00f      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 810825a:	68fb      	ldr	r3, [r7, #12]
 810825c:	4a23      	ldr	r2, [pc, #140]	@ (81082ec <TIM_TI1_SetConfig+0xd8>)
 810825e:	4293      	cmp	r3, r2
 8108260:	d00b      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 8108262:	68fb      	ldr	r3, [r7, #12]
 8108264:	4a22      	ldr	r2, [pc, #136]	@ (81082f0 <TIM_TI1_SetConfig+0xdc>)
 8108266:	4293      	cmp	r3, r2
 8108268:	d007      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 810826a:	68fb      	ldr	r3, [r7, #12]
 810826c:	4a21      	ldr	r2, [pc, #132]	@ (81082f4 <TIM_TI1_SetConfig+0xe0>)
 810826e:	4293      	cmp	r3, r2
 8108270:	d003      	beq.n	810827a <TIM_TI1_SetConfig+0x66>
 8108272:	68fb      	ldr	r3, [r7, #12]
 8108274:	4a20      	ldr	r2, [pc, #128]	@ (81082f8 <TIM_TI1_SetConfig+0xe4>)
 8108276:	4293      	cmp	r3, r2
 8108278:	d101      	bne.n	810827e <TIM_TI1_SetConfig+0x6a>
 810827a:	2301      	movs	r3, #1
 810827c:	e000      	b.n	8108280 <TIM_TI1_SetConfig+0x6c>
 810827e:	2300      	movs	r3, #0
 8108280:	2b00      	cmp	r3, #0
 8108282:	d008      	beq.n	8108296 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8108284:	697b      	ldr	r3, [r7, #20]
 8108286:	f023 0303 	bic.w	r3, r3, #3
 810828a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810828c:	697a      	ldr	r2, [r7, #20]
 810828e:	687b      	ldr	r3, [r7, #4]
 8108290:	4313      	orrs	r3, r2
 8108292:	617b      	str	r3, [r7, #20]
 8108294:	e003      	b.n	810829e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8108296:	697b      	ldr	r3, [r7, #20]
 8108298:	f043 0301 	orr.w	r3, r3, #1
 810829c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810829e:	697b      	ldr	r3, [r7, #20]
 81082a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 81082a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 81082a6:	683b      	ldr	r3, [r7, #0]
 81082a8:	011b      	lsls	r3, r3, #4
 81082aa:	b2db      	uxtb	r3, r3
 81082ac:	697a      	ldr	r2, [r7, #20]
 81082ae:	4313      	orrs	r3, r2
 81082b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81082b2:	693b      	ldr	r3, [r7, #16]
 81082b4:	f023 030a 	bic.w	r3, r3, #10
 81082b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81082ba:	68bb      	ldr	r3, [r7, #8]
 81082bc:	f003 030a 	and.w	r3, r3, #10
 81082c0:	693a      	ldr	r2, [r7, #16]
 81082c2:	4313      	orrs	r3, r2
 81082c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81082c6:	68fb      	ldr	r3, [r7, #12]
 81082c8:	697a      	ldr	r2, [r7, #20]
 81082ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81082cc:	68fb      	ldr	r3, [r7, #12]
 81082ce:	693a      	ldr	r2, [r7, #16]
 81082d0:	621a      	str	r2, [r3, #32]
}
 81082d2:	bf00      	nop
 81082d4:	371c      	adds	r7, #28
 81082d6:	46bd      	mov	sp, r7
 81082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082dc:	4770      	bx	lr
 81082de:	bf00      	nop
 81082e0:	40010000 	.word	0x40010000
 81082e4:	40000400 	.word	0x40000400
 81082e8:	40000800 	.word	0x40000800
 81082ec:	40000c00 	.word	0x40000c00
 81082f0:	40010400 	.word	0x40010400
 81082f4:	40001800 	.word	0x40001800
 81082f8:	40014000 	.word	0x40014000

081082fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81082fc:	b480      	push	{r7}
 81082fe:	b087      	sub	sp, #28
 8108300:	af00      	add	r7, sp, #0
 8108302:	60f8      	str	r0, [r7, #12]
 8108304:	60b9      	str	r1, [r7, #8]
 8108306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108308:	68fb      	ldr	r3, [r7, #12]
 810830a:	6a1b      	ldr	r3, [r3, #32]
 810830c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810830e:	68fb      	ldr	r3, [r7, #12]
 8108310:	6a1b      	ldr	r3, [r3, #32]
 8108312:	f023 0201 	bic.w	r2, r3, #1
 8108316:	68fb      	ldr	r3, [r7, #12]
 8108318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810831a:	68fb      	ldr	r3, [r7, #12]
 810831c:	699b      	ldr	r3, [r3, #24]
 810831e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108320:	693b      	ldr	r3, [r7, #16]
 8108322:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8108326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8108328:	687b      	ldr	r3, [r7, #4]
 810832a:	011b      	lsls	r3, r3, #4
 810832c:	693a      	ldr	r2, [r7, #16]
 810832e:	4313      	orrs	r3, r2
 8108330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8108332:	697b      	ldr	r3, [r7, #20]
 8108334:	f023 030a 	bic.w	r3, r3, #10
 8108338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810833a:	697a      	ldr	r2, [r7, #20]
 810833c:	68bb      	ldr	r3, [r7, #8]
 810833e:	4313      	orrs	r3, r2
 8108340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8108342:	68fb      	ldr	r3, [r7, #12]
 8108344:	693a      	ldr	r2, [r7, #16]
 8108346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108348:	68fb      	ldr	r3, [r7, #12]
 810834a:	697a      	ldr	r2, [r7, #20]
 810834c:	621a      	str	r2, [r3, #32]
}
 810834e:	bf00      	nop
 8108350:	371c      	adds	r7, #28
 8108352:	46bd      	mov	sp, r7
 8108354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108358:	4770      	bx	lr

0810835a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810835a:	b480      	push	{r7}
 810835c:	b087      	sub	sp, #28
 810835e:	af00      	add	r7, sp, #0
 8108360:	60f8      	str	r0, [r7, #12]
 8108362:	60b9      	str	r1, [r7, #8]
 8108364:	607a      	str	r2, [r7, #4]
 8108366:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8108368:	68fb      	ldr	r3, [r7, #12]
 810836a:	6a1b      	ldr	r3, [r3, #32]
 810836c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810836e:	68fb      	ldr	r3, [r7, #12]
 8108370:	6a1b      	ldr	r3, [r3, #32]
 8108372:	f023 0210 	bic.w	r2, r3, #16
 8108376:	68fb      	ldr	r3, [r7, #12]
 8108378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810837a:	68fb      	ldr	r3, [r7, #12]
 810837c:	699b      	ldr	r3, [r3, #24]
 810837e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8108380:	693b      	ldr	r3, [r7, #16]
 8108382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	021b      	lsls	r3, r3, #8
 810838c:	693a      	ldr	r2, [r7, #16]
 810838e:	4313      	orrs	r3, r2
 8108390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108392:	693b      	ldr	r3, [r7, #16]
 8108394:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8108398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810839a:	683b      	ldr	r3, [r7, #0]
 810839c:	031b      	lsls	r3, r3, #12
 810839e:	b29b      	uxth	r3, r3
 81083a0:	693a      	ldr	r2, [r7, #16]
 81083a2:	4313      	orrs	r3, r2
 81083a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81083a6:	697b      	ldr	r3, [r7, #20]
 81083a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 81083ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 81083ae:	68bb      	ldr	r3, [r7, #8]
 81083b0:	011b      	lsls	r3, r3, #4
 81083b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 81083b6:	697a      	ldr	r2, [r7, #20]
 81083b8:	4313      	orrs	r3, r2
 81083ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81083bc:	68fb      	ldr	r3, [r7, #12]
 81083be:	693a      	ldr	r2, [r7, #16]
 81083c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81083c2:	68fb      	ldr	r3, [r7, #12]
 81083c4:	697a      	ldr	r2, [r7, #20]
 81083c6:	621a      	str	r2, [r3, #32]
}
 81083c8:	bf00      	nop
 81083ca:	371c      	adds	r7, #28
 81083cc:	46bd      	mov	sp, r7
 81083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083d2:	4770      	bx	lr

081083d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81083d4:	b480      	push	{r7}
 81083d6:	b087      	sub	sp, #28
 81083d8:	af00      	add	r7, sp, #0
 81083da:	60f8      	str	r0, [r7, #12]
 81083dc:	60b9      	str	r1, [r7, #8]
 81083de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 81083e0:	68fb      	ldr	r3, [r7, #12]
 81083e2:	6a1b      	ldr	r3, [r3, #32]
 81083e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81083e6:	68fb      	ldr	r3, [r7, #12]
 81083e8:	6a1b      	ldr	r3, [r3, #32]
 81083ea:	f023 0210 	bic.w	r2, r3, #16
 81083ee:	68fb      	ldr	r3, [r7, #12]
 81083f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81083f2:	68fb      	ldr	r3, [r7, #12]
 81083f4:	699b      	ldr	r3, [r3, #24]
 81083f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81083f8:	693b      	ldr	r3, [r7, #16]
 81083fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81083fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	031b      	lsls	r3, r3, #12
 8108404:	693a      	ldr	r2, [r7, #16]
 8108406:	4313      	orrs	r3, r2
 8108408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810840a:	697b      	ldr	r3, [r7, #20]
 810840c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8108410:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8108412:	68bb      	ldr	r3, [r7, #8]
 8108414:	011b      	lsls	r3, r3, #4
 8108416:	697a      	ldr	r2, [r7, #20]
 8108418:	4313      	orrs	r3, r2
 810841a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810841c:	68fb      	ldr	r3, [r7, #12]
 810841e:	693a      	ldr	r2, [r7, #16]
 8108420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108422:	68fb      	ldr	r3, [r7, #12]
 8108424:	697a      	ldr	r2, [r7, #20]
 8108426:	621a      	str	r2, [r3, #32]
}
 8108428:	bf00      	nop
 810842a:	371c      	adds	r7, #28
 810842c:	46bd      	mov	sp, r7
 810842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108432:	4770      	bx	lr

08108434 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8108434:	b480      	push	{r7}
 8108436:	b087      	sub	sp, #28
 8108438:	af00      	add	r7, sp, #0
 810843a:	60f8      	str	r0, [r7, #12]
 810843c:	60b9      	str	r1, [r7, #8]
 810843e:	607a      	str	r2, [r7, #4]
 8108440:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8108442:	68fb      	ldr	r3, [r7, #12]
 8108444:	6a1b      	ldr	r3, [r3, #32]
 8108446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108448:	68fb      	ldr	r3, [r7, #12]
 810844a:	6a1b      	ldr	r3, [r3, #32]
 810844c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8108450:	68fb      	ldr	r3, [r7, #12]
 8108452:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8108454:	68fb      	ldr	r3, [r7, #12]
 8108456:	69db      	ldr	r3, [r3, #28]
 8108458:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810845a:	693b      	ldr	r3, [r7, #16]
 810845c:	f023 0303 	bic.w	r3, r3, #3
 8108460:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8108462:	693a      	ldr	r2, [r7, #16]
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	4313      	orrs	r3, r2
 8108468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810846a:	693b      	ldr	r3, [r7, #16]
 810846c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8108470:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8108472:	683b      	ldr	r3, [r7, #0]
 8108474:	011b      	lsls	r3, r3, #4
 8108476:	b2db      	uxtb	r3, r3
 8108478:	693a      	ldr	r2, [r7, #16]
 810847a:	4313      	orrs	r3, r2
 810847c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810847e:	697b      	ldr	r3, [r7, #20]
 8108480:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8108484:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8108486:	68bb      	ldr	r3, [r7, #8]
 8108488:	021b      	lsls	r3, r3, #8
 810848a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 810848e:	697a      	ldr	r2, [r7, #20]
 8108490:	4313      	orrs	r3, r2
 8108492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8108494:	68fb      	ldr	r3, [r7, #12]
 8108496:	693a      	ldr	r2, [r7, #16]
 8108498:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810849a:	68fb      	ldr	r3, [r7, #12]
 810849c:	697a      	ldr	r2, [r7, #20]
 810849e:	621a      	str	r2, [r3, #32]
}
 81084a0:	bf00      	nop
 81084a2:	371c      	adds	r7, #28
 81084a4:	46bd      	mov	sp, r7
 81084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81084aa:	4770      	bx	lr

081084ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81084ac:	b480      	push	{r7}
 81084ae:	b087      	sub	sp, #28
 81084b0:	af00      	add	r7, sp, #0
 81084b2:	60f8      	str	r0, [r7, #12]
 81084b4:	60b9      	str	r1, [r7, #8]
 81084b6:	607a      	str	r2, [r7, #4]
 81084b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 81084ba:	68fb      	ldr	r3, [r7, #12]
 81084bc:	6a1b      	ldr	r3, [r3, #32]
 81084be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81084c0:	68fb      	ldr	r3, [r7, #12]
 81084c2:	6a1b      	ldr	r3, [r3, #32]
 81084c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 81084c8:	68fb      	ldr	r3, [r7, #12]
 81084ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81084cc:	68fb      	ldr	r3, [r7, #12]
 81084ce:	69db      	ldr	r3, [r3, #28]
 81084d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 81084d2:	693b      	ldr	r3, [r7, #16]
 81084d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81084d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 81084da:	687b      	ldr	r3, [r7, #4]
 81084dc:	021b      	lsls	r3, r3, #8
 81084de:	693a      	ldr	r2, [r7, #16]
 81084e0:	4313      	orrs	r3, r2
 81084e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 81084e4:	693b      	ldr	r3, [r7, #16]
 81084e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81084ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 81084ec:	683b      	ldr	r3, [r7, #0]
 81084ee:	031b      	lsls	r3, r3, #12
 81084f0:	b29b      	uxth	r3, r3
 81084f2:	693a      	ldr	r2, [r7, #16]
 81084f4:	4313      	orrs	r3, r2
 81084f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 81084f8:	697b      	ldr	r3, [r7, #20]
 81084fa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 81084fe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8108500:	68bb      	ldr	r3, [r7, #8]
 8108502:	031b      	lsls	r3, r3, #12
 8108504:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8108508:	697a      	ldr	r2, [r7, #20]
 810850a:	4313      	orrs	r3, r2
 810850c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810850e:	68fb      	ldr	r3, [r7, #12]
 8108510:	693a      	ldr	r2, [r7, #16]
 8108512:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8108514:	68fb      	ldr	r3, [r7, #12]
 8108516:	697a      	ldr	r2, [r7, #20]
 8108518:	621a      	str	r2, [r3, #32]
}
 810851a:	bf00      	nop
 810851c:	371c      	adds	r7, #28
 810851e:	46bd      	mov	sp, r7
 8108520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108524:	4770      	bx	lr

08108526 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8108526:	b480      	push	{r7}
 8108528:	b085      	sub	sp, #20
 810852a:	af00      	add	r7, sp, #0
 810852c:	6078      	str	r0, [r7, #4]
 810852e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8108530:	687b      	ldr	r3, [r7, #4]
 8108532:	689b      	ldr	r3, [r3, #8]
 8108534:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8108536:	68fb      	ldr	r3, [r7, #12]
 8108538:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810853c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8108542:	683a      	ldr	r2, [r7, #0]
 8108544:	68fb      	ldr	r3, [r7, #12]
 8108546:	4313      	orrs	r3, r2
 8108548:	f043 0307 	orr.w	r3, r3, #7
 810854c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	68fa      	ldr	r2, [r7, #12]
 8108552:	609a      	str	r2, [r3, #8]
}
 8108554:	bf00      	nop
 8108556:	3714      	adds	r7, #20
 8108558:	46bd      	mov	sp, r7
 810855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810855e:	4770      	bx	lr

08108560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8108560:	b480      	push	{r7}
 8108562:	b087      	sub	sp, #28
 8108564:	af00      	add	r7, sp, #0
 8108566:	60f8      	str	r0, [r7, #12]
 8108568:	60b9      	str	r1, [r7, #8]
 810856a:	607a      	str	r2, [r7, #4]
 810856c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810856e:	68fb      	ldr	r3, [r7, #12]
 8108570:	689b      	ldr	r3, [r3, #8]
 8108572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108574:	697b      	ldr	r3, [r7, #20]
 8108576:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810857a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810857c:	683b      	ldr	r3, [r7, #0]
 810857e:	021a      	lsls	r2, r3, #8
 8108580:	687b      	ldr	r3, [r7, #4]
 8108582:	431a      	orrs	r2, r3
 8108584:	68bb      	ldr	r3, [r7, #8]
 8108586:	4313      	orrs	r3, r2
 8108588:	697a      	ldr	r2, [r7, #20]
 810858a:	4313      	orrs	r3, r2
 810858c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810858e:	68fb      	ldr	r3, [r7, #12]
 8108590:	697a      	ldr	r2, [r7, #20]
 8108592:	609a      	str	r2, [r3, #8]
}
 8108594:	bf00      	nop
 8108596:	371c      	adds	r7, #28
 8108598:	46bd      	mov	sp, r7
 810859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810859e:	4770      	bx	lr

081085a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81085a0:	b480      	push	{r7}
 81085a2:	b087      	sub	sp, #28
 81085a4:	af00      	add	r7, sp, #0
 81085a6:	60f8      	str	r0, [r7, #12]
 81085a8:	60b9      	str	r1, [r7, #8]
 81085aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81085ac:	68bb      	ldr	r3, [r7, #8]
 81085ae:	f003 031f 	and.w	r3, r3, #31
 81085b2:	2201      	movs	r2, #1
 81085b4:	fa02 f303 	lsl.w	r3, r2, r3
 81085b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81085ba:	68fb      	ldr	r3, [r7, #12]
 81085bc:	6a1a      	ldr	r2, [r3, #32]
 81085be:	697b      	ldr	r3, [r7, #20]
 81085c0:	43db      	mvns	r3, r3
 81085c2:	401a      	ands	r2, r3
 81085c4:	68fb      	ldr	r3, [r7, #12]
 81085c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81085c8:	68fb      	ldr	r3, [r7, #12]
 81085ca:	6a1a      	ldr	r2, [r3, #32]
 81085cc:	68bb      	ldr	r3, [r7, #8]
 81085ce:	f003 031f 	and.w	r3, r3, #31
 81085d2:	6879      	ldr	r1, [r7, #4]
 81085d4:	fa01 f303 	lsl.w	r3, r1, r3
 81085d8:	431a      	orrs	r2, r3
 81085da:	68fb      	ldr	r3, [r7, #12]
 81085dc:	621a      	str	r2, [r3, #32]
}
 81085de:	bf00      	nop
 81085e0:	371c      	adds	r7, #28
 81085e2:	46bd      	mov	sp, r7
 81085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085e8:	4770      	bx	lr
	...

081085ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 81085ec:	b480      	push	{r7}
 81085ee:	b085      	sub	sp, #20
 81085f0:	af00      	add	r7, sp, #0
 81085f2:	6078      	str	r0, [r7, #4]
 81085f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81085f6:	687b      	ldr	r3, [r7, #4]
 81085f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81085fc:	2b01      	cmp	r3, #1
 81085fe:	d101      	bne.n	8108604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108600:	2302      	movs	r3, #2
 8108602:	e06d      	b.n	81086e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	2201      	movs	r2, #1
 8108608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810860c:	687b      	ldr	r3, [r7, #4]
 810860e:	2202      	movs	r2, #2
 8108610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108614:	687b      	ldr	r3, [r7, #4]
 8108616:	681b      	ldr	r3, [r3, #0]
 8108618:	685b      	ldr	r3, [r3, #4]
 810861a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810861c:	687b      	ldr	r3, [r7, #4]
 810861e:	681b      	ldr	r3, [r3, #0]
 8108620:	689b      	ldr	r3, [r3, #8]
 8108622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	681b      	ldr	r3, [r3, #0]
 8108628:	4a30      	ldr	r2, [pc, #192]	@ (81086ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810862a:	4293      	cmp	r3, r2
 810862c:	d004      	beq.n	8108638 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810862e:	687b      	ldr	r3, [r7, #4]
 8108630:	681b      	ldr	r3, [r3, #0]
 8108632:	4a2f      	ldr	r2, [pc, #188]	@ (81086f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108634:	4293      	cmp	r3, r2
 8108636:	d108      	bne.n	810864a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108638:	68fb      	ldr	r3, [r7, #12]
 810863a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810863e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108640:	683b      	ldr	r3, [r7, #0]
 8108642:	685b      	ldr	r3, [r3, #4]
 8108644:	68fa      	ldr	r2, [r7, #12]
 8108646:	4313      	orrs	r3, r2
 8108648:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810864a:	68fb      	ldr	r3, [r7, #12]
 810864c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108650:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108652:	683b      	ldr	r3, [r7, #0]
 8108654:	681b      	ldr	r3, [r3, #0]
 8108656:	68fa      	ldr	r2, [r7, #12]
 8108658:	4313      	orrs	r3, r2
 810865a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	681b      	ldr	r3, [r3, #0]
 8108660:	68fa      	ldr	r2, [r7, #12]
 8108662:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	681b      	ldr	r3, [r3, #0]
 8108668:	4a20      	ldr	r2, [pc, #128]	@ (81086ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810866a:	4293      	cmp	r3, r2
 810866c:	d022      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810866e:	687b      	ldr	r3, [r7, #4]
 8108670:	681b      	ldr	r3, [r3, #0]
 8108672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108676:	d01d      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108678:	687b      	ldr	r3, [r7, #4]
 810867a:	681b      	ldr	r3, [r3, #0]
 810867c:	4a1d      	ldr	r2, [pc, #116]	@ (81086f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810867e:	4293      	cmp	r3, r2
 8108680:	d018      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108682:	687b      	ldr	r3, [r7, #4]
 8108684:	681b      	ldr	r3, [r3, #0]
 8108686:	4a1c      	ldr	r2, [pc, #112]	@ (81086f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108688:	4293      	cmp	r3, r2
 810868a:	d013      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810868c:	687b      	ldr	r3, [r7, #4]
 810868e:	681b      	ldr	r3, [r3, #0]
 8108690:	4a1a      	ldr	r2, [pc, #104]	@ (81086fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8108692:	4293      	cmp	r3, r2
 8108694:	d00e      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108696:	687b      	ldr	r3, [r7, #4]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	4a15      	ldr	r2, [pc, #84]	@ (81086f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810869c:	4293      	cmp	r3, r2
 810869e:	d009      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81086a0:	687b      	ldr	r3, [r7, #4]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	4a16      	ldr	r2, [pc, #88]	@ (8108700 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81086a6:	4293      	cmp	r3, r2
 81086a8:	d004      	beq.n	81086b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81086aa:	687b      	ldr	r3, [r7, #4]
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	4a15      	ldr	r2, [pc, #84]	@ (8108704 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81086b0:	4293      	cmp	r3, r2
 81086b2:	d10c      	bne.n	81086ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81086b4:	68bb      	ldr	r3, [r7, #8]
 81086b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81086ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81086bc:	683b      	ldr	r3, [r7, #0]
 81086be:	689b      	ldr	r3, [r3, #8]
 81086c0:	68ba      	ldr	r2, [r7, #8]
 81086c2:	4313      	orrs	r3, r2
 81086c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81086c6:	687b      	ldr	r3, [r7, #4]
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	68ba      	ldr	r2, [r7, #8]
 81086cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81086ce:	687b      	ldr	r3, [r7, #4]
 81086d0:	2201      	movs	r2, #1
 81086d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	2200      	movs	r2, #0
 81086da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81086de:	2300      	movs	r3, #0
}
 81086e0:	4618      	mov	r0, r3
 81086e2:	3714      	adds	r7, #20
 81086e4:	46bd      	mov	sp, r7
 81086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086ea:	4770      	bx	lr
 81086ec:	40010000 	.word	0x40010000
 81086f0:	40010400 	.word	0x40010400
 81086f4:	40000400 	.word	0x40000400
 81086f8:	40000800 	.word	0x40000800
 81086fc:	40000c00 	.word	0x40000c00
 8108700:	40001800 	.word	0x40001800
 8108704:	40014000 	.word	0x40014000

08108708 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108708:	b480      	push	{r7}
 810870a:	b083      	sub	sp, #12
 810870c:	af00      	add	r7, sp, #0
 810870e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108710:	bf00      	nop
 8108712:	370c      	adds	r7, #12
 8108714:	46bd      	mov	sp, r7
 8108716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810871a:	4770      	bx	lr

0810871c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810871c:	b480      	push	{r7}
 810871e:	b083      	sub	sp, #12
 8108720:	af00      	add	r7, sp, #0
 8108722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8108724:	bf00      	nop
 8108726:	370c      	adds	r7, #12
 8108728:	46bd      	mov	sp, r7
 810872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810872e:	4770      	bx	lr

08108730 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108730:	b480      	push	{r7}
 8108732:	b083      	sub	sp, #12
 8108734:	af00      	add	r7, sp, #0
 8108736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8108738:	bf00      	nop
 810873a:	370c      	adds	r7, #12
 810873c:	46bd      	mov	sp, r7
 810873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108742:	4770      	bx	lr

08108744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108744:	b580      	push	{r7, lr}
 8108746:	b082      	sub	sp, #8
 8108748:	af00      	add	r7, sp, #0
 810874a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810874c:	687b      	ldr	r3, [r7, #4]
 810874e:	2b00      	cmp	r3, #0
 8108750:	d101      	bne.n	8108756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108752:	2301      	movs	r3, #1
 8108754:	e042      	b.n	81087dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108756:	687b      	ldr	r3, [r7, #4]
 8108758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810875c:	2b00      	cmp	r3, #0
 810875e:	d106      	bne.n	810876e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	2200      	movs	r2, #0
 8108764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108768:	6878      	ldr	r0, [r7, #4]
 810876a:	f7fa fbb9 	bl	8102ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810876e:	687b      	ldr	r3, [r7, #4]
 8108770:	2224      	movs	r2, #36	@ 0x24
 8108772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8108776:	687b      	ldr	r3, [r7, #4]
 8108778:	681b      	ldr	r3, [r3, #0]
 810877a:	681a      	ldr	r2, [r3, #0]
 810877c:	687b      	ldr	r3, [r7, #4]
 810877e:	681b      	ldr	r3, [r3, #0]
 8108780:	f022 0201 	bic.w	r2, r2, #1
 8108784:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108786:	687b      	ldr	r3, [r7, #4]
 8108788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810878a:	2b00      	cmp	r3, #0
 810878c:	d002      	beq.n	8108794 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810878e:	6878      	ldr	r0, [r7, #4]
 8108790:	f000 fe1e 	bl	81093d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108794:	6878      	ldr	r0, [r7, #4]
 8108796:	f000 f8b3 	bl	8108900 <UART_SetConfig>
 810879a:	4603      	mov	r3, r0
 810879c:	2b01      	cmp	r3, #1
 810879e:	d101      	bne.n	81087a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 81087a0:	2301      	movs	r3, #1
 81087a2:	e01b      	b.n	81087dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	685a      	ldr	r2, [r3, #4]
 81087aa:	687b      	ldr	r3, [r7, #4]
 81087ac:	681b      	ldr	r3, [r3, #0]
 81087ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81087b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	681b      	ldr	r3, [r3, #0]
 81087b8:	689a      	ldr	r2, [r3, #8]
 81087ba:	687b      	ldr	r3, [r7, #4]
 81087bc:	681b      	ldr	r3, [r3, #0]
 81087be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81087c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	681b      	ldr	r3, [r3, #0]
 81087c8:	681a      	ldr	r2, [r3, #0]
 81087ca:	687b      	ldr	r3, [r7, #4]
 81087cc:	681b      	ldr	r3, [r3, #0]
 81087ce:	f042 0201 	orr.w	r2, r2, #1
 81087d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81087d4:	6878      	ldr	r0, [r7, #4]
 81087d6:	f000 fe9d 	bl	8109514 <UART_CheckIdleState>
 81087da:	4603      	mov	r3, r0
}
 81087dc:	4618      	mov	r0, r3
 81087de:	3708      	adds	r7, #8
 81087e0:	46bd      	mov	sp, r7
 81087e2:	bd80      	pop	{r7, pc}

081087e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81087e4:	b580      	push	{r7, lr}
 81087e6:	b08a      	sub	sp, #40	@ 0x28
 81087e8:	af02      	add	r7, sp, #8
 81087ea:	60f8      	str	r0, [r7, #12]
 81087ec:	60b9      	str	r1, [r7, #8]
 81087ee:	603b      	str	r3, [r7, #0]
 81087f0:	4613      	mov	r3, r2
 81087f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81087f4:	68fb      	ldr	r3, [r7, #12]
 81087f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81087fa:	2b20      	cmp	r3, #32
 81087fc:	d17b      	bne.n	81088f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81087fe:	68bb      	ldr	r3, [r7, #8]
 8108800:	2b00      	cmp	r3, #0
 8108802:	d002      	beq.n	810880a <HAL_UART_Transmit+0x26>
 8108804:	88fb      	ldrh	r3, [r7, #6]
 8108806:	2b00      	cmp	r3, #0
 8108808:	d101      	bne.n	810880e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810880a:	2301      	movs	r3, #1
 810880c:	e074      	b.n	81088f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810880e:	68fb      	ldr	r3, [r7, #12]
 8108810:	2200      	movs	r2, #0
 8108812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108816:	68fb      	ldr	r3, [r7, #12]
 8108818:	2221      	movs	r2, #33	@ 0x21
 810881a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810881e:	f7fa fda5 	bl	810336c <HAL_GetTick>
 8108822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108824:	68fb      	ldr	r3, [r7, #12]
 8108826:	88fa      	ldrh	r2, [r7, #6]
 8108828:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 810882c:	68fb      	ldr	r3, [r7, #12]
 810882e:	88fa      	ldrh	r2, [r7, #6]
 8108830:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108834:	68fb      	ldr	r3, [r7, #12]
 8108836:	689b      	ldr	r3, [r3, #8]
 8108838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810883c:	d108      	bne.n	8108850 <HAL_UART_Transmit+0x6c>
 810883e:	68fb      	ldr	r3, [r7, #12]
 8108840:	691b      	ldr	r3, [r3, #16]
 8108842:	2b00      	cmp	r3, #0
 8108844:	d104      	bne.n	8108850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108846:	2300      	movs	r3, #0
 8108848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810884a:	68bb      	ldr	r3, [r7, #8]
 810884c:	61bb      	str	r3, [r7, #24]
 810884e:	e003      	b.n	8108858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108850:	68bb      	ldr	r3, [r7, #8]
 8108852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108854:	2300      	movs	r3, #0
 8108856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108858:	e030      	b.n	81088bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810885a:	683b      	ldr	r3, [r7, #0]
 810885c:	9300      	str	r3, [sp, #0]
 810885e:	697b      	ldr	r3, [r7, #20]
 8108860:	2200      	movs	r2, #0
 8108862:	2180      	movs	r1, #128	@ 0x80
 8108864:	68f8      	ldr	r0, [r7, #12]
 8108866:	f000 feff 	bl	8109668 <UART_WaitOnFlagUntilTimeout>
 810886a:	4603      	mov	r3, r0
 810886c:	2b00      	cmp	r3, #0
 810886e:	d005      	beq.n	810887c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108870:	68fb      	ldr	r3, [r7, #12]
 8108872:	2220      	movs	r2, #32
 8108874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8108878:	2303      	movs	r3, #3
 810887a:	e03d      	b.n	81088f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 810887c:	69fb      	ldr	r3, [r7, #28]
 810887e:	2b00      	cmp	r3, #0
 8108880:	d10b      	bne.n	810889a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108882:	69bb      	ldr	r3, [r7, #24]
 8108884:	881b      	ldrh	r3, [r3, #0]
 8108886:	461a      	mov	r2, r3
 8108888:	68fb      	ldr	r3, [r7, #12]
 810888a:	681b      	ldr	r3, [r3, #0]
 810888c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108890:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8108892:	69bb      	ldr	r3, [r7, #24]
 8108894:	3302      	adds	r3, #2
 8108896:	61bb      	str	r3, [r7, #24]
 8108898:	e007      	b.n	81088aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810889a:	69fb      	ldr	r3, [r7, #28]
 810889c:	781a      	ldrb	r2, [r3, #0]
 810889e:	68fb      	ldr	r3, [r7, #12]
 81088a0:	681b      	ldr	r3, [r3, #0]
 81088a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81088a4:	69fb      	ldr	r3, [r7, #28]
 81088a6:	3301      	adds	r3, #1
 81088a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81088aa:	68fb      	ldr	r3, [r7, #12]
 81088ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81088b0:	b29b      	uxth	r3, r3
 81088b2:	3b01      	subs	r3, #1
 81088b4:	b29a      	uxth	r2, r3
 81088b6:	68fb      	ldr	r3, [r7, #12]
 81088b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81088bc:	68fb      	ldr	r3, [r7, #12]
 81088be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81088c2:	b29b      	uxth	r3, r3
 81088c4:	2b00      	cmp	r3, #0
 81088c6:	d1c8      	bne.n	810885a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81088c8:	683b      	ldr	r3, [r7, #0]
 81088ca:	9300      	str	r3, [sp, #0]
 81088cc:	697b      	ldr	r3, [r7, #20]
 81088ce:	2200      	movs	r2, #0
 81088d0:	2140      	movs	r1, #64	@ 0x40
 81088d2:	68f8      	ldr	r0, [r7, #12]
 81088d4:	f000 fec8 	bl	8109668 <UART_WaitOnFlagUntilTimeout>
 81088d8:	4603      	mov	r3, r0
 81088da:	2b00      	cmp	r3, #0
 81088dc:	d005      	beq.n	81088ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81088de:	68fb      	ldr	r3, [r7, #12]
 81088e0:	2220      	movs	r2, #32
 81088e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81088e6:	2303      	movs	r3, #3
 81088e8:	e006      	b.n	81088f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81088ea:	68fb      	ldr	r3, [r7, #12]
 81088ec:	2220      	movs	r2, #32
 81088ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81088f2:	2300      	movs	r3, #0
 81088f4:	e000      	b.n	81088f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81088f6:	2302      	movs	r3, #2
  }
}
 81088f8:	4618      	mov	r0, r3
 81088fa:	3720      	adds	r7, #32
 81088fc:	46bd      	mov	sp, r7
 81088fe:	bd80      	pop	{r7, pc}

08108900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108904:	b092      	sub	sp, #72	@ 0x48
 8108906:	af00      	add	r7, sp, #0
 8108908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810890a:	2300      	movs	r3, #0
 810890c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108910:	697b      	ldr	r3, [r7, #20]
 8108912:	689a      	ldr	r2, [r3, #8]
 8108914:	697b      	ldr	r3, [r7, #20]
 8108916:	691b      	ldr	r3, [r3, #16]
 8108918:	431a      	orrs	r2, r3
 810891a:	697b      	ldr	r3, [r7, #20]
 810891c:	695b      	ldr	r3, [r3, #20]
 810891e:	431a      	orrs	r2, r3
 8108920:	697b      	ldr	r3, [r7, #20]
 8108922:	69db      	ldr	r3, [r3, #28]
 8108924:	4313      	orrs	r3, r2
 8108926:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108928:	697b      	ldr	r3, [r7, #20]
 810892a:	681b      	ldr	r3, [r3, #0]
 810892c:	681a      	ldr	r2, [r3, #0]
 810892e:	4bbd      	ldr	r3, [pc, #756]	@ (8108c24 <UART_SetConfig+0x324>)
 8108930:	4013      	ands	r3, r2
 8108932:	697a      	ldr	r2, [r7, #20]
 8108934:	6812      	ldr	r2, [r2, #0]
 8108936:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108938:	430b      	orrs	r3, r1
 810893a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810893c:	697b      	ldr	r3, [r7, #20]
 810893e:	681b      	ldr	r3, [r3, #0]
 8108940:	685b      	ldr	r3, [r3, #4]
 8108942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8108946:	697b      	ldr	r3, [r7, #20]
 8108948:	68da      	ldr	r2, [r3, #12]
 810894a:	697b      	ldr	r3, [r7, #20]
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	430a      	orrs	r2, r1
 8108950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108952:	697b      	ldr	r3, [r7, #20]
 8108954:	699b      	ldr	r3, [r3, #24]
 8108956:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108958:	697b      	ldr	r3, [r7, #20]
 810895a:	681b      	ldr	r3, [r3, #0]
 810895c:	4ab2      	ldr	r2, [pc, #712]	@ (8108c28 <UART_SetConfig+0x328>)
 810895e:	4293      	cmp	r3, r2
 8108960:	d004      	beq.n	810896c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108962:	697b      	ldr	r3, [r7, #20]
 8108964:	6a1b      	ldr	r3, [r3, #32]
 8108966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108968:	4313      	orrs	r3, r2
 810896a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810896c:	697b      	ldr	r3, [r7, #20]
 810896e:	681b      	ldr	r3, [r3, #0]
 8108970:	689b      	ldr	r3, [r3, #8]
 8108972:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8108976:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810897a:	697a      	ldr	r2, [r7, #20]
 810897c:	6812      	ldr	r2, [r2, #0]
 810897e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8108980:	430b      	orrs	r3, r1
 8108982:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108984:	697b      	ldr	r3, [r7, #20]
 8108986:	681b      	ldr	r3, [r3, #0]
 8108988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810898a:	f023 010f 	bic.w	r1, r3, #15
 810898e:	697b      	ldr	r3, [r7, #20]
 8108990:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8108992:	697b      	ldr	r3, [r7, #20]
 8108994:	681b      	ldr	r3, [r3, #0]
 8108996:	430a      	orrs	r2, r1
 8108998:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810899a:	697b      	ldr	r3, [r7, #20]
 810899c:	681b      	ldr	r3, [r3, #0]
 810899e:	4aa3      	ldr	r2, [pc, #652]	@ (8108c2c <UART_SetConfig+0x32c>)
 81089a0:	4293      	cmp	r3, r2
 81089a2:	d177      	bne.n	8108a94 <UART_SetConfig+0x194>
 81089a4:	4ba2      	ldr	r3, [pc, #648]	@ (8108c30 <UART_SetConfig+0x330>)
 81089a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81089a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81089ac:	2b28      	cmp	r3, #40	@ 0x28
 81089ae:	d86d      	bhi.n	8108a8c <UART_SetConfig+0x18c>
 81089b0:	a201      	add	r2, pc, #4	@ (adr r2, 81089b8 <UART_SetConfig+0xb8>)
 81089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81089b6:	bf00      	nop
 81089b8:	08108a5d 	.word	0x08108a5d
 81089bc:	08108a8d 	.word	0x08108a8d
 81089c0:	08108a8d 	.word	0x08108a8d
 81089c4:	08108a8d 	.word	0x08108a8d
 81089c8:	08108a8d 	.word	0x08108a8d
 81089cc:	08108a8d 	.word	0x08108a8d
 81089d0:	08108a8d 	.word	0x08108a8d
 81089d4:	08108a8d 	.word	0x08108a8d
 81089d8:	08108a65 	.word	0x08108a65
 81089dc:	08108a8d 	.word	0x08108a8d
 81089e0:	08108a8d 	.word	0x08108a8d
 81089e4:	08108a8d 	.word	0x08108a8d
 81089e8:	08108a8d 	.word	0x08108a8d
 81089ec:	08108a8d 	.word	0x08108a8d
 81089f0:	08108a8d 	.word	0x08108a8d
 81089f4:	08108a8d 	.word	0x08108a8d
 81089f8:	08108a6d 	.word	0x08108a6d
 81089fc:	08108a8d 	.word	0x08108a8d
 8108a00:	08108a8d 	.word	0x08108a8d
 8108a04:	08108a8d 	.word	0x08108a8d
 8108a08:	08108a8d 	.word	0x08108a8d
 8108a0c:	08108a8d 	.word	0x08108a8d
 8108a10:	08108a8d 	.word	0x08108a8d
 8108a14:	08108a8d 	.word	0x08108a8d
 8108a18:	08108a75 	.word	0x08108a75
 8108a1c:	08108a8d 	.word	0x08108a8d
 8108a20:	08108a8d 	.word	0x08108a8d
 8108a24:	08108a8d 	.word	0x08108a8d
 8108a28:	08108a8d 	.word	0x08108a8d
 8108a2c:	08108a8d 	.word	0x08108a8d
 8108a30:	08108a8d 	.word	0x08108a8d
 8108a34:	08108a8d 	.word	0x08108a8d
 8108a38:	08108a7d 	.word	0x08108a7d
 8108a3c:	08108a8d 	.word	0x08108a8d
 8108a40:	08108a8d 	.word	0x08108a8d
 8108a44:	08108a8d 	.word	0x08108a8d
 8108a48:	08108a8d 	.word	0x08108a8d
 8108a4c:	08108a8d 	.word	0x08108a8d
 8108a50:	08108a8d 	.word	0x08108a8d
 8108a54:	08108a8d 	.word	0x08108a8d
 8108a58:	08108a85 	.word	0x08108a85
 8108a5c:	2301      	movs	r3, #1
 8108a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a62:	e220      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a64:	2304      	movs	r3, #4
 8108a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a6a:	e21c      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a6c:	2308      	movs	r3, #8
 8108a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a72:	e218      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a74:	2310      	movs	r3, #16
 8108a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a7a:	e214      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a7c:	2320      	movs	r3, #32
 8108a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a82:	e210      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a84:	2340      	movs	r3, #64	@ 0x40
 8108a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a8a:	e20c      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a8c:	2380      	movs	r3, #128	@ 0x80
 8108a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108a92:	e208      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108a94:	697b      	ldr	r3, [r7, #20]
 8108a96:	681b      	ldr	r3, [r3, #0]
 8108a98:	4a66      	ldr	r2, [pc, #408]	@ (8108c34 <UART_SetConfig+0x334>)
 8108a9a:	4293      	cmp	r3, r2
 8108a9c:	d130      	bne.n	8108b00 <UART_SetConfig+0x200>
 8108a9e:	4b64      	ldr	r3, [pc, #400]	@ (8108c30 <UART_SetConfig+0x330>)
 8108aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108aa2:	f003 0307 	and.w	r3, r3, #7
 8108aa6:	2b05      	cmp	r3, #5
 8108aa8:	d826      	bhi.n	8108af8 <UART_SetConfig+0x1f8>
 8108aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8108ab0 <UART_SetConfig+0x1b0>)
 8108aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ab0:	08108ac9 	.word	0x08108ac9
 8108ab4:	08108ad1 	.word	0x08108ad1
 8108ab8:	08108ad9 	.word	0x08108ad9
 8108abc:	08108ae1 	.word	0x08108ae1
 8108ac0:	08108ae9 	.word	0x08108ae9
 8108ac4:	08108af1 	.word	0x08108af1
 8108ac8:	2300      	movs	r3, #0
 8108aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ace:	e1ea      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108ad0:	2304      	movs	r3, #4
 8108ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ad6:	e1e6      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108ad8:	2308      	movs	r3, #8
 8108ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ade:	e1e2      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108ae0:	2310      	movs	r3, #16
 8108ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ae6:	e1de      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108ae8:	2320      	movs	r3, #32
 8108aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108aee:	e1da      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108af0:	2340      	movs	r3, #64	@ 0x40
 8108af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108af6:	e1d6      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108af8:	2380      	movs	r3, #128	@ 0x80
 8108afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108afe:	e1d2      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b00:	697b      	ldr	r3, [r7, #20]
 8108b02:	681b      	ldr	r3, [r3, #0]
 8108b04:	4a4c      	ldr	r2, [pc, #304]	@ (8108c38 <UART_SetConfig+0x338>)
 8108b06:	4293      	cmp	r3, r2
 8108b08:	d130      	bne.n	8108b6c <UART_SetConfig+0x26c>
 8108b0a:	4b49      	ldr	r3, [pc, #292]	@ (8108c30 <UART_SetConfig+0x330>)
 8108b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108b0e:	f003 0307 	and.w	r3, r3, #7
 8108b12:	2b05      	cmp	r3, #5
 8108b14:	d826      	bhi.n	8108b64 <UART_SetConfig+0x264>
 8108b16:	a201      	add	r2, pc, #4	@ (adr r2, 8108b1c <UART_SetConfig+0x21c>)
 8108b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b1c:	08108b35 	.word	0x08108b35
 8108b20:	08108b3d 	.word	0x08108b3d
 8108b24:	08108b45 	.word	0x08108b45
 8108b28:	08108b4d 	.word	0x08108b4d
 8108b2c:	08108b55 	.word	0x08108b55
 8108b30:	08108b5d 	.word	0x08108b5d
 8108b34:	2300      	movs	r3, #0
 8108b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b3a:	e1b4      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b3c:	2304      	movs	r3, #4
 8108b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b42:	e1b0      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b44:	2308      	movs	r3, #8
 8108b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b4a:	e1ac      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b4c:	2310      	movs	r3, #16
 8108b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b52:	e1a8      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b54:	2320      	movs	r3, #32
 8108b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b5a:	e1a4      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b5c:	2340      	movs	r3, #64	@ 0x40
 8108b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b62:	e1a0      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b64:	2380      	movs	r3, #128	@ 0x80
 8108b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108b6a:	e19c      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108b6c:	697b      	ldr	r3, [r7, #20]
 8108b6e:	681b      	ldr	r3, [r3, #0]
 8108b70:	4a32      	ldr	r2, [pc, #200]	@ (8108c3c <UART_SetConfig+0x33c>)
 8108b72:	4293      	cmp	r3, r2
 8108b74:	d130      	bne.n	8108bd8 <UART_SetConfig+0x2d8>
 8108b76:	4b2e      	ldr	r3, [pc, #184]	@ (8108c30 <UART_SetConfig+0x330>)
 8108b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108b7a:	f003 0307 	and.w	r3, r3, #7
 8108b7e:	2b05      	cmp	r3, #5
 8108b80:	d826      	bhi.n	8108bd0 <UART_SetConfig+0x2d0>
 8108b82:	a201      	add	r2, pc, #4	@ (adr r2, 8108b88 <UART_SetConfig+0x288>)
 8108b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108b88:	08108ba1 	.word	0x08108ba1
 8108b8c:	08108ba9 	.word	0x08108ba9
 8108b90:	08108bb1 	.word	0x08108bb1
 8108b94:	08108bb9 	.word	0x08108bb9
 8108b98:	08108bc1 	.word	0x08108bc1
 8108b9c:	08108bc9 	.word	0x08108bc9
 8108ba0:	2300      	movs	r3, #0
 8108ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108ba6:	e17e      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108ba8:	2304      	movs	r3, #4
 8108baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bae:	e17a      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108bb0:	2308      	movs	r3, #8
 8108bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bb6:	e176      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108bb8:	2310      	movs	r3, #16
 8108bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bbe:	e172      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108bc0:	2320      	movs	r3, #32
 8108bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bc6:	e16e      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108bc8:	2340      	movs	r3, #64	@ 0x40
 8108bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bce:	e16a      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108bd0:	2380      	movs	r3, #128	@ 0x80
 8108bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108bd6:	e166      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108bd8:	697b      	ldr	r3, [r7, #20]
 8108bda:	681b      	ldr	r3, [r3, #0]
 8108bdc:	4a18      	ldr	r2, [pc, #96]	@ (8108c40 <UART_SetConfig+0x340>)
 8108bde:	4293      	cmp	r3, r2
 8108be0:	d140      	bne.n	8108c64 <UART_SetConfig+0x364>
 8108be2:	4b13      	ldr	r3, [pc, #76]	@ (8108c30 <UART_SetConfig+0x330>)
 8108be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108be6:	f003 0307 	and.w	r3, r3, #7
 8108bea:	2b05      	cmp	r3, #5
 8108bec:	d836      	bhi.n	8108c5c <UART_SetConfig+0x35c>
 8108bee:	a201      	add	r2, pc, #4	@ (adr r2, 8108bf4 <UART_SetConfig+0x2f4>)
 8108bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108bf4:	08108c0d 	.word	0x08108c0d
 8108bf8:	08108c15 	.word	0x08108c15
 8108bfc:	08108c1d 	.word	0x08108c1d
 8108c00:	08108c45 	.word	0x08108c45
 8108c04:	08108c4d 	.word	0x08108c4d
 8108c08:	08108c55 	.word	0x08108c55
 8108c0c:	2300      	movs	r3, #0
 8108c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c12:	e148      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c14:	2304      	movs	r3, #4
 8108c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c1a:	e144      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c1c:	2308      	movs	r3, #8
 8108c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c22:	e140      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c24:	cfff69f3 	.word	0xcfff69f3
 8108c28:	58000c00 	.word	0x58000c00
 8108c2c:	40011000 	.word	0x40011000
 8108c30:	58024400 	.word	0x58024400
 8108c34:	40004400 	.word	0x40004400
 8108c38:	40004800 	.word	0x40004800
 8108c3c:	40004c00 	.word	0x40004c00
 8108c40:	40005000 	.word	0x40005000
 8108c44:	2310      	movs	r3, #16
 8108c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c4a:	e12c      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c4c:	2320      	movs	r3, #32
 8108c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c52:	e128      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c54:	2340      	movs	r3, #64	@ 0x40
 8108c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c5a:	e124      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c5c:	2380      	movs	r3, #128	@ 0x80
 8108c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108c62:	e120      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108c64:	697b      	ldr	r3, [r7, #20]
 8108c66:	681b      	ldr	r3, [r3, #0]
 8108c68:	4acb      	ldr	r2, [pc, #812]	@ (8108f98 <UART_SetConfig+0x698>)
 8108c6a:	4293      	cmp	r3, r2
 8108c6c:	d176      	bne.n	8108d5c <UART_SetConfig+0x45c>
 8108c6e:	4bcb      	ldr	r3, [pc, #812]	@ (8108f9c <UART_SetConfig+0x69c>)
 8108c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108c72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8108c76:	2b28      	cmp	r3, #40	@ 0x28
 8108c78:	d86c      	bhi.n	8108d54 <UART_SetConfig+0x454>
 8108c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8108c80 <UART_SetConfig+0x380>)
 8108c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c80:	08108d25 	.word	0x08108d25
 8108c84:	08108d55 	.word	0x08108d55
 8108c88:	08108d55 	.word	0x08108d55
 8108c8c:	08108d55 	.word	0x08108d55
 8108c90:	08108d55 	.word	0x08108d55
 8108c94:	08108d55 	.word	0x08108d55
 8108c98:	08108d55 	.word	0x08108d55
 8108c9c:	08108d55 	.word	0x08108d55
 8108ca0:	08108d2d 	.word	0x08108d2d
 8108ca4:	08108d55 	.word	0x08108d55
 8108ca8:	08108d55 	.word	0x08108d55
 8108cac:	08108d55 	.word	0x08108d55
 8108cb0:	08108d55 	.word	0x08108d55
 8108cb4:	08108d55 	.word	0x08108d55
 8108cb8:	08108d55 	.word	0x08108d55
 8108cbc:	08108d55 	.word	0x08108d55
 8108cc0:	08108d35 	.word	0x08108d35
 8108cc4:	08108d55 	.word	0x08108d55
 8108cc8:	08108d55 	.word	0x08108d55
 8108ccc:	08108d55 	.word	0x08108d55
 8108cd0:	08108d55 	.word	0x08108d55
 8108cd4:	08108d55 	.word	0x08108d55
 8108cd8:	08108d55 	.word	0x08108d55
 8108cdc:	08108d55 	.word	0x08108d55
 8108ce0:	08108d3d 	.word	0x08108d3d
 8108ce4:	08108d55 	.word	0x08108d55
 8108ce8:	08108d55 	.word	0x08108d55
 8108cec:	08108d55 	.word	0x08108d55
 8108cf0:	08108d55 	.word	0x08108d55
 8108cf4:	08108d55 	.word	0x08108d55
 8108cf8:	08108d55 	.word	0x08108d55
 8108cfc:	08108d55 	.word	0x08108d55
 8108d00:	08108d45 	.word	0x08108d45
 8108d04:	08108d55 	.word	0x08108d55
 8108d08:	08108d55 	.word	0x08108d55
 8108d0c:	08108d55 	.word	0x08108d55
 8108d10:	08108d55 	.word	0x08108d55
 8108d14:	08108d55 	.word	0x08108d55
 8108d18:	08108d55 	.word	0x08108d55
 8108d1c:	08108d55 	.word	0x08108d55
 8108d20:	08108d4d 	.word	0x08108d4d
 8108d24:	2301      	movs	r3, #1
 8108d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d2a:	e0bc      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d2c:	2304      	movs	r3, #4
 8108d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d32:	e0b8      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d34:	2308      	movs	r3, #8
 8108d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d3a:	e0b4      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d3c:	2310      	movs	r3, #16
 8108d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d42:	e0b0      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d44:	2320      	movs	r3, #32
 8108d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d4a:	e0ac      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d4c:	2340      	movs	r3, #64	@ 0x40
 8108d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d52:	e0a8      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d54:	2380      	movs	r3, #128	@ 0x80
 8108d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d5a:	e0a4      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d5c:	697b      	ldr	r3, [r7, #20]
 8108d5e:	681b      	ldr	r3, [r3, #0]
 8108d60:	4a8f      	ldr	r2, [pc, #572]	@ (8108fa0 <UART_SetConfig+0x6a0>)
 8108d62:	4293      	cmp	r3, r2
 8108d64:	d130      	bne.n	8108dc8 <UART_SetConfig+0x4c8>
 8108d66:	4b8d      	ldr	r3, [pc, #564]	@ (8108f9c <UART_SetConfig+0x69c>)
 8108d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108d6a:	f003 0307 	and.w	r3, r3, #7
 8108d6e:	2b05      	cmp	r3, #5
 8108d70:	d826      	bhi.n	8108dc0 <UART_SetConfig+0x4c0>
 8108d72:	a201      	add	r2, pc, #4	@ (adr r2, 8108d78 <UART_SetConfig+0x478>)
 8108d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d78:	08108d91 	.word	0x08108d91
 8108d7c:	08108d99 	.word	0x08108d99
 8108d80:	08108da1 	.word	0x08108da1
 8108d84:	08108da9 	.word	0x08108da9
 8108d88:	08108db1 	.word	0x08108db1
 8108d8c:	08108db9 	.word	0x08108db9
 8108d90:	2300      	movs	r3, #0
 8108d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d96:	e086      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108d98:	2304      	movs	r3, #4
 8108d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108d9e:	e082      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108da0:	2308      	movs	r3, #8
 8108da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108da6:	e07e      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108da8:	2310      	movs	r3, #16
 8108daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108dae:	e07a      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108db0:	2320      	movs	r3, #32
 8108db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108db6:	e076      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108db8:	2340      	movs	r3, #64	@ 0x40
 8108dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108dbe:	e072      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108dc0:	2380      	movs	r3, #128	@ 0x80
 8108dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108dc6:	e06e      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108dc8:	697b      	ldr	r3, [r7, #20]
 8108dca:	681b      	ldr	r3, [r3, #0]
 8108dcc:	4a75      	ldr	r2, [pc, #468]	@ (8108fa4 <UART_SetConfig+0x6a4>)
 8108dce:	4293      	cmp	r3, r2
 8108dd0:	d130      	bne.n	8108e34 <UART_SetConfig+0x534>
 8108dd2:	4b72      	ldr	r3, [pc, #456]	@ (8108f9c <UART_SetConfig+0x69c>)
 8108dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108dd6:	f003 0307 	and.w	r3, r3, #7
 8108dda:	2b05      	cmp	r3, #5
 8108ddc:	d826      	bhi.n	8108e2c <UART_SetConfig+0x52c>
 8108dde:	a201      	add	r2, pc, #4	@ (adr r2, 8108de4 <UART_SetConfig+0x4e4>)
 8108de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108de4:	08108dfd 	.word	0x08108dfd
 8108de8:	08108e05 	.word	0x08108e05
 8108dec:	08108e0d 	.word	0x08108e0d
 8108df0:	08108e15 	.word	0x08108e15
 8108df4:	08108e1d 	.word	0x08108e1d
 8108df8:	08108e25 	.word	0x08108e25
 8108dfc:	2300      	movs	r3, #0
 8108dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e02:	e050      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e04:	2304      	movs	r3, #4
 8108e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e0a:	e04c      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e0c:	2308      	movs	r3, #8
 8108e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e12:	e048      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e14:	2310      	movs	r3, #16
 8108e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e1a:	e044      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e1c:	2320      	movs	r3, #32
 8108e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e22:	e040      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e24:	2340      	movs	r3, #64	@ 0x40
 8108e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e2a:	e03c      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e2c:	2380      	movs	r3, #128	@ 0x80
 8108e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e32:	e038      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e34:	697b      	ldr	r3, [r7, #20]
 8108e36:	681b      	ldr	r3, [r3, #0]
 8108e38:	4a5b      	ldr	r2, [pc, #364]	@ (8108fa8 <UART_SetConfig+0x6a8>)
 8108e3a:	4293      	cmp	r3, r2
 8108e3c:	d130      	bne.n	8108ea0 <UART_SetConfig+0x5a0>
 8108e3e:	4b57      	ldr	r3, [pc, #348]	@ (8108f9c <UART_SetConfig+0x69c>)
 8108e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108e42:	f003 0307 	and.w	r3, r3, #7
 8108e46:	2b05      	cmp	r3, #5
 8108e48:	d826      	bhi.n	8108e98 <UART_SetConfig+0x598>
 8108e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8108e50 <UART_SetConfig+0x550>)
 8108e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e50:	08108e69 	.word	0x08108e69
 8108e54:	08108e71 	.word	0x08108e71
 8108e58:	08108e79 	.word	0x08108e79
 8108e5c:	08108e81 	.word	0x08108e81
 8108e60:	08108e89 	.word	0x08108e89
 8108e64:	08108e91 	.word	0x08108e91
 8108e68:	2302      	movs	r3, #2
 8108e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e6e:	e01a      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e70:	2304      	movs	r3, #4
 8108e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e76:	e016      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e78:	2308      	movs	r3, #8
 8108e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e7e:	e012      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e80:	2310      	movs	r3, #16
 8108e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e86:	e00e      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e88:	2320      	movs	r3, #32
 8108e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e8e:	e00a      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e90:	2340      	movs	r3, #64	@ 0x40
 8108e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e96:	e006      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108e98:	2380      	movs	r3, #128	@ 0x80
 8108e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8108e9e:	e002      	b.n	8108ea6 <UART_SetConfig+0x5a6>
 8108ea0:	2380      	movs	r3, #128	@ 0x80
 8108ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8108ea6:	697b      	ldr	r3, [r7, #20]
 8108ea8:	681b      	ldr	r3, [r3, #0]
 8108eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8108fa8 <UART_SetConfig+0x6a8>)
 8108eac:	4293      	cmp	r3, r2
 8108eae:	f040 80f8 	bne.w	81090a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8108eb2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8108eb6:	2b20      	cmp	r3, #32
 8108eb8:	dc46      	bgt.n	8108f48 <UART_SetConfig+0x648>
 8108eba:	2b02      	cmp	r3, #2
 8108ebc:	f2c0 8082 	blt.w	8108fc4 <UART_SetConfig+0x6c4>
 8108ec0:	3b02      	subs	r3, #2
 8108ec2:	2b1e      	cmp	r3, #30
 8108ec4:	d87e      	bhi.n	8108fc4 <UART_SetConfig+0x6c4>
 8108ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8108ecc <UART_SetConfig+0x5cc>)
 8108ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108ecc:	08108f4f 	.word	0x08108f4f
 8108ed0:	08108fc5 	.word	0x08108fc5
 8108ed4:	08108f57 	.word	0x08108f57
 8108ed8:	08108fc5 	.word	0x08108fc5
 8108edc:	08108fc5 	.word	0x08108fc5
 8108ee0:	08108fc5 	.word	0x08108fc5
 8108ee4:	08108f67 	.word	0x08108f67
 8108ee8:	08108fc5 	.word	0x08108fc5
 8108eec:	08108fc5 	.word	0x08108fc5
 8108ef0:	08108fc5 	.word	0x08108fc5
 8108ef4:	08108fc5 	.word	0x08108fc5
 8108ef8:	08108fc5 	.word	0x08108fc5
 8108efc:	08108fc5 	.word	0x08108fc5
 8108f00:	08108fc5 	.word	0x08108fc5
 8108f04:	08108f77 	.word	0x08108f77
 8108f08:	08108fc5 	.word	0x08108fc5
 8108f0c:	08108fc5 	.word	0x08108fc5
 8108f10:	08108fc5 	.word	0x08108fc5
 8108f14:	08108fc5 	.word	0x08108fc5
 8108f18:	08108fc5 	.word	0x08108fc5
 8108f1c:	08108fc5 	.word	0x08108fc5
 8108f20:	08108fc5 	.word	0x08108fc5
 8108f24:	08108fc5 	.word	0x08108fc5
 8108f28:	08108fc5 	.word	0x08108fc5
 8108f2c:	08108fc5 	.word	0x08108fc5
 8108f30:	08108fc5 	.word	0x08108fc5
 8108f34:	08108fc5 	.word	0x08108fc5
 8108f38:	08108fc5 	.word	0x08108fc5
 8108f3c:	08108fc5 	.word	0x08108fc5
 8108f40:	08108fc5 	.word	0x08108fc5
 8108f44:	08108fb7 	.word	0x08108fb7
 8108f48:	2b40      	cmp	r3, #64	@ 0x40
 8108f4a:	d037      	beq.n	8108fbc <UART_SetConfig+0x6bc>
 8108f4c:	e03a      	b.n	8108fc4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108f4e:	f7fc ff8f 	bl	8105e70 <HAL_RCCEx_GetD3PCLK1Freq>
 8108f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8108f54:	e03c      	b.n	8108fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8108f5a:	4618      	mov	r0, r3
 8108f5c:	f7fc ff9e 	bl	8105e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108f64:	e034      	b.n	8108fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108f66:	f107 0318 	add.w	r3, r7, #24
 8108f6a:	4618      	mov	r0, r3
 8108f6c:	f7fd f8ea 	bl	8106144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108f70:	69fb      	ldr	r3, [r7, #28]
 8108f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108f74:	e02c      	b.n	8108fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108f76:	4b09      	ldr	r3, [pc, #36]	@ (8108f9c <UART_SetConfig+0x69c>)
 8108f78:	681b      	ldr	r3, [r3, #0]
 8108f7a:	f003 0320 	and.w	r3, r3, #32
 8108f7e:	2b00      	cmp	r3, #0
 8108f80:	d016      	beq.n	8108fb0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108f82:	4b06      	ldr	r3, [pc, #24]	@ (8108f9c <UART_SetConfig+0x69c>)
 8108f84:	681b      	ldr	r3, [r3, #0]
 8108f86:	08db      	lsrs	r3, r3, #3
 8108f88:	f003 0303 	and.w	r3, r3, #3
 8108f8c:	4a07      	ldr	r2, [pc, #28]	@ (8108fac <UART_SetConfig+0x6ac>)
 8108f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8108f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108f94:	e01c      	b.n	8108fd0 <UART_SetConfig+0x6d0>
 8108f96:	bf00      	nop
 8108f98:	40011400 	.word	0x40011400
 8108f9c:	58024400 	.word	0x58024400
 8108fa0:	40007800 	.word	0x40007800
 8108fa4:	40007c00 	.word	0x40007c00
 8108fa8:	58000c00 	.word	0x58000c00
 8108fac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8108fb0:	4b9d      	ldr	r3, [pc, #628]	@ (8109228 <UART_SetConfig+0x928>)
 8108fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fb4:	e00c      	b.n	8108fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108fb6:	4b9d      	ldr	r3, [pc, #628]	@ (810922c <UART_SetConfig+0x92c>)
 8108fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fba:	e009      	b.n	8108fd0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8108fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8108fc2:	e005      	b.n	8108fd0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8108fc4:	2300      	movs	r3, #0
 8108fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8108fc8:	2301      	movs	r3, #1
 8108fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8108fce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108fd2:	2b00      	cmp	r3, #0
 8108fd4:	f000 81de 	beq.w	8109394 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8108fd8:	697b      	ldr	r3, [r7, #20]
 8108fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108fdc:	4a94      	ldr	r2, [pc, #592]	@ (8109230 <UART_SetConfig+0x930>)
 8108fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108fe2:	461a      	mov	r2, r3
 8108fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8108fea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108fec:	697b      	ldr	r3, [r7, #20]
 8108fee:	685a      	ldr	r2, [r3, #4]
 8108ff0:	4613      	mov	r3, r2
 8108ff2:	005b      	lsls	r3, r3, #1
 8108ff4:	4413      	add	r3, r2
 8108ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108ff8:	429a      	cmp	r2, r3
 8108ffa:	d305      	bcc.n	8109008 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108ffc:	697b      	ldr	r3, [r7, #20]
 8108ffe:	685b      	ldr	r3, [r3, #4]
 8109000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109004:	429a      	cmp	r2, r3
 8109006:	d903      	bls.n	8109010 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109008:	2301      	movs	r3, #1
 810900a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810900e:	e1c1      	b.n	8109394 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109012:	2200      	movs	r2, #0
 8109014:	60bb      	str	r3, [r7, #8]
 8109016:	60fa      	str	r2, [r7, #12]
 8109018:	697b      	ldr	r3, [r7, #20]
 810901a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810901c:	4a84      	ldr	r2, [pc, #528]	@ (8109230 <UART_SetConfig+0x930>)
 810901e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109022:	b29b      	uxth	r3, r3
 8109024:	2200      	movs	r2, #0
 8109026:	603b      	str	r3, [r7, #0]
 8109028:	607a      	str	r2, [r7, #4]
 810902a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810902e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8109032:	f7f7 feb1 	bl	8100d98 <__aeabi_uldivmod>
 8109036:	4602      	mov	r2, r0
 8109038:	460b      	mov	r3, r1
 810903a:	4610      	mov	r0, r2
 810903c:	4619      	mov	r1, r3
 810903e:	f04f 0200 	mov.w	r2, #0
 8109042:	f04f 0300 	mov.w	r3, #0
 8109046:	020b      	lsls	r3, r1, #8
 8109048:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810904c:	0202      	lsls	r2, r0, #8
 810904e:	6979      	ldr	r1, [r7, #20]
 8109050:	6849      	ldr	r1, [r1, #4]
 8109052:	0849      	lsrs	r1, r1, #1
 8109054:	2000      	movs	r0, #0
 8109056:	460c      	mov	r4, r1
 8109058:	4605      	mov	r5, r0
 810905a:	eb12 0804 	adds.w	r8, r2, r4
 810905e:	eb43 0905 	adc.w	r9, r3, r5
 8109062:	697b      	ldr	r3, [r7, #20]
 8109064:	685b      	ldr	r3, [r3, #4]
 8109066:	2200      	movs	r2, #0
 8109068:	469a      	mov	sl, r3
 810906a:	4693      	mov	fp, r2
 810906c:	4652      	mov	r2, sl
 810906e:	465b      	mov	r3, fp
 8109070:	4640      	mov	r0, r8
 8109072:	4649      	mov	r1, r9
 8109074:	f7f7 fe90 	bl	8100d98 <__aeabi_uldivmod>
 8109078:	4602      	mov	r2, r0
 810907a:	460b      	mov	r3, r1
 810907c:	4613      	mov	r3, r2
 810907e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109082:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8109086:	d308      	bcc.n	810909a <UART_SetConfig+0x79a>
 8109088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810908a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810908e:	d204      	bcs.n	810909a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109090:	697b      	ldr	r3, [r7, #20]
 8109092:	681b      	ldr	r3, [r3, #0]
 8109094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8109096:	60da      	str	r2, [r3, #12]
 8109098:	e17c      	b.n	8109394 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810909a:	2301      	movs	r3, #1
 810909c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81090a0:	e178      	b.n	8109394 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81090a2:	697b      	ldr	r3, [r7, #20]
 81090a4:	69db      	ldr	r3, [r3, #28]
 81090a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81090aa:	f040 80c5 	bne.w	8109238 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81090ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81090b2:	2b20      	cmp	r3, #32
 81090b4:	dc48      	bgt.n	8109148 <UART_SetConfig+0x848>
 81090b6:	2b00      	cmp	r3, #0
 81090b8:	db7b      	blt.n	81091b2 <UART_SetConfig+0x8b2>
 81090ba:	2b20      	cmp	r3, #32
 81090bc:	d879      	bhi.n	81091b2 <UART_SetConfig+0x8b2>
 81090be:	a201      	add	r2, pc, #4	@ (adr r2, 81090c4 <UART_SetConfig+0x7c4>)
 81090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090c4:	0810914f 	.word	0x0810914f
 81090c8:	08109157 	.word	0x08109157
 81090cc:	081091b3 	.word	0x081091b3
 81090d0:	081091b3 	.word	0x081091b3
 81090d4:	0810915f 	.word	0x0810915f
 81090d8:	081091b3 	.word	0x081091b3
 81090dc:	081091b3 	.word	0x081091b3
 81090e0:	081091b3 	.word	0x081091b3
 81090e4:	0810916f 	.word	0x0810916f
 81090e8:	081091b3 	.word	0x081091b3
 81090ec:	081091b3 	.word	0x081091b3
 81090f0:	081091b3 	.word	0x081091b3
 81090f4:	081091b3 	.word	0x081091b3
 81090f8:	081091b3 	.word	0x081091b3
 81090fc:	081091b3 	.word	0x081091b3
 8109100:	081091b3 	.word	0x081091b3
 8109104:	0810917f 	.word	0x0810917f
 8109108:	081091b3 	.word	0x081091b3
 810910c:	081091b3 	.word	0x081091b3
 8109110:	081091b3 	.word	0x081091b3
 8109114:	081091b3 	.word	0x081091b3
 8109118:	081091b3 	.word	0x081091b3
 810911c:	081091b3 	.word	0x081091b3
 8109120:	081091b3 	.word	0x081091b3
 8109124:	081091b3 	.word	0x081091b3
 8109128:	081091b3 	.word	0x081091b3
 810912c:	081091b3 	.word	0x081091b3
 8109130:	081091b3 	.word	0x081091b3
 8109134:	081091b3 	.word	0x081091b3
 8109138:	081091b3 	.word	0x081091b3
 810913c:	081091b3 	.word	0x081091b3
 8109140:	081091b3 	.word	0x081091b3
 8109144:	081091a5 	.word	0x081091a5
 8109148:	2b40      	cmp	r3, #64	@ 0x40
 810914a:	d02e      	beq.n	81091aa <UART_SetConfig+0x8aa>
 810914c:	e031      	b.n	81091b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810914e:	f7fb fc59 	bl	8104a04 <HAL_RCC_GetPCLK1Freq>
 8109152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8109154:	e033      	b.n	81091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109156:	f7fb fc6b 	bl	8104a30 <HAL_RCC_GetPCLK2Freq>
 810915a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810915c:	e02f      	b.n	81091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810915e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8109162:	4618      	mov	r0, r3
 8109164:	f7fc fe9a 	bl	8105e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810916c:	e027      	b.n	81091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810916e:	f107 0318 	add.w	r3, r7, #24
 8109172:	4618      	mov	r0, r3
 8109174:	f7fc ffe6 	bl	8106144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109178:	69fb      	ldr	r3, [r7, #28]
 810917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810917c:	e01f      	b.n	81091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810917e:	4b2d      	ldr	r3, [pc, #180]	@ (8109234 <UART_SetConfig+0x934>)
 8109180:	681b      	ldr	r3, [r3, #0]
 8109182:	f003 0320 	and.w	r3, r3, #32
 8109186:	2b00      	cmp	r3, #0
 8109188:	d009      	beq.n	810919e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810918a:	4b2a      	ldr	r3, [pc, #168]	@ (8109234 <UART_SetConfig+0x934>)
 810918c:	681b      	ldr	r3, [r3, #0]
 810918e:	08db      	lsrs	r3, r3, #3
 8109190:	f003 0303 	and.w	r3, r3, #3
 8109194:	4a24      	ldr	r2, [pc, #144]	@ (8109228 <UART_SetConfig+0x928>)
 8109196:	fa22 f303 	lsr.w	r3, r2, r3
 810919a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810919c:	e00f      	b.n	81091be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810919e:	4b22      	ldr	r3, [pc, #136]	@ (8109228 <UART_SetConfig+0x928>)
 81091a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81091a2:	e00c      	b.n	81091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81091a4:	4b21      	ldr	r3, [pc, #132]	@ (810922c <UART_SetConfig+0x92c>)
 81091a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81091a8:	e009      	b.n	81091be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81091aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81091b0:	e005      	b.n	81091be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81091b2:	2300      	movs	r3, #0
 81091b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81091b6:	2301      	movs	r3, #1
 81091b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81091bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81091c0:	2b00      	cmp	r3, #0
 81091c2:	f000 80e7 	beq.w	8109394 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81091c6:	697b      	ldr	r3, [r7, #20]
 81091c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81091ca:	4a19      	ldr	r2, [pc, #100]	@ (8109230 <UART_SetConfig+0x930>)
 81091cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81091d0:	461a      	mov	r2, r3
 81091d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81091d4:	fbb3 f3f2 	udiv	r3, r3, r2
 81091d8:	005a      	lsls	r2, r3, #1
 81091da:	697b      	ldr	r3, [r7, #20]
 81091dc:	685b      	ldr	r3, [r3, #4]
 81091de:	085b      	lsrs	r3, r3, #1
 81091e0:	441a      	add	r2, r3
 81091e2:	697b      	ldr	r3, [r7, #20]
 81091e4:	685b      	ldr	r3, [r3, #4]
 81091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81091ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091ee:	2b0f      	cmp	r3, #15
 81091f0:	d916      	bls.n	8109220 <UART_SetConfig+0x920>
 81091f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81091f8:	d212      	bcs.n	8109220 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81091fc:	b29b      	uxth	r3, r3
 81091fe:	f023 030f 	bic.w	r3, r3, #15
 8109202:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109206:	085b      	lsrs	r3, r3, #1
 8109208:	b29b      	uxth	r3, r3
 810920a:	f003 0307 	and.w	r3, r3, #7
 810920e:	b29a      	uxth	r2, r3
 8109210:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8109212:	4313      	orrs	r3, r2
 8109214:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8109216:	697b      	ldr	r3, [r7, #20]
 8109218:	681b      	ldr	r3, [r3, #0]
 810921a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810921c:	60da      	str	r2, [r3, #12]
 810921e:	e0b9      	b.n	8109394 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109220:	2301      	movs	r3, #1
 8109222:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8109226:	e0b5      	b.n	8109394 <UART_SetConfig+0xa94>
 8109228:	03d09000 	.word	0x03d09000
 810922c:	003d0900 	.word	0x003d0900
 8109230:	0810e9e4 	.word	0x0810e9e4
 8109234:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109238:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810923c:	2b20      	cmp	r3, #32
 810923e:	dc49      	bgt.n	81092d4 <UART_SetConfig+0x9d4>
 8109240:	2b00      	cmp	r3, #0
 8109242:	db7c      	blt.n	810933e <UART_SetConfig+0xa3e>
 8109244:	2b20      	cmp	r3, #32
 8109246:	d87a      	bhi.n	810933e <UART_SetConfig+0xa3e>
 8109248:	a201      	add	r2, pc, #4	@ (adr r2, 8109250 <UART_SetConfig+0x950>)
 810924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810924e:	bf00      	nop
 8109250:	081092db 	.word	0x081092db
 8109254:	081092e3 	.word	0x081092e3
 8109258:	0810933f 	.word	0x0810933f
 810925c:	0810933f 	.word	0x0810933f
 8109260:	081092eb 	.word	0x081092eb
 8109264:	0810933f 	.word	0x0810933f
 8109268:	0810933f 	.word	0x0810933f
 810926c:	0810933f 	.word	0x0810933f
 8109270:	081092fb 	.word	0x081092fb
 8109274:	0810933f 	.word	0x0810933f
 8109278:	0810933f 	.word	0x0810933f
 810927c:	0810933f 	.word	0x0810933f
 8109280:	0810933f 	.word	0x0810933f
 8109284:	0810933f 	.word	0x0810933f
 8109288:	0810933f 	.word	0x0810933f
 810928c:	0810933f 	.word	0x0810933f
 8109290:	0810930b 	.word	0x0810930b
 8109294:	0810933f 	.word	0x0810933f
 8109298:	0810933f 	.word	0x0810933f
 810929c:	0810933f 	.word	0x0810933f
 81092a0:	0810933f 	.word	0x0810933f
 81092a4:	0810933f 	.word	0x0810933f
 81092a8:	0810933f 	.word	0x0810933f
 81092ac:	0810933f 	.word	0x0810933f
 81092b0:	0810933f 	.word	0x0810933f
 81092b4:	0810933f 	.word	0x0810933f
 81092b8:	0810933f 	.word	0x0810933f
 81092bc:	0810933f 	.word	0x0810933f
 81092c0:	0810933f 	.word	0x0810933f
 81092c4:	0810933f 	.word	0x0810933f
 81092c8:	0810933f 	.word	0x0810933f
 81092cc:	0810933f 	.word	0x0810933f
 81092d0:	08109331 	.word	0x08109331
 81092d4:	2b40      	cmp	r3, #64	@ 0x40
 81092d6:	d02e      	beq.n	8109336 <UART_SetConfig+0xa36>
 81092d8:	e031      	b.n	810933e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81092da:	f7fb fb93 	bl	8104a04 <HAL_RCC_GetPCLK1Freq>
 81092de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81092e0:	e033      	b.n	810934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81092e2:	f7fb fba5 	bl	8104a30 <HAL_RCC_GetPCLK2Freq>
 81092e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81092e8:	e02f      	b.n	810934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81092ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81092ee:	4618      	mov	r0, r3
 81092f0:	f7fc fdd4 	bl	8105e9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81092f8:	e027      	b.n	810934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81092fa:	f107 0318 	add.w	r3, r7, #24
 81092fe:	4618      	mov	r0, r3
 8109300:	f7fc ff20 	bl	8106144 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109304:	69fb      	ldr	r3, [r7, #28]
 8109306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109308:	e01f      	b.n	810934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810930a:	4b2d      	ldr	r3, [pc, #180]	@ (81093c0 <UART_SetConfig+0xac0>)
 810930c:	681b      	ldr	r3, [r3, #0]
 810930e:	f003 0320 	and.w	r3, r3, #32
 8109312:	2b00      	cmp	r3, #0
 8109314:	d009      	beq.n	810932a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109316:	4b2a      	ldr	r3, [pc, #168]	@ (81093c0 <UART_SetConfig+0xac0>)
 8109318:	681b      	ldr	r3, [r3, #0]
 810931a:	08db      	lsrs	r3, r3, #3
 810931c:	f003 0303 	and.w	r3, r3, #3
 8109320:	4a28      	ldr	r2, [pc, #160]	@ (81093c4 <UART_SetConfig+0xac4>)
 8109322:	fa22 f303 	lsr.w	r3, r2, r3
 8109326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109328:	e00f      	b.n	810934a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810932a:	4b26      	ldr	r3, [pc, #152]	@ (81093c4 <UART_SetConfig+0xac4>)
 810932c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810932e:	e00c      	b.n	810934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109330:	4b25      	ldr	r3, [pc, #148]	@ (81093c8 <UART_SetConfig+0xac8>)
 8109332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8109334:	e009      	b.n	810934a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810933a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810933c:	e005      	b.n	810934a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810933e:	2300      	movs	r3, #0
 8109340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8109342:	2301      	movs	r3, #1
 8109344:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8109348:	bf00      	nop
    }

    if (pclk != 0U)
 810934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810934c:	2b00      	cmp	r3, #0
 810934e:	d021      	beq.n	8109394 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109350:	697b      	ldr	r3, [r7, #20]
 8109352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109354:	4a1d      	ldr	r2, [pc, #116]	@ (81093cc <UART_SetConfig+0xacc>)
 8109356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810935a:	461a      	mov	r2, r3
 810935c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810935e:	fbb3 f2f2 	udiv	r2, r3, r2
 8109362:	697b      	ldr	r3, [r7, #20]
 8109364:	685b      	ldr	r3, [r3, #4]
 8109366:	085b      	lsrs	r3, r3, #1
 8109368:	441a      	add	r2, r3
 810936a:	697b      	ldr	r3, [r7, #20]
 810936c:	685b      	ldr	r3, [r3, #4]
 810936e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109372:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109376:	2b0f      	cmp	r3, #15
 8109378:	d909      	bls.n	810938e <UART_SetConfig+0xa8e>
 810937a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810937c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109380:	d205      	bcs.n	810938e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109384:	b29a      	uxth	r2, r3
 8109386:	697b      	ldr	r3, [r7, #20]
 8109388:	681b      	ldr	r3, [r3, #0]
 810938a:	60da      	str	r2, [r3, #12]
 810938c:	e002      	b.n	8109394 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810938e:	2301      	movs	r3, #1
 8109390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109394:	697b      	ldr	r3, [r7, #20]
 8109396:	2201      	movs	r2, #1
 8109398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810939c:	697b      	ldr	r3, [r7, #20]
 810939e:	2201      	movs	r2, #1
 81093a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81093a4:	697b      	ldr	r3, [r7, #20]
 81093a6:	2200      	movs	r2, #0
 81093a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 81093aa:	697b      	ldr	r3, [r7, #20]
 81093ac:	2200      	movs	r2, #0
 81093ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 81093b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 81093b4:	4618      	mov	r0, r3
 81093b6:	3748      	adds	r7, #72	@ 0x48
 81093b8:	46bd      	mov	sp, r7
 81093ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81093be:	bf00      	nop
 81093c0:	58024400 	.word	0x58024400
 81093c4:	03d09000 	.word	0x03d09000
 81093c8:	003d0900 	.word	0x003d0900
 81093cc:	0810e9e4 	.word	0x0810e9e4

081093d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81093d0:	b480      	push	{r7}
 81093d2:	b083      	sub	sp, #12
 81093d4:	af00      	add	r7, sp, #0
 81093d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81093d8:	687b      	ldr	r3, [r7, #4]
 81093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81093dc:	f003 0308 	and.w	r3, r3, #8
 81093e0:	2b00      	cmp	r3, #0
 81093e2:	d00a      	beq.n	81093fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	681b      	ldr	r3, [r3, #0]
 81093e8:	685b      	ldr	r3, [r3, #4]
 81093ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 81093ee:	687b      	ldr	r3, [r7, #4]
 81093f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81093f2:	687b      	ldr	r3, [r7, #4]
 81093f4:	681b      	ldr	r3, [r3, #0]
 81093f6:	430a      	orrs	r2, r1
 81093f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81093fa:	687b      	ldr	r3, [r7, #4]
 81093fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81093fe:	f003 0301 	and.w	r3, r3, #1
 8109402:	2b00      	cmp	r3, #0
 8109404:	d00a      	beq.n	810941c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109406:	687b      	ldr	r3, [r7, #4]
 8109408:	681b      	ldr	r3, [r3, #0]
 810940a:	685b      	ldr	r3, [r3, #4]
 810940c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8109410:	687b      	ldr	r3, [r7, #4]
 8109412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8109414:	687b      	ldr	r3, [r7, #4]
 8109416:	681b      	ldr	r3, [r3, #0]
 8109418:	430a      	orrs	r2, r1
 810941a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810941c:	687b      	ldr	r3, [r7, #4]
 810941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109420:	f003 0302 	and.w	r3, r3, #2
 8109424:	2b00      	cmp	r3, #0
 8109426:	d00a      	beq.n	810943e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109428:	687b      	ldr	r3, [r7, #4]
 810942a:	681b      	ldr	r3, [r3, #0]
 810942c:	685b      	ldr	r3, [r3, #4]
 810942e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8109436:	687b      	ldr	r3, [r7, #4]
 8109438:	681b      	ldr	r3, [r3, #0]
 810943a:	430a      	orrs	r2, r1
 810943c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810943e:	687b      	ldr	r3, [r7, #4]
 8109440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109442:	f003 0304 	and.w	r3, r3, #4
 8109446:	2b00      	cmp	r3, #0
 8109448:	d00a      	beq.n	8109460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810944a:	687b      	ldr	r3, [r7, #4]
 810944c:	681b      	ldr	r3, [r3, #0]
 810944e:	685b      	ldr	r3, [r3, #4]
 8109450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8109454:	687b      	ldr	r3, [r7, #4]
 8109456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	681b      	ldr	r3, [r3, #0]
 810945c:	430a      	orrs	r2, r1
 810945e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109464:	f003 0310 	and.w	r3, r3, #16
 8109468:	2b00      	cmp	r3, #0
 810946a:	d00a      	beq.n	8109482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	681b      	ldr	r3, [r3, #0]
 8109470:	689b      	ldr	r3, [r3, #8]
 8109472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8109476:	687b      	ldr	r3, [r7, #4]
 8109478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810947a:	687b      	ldr	r3, [r7, #4]
 810947c:	681b      	ldr	r3, [r3, #0]
 810947e:	430a      	orrs	r2, r1
 8109480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8109482:	687b      	ldr	r3, [r7, #4]
 8109484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109486:	f003 0320 	and.w	r3, r3, #32
 810948a:	2b00      	cmp	r3, #0
 810948c:	d00a      	beq.n	81094a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810948e:	687b      	ldr	r3, [r7, #4]
 8109490:	681b      	ldr	r3, [r3, #0]
 8109492:	689b      	ldr	r3, [r3, #8]
 8109494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810949c:	687b      	ldr	r3, [r7, #4]
 810949e:	681b      	ldr	r3, [r3, #0]
 81094a0:	430a      	orrs	r2, r1
 81094a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81094a4:	687b      	ldr	r3, [r7, #4]
 81094a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81094ac:	2b00      	cmp	r3, #0
 81094ae:	d01a      	beq.n	81094e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81094b0:	687b      	ldr	r3, [r7, #4]
 81094b2:	681b      	ldr	r3, [r3, #0]
 81094b4:	685b      	ldr	r3, [r3, #4]
 81094b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 81094ba:	687b      	ldr	r3, [r7, #4]
 81094bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	681b      	ldr	r3, [r3, #0]
 81094c2:	430a      	orrs	r2, r1
 81094c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81094ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81094ce:	d10a      	bne.n	81094e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81094d0:	687b      	ldr	r3, [r7, #4]
 81094d2:	681b      	ldr	r3, [r3, #0]
 81094d4:	685b      	ldr	r3, [r3, #4]
 81094d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 81094da:	687b      	ldr	r3, [r7, #4]
 81094dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	430a      	orrs	r2, r1
 81094e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81094e6:	687b      	ldr	r3, [r7, #4]
 81094e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81094ee:	2b00      	cmp	r3, #0
 81094f0:	d00a      	beq.n	8109508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	681b      	ldr	r3, [r3, #0]
 81094f6:	685b      	ldr	r3, [r3, #4]
 81094f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 81094fc:	687b      	ldr	r3, [r7, #4]
 81094fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	681b      	ldr	r3, [r3, #0]
 8109504:	430a      	orrs	r2, r1
 8109506:	605a      	str	r2, [r3, #4]
  }
}
 8109508:	bf00      	nop
 810950a:	370c      	adds	r7, #12
 810950c:	46bd      	mov	sp, r7
 810950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109512:	4770      	bx	lr

08109514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8109514:	b580      	push	{r7, lr}
 8109516:	b098      	sub	sp, #96	@ 0x60
 8109518:	af02      	add	r7, sp, #8
 810951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810951c:	687b      	ldr	r3, [r7, #4]
 810951e:	2200      	movs	r2, #0
 8109520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8109524:	f7f9 ff22 	bl	810336c <HAL_GetTick>
 8109528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810952a:	687b      	ldr	r3, [r7, #4]
 810952c:	681b      	ldr	r3, [r3, #0]
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	f003 0308 	and.w	r3, r3, #8
 8109534:	2b08      	cmp	r3, #8
 8109536:	d12f      	bne.n	8109598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8109538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810953c:	9300      	str	r3, [sp, #0]
 810953e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8109540:	2200      	movs	r2, #0
 8109542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8109546:	6878      	ldr	r0, [r7, #4]
 8109548:	f000 f88e 	bl	8109668 <UART_WaitOnFlagUntilTimeout>
 810954c:	4603      	mov	r3, r0
 810954e:	2b00      	cmp	r3, #0
 8109550:	d022      	beq.n	8109598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8109552:	687b      	ldr	r3, [r7, #4]
 8109554:	681b      	ldr	r3, [r3, #0]
 8109556:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810955a:	e853 3f00 	ldrex	r3, [r3]
 810955e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8109560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109566:	653b      	str	r3, [r7, #80]	@ 0x50
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	681b      	ldr	r3, [r3, #0]
 810956c:	461a      	mov	r2, r3
 810956e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109570:	647b      	str	r3, [r7, #68]	@ 0x44
 8109572:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8109576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109578:	e841 2300 	strex	r3, r2, [r1]
 810957c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810957e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109580:	2b00      	cmp	r3, #0
 8109582:	d1e6      	bne.n	8109552 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8109584:	687b      	ldr	r3, [r7, #4]
 8109586:	2220      	movs	r2, #32
 8109588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810958c:	687b      	ldr	r3, [r7, #4]
 810958e:	2200      	movs	r2, #0
 8109590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109594:	2303      	movs	r3, #3
 8109596:	e063      	b.n	8109660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109598:	687b      	ldr	r3, [r7, #4]
 810959a:	681b      	ldr	r3, [r3, #0]
 810959c:	681b      	ldr	r3, [r3, #0]
 810959e:	f003 0304 	and.w	r3, r3, #4
 81095a2:	2b04      	cmp	r3, #4
 81095a4:	d149      	bne.n	810963a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81095a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 81095aa:	9300      	str	r3, [sp, #0]
 81095ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81095ae:	2200      	movs	r2, #0
 81095b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 81095b4:	6878      	ldr	r0, [r7, #4]
 81095b6:	f000 f857 	bl	8109668 <UART_WaitOnFlagUntilTimeout>
 81095ba:	4603      	mov	r3, r0
 81095bc:	2b00      	cmp	r3, #0
 81095be:	d03c      	beq.n	810963a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	681b      	ldr	r3, [r3, #0]
 81095c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81095c8:	e853 3f00 	ldrex	r3, [r3]
 81095cc:	623b      	str	r3, [r7, #32]
   return(result);
 81095ce:	6a3b      	ldr	r3, [r7, #32]
 81095d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81095d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81095d6:	687b      	ldr	r3, [r7, #4]
 81095d8:	681b      	ldr	r3, [r3, #0]
 81095da:	461a      	mov	r2, r3
 81095dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81095de:	633b      	str	r3, [r7, #48]	@ 0x30
 81095e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81095e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81095e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81095e6:	e841 2300 	strex	r3, r2, [r1]
 81095ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 81095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81095ee:	2b00      	cmp	r3, #0
 81095f0:	d1e6      	bne.n	81095c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81095f2:	687b      	ldr	r3, [r7, #4]
 81095f4:	681b      	ldr	r3, [r3, #0]
 81095f6:	3308      	adds	r3, #8
 81095f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81095fa:	693b      	ldr	r3, [r7, #16]
 81095fc:	e853 3f00 	ldrex	r3, [r3]
 8109600:	60fb      	str	r3, [r7, #12]
   return(result);
 8109602:	68fb      	ldr	r3, [r7, #12]
 8109604:	f023 0301 	bic.w	r3, r3, #1
 8109608:	64bb      	str	r3, [r7, #72]	@ 0x48
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	681b      	ldr	r3, [r3, #0]
 810960e:	3308      	adds	r3, #8
 8109610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109612:	61fa      	str	r2, [r7, #28]
 8109614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109616:	69b9      	ldr	r1, [r7, #24]
 8109618:	69fa      	ldr	r2, [r7, #28]
 810961a:	e841 2300 	strex	r3, r2, [r1]
 810961e:	617b      	str	r3, [r7, #20]
   return(result);
 8109620:	697b      	ldr	r3, [r7, #20]
 8109622:	2b00      	cmp	r3, #0
 8109624:	d1e5      	bne.n	81095f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	2220      	movs	r2, #32
 810962a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810962e:	687b      	ldr	r3, [r7, #4]
 8109630:	2200      	movs	r2, #0
 8109632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8109636:	2303      	movs	r3, #3
 8109638:	e012      	b.n	8109660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810963a:	687b      	ldr	r3, [r7, #4]
 810963c:	2220      	movs	r2, #32
 810963e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	2220      	movs	r2, #32
 8109646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	2200      	movs	r2, #0
 810964e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8109650:	687b      	ldr	r3, [r7, #4]
 8109652:	2200      	movs	r2, #0
 8109654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	2200      	movs	r2, #0
 810965a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810965e:	2300      	movs	r3, #0
}
 8109660:	4618      	mov	r0, r3
 8109662:	3758      	adds	r7, #88	@ 0x58
 8109664:	46bd      	mov	sp, r7
 8109666:	bd80      	pop	{r7, pc}

08109668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109668:	b580      	push	{r7, lr}
 810966a:	b084      	sub	sp, #16
 810966c:	af00      	add	r7, sp, #0
 810966e:	60f8      	str	r0, [r7, #12]
 8109670:	60b9      	str	r1, [r7, #8]
 8109672:	603b      	str	r3, [r7, #0]
 8109674:	4613      	mov	r3, r2
 8109676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109678:	e04f      	b.n	810971a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810967a:	69bb      	ldr	r3, [r7, #24]
 810967c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109680:	d04b      	beq.n	810971a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109682:	f7f9 fe73 	bl	810336c <HAL_GetTick>
 8109686:	4602      	mov	r2, r0
 8109688:	683b      	ldr	r3, [r7, #0]
 810968a:	1ad3      	subs	r3, r2, r3
 810968c:	69ba      	ldr	r2, [r7, #24]
 810968e:	429a      	cmp	r2, r3
 8109690:	d302      	bcc.n	8109698 <UART_WaitOnFlagUntilTimeout+0x30>
 8109692:	69bb      	ldr	r3, [r7, #24]
 8109694:	2b00      	cmp	r3, #0
 8109696:	d101      	bne.n	810969c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109698:	2303      	movs	r3, #3
 810969a:	e04e      	b.n	810973a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810969c:	68fb      	ldr	r3, [r7, #12]
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	681b      	ldr	r3, [r3, #0]
 81096a2:	f003 0304 	and.w	r3, r3, #4
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	d037      	beq.n	810971a <UART_WaitOnFlagUntilTimeout+0xb2>
 81096aa:	68bb      	ldr	r3, [r7, #8]
 81096ac:	2b80      	cmp	r3, #128	@ 0x80
 81096ae:	d034      	beq.n	810971a <UART_WaitOnFlagUntilTimeout+0xb2>
 81096b0:	68bb      	ldr	r3, [r7, #8]
 81096b2:	2b40      	cmp	r3, #64	@ 0x40
 81096b4:	d031      	beq.n	810971a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 81096b6:	68fb      	ldr	r3, [r7, #12]
 81096b8:	681b      	ldr	r3, [r3, #0]
 81096ba:	69db      	ldr	r3, [r3, #28]
 81096bc:	f003 0308 	and.w	r3, r3, #8
 81096c0:	2b08      	cmp	r3, #8
 81096c2:	d110      	bne.n	81096e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81096c4:	68fb      	ldr	r3, [r7, #12]
 81096c6:	681b      	ldr	r3, [r3, #0]
 81096c8:	2208      	movs	r2, #8
 81096ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81096cc:	68f8      	ldr	r0, [r7, #12]
 81096ce:	f000 f838 	bl	8109742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 81096d2:	68fb      	ldr	r3, [r7, #12]
 81096d4:	2208      	movs	r2, #8
 81096d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81096da:	68fb      	ldr	r3, [r7, #12]
 81096dc:	2200      	movs	r2, #0
 81096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 81096e2:	2301      	movs	r3, #1
 81096e4:	e029      	b.n	810973a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81096e6:	68fb      	ldr	r3, [r7, #12]
 81096e8:	681b      	ldr	r3, [r3, #0]
 81096ea:	69db      	ldr	r3, [r3, #28]
 81096ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81096f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81096f4:	d111      	bne.n	810971a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81096f6:	68fb      	ldr	r3, [r7, #12]
 81096f8:	681b      	ldr	r3, [r3, #0]
 81096fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81096fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109700:	68f8      	ldr	r0, [r7, #12]
 8109702:	f000 f81e 	bl	8109742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8109706:	68fb      	ldr	r3, [r7, #12]
 8109708:	2220      	movs	r2, #32
 810970a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810970e:	68fb      	ldr	r3, [r7, #12]
 8109710:	2200      	movs	r2, #0
 8109712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8109716:	2303      	movs	r3, #3
 8109718:	e00f      	b.n	810973a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810971a:	68fb      	ldr	r3, [r7, #12]
 810971c:	681b      	ldr	r3, [r3, #0]
 810971e:	69da      	ldr	r2, [r3, #28]
 8109720:	68bb      	ldr	r3, [r7, #8]
 8109722:	4013      	ands	r3, r2
 8109724:	68ba      	ldr	r2, [r7, #8]
 8109726:	429a      	cmp	r2, r3
 8109728:	bf0c      	ite	eq
 810972a:	2301      	moveq	r3, #1
 810972c:	2300      	movne	r3, #0
 810972e:	b2db      	uxtb	r3, r3
 8109730:	461a      	mov	r2, r3
 8109732:	79fb      	ldrb	r3, [r7, #7]
 8109734:	429a      	cmp	r2, r3
 8109736:	d0a0      	beq.n	810967a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8109738:	2300      	movs	r3, #0
}
 810973a:	4618      	mov	r0, r3
 810973c:	3710      	adds	r7, #16
 810973e:	46bd      	mov	sp, r7
 8109740:	bd80      	pop	{r7, pc}

08109742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8109742:	b480      	push	{r7}
 8109744:	b095      	sub	sp, #84	@ 0x54
 8109746:	af00      	add	r7, sp, #0
 8109748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	681b      	ldr	r3, [r3, #0]
 810974e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109752:	e853 3f00 	ldrex	r3, [r3]
 8109756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8109758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810975a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810975e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8109760:	687b      	ldr	r3, [r7, #4]
 8109762:	681b      	ldr	r3, [r3, #0]
 8109764:	461a      	mov	r2, r3
 8109766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109768:	643b      	str	r3, [r7, #64]	@ 0x40
 810976a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810976c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810976e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8109770:	e841 2300 	strex	r3, r2, [r1]
 8109774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8109776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109778:	2b00      	cmp	r3, #0
 810977a:	d1e6      	bne.n	810974a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	681b      	ldr	r3, [r3, #0]
 8109780:	3308      	adds	r3, #8
 8109782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109784:	6a3b      	ldr	r3, [r7, #32]
 8109786:	e853 3f00 	ldrex	r3, [r3]
 810978a:	61fb      	str	r3, [r7, #28]
   return(result);
 810978c:	69fb      	ldr	r3, [r7, #28]
 810978e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8109792:	f023 0301 	bic.w	r3, r3, #1
 8109796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	3308      	adds	r3, #8
 810979e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81097a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81097a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81097a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81097a8:	e841 2300 	strex	r3, r2, [r1]
 81097ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81097b0:	2b00      	cmp	r3, #0
 81097b2:	d1e3      	bne.n	810977c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81097b4:	687b      	ldr	r3, [r7, #4]
 81097b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81097b8:	2b01      	cmp	r3, #1
 81097ba:	d118      	bne.n	81097ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81097bc:	687b      	ldr	r3, [r7, #4]
 81097be:	681b      	ldr	r3, [r3, #0]
 81097c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81097c2:	68fb      	ldr	r3, [r7, #12]
 81097c4:	e853 3f00 	ldrex	r3, [r3]
 81097c8:	60bb      	str	r3, [r7, #8]
   return(result);
 81097ca:	68bb      	ldr	r3, [r7, #8]
 81097cc:	f023 0310 	bic.w	r3, r3, #16
 81097d0:	647b      	str	r3, [r7, #68]	@ 0x44
 81097d2:	687b      	ldr	r3, [r7, #4]
 81097d4:	681b      	ldr	r3, [r3, #0]
 81097d6:	461a      	mov	r2, r3
 81097d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81097da:	61bb      	str	r3, [r7, #24]
 81097dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097de:	6979      	ldr	r1, [r7, #20]
 81097e0:	69ba      	ldr	r2, [r7, #24]
 81097e2:	e841 2300 	strex	r3, r2, [r1]
 81097e6:	613b      	str	r3, [r7, #16]
   return(result);
 81097e8:	693b      	ldr	r3, [r7, #16]
 81097ea:	2b00      	cmp	r3, #0
 81097ec:	d1e6      	bne.n	81097bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81097ee:	687b      	ldr	r3, [r7, #4]
 81097f0:	2220      	movs	r2, #32
 81097f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81097f6:	687b      	ldr	r3, [r7, #4]
 81097f8:	2200      	movs	r2, #0
 81097fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81097fc:	687b      	ldr	r3, [r7, #4]
 81097fe:	2200      	movs	r2, #0
 8109800:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8109802:	bf00      	nop
 8109804:	3754      	adds	r7, #84	@ 0x54
 8109806:	46bd      	mov	sp, r7
 8109808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810980c:	4770      	bx	lr

0810980e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810980e:	b480      	push	{r7}
 8109810:	b085      	sub	sp, #20
 8109812:	af00      	add	r7, sp, #0
 8109814:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109816:	687b      	ldr	r3, [r7, #4]
 8109818:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810981c:	2b01      	cmp	r3, #1
 810981e:	d101      	bne.n	8109824 <HAL_UARTEx_DisableFifoMode+0x16>
 8109820:	2302      	movs	r3, #2
 8109822:	e027      	b.n	8109874 <HAL_UARTEx_DisableFifoMode+0x66>
 8109824:	687b      	ldr	r3, [r7, #4]
 8109826:	2201      	movs	r2, #1
 8109828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810982c:	687b      	ldr	r3, [r7, #4]
 810982e:	2224      	movs	r2, #36	@ 0x24
 8109830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	681b      	ldr	r3, [r3, #0]
 8109838:	681b      	ldr	r3, [r3, #0]
 810983a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810983c:	687b      	ldr	r3, [r7, #4]
 810983e:	681b      	ldr	r3, [r3, #0]
 8109840:	681a      	ldr	r2, [r3, #0]
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	681b      	ldr	r3, [r3, #0]
 8109846:	f022 0201 	bic.w	r2, r2, #1
 810984a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810984c:	68fb      	ldr	r3, [r7, #12]
 810984e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8109852:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	2200      	movs	r2, #0
 8109858:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810985a:	687b      	ldr	r3, [r7, #4]
 810985c:	681b      	ldr	r3, [r3, #0]
 810985e:	68fa      	ldr	r2, [r7, #12]
 8109860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109862:	687b      	ldr	r3, [r7, #4]
 8109864:	2220      	movs	r2, #32
 8109866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810986a:	687b      	ldr	r3, [r7, #4]
 810986c:	2200      	movs	r2, #0
 810986e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8109872:	2300      	movs	r3, #0
}
 8109874:	4618      	mov	r0, r3
 8109876:	3714      	adds	r7, #20
 8109878:	46bd      	mov	sp, r7
 810987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810987e:	4770      	bx	lr

08109880 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109880:	b580      	push	{r7, lr}
 8109882:	b084      	sub	sp, #16
 8109884:	af00      	add	r7, sp, #0
 8109886:	6078      	str	r0, [r7, #4]
 8109888:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810988a:	687b      	ldr	r3, [r7, #4]
 810988c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8109890:	2b01      	cmp	r3, #1
 8109892:	d101      	bne.n	8109898 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109894:	2302      	movs	r3, #2
 8109896:	e02d      	b.n	81098f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109898:	687b      	ldr	r3, [r7, #4]
 810989a:	2201      	movs	r2, #1
 810989c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	2224      	movs	r2, #36	@ 0x24
 81098a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81098a8:	687b      	ldr	r3, [r7, #4]
 81098aa:	681b      	ldr	r3, [r3, #0]
 81098ac:	681b      	ldr	r3, [r3, #0]
 81098ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81098b0:	687b      	ldr	r3, [r7, #4]
 81098b2:	681b      	ldr	r3, [r3, #0]
 81098b4:	681a      	ldr	r2, [r3, #0]
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	681b      	ldr	r3, [r3, #0]
 81098ba:	f022 0201 	bic.w	r2, r2, #1
 81098be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81098c0:	687b      	ldr	r3, [r7, #4]
 81098c2:	681b      	ldr	r3, [r3, #0]
 81098c4:	689b      	ldr	r3, [r3, #8]
 81098c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 81098ca:	687b      	ldr	r3, [r7, #4]
 81098cc:	681b      	ldr	r3, [r3, #0]
 81098ce:	683a      	ldr	r2, [r7, #0]
 81098d0:	430a      	orrs	r2, r1
 81098d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81098d4:	6878      	ldr	r0, [r7, #4]
 81098d6:	f000 f84f 	bl	8109978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81098da:	687b      	ldr	r3, [r7, #4]
 81098dc:	681b      	ldr	r3, [r3, #0]
 81098de:	68fa      	ldr	r2, [r7, #12]
 81098e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81098e2:	687b      	ldr	r3, [r7, #4]
 81098e4:	2220      	movs	r2, #32
 81098e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81098ea:	687b      	ldr	r3, [r7, #4]
 81098ec:	2200      	movs	r2, #0
 81098ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81098f2:	2300      	movs	r3, #0
}
 81098f4:	4618      	mov	r0, r3
 81098f6:	3710      	adds	r7, #16
 81098f8:	46bd      	mov	sp, r7
 81098fa:	bd80      	pop	{r7, pc}

081098fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81098fc:	b580      	push	{r7, lr}
 81098fe:	b084      	sub	sp, #16
 8109900:	af00      	add	r7, sp, #0
 8109902:	6078      	str	r0, [r7, #4]
 8109904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109906:	687b      	ldr	r3, [r7, #4]
 8109908:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810990c:	2b01      	cmp	r3, #1
 810990e:	d101      	bne.n	8109914 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109910:	2302      	movs	r3, #2
 8109912:	e02d      	b.n	8109970 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109914:	687b      	ldr	r3, [r7, #4]
 8109916:	2201      	movs	r2, #1
 8109918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810991c:	687b      	ldr	r3, [r7, #4]
 810991e:	2224      	movs	r2, #36	@ 0x24
 8109920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109924:	687b      	ldr	r3, [r7, #4]
 8109926:	681b      	ldr	r3, [r3, #0]
 8109928:	681b      	ldr	r3, [r3, #0]
 810992a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810992c:	687b      	ldr	r3, [r7, #4]
 810992e:	681b      	ldr	r3, [r3, #0]
 8109930:	681a      	ldr	r2, [r3, #0]
 8109932:	687b      	ldr	r3, [r7, #4]
 8109934:	681b      	ldr	r3, [r3, #0]
 8109936:	f022 0201 	bic.w	r2, r2, #1
 810993a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	681b      	ldr	r3, [r3, #0]
 8109940:	689b      	ldr	r3, [r3, #8]
 8109942:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8109946:	687b      	ldr	r3, [r7, #4]
 8109948:	681b      	ldr	r3, [r3, #0]
 810994a:	683a      	ldr	r2, [r7, #0]
 810994c:	430a      	orrs	r2, r1
 810994e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109950:	6878      	ldr	r0, [r7, #4]
 8109952:	f000 f811 	bl	8109978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109956:	687b      	ldr	r3, [r7, #4]
 8109958:	681b      	ldr	r3, [r3, #0]
 810995a:	68fa      	ldr	r2, [r7, #12]
 810995c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810995e:	687b      	ldr	r3, [r7, #4]
 8109960:	2220      	movs	r2, #32
 8109962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109966:	687b      	ldr	r3, [r7, #4]
 8109968:	2200      	movs	r2, #0
 810996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810996e:	2300      	movs	r3, #0
}
 8109970:	4618      	mov	r0, r3
 8109972:	3710      	adds	r7, #16
 8109974:	46bd      	mov	sp, r7
 8109976:	bd80      	pop	{r7, pc}

08109978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109978:	b480      	push	{r7}
 810997a:	b085      	sub	sp, #20
 810997c:	af00      	add	r7, sp, #0
 810997e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109980:	687b      	ldr	r3, [r7, #4]
 8109982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109984:	2b00      	cmp	r3, #0
 8109986:	d108      	bne.n	810999a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109988:	687b      	ldr	r3, [r7, #4]
 810998a:	2201      	movs	r2, #1
 810998c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	2201      	movs	r2, #1
 8109994:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109998:	e031      	b.n	81099fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810999a:	2310      	movs	r3, #16
 810999c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810999e:	2310      	movs	r3, #16
 81099a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81099a2:	687b      	ldr	r3, [r7, #4]
 81099a4:	681b      	ldr	r3, [r3, #0]
 81099a6:	689b      	ldr	r3, [r3, #8]
 81099a8:	0e5b      	lsrs	r3, r3, #25
 81099aa:	b2db      	uxtb	r3, r3
 81099ac:	f003 0307 	and.w	r3, r3, #7
 81099b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81099b2:	687b      	ldr	r3, [r7, #4]
 81099b4:	681b      	ldr	r3, [r3, #0]
 81099b6:	689b      	ldr	r3, [r3, #8]
 81099b8:	0f5b      	lsrs	r3, r3, #29
 81099ba:	b2db      	uxtb	r3, r3
 81099bc:	f003 0307 	and.w	r3, r3, #7
 81099c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81099c2:	7bbb      	ldrb	r3, [r7, #14]
 81099c4:	7b3a      	ldrb	r2, [r7, #12]
 81099c6:	4911      	ldr	r1, [pc, #68]	@ (8109a0c <UARTEx_SetNbDataToProcess+0x94>)
 81099c8:	5c8a      	ldrb	r2, [r1, r2]
 81099ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81099ce:	7b3a      	ldrb	r2, [r7, #12]
 81099d0:	490f      	ldr	r1, [pc, #60]	@ (8109a10 <UARTEx_SetNbDataToProcess+0x98>)
 81099d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81099d4:	fb93 f3f2 	sdiv	r3, r3, r2
 81099d8:	b29a      	uxth	r2, r3
 81099da:	687b      	ldr	r3, [r7, #4]
 81099dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81099e0:	7bfb      	ldrb	r3, [r7, #15]
 81099e2:	7b7a      	ldrb	r2, [r7, #13]
 81099e4:	4909      	ldr	r1, [pc, #36]	@ (8109a0c <UARTEx_SetNbDataToProcess+0x94>)
 81099e6:	5c8a      	ldrb	r2, [r1, r2]
 81099e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81099ec:	7b7a      	ldrb	r2, [r7, #13]
 81099ee:	4908      	ldr	r1, [pc, #32]	@ (8109a10 <UARTEx_SetNbDataToProcess+0x98>)
 81099f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81099f2:	fb93 f3f2 	sdiv	r3, r3, r2
 81099f6:	b29a      	uxth	r2, r3
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 81099fe:	bf00      	nop
 8109a00:	3714      	adds	r7, #20
 8109a02:	46bd      	mov	sp, r7
 8109a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a08:	4770      	bx	lr
 8109a0a:	bf00      	nop
 8109a0c:	0810e9fc 	.word	0x0810e9fc
 8109a10:	0810ea04 	.word	0x0810ea04

08109a14 <__cvt>:
 8109a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109a18:	ec57 6b10 	vmov	r6, r7, d0
 8109a1c:	2f00      	cmp	r7, #0
 8109a1e:	460c      	mov	r4, r1
 8109a20:	4619      	mov	r1, r3
 8109a22:	463b      	mov	r3, r7
 8109a24:	bfbb      	ittet	lt
 8109a26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8109a2a:	461f      	movlt	r7, r3
 8109a2c:	2300      	movge	r3, #0
 8109a2e:	232d      	movlt	r3, #45	@ 0x2d
 8109a30:	700b      	strb	r3, [r1, #0]
 8109a32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8109a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8109a38:	4691      	mov	r9, r2
 8109a3a:	f023 0820 	bic.w	r8, r3, #32
 8109a3e:	bfbc      	itt	lt
 8109a40:	4632      	movlt	r2, r6
 8109a42:	4616      	movlt	r6, r2
 8109a44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8109a48:	d005      	beq.n	8109a56 <__cvt+0x42>
 8109a4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8109a4e:	d100      	bne.n	8109a52 <__cvt+0x3e>
 8109a50:	3401      	adds	r4, #1
 8109a52:	2102      	movs	r1, #2
 8109a54:	e000      	b.n	8109a58 <__cvt+0x44>
 8109a56:	2103      	movs	r1, #3
 8109a58:	ab03      	add	r3, sp, #12
 8109a5a:	9301      	str	r3, [sp, #4]
 8109a5c:	ab02      	add	r3, sp, #8
 8109a5e:	9300      	str	r3, [sp, #0]
 8109a60:	ec47 6b10 	vmov	d0, r6, r7
 8109a64:	4653      	mov	r3, sl
 8109a66:	4622      	mov	r2, r4
 8109a68:	f001 f986 	bl	810ad78 <_dtoa_r>
 8109a6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8109a70:	4605      	mov	r5, r0
 8109a72:	d119      	bne.n	8109aa8 <__cvt+0x94>
 8109a74:	f019 0f01 	tst.w	r9, #1
 8109a78:	d00e      	beq.n	8109a98 <__cvt+0x84>
 8109a7a:	eb00 0904 	add.w	r9, r0, r4
 8109a7e:	2200      	movs	r2, #0
 8109a80:	2300      	movs	r3, #0
 8109a82:	4630      	mov	r0, r6
 8109a84:	4639      	mov	r1, r7
 8109a86:	f7f7 f8a7 	bl	8100bd8 <__aeabi_dcmpeq>
 8109a8a:	b108      	cbz	r0, 8109a90 <__cvt+0x7c>
 8109a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8109a90:	2230      	movs	r2, #48	@ 0x30
 8109a92:	9b03      	ldr	r3, [sp, #12]
 8109a94:	454b      	cmp	r3, r9
 8109a96:	d31e      	bcc.n	8109ad6 <__cvt+0xc2>
 8109a98:	9b03      	ldr	r3, [sp, #12]
 8109a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8109a9c:	1b5b      	subs	r3, r3, r5
 8109a9e:	4628      	mov	r0, r5
 8109aa0:	6013      	str	r3, [r2, #0]
 8109aa2:	b004      	add	sp, #16
 8109aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8109aac:	eb00 0904 	add.w	r9, r0, r4
 8109ab0:	d1e5      	bne.n	8109a7e <__cvt+0x6a>
 8109ab2:	7803      	ldrb	r3, [r0, #0]
 8109ab4:	2b30      	cmp	r3, #48	@ 0x30
 8109ab6:	d10a      	bne.n	8109ace <__cvt+0xba>
 8109ab8:	2200      	movs	r2, #0
 8109aba:	2300      	movs	r3, #0
 8109abc:	4630      	mov	r0, r6
 8109abe:	4639      	mov	r1, r7
 8109ac0:	f7f7 f88a 	bl	8100bd8 <__aeabi_dcmpeq>
 8109ac4:	b918      	cbnz	r0, 8109ace <__cvt+0xba>
 8109ac6:	f1c4 0401 	rsb	r4, r4, #1
 8109aca:	f8ca 4000 	str.w	r4, [sl]
 8109ace:	f8da 3000 	ldr.w	r3, [sl]
 8109ad2:	4499      	add	r9, r3
 8109ad4:	e7d3      	b.n	8109a7e <__cvt+0x6a>
 8109ad6:	1c59      	adds	r1, r3, #1
 8109ad8:	9103      	str	r1, [sp, #12]
 8109ada:	701a      	strb	r2, [r3, #0]
 8109adc:	e7d9      	b.n	8109a92 <__cvt+0x7e>

08109ade <__exponent>:
 8109ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109ae0:	2900      	cmp	r1, #0
 8109ae2:	bfba      	itte	lt
 8109ae4:	4249      	neglt	r1, r1
 8109ae6:	232d      	movlt	r3, #45	@ 0x2d
 8109ae8:	232b      	movge	r3, #43	@ 0x2b
 8109aea:	2909      	cmp	r1, #9
 8109aec:	7002      	strb	r2, [r0, #0]
 8109aee:	7043      	strb	r3, [r0, #1]
 8109af0:	dd29      	ble.n	8109b46 <__exponent+0x68>
 8109af2:	f10d 0307 	add.w	r3, sp, #7
 8109af6:	461d      	mov	r5, r3
 8109af8:	270a      	movs	r7, #10
 8109afa:	461a      	mov	r2, r3
 8109afc:	fbb1 f6f7 	udiv	r6, r1, r7
 8109b00:	fb07 1416 	mls	r4, r7, r6, r1
 8109b04:	3430      	adds	r4, #48	@ 0x30
 8109b06:	f802 4c01 	strb.w	r4, [r2, #-1]
 8109b0a:	460c      	mov	r4, r1
 8109b0c:	2c63      	cmp	r4, #99	@ 0x63
 8109b0e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8109b12:	4631      	mov	r1, r6
 8109b14:	dcf1      	bgt.n	8109afa <__exponent+0x1c>
 8109b16:	3130      	adds	r1, #48	@ 0x30
 8109b18:	1e94      	subs	r4, r2, #2
 8109b1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8109b1e:	1c41      	adds	r1, r0, #1
 8109b20:	4623      	mov	r3, r4
 8109b22:	42ab      	cmp	r3, r5
 8109b24:	d30a      	bcc.n	8109b3c <__exponent+0x5e>
 8109b26:	f10d 0309 	add.w	r3, sp, #9
 8109b2a:	1a9b      	subs	r3, r3, r2
 8109b2c:	42ac      	cmp	r4, r5
 8109b2e:	bf88      	it	hi
 8109b30:	2300      	movhi	r3, #0
 8109b32:	3302      	adds	r3, #2
 8109b34:	4403      	add	r3, r0
 8109b36:	1a18      	subs	r0, r3, r0
 8109b38:	b003      	add	sp, #12
 8109b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109b3c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8109b40:	f801 6f01 	strb.w	r6, [r1, #1]!
 8109b44:	e7ed      	b.n	8109b22 <__exponent+0x44>
 8109b46:	2330      	movs	r3, #48	@ 0x30
 8109b48:	3130      	adds	r1, #48	@ 0x30
 8109b4a:	7083      	strb	r3, [r0, #2]
 8109b4c:	70c1      	strb	r1, [r0, #3]
 8109b4e:	1d03      	adds	r3, r0, #4
 8109b50:	e7f1      	b.n	8109b36 <__exponent+0x58>
	...

08109b54 <_printf_float>:
 8109b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b58:	b08d      	sub	sp, #52	@ 0x34
 8109b5a:	460c      	mov	r4, r1
 8109b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8109b60:	4616      	mov	r6, r2
 8109b62:	461f      	mov	r7, r3
 8109b64:	4605      	mov	r5, r0
 8109b66:	f000 fff3 	bl	810ab50 <_localeconv_r>
 8109b6a:	6803      	ldr	r3, [r0, #0]
 8109b6c:	9304      	str	r3, [sp, #16]
 8109b6e:	4618      	mov	r0, r3
 8109b70:	f7f6 fc06 	bl	8100380 <strlen>
 8109b74:	2300      	movs	r3, #0
 8109b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8109b78:	f8d8 3000 	ldr.w	r3, [r8]
 8109b7c:	9005      	str	r0, [sp, #20]
 8109b7e:	3307      	adds	r3, #7
 8109b80:	f023 0307 	bic.w	r3, r3, #7
 8109b84:	f103 0208 	add.w	r2, r3, #8
 8109b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8109b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8109b90:	f8c8 2000 	str.w	r2, [r8]
 8109b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8109b9c:	9307      	str	r3, [sp, #28]
 8109b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8109ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8109ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109baa:	4b9c      	ldr	r3, [pc, #624]	@ (8109e1c <_printf_float+0x2c8>)
 8109bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109bb0:	f7f7 f844 	bl	8100c3c <__aeabi_dcmpun>
 8109bb4:	bb70      	cbnz	r0, 8109c14 <_printf_float+0xc0>
 8109bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109bba:	4b98      	ldr	r3, [pc, #608]	@ (8109e1c <_printf_float+0x2c8>)
 8109bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109bc0:	f7f7 f81e 	bl	8100c00 <__aeabi_dcmple>
 8109bc4:	bb30      	cbnz	r0, 8109c14 <_printf_float+0xc0>
 8109bc6:	2200      	movs	r2, #0
 8109bc8:	2300      	movs	r3, #0
 8109bca:	4640      	mov	r0, r8
 8109bcc:	4649      	mov	r1, r9
 8109bce:	f7f7 f80d 	bl	8100bec <__aeabi_dcmplt>
 8109bd2:	b110      	cbz	r0, 8109bda <_printf_float+0x86>
 8109bd4:	232d      	movs	r3, #45	@ 0x2d
 8109bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109bda:	4a91      	ldr	r2, [pc, #580]	@ (8109e20 <_printf_float+0x2cc>)
 8109bdc:	4b91      	ldr	r3, [pc, #580]	@ (8109e24 <_printf_float+0x2d0>)
 8109bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8109be2:	bf94      	ite	ls
 8109be4:	4690      	movls	r8, r2
 8109be6:	4698      	movhi	r8, r3
 8109be8:	2303      	movs	r3, #3
 8109bea:	6123      	str	r3, [r4, #16]
 8109bec:	f02b 0304 	bic.w	r3, fp, #4
 8109bf0:	6023      	str	r3, [r4, #0]
 8109bf2:	f04f 0900 	mov.w	r9, #0
 8109bf6:	9700      	str	r7, [sp, #0]
 8109bf8:	4633      	mov	r3, r6
 8109bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8109bfc:	4621      	mov	r1, r4
 8109bfe:	4628      	mov	r0, r5
 8109c00:	f000 f9d2 	bl	8109fa8 <_printf_common>
 8109c04:	3001      	adds	r0, #1
 8109c06:	f040 808d 	bne.w	8109d24 <_printf_float+0x1d0>
 8109c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109c0e:	b00d      	add	sp, #52	@ 0x34
 8109c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c14:	4642      	mov	r2, r8
 8109c16:	464b      	mov	r3, r9
 8109c18:	4640      	mov	r0, r8
 8109c1a:	4649      	mov	r1, r9
 8109c1c:	f7f7 f80e 	bl	8100c3c <__aeabi_dcmpun>
 8109c20:	b140      	cbz	r0, 8109c34 <_printf_float+0xe0>
 8109c22:	464b      	mov	r3, r9
 8109c24:	2b00      	cmp	r3, #0
 8109c26:	bfbc      	itt	lt
 8109c28:	232d      	movlt	r3, #45	@ 0x2d
 8109c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8109c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8109e28 <_printf_float+0x2d4>)
 8109c30:	4b7e      	ldr	r3, [pc, #504]	@ (8109e2c <_printf_float+0x2d8>)
 8109c32:	e7d4      	b.n	8109bde <_printf_float+0x8a>
 8109c34:	6863      	ldr	r3, [r4, #4]
 8109c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8109c3a:	9206      	str	r2, [sp, #24]
 8109c3c:	1c5a      	adds	r2, r3, #1
 8109c3e:	d13b      	bne.n	8109cb8 <_printf_float+0x164>
 8109c40:	2306      	movs	r3, #6
 8109c42:	6063      	str	r3, [r4, #4]
 8109c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8109c48:	2300      	movs	r3, #0
 8109c4a:	6022      	str	r2, [r4, #0]
 8109c4c:	9303      	str	r3, [sp, #12]
 8109c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8109c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8109c54:	ab09      	add	r3, sp, #36	@ 0x24
 8109c56:	9300      	str	r3, [sp, #0]
 8109c58:	6861      	ldr	r1, [r4, #4]
 8109c5a:	ec49 8b10 	vmov	d0, r8, r9
 8109c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8109c62:	4628      	mov	r0, r5
 8109c64:	f7ff fed6 	bl	8109a14 <__cvt>
 8109c68:	9b06      	ldr	r3, [sp, #24]
 8109c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8109c6c:	2b47      	cmp	r3, #71	@ 0x47
 8109c6e:	4680      	mov	r8, r0
 8109c70:	d129      	bne.n	8109cc6 <_printf_float+0x172>
 8109c72:	1cc8      	adds	r0, r1, #3
 8109c74:	db02      	blt.n	8109c7c <_printf_float+0x128>
 8109c76:	6863      	ldr	r3, [r4, #4]
 8109c78:	4299      	cmp	r1, r3
 8109c7a:	dd41      	ble.n	8109d00 <_printf_float+0x1ac>
 8109c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8109c80:	fa5f fa8a 	uxtb.w	sl, sl
 8109c84:	3901      	subs	r1, #1
 8109c86:	4652      	mov	r2, sl
 8109c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8109c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8109c8e:	f7ff ff26 	bl	8109ade <__exponent>
 8109c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8109c94:	1813      	adds	r3, r2, r0
 8109c96:	2a01      	cmp	r2, #1
 8109c98:	4681      	mov	r9, r0
 8109c9a:	6123      	str	r3, [r4, #16]
 8109c9c:	dc02      	bgt.n	8109ca4 <_printf_float+0x150>
 8109c9e:	6822      	ldr	r2, [r4, #0]
 8109ca0:	07d2      	lsls	r2, r2, #31
 8109ca2:	d501      	bpl.n	8109ca8 <_printf_float+0x154>
 8109ca4:	3301      	adds	r3, #1
 8109ca6:	6123      	str	r3, [r4, #16]
 8109ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8109cac:	2b00      	cmp	r3, #0
 8109cae:	d0a2      	beq.n	8109bf6 <_printf_float+0xa2>
 8109cb0:	232d      	movs	r3, #45	@ 0x2d
 8109cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8109cb6:	e79e      	b.n	8109bf6 <_printf_float+0xa2>
 8109cb8:	9a06      	ldr	r2, [sp, #24]
 8109cba:	2a47      	cmp	r2, #71	@ 0x47
 8109cbc:	d1c2      	bne.n	8109c44 <_printf_float+0xf0>
 8109cbe:	2b00      	cmp	r3, #0
 8109cc0:	d1c0      	bne.n	8109c44 <_printf_float+0xf0>
 8109cc2:	2301      	movs	r3, #1
 8109cc4:	e7bd      	b.n	8109c42 <_printf_float+0xee>
 8109cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109cca:	d9db      	bls.n	8109c84 <_printf_float+0x130>
 8109ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8109cd0:	d118      	bne.n	8109d04 <_printf_float+0x1b0>
 8109cd2:	2900      	cmp	r1, #0
 8109cd4:	6863      	ldr	r3, [r4, #4]
 8109cd6:	dd0b      	ble.n	8109cf0 <_printf_float+0x19c>
 8109cd8:	6121      	str	r1, [r4, #16]
 8109cda:	b913      	cbnz	r3, 8109ce2 <_printf_float+0x18e>
 8109cdc:	6822      	ldr	r2, [r4, #0]
 8109cde:	07d0      	lsls	r0, r2, #31
 8109ce0:	d502      	bpl.n	8109ce8 <_printf_float+0x194>
 8109ce2:	3301      	adds	r3, #1
 8109ce4:	440b      	add	r3, r1
 8109ce6:	6123      	str	r3, [r4, #16]
 8109ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8109cea:	f04f 0900 	mov.w	r9, #0
 8109cee:	e7db      	b.n	8109ca8 <_printf_float+0x154>
 8109cf0:	b913      	cbnz	r3, 8109cf8 <_printf_float+0x1a4>
 8109cf2:	6822      	ldr	r2, [r4, #0]
 8109cf4:	07d2      	lsls	r2, r2, #31
 8109cf6:	d501      	bpl.n	8109cfc <_printf_float+0x1a8>
 8109cf8:	3302      	adds	r3, #2
 8109cfa:	e7f4      	b.n	8109ce6 <_printf_float+0x192>
 8109cfc:	2301      	movs	r3, #1
 8109cfe:	e7f2      	b.n	8109ce6 <_printf_float+0x192>
 8109d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8109d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8109d06:	4299      	cmp	r1, r3
 8109d08:	db05      	blt.n	8109d16 <_printf_float+0x1c2>
 8109d0a:	6823      	ldr	r3, [r4, #0]
 8109d0c:	6121      	str	r1, [r4, #16]
 8109d0e:	07d8      	lsls	r0, r3, #31
 8109d10:	d5ea      	bpl.n	8109ce8 <_printf_float+0x194>
 8109d12:	1c4b      	adds	r3, r1, #1
 8109d14:	e7e7      	b.n	8109ce6 <_printf_float+0x192>
 8109d16:	2900      	cmp	r1, #0
 8109d18:	bfd4      	ite	le
 8109d1a:	f1c1 0202 	rsble	r2, r1, #2
 8109d1e:	2201      	movgt	r2, #1
 8109d20:	4413      	add	r3, r2
 8109d22:	e7e0      	b.n	8109ce6 <_printf_float+0x192>
 8109d24:	6823      	ldr	r3, [r4, #0]
 8109d26:	055a      	lsls	r2, r3, #21
 8109d28:	d407      	bmi.n	8109d3a <_printf_float+0x1e6>
 8109d2a:	6923      	ldr	r3, [r4, #16]
 8109d2c:	4642      	mov	r2, r8
 8109d2e:	4631      	mov	r1, r6
 8109d30:	4628      	mov	r0, r5
 8109d32:	47b8      	blx	r7
 8109d34:	3001      	adds	r0, #1
 8109d36:	d12b      	bne.n	8109d90 <_printf_float+0x23c>
 8109d38:	e767      	b.n	8109c0a <_printf_float+0xb6>
 8109d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8109d3e:	f240 80dd 	bls.w	8109efc <_printf_float+0x3a8>
 8109d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109d46:	2200      	movs	r2, #0
 8109d48:	2300      	movs	r3, #0
 8109d4a:	f7f6 ff45 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d4e:	2800      	cmp	r0, #0
 8109d50:	d033      	beq.n	8109dba <_printf_float+0x266>
 8109d52:	4a37      	ldr	r2, [pc, #220]	@ (8109e30 <_printf_float+0x2dc>)
 8109d54:	2301      	movs	r3, #1
 8109d56:	4631      	mov	r1, r6
 8109d58:	4628      	mov	r0, r5
 8109d5a:	47b8      	blx	r7
 8109d5c:	3001      	adds	r0, #1
 8109d5e:	f43f af54 	beq.w	8109c0a <_printf_float+0xb6>
 8109d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8109d66:	4543      	cmp	r3, r8
 8109d68:	db02      	blt.n	8109d70 <_printf_float+0x21c>
 8109d6a:	6823      	ldr	r3, [r4, #0]
 8109d6c:	07d8      	lsls	r0, r3, #31
 8109d6e:	d50f      	bpl.n	8109d90 <_printf_float+0x23c>
 8109d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109d74:	4631      	mov	r1, r6
 8109d76:	4628      	mov	r0, r5
 8109d78:	47b8      	blx	r7
 8109d7a:	3001      	adds	r0, #1
 8109d7c:	f43f af45 	beq.w	8109c0a <_printf_float+0xb6>
 8109d80:	f04f 0900 	mov.w	r9, #0
 8109d84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8109d88:	f104 0a1a 	add.w	sl, r4, #26
 8109d8c:	45c8      	cmp	r8, r9
 8109d8e:	dc09      	bgt.n	8109da4 <_printf_float+0x250>
 8109d90:	6823      	ldr	r3, [r4, #0]
 8109d92:	079b      	lsls	r3, r3, #30
 8109d94:	f100 8103 	bmi.w	8109f9e <_printf_float+0x44a>
 8109d98:	68e0      	ldr	r0, [r4, #12]
 8109d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8109d9c:	4298      	cmp	r0, r3
 8109d9e:	bfb8      	it	lt
 8109da0:	4618      	movlt	r0, r3
 8109da2:	e734      	b.n	8109c0e <_printf_float+0xba>
 8109da4:	2301      	movs	r3, #1
 8109da6:	4652      	mov	r2, sl
 8109da8:	4631      	mov	r1, r6
 8109daa:	4628      	mov	r0, r5
 8109dac:	47b8      	blx	r7
 8109dae:	3001      	adds	r0, #1
 8109db0:	f43f af2b 	beq.w	8109c0a <_printf_float+0xb6>
 8109db4:	f109 0901 	add.w	r9, r9, #1
 8109db8:	e7e8      	b.n	8109d8c <_printf_float+0x238>
 8109dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109dbc:	2b00      	cmp	r3, #0
 8109dbe:	dc39      	bgt.n	8109e34 <_printf_float+0x2e0>
 8109dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8109e30 <_printf_float+0x2dc>)
 8109dc2:	2301      	movs	r3, #1
 8109dc4:	4631      	mov	r1, r6
 8109dc6:	4628      	mov	r0, r5
 8109dc8:	47b8      	blx	r7
 8109dca:	3001      	adds	r0, #1
 8109dcc:	f43f af1d 	beq.w	8109c0a <_printf_float+0xb6>
 8109dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8109dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8109dd8:	d102      	bne.n	8109de0 <_printf_float+0x28c>
 8109dda:	6823      	ldr	r3, [r4, #0]
 8109ddc:	07d9      	lsls	r1, r3, #31
 8109dde:	d5d7      	bpl.n	8109d90 <_printf_float+0x23c>
 8109de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109de4:	4631      	mov	r1, r6
 8109de6:	4628      	mov	r0, r5
 8109de8:	47b8      	blx	r7
 8109dea:	3001      	adds	r0, #1
 8109dec:	f43f af0d 	beq.w	8109c0a <_printf_float+0xb6>
 8109df0:	f04f 0a00 	mov.w	sl, #0
 8109df4:	f104 0b1a 	add.w	fp, r4, #26
 8109df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109dfa:	425b      	negs	r3, r3
 8109dfc:	4553      	cmp	r3, sl
 8109dfe:	dc01      	bgt.n	8109e04 <_printf_float+0x2b0>
 8109e00:	464b      	mov	r3, r9
 8109e02:	e793      	b.n	8109d2c <_printf_float+0x1d8>
 8109e04:	2301      	movs	r3, #1
 8109e06:	465a      	mov	r2, fp
 8109e08:	4631      	mov	r1, r6
 8109e0a:	4628      	mov	r0, r5
 8109e0c:	47b8      	blx	r7
 8109e0e:	3001      	adds	r0, #1
 8109e10:	f43f aefb 	beq.w	8109c0a <_printf_float+0xb6>
 8109e14:	f10a 0a01 	add.w	sl, sl, #1
 8109e18:	e7ee      	b.n	8109df8 <_printf_float+0x2a4>
 8109e1a:	bf00      	nop
 8109e1c:	7fefffff 	.word	0x7fefffff
 8109e20:	0810ea0c 	.word	0x0810ea0c
 8109e24:	0810ea10 	.word	0x0810ea10
 8109e28:	0810ea14 	.word	0x0810ea14
 8109e2c:	0810ea18 	.word	0x0810ea18
 8109e30:	0810ea1c 	.word	0x0810ea1c
 8109e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109e3a:	4553      	cmp	r3, sl
 8109e3c:	bfa8      	it	ge
 8109e3e:	4653      	movge	r3, sl
 8109e40:	2b00      	cmp	r3, #0
 8109e42:	4699      	mov	r9, r3
 8109e44:	dc36      	bgt.n	8109eb4 <_printf_float+0x360>
 8109e46:	f04f 0b00 	mov.w	fp, #0
 8109e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109e4e:	f104 021a 	add.w	r2, r4, #26
 8109e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8109e54:	9306      	str	r3, [sp, #24]
 8109e56:	eba3 0309 	sub.w	r3, r3, r9
 8109e5a:	455b      	cmp	r3, fp
 8109e5c:	dc31      	bgt.n	8109ec2 <_printf_float+0x36e>
 8109e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109e60:	459a      	cmp	sl, r3
 8109e62:	dc3a      	bgt.n	8109eda <_printf_float+0x386>
 8109e64:	6823      	ldr	r3, [r4, #0]
 8109e66:	07da      	lsls	r2, r3, #31
 8109e68:	d437      	bmi.n	8109eda <_printf_float+0x386>
 8109e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8109e70:	9b06      	ldr	r3, [sp, #24]
 8109e72:	ebaa 0303 	sub.w	r3, sl, r3
 8109e76:	4599      	cmp	r9, r3
 8109e78:	bfa8      	it	ge
 8109e7a:	4699      	movge	r9, r3
 8109e7c:	f1b9 0f00 	cmp.w	r9, #0
 8109e80:	dc33      	bgt.n	8109eea <_printf_float+0x396>
 8109e82:	f04f 0800 	mov.w	r8, #0
 8109e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8109e8a:	f104 0b1a 	add.w	fp, r4, #26
 8109e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109e90:	ebaa 0303 	sub.w	r3, sl, r3
 8109e94:	eba3 0309 	sub.w	r3, r3, r9
 8109e98:	4543      	cmp	r3, r8
 8109e9a:	f77f af79 	ble.w	8109d90 <_printf_float+0x23c>
 8109e9e:	2301      	movs	r3, #1
 8109ea0:	465a      	mov	r2, fp
 8109ea2:	4631      	mov	r1, r6
 8109ea4:	4628      	mov	r0, r5
 8109ea6:	47b8      	blx	r7
 8109ea8:	3001      	adds	r0, #1
 8109eaa:	f43f aeae 	beq.w	8109c0a <_printf_float+0xb6>
 8109eae:	f108 0801 	add.w	r8, r8, #1
 8109eb2:	e7ec      	b.n	8109e8e <_printf_float+0x33a>
 8109eb4:	4642      	mov	r2, r8
 8109eb6:	4631      	mov	r1, r6
 8109eb8:	4628      	mov	r0, r5
 8109eba:	47b8      	blx	r7
 8109ebc:	3001      	adds	r0, #1
 8109ebe:	d1c2      	bne.n	8109e46 <_printf_float+0x2f2>
 8109ec0:	e6a3      	b.n	8109c0a <_printf_float+0xb6>
 8109ec2:	2301      	movs	r3, #1
 8109ec4:	4631      	mov	r1, r6
 8109ec6:	4628      	mov	r0, r5
 8109ec8:	9206      	str	r2, [sp, #24]
 8109eca:	47b8      	blx	r7
 8109ecc:	3001      	adds	r0, #1
 8109ece:	f43f ae9c 	beq.w	8109c0a <_printf_float+0xb6>
 8109ed2:	9a06      	ldr	r2, [sp, #24]
 8109ed4:	f10b 0b01 	add.w	fp, fp, #1
 8109ed8:	e7bb      	b.n	8109e52 <_printf_float+0x2fe>
 8109eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109ede:	4631      	mov	r1, r6
 8109ee0:	4628      	mov	r0, r5
 8109ee2:	47b8      	blx	r7
 8109ee4:	3001      	adds	r0, #1
 8109ee6:	d1c0      	bne.n	8109e6a <_printf_float+0x316>
 8109ee8:	e68f      	b.n	8109c0a <_printf_float+0xb6>
 8109eea:	9a06      	ldr	r2, [sp, #24]
 8109eec:	464b      	mov	r3, r9
 8109eee:	4442      	add	r2, r8
 8109ef0:	4631      	mov	r1, r6
 8109ef2:	4628      	mov	r0, r5
 8109ef4:	47b8      	blx	r7
 8109ef6:	3001      	adds	r0, #1
 8109ef8:	d1c3      	bne.n	8109e82 <_printf_float+0x32e>
 8109efa:	e686      	b.n	8109c0a <_printf_float+0xb6>
 8109efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8109f00:	f1ba 0f01 	cmp.w	sl, #1
 8109f04:	dc01      	bgt.n	8109f0a <_printf_float+0x3b6>
 8109f06:	07db      	lsls	r3, r3, #31
 8109f08:	d536      	bpl.n	8109f78 <_printf_float+0x424>
 8109f0a:	2301      	movs	r3, #1
 8109f0c:	4642      	mov	r2, r8
 8109f0e:	4631      	mov	r1, r6
 8109f10:	4628      	mov	r0, r5
 8109f12:	47b8      	blx	r7
 8109f14:	3001      	adds	r0, #1
 8109f16:	f43f ae78 	beq.w	8109c0a <_printf_float+0xb6>
 8109f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8109f1e:	4631      	mov	r1, r6
 8109f20:	4628      	mov	r0, r5
 8109f22:	47b8      	blx	r7
 8109f24:	3001      	adds	r0, #1
 8109f26:	f43f ae70 	beq.w	8109c0a <_printf_float+0xb6>
 8109f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8109f2e:	2200      	movs	r2, #0
 8109f30:	2300      	movs	r3, #0
 8109f32:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8109f36:	f7f6 fe4f 	bl	8100bd8 <__aeabi_dcmpeq>
 8109f3a:	b9c0      	cbnz	r0, 8109f6e <_printf_float+0x41a>
 8109f3c:	4653      	mov	r3, sl
 8109f3e:	f108 0201 	add.w	r2, r8, #1
 8109f42:	4631      	mov	r1, r6
 8109f44:	4628      	mov	r0, r5
 8109f46:	47b8      	blx	r7
 8109f48:	3001      	adds	r0, #1
 8109f4a:	d10c      	bne.n	8109f66 <_printf_float+0x412>
 8109f4c:	e65d      	b.n	8109c0a <_printf_float+0xb6>
 8109f4e:	2301      	movs	r3, #1
 8109f50:	465a      	mov	r2, fp
 8109f52:	4631      	mov	r1, r6
 8109f54:	4628      	mov	r0, r5
 8109f56:	47b8      	blx	r7
 8109f58:	3001      	adds	r0, #1
 8109f5a:	f43f ae56 	beq.w	8109c0a <_printf_float+0xb6>
 8109f5e:	f108 0801 	add.w	r8, r8, #1
 8109f62:	45d0      	cmp	r8, sl
 8109f64:	dbf3      	blt.n	8109f4e <_printf_float+0x3fa>
 8109f66:	464b      	mov	r3, r9
 8109f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8109f6c:	e6df      	b.n	8109d2e <_printf_float+0x1da>
 8109f6e:	f04f 0800 	mov.w	r8, #0
 8109f72:	f104 0b1a 	add.w	fp, r4, #26
 8109f76:	e7f4      	b.n	8109f62 <_printf_float+0x40e>
 8109f78:	2301      	movs	r3, #1
 8109f7a:	4642      	mov	r2, r8
 8109f7c:	e7e1      	b.n	8109f42 <_printf_float+0x3ee>
 8109f7e:	2301      	movs	r3, #1
 8109f80:	464a      	mov	r2, r9
 8109f82:	4631      	mov	r1, r6
 8109f84:	4628      	mov	r0, r5
 8109f86:	47b8      	blx	r7
 8109f88:	3001      	adds	r0, #1
 8109f8a:	f43f ae3e 	beq.w	8109c0a <_printf_float+0xb6>
 8109f8e:	f108 0801 	add.w	r8, r8, #1
 8109f92:	68e3      	ldr	r3, [r4, #12]
 8109f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8109f96:	1a5b      	subs	r3, r3, r1
 8109f98:	4543      	cmp	r3, r8
 8109f9a:	dcf0      	bgt.n	8109f7e <_printf_float+0x42a>
 8109f9c:	e6fc      	b.n	8109d98 <_printf_float+0x244>
 8109f9e:	f04f 0800 	mov.w	r8, #0
 8109fa2:	f104 0919 	add.w	r9, r4, #25
 8109fa6:	e7f4      	b.n	8109f92 <_printf_float+0x43e>

08109fa8 <_printf_common>:
 8109fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109fac:	4616      	mov	r6, r2
 8109fae:	4698      	mov	r8, r3
 8109fb0:	688a      	ldr	r2, [r1, #8]
 8109fb2:	690b      	ldr	r3, [r1, #16]
 8109fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8109fb8:	4293      	cmp	r3, r2
 8109fba:	bfb8      	it	lt
 8109fbc:	4613      	movlt	r3, r2
 8109fbe:	6033      	str	r3, [r6, #0]
 8109fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8109fc4:	4607      	mov	r7, r0
 8109fc6:	460c      	mov	r4, r1
 8109fc8:	b10a      	cbz	r2, 8109fce <_printf_common+0x26>
 8109fca:	3301      	adds	r3, #1
 8109fcc:	6033      	str	r3, [r6, #0]
 8109fce:	6823      	ldr	r3, [r4, #0]
 8109fd0:	0699      	lsls	r1, r3, #26
 8109fd2:	bf42      	ittt	mi
 8109fd4:	6833      	ldrmi	r3, [r6, #0]
 8109fd6:	3302      	addmi	r3, #2
 8109fd8:	6033      	strmi	r3, [r6, #0]
 8109fda:	6825      	ldr	r5, [r4, #0]
 8109fdc:	f015 0506 	ands.w	r5, r5, #6
 8109fe0:	d106      	bne.n	8109ff0 <_printf_common+0x48>
 8109fe2:	f104 0a19 	add.w	sl, r4, #25
 8109fe6:	68e3      	ldr	r3, [r4, #12]
 8109fe8:	6832      	ldr	r2, [r6, #0]
 8109fea:	1a9b      	subs	r3, r3, r2
 8109fec:	42ab      	cmp	r3, r5
 8109fee:	dc26      	bgt.n	810a03e <_printf_common+0x96>
 8109ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8109ff4:	6822      	ldr	r2, [r4, #0]
 8109ff6:	3b00      	subs	r3, #0
 8109ff8:	bf18      	it	ne
 8109ffa:	2301      	movne	r3, #1
 8109ffc:	0692      	lsls	r2, r2, #26
 8109ffe:	d42b      	bmi.n	810a058 <_printf_common+0xb0>
 810a000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810a004:	4641      	mov	r1, r8
 810a006:	4638      	mov	r0, r7
 810a008:	47c8      	blx	r9
 810a00a:	3001      	adds	r0, #1
 810a00c:	d01e      	beq.n	810a04c <_printf_common+0xa4>
 810a00e:	6823      	ldr	r3, [r4, #0]
 810a010:	6922      	ldr	r2, [r4, #16]
 810a012:	f003 0306 	and.w	r3, r3, #6
 810a016:	2b04      	cmp	r3, #4
 810a018:	bf02      	ittt	eq
 810a01a:	68e5      	ldreq	r5, [r4, #12]
 810a01c:	6833      	ldreq	r3, [r6, #0]
 810a01e:	1aed      	subeq	r5, r5, r3
 810a020:	68a3      	ldr	r3, [r4, #8]
 810a022:	bf0c      	ite	eq
 810a024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a028:	2500      	movne	r5, #0
 810a02a:	4293      	cmp	r3, r2
 810a02c:	bfc4      	itt	gt
 810a02e:	1a9b      	subgt	r3, r3, r2
 810a030:	18ed      	addgt	r5, r5, r3
 810a032:	2600      	movs	r6, #0
 810a034:	341a      	adds	r4, #26
 810a036:	42b5      	cmp	r5, r6
 810a038:	d11a      	bne.n	810a070 <_printf_common+0xc8>
 810a03a:	2000      	movs	r0, #0
 810a03c:	e008      	b.n	810a050 <_printf_common+0xa8>
 810a03e:	2301      	movs	r3, #1
 810a040:	4652      	mov	r2, sl
 810a042:	4641      	mov	r1, r8
 810a044:	4638      	mov	r0, r7
 810a046:	47c8      	blx	r9
 810a048:	3001      	adds	r0, #1
 810a04a:	d103      	bne.n	810a054 <_printf_common+0xac>
 810a04c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a054:	3501      	adds	r5, #1
 810a056:	e7c6      	b.n	8109fe6 <_printf_common+0x3e>
 810a058:	18e1      	adds	r1, r4, r3
 810a05a:	1c5a      	adds	r2, r3, #1
 810a05c:	2030      	movs	r0, #48	@ 0x30
 810a05e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810a062:	4422      	add	r2, r4
 810a064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810a068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810a06c:	3302      	adds	r3, #2
 810a06e:	e7c7      	b.n	810a000 <_printf_common+0x58>
 810a070:	2301      	movs	r3, #1
 810a072:	4622      	mov	r2, r4
 810a074:	4641      	mov	r1, r8
 810a076:	4638      	mov	r0, r7
 810a078:	47c8      	blx	r9
 810a07a:	3001      	adds	r0, #1
 810a07c:	d0e6      	beq.n	810a04c <_printf_common+0xa4>
 810a07e:	3601      	adds	r6, #1
 810a080:	e7d9      	b.n	810a036 <_printf_common+0x8e>
	...

0810a084 <_printf_i>:
 810a084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a088:	7e0f      	ldrb	r7, [r1, #24]
 810a08a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810a08c:	2f78      	cmp	r7, #120	@ 0x78
 810a08e:	4691      	mov	r9, r2
 810a090:	4680      	mov	r8, r0
 810a092:	460c      	mov	r4, r1
 810a094:	469a      	mov	sl, r3
 810a096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810a09a:	d807      	bhi.n	810a0ac <_printf_i+0x28>
 810a09c:	2f62      	cmp	r7, #98	@ 0x62
 810a09e:	d80a      	bhi.n	810a0b6 <_printf_i+0x32>
 810a0a0:	2f00      	cmp	r7, #0
 810a0a2:	f000 80d2 	beq.w	810a24a <_printf_i+0x1c6>
 810a0a6:	2f58      	cmp	r7, #88	@ 0x58
 810a0a8:	f000 80b9 	beq.w	810a21e <_printf_i+0x19a>
 810a0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810a0b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810a0b4:	e03a      	b.n	810a12c <_printf_i+0xa8>
 810a0b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810a0ba:	2b15      	cmp	r3, #21
 810a0bc:	d8f6      	bhi.n	810a0ac <_printf_i+0x28>
 810a0be:	a101      	add	r1, pc, #4	@ (adr r1, 810a0c4 <_printf_i+0x40>)
 810a0c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a0c4:	0810a11d 	.word	0x0810a11d
 810a0c8:	0810a131 	.word	0x0810a131
 810a0cc:	0810a0ad 	.word	0x0810a0ad
 810a0d0:	0810a0ad 	.word	0x0810a0ad
 810a0d4:	0810a0ad 	.word	0x0810a0ad
 810a0d8:	0810a0ad 	.word	0x0810a0ad
 810a0dc:	0810a131 	.word	0x0810a131
 810a0e0:	0810a0ad 	.word	0x0810a0ad
 810a0e4:	0810a0ad 	.word	0x0810a0ad
 810a0e8:	0810a0ad 	.word	0x0810a0ad
 810a0ec:	0810a0ad 	.word	0x0810a0ad
 810a0f0:	0810a231 	.word	0x0810a231
 810a0f4:	0810a15b 	.word	0x0810a15b
 810a0f8:	0810a1eb 	.word	0x0810a1eb
 810a0fc:	0810a0ad 	.word	0x0810a0ad
 810a100:	0810a0ad 	.word	0x0810a0ad
 810a104:	0810a253 	.word	0x0810a253
 810a108:	0810a0ad 	.word	0x0810a0ad
 810a10c:	0810a15b 	.word	0x0810a15b
 810a110:	0810a0ad 	.word	0x0810a0ad
 810a114:	0810a0ad 	.word	0x0810a0ad
 810a118:	0810a1f3 	.word	0x0810a1f3
 810a11c:	6833      	ldr	r3, [r6, #0]
 810a11e:	1d1a      	adds	r2, r3, #4
 810a120:	681b      	ldr	r3, [r3, #0]
 810a122:	6032      	str	r2, [r6, #0]
 810a124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810a128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810a12c:	2301      	movs	r3, #1
 810a12e:	e09d      	b.n	810a26c <_printf_i+0x1e8>
 810a130:	6833      	ldr	r3, [r6, #0]
 810a132:	6820      	ldr	r0, [r4, #0]
 810a134:	1d19      	adds	r1, r3, #4
 810a136:	6031      	str	r1, [r6, #0]
 810a138:	0606      	lsls	r6, r0, #24
 810a13a:	d501      	bpl.n	810a140 <_printf_i+0xbc>
 810a13c:	681d      	ldr	r5, [r3, #0]
 810a13e:	e003      	b.n	810a148 <_printf_i+0xc4>
 810a140:	0645      	lsls	r5, r0, #25
 810a142:	d5fb      	bpl.n	810a13c <_printf_i+0xb8>
 810a144:	f9b3 5000 	ldrsh.w	r5, [r3]
 810a148:	2d00      	cmp	r5, #0
 810a14a:	da03      	bge.n	810a154 <_printf_i+0xd0>
 810a14c:	232d      	movs	r3, #45	@ 0x2d
 810a14e:	426d      	negs	r5, r5
 810a150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a154:	4859      	ldr	r0, [pc, #356]	@ (810a2bc <_printf_i+0x238>)
 810a156:	230a      	movs	r3, #10
 810a158:	e011      	b.n	810a17e <_printf_i+0xfa>
 810a15a:	6821      	ldr	r1, [r4, #0]
 810a15c:	6833      	ldr	r3, [r6, #0]
 810a15e:	0608      	lsls	r0, r1, #24
 810a160:	f853 5b04 	ldr.w	r5, [r3], #4
 810a164:	d402      	bmi.n	810a16c <_printf_i+0xe8>
 810a166:	0649      	lsls	r1, r1, #25
 810a168:	bf48      	it	mi
 810a16a:	b2ad      	uxthmi	r5, r5
 810a16c:	2f6f      	cmp	r7, #111	@ 0x6f
 810a16e:	4853      	ldr	r0, [pc, #332]	@ (810a2bc <_printf_i+0x238>)
 810a170:	6033      	str	r3, [r6, #0]
 810a172:	bf14      	ite	ne
 810a174:	230a      	movne	r3, #10
 810a176:	2308      	moveq	r3, #8
 810a178:	2100      	movs	r1, #0
 810a17a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810a17e:	6866      	ldr	r6, [r4, #4]
 810a180:	60a6      	str	r6, [r4, #8]
 810a182:	2e00      	cmp	r6, #0
 810a184:	bfa2      	ittt	ge
 810a186:	6821      	ldrge	r1, [r4, #0]
 810a188:	f021 0104 	bicge.w	r1, r1, #4
 810a18c:	6021      	strge	r1, [r4, #0]
 810a18e:	b90d      	cbnz	r5, 810a194 <_printf_i+0x110>
 810a190:	2e00      	cmp	r6, #0
 810a192:	d04b      	beq.n	810a22c <_printf_i+0x1a8>
 810a194:	4616      	mov	r6, r2
 810a196:	fbb5 f1f3 	udiv	r1, r5, r3
 810a19a:	fb03 5711 	mls	r7, r3, r1, r5
 810a19e:	5dc7      	ldrb	r7, [r0, r7]
 810a1a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810a1a4:	462f      	mov	r7, r5
 810a1a6:	42bb      	cmp	r3, r7
 810a1a8:	460d      	mov	r5, r1
 810a1aa:	d9f4      	bls.n	810a196 <_printf_i+0x112>
 810a1ac:	2b08      	cmp	r3, #8
 810a1ae:	d10b      	bne.n	810a1c8 <_printf_i+0x144>
 810a1b0:	6823      	ldr	r3, [r4, #0]
 810a1b2:	07df      	lsls	r7, r3, #31
 810a1b4:	d508      	bpl.n	810a1c8 <_printf_i+0x144>
 810a1b6:	6923      	ldr	r3, [r4, #16]
 810a1b8:	6861      	ldr	r1, [r4, #4]
 810a1ba:	4299      	cmp	r1, r3
 810a1bc:	bfde      	ittt	le
 810a1be:	2330      	movle	r3, #48	@ 0x30
 810a1c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 810a1c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 810a1c8:	1b92      	subs	r2, r2, r6
 810a1ca:	6122      	str	r2, [r4, #16]
 810a1cc:	f8cd a000 	str.w	sl, [sp]
 810a1d0:	464b      	mov	r3, r9
 810a1d2:	aa03      	add	r2, sp, #12
 810a1d4:	4621      	mov	r1, r4
 810a1d6:	4640      	mov	r0, r8
 810a1d8:	f7ff fee6 	bl	8109fa8 <_printf_common>
 810a1dc:	3001      	adds	r0, #1
 810a1de:	d14a      	bne.n	810a276 <_printf_i+0x1f2>
 810a1e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810a1e4:	b004      	add	sp, #16
 810a1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a1ea:	6823      	ldr	r3, [r4, #0]
 810a1ec:	f043 0320 	orr.w	r3, r3, #32
 810a1f0:	6023      	str	r3, [r4, #0]
 810a1f2:	4833      	ldr	r0, [pc, #204]	@ (810a2c0 <_printf_i+0x23c>)
 810a1f4:	2778      	movs	r7, #120	@ 0x78
 810a1f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810a1fa:	6823      	ldr	r3, [r4, #0]
 810a1fc:	6831      	ldr	r1, [r6, #0]
 810a1fe:	061f      	lsls	r7, r3, #24
 810a200:	f851 5b04 	ldr.w	r5, [r1], #4
 810a204:	d402      	bmi.n	810a20c <_printf_i+0x188>
 810a206:	065f      	lsls	r7, r3, #25
 810a208:	bf48      	it	mi
 810a20a:	b2ad      	uxthmi	r5, r5
 810a20c:	6031      	str	r1, [r6, #0]
 810a20e:	07d9      	lsls	r1, r3, #31
 810a210:	bf44      	itt	mi
 810a212:	f043 0320 	orrmi.w	r3, r3, #32
 810a216:	6023      	strmi	r3, [r4, #0]
 810a218:	b11d      	cbz	r5, 810a222 <_printf_i+0x19e>
 810a21a:	2310      	movs	r3, #16
 810a21c:	e7ac      	b.n	810a178 <_printf_i+0xf4>
 810a21e:	4827      	ldr	r0, [pc, #156]	@ (810a2bc <_printf_i+0x238>)
 810a220:	e7e9      	b.n	810a1f6 <_printf_i+0x172>
 810a222:	6823      	ldr	r3, [r4, #0]
 810a224:	f023 0320 	bic.w	r3, r3, #32
 810a228:	6023      	str	r3, [r4, #0]
 810a22a:	e7f6      	b.n	810a21a <_printf_i+0x196>
 810a22c:	4616      	mov	r6, r2
 810a22e:	e7bd      	b.n	810a1ac <_printf_i+0x128>
 810a230:	6833      	ldr	r3, [r6, #0]
 810a232:	6825      	ldr	r5, [r4, #0]
 810a234:	6961      	ldr	r1, [r4, #20]
 810a236:	1d18      	adds	r0, r3, #4
 810a238:	6030      	str	r0, [r6, #0]
 810a23a:	062e      	lsls	r6, r5, #24
 810a23c:	681b      	ldr	r3, [r3, #0]
 810a23e:	d501      	bpl.n	810a244 <_printf_i+0x1c0>
 810a240:	6019      	str	r1, [r3, #0]
 810a242:	e002      	b.n	810a24a <_printf_i+0x1c6>
 810a244:	0668      	lsls	r0, r5, #25
 810a246:	d5fb      	bpl.n	810a240 <_printf_i+0x1bc>
 810a248:	8019      	strh	r1, [r3, #0]
 810a24a:	2300      	movs	r3, #0
 810a24c:	6123      	str	r3, [r4, #16]
 810a24e:	4616      	mov	r6, r2
 810a250:	e7bc      	b.n	810a1cc <_printf_i+0x148>
 810a252:	6833      	ldr	r3, [r6, #0]
 810a254:	1d1a      	adds	r2, r3, #4
 810a256:	6032      	str	r2, [r6, #0]
 810a258:	681e      	ldr	r6, [r3, #0]
 810a25a:	6862      	ldr	r2, [r4, #4]
 810a25c:	2100      	movs	r1, #0
 810a25e:	4630      	mov	r0, r6
 810a260:	f7f6 f83e 	bl	81002e0 <memchr>
 810a264:	b108      	cbz	r0, 810a26a <_printf_i+0x1e6>
 810a266:	1b80      	subs	r0, r0, r6
 810a268:	6060      	str	r0, [r4, #4]
 810a26a:	6863      	ldr	r3, [r4, #4]
 810a26c:	6123      	str	r3, [r4, #16]
 810a26e:	2300      	movs	r3, #0
 810a270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810a274:	e7aa      	b.n	810a1cc <_printf_i+0x148>
 810a276:	6923      	ldr	r3, [r4, #16]
 810a278:	4632      	mov	r2, r6
 810a27a:	4649      	mov	r1, r9
 810a27c:	4640      	mov	r0, r8
 810a27e:	47d0      	blx	sl
 810a280:	3001      	adds	r0, #1
 810a282:	d0ad      	beq.n	810a1e0 <_printf_i+0x15c>
 810a284:	6823      	ldr	r3, [r4, #0]
 810a286:	079b      	lsls	r3, r3, #30
 810a288:	d413      	bmi.n	810a2b2 <_printf_i+0x22e>
 810a28a:	68e0      	ldr	r0, [r4, #12]
 810a28c:	9b03      	ldr	r3, [sp, #12]
 810a28e:	4298      	cmp	r0, r3
 810a290:	bfb8      	it	lt
 810a292:	4618      	movlt	r0, r3
 810a294:	e7a6      	b.n	810a1e4 <_printf_i+0x160>
 810a296:	2301      	movs	r3, #1
 810a298:	4632      	mov	r2, r6
 810a29a:	4649      	mov	r1, r9
 810a29c:	4640      	mov	r0, r8
 810a29e:	47d0      	blx	sl
 810a2a0:	3001      	adds	r0, #1
 810a2a2:	d09d      	beq.n	810a1e0 <_printf_i+0x15c>
 810a2a4:	3501      	adds	r5, #1
 810a2a6:	68e3      	ldr	r3, [r4, #12]
 810a2a8:	9903      	ldr	r1, [sp, #12]
 810a2aa:	1a5b      	subs	r3, r3, r1
 810a2ac:	42ab      	cmp	r3, r5
 810a2ae:	dcf2      	bgt.n	810a296 <_printf_i+0x212>
 810a2b0:	e7eb      	b.n	810a28a <_printf_i+0x206>
 810a2b2:	2500      	movs	r5, #0
 810a2b4:	f104 0619 	add.w	r6, r4, #25
 810a2b8:	e7f5      	b.n	810a2a6 <_printf_i+0x222>
 810a2ba:	bf00      	nop
 810a2bc:	0810ea1e 	.word	0x0810ea1e
 810a2c0:	0810ea2f 	.word	0x0810ea2f

0810a2c4 <_scanf_float>:
 810a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a2c8:	b087      	sub	sp, #28
 810a2ca:	4617      	mov	r7, r2
 810a2cc:	9303      	str	r3, [sp, #12]
 810a2ce:	688b      	ldr	r3, [r1, #8]
 810a2d0:	1e5a      	subs	r2, r3, #1
 810a2d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 810a2d6:	bf81      	itttt	hi
 810a2d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 810a2dc:	eb03 0b05 	addhi.w	fp, r3, r5
 810a2e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 810a2e4:	608b      	strhi	r3, [r1, #8]
 810a2e6:	680b      	ldr	r3, [r1, #0]
 810a2e8:	460a      	mov	r2, r1
 810a2ea:	f04f 0500 	mov.w	r5, #0
 810a2ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 810a2f2:	f842 3b1c 	str.w	r3, [r2], #28
 810a2f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810a2fa:	4680      	mov	r8, r0
 810a2fc:	460c      	mov	r4, r1
 810a2fe:	bf98      	it	ls
 810a300:	f04f 0b00 	movls.w	fp, #0
 810a304:	9201      	str	r2, [sp, #4]
 810a306:	4616      	mov	r6, r2
 810a308:	46aa      	mov	sl, r5
 810a30a:	46a9      	mov	r9, r5
 810a30c:	9502      	str	r5, [sp, #8]
 810a30e:	68a2      	ldr	r2, [r4, #8]
 810a310:	b152      	cbz	r2, 810a328 <_scanf_float+0x64>
 810a312:	683b      	ldr	r3, [r7, #0]
 810a314:	781b      	ldrb	r3, [r3, #0]
 810a316:	2b4e      	cmp	r3, #78	@ 0x4e
 810a318:	d864      	bhi.n	810a3e4 <_scanf_float+0x120>
 810a31a:	2b40      	cmp	r3, #64	@ 0x40
 810a31c:	d83c      	bhi.n	810a398 <_scanf_float+0xd4>
 810a31e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 810a322:	b2c8      	uxtb	r0, r1
 810a324:	280e      	cmp	r0, #14
 810a326:	d93a      	bls.n	810a39e <_scanf_float+0xda>
 810a328:	f1b9 0f00 	cmp.w	r9, #0
 810a32c:	d003      	beq.n	810a336 <_scanf_float+0x72>
 810a32e:	6823      	ldr	r3, [r4, #0]
 810a330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a334:	6023      	str	r3, [r4, #0]
 810a336:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810a33a:	f1ba 0f01 	cmp.w	sl, #1
 810a33e:	f200 8117 	bhi.w	810a570 <_scanf_float+0x2ac>
 810a342:	9b01      	ldr	r3, [sp, #4]
 810a344:	429e      	cmp	r6, r3
 810a346:	f200 8108 	bhi.w	810a55a <_scanf_float+0x296>
 810a34a:	2001      	movs	r0, #1
 810a34c:	b007      	add	sp, #28
 810a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a352:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810a356:	2a0d      	cmp	r2, #13
 810a358:	d8e6      	bhi.n	810a328 <_scanf_float+0x64>
 810a35a:	a101      	add	r1, pc, #4	@ (adr r1, 810a360 <_scanf_float+0x9c>)
 810a35c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a360:	0810a4a7 	.word	0x0810a4a7
 810a364:	0810a329 	.word	0x0810a329
 810a368:	0810a329 	.word	0x0810a329
 810a36c:	0810a329 	.word	0x0810a329
 810a370:	0810a507 	.word	0x0810a507
 810a374:	0810a4df 	.word	0x0810a4df
 810a378:	0810a329 	.word	0x0810a329
 810a37c:	0810a329 	.word	0x0810a329
 810a380:	0810a4b5 	.word	0x0810a4b5
 810a384:	0810a329 	.word	0x0810a329
 810a388:	0810a329 	.word	0x0810a329
 810a38c:	0810a329 	.word	0x0810a329
 810a390:	0810a329 	.word	0x0810a329
 810a394:	0810a46d 	.word	0x0810a46d
 810a398:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 810a39c:	e7db      	b.n	810a356 <_scanf_float+0x92>
 810a39e:	290e      	cmp	r1, #14
 810a3a0:	d8c2      	bhi.n	810a328 <_scanf_float+0x64>
 810a3a2:	a001      	add	r0, pc, #4	@ (adr r0, 810a3a8 <_scanf_float+0xe4>)
 810a3a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a3a8:	0810a45d 	.word	0x0810a45d
 810a3ac:	0810a329 	.word	0x0810a329
 810a3b0:	0810a45d 	.word	0x0810a45d
 810a3b4:	0810a4f3 	.word	0x0810a4f3
 810a3b8:	0810a329 	.word	0x0810a329
 810a3bc:	0810a405 	.word	0x0810a405
 810a3c0:	0810a443 	.word	0x0810a443
 810a3c4:	0810a443 	.word	0x0810a443
 810a3c8:	0810a443 	.word	0x0810a443
 810a3cc:	0810a443 	.word	0x0810a443
 810a3d0:	0810a443 	.word	0x0810a443
 810a3d4:	0810a443 	.word	0x0810a443
 810a3d8:	0810a443 	.word	0x0810a443
 810a3dc:	0810a443 	.word	0x0810a443
 810a3e0:	0810a443 	.word	0x0810a443
 810a3e4:	2b6e      	cmp	r3, #110	@ 0x6e
 810a3e6:	d809      	bhi.n	810a3fc <_scanf_float+0x138>
 810a3e8:	2b60      	cmp	r3, #96	@ 0x60
 810a3ea:	d8b2      	bhi.n	810a352 <_scanf_float+0x8e>
 810a3ec:	2b54      	cmp	r3, #84	@ 0x54
 810a3ee:	d07b      	beq.n	810a4e8 <_scanf_float+0x224>
 810a3f0:	2b59      	cmp	r3, #89	@ 0x59
 810a3f2:	d199      	bne.n	810a328 <_scanf_float+0x64>
 810a3f4:	2d07      	cmp	r5, #7
 810a3f6:	d197      	bne.n	810a328 <_scanf_float+0x64>
 810a3f8:	2508      	movs	r5, #8
 810a3fa:	e02c      	b.n	810a456 <_scanf_float+0x192>
 810a3fc:	2b74      	cmp	r3, #116	@ 0x74
 810a3fe:	d073      	beq.n	810a4e8 <_scanf_float+0x224>
 810a400:	2b79      	cmp	r3, #121	@ 0x79
 810a402:	e7f6      	b.n	810a3f2 <_scanf_float+0x12e>
 810a404:	6821      	ldr	r1, [r4, #0]
 810a406:	05c8      	lsls	r0, r1, #23
 810a408:	d51b      	bpl.n	810a442 <_scanf_float+0x17e>
 810a40a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 810a40e:	6021      	str	r1, [r4, #0]
 810a410:	f109 0901 	add.w	r9, r9, #1
 810a414:	f1bb 0f00 	cmp.w	fp, #0
 810a418:	d003      	beq.n	810a422 <_scanf_float+0x15e>
 810a41a:	3201      	adds	r2, #1
 810a41c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 810a420:	60a2      	str	r2, [r4, #8]
 810a422:	68a3      	ldr	r3, [r4, #8]
 810a424:	3b01      	subs	r3, #1
 810a426:	60a3      	str	r3, [r4, #8]
 810a428:	6923      	ldr	r3, [r4, #16]
 810a42a:	3301      	adds	r3, #1
 810a42c:	6123      	str	r3, [r4, #16]
 810a42e:	687b      	ldr	r3, [r7, #4]
 810a430:	3b01      	subs	r3, #1
 810a432:	2b00      	cmp	r3, #0
 810a434:	607b      	str	r3, [r7, #4]
 810a436:	f340 8087 	ble.w	810a548 <_scanf_float+0x284>
 810a43a:	683b      	ldr	r3, [r7, #0]
 810a43c:	3301      	adds	r3, #1
 810a43e:	603b      	str	r3, [r7, #0]
 810a440:	e765      	b.n	810a30e <_scanf_float+0x4a>
 810a442:	eb1a 0105 	adds.w	r1, sl, r5
 810a446:	f47f af6f 	bne.w	810a328 <_scanf_float+0x64>
 810a44a:	6822      	ldr	r2, [r4, #0]
 810a44c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 810a450:	6022      	str	r2, [r4, #0]
 810a452:	460d      	mov	r5, r1
 810a454:	468a      	mov	sl, r1
 810a456:	f806 3b01 	strb.w	r3, [r6], #1
 810a45a:	e7e2      	b.n	810a422 <_scanf_float+0x15e>
 810a45c:	6822      	ldr	r2, [r4, #0]
 810a45e:	0610      	lsls	r0, r2, #24
 810a460:	f57f af62 	bpl.w	810a328 <_scanf_float+0x64>
 810a464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810a468:	6022      	str	r2, [r4, #0]
 810a46a:	e7f4      	b.n	810a456 <_scanf_float+0x192>
 810a46c:	f1ba 0f00 	cmp.w	sl, #0
 810a470:	d10e      	bne.n	810a490 <_scanf_float+0x1cc>
 810a472:	f1b9 0f00 	cmp.w	r9, #0
 810a476:	d10e      	bne.n	810a496 <_scanf_float+0x1d2>
 810a478:	6822      	ldr	r2, [r4, #0]
 810a47a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a47e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a482:	d108      	bne.n	810a496 <_scanf_float+0x1d2>
 810a484:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a488:	6022      	str	r2, [r4, #0]
 810a48a:	f04f 0a01 	mov.w	sl, #1
 810a48e:	e7e2      	b.n	810a456 <_scanf_float+0x192>
 810a490:	f1ba 0f02 	cmp.w	sl, #2
 810a494:	d055      	beq.n	810a542 <_scanf_float+0x27e>
 810a496:	2d01      	cmp	r5, #1
 810a498:	d002      	beq.n	810a4a0 <_scanf_float+0x1dc>
 810a49a:	2d04      	cmp	r5, #4
 810a49c:	f47f af44 	bne.w	810a328 <_scanf_float+0x64>
 810a4a0:	3501      	adds	r5, #1
 810a4a2:	b2ed      	uxtb	r5, r5
 810a4a4:	e7d7      	b.n	810a456 <_scanf_float+0x192>
 810a4a6:	f1ba 0f01 	cmp.w	sl, #1
 810a4aa:	f47f af3d 	bne.w	810a328 <_scanf_float+0x64>
 810a4ae:	f04f 0a02 	mov.w	sl, #2
 810a4b2:	e7d0      	b.n	810a456 <_scanf_float+0x192>
 810a4b4:	b97d      	cbnz	r5, 810a4d6 <_scanf_float+0x212>
 810a4b6:	f1b9 0f00 	cmp.w	r9, #0
 810a4ba:	f47f af38 	bne.w	810a32e <_scanf_float+0x6a>
 810a4be:	6822      	ldr	r2, [r4, #0]
 810a4c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 810a4c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 810a4c8:	f040 8108 	bne.w	810a6dc <_scanf_float+0x418>
 810a4cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a4d0:	6022      	str	r2, [r4, #0]
 810a4d2:	2501      	movs	r5, #1
 810a4d4:	e7bf      	b.n	810a456 <_scanf_float+0x192>
 810a4d6:	2d03      	cmp	r5, #3
 810a4d8:	d0e2      	beq.n	810a4a0 <_scanf_float+0x1dc>
 810a4da:	2d05      	cmp	r5, #5
 810a4dc:	e7de      	b.n	810a49c <_scanf_float+0x1d8>
 810a4de:	2d02      	cmp	r5, #2
 810a4e0:	f47f af22 	bne.w	810a328 <_scanf_float+0x64>
 810a4e4:	2503      	movs	r5, #3
 810a4e6:	e7b6      	b.n	810a456 <_scanf_float+0x192>
 810a4e8:	2d06      	cmp	r5, #6
 810a4ea:	f47f af1d 	bne.w	810a328 <_scanf_float+0x64>
 810a4ee:	2507      	movs	r5, #7
 810a4f0:	e7b1      	b.n	810a456 <_scanf_float+0x192>
 810a4f2:	6822      	ldr	r2, [r4, #0]
 810a4f4:	0591      	lsls	r1, r2, #22
 810a4f6:	f57f af17 	bpl.w	810a328 <_scanf_float+0x64>
 810a4fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 810a4fe:	6022      	str	r2, [r4, #0]
 810a500:	f8cd 9008 	str.w	r9, [sp, #8]
 810a504:	e7a7      	b.n	810a456 <_scanf_float+0x192>
 810a506:	6822      	ldr	r2, [r4, #0]
 810a508:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 810a50c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 810a510:	d006      	beq.n	810a520 <_scanf_float+0x25c>
 810a512:	0550      	lsls	r0, r2, #21
 810a514:	f57f af08 	bpl.w	810a328 <_scanf_float+0x64>
 810a518:	f1b9 0f00 	cmp.w	r9, #0
 810a51c:	f000 80de 	beq.w	810a6dc <_scanf_float+0x418>
 810a520:	0591      	lsls	r1, r2, #22
 810a522:	bf58      	it	pl
 810a524:	9902      	ldrpl	r1, [sp, #8]
 810a526:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810a52a:	bf58      	it	pl
 810a52c:	eba9 0101 	subpl.w	r1, r9, r1
 810a530:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 810a534:	bf58      	it	pl
 810a536:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a53a:	6022      	str	r2, [r4, #0]
 810a53c:	f04f 0900 	mov.w	r9, #0
 810a540:	e789      	b.n	810a456 <_scanf_float+0x192>
 810a542:	f04f 0a03 	mov.w	sl, #3
 810a546:	e786      	b.n	810a456 <_scanf_float+0x192>
 810a548:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 810a54c:	4639      	mov	r1, r7
 810a54e:	4640      	mov	r0, r8
 810a550:	4798      	blx	r3
 810a552:	2800      	cmp	r0, #0
 810a554:	f43f aedb 	beq.w	810a30e <_scanf_float+0x4a>
 810a558:	e6e6      	b.n	810a328 <_scanf_float+0x64>
 810a55a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a55e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a562:	463a      	mov	r2, r7
 810a564:	4640      	mov	r0, r8
 810a566:	4798      	blx	r3
 810a568:	6923      	ldr	r3, [r4, #16]
 810a56a:	3b01      	subs	r3, #1
 810a56c:	6123      	str	r3, [r4, #16]
 810a56e:	e6e8      	b.n	810a342 <_scanf_float+0x7e>
 810a570:	1e6b      	subs	r3, r5, #1
 810a572:	2b06      	cmp	r3, #6
 810a574:	d824      	bhi.n	810a5c0 <_scanf_float+0x2fc>
 810a576:	2d02      	cmp	r5, #2
 810a578:	d836      	bhi.n	810a5e8 <_scanf_float+0x324>
 810a57a:	9b01      	ldr	r3, [sp, #4]
 810a57c:	429e      	cmp	r6, r3
 810a57e:	f67f aee4 	bls.w	810a34a <_scanf_float+0x86>
 810a582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a58a:	463a      	mov	r2, r7
 810a58c:	4640      	mov	r0, r8
 810a58e:	4798      	blx	r3
 810a590:	6923      	ldr	r3, [r4, #16]
 810a592:	3b01      	subs	r3, #1
 810a594:	6123      	str	r3, [r4, #16]
 810a596:	e7f0      	b.n	810a57a <_scanf_float+0x2b6>
 810a598:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a59c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 810a5a0:	463a      	mov	r2, r7
 810a5a2:	4640      	mov	r0, r8
 810a5a4:	4798      	blx	r3
 810a5a6:	6923      	ldr	r3, [r4, #16]
 810a5a8:	3b01      	subs	r3, #1
 810a5aa:	6123      	str	r3, [r4, #16]
 810a5ac:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810a5b0:	fa5f fa8a 	uxtb.w	sl, sl
 810a5b4:	f1ba 0f02 	cmp.w	sl, #2
 810a5b8:	d1ee      	bne.n	810a598 <_scanf_float+0x2d4>
 810a5ba:	3d03      	subs	r5, #3
 810a5bc:	b2ed      	uxtb	r5, r5
 810a5be:	1b76      	subs	r6, r6, r5
 810a5c0:	6823      	ldr	r3, [r4, #0]
 810a5c2:	05da      	lsls	r2, r3, #23
 810a5c4:	d530      	bpl.n	810a628 <_scanf_float+0x364>
 810a5c6:	055b      	lsls	r3, r3, #21
 810a5c8:	d511      	bpl.n	810a5ee <_scanf_float+0x32a>
 810a5ca:	9b01      	ldr	r3, [sp, #4]
 810a5cc:	429e      	cmp	r6, r3
 810a5ce:	f67f aebc 	bls.w	810a34a <_scanf_float+0x86>
 810a5d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a5d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a5da:	463a      	mov	r2, r7
 810a5dc:	4640      	mov	r0, r8
 810a5de:	4798      	blx	r3
 810a5e0:	6923      	ldr	r3, [r4, #16]
 810a5e2:	3b01      	subs	r3, #1
 810a5e4:	6123      	str	r3, [r4, #16]
 810a5e6:	e7f0      	b.n	810a5ca <_scanf_float+0x306>
 810a5e8:	46aa      	mov	sl, r5
 810a5ea:	46b3      	mov	fp, r6
 810a5ec:	e7de      	b.n	810a5ac <_scanf_float+0x2e8>
 810a5ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a5f2:	6923      	ldr	r3, [r4, #16]
 810a5f4:	2965      	cmp	r1, #101	@ 0x65
 810a5f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 810a5fa:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 810a5fe:	6123      	str	r3, [r4, #16]
 810a600:	d00c      	beq.n	810a61c <_scanf_float+0x358>
 810a602:	2945      	cmp	r1, #69	@ 0x45
 810a604:	d00a      	beq.n	810a61c <_scanf_float+0x358>
 810a606:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a60a:	463a      	mov	r2, r7
 810a60c:	4640      	mov	r0, r8
 810a60e:	4798      	blx	r3
 810a610:	6923      	ldr	r3, [r4, #16]
 810a612:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a616:	3b01      	subs	r3, #1
 810a618:	1eb5      	subs	r5, r6, #2
 810a61a:	6123      	str	r3, [r4, #16]
 810a61c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810a620:	463a      	mov	r2, r7
 810a622:	4640      	mov	r0, r8
 810a624:	4798      	blx	r3
 810a626:	462e      	mov	r6, r5
 810a628:	6822      	ldr	r2, [r4, #0]
 810a62a:	f012 0210 	ands.w	r2, r2, #16
 810a62e:	d001      	beq.n	810a634 <_scanf_float+0x370>
 810a630:	2000      	movs	r0, #0
 810a632:	e68b      	b.n	810a34c <_scanf_float+0x88>
 810a634:	7032      	strb	r2, [r6, #0]
 810a636:	6823      	ldr	r3, [r4, #0]
 810a638:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 810a63c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810a640:	d11c      	bne.n	810a67c <_scanf_float+0x3b8>
 810a642:	9b02      	ldr	r3, [sp, #8]
 810a644:	454b      	cmp	r3, r9
 810a646:	eba3 0209 	sub.w	r2, r3, r9
 810a64a:	d123      	bne.n	810a694 <_scanf_float+0x3d0>
 810a64c:	9901      	ldr	r1, [sp, #4]
 810a64e:	2200      	movs	r2, #0
 810a650:	4640      	mov	r0, r8
 810a652:	f002 fd09 	bl	810d068 <_strtod_r>
 810a656:	9b03      	ldr	r3, [sp, #12]
 810a658:	6821      	ldr	r1, [r4, #0]
 810a65a:	681b      	ldr	r3, [r3, #0]
 810a65c:	f011 0f02 	tst.w	r1, #2
 810a660:	ec57 6b10 	vmov	r6, r7, d0
 810a664:	f103 0204 	add.w	r2, r3, #4
 810a668:	d01f      	beq.n	810a6aa <_scanf_float+0x3e6>
 810a66a:	9903      	ldr	r1, [sp, #12]
 810a66c:	600a      	str	r2, [r1, #0]
 810a66e:	681b      	ldr	r3, [r3, #0]
 810a670:	e9c3 6700 	strd	r6, r7, [r3]
 810a674:	68e3      	ldr	r3, [r4, #12]
 810a676:	3301      	adds	r3, #1
 810a678:	60e3      	str	r3, [r4, #12]
 810a67a:	e7d9      	b.n	810a630 <_scanf_float+0x36c>
 810a67c:	9b04      	ldr	r3, [sp, #16]
 810a67e:	2b00      	cmp	r3, #0
 810a680:	d0e4      	beq.n	810a64c <_scanf_float+0x388>
 810a682:	9905      	ldr	r1, [sp, #20]
 810a684:	230a      	movs	r3, #10
 810a686:	3101      	adds	r1, #1
 810a688:	4640      	mov	r0, r8
 810a68a:	f002 fd6d 	bl	810d168 <_strtol_r>
 810a68e:	9b04      	ldr	r3, [sp, #16]
 810a690:	9e05      	ldr	r6, [sp, #20]
 810a692:	1ac2      	subs	r2, r0, r3
 810a694:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810a698:	429e      	cmp	r6, r3
 810a69a:	bf28      	it	cs
 810a69c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 810a6a0:	4910      	ldr	r1, [pc, #64]	@ (810a6e4 <_scanf_float+0x420>)
 810a6a2:	4630      	mov	r0, r6
 810a6a4:	f000 f954 	bl	810a950 <siprintf>
 810a6a8:	e7d0      	b.n	810a64c <_scanf_float+0x388>
 810a6aa:	f011 0f04 	tst.w	r1, #4
 810a6ae:	9903      	ldr	r1, [sp, #12]
 810a6b0:	600a      	str	r2, [r1, #0]
 810a6b2:	d1dc      	bne.n	810a66e <_scanf_float+0x3aa>
 810a6b4:	681d      	ldr	r5, [r3, #0]
 810a6b6:	4632      	mov	r2, r6
 810a6b8:	463b      	mov	r3, r7
 810a6ba:	4630      	mov	r0, r6
 810a6bc:	4639      	mov	r1, r7
 810a6be:	f7f6 fabd 	bl	8100c3c <__aeabi_dcmpun>
 810a6c2:	b128      	cbz	r0, 810a6d0 <_scanf_float+0x40c>
 810a6c4:	4808      	ldr	r0, [pc, #32]	@ (810a6e8 <_scanf_float+0x424>)
 810a6c6:	f000 fac9 	bl	810ac5c <nanf>
 810a6ca:	ed85 0a00 	vstr	s0, [r5]
 810a6ce:	e7d1      	b.n	810a674 <_scanf_float+0x3b0>
 810a6d0:	4630      	mov	r0, r6
 810a6d2:	4639      	mov	r1, r7
 810a6d4:	f7f6 fb10 	bl	8100cf8 <__aeabi_d2f>
 810a6d8:	6028      	str	r0, [r5, #0]
 810a6da:	e7cb      	b.n	810a674 <_scanf_float+0x3b0>
 810a6dc:	f04f 0900 	mov.w	r9, #0
 810a6e0:	e629      	b.n	810a336 <_scanf_float+0x72>
 810a6e2:	bf00      	nop
 810a6e4:	0810ea40 	.word	0x0810ea40
 810a6e8:	0810edd5 	.word	0x0810edd5

0810a6ec <std>:
 810a6ec:	2300      	movs	r3, #0
 810a6ee:	b510      	push	{r4, lr}
 810a6f0:	4604      	mov	r4, r0
 810a6f2:	e9c0 3300 	strd	r3, r3, [r0]
 810a6f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a6fa:	6083      	str	r3, [r0, #8]
 810a6fc:	8181      	strh	r1, [r0, #12]
 810a6fe:	6643      	str	r3, [r0, #100]	@ 0x64
 810a700:	81c2      	strh	r2, [r0, #14]
 810a702:	6183      	str	r3, [r0, #24]
 810a704:	4619      	mov	r1, r3
 810a706:	2208      	movs	r2, #8
 810a708:	305c      	adds	r0, #92	@ 0x5c
 810a70a:	f000 fa19 	bl	810ab40 <memset>
 810a70e:	4b0d      	ldr	r3, [pc, #52]	@ (810a744 <std+0x58>)
 810a710:	6263      	str	r3, [r4, #36]	@ 0x24
 810a712:	4b0d      	ldr	r3, [pc, #52]	@ (810a748 <std+0x5c>)
 810a714:	62a3      	str	r3, [r4, #40]	@ 0x28
 810a716:	4b0d      	ldr	r3, [pc, #52]	@ (810a74c <std+0x60>)
 810a718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810a71a:	4b0d      	ldr	r3, [pc, #52]	@ (810a750 <std+0x64>)
 810a71c:	6323      	str	r3, [r4, #48]	@ 0x30
 810a71e:	4b0d      	ldr	r3, [pc, #52]	@ (810a754 <std+0x68>)
 810a720:	6224      	str	r4, [r4, #32]
 810a722:	429c      	cmp	r4, r3
 810a724:	d006      	beq.n	810a734 <std+0x48>
 810a726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810a72a:	4294      	cmp	r4, r2
 810a72c:	d002      	beq.n	810a734 <std+0x48>
 810a72e:	33d0      	adds	r3, #208	@ 0xd0
 810a730:	429c      	cmp	r4, r3
 810a732:	d105      	bne.n	810a740 <std+0x54>
 810a734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810a738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a73c:	f000 ba7c 	b.w	810ac38 <__retarget_lock_init_recursive>
 810a740:	bd10      	pop	{r4, pc}
 810a742:	bf00      	nop
 810a744:	0810a991 	.word	0x0810a991
 810a748:	0810a9b3 	.word	0x0810a9b3
 810a74c:	0810a9eb 	.word	0x0810a9eb
 810a750:	0810aa0f 	.word	0x0810aa0f
 810a754:	100004a8 	.word	0x100004a8

0810a758 <stdio_exit_handler>:
 810a758:	4a02      	ldr	r2, [pc, #8]	@ (810a764 <stdio_exit_handler+0xc>)
 810a75a:	4903      	ldr	r1, [pc, #12]	@ (810a768 <stdio_exit_handler+0x10>)
 810a75c:	4803      	ldr	r0, [pc, #12]	@ (810a76c <stdio_exit_handler+0x14>)
 810a75e:	f000 b869 	b.w	810a834 <_fwalk_sglue>
 810a762:	bf00      	nop
 810a764:	10000050 	.word	0x10000050
 810a768:	0810d7a9 	.word	0x0810d7a9
 810a76c:	10000060 	.word	0x10000060

0810a770 <cleanup_stdio>:
 810a770:	6841      	ldr	r1, [r0, #4]
 810a772:	4b0c      	ldr	r3, [pc, #48]	@ (810a7a4 <cleanup_stdio+0x34>)
 810a774:	4299      	cmp	r1, r3
 810a776:	b510      	push	{r4, lr}
 810a778:	4604      	mov	r4, r0
 810a77a:	d001      	beq.n	810a780 <cleanup_stdio+0x10>
 810a77c:	f003 f814 	bl	810d7a8 <_fflush_r>
 810a780:	68a1      	ldr	r1, [r4, #8]
 810a782:	4b09      	ldr	r3, [pc, #36]	@ (810a7a8 <cleanup_stdio+0x38>)
 810a784:	4299      	cmp	r1, r3
 810a786:	d002      	beq.n	810a78e <cleanup_stdio+0x1e>
 810a788:	4620      	mov	r0, r4
 810a78a:	f003 f80d 	bl	810d7a8 <_fflush_r>
 810a78e:	68e1      	ldr	r1, [r4, #12]
 810a790:	4b06      	ldr	r3, [pc, #24]	@ (810a7ac <cleanup_stdio+0x3c>)
 810a792:	4299      	cmp	r1, r3
 810a794:	d004      	beq.n	810a7a0 <cleanup_stdio+0x30>
 810a796:	4620      	mov	r0, r4
 810a798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a79c:	f003 b804 	b.w	810d7a8 <_fflush_r>
 810a7a0:	bd10      	pop	{r4, pc}
 810a7a2:	bf00      	nop
 810a7a4:	100004a8 	.word	0x100004a8
 810a7a8:	10000510 	.word	0x10000510
 810a7ac:	10000578 	.word	0x10000578

0810a7b0 <global_stdio_init.part.0>:
 810a7b0:	b510      	push	{r4, lr}
 810a7b2:	4b0b      	ldr	r3, [pc, #44]	@ (810a7e0 <global_stdio_init.part.0+0x30>)
 810a7b4:	4c0b      	ldr	r4, [pc, #44]	@ (810a7e4 <global_stdio_init.part.0+0x34>)
 810a7b6:	4a0c      	ldr	r2, [pc, #48]	@ (810a7e8 <global_stdio_init.part.0+0x38>)
 810a7b8:	601a      	str	r2, [r3, #0]
 810a7ba:	4620      	mov	r0, r4
 810a7bc:	2200      	movs	r2, #0
 810a7be:	2104      	movs	r1, #4
 810a7c0:	f7ff ff94 	bl	810a6ec <std>
 810a7c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810a7c8:	2201      	movs	r2, #1
 810a7ca:	2109      	movs	r1, #9
 810a7cc:	f7ff ff8e 	bl	810a6ec <std>
 810a7d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810a7d4:	2202      	movs	r2, #2
 810a7d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a7da:	2112      	movs	r1, #18
 810a7dc:	f7ff bf86 	b.w	810a6ec <std>
 810a7e0:	100005e0 	.word	0x100005e0
 810a7e4:	100004a8 	.word	0x100004a8
 810a7e8:	0810a759 	.word	0x0810a759

0810a7ec <__sfp_lock_acquire>:
 810a7ec:	4801      	ldr	r0, [pc, #4]	@ (810a7f4 <__sfp_lock_acquire+0x8>)
 810a7ee:	f000 ba24 	b.w	810ac3a <__retarget_lock_acquire_recursive>
 810a7f2:	bf00      	nop
 810a7f4:	100005e9 	.word	0x100005e9

0810a7f8 <__sfp_lock_release>:
 810a7f8:	4801      	ldr	r0, [pc, #4]	@ (810a800 <__sfp_lock_release+0x8>)
 810a7fa:	f000 ba1f 	b.w	810ac3c <__retarget_lock_release_recursive>
 810a7fe:	bf00      	nop
 810a800:	100005e9 	.word	0x100005e9

0810a804 <__sinit>:
 810a804:	b510      	push	{r4, lr}
 810a806:	4604      	mov	r4, r0
 810a808:	f7ff fff0 	bl	810a7ec <__sfp_lock_acquire>
 810a80c:	6a23      	ldr	r3, [r4, #32]
 810a80e:	b11b      	cbz	r3, 810a818 <__sinit+0x14>
 810a810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a814:	f7ff bff0 	b.w	810a7f8 <__sfp_lock_release>
 810a818:	4b04      	ldr	r3, [pc, #16]	@ (810a82c <__sinit+0x28>)
 810a81a:	6223      	str	r3, [r4, #32]
 810a81c:	4b04      	ldr	r3, [pc, #16]	@ (810a830 <__sinit+0x2c>)
 810a81e:	681b      	ldr	r3, [r3, #0]
 810a820:	2b00      	cmp	r3, #0
 810a822:	d1f5      	bne.n	810a810 <__sinit+0xc>
 810a824:	f7ff ffc4 	bl	810a7b0 <global_stdio_init.part.0>
 810a828:	e7f2      	b.n	810a810 <__sinit+0xc>
 810a82a:	bf00      	nop
 810a82c:	0810a771 	.word	0x0810a771
 810a830:	100005e0 	.word	0x100005e0

0810a834 <_fwalk_sglue>:
 810a834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a838:	4607      	mov	r7, r0
 810a83a:	4688      	mov	r8, r1
 810a83c:	4614      	mov	r4, r2
 810a83e:	2600      	movs	r6, #0
 810a840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810a844:	f1b9 0901 	subs.w	r9, r9, #1
 810a848:	d505      	bpl.n	810a856 <_fwalk_sglue+0x22>
 810a84a:	6824      	ldr	r4, [r4, #0]
 810a84c:	2c00      	cmp	r4, #0
 810a84e:	d1f7      	bne.n	810a840 <_fwalk_sglue+0xc>
 810a850:	4630      	mov	r0, r6
 810a852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a856:	89ab      	ldrh	r3, [r5, #12]
 810a858:	2b01      	cmp	r3, #1
 810a85a:	d907      	bls.n	810a86c <_fwalk_sglue+0x38>
 810a85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810a860:	3301      	adds	r3, #1
 810a862:	d003      	beq.n	810a86c <_fwalk_sglue+0x38>
 810a864:	4629      	mov	r1, r5
 810a866:	4638      	mov	r0, r7
 810a868:	47c0      	blx	r8
 810a86a:	4306      	orrs	r6, r0
 810a86c:	3568      	adds	r5, #104	@ 0x68
 810a86e:	e7e9      	b.n	810a844 <_fwalk_sglue+0x10>

0810a870 <iprintf>:
 810a870:	b40f      	push	{r0, r1, r2, r3}
 810a872:	b507      	push	{r0, r1, r2, lr}
 810a874:	4906      	ldr	r1, [pc, #24]	@ (810a890 <iprintf+0x20>)
 810a876:	ab04      	add	r3, sp, #16
 810a878:	6808      	ldr	r0, [r1, #0]
 810a87a:	f853 2b04 	ldr.w	r2, [r3], #4
 810a87e:	6881      	ldr	r1, [r0, #8]
 810a880:	9301      	str	r3, [sp, #4]
 810a882:	f002 fdf5 	bl	810d470 <_vfiprintf_r>
 810a886:	b003      	add	sp, #12
 810a888:	f85d eb04 	ldr.w	lr, [sp], #4
 810a88c:	b004      	add	sp, #16
 810a88e:	4770      	bx	lr
 810a890:	1000005c 	.word	0x1000005c

0810a894 <_puts_r>:
 810a894:	6a03      	ldr	r3, [r0, #32]
 810a896:	b570      	push	{r4, r5, r6, lr}
 810a898:	6884      	ldr	r4, [r0, #8]
 810a89a:	4605      	mov	r5, r0
 810a89c:	460e      	mov	r6, r1
 810a89e:	b90b      	cbnz	r3, 810a8a4 <_puts_r+0x10>
 810a8a0:	f7ff ffb0 	bl	810a804 <__sinit>
 810a8a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a8a6:	07db      	lsls	r3, r3, #31
 810a8a8:	d405      	bmi.n	810a8b6 <_puts_r+0x22>
 810a8aa:	89a3      	ldrh	r3, [r4, #12]
 810a8ac:	0598      	lsls	r0, r3, #22
 810a8ae:	d402      	bmi.n	810a8b6 <_puts_r+0x22>
 810a8b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a8b2:	f000 f9c2 	bl	810ac3a <__retarget_lock_acquire_recursive>
 810a8b6:	89a3      	ldrh	r3, [r4, #12]
 810a8b8:	0719      	lsls	r1, r3, #28
 810a8ba:	d502      	bpl.n	810a8c2 <_puts_r+0x2e>
 810a8bc:	6923      	ldr	r3, [r4, #16]
 810a8be:	2b00      	cmp	r3, #0
 810a8c0:	d135      	bne.n	810a92e <_puts_r+0x9a>
 810a8c2:	4621      	mov	r1, r4
 810a8c4:	4628      	mov	r0, r5
 810a8c6:	f000 f8e5 	bl	810aa94 <__swsetup_r>
 810a8ca:	b380      	cbz	r0, 810a92e <_puts_r+0x9a>
 810a8cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 810a8d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810a8d2:	07da      	lsls	r2, r3, #31
 810a8d4:	d405      	bmi.n	810a8e2 <_puts_r+0x4e>
 810a8d6:	89a3      	ldrh	r3, [r4, #12]
 810a8d8:	059b      	lsls	r3, r3, #22
 810a8da:	d402      	bmi.n	810a8e2 <_puts_r+0x4e>
 810a8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810a8de:	f000 f9ad 	bl	810ac3c <__retarget_lock_release_recursive>
 810a8e2:	4628      	mov	r0, r5
 810a8e4:	bd70      	pop	{r4, r5, r6, pc}
 810a8e6:	2b00      	cmp	r3, #0
 810a8e8:	da04      	bge.n	810a8f4 <_puts_r+0x60>
 810a8ea:	69a2      	ldr	r2, [r4, #24]
 810a8ec:	429a      	cmp	r2, r3
 810a8ee:	dc17      	bgt.n	810a920 <_puts_r+0x8c>
 810a8f0:	290a      	cmp	r1, #10
 810a8f2:	d015      	beq.n	810a920 <_puts_r+0x8c>
 810a8f4:	6823      	ldr	r3, [r4, #0]
 810a8f6:	1c5a      	adds	r2, r3, #1
 810a8f8:	6022      	str	r2, [r4, #0]
 810a8fa:	7019      	strb	r1, [r3, #0]
 810a8fc:	68a3      	ldr	r3, [r4, #8]
 810a8fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810a902:	3b01      	subs	r3, #1
 810a904:	60a3      	str	r3, [r4, #8]
 810a906:	2900      	cmp	r1, #0
 810a908:	d1ed      	bne.n	810a8e6 <_puts_r+0x52>
 810a90a:	2b00      	cmp	r3, #0
 810a90c:	da11      	bge.n	810a932 <_puts_r+0x9e>
 810a90e:	4622      	mov	r2, r4
 810a910:	210a      	movs	r1, #10
 810a912:	4628      	mov	r0, r5
 810a914:	f000 f87f 	bl	810aa16 <__swbuf_r>
 810a918:	3001      	adds	r0, #1
 810a91a:	d0d7      	beq.n	810a8cc <_puts_r+0x38>
 810a91c:	250a      	movs	r5, #10
 810a91e:	e7d7      	b.n	810a8d0 <_puts_r+0x3c>
 810a920:	4622      	mov	r2, r4
 810a922:	4628      	mov	r0, r5
 810a924:	f000 f877 	bl	810aa16 <__swbuf_r>
 810a928:	3001      	adds	r0, #1
 810a92a:	d1e7      	bne.n	810a8fc <_puts_r+0x68>
 810a92c:	e7ce      	b.n	810a8cc <_puts_r+0x38>
 810a92e:	3e01      	subs	r6, #1
 810a930:	e7e4      	b.n	810a8fc <_puts_r+0x68>
 810a932:	6823      	ldr	r3, [r4, #0]
 810a934:	1c5a      	adds	r2, r3, #1
 810a936:	6022      	str	r2, [r4, #0]
 810a938:	220a      	movs	r2, #10
 810a93a:	701a      	strb	r2, [r3, #0]
 810a93c:	e7ee      	b.n	810a91c <_puts_r+0x88>
	...

0810a940 <puts>:
 810a940:	4b02      	ldr	r3, [pc, #8]	@ (810a94c <puts+0xc>)
 810a942:	4601      	mov	r1, r0
 810a944:	6818      	ldr	r0, [r3, #0]
 810a946:	f7ff bfa5 	b.w	810a894 <_puts_r>
 810a94a:	bf00      	nop
 810a94c:	1000005c 	.word	0x1000005c

0810a950 <siprintf>:
 810a950:	b40e      	push	{r1, r2, r3}
 810a952:	b500      	push	{lr}
 810a954:	b09c      	sub	sp, #112	@ 0x70
 810a956:	ab1d      	add	r3, sp, #116	@ 0x74
 810a958:	9002      	str	r0, [sp, #8]
 810a95a:	9006      	str	r0, [sp, #24]
 810a95c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810a960:	4809      	ldr	r0, [pc, #36]	@ (810a988 <siprintf+0x38>)
 810a962:	9107      	str	r1, [sp, #28]
 810a964:	9104      	str	r1, [sp, #16]
 810a966:	4909      	ldr	r1, [pc, #36]	@ (810a98c <siprintf+0x3c>)
 810a968:	f853 2b04 	ldr.w	r2, [r3], #4
 810a96c:	9105      	str	r1, [sp, #20]
 810a96e:	6800      	ldr	r0, [r0, #0]
 810a970:	9301      	str	r3, [sp, #4]
 810a972:	a902      	add	r1, sp, #8
 810a974:	f002 fc56 	bl	810d224 <_svfiprintf_r>
 810a978:	9b02      	ldr	r3, [sp, #8]
 810a97a:	2200      	movs	r2, #0
 810a97c:	701a      	strb	r2, [r3, #0]
 810a97e:	b01c      	add	sp, #112	@ 0x70
 810a980:	f85d eb04 	ldr.w	lr, [sp], #4
 810a984:	b003      	add	sp, #12
 810a986:	4770      	bx	lr
 810a988:	1000005c 	.word	0x1000005c
 810a98c:	ffff0208 	.word	0xffff0208

0810a990 <__sread>:
 810a990:	b510      	push	{r4, lr}
 810a992:	460c      	mov	r4, r1
 810a994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a998:	f000 f900 	bl	810ab9c <_read_r>
 810a99c:	2800      	cmp	r0, #0
 810a99e:	bfab      	itete	ge
 810a9a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810a9a2:	89a3      	ldrhlt	r3, [r4, #12]
 810a9a4:	181b      	addge	r3, r3, r0
 810a9a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810a9aa:	bfac      	ite	ge
 810a9ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 810a9ae:	81a3      	strhlt	r3, [r4, #12]
 810a9b0:	bd10      	pop	{r4, pc}

0810a9b2 <__swrite>:
 810a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a9b6:	461f      	mov	r7, r3
 810a9b8:	898b      	ldrh	r3, [r1, #12]
 810a9ba:	05db      	lsls	r3, r3, #23
 810a9bc:	4605      	mov	r5, r0
 810a9be:	460c      	mov	r4, r1
 810a9c0:	4616      	mov	r6, r2
 810a9c2:	d505      	bpl.n	810a9d0 <__swrite+0x1e>
 810a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a9c8:	2302      	movs	r3, #2
 810a9ca:	2200      	movs	r2, #0
 810a9cc:	f000 f8d4 	bl	810ab78 <_lseek_r>
 810a9d0:	89a3      	ldrh	r3, [r4, #12]
 810a9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a9d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810a9da:	81a3      	strh	r3, [r4, #12]
 810a9dc:	4632      	mov	r2, r6
 810a9de:	463b      	mov	r3, r7
 810a9e0:	4628      	mov	r0, r5
 810a9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a9e6:	f000 b8eb 	b.w	810abc0 <_write_r>

0810a9ea <__sseek>:
 810a9ea:	b510      	push	{r4, lr}
 810a9ec:	460c      	mov	r4, r1
 810a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a9f2:	f000 f8c1 	bl	810ab78 <_lseek_r>
 810a9f6:	1c43      	adds	r3, r0, #1
 810a9f8:	89a3      	ldrh	r3, [r4, #12]
 810a9fa:	bf15      	itete	ne
 810a9fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 810a9fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810aa02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810aa06:	81a3      	strheq	r3, [r4, #12]
 810aa08:	bf18      	it	ne
 810aa0a:	81a3      	strhne	r3, [r4, #12]
 810aa0c:	bd10      	pop	{r4, pc}

0810aa0e <__sclose>:
 810aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810aa12:	f000 b8a1 	b.w	810ab58 <_close_r>

0810aa16 <__swbuf_r>:
 810aa16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aa18:	460e      	mov	r6, r1
 810aa1a:	4614      	mov	r4, r2
 810aa1c:	4605      	mov	r5, r0
 810aa1e:	b118      	cbz	r0, 810aa28 <__swbuf_r+0x12>
 810aa20:	6a03      	ldr	r3, [r0, #32]
 810aa22:	b90b      	cbnz	r3, 810aa28 <__swbuf_r+0x12>
 810aa24:	f7ff feee 	bl	810a804 <__sinit>
 810aa28:	69a3      	ldr	r3, [r4, #24]
 810aa2a:	60a3      	str	r3, [r4, #8]
 810aa2c:	89a3      	ldrh	r3, [r4, #12]
 810aa2e:	071a      	lsls	r2, r3, #28
 810aa30:	d501      	bpl.n	810aa36 <__swbuf_r+0x20>
 810aa32:	6923      	ldr	r3, [r4, #16]
 810aa34:	b943      	cbnz	r3, 810aa48 <__swbuf_r+0x32>
 810aa36:	4621      	mov	r1, r4
 810aa38:	4628      	mov	r0, r5
 810aa3a:	f000 f82b 	bl	810aa94 <__swsetup_r>
 810aa3e:	b118      	cbz	r0, 810aa48 <__swbuf_r+0x32>
 810aa40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 810aa44:	4638      	mov	r0, r7
 810aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810aa48:	6823      	ldr	r3, [r4, #0]
 810aa4a:	6922      	ldr	r2, [r4, #16]
 810aa4c:	1a98      	subs	r0, r3, r2
 810aa4e:	6963      	ldr	r3, [r4, #20]
 810aa50:	b2f6      	uxtb	r6, r6
 810aa52:	4283      	cmp	r3, r0
 810aa54:	4637      	mov	r7, r6
 810aa56:	dc05      	bgt.n	810aa64 <__swbuf_r+0x4e>
 810aa58:	4621      	mov	r1, r4
 810aa5a:	4628      	mov	r0, r5
 810aa5c:	f002 fea4 	bl	810d7a8 <_fflush_r>
 810aa60:	2800      	cmp	r0, #0
 810aa62:	d1ed      	bne.n	810aa40 <__swbuf_r+0x2a>
 810aa64:	68a3      	ldr	r3, [r4, #8]
 810aa66:	3b01      	subs	r3, #1
 810aa68:	60a3      	str	r3, [r4, #8]
 810aa6a:	6823      	ldr	r3, [r4, #0]
 810aa6c:	1c5a      	adds	r2, r3, #1
 810aa6e:	6022      	str	r2, [r4, #0]
 810aa70:	701e      	strb	r6, [r3, #0]
 810aa72:	6962      	ldr	r2, [r4, #20]
 810aa74:	1c43      	adds	r3, r0, #1
 810aa76:	429a      	cmp	r2, r3
 810aa78:	d004      	beq.n	810aa84 <__swbuf_r+0x6e>
 810aa7a:	89a3      	ldrh	r3, [r4, #12]
 810aa7c:	07db      	lsls	r3, r3, #31
 810aa7e:	d5e1      	bpl.n	810aa44 <__swbuf_r+0x2e>
 810aa80:	2e0a      	cmp	r6, #10
 810aa82:	d1df      	bne.n	810aa44 <__swbuf_r+0x2e>
 810aa84:	4621      	mov	r1, r4
 810aa86:	4628      	mov	r0, r5
 810aa88:	f002 fe8e 	bl	810d7a8 <_fflush_r>
 810aa8c:	2800      	cmp	r0, #0
 810aa8e:	d0d9      	beq.n	810aa44 <__swbuf_r+0x2e>
 810aa90:	e7d6      	b.n	810aa40 <__swbuf_r+0x2a>
	...

0810aa94 <__swsetup_r>:
 810aa94:	b538      	push	{r3, r4, r5, lr}
 810aa96:	4b29      	ldr	r3, [pc, #164]	@ (810ab3c <__swsetup_r+0xa8>)
 810aa98:	4605      	mov	r5, r0
 810aa9a:	6818      	ldr	r0, [r3, #0]
 810aa9c:	460c      	mov	r4, r1
 810aa9e:	b118      	cbz	r0, 810aaa8 <__swsetup_r+0x14>
 810aaa0:	6a03      	ldr	r3, [r0, #32]
 810aaa2:	b90b      	cbnz	r3, 810aaa8 <__swsetup_r+0x14>
 810aaa4:	f7ff feae 	bl	810a804 <__sinit>
 810aaa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810aaac:	0719      	lsls	r1, r3, #28
 810aaae:	d422      	bmi.n	810aaf6 <__swsetup_r+0x62>
 810aab0:	06da      	lsls	r2, r3, #27
 810aab2:	d407      	bmi.n	810aac4 <__swsetup_r+0x30>
 810aab4:	2209      	movs	r2, #9
 810aab6:	602a      	str	r2, [r5, #0]
 810aab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810aabc:	81a3      	strh	r3, [r4, #12]
 810aabe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810aac2:	e033      	b.n	810ab2c <__swsetup_r+0x98>
 810aac4:	0758      	lsls	r0, r3, #29
 810aac6:	d512      	bpl.n	810aaee <__swsetup_r+0x5a>
 810aac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810aaca:	b141      	cbz	r1, 810aade <__swsetup_r+0x4a>
 810aacc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810aad0:	4299      	cmp	r1, r3
 810aad2:	d002      	beq.n	810aada <__swsetup_r+0x46>
 810aad4:	4628      	mov	r0, r5
 810aad6:	f000 ff13 	bl	810b900 <_free_r>
 810aada:	2300      	movs	r3, #0
 810aadc:	6363      	str	r3, [r4, #52]	@ 0x34
 810aade:	89a3      	ldrh	r3, [r4, #12]
 810aae0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810aae4:	81a3      	strh	r3, [r4, #12]
 810aae6:	2300      	movs	r3, #0
 810aae8:	6063      	str	r3, [r4, #4]
 810aaea:	6923      	ldr	r3, [r4, #16]
 810aaec:	6023      	str	r3, [r4, #0]
 810aaee:	89a3      	ldrh	r3, [r4, #12]
 810aaf0:	f043 0308 	orr.w	r3, r3, #8
 810aaf4:	81a3      	strh	r3, [r4, #12]
 810aaf6:	6923      	ldr	r3, [r4, #16]
 810aaf8:	b94b      	cbnz	r3, 810ab0e <__swsetup_r+0x7a>
 810aafa:	89a3      	ldrh	r3, [r4, #12]
 810aafc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810ab00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810ab04:	d003      	beq.n	810ab0e <__swsetup_r+0x7a>
 810ab06:	4621      	mov	r1, r4
 810ab08:	4628      	mov	r0, r5
 810ab0a:	f002 fe9b 	bl	810d844 <__smakebuf_r>
 810ab0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ab12:	f013 0201 	ands.w	r2, r3, #1
 810ab16:	d00a      	beq.n	810ab2e <__swsetup_r+0x9a>
 810ab18:	2200      	movs	r2, #0
 810ab1a:	60a2      	str	r2, [r4, #8]
 810ab1c:	6962      	ldr	r2, [r4, #20]
 810ab1e:	4252      	negs	r2, r2
 810ab20:	61a2      	str	r2, [r4, #24]
 810ab22:	6922      	ldr	r2, [r4, #16]
 810ab24:	b942      	cbnz	r2, 810ab38 <__swsetup_r+0xa4>
 810ab26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810ab2a:	d1c5      	bne.n	810aab8 <__swsetup_r+0x24>
 810ab2c:	bd38      	pop	{r3, r4, r5, pc}
 810ab2e:	0799      	lsls	r1, r3, #30
 810ab30:	bf58      	it	pl
 810ab32:	6962      	ldrpl	r2, [r4, #20]
 810ab34:	60a2      	str	r2, [r4, #8]
 810ab36:	e7f4      	b.n	810ab22 <__swsetup_r+0x8e>
 810ab38:	2000      	movs	r0, #0
 810ab3a:	e7f7      	b.n	810ab2c <__swsetup_r+0x98>
 810ab3c:	1000005c 	.word	0x1000005c

0810ab40 <memset>:
 810ab40:	4402      	add	r2, r0
 810ab42:	4603      	mov	r3, r0
 810ab44:	4293      	cmp	r3, r2
 810ab46:	d100      	bne.n	810ab4a <memset+0xa>
 810ab48:	4770      	bx	lr
 810ab4a:	f803 1b01 	strb.w	r1, [r3], #1
 810ab4e:	e7f9      	b.n	810ab44 <memset+0x4>

0810ab50 <_localeconv_r>:
 810ab50:	4800      	ldr	r0, [pc, #0]	@ (810ab54 <_localeconv_r+0x4>)
 810ab52:	4770      	bx	lr
 810ab54:	1000019c 	.word	0x1000019c

0810ab58 <_close_r>:
 810ab58:	b538      	push	{r3, r4, r5, lr}
 810ab5a:	4d06      	ldr	r5, [pc, #24]	@ (810ab74 <_close_r+0x1c>)
 810ab5c:	2300      	movs	r3, #0
 810ab5e:	4604      	mov	r4, r0
 810ab60:	4608      	mov	r0, r1
 810ab62:	602b      	str	r3, [r5, #0]
 810ab64:	f7f8 fac6 	bl	81030f4 <_close>
 810ab68:	1c43      	adds	r3, r0, #1
 810ab6a:	d102      	bne.n	810ab72 <_close_r+0x1a>
 810ab6c:	682b      	ldr	r3, [r5, #0]
 810ab6e:	b103      	cbz	r3, 810ab72 <_close_r+0x1a>
 810ab70:	6023      	str	r3, [r4, #0]
 810ab72:	bd38      	pop	{r3, r4, r5, pc}
 810ab74:	100005e4 	.word	0x100005e4

0810ab78 <_lseek_r>:
 810ab78:	b538      	push	{r3, r4, r5, lr}
 810ab7a:	4d07      	ldr	r5, [pc, #28]	@ (810ab98 <_lseek_r+0x20>)
 810ab7c:	4604      	mov	r4, r0
 810ab7e:	4608      	mov	r0, r1
 810ab80:	4611      	mov	r1, r2
 810ab82:	2200      	movs	r2, #0
 810ab84:	602a      	str	r2, [r5, #0]
 810ab86:	461a      	mov	r2, r3
 810ab88:	f7f8 fadb 	bl	8103142 <_lseek>
 810ab8c:	1c43      	adds	r3, r0, #1
 810ab8e:	d102      	bne.n	810ab96 <_lseek_r+0x1e>
 810ab90:	682b      	ldr	r3, [r5, #0]
 810ab92:	b103      	cbz	r3, 810ab96 <_lseek_r+0x1e>
 810ab94:	6023      	str	r3, [r4, #0]
 810ab96:	bd38      	pop	{r3, r4, r5, pc}
 810ab98:	100005e4 	.word	0x100005e4

0810ab9c <_read_r>:
 810ab9c:	b538      	push	{r3, r4, r5, lr}
 810ab9e:	4d07      	ldr	r5, [pc, #28]	@ (810abbc <_read_r+0x20>)
 810aba0:	4604      	mov	r4, r0
 810aba2:	4608      	mov	r0, r1
 810aba4:	4611      	mov	r1, r2
 810aba6:	2200      	movs	r2, #0
 810aba8:	602a      	str	r2, [r5, #0]
 810abaa:	461a      	mov	r2, r3
 810abac:	f7f8 fa69 	bl	8103082 <_read>
 810abb0:	1c43      	adds	r3, r0, #1
 810abb2:	d102      	bne.n	810abba <_read_r+0x1e>
 810abb4:	682b      	ldr	r3, [r5, #0]
 810abb6:	b103      	cbz	r3, 810abba <_read_r+0x1e>
 810abb8:	6023      	str	r3, [r4, #0]
 810abba:	bd38      	pop	{r3, r4, r5, pc}
 810abbc:	100005e4 	.word	0x100005e4

0810abc0 <_write_r>:
 810abc0:	b538      	push	{r3, r4, r5, lr}
 810abc2:	4d07      	ldr	r5, [pc, #28]	@ (810abe0 <_write_r+0x20>)
 810abc4:	4604      	mov	r4, r0
 810abc6:	4608      	mov	r0, r1
 810abc8:	4611      	mov	r1, r2
 810abca:	2200      	movs	r2, #0
 810abcc:	602a      	str	r2, [r5, #0]
 810abce:	461a      	mov	r2, r3
 810abd0:	f7f8 fa74 	bl	81030bc <_write>
 810abd4:	1c43      	adds	r3, r0, #1
 810abd6:	d102      	bne.n	810abde <_write_r+0x1e>
 810abd8:	682b      	ldr	r3, [r5, #0]
 810abda:	b103      	cbz	r3, 810abde <_write_r+0x1e>
 810abdc:	6023      	str	r3, [r4, #0]
 810abde:	bd38      	pop	{r3, r4, r5, pc}
 810abe0:	100005e4 	.word	0x100005e4

0810abe4 <__errno>:
 810abe4:	4b01      	ldr	r3, [pc, #4]	@ (810abec <__errno+0x8>)
 810abe6:	6818      	ldr	r0, [r3, #0]
 810abe8:	4770      	bx	lr
 810abea:	bf00      	nop
 810abec:	1000005c 	.word	0x1000005c

0810abf0 <__libc_init_array>:
 810abf0:	b570      	push	{r4, r5, r6, lr}
 810abf2:	4d0d      	ldr	r5, [pc, #52]	@ (810ac28 <__libc_init_array+0x38>)
 810abf4:	4c0d      	ldr	r4, [pc, #52]	@ (810ac2c <__libc_init_array+0x3c>)
 810abf6:	1b64      	subs	r4, r4, r5
 810abf8:	10a4      	asrs	r4, r4, #2
 810abfa:	2600      	movs	r6, #0
 810abfc:	42a6      	cmp	r6, r4
 810abfe:	d109      	bne.n	810ac14 <__libc_init_array+0x24>
 810ac00:	4d0b      	ldr	r5, [pc, #44]	@ (810ac30 <__libc_init_array+0x40>)
 810ac02:	4c0c      	ldr	r4, [pc, #48]	@ (810ac34 <__libc_init_array+0x44>)
 810ac04:	f003 fbe4 	bl	810e3d0 <_init>
 810ac08:	1b64      	subs	r4, r4, r5
 810ac0a:	10a4      	asrs	r4, r4, #2
 810ac0c:	2600      	movs	r6, #0
 810ac0e:	42a6      	cmp	r6, r4
 810ac10:	d105      	bne.n	810ac1e <__libc_init_array+0x2e>
 810ac12:	bd70      	pop	{r4, r5, r6, pc}
 810ac14:	f855 3b04 	ldr.w	r3, [r5], #4
 810ac18:	4798      	blx	r3
 810ac1a:	3601      	adds	r6, #1
 810ac1c:	e7ee      	b.n	810abfc <__libc_init_array+0xc>
 810ac1e:	f855 3b04 	ldr.w	r3, [r5], #4
 810ac22:	4798      	blx	r3
 810ac24:	3601      	adds	r6, #1
 810ac26:	e7f2      	b.n	810ac0e <__libc_init_array+0x1e>
 810ac28:	0810ee40 	.word	0x0810ee40
 810ac2c:	0810ee40 	.word	0x0810ee40
 810ac30:	0810ee40 	.word	0x0810ee40
 810ac34:	0810ee44 	.word	0x0810ee44

0810ac38 <__retarget_lock_init_recursive>:
 810ac38:	4770      	bx	lr

0810ac3a <__retarget_lock_acquire_recursive>:
 810ac3a:	4770      	bx	lr

0810ac3c <__retarget_lock_release_recursive>:
 810ac3c:	4770      	bx	lr

0810ac3e <memcpy>:
 810ac3e:	440a      	add	r2, r1
 810ac40:	4291      	cmp	r1, r2
 810ac42:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 810ac46:	d100      	bne.n	810ac4a <memcpy+0xc>
 810ac48:	4770      	bx	lr
 810ac4a:	b510      	push	{r4, lr}
 810ac4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ac50:	f803 4f01 	strb.w	r4, [r3, #1]!
 810ac54:	4291      	cmp	r1, r2
 810ac56:	d1f9      	bne.n	810ac4c <memcpy+0xe>
 810ac58:	bd10      	pop	{r4, pc}
	...

0810ac5c <nanf>:
 810ac5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 810ac64 <nanf+0x8>
 810ac60:	4770      	bx	lr
 810ac62:	bf00      	nop
 810ac64:	7fc00000 	.word	0x7fc00000

0810ac68 <quorem>:
 810ac68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ac6c:	6903      	ldr	r3, [r0, #16]
 810ac6e:	690c      	ldr	r4, [r1, #16]
 810ac70:	42a3      	cmp	r3, r4
 810ac72:	4607      	mov	r7, r0
 810ac74:	db7e      	blt.n	810ad74 <quorem+0x10c>
 810ac76:	3c01      	subs	r4, #1
 810ac78:	f101 0814 	add.w	r8, r1, #20
 810ac7c:	00a3      	lsls	r3, r4, #2
 810ac7e:	f100 0514 	add.w	r5, r0, #20
 810ac82:	9300      	str	r3, [sp, #0]
 810ac84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ac88:	9301      	str	r3, [sp, #4]
 810ac8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ac8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ac92:	3301      	adds	r3, #1
 810ac94:	429a      	cmp	r2, r3
 810ac96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ac9a:	fbb2 f6f3 	udiv	r6, r2, r3
 810ac9e:	d32e      	bcc.n	810acfe <quorem+0x96>
 810aca0:	f04f 0a00 	mov.w	sl, #0
 810aca4:	46c4      	mov	ip, r8
 810aca6:	46ae      	mov	lr, r5
 810aca8:	46d3      	mov	fp, sl
 810acaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 810acae:	b298      	uxth	r0, r3
 810acb0:	fb06 a000 	mla	r0, r6, r0, sl
 810acb4:	0c02      	lsrs	r2, r0, #16
 810acb6:	0c1b      	lsrs	r3, r3, #16
 810acb8:	fb06 2303 	mla	r3, r6, r3, r2
 810acbc:	f8de 2000 	ldr.w	r2, [lr]
 810acc0:	b280      	uxth	r0, r0
 810acc2:	b292      	uxth	r2, r2
 810acc4:	1a12      	subs	r2, r2, r0
 810acc6:	445a      	add	r2, fp
 810acc8:	f8de 0000 	ldr.w	r0, [lr]
 810accc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810acd0:	b29b      	uxth	r3, r3
 810acd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 810acd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810acda:	b292      	uxth	r2, r2
 810acdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 810ace0:	45e1      	cmp	r9, ip
 810ace2:	f84e 2b04 	str.w	r2, [lr], #4
 810ace6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 810acea:	d2de      	bcs.n	810acaa <quorem+0x42>
 810acec:	9b00      	ldr	r3, [sp, #0]
 810acee:	58eb      	ldr	r3, [r5, r3]
 810acf0:	b92b      	cbnz	r3, 810acfe <quorem+0x96>
 810acf2:	9b01      	ldr	r3, [sp, #4]
 810acf4:	3b04      	subs	r3, #4
 810acf6:	429d      	cmp	r5, r3
 810acf8:	461a      	mov	r2, r3
 810acfa:	d32f      	bcc.n	810ad5c <quorem+0xf4>
 810acfc:	613c      	str	r4, [r7, #16]
 810acfe:	4638      	mov	r0, r7
 810ad00:	f001 f9c2 	bl	810c088 <__mcmp>
 810ad04:	2800      	cmp	r0, #0
 810ad06:	db25      	blt.n	810ad54 <quorem+0xec>
 810ad08:	4629      	mov	r1, r5
 810ad0a:	2000      	movs	r0, #0
 810ad0c:	f858 2b04 	ldr.w	r2, [r8], #4
 810ad10:	f8d1 c000 	ldr.w	ip, [r1]
 810ad14:	fa1f fe82 	uxth.w	lr, r2
 810ad18:	fa1f f38c 	uxth.w	r3, ip
 810ad1c:	eba3 030e 	sub.w	r3, r3, lr
 810ad20:	4403      	add	r3, r0
 810ad22:	0c12      	lsrs	r2, r2, #16
 810ad24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 810ad28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 810ad2c:	b29b      	uxth	r3, r3
 810ad2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ad32:	45c1      	cmp	r9, r8
 810ad34:	f841 3b04 	str.w	r3, [r1], #4
 810ad38:	ea4f 4022 	mov.w	r0, r2, asr #16
 810ad3c:	d2e6      	bcs.n	810ad0c <quorem+0xa4>
 810ad3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ad42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ad46:	b922      	cbnz	r2, 810ad52 <quorem+0xea>
 810ad48:	3b04      	subs	r3, #4
 810ad4a:	429d      	cmp	r5, r3
 810ad4c:	461a      	mov	r2, r3
 810ad4e:	d30b      	bcc.n	810ad68 <quorem+0x100>
 810ad50:	613c      	str	r4, [r7, #16]
 810ad52:	3601      	adds	r6, #1
 810ad54:	4630      	mov	r0, r6
 810ad56:	b003      	add	sp, #12
 810ad58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ad5c:	6812      	ldr	r2, [r2, #0]
 810ad5e:	3b04      	subs	r3, #4
 810ad60:	2a00      	cmp	r2, #0
 810ad62:	d1cb      	bne.n	810acfc <quorem+0x94>
 810ad64:	3c01      	subs	r4, #1
 810ad66:	e7c6      	b.n	810acf6 <quorem+0x8e>
 810ad68:	6812      	ldr	r2, [r2, #0]
 810ad6a:	3b04      	subs	r3, #4
 810ad6c:	2a00      	cmp	r2, #0
 810ad6e:	d1ef      	bne.n	810ad50 <quorem+0xe8>
 810ad70:	3c01      	subs	r4, #1
 810ad72:	e7ea      	b.n	810ad4a <quorem+0xe2>
 810ad74:	2000      	movs	r0, #0
 810ad76:	e7ee      	b.n	810ad56 <quorem+0xee>

0810ad78 <_dtoa_r>:
 810ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad7c:	69c7      	ldr	r7, [r0, #28]
 810ad7e:	b099      	sub	sp, #100	@ 0x64
 810ad80:	ed8d 0b02 	vstr	d0, [sp, #8]
 810ad84:	ec55 4b10 	vmov	r4, r5, d0
 810ad88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810ad8a:	9109      	str	r1, [sp, #36]	@ 0x24
 810ad8c:	4683      	mov	fp, r0
 810ad8e:	920e      	str	r2, [sp, #56]	@ 0x38
 810ad90:	9313      	str	r3, [sp, #76]	@ 0x4c
 810ad92:	b97f      	cbnz	r7, 810adb4 <_dtoa_r+0x3c>
 810ad94:	2010      	movs	r0, #16
 810ad96:	f000 fdfd 	bl	810b994 <malloc>
 810ad9a:	4602      	mov	r2, r0
 810ad9c:	f8cb 001c 	str.w	r0, [fp, #28]
 810ada0:	b920      	cbnz	r0, 810adac <_dtoa_r+0x34>
 810ada2:	4ba7      	ldr	r3, [pc, #668]	@ (810b040 <_dtoa_r+0x2c8>)
 810ada4:	21ef      	movs	r1, #239	@ 0xef
 810ada6:	48a7      	ldr	r0, [pc, #668]	@ (810b044 <_dtoa_r+0x2cc>)
 810ada8:	f002 fdee 	bl	810d988 <__assert_func>
 810adac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 810adb0:	6007      	str	r7, [r0, #0]
 810adb2:	60c7      	str	r7, [r0, #12]
 810adb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 810adb8:	6819      	ldr	r1, [r3, #0]
 810adba:	b159      	cbz	r1, 810add4 <_dtoa_r+0x5c>
 810adbc:	685a      	ldr	r2, [r3, #4]
 810adbe:	604a      	str	r2, [r1, #4]
 810adc0:	2301      	movs	r3, #1
 810adc2:	4093      	lsls	r3, r2
 810adc4:	608b      	str	r3, [r1, #8]
 810adc6:	4658      	mov	r0, fp
 810adc8:	f000 feda 	bl	810bb80 <_Bfree>
 810adcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 810add0:	2200      	movs	r2, #0
 810add2:	601a      	str	r2, [r3, #0]
 810add4:	1e2b      	subs	r3, r5, #0
 810add6:	bfb9      	ittee	lt
 810add8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 810addc:	9303      	strlt	r3, [sp, #12]
 810adde:	2300      	movge	r3, #0
 810ade0:	6033      	strge	r3, [r6, #0]
 810ade2:	9f03      	ldr	r7, [sp, #12]
 810ade4:	4b98      	ldr	r3, [pc, #608]	@ (810b048 <_dtoa_r+0x2d0>)
 810ade6:	bfbc      	itt	lt
 810ade8:	2201      	movlt	r2, #1
 810adea:	6032      	strlt	r2, [r6, #0]
 810adec:	43bb      	bics	r3, r7
 810adee:	d112      	bne.n	810ae16 <_dtoa_r+0x9e>
 810adf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810adf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 810adf6:	6013      	str	r3, [r2, #0]
 810adf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810adfc:	4323      	orrs	r3, r4
 810adfe:	f000 854d 	beq.w	810b89c <_dtoa_r+0xb24>
 810ae02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ae04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 810b05c <_dtoa_r+0x2e4>
 810ae08:	2b00      	cmp	r3, #0
 810ae0a:	f000 854f 	beq.w	810b8ac <_dtoa_r+0xb34>
 810ae0e:	f10a 0303 	add.w	r3, sl, #3
 810ae12:	f000 bd49 	b.w	810b8a8 <_dtoa_r+0xb30>
 810ae16:	ed9d 7b02 	vldr	d7, [sp, #8]
 810ae1a:	2200      	movs	r2, #0
 810ae1c:	ec51 0b17 	vmov	r0, r1, d7
 810ae20:	2300      	movs	r3, #0
 810ae22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 810ae26:	f7f5 fed7 	bl	8100bd8 <__aeabi_dcmpeq>
 810ae2a:	4680      	mov	r8, r0
 810ae2c:	b158      	cbz	r0, 810ae46 <_dtoa_r+0xce>
 810ae2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 810ae30:	2301      	movs	r3, #1
 810ae32:	6013      	str	r3, [r2, #0]
 810ae34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810ae36:	b113      	cbz	r3, 810ae3e <_dtoa_r+0xc6>
 810ae38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810ae3a:	4b84      	ldr	r3, [pc, #528]	@ (810b04c <_dtoa_r+0x2d4>)
 810ae3c:	6013      	str	r3, [r2, #0]
 810ae3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 810b060 <_dtoa_r+0x2e8>
 810ae42:	f000 bd33 	b.w	810b8ac <_dtoa_r+0xb34>
 810ae46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810ae4a:	aa16      	add	r2, sp, #88	@ 0x58
 810ae4c:	a917      	add	r1, sp, #92	@ 0x5c
 810ae4e:	4658      	mov	r0, fp
 810ae50:	f001 fa3a 	bl	810c2c8 <__d2b>
 810ae54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 810ae58:	4681      	mov	r9, r0
 810ae5a:	2e00      	cmp	r6, #0
 810ae5c:	d077      	beq.n	810af4e <_dtoa_r+0x1d6>
 810ae5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 810ae60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810ae64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ae68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810ae6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 810ae70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810ae74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 810ae78:	4619      	mov	r1, r3
 810ae7a:	2200      	movs	r2, #0
 810ae7c:	4b74      	ldr	r3, [pc, #464]	@ (810b050 <_dtoa_r+0x2d8>)
 810ae7e:	f7f5 fa8b 	bl	8100398 <__aeabi_dsub>
 810ae82:	a369      	add	r3, pc, #420	@ (adr r3, 810b028 <_dtoa_r+0x2b0>)
 810ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae88:	f7f5 fc3e 	bl	8100708 <__aeabi_dmul>
 810ae8c:	a368      	add	r3, pc, #416	@ (adr r3, 810b030 <_dtoa_r+0x2b8>)
 810ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ae92:	f7f5 fa83 	bl	810039c <__adddf3>
 810ae96:	4604      	mov	r4, r0
 810ae98:	4630      	mov	r0, r6
 810ae9a:	460d      	mov	r5, r1
 810ae9c:	f7f5 fbca 	bl	8100634 <__aeabi_i2d>
 810aea0:	a365      	add	r3, pc, #404	@ (adr r3, 810b038 <_dtoa_r+0x2c0>)
 810aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aea6:	f7f5 fc2f 	bl	8100708 <__aeabi_dmul>
 810aeaa:	4602      	mov	r2, r0
 810aeac:	460b      	mov	r3, r1
 810aeae:	4620      	mov	r0, r4
 810aeb0:	4629      	mov	r1, r5
 810aeb2:	f7f5 fa73 	bl	810039c <__adddf3>
 810aeb6:	4604      	mov	r4, r0
 810aeb8:	460d      	mov	r5, r1
 810aeba:	f7f5 fed5 	bl	8100c68 <__aeabi_d2iz>
 810aebe:	2200      	movs	r2, #0
 810aec0:	4607      	mov	r7, r0
 810aec2:	2300      	movs	r3, #0
 810aec4:	4620      	mov	r0, r4
 810aec6:	4629      	mov	r1, r5
 810aec8:	f7f5 fe90 	bl	8100bec <__aeabi_dcmplt>
 810aecc:	b140      	cbz	r0, 810aee0 <_dtoa_r+0x168>
 810aece:	4638      	mov	r0, r7
 810aed0:	f7f5 fbb0 	bl	8100634 <__aeabi_i2d>
 810aed4:	4622      	mov	r2, r4
 810aed6:	462b      	mov	r3, r5
 810aed8:	f7f5 fe7e 	bl	8100bd8 <__aeabi_dcmpeq>
 810aedc:	b900      	cbnz	r0, 810aee0 <_dtoa_r+0x168>
 810aede:	3f01      	subs	r7, #1
 810aee0:	2f16      	cmp	r7, #22
 810aee2:	d851      	bhi.n	810af88 <_dtoa_r+0x210>
 810aee4:	4b5b      	ldr	r3, [pc, #364]	@ (810b054 <_dtoa_r+0x2dc>)
 810aee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aeee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810aef2:	f7f5 fe7b 	bl	8100bec <__aeabi_dcmplt>
 810aef6:	2800      	cmp	r0, #0
 810aef8:	d048      	beq.n	810af8c <_dtoa_r+0x214>
 810aefa:	3f01      	subs	r7, #1
 810aefc:	2300      	movs	r3, #0
 810aefe:	9312      	str	r3, [sp, #72]	@ 0x48
 810af00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810af02:	1b9b      	subs	r3, r3, r6
 810af04:	1e5a      	subs	r2, r3, #1
 810af06:	bf44      	itt	mi
 810af08:	f1c3 0801 	rsbmi	r8, r3, #1
 810af0c:	2300      	movmi	r3, #0
 810af0e:	9208      	str	r2, [sp, #32]
 810af10:	bf54      	ite	pl
 810af12:	f04f 0800 	movpl.w	r8, #0
 810af16:	9308      	strmi	r3, [sp, #32]
 810af18:	2f00      	cmp	r7, #0
 810af1a:	db39      	blt.n	810af90 <_dtoa_r+0x218>
 810af1c:	9b08      	ldr	r3, [sp, #32]
 810af1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 810af20:	443b      	add	r3, r7
 810af22:	9308      	str	r3, [sp, #32]
 810af24:	2300      	movs	r3, #0
 810af26:	930a      	str	r3, [sp, #40]	@ 0x28
 810af28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810af2a:	2b09      	cmp	r3, #9
 810af2c:	d864      	bhi.n	810aff8 <_dtoa_r+0x280>
 810af2e:	2b05      	cmp	r3, #5
 810af30:	bfc4      	itt	gt
 810af32:	3b04      	subgt	r3, #4
 810af34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 810af36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810af38:	f1a3 0302 	sub.w	r3, r3, #2
 810af3c:	bfcc      	ite	gt
 810af3e:	2400      	movgt	r4, #0
 810af40:	2401      	movle	r4, #1
 810af42:	2b03      	cmp	r3, #3
 810af44:	d863      	bhi.n	810b00e <_dtoa_r+0x296>
 810af46:	e8df f003 	tbb	[pc, r3]
 810af4a:	372a      	.short	0x372a
 810af4c:	5535      	.short	0x5535
 810af4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810af52:	441e      	add	r6, r3
 810af54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 810af58:	2b20      	cmp	r3, #32
 810af5a:	bfc1      	itttt	gt
 810af5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 810af60:	409f      	lslgt	r7, r3
 810af62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810af66:	fa24 f303 	lsrgt.w	r3, r4, r3
 810af6a:	bfd6      	itet	le
 810af6c:	f1c3 0320 	rsble	r3, r3, #32
 810af70:	ea47 0003 	orrgt.w	r0, r7, r3
 810af74:	fa04 f003 	lslle.w	r0, r4, r3
 810af78:	f7f5 fb4c 	bl	8100614 <__aeabi_ui2d>
 810af7c:	2201      	movs	r2, #1
 810af7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810af82:	3e01      	subs	r6, #1
 810af84:	9214      	str	r2, [sp, #80]	@ 0x50
 810af86:	e777      	b.n	810ae78 <_dtoa_r+0x100>
 810af88:	2301      	movs	r3, #1
 810af8a:	e7b8      	b.n	810aefe <_dtoa_r+0x186>
 810af8c:	9012      	str	r0, [sp, #72]	@ 0x48
 810af8e:	e7b7      	b.n	810af00 <_dtoa_r+0x188>
 810af90:	427b      	negs	r3, r7
 810af92:	930a      	str	r3, [sp, #40]	@ 0x28
 810af94:	2300      	movs	r3, #0
 810af96:	eba8 0807 	sub.w	r8, r8, r7
 810af9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 810af9c:	e7c4      	b.n	810af28 <_dtoa_r+0x1b0>
 810af9e:	2300      	movs	r3, #0
 810afa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 810afa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810afa4:	2b00      	cmp	r3, #0
 810afa6:	dc35      	bgt.n	810b014 <_dtoa_r+0x29c>
 810afa8:	2301      	movs	r3, #1
 810afaa:	9300      	str	r3, [sp, #0]
 810afac:	9307      	str	r3, [sp, #28]
 810afae:	461a      	mov	r2, r3
 810afb0:	920e      	str	r2, [sp, #56]	@ 0x38
 810afb2:	e00b      	b.n	810afcc <_dtoa_r+0x254>
 810afb4:	2301      	movs	r3, #1
 810afb6:	e7f3      	b.n	810afa0 <_dtoa_r+0x228>
 810afb8:	2300      	movs	r3, #0
 810afba:	930b      	str	r3, [sp, #44]	@ 0x2c
 810afbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810afbe:	18fb      	adds	r3, r7, r3
 810afc0:	9300      	str	r3, [sp, #0]
 810afc2:	3301      	adds	r3, #1
 810afc4:	2b01      	cmp	r3, #1
 810afc6:	9307      	str	r3, [sp, #28]
 810afc8:	bfb8      	it	lt
 810afca:	2301      	movlt	r3, #1
 810afcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 810afd0:	2100      	movs	r1, #0
 810afd2:	2204      	movs	r2, #4
 810afd4:	f102 0514 	add.w	r5, r2, #20
 810afd8:	429d      	cmp	r5, r3
 810afda:	d91f      	bls.n	810b01c <_dtoa_r+0x2a4>
 810afdc:	6041      	str	r1, [r0, #4]
 810afde:	4658      	mov	r0, fp
 810afe0:	f000 fd8e 	bl	810bb00 <_Balloc>
 810afe4:	4682      	mov	sl, r0
 810afe6:	2800      	cmp	r0, #0
 810afe8:	d13c      	bne.n	810b064 <_dtoa_r+0x2ec>
 810afea:	4b1b      	ldr	r3, [pc, #108]	@ (810b058 <_dtoa_r+0x2e0>)
 810afec:	4602      	mov	r2, r0
 810afee:	f240 11af 	movw	r1, #431	@ 0x1af
 810aff2:	e6d8      	b.n	810ada6 <_dtoa_r+0x2e>
 810aff4:	2301      	movs	r3, #1
 810aff6:	e7e0      	b.n	810afba <_dtoa_r+0x242>
 810aff8:	2401      	movs	r4, #1
 810affa:	2300      	movs	r3, #0
 810affc:	9309      	str	r3, [sp, #36]	@ 0x24
 810affe:	940b      	str	r4, [sp, #44]	@ 0x2c
 810b000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810b004:	9300      	str	r3, [sp, #0]
 810b006:	9307      	str	r3, [sp, #28]
 810b008:	2200      	movs	r2, #0
 810b00a:	2312      	movs	r3, #18
 810b00c:	e7d0      	b.n	810afb0 <_dtoa_r+0x238>
 810b00e:	2301      	movs	r3, #1
 810b010:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b012:	e7f5      	b.n	810b000 <_dtoa_r+0x288>
 810b014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b016:	9300      	str	r3, [sp, #0]
 810b018:	9307      	str	r3, [sp, #28]
 810b01a:	e7d7      	b.n	810afcc <_dtoa_r+0x254>
 810b01c:	3101      	adds	r1, #1
 810b01e:	0052      	lsls	r2, r2, #1
 810b020:	e7d8      	b.n	810afd4 <_dtoa_r+0x25c>
 810b022:	bf00      	nop
 810b024:	f3af 8000 	nop.w
 810b028:	636f4361 	.word	0x636f4361
 810b02c:	3fd287a7 	.word	0x3fd287a7
 810b030:	8b60c8b3 	.word	0x8b60c8b3
 810b034:	3fc68a28 	.word	0x3fc68a28
 810b038:	509f79fb 	.word	0x509f79fb
 810b03c:	3fd34413 	.word	0x3fd34413
 810b040:	0810ea52 	.word	0x0810ea52
 810b044:	0810ea69 	.word	0x0810ea69
 810b048:	7ff00000 	.word	0x7ff00000
 810b04c:	0810ea1d 	.word	0x0810ea1d
 810b050:	3ff80000 	.word	0x3ff80000
 810b054:	0810eb60 	.word	0x0810eb60
 810b058:	0810eac1 	.word	0x0810eac1
 810b05c:	0810ea4e 	.word	0x0810ea4e
 810b060:	0810ea1c 	.word	0x0810ea1c
 810b064:	f8db 301c 	ldr.w	r3, [fp, #28]
 810b068:	6018      	str	r0, [r3, #0]
 810b06a:	9b07      	ldr	r3, [sp, #28]
 810b06c:	2b0e      	cmp	r3, #14
 810b06e:	f200 80a4 	bhi.w	810b1ba <_dtoa_r+0x442>
 810b072:	2c00      	cmp	r4, #0
 810b074:	f000 80a1 	beq.w	810b1ba <_dtoa_r+0x442>
 810b078:	2f00      	cmp	r7, #0
 810b07a:	dd33      	ble.n	810b0e4 <_dtoa_r+0x36c>
 810b07c:	4bad      	ldr	r3, [pc, #692]	@ (810b334 <_dtoa_r+0x5bc>)
 810b07e:	f007 020f 	and.w	r2, r7, #15
 810b082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b086:	ed93 7b00 	vldr	d7, [r3]
 810b08a:	05f8      	lsls	r0, r7, #23
 810b08c:	ed8d 7b04 	vstr	d7, [sp, #16]
 810b090:	ea4f 1427 	mov.w	r4, r7, asr #4
 810b094:	d516      	bpl.n	810b0c4 <_dtoa_r+0x34c>
 810b096:	4ba8      	ldr	r3, [pc, #672]	@ (810b338 <_dtoa_r+0x5c0>)
 810b098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810b09c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b0a0:	f7f5 fc5c 	bl	810095c <__aeabi_ddiv>
 810b0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b0a8:	f004 040f 	and.w	r4, r4, #15
 810b0ac:	2603      	movs	r6, #3
 810b0ae:	4da2      	ldr	r5, [pc, #648]	@ (810b338 <_dtoa_r+0x5c0>)
 810b0b0:	b954      	cbnz	r4, 810b0c8 <_dtoa_r+0x350>
 810b0b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810b0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b0ba:	f7f5 fc4f 	bl	810095c <__aeabi_ddiv>
 810b0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b0c2:	e028      	b.n	810b116 <_dtoa_r+0x39e>
 810b0c4:	2602      	movs	r6, #2
 810b0c6:	e7f2      	b.n	810b0ae <_dtoa_r+0x336>
 810b0c8:	07e1      	lsls	r1, r4, #31
 810b0ca:	d508      	bpl.n	810b0de <_dtoa_r+0x366>
 810b0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 810b0d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 810b0d4:	f7f5 fb18 	bl	8100708 <__aeabi_dmul>
 810b0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810b0dc:	3601      	adds	r6, #1
 810b0de:	1064      	asrs	r4, r4, #1
 810b0e0:	3508      	adds	r5, #8
 810b0e2:	e7e5      	b.n	810b0b0 <_dtoa_r+0x338>
 810b0e4:	f000 80d2 	beq.w	810b28c <_dtoa_r+0x514>
 810b0e8:	427c      	negs	r4, r7
 810b0ea:	4b92      	ldr	r3, [pc, #584]	@ (810b334 <_dtoa_r+0x5bc>)
 810b0ec:	4d92      	ldr	r5, [pc, #584]	@ (810b338 <_dtoa_r+0x5c0>)
 810b0ee:	f004 020f 	and.w	r2, r4, #15
 810b0f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b0fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810b0fe:	f7f5 fb03 	bl	8100708 <__aeabi_dmul>
 810b102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b106:	1124      	asrs	r4, r4, #4
 810b108:	2300      	movs	r3, #0
 810b10a:	2602      	movs	r6, #2
 810b10c:	2c00      	cmp	r4, #0
 810b10e:	f040 80b2 	bne.w	810b276 <_dtoa_r+0x4fe>
 810b112:	2b00      	cmp	r3, #0
 810b114:	d1d3      	bne.n	810b0be <_dtoa_r+0x346>
 810b116:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810b118:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810b11c:	2b00      	cmp	r3, #0
 810b11e:	f000 80b7 	beq.w	810b290 <_dtoa_r+0x518>
 810b122:	4b86      	ldr	r3, [pc, #536]	@ (810b33c <_dtoa_r+0x5c4>)
 810b124:	2200      	movs	r2, #0
 810b126:	4620      	mov	r0, r4
 810b128:	4629      	mov	r1, r5
 810b12a:	f7f5 fd5f 	bl	8100bec <__aeabi_dcmplt>
 810b12e:	2800      	cmp	r0, #0
 810b130:	f000 80ae 	beq.w	810b290 <_dtoa_r+0x518>
 810b134:	9b07      	ldr	r3, [sp, #28]
 810b136:	2b00      	cmp	r3, #0
 810b138:	f000 80aa 	beq.w	810b290 <_dtoa_r+0x518>
 810b13c:	9b00      	ldr	r3, [sp, #0]
 810b13e:	2b00      	cmp	r3, #0
 810b140:	dd37      	ble.n	810b1b2 <_dtoa_r+0x43a>
 810b142:	1e7b      	subs	r3, r7, #1
 810b144:	9304      	str	r3, [sp, #16]
 810b146:	4620      	mov	r0, r4
 810b148:	4b7d      	ldr	r3, [pc, #500]	@ (810b340 <_dtoa_r+0x5c8>)
 810b14a:	2200      	movs	r2, #0
 810b14c:	4629      	mov	r1, r5
 810b14e:	f7f5 fadb 	bl	8100708 <__aeabi_dmul>
 810b152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b156:	9c00      	ldr	r4, [sp, #0]
 810b158:	3601      	adds	r6, #1
 810b15a:	4630      	mov	r0, r6
 810b15c:	f7f5 fa6a 	bl	8100634 <__aeabi_i2d>
 810b160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b164:	f7f5 fad0 	bl	8100708 <__aeabi_dmul>
 810b168:	4b76      	ldr	r3, [pc, #472]	@ (810b344 <_dtoa_r+0x5cc>)
 810b16a:	2200      	movs	r2, #0
 810b16c:	f7f5 f916 	bl	810039c <__adddf3>
 810b170:	4605      	mov	r5, r0
 810b172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810b176:	2c00      	cmp	r4, #0
 810b178:	f040 808d 	bne.w	810b296 <_dtoa_r+0x51e>
 810b17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b180:	4b71      	ldr	r3, [pc, #452]	@ (810b348 <_dtoa_r+0x5d0>)
 810b182:	2200      	movs	r2, #0
 810b184:	f7f5 f908 	bl	8100398 <__aeabi_dsub>
 810b188:	4602      	mov	r2, r0
 810b18a:	460b      	mov	r3, r1
 810b18c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b190:	462a      	mov	r2, r5
 810b192:	4633      	mov	r3, r6
 810b194:	f7f5 fd48 	bl	8100c28 <__aeabi_dcmpgt>
 810b198:	2800      	cmp	r0, #0
 810b19a:	f040 828b 	bne.w	810b6b4 <_dtoa_r+0x93c>
 810b19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b1a2:	462a      	mov	r2, r5
 810b1a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 810b1a8:	f7f5 fd20 	bl	8100bec <__aeabi_dcmplt>
 810b1ac:	2800      	cmp	r0, #0
 810b1ae:	f040 8128 	bne.w	810b402 <_dtoa_r+0x68a>
 810b1b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810b1b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810b1ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810b1bc:	2b00      	cmp	r3, #0
 810b1be:	f2c0 815a 	blt.w	810b476 <_dtoa_r+0x6fe>
 810b1c2:	2f0e      	cmp	r7, #14
 810b1c4:	f300 8157 	bgt.w	810b476 <_dtoa_r+0x6fe>
 810b1c8:	4b5a      	ldr	r3, [pc, #360]	@ (810b334 <_dtoa_r+0x5bc>)
 810b1ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810b1ce:	ed93 7b00 	vldr	d7, [r3]
 810b1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b1d4:	2b00      	cmp	r3, #0
 810b1d6:	ed8d 7b00 	vstr	d7, [sp]
 810b1da:	da03      	bge.n	810b1e4 <_dtoa_r+0x46c>
 810b1dc:	9b07      	ldr	r3, [sp, #28]
 810b1de:	2b00      	cmp	r3, #0
 810b1e0:	f340 8101 	ble.w	810b3e6 <_dtoa_r+0x66e>
 810b1e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 810b1e8:	4656      	mov	r6, sl
 810b1ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b1ee:	4620      	mov	r0, r4
 810b1f0:	4629      	mov	r1, r5
 810b1f2:	f7f5 fbb3 	bl	810095c <__aeabi_ddiv>
 810b1f6:	f7f5 fd37 	bl	8100c68 <__aeabi_d2iz>
 810b1fa:	4680      	mov	r8, r0
 810b1fc:	f7f5 fa1a 	bl	8100634 <__aeabi_i2d>
 810b200:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b204:	f7f5 fa80 	bl	8100708 <__aeabi_dmul>
 810b208:	4602      	mov	r2, r0
 810b20a:	460b      	mov	r3, r1
 810b20c:	4620      	mov	r0, r4
 810b20e:	4629      	mov	r1, r5
 810b210:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 810b214:	f7f5 f8c0 	bl	8100398 <__aeabi_dsub>
 810b218:	f806 4b01 	strb.w	r4, [r6], #1
 810b21c:	9d07      	ldr	r5, [sp, #28]
 810b21e:	eba6 040a 	sub.w	r4, r6, sl
 810b222:	42a5      	cmp	r5, r4
 810b224:	4602      	mov	r2, r0
 810b226:	460b      	mov	r3, r1
 810b228:	f040 8117 	bne.w	810b45a <_dtoa_r+0x6e2>
 810b22c:	f7f5 f8b6 	bl	810039c <__adddf3>
 810b230:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b234:	4604      	mov	r4, r0
 810b236:	460d      	mov	r5, r1
 810b238:	f7f5 fcf6 	bl	8100c28 <__aeabi_dcmpgt>
 810b23c:	2800      	cmp	r0, #0
 810b23e:	f040 80f9 	bne.w	810b434 <_dtoa_r+0x6bc>
 810b242:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b246:	4620      	mov	r0, r4
 810b248:	4629      	mov	r1, r5
 810b24a:	f7f5 fcc5 	bl	8100bd8 <__aeabi_dcmpeq>
 810b24e:	b118      	cbz	r0, 810b258 <_dtoa_r+0x4e0>
 810b250:	f018 0f01 	tst.w	r8, #1
 810b254:	f040 80ee 	bne.w	810b434 <_dtoa_r+0x6bc>
 810b258:	4649      	mov	r1, r9
 810b25a:	4658      	mov	r0, fp
 810b25c:	f000 fc90 	bl	810bb80 <_Bfree>
 810b260:	2300      	movs	r3, #0
 810b262:	7033      	strb	r3, [r6, #0]
 810b264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810b266:	3701      	adds	r7, #1
 810b268:	601f      	str	r7, [r3, #0]
 810b26a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b26c:	2b00      	cmp	r3, #0
 810b26e:	f000 831d 	beq.w	810b8ac <_dtoa_r+0xb34>
 810b272:	601e      	str	r6, [r3, #0]
 810b274:	e31a      	b.n	810b8ac <_dtoa_r+0xb34>
 810b276:	07e2      	lsls	r2, r4, #31
 810b278:	d505      	bpl.n	810b286 <_dtoa_r+0x50e>
 810b27a:	e9d5 2300 	ldrd	r2, r3, [r5]
 810b27e:	f7f5 fa43 	bl	8100708 <__aeabi_dmul>
 810b282:	3601      	adds	r6, #1
 810b284:	2301      	movs	r3, #1
 810b286:	1064      	asrs	r4, r4, #1
 810b288:	3508      	adds	r5, #8
 810b28a:	e73f      	b.n	810b10c <_dtoa_r+0x394>
 810b28c:	2602      	movs	r6, #2
 810b28e:	e742      	b.n	810b116 <_dtoa_r+0x39e>
 810b290:	9c07      	ldr	r4, [sp, #28]
 810b292:	9704      	str	r7, [sp, #16]
 810b294:	e761      	b.n	810b15a <_dtoa_r+0x3e2>
 810b296:	4b27      	ldr	r3, [pc, #156]	@ (810b334 <_dtoa_r+0x5bc>)
 810b298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810b29a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810b29e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b2a2:	4454      	add	r4, sl
 810b2a4:	2900      	cmp	r1, #0
 810b2a6:	d053      	beq.n	810b350 <_dtoa_r+0x5d8>
 810b2a8:	4928      	ldr	r1, [pc, #160]	@ (810b34c <_dtoa_r+0x5d4>)
 810b2aa:	2000      	movs	r0, #0
 810b2ac:	f7f5 fb56 	bl	810095c <__aeabi_ddiv>
 810b2b0:	4633      	mov	r3, r6
 810b2b2:	462a      	mov	r2, r5
 810b2b4:	f7f5 f870 	bl	8100398 <__aeabi_dsub>
 810b2b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b2bc:	4656      	mov	r6, sl
 810b2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b2c2:	f7f5 fcd1 	bl	8100c68 <__aeabi_d2iz>
 810b2c6:	4605      	mov	r5, r0
 810b2c8:	f7f5 f9b4 	bl	8100634 <__aeabi_i2d>
 810b2cc:	4602      	mov	r2, r0
 810b2ce:	460b      	mov	r3, r1
 810b2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b2d4:	f7f5 f860 	bl	8100398 <__aeabi_dsub>
 810b2d8:	3530      	adds	r5, #48	@ 0x30
 810b2da:	4602      	mov	r2, r0
 810b2dc:	460b      	mov	r3, r1
 810b2de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b2e2:	f806 5b01 	strb.w	r5, [r6], #1
 810b2e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b2ea:	f7f5 fc7f 	bl	8100bec <__aeabi_dcmplt>
 810b2ee:	2800      	cmp	r0, #0
 810b2f0:	d171      	bne.n	810b3d6 <_dtoa_r+0x65e>
 810b2f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b2f6:	4911      	ldr	r1, [pc, #68]	@ (810b33c <_dtoa_r+0x5c4>)
 810b2f8:	2000      	movs	r0, #0
 810b2fa:	f7f5 f84d 	bl	8100398 <__aeabi_dsub>
 810b2fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b302:	f7f5 fc73 	bl	8100bec <__aeabi_dcmplt>
 810b306:	2800      	cmp	r0, #0
 810b308:	f040 8095 	bne.w	810b436 <_dtoa_r+0x6be>
 810b30c:	42a6      	cmp	r6, r4
 810b30e:	f43f af50 	beq.w	810b1b2 <_dtoa_r+0x43a>
 810b312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b316:	4b0a      	ldr	r3, [pc, #40]	@ (810b340 <_dtoa_r+0x5c8>)
 810b318:	2200      	movs	r2, #0
 810b31a:	f7f5 f9f5 	bl	8100708 <__aeabi_dmul>
 810b31e:	4b08      	ldr	r3, [pc, #32]	@ (810b340 <_dtoa_r+0x5c8>)
 810b320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b324:	2200      	movs	r2, #0
 810b326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b32a:	f7f5 f9ed 	bl	8100708 <__aeabi_dmul>
 810b32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b332:	e7c4      	b.n	810b2be <_dtoa_r+0x546>
 810b334:	0810eb60 	.word	0x0810eb60
 810b338:	0810eb38 	.word	0x0810eb38
 810b33c:	3ff00000 	.word	0x3ff00000
 810b340:	40240000 	.word	0x40240000
 810b344:	401c0000 	.word	0x401c0000
 810b348:	40140000 	.word	0x40140000
 810b34c:	3fe00000 	.word	0x3fe00000
 810b350:	4631      	mov	r1, r6
 810b352:	4628      	mov	r0, r5
 810b354:	f7f5 f9d8 	bl	8100708 <__aeabi_dmul>
 810b358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 810b35c:	9415      	str	r4, [sp, #84]	@ 0x54
 810b35e:	4656      	mov	r6, sl
 810b360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b364:	f7f5 fc80 	bl	8100c68 <__aeabi_d2iz>
 810b368:	4605      	mov	r5, r0
 810b36a:	f7f5 f963 	bl	8100634 <__aeabi_i2d>
 810b36e:	4602      	mov	r2, r0
 810b370:	460b      	mov	r3, r1
 810b372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b376:	f7f5 f80f 	bl	8100398 <__aeabi_dsub>
 810b37a:	3530      	adds	r5, #48	@ 0x30
 810b37c:	f806 5b01 	strb.w	r5, [r6], #1
 810b380:	4602      	mov	r2, r0
 810b382:	460b      	mov	r3, r1
 810b384:	42a6      	cmp	r6, r4
 810b386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810b38a:	f04f 0200 	mov.w	r2, #0
 810b38e:	d124      	bne.n	810b3da <_dtoa_r+0x662>
 810b390:	4bac      	ldr	r3, [pc, #688]	@ (810b644 <_dtoa_r+0x8cc>)
 810b392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810b396:	f7f5 f801 	bl	810039c <__adddf3>
 810b39a:	4602      	mov	r2, r0
 810b39c:	460b      	mov	r3, r1
 810b39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b3a2:	f7f5 fc41 	bl	8100c28 <__aeabi_dcmpgt>
 810b3a6:	2800      	cmp	r0, #0
 810b3a8:	d145      	bne.n	810b436 <_dtoa_r+0x6be>
 810b3aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 810b3ae:	49a5      	ldr	r1, [pc, #660]	@ (810b644 <_dtoa_r+0x8cc>)
 810b3b0:	2000      	movs	r0, #0
 810b3b2:	f7f4 fff1 	bl	8100398 <__aeabi_dsub>
 810b3b6:	4602      	mov	r2, r0
 810b3b8:	460b      	mov	r3, r1
 810b3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b3be:	f7f5 fc15 	bl	8100bec <__aeabi_dcmplt>
 810b3c2:	2800      	cmp	r0, #0
 810b3c4:	f43f aef5 	beq.w	810b1b2 <_dtoa_r+0x43a>
 810b3c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 810b3ca:	1e73      	subs	r3, r6, #1
 810b3cc:	9315      	str	r3, [sp, #84]	@ 0x54
 810b3ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810b3d2:	2b30      	cmp	r3, #48	@ 0x30
 810b3d4:	d0f8      	beq.n	810b3c8 <_dtoa_r+0x650>
 810b3d6:	9f04      	ldr	r7, [sp, #16]
 810b3d8:	e73e      	b.n	810b258 <_dtoa_r+0x4e0>
 810b3da:	4b9b      	ldr	r3, [pc, #620]	@ (810b648 <_dtoa_r+0x8d0>)
 810b3dc:	f7f5 f994 	bl	8100708 <__aeabi_dmul>
 810b3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b3e4:	e7bc      	b.n	810b360 <_dtoa_r+0x5e8>
 810b3e6:	d10c      	bne.n	810b402 <_dtoa_r+0x68a>
 810b3e8:	4b98      	ldr	r3, [pc, #608]	@ (810b64c <_dtoa_r+0x8d4>)
 810b3ea:	2200      	movs	r2, #0
 810b3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 810b3f0:	f7f5 f98a 	bl	8100708 <__aeabi_dmul>
 810b3f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b3f8:	f7f5 fc0c 	bl	8100c14 <__aeabi_dcmpge>
 810b3fc:	2800      	cmp	r0, #0
 810b3fe:	f000 8157 	beq.w	810b6b0 <_dtoa_r+0x938>
 810b402:	2400      	movs	r4, #0
 810b404:	4625      	mov	r5, r4
 810b406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810b408:	43db      	mvns	r3, r3
 810b40a:	9304      	str	r3, [sp, #16]
 810b40c:	4656      	mov	r6, sl
 810b40e:	2700      	movs	r7, #0
 810b410:	4621      	mov	r1, r4
 810b412:	4658      	mov	r0, fp
 810b414:	f000 fbb4 	bl	810bb80 <_Bfree>
 810b418:	2d00      	cmp	r5, #0
 810b41a:	d0dc      	beq.n	810b3d6 <_dtoa_r+0x65e>
 810b41c:	b12f      	cbz	r7, 810b42a <_dtoa_r+0x6b2>
 810b41e:	42af      	cmp	r7, r5
 810b420:	d003      	beq.n	810b42a <_dtoa_r+0x6b2>
 810b422:	4639      	mov	r1, r7
 810b424:	4658      	mov	r0, fp
 810b426:	f000 fbab 	bl	810bb80 <_Bfree>
 810b42a:	4629      	mov	r1, r5
 810b42c:	4658      	mov	r0, fp
 810b42e:	f000 fba7 	bl	810bb80 <_Bfree>
 810b432:	e7d0      	b.n	810b3d6 <_dtoa_r+0x65e>
 810b434:	9704      	str	r7, [sp, #16]
 810b436:	4633      	mov	r3, r6
 810b438:	461e      	mov	r6, r3
 810b43a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b43e:	2a39      	cmp	r2, #57	@ 0x39
 810b440:	d107      	bne.n	810b452 <_dtoa_r+0x6da>
 810b442:	459a      	cmp	sl, r3
 810b444:	d1f8      	bne.n	810b438 <_dtoa_r+0x6c0>
 810b446:	9a04      	ldr	r2, [sp, #16]
 810b448:	3201      	adds	r2, #1
 810b44a:	9204      	str	r2, [sp, #16]
 810b44c:	2230      	movs	r2, #48	@ 0x30
 810b44e:	f88a 2000 	strb.w	r2, [sl]
 810b452:	781a      	ldrb	r2, [r3, #0]
 810b454:	3201      	adds	r2, #1
 810b456:	701a      	strb	r2, [r3, #0]
 810b458:	e7bd      	b.n	810b3d6 <_dtoa_r+0x65e>
 810b45a:	4b7b      	ldr	r3, [pc, #492]	@ (810b648 <_dtoa_r+0x8d0>)
 810b45c:	2200      	movs	r2, #0
 810b45e:	f7f5 f953 	bl	8100708 <__aeabi_dmul>
 810b462:	2200      	movs	r2, #0
 810b464:	2300      	movs	r3, #0
 810b466:	4604      	mov	r4, r0
 810b468:	460d      	mov	r5, r1
 810b46a:	f7f5 fbb5 	bl	8100bd8 <__aeabi_dcmpeq>
 810b46e:	2800      	cmp	r0, #0
 810b470:	f43f aebb 	beq.w	810b1ea <_dtoa_r+0x472>
 810b474:	e6f0      	b.n	810b258 <_dtoa_r+0x4e0>
 810b476:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 810b478:	2a00      	cmp	r2, #0
 810b47a:	f000 80db 	beq.w	810b634 <_dtoa_r+0x8bc>
 810b47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b480:	2a01      	cmp	r2, #1
 810b482:	f300 80bf 	bgt.w	810b604 <_dtoa_r+0x88c>
 810b486:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 810b488:	2a00      	cmp	r2, #0
 810b48a:	f000 80b7 	beq.w	810b5fc <_dtoa_r+0x884>
 810b48e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810b492:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b494:	4646      	mov	r6, r8
 810b496:	9a08      	ldr	r2, [sp, #32]
 810b498:	2101      	movs	r1, #1
 810b49a:	441a      	add	r2, r3
 810b49c:	4658      	mov	r0, fp
 810b49e:	4498      	add	r8, r3
 810b4a0:	9208      	str	r2, [sp, #32]
 810b4a2:	f000 fc6b 	bl	810bd7c <__i2b>
 810b4a6:	4605      	mov	r5, r0
 810b4a8:	b15e      	cbz	r6, 810b4c2 <_dtoa_r+0x74a>
 810b4aa:	9b08      	ldr	r3, [sp, #32]
 810b4ac:	2b00      	cmp	r3, #0
 810b4ae:	dd08      	ble.n	810b4c2 <_dtoa_r+0x74a>
 810b4b0:	42b3      	cmp	r3, r6
 810b4b2:	9a08      	ldr	r2, [sp, #32]
 810b4b4:	bfa8      	it	ge
 810b4b6:	4633      	movge	r3, r6
 810b4b8:	eba8 0803 	sub.w	r8, r8, r3
 810b4bc:	1af6      	subs	r6, r6, r3
 810b4be:	1ad3      	subs	r3, r2, r3
 810b4c0:	9308      	str	r3, [sp, #32]
 810b4c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b4c4:	b1f3      	cbz	r3, 810b504 <_dtoa_r+0x78c>
 810b4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b4c8:	2b00      	cmp	r3, #0
 810b4ca:	f000 80b7 	beq.w	810b63c <_dtoa_r+0x8c4>
 810b4ce:	b18c      	cbz	r4, 810b4f4 <_dtoa_r+0x77c>
 810b4d0:	4629      	mov	r1, r5
 810b4d2:	4622      	mov	r2, r4
 810b4d4:	4658      	mov	r0, fp
 810b4d6:	f000 fd11 	bl	810befc <__pow5mult>
 810b4da:	464a      	mov	r2, r9
 810b4dc:	4601      	mov	r1, r0
 810b4de:	4605      	mov	r5, r0
 810b4e0:	4658      	mov	r0, fp
 810b4e2:	f000 fc61 	bl	810bda8 <__multiply>
 810b4e6:	4649      	mov	r1, r9
 810b4e8:	9004      	str	r0, [sp, #16]
 810b4ea:	4658      	mov	r0, fp
 810b4ec:	f000 fb48 	bl	810bb80 <_Bfree>
 810b4f0:	9b04      	ldr	r3, [sp, #16]
 810b4f2:	4699      	mov	r9, r3
 810b4f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b4f6:	1b1a      	subs	r2, r3, r4
 810b4f8:	d004      	beq.n	810b504 <_dtoa_r+0x78c>
 810b4fa:	4649      	mov	r1, r9
 810b4fc:	4658      	mov	r0, fp
 810b4fe:	f000 fcfd 	bl	810befc <__pow5mult>
 810b502:	4681      	mov	r9, r0
 810b504:	2101      	movs	r1, #1
 810b506:	4658      	mov	r0, fp
 810b508:	f000 fc38 	bl	810bd7c <__i2b>
 810b50c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b50e:	4604      	mov	r4, r0
 810b510:	2b00      	cmp	r3, #0
 810b512:	f000 81cf 	beq.w	810b8b4 <_dtoa_r+0xb3c>
 810b516:	461a      	mov	r2, r3
 810b518:	4601      	mov	r1, r0
 810b51a:	4658      	mov	r0, fp
 810b51c:	f000 fcee 	bl	810befc <__pow5mult>
 810b520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b522:	2b01      	cmp	r3, #1
 810b524:	4604      	mov	r4, r0
 810b526:	f300 8095 	bgt.w	810b654 <_dtoa_r+0x8dc>
 810b52a:	9b02      	ldr	r3, [sp, #8]
 810b52c:	2b00      	cmp	r3, #0
 810b52e:	f040 8087 	bne.w	810b640 <_dtoa_r+0x8c8>
 810b532:	9b03      	ldr	r3, [sp, #12]
 810b534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b538:	2b00      	cmp	r3, #0
 810b53a:	f040 8089 	bne.w	810b650 <_dtoa_r+0x8d8>
 810b53e:	9b03      	ldr	r3, [sp, #12]
 810b540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810b544:	0d1b      	lsrs	r3, r3, #20
 810b546:	051b      	lsls	r3, r3, #20
 810b548:	b12b      	cbz	r3, 810b556 <_dtoa_r+0x7de>
 810b54a:	9b08      	ldr	r3, [sp, #32]
 810b54c:	3301      	adds	r3, #1
 810b54e:	9308      	str	r3, [sp, #32]
 810b550:	f108 0801 	add.w	r8, r8, #1
 810b554:	2301      	movs	r3, #1
 810b556:	930a      	str	r3, [sp, #40]	@ 0x28
 810b558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b55a:	2b00      	cmp	r3, #0
 810b55c:	f000 81b0 	beq.w	810b8c0 <_dtoa_r+0xb48>
 810b560:	6923      	ldr	r3, [r4, #16]
 810b562:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810b566:	6918      	ldr	r0, [r3, #16]
 810b568:	f000 fbbc 	bl	810bce4 <__hi0bits>
 810b56c:	f1c0 0020 	rsb	r0, r0, #32
 810b570:	9b08      	ldr	r3, [sp, #32]
 810b572:	4418      	add	r0, r3
 810b574:	f010 001f 	ands.w	r0, r0, #31
 810b578:	d077      	beq.n	810b66a <_dtoa_r+0x8f2>
 810b57a:	f1c0 0320 	rsb	r3, r0, #32
 810b57e:	2b04      	cmp	r3, #4
 810b580:	dd6b      	ble.n	810b65a <_dtoa_r+0x8e2>
 810b582:	9b08      	ldr	r3, [sp, #32]
 810b584:	f1c0 001c 	rsb	r0, r0, #28
 810b588:	4403      	add	r3, r0
 810b58a:	4480      	add	r8, r0
 810b58c:	4406      	add	r6, r0
 810b58e:	9308      	str	r3, [sp, #32]
 810b590:	f1b8 0f00 	cmp.w	r8, #0
 810b594:	dd05      	ble.n	810b5a2 <_dtoa_r+0x82a>
 810b596:	4649      	mov	r1, r9
 810b598:	4642      	mov	r2, r8
 810b59a:	4658      	mov	r0, fp
 810b59c:	f000 fd08 	bl	810bfb0 <__lshift>
 810b5a0:	4681      	mov	r9, r0
 810b5a2:	9b08      	ldr	r3, [sp, #32]
 810b5a4:	2b00      	cmp	r3, #0
 810b5a6:	dd05      	ble.n	810b5b4 <_dtoa_r+0x83c>
 810b5a8:	4621      	mov	r1, r4
 810b5aa:	461a      	mov	r2, r3
 810b5ac:	4658      	mov	r0, fp
 810b5ae:	f000 fcff 	bl	810bfb0 <__lshift>
 810b5b2:	4604      	mov	r4, r0
 810b5b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810b5b6:	2b00      	cmp	r3, #0
 810b5b8:	d059      	beq.n	810b66e <_dtoa_r+0x8f6>
 810b5ba:	4621      	mov	r1, r4
 810b5bc:	4648      	mov	r0, r9
 810b5be:	f000 fd63 	bl	810c088 <__mcmp>
 810b5c2:	2800      	cmp	r0, #0
 810b5c4:	da53      	bge.n	810b66e <_dtoa_r+0x8f6>
 810b5c6:	1e7b      	subs	r3, r7, #1
 810b5c8:	9304      	str	r3, [sp, #16]
 810b5ca:	4649      	mov	r1, r9
 810b5cc:	2300      	movs	r3, #0
 810b5ce:	220a      	movs	r2, #10
 810b5d0:	4658      	mov	r0, fp
 810b5d2:	f000 faf7 	bl	810bbc4 <__multadd>
 810b5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b5d8:	4681      	mov	r9, r0
 810b5da:	2b00      	cmp	r3, #0
 810b5dc:	f000 8172 	beq.w	810b8c4 <_dtoa_r+0xb4c>
 810b5e0:	2300      	movs	r3, #0
 810b5e2:	4629      	mov	r1, r5
 810b5e4:	220a      	movs	r2, #10
 810b5e6:	4658      	mov	r0, fp
 810b5e8:	f000 faec 	bl	810bbc4 <__multadd>
 810b5ec:	9b00      	ldr	r3, [sp, #0]
 810b5ee:	2b00      	cmp	r3, #0
 810b5f0:	4605      	mov	r5, r0
 810b5f2:	dc67      	bgt.n	810b6c4 <_dtoa_r+0x94c>
 810b5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b5f6:	2b02      	cmp	r3, #2
 810b5f8:	dc41      	bgt.n	810b67e <_dtoa_r+0x906>
 810b5fa:	e063      	b.n	810b6c4 <_dtoa_r+0x94c>
 810b5fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810b5fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 810b602:	e746      	b.n	810b492 <_dtoa_r+0x71a>
 810b604:	9b07      	ldr	r3, [sp, #28]
 810b606:	1e5c      	subs	r4, r3, #1
 810b608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b60a:	42a3      	cmp	r3, r4
 810b60c:	bfbf      	itttt	lt
 810b60e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 810b610:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 810b612:	940a      	strlt	r4, [sp, #40]	@ 0x28
 810b614:	1ae3      	sublt	r3, r4, r3
 810b616:	bfb4      	ite	lt
 810b618:	18d2      	addlt	r2, r2, r3
 810b61a:	1b1c      	subge	r4, r3, r4
 810b61c:	9b07      	ldr	r3, [sp, #28]
 810b61e:	bfbc      	itt	lt
 810b620:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 810b622:	2400      	movlt	r4, #0
 810b624:	2b00      	cmp	r3, #0
 810b626:	bfb5      	itete	lt
 810b628:	eba8 0603 	sublt.w	r6, r8, r3
 810b62c:	9b07      	ldrge	r3, [sp, #28]
 810b62e:	2300      	movlt	r3, #0
 810b630:	4646      	movge	r6, r8
 810b632:	e730      	b.n	810b496 <_dtoa_r+0x71e>
 810b634:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810b636:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 810b638:	4646      	mov	r6, r8
 810b63a:	e735      	b.n	810b4a8 <_dtoa_r+0x730>
 810b63c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810b63e:	e75c      	b.n	810b4fa <_dtoa_r+0x782>
 810b640:	2300      	movs	r3, #0
 810b642:	e788      	b.n	810b556 <_dtoa_r+0x7de>
 810b644:	3fe00000 	.word	0x3fe00000
 810b648:	40240000 	.word	0x40240000
 810b64c:	40140000 	.word	0x40140000
 810b650:	9b02      	ldr	r3, [sp, #8]
 810b652:	e780      	b.n	810b556 <_dtoa_r+0x7de>
 810b654:	2300      	movs	r3, #0
 810b656:	930a      	str	r3, [sp, #40]	@ 0x28
 810b658:	e782      	b.n	810b560 <_dtoa_r+0x7e8>
 810b65a:	d099      	beq.n	810b590 <_dtoa_r+0x818>
 810b65c:	9a08      	ldr	r2, [sp, #32]
 810b65e:	331c      	adds	r3, #28
 810b660:	441a      	add	r2, r3
 810b662:	4498      	add	r8, r3
 810b664:	441e      	add	r6, r3
 810b666:	9208      	str	r2, [sp, #32]
 810b668:	e792      	b.n	810b590 <_dtoa_r+0x818>
 810b66a:	4603      	mov	r3, r0
 810b66c:	e7f6      	b.n	810b65c <_dtoa_r+0x8e4>
 810b66e:	9b07      	ldr	r3, [sp, #28]
 810b670:	9704      	str	r7, [sp, #16]
 810b672:	2b00      	cmp	r3, #0
 810b674:	dc20      	bgt.n	810b6b8 <_dtoa_r+0x940>
 810b676:	9300      	str	r3, [sp, #0]
 810b678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b67a:	2b02      	cmp	r3, #2
 810b67c:	dd1e      	ble.n	810b6bc <_dtoa_r+0x944>
 810b67e:	9b00      	ldr	r3, [sp, #0]
 810b680:	2b00      	cmp	r3, #0
 810b682:	f47f aec0 	bne.w	810b406 <_dtoa_r+0x68e>
 810b686:	4621      	mov	r1, r4
 810b688:	2205      	movs	r2, #5
 810b68a:	4658      	mov	r0, fp
 810b68c:	f000 fa9a 	bl	810bbc4 <__multadd>
 810b690:	4601      	mov	r1, r0
 810b692:	4604      	mov	r4, r0
 810b694:	4648      	mov	r0, r9
 810b696:	f000 fcf7 	bl	810c088 <__mcmp>
 810b69a:	2800      	cmp	r0, #0
 810b69c:	f77f aeb3 	ble.w	810b406 <_dtoa_r+0x68e>
 810b6a0:	4656      	mov	r6, sl
 810b6a2:	2331      	movs	r3, #49	@ 0x31
 810b6a4:	f806 3b01 	strb.w	r3, [r6], #1
 810b6a8:	9b04      	ldr	r3, [sp, #16]
 810b6aa:	3301      	adds	r3, #1
 810b6ac:	9304      	str	r3, [sp, #16]
 810b6ae:	e6ae      	b.n	810b40e <_dtoa_r+0x696>
 810b6b0:	9c07      	ldr	r4, [sp, #28]
 810b6b2:	9704      	str	r7, [sp, #16]
 810b6b4:	4625      	mov	r5, r4
 810b6b6:	e7f3      	b.n	810b6a0 <_dtoa_r+0x928>
 810b6b8:	9b07      	ldr	r3, [sp, #28]
 810b6ba:	9300      	str	r3, [sp, #0]
 810b6bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b6be:	2b00      	cmp	r3, #0
 810b6c0:	f000 8104 	beq.w	810b8cc <_dtoa_r+0xb54>
 810b6c4:	2e00      	cmp	r6, #0
 810b6c6:	dd05      	ble.n	810b6d4 <_dtoa_r+0x95c>
 810b6c8:	4629      	mov	r1, r5
 810b6ca:	4632      	mov	r2, r6
 810b6cc:	4658      	mov	r0, fp
 810b6ce:	f000 fc6f 	bl	810bfb0 <__lshift>
 810b6d2:	4605      	mov	r5, r0
 810b6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b6d6:	2b00      	cmp	r3, #0
 810b6d8:	d05a      	beq.n	810b790 <_dtoa_r+0xa18>
 810b6da:	6869      	ldr	r1, [r5, #4]
 810b6dc:	4658      	mov	r0, fp
 810b6de:	f000 fa0f 	bl	810bb00 <_Balloc>
 810b6e2:	4606      	mov	r6, r0
 810b6e4:	b928      	cbnz	r0, 810b6f2 <_dtoa_r+0x97a>
 810b6e6:	4b84      	ldr	r3, [pc, #528]	@ (810b8f8 <_dtoa_r+0xb80>)
 810b6e8:	4602      	mov	r2, r0
 810b6ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 810b6ee:	f7ff bb5a 	b.w	810ada6 <_dtoa_r+0x2e>
 810b6f2:	692a      	ldr	r2, [r5, #16]
 810b6f4:	3202      	adds	r2, #2
 810b6f6:	0092      	lsls	r2, r2, #2
 810b6f8:	f105 010c 	add.w	r1, r5, #12
 810b6fc:	300c      	adds	r0, #12
 810b6fe:	f7ff fa9e 	bl	810ac3e <memcpy>
 810b702:	2201      	movs	r2, #1
 810b704:	4631      	mov	r1, r6
 810b706:	4658      	mov	r0, fp
 810b708:	f000 fc52 	bl	810bfb0 <__lshift>
 810b70c:	f10a 0301 	add.w	r3, sl, #1
 810b710:	9307      	str	r3, [sp, #28]
 810b712:	9b00      	ldr	r3, [sp, #0]
 810b714:	4453      	add	r3, sl
 810b716:	930b      	str	r3, [sp, #44]	@ 0x2c
 810b718:	9b02      	ldr	r3, [sp, #8]
 810b71a:	f003 0301 	and.w	r3, r3, #1
 810b71e:	462f      	mov	r7, r5
 810b720:	930a      	str	r3, [sp, #40]	@ 0x28
 810b722:	4605      	mov	r5, r0
 810b724:	9b07      	ldr	r3, [sp, #28]
 810b726:	4621      	mov	r1, r4
 810b728:	3b01      	subs	r3, #1
 810b72a:	4648      	mov	r0, r9
 810b72c:	9300      	str	r3, [sp, #0]
 810b72e:	f7ff fa9b 	bl	810ac68 <quorem>
 810b732:	4639      	mov	r1, r7
 810b734:	9002      	str	r0, [sp, #8]
 810b736:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b73a:	4648      	mov	r0, r9
 810b73c:	f000 fca4 	bl	810c088 <__mcmp>
 810b740:	462a      	mov	r2, r5
 810b742:	9008      	str	r0, [sp, #32]
 810b744:	4621      	mov	r1, r4
 810b746:	4658      	mov	r0, fp
 810b748:	f000 fcba 	bl	810c0c0 <__mdiff>
 810b74c:	68c2      	ldr	r2, [r0, #12]
 810b74e:	4606      	mov	r6, r0
 810b750:	bb02      	cbnz	r2, 810b794 <_dtoa_r+0xa1c>
 810b752:	4601      	mov	r1, r0
 810b754:	4648      	mov	r0, r9
 810b756:	f000 fc97 	bl	810c088 <__mcmp>
 810b75a:	4602      	mov	r2, r0
 810b75c:	4631      	mov	r1, r6
 810b75e:	4658      	mov	r0, fp
 810b760:	920e      	str	r2, [sp, #56]	@ 0x38
 810b762:	f000 fa0d 	bl	810bb80 <_Bfree>
 810b766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810b76a:	9e07      	ldr	r6, [sp, #28]
 810b76c:	ea43 0102 	orr.w	r1, r3, r2
 810b770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810b772:	4319      	orrs	r1, r3
 810b774:	d110      	bne.n	810b798 <_dtoa_r+0xa20>
 810b776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b77a:	d029      	beq.n	810b7d0 <_dtoa_r+0xa58>
 810b77c:	9b08      	ldr	r3, [sp, #32]
 810b77e:	2b00      	cmp	r3, #0
 810b780:	dd02      	ble.n	810b788 <_dtoa_r+0xa10>
 810b782:	9b02      	ldr	r3, [sp, #8]
 810b784:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 810b788:	9b00      	ldr	r3, [sp, #0]
 810b78a:	f883 8000 	strb.w	r8, [r3]
 810b78e:	e63f      	b.n	810b410 <_dtoa_r+0x698>
 810b790:	4628      	mov	r0, r5
 810b792:	e7bb      	b.n	810b70c <_dtoa_r+0x994>
 810b794:	2201      	movs	r2, #1
 810b796:	e7e1      	b.n	810b75c <_dtoa_r+0x9e4>
 810b798:	9b08      	ldr	r3, [sp, #32]
 810b79a:	2b00      	cmp	r3, #0
 810b79c:	db04      	blt.n	810b7a8 <_dtoa_r+0xa30>
 810b79e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810b7a0:	430b      	orrs	r3, r1
 810b7a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810b7a4:	430b      	orrs	r3, r1
 810b7a6:	d120      	bne.n	810b7ea <_dtoa_r+0xa72>
 810b7a8:	2a00      	cmp	r2, #0
 810b7aa:	dded      	ble.n	810b788 <_dtoa_r+0xa10>
 810b7ac:	4649      	mov	r1, r9
 810b7ae:	2201      	movs	r2, #1
 810b7b0:	4658      	mov	r0, fp
 810b7b2:	f000 fbfd 	bl	810bfb0 <__lshift>
 810b7b6:	4621      	mov	r1, r4
 810b7b8:	4681      	mov	r9, r0
 810b7ba:	f000 fc65 	bl	810c088 <__mcmp>
 810b7be:	2800      	cmp	r0, #0
 810b7c0:	dc03      	bgt.n	810b7ca <_dtoa_r+0xa52>
 810b7c2:	d1e1      	bne.n	810b788 <_dtoa_r+0xa10>
 810b7c4:	f018 0f01 	tst.w	r8, #1
 810b7c8:	d0de      	beq.n	810b788 <_dtoa_r+0xa10>
 810b7ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b7ce:	d1d8      	bne.n	810b782 <_dtoa_r+0xa0a>
 810b7d0:	9a00      	ldr	r2, [sp, #0]
 810b7d2:	2339      	movs	r3, #57	@ 0x39
 810b7d4:	7013      	strb	r3, [r2, #0]
 810b7d6:	4633      	mov	r3, r6
 810b7d8:	461e      	mov	r6, r3
 810b7da:	3b01      	subs	r3, #1
 810b7dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 810b7e0:	2a39      	cmp	r2, #57	@ 0x39
 810b7e2:	d052      	beq.n	810b88a <_dtoa_r+0xb12>
 810b7e4:	3201      	adds	r2, #1
 810b7e6:	701a      	strb	r2, [r3, #0]
 810b7e8:	e612      	b.n	810b410 <_dtoa_r+0x698>
 810b7ea:	2a00      	cmp	r2, #0
 810b7ec:	dd07      	ble.n	810b7fe <_dtoa_r+0xa86>
 810b7ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810b7f2:	d0ed      	beq.n	810b7d0 <_dtoa_r+0xa58>
 810b7f4:	9a00      	ldr	r2, [sp, #0]
 810b7f6:	f108 0301 	add.w	r3, r8, #1
 810b7fa:	7013      	strb	r3, [r2, #0]
 810b7fc:	e608      	b.n	810b410 <_dtoa_r+0x698>
 810b7fe:	9b07      	ldr	r3, [sp, #28]
 810b800:	9a07      	ldr	r2, [sp, #28]
 810b802:	f803 8c01 	strb.w	r8, [r3, #-1]
 810b806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810b808:	4293      	cmp	r3, r2
 810b80a:	d028      	beq.n	810b85e <_dtoa_r+0xae6>
 810b80c:	4649      	mov	r1, r9
 810b80e:	2300      	movs	r3, #0
 810b810:	220a      	movs	r2, #10
 810b812:	4658      	mov	r0, fp
 810b814:	f000 f9d6 	bl	810bbc4 <__multadd>
 810b818:	42af      	cmp	r7, r5
 810b81a:	4681      	mov	r9, r0
 810b81c:	f04f 0300 	mov.w	r3, #0
 810b820:	f04f 020a 	mov.w	r2, #10
 810b824:	4639      	mov	r1, r7
 810b826:	4658      	mov	r0, fp
 810b828:	d107      	bne.n	810b83a <_dtoa_r+0xac2>
 810b82a:	f000 f9cb 	bl	810bbc4 <__multadd>
 810b82e:	4607      	mov	r7, r0
 810b830:	4605      	mov	r5, r0
 810b832:	9b07      	ldr	r3, [sp, #28]
 810b834:	3301      	adds	r3, #1
 810b836:	9307      	str	r3, [sp, #28]
 810b838:	e774      	b.n	810b724 <_dtoa_r+0x9ac>
 810b83a:	f000 f9c3 	bl	810bbc4 <__multadd>
 810b83e:	4629      	mov	r1, r5
 810b840:	4607      	mov	r7, r0
 810b842:	2300      	movs	r3, #0
 810b844:	220a      	movs	r2, #10
 810b846:	4658      	mov	r0, fp
 810b848:	f000 f9bc 	bl	810bbc4 <__multadd>
 810b84c:	4605      	mov	r5, r0
 810b84e:	e7f0      	b.n	810b832 <_dtoa_r+0xaba>
 810b850:	9b00      	ldr	r3, [sp, #0]
 810b852:	2b00      	cmp	r3, #0
 810b854:	bfcc      	ite	gt
 810b856:	461e      	movgt	r6, r3
 810b858:	2601      	movle	r6, #1
 810b85a:	4456      	add	r6, sl
 810b85c:	2700      	movs	r7, #0
 810b85e:	4649      	mov	r1, r9
 810b860:	2201      	movs	r2, #1
 810b862:	4658      	mov	r0, fp
 810b864:	f000 fba4 	bl	810bfb0 <__lshift>
 810b868:	4621      	mov	r1, r4
 810b86a:	4681      	mov	r9, r0
 810b86c:	f000 fc0c 	bl	810c088 <__mcmp>
 810b870:	2800      	cmp	r0, #0
 810b872:	dcb0      	bgt.n	810b7d6 <_dtoa_r+0xa5e>
 810b874:	d102      	bne.n	810b87c <_dtoa_r+0xb04>
 810b876:	f018 0f01 	tst.w	r8, #1
 810b87a:	d1ac      	bne.n	810b7d6 <_dtoa_r+0xa5e>
 810b87c:	4633      	mov	r3, r6
 810b87e:	461e      	mov	r6, r3
 810b880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b884:	2a30      	cmp	r2, #48	@ 0x30
 810b886:	d0fa      	beq.n	810b87e <_dtoa_r+0xb06>
 810b888:	e5c2      	b.n	810b410 <_dtoa_r+0x698>
 810b88a:	459a      	cmp	sl, r3
 810b88c:	d1a4      	bne.n	810b7d8 <_dtoa_r+0xa60>
 810b88e:	9b04      	ldr	r3, [sp, #16]
 810b890:	3301      	adds	r3, #1
 810b892:	9304      	str	r3, [sp, #16]
 810b894:	2331      	movs	r3, #49	@ 0x31
 810b896:	f88a 3000 	strb.w	r3, [sl]
 810b89a:	e5b9      	b.n	810b410 <_dtoa_r+0x698>
 810b89c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 810b89e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810b8fc <_dtoa_r+0xb84>
 810b8a2:	b11b      	cbz	r3, 810b8ac <_dtoa_r+0xb34>
 810b8a4:	f10a 0308 	add.w	r3, sl, #8
 810b8a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 810b8aa:	6013      	str	r3, [r2, #0]
 810b8ac:	4650      	mov	r0, sl
 810b8ae:	b019      	add	sp, #100	@ 0x64
 810b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b8b6:	2b01      	cmp	r3, #1
 810b8b8:	f77f ae37 	ble.w	810b52a <_dtoa_r+0x7b2>
 810b8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810b8be:	930a      	str	r3, [sp, #40]	@ 0x28
 810b8c0:	2001      	movs	r0, #1
 810b8c2:	e655      	b.n	810b570 <_dtoa_r+0x7f8>
 810b8c4:	9b00      	ldr	r3, [sp, #0]
 810b8c6:	2b00      	cmp	r3, #0
 810b8c8:	f77f aed6 	ble.w	810b678 <_dtoa_r+0x900>
 810b8cc:	4656      	mov	r6, sl
 810b8ce:	4621      	mov	r1, r4
 810b8d0:	4648      	mov	r0, r9
 810b8d2:	f7ff f9c9 	bl	810ac68 <quorem>
 810b8d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810b8da:	f806 8b01 	strb.w	r8, [r6], #1
 810b8de:	9b00      	ldr	r3, [sp, #0]
 810b8e0:	eba6 020a 	sub.w	r2, r6, sl
 810b8e4:	4293      	cmp	r3, r2
 810b8e6:	ddb3      	ble.n	810b850 <_dtoa_r+0xad8>
 810b8e8:	4649      	mov	r1, r9
 810b8ea:	2300      	movs	r3, #0
 810b8ec:	220a      	movs	r2, #10
 810b8ee:	4658      	mov	r0, fp
 810b8f0:	f000 f968 	bl	810bbc4 <__multadd>
 810b8f4:	4681      	mov	r9, r0
 810b8f6:	e7ea      	b.n	810b8ce <_dtoa_r+0xb56>
 810b8f8:	0810eac1 	.word	0x0810eac1
 810b8fc:	0810ea45 	.word	0x0810ea45

0810b900 <_free_r>:
 810b900:	b538      	push	{r3, r4, r5, lr}
 810b902:	4605      	mov	r5, r0
 810b904:	2900      	cmp	r1, #0
 810b906:	d041      	beq.n	810b98c <_free_r+0x8c>
 810b908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b90c:	1f0c      	subs	r4, r1, #4
 810b90e:	2b00      	cmp	r3, #0
 810b910:	bfb8      	it	lt
 810b912:	18e4      	addlt	r4, r4, r3
 810b914:	f000 f8e8 	bl	810bae8 <__malloc_lock>
 810b918:	4a1d      	ldr	r2, [pc, #116]	@ (810b990 <_free_r+0x90>)
 810b91a:	6813      	ldr	r3, [r2, #0]
 810b91c:	b933      	cbnz	r3, 810b92c <_free_r+0x2c>
 810b91e:	6063      	str	r3, [r4, #4]
 810b920:	6014      	str	r4, [r2, #0]
 810b922:	4628      	mov	r0, r5
 810b924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b928:	f000 b8e4 	b.w	810baf4 <__malloc_unlock>
 810b92c:	42a3      	cmp	r3, r4
 810b92e:	d908      	bls.n	810b942 <_free_r+0x42>
 810b930:	6820      	ldr	r0, [r4, #0]
 810b932:	1821      	adds	r1, r4, r0
 810b934:	428b      	cmp	r3, r1
 810b936:	bf01      	itttt	eq
 810b938:	6819      	ldreq	r1, [r3, #0]
 810b93a:	685b      	ldreq	r3, [r3, #4]
 810b93c:	1809      	addeq	r1, r1, r0
 810b93e:	6021      	streq	r1, [r4, #0]
 810b940:	e7ed      	b.n	810b91e <_free_r+0x1e>
 810b942:	461a      	mov	r2, r3
 810b944:	685b      	ldr	r3, [r3, #4]
 810b946:	b10b      	cbz	r3, 810b94c <_free_r+0x4c>
 810b948:	42a3      	cmp	r3, r4
 810b94a:	d9fa      	bls.n	810b942 <_free_r+0x42>
 810b94c:	6811      	ldr	r1, [r2, #0]
 810b94e:	1850      	adds	r0, r2, r1
 810b950:	42a0      	cmp	r0, r4
 810b952:	d10b      	bne.n	810b96c <_free_r+0x6c>
 810b954:	6820      	ldr	r0, [r4, #0]
 810b956:	4401      	add	r1, r0
 810b958:	1850      	adds	r0, r2, r1
 810b95a:	4283      	cmp	r3, r0
 810b95c:	6011      	str	r1, [r2, #0]
 810b95e:	d1e0      	bne.n	810b922 <_free_r+0x22>
 810b960:	6818      	ldr	r0, [r3, #0]
 810b962:	685b      	ldr	r3, [r3, #4]
 810b964:	6053      	str	r3, [r2, #4]
 810b966:	4408      	add	r0, r1
 810b968:	6010      	str	r0, [r2, #0]
 810b96a:	e7da      	b.n	810b922 <_free_r+0x22>
 810b96c:	d902      	bls.n	810b974 <_free_r+0x74>
 810b96e:	230c      	movs	r3, #12
 810b970:	602b      	str	r3, [r5, #0]
 810b972:	e7d6      	b.n	810b922 <_free_r+0x22>
 810b974:	6820      	ldr	r0, [r4, #0]
 810b976:	1821      	adds	r1, r4, r0
 810b978:	428b      	cmp	r3, r1
 810b97a:	bf04      	itt	eq
 810b97c:	6819      	ldreq	r1, [r3, #0]
 810b97e:	685b      	ldreq	r3, [r3, #4]
 810b980:	6063      	str	r3, [r4, #4]
 810b982:	bf04      	itt	eq
 810b984:	1809      	addeq	r1, r1, r0
 810b986:	6021      	streq	r1, [r4, #0]
 810b988:	6054      	str	r4, [r2, #4]
 810b98a:	e7ca      	b.n	810b922 <_free_r+0x22>
 810b98c:	bd38      	pop	{r3, r4, r5, pc}
 810b98e:	bf00      	nop
 810b990:	100005f0 	.word	0x100005f0

0810b994 <malloc>:
 810b994:	4b02      	ldr	r3, [pc, #8]	@ (810b9a0 <malloc+0xc>)
 810b996:	4601      	mov	r1, r0
 810b998:	6818      	ldr	r0, [r3, #0]
 810b99a:	f000 b825 	b.w	810b9e8 <_malloc_r>
 810b99e:	bf00      	nop
 810b9a0:	1000005c 	.word	0x1000005c

0810b9a4 <sbrk_aligned>:
 810b9a4:	b570      	push	{r4, r5, r6, lr}
 810b9a6:	4e0f      	ldr	r6, [pc, #60]	@ (810b9e4 <sbrk_aligned+0x40>)
 810b9a8:	460c      	mov	r4, r1
 810b9aa:	6831      	ldr	r1, [r6, #0]
 810b9ac:	4605      	mov	r5, r0
 810b9ae:	b911      	cbnz	r1, 810b9b6 <sbrk_aligned+0x12>
 810b9b0:	f001 ffd2 	bl	810d958 <_sbrk_r>
 810b9b4:	6030      	str	r0, [r6, #0]
 810b9b6:	4621      	mov	r1, r4
 810b9b8:	4628      	mov	r0, r5
 810b9ba:	f001 ffcd 	bl	810d958 <_sbrk_r>
 810b9be:	1c43      	adds	r3, r0, #1
 810b9c0:	d103      	bne.n	810b9ca <sbrk_aligned+0x26>
 810b9c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 810b9c6:	4620      	mov	r0, r4
 810b9c8:	bd70      	pop	{r4, r5, r6, pc}
 810b9ca:	1cc4      	adds	r4, r0, #3
 810b9cc:	f024 0403 	bic.w	r4, r4, #3
 810b9d0:	42a0      	cmp	r0, r4
 810b9d2:	d0f8      	beq.n	810b9c6 <sbrk_aligned+0x22>
 810b9d4:	1a21      	subs	r1, r4, r0
 810b9d6:	4628      	mov	r0, r5
 810b9d8:	f001 ffbe 	bl	810d958 <_sbrk_r>
 810b9dc:	3001      	adds	r0, #1
 810b9de:	d1f2      	bne.n	810b9c6 <sbrk_aligned+0x22>
 810b9e0:	e7ef      	b.n	810b9c2 <sbrk_aligned+0x1e>
 810b9e2:	bf00      	nop
 810b9e4:	100005ec 	.word	0x100005ec

0810b9e8 <_malloc_r>:
 810b9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b9ec:	1ccd      	adds	r5, r1, #3
 810b9ee:	f025 0503 	bic.w	r5, r5, #3
 810b9f2:	3508      	adds	r5, #8
 810b9f4:	2d0c      	cmp	r5, #12
 810b9f6:	bf38      	it	cc
 810b9f8:	250c      	movcc	r5, #12
 810b9fa:	2d00      	cmp	r5, #0
 810b9fc:	4606      	mov	r6, r0
 810b9fe:	db01      	blt.n	810ba04 <_malloc_r+0x1c>
 810ba00:	42a9      	cmp	r1, r5
 810ba02:	d904      	bls.n	810ba0e <_malloc_r+0x26>
 810ba04:	230c      	movs	r3, #12
 810ba06:	6033      	str	r3, [r6, #0]
 810ba08:	2000      	movs	r0, #0
 810ba0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ba0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810bae4 <_malloc_r+0xfc>
 810ba12:	f000 f869 	bl	810bae8 <__malloc_lock>
 810ba16:	f8d8 3000 	ldr.w	r3, [r8]
 810ba1a:	461c      	mov	r4, r3
 810ba1c:	bb44      	cbnz	r4, 810ba70 <_malloc_r+0x88>
 810ba1e:	4629      	mov	r1, r5
 810ba20:	4630      	mov	r0, r6
 810ba22:	f7ff ffbf 	bl	810b9a4 <sbrk_aligned>
 810ba26:	1c43      	adds	r3, r0, #1
 810ba28:	4604      	mov	r4, r0
 810ba2a:	d158      	bne.n	810bade <_malloc_r+0xf6>
 810ba2c:	f8d8 4000 	ldr.w	r4, [r8]
 810ba30:	4627      	mov	r7, r4
 810ba32:	2f00      	cmp	r7, #0
 810ba34:	d143      	bne.n	810babe <_malloc_r+0xd6>
 810ba36:	2c00      	cmp	r4, #0
 810ba38:	d04b      	beq.n	810bad2 <_malloc_r+0xea>
 810ba3a:	6823      	ldr	r3, [r4, #0]
 810ba3c:	4639      	mov	r1, r7
 810ba3e:	4630      	mov	r0, r6
 810ba40:	eb04 0903 	add.w	r9, r4, r3
 810ba44:	f001 ff88 	bl	810d958 <_sbrk_r>
 810ba48:	4581      	cmp	r9, r0
 810ba4a:	d142      	bne.n	810bad2 <_malloc_r+0xea>
 810ba4c:	6821      	ldr	r1, [r4, #0]
 810ba4e:	1a6d      	subs	r5, r5, r1
 810ba50:	4629      	mov	r1, r5
 810ba52:	4630      	mov	r0, r6
 810ba54:	f7ff ffa6 	bl	810b9a4 <sbrk_aligned>
 810ba58:	3001      	adds	r0, #1
 810ba5a:	d03a      	beq.n	810bad2 <_malloc_r+0xea>
 810ba5c:	6823      	ldr	r3, [r4, #0]
 810ba5e:	442b      	add	r3, r5
 810ba60:	6023      	str	r3, [r4, #0]
 810ba62:	f8d8 3000 	ldr.w	r3, [r8]
 810ba66:	685a      	ldr	r2, [r3, #4]
 810ba68:	bb62      	cbnz	r2, 810bac4 <_malloc_r+0xdc>
 810ba6a:	f8c8 7000 	str.w	r7, [r8]
 810ba6e:	e00f      	b.n	810ba90 <_malloc_r+0xa8>
 810ba70:	6822      	ldr	r2, [r4, #0]
 810ba72:	1b52      	subs	r2, r2, r5
 810ba74:	d420      	bmi.n	810bab8 <_malloc_r+0xd0>
 810ba76:	2a0b      	cmp	r2, #11
 810ba78:	d917      	bls.n	810baaa <_malloc_r+0xc2>
 810ba7a:	1961      	adds	r1, r4, r5
 810ba7c:	42a3      	cmp	r3, r4
 810ba7e:	6025      	str	r5, [r4, #0]
 810ba80:	bf18      	it	ne
 810ba82:	6059      	strne	r1, [r3, #4]
 810ba84:	6863      	ldr	r3, [r4, #4]
 810ba86:	bf08      	it	eq
 810ba88:	f8c8 1000 	streq.w	r1, [r8]
 810ba8c:	5162      	str	r2, [r4, r5]
 810ba8e:	604b      	str	r3, [r1, #4]
 810ba90:	4630      	mov	r0, r6
 810ba92:	f000 f82f 	bl	810baf4 <__malloc_unlock>
 810ba96:	f104 000b 	add.w	r0, r4, #11
 810ba9a:	1d23      	adds	r3, r4, #4
 810ba9c:	f020 0007 	bic.w	r0, r0, #7
 810baa0:	1ac2      	subs	r2, r0, r3
 810baa2:	bf1c      	itt	ne
 810baa4:	1a1b      	subne	r3, r3, r0
 810baa6:	50a3      	strne	r3, [r4, r2]
 810baa8:	e7af      	b.n	810ba0a <_malloc_r+0x22>
 810baaa:	6862      	ldr	r2, [r4, #4]
 810baac:	42a3      	cmp	r3, r4
 810baae:	bf0c      	ite	eq
 810bab0:	f8c8 2000 	streq.w	r2, [r8]
 810bab4:	605a      	strne	r2, [r3, #4]
 810bab6:	e7eb      	b.n	810ba90 <_malloc_r+0xa8>
 810bab8:	4623      	mov	r3, r4
 810baba:	6864      	ldr	r4, [r4, #4]
 810babc:	e7ae      	b.n	810ba1c <_malloc_r+0x34>
 810babe:	463c      	mov	r4, r7
 810bac0:	687f      	ldr	r7, [r7, #4]
 810bac2:	e7b6      	b.n	810ba32 <_malloc_r+0x4a>
 810bac4:	461a      	mov	r2, r3
 810bac6:	685b      	ldr	r3, [r3, #4]
 810bac8:	42a3      	cmp	r3, r4
 810baca:	d1fb      	bne.n	810bac4 <_malloc_r+0xdc>
 810bacc:	2300      	movs	r3, #0
 810bace:	6053      	str	r3, [r2, #4]
 810bad0:	e7de      	b.n	810ba90 <_malloc_r+0xa8>
 810bad2:	230c      	movs	r3, #12
 810bad4:	6033      	str	r3, [r6, #0]
 810bad6:	4630      	mov	r0, r6
 810bad8:	f000 f80c 	bl	810baf4 <__malloc_unlock>
 810badc:	e794      	b.n	810ba08 <_malloc_r+0x20>
 810bade:	6005      	str	r5, [r0, #0]
 810bae0:	e7d6      	b.n	810ba90 <_malloc_r+0xa8>
 810bae2:	bf00      	nop
 810bae4:	100005f0 	.word	0x100005f0

0810bae8 <__malloc_lock>:
 810bae8:	4801      	ldr	r0, [pc, #4]	@ (810baf0 <__malloc_lock+0x8>)
 810baea:	f7ff b8a6 	b.w	810ac3a <__retarget_lock_acquire_recursive>
 810baee:	bf00      	nop
 810baf0:	100005e8 	.word	0x100005e8

0810baf4 <__malloc_unlock>:
 810baf4:	4801      	ldr	r0, [pc, #4]	@ (810bafc <__malloc_unlock+0x8>)
 810baf6:	f7ff b8a1 	b.w	810ac3c <__retarget_lock_release_recursive>
 810bafa:	bf00      	nop
 810bafc:	100005e8 	.word	0x100005e8

0810bb00 <_Balloc>:
 810bb00:	b570      	push	{r4, r5, r6, lr}
 810bb02:	69c6      	ldr	r6, [r0, #28]
 810bb04:	4604      	mov	r4, r0
 810bb06:	460d      	mov	r5, r1
 810bb08:	b976      	cbnz	r6, 810bb28 <_Balloc+0x28>
 810bb0a:	2010      	movs	r0, #16
 810bb0c:	f7ff ff42 	bl	810b994 <malloc>
 810bb10:	4602      	mov	r2, r0
 810bb12:	61e0      	str	r0, [r4, #28]
 810bb14:	b920      	cbnz	r0, 810bb20 <_Balloc+0x20>
 810bb16:	4b18      	ldr	r3, [pc, #96]	@ (810bb78 <_Balloc+0x78>)
 810bb18:	4818      	ldr	r0, [pc, #96]	@ (810bb7c <_Balloc+0x7c>)
 810bb1a:	216b      	movs	r1, #107	@ 0x6b
 810bb1c:	f001 ff34 	bl	810d988 <__assert_func>
 810bb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bb24:	6006      	str	r6, [r0, #0]
 810bb26:	60c6      	str	r6, [r0, #12]
 810bb28:	69e6      	ldr	r6, [r4, #28]
 810bb2a:	68f3      	ldr	r3, [r6, #12]
 810bb2c:	b183      	cbz	r3, 810bb50 <_Balloc+0x50>
 810bb2e:	69e3      	ldr	r3, [r4, #28]
 810bb30:	68db      	ldr	r3, [r3, #12]
 810bb32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810bb36:	b9b8      	cbnz	r0, 810bb68 <_Balloc+0x68>
 810bb38:	2101      	movs	r1, #1
 810bb3a:	fa01 f605 	lsl.w	r6, r1, r5
 810bb3e:	1d72      	adds	r2, r6, #5
 810bb40:	0092      	lsls	r2, r2, #2
 810bb42:	4620      	mov	r0, r4
 810bb44:	f001 ff3e 	bl	810d9c4 <_calloc_r>
 810bb48:	b160      	cbz	r0, 810bb64 <_Balloc+0x64>
 810bb4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810bb4e:	e00e      	b.n	810bb6e <_Balloc+0x6e>
 810bb50:	2221      	movs	r2, #33	@ 0x21
 810bb52:	2104      	movs	r1, #4
 810bb54:	4620      	mov	r0, r4
 810bb56:	f001 ff35 	bl	810d9c4 <_calloc_r>
 810bb5a:	69e3      	ldr	r3, [r4, #28]
 810bb5c:	60f0      	str	r0, [r6, #12]
 810bb5e:	68db      	ldr	r3, [r3, #12]
 810bb60:	2b00      	cmp	r3, #0
 810bb62:	d1e4      	bne.n	810bb2e <_Balloc+0x2e>
 810bb64:	2000      	movs	r0, #0
 810bb66:	bd70      	pop	{r4, r5, r6, pc}
 810bb68:	6802      	ldr	r2, [r0, #0]
 810bb6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810bb6e:	2300      	movs	r3, #0
 810bb70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810bb74:	e7f7      	b.n	810bb66 <_Balloc+0x66>
 810bb76:	bf00      	nop
 810bb78:	0810ea52 	.word	0x0810ea52
 810bb7c:	0810ead2 	.word	0x0810ead2

0810bb80 <_Bfree>:
 810bb80:	b570      	push	{r4, r5, r6, lr}
 810bb82:	69c6      	ldr	r6, [r0, #28]
 810bb84:	4605      	mov	r5, r0
 810bb86:	460c      	mov	r4, r1
 810bb88:	b976      	cbnz	r6, 810bba8 <_Bfree+0x28>
 810bb8a:	2010      	movs	r0, #16
 810bb8c:	f7ff ff02 	bl	810b994 <malloc>
 810bb90:	4602      	mov	r2, r0
 810bb92:	61e8      	str	r0, [r5, #28]
 810bb94:	b920      	cbnz	r0, 810bba0 <_Bfree+0x20>
 810bb96:	4b09      	ldr	r3, [pc, #36]	@ (810bbbc <_Bfree+0x3c>)
 810bb98:	4809      	ldr	r0, [pc, #36]	@ (810bbc0 <_Bfree+0x40>)
 810bb9a:	218f      	movs	r1, #143	@ 0x8f
 810bb9c:	f001 fef4 	bl	810d988 <__assert_func>
 810bba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bba4:	6006      	str	r6, [r0, #0]
 810bba6:	60c6      	str	r6, [r0, #12]
 810bba8:	b13c      	cbz	r4, 810bbba <_Bfree+0x3a>
 810bbaa:	69eb      	ldr	r3, [r5, #28]
 810bbac:	6862      	ldr	r2, [r4, #4]
 810bbae:	68db      	ldr	r3, [r3, #12]
 810bbb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810bbb4:	6021      	str	r1, [r4, #0]
 810bbb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810bbba:	bd70      	pop	{r4, r5, r6, pc}
 810bbbc:	0810ea52 	.word	0x0810ea52
 810bbc0:	0810ead2 	.word	0x0810ead2

0810bbc4 <__multadd>:
 810bbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bbc8:	690d      	ldr	r5, [r1, #16]
 810bbca:	4607      	mov	r7, r0
 810bbcc:	460c      	mov	r4, r1
 810bbce:	461e      	mov	r6, r3
 810bbd0:	f101 0c14 	add.w	ip, r1, #20
 810bbd4:	2000      	movs	r0, #0
 810bbd6:	f8dc 3000 	ldr.w	r3, [ip]
 810bbda:	b299      	uxth	r1, r3
 810bbdc:	fb02 6101 	mla	r1, r2, r1, r6
 810bbe0:	0c1e      	lsrs	r6, r3, #16
 810bbe2:	0c0b      	lsrs	r3, r1, #16
 810bbe4:	fb02 3306 	mla	r3, r2, r6, r3
 810bbe8:	b289      	uxth	r1, r1
 810bbea:	3001      	adds	r0, #1
 810bbec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810bbf0:	4285      	cmp	r5, r0
 810bbf2:	f84c 1b04 	str.w	r1, [ip], #4
 810bbf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810bbfa:	dcec      	bgt.n	810bbd6 <__multadd+0x12>
 810bbfc:	b30e      	cbz	r6, 810bc42 <__multadd+0x7e>
 810bbfe:	68a3      	ldr	r3, [r4, #8]
 810bc00:	42ab      	cmp	r3, r5
 810bc02:	dc19      	bgt.n	810bc38 <__multadd+0x74>
 810bc04:	6861      	ldr	r1, [r4, #4]
 810bc06:	4638      	mov	r0, r7
 810bc08:	3101      	adds	r1, #1
 810bc0a:	f7ff ff79 	bl	810bb00 <_Balloc>
 810bc0e:	4680      	mov	r8, r0
 810bc10:	b928      	cbnz	r0, 810bc1e <__multadd+0x5a>
 810bc12:	4602      	mov	r2, r0
 810bc14:	4b0c      	ldr	r3, [pc, #48]	@ (810bc48 <__multadd+0x84>)
 810bc16:	480d      	ldr	r0, [pc, #52]	@ (810bc4c <__multadd+0x88>)
 810bc18:	21ba      	movs	r1, #186	@ 0xba
 810bc1a:	f001 feb5 	bl	810d988 <__assert_func>
 810bc1e:	6922      	ldr	r2, [r4, #16]
 810bc20:	3202      	adds	r2, #2
 810bc22:	f104 010c 	add.w	r1, r4, #12
 810bc26:	0092      	lsls	r2, r2, #2
 810bc28:	300c      	adds	r0, #12
 810bc2a:	f7ff f808 	bl	810ac3e <memcpy>
 810bc2e:	4621      	mov	r1, r4
 810bc30:	4638      	mov	r0, r7
 810bc32:	f7ff ffa5 	bl	810bb80 <_Bfree>
 810bc36:	4644      	mov	r4, r8
 810bc38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810bc3c:	3501      	adds	r5, #1
 810bc3e:	615e      	str	r6, [r3, #20]
 810bc40:	6125      	str	r5, [r4, #16]
 810bc42:	4620      	mov	r0, r4
 810bc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bc48:	0810eac1 	.word	0x0810eac1
 810bc4c:	0810ead2 	.word	0x0810ead2

0810bc50 <__s2b>:
 810bc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bc54:	460c      	mov	r4, r1
 810bc56:	4615      	mov	r5, r2
 810bc58:	461f      	mov	r7, r3
 810bc5a:	2209      	movs	r2, #9
 810bc5c:	3308      	adds	r3, #8
 810bc5e:	4606      	mov	r6, r0
 810bc60:	fb93 f3f2 	sdiv	r3, r3, r2
 810bc64:	2100      	movs	r1, #0
 810bc66:	2201      	movs	r2, #1
 810bc68:	429a      	cmp	r2, r3
 810bc6a:	db09      	blt.n	810bc80 <__s2b+0x30>
 810bc6c:	4630      	mov	r0, r6
 810bc6e:	f7ff ff47 	bl	810bb00 <_Balloc>
 810bc72:	b940      	cbnz	r0, 810bc86 <__s2b+0x36>
 810bc74:	4602      	mov	r2, r0
 810bc76:	4b19      	ldr	r3, [pc, #100]	@ (810bcdc <__s2b+0x8c>)
 810bc78:	4819      	ldr	r0, [pc, #100]	@ (810bce0 <__s2b+0x90>)
 810bc7a:	21d3      	movs	r1, #211	@ 0xd3
 810bc7c:	f001 fe84 	bl	810d988 <__assert_func>
 810bc80:	0052      	lsls	r2, r2, #1
 810bc82:	3101      	adds	r1, #1
 810bc84:	e7f0      	b.n	810bc68 <__s2b+0x18>
 810bc86:	9b08      	ldr	r3, [sp, #32]
 810bc88:	6143      	str	r3, [r0, #20]
 810bc8a:	2d09      	cmp	r5, #9
 810bc8c:	f04f 0301 	mov.w	r3, #1
 810bc90:	6103      	str	r3, [r0, #16]
 810bc92:	dd16      	ble.n	810bcc2 <__s2b+0x72>
 810bc94:	f104 0909 	add.w	r9, r4, #9
 810bc98:	46c8      	mov	r8, r9
 810bc9a:	442c      	add	r4, r5
 810bc9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bca0:	4601      	mov	r1, r0
 810bca2:	3b30      	subs	r3, #48	@ 0x30
 810bca4:	220a      	movs	r2, #10
 810bca6:	4630      	mov	r0, r6
 810bca8:	f7ff ff8c 	bl	810bbc4 <__multadd>
 810bcac:	45a0      	cmp	r8, r4
 810bcae:	d1f5      	bne.n	810bc9c <__s2b+0x4c>
 810bcb0:	f1a5 0408 	sub.w	r4, r5, #8
 810bcb4:	444c      	add	r4, r9
 810bcb6:	1b2d      	subs	r5, r5, r4
 810bcb8:	1963      	adds	r3, r4, r5
 810bcba:	42bb      	cmp	r3, r7
 810bcbc:	db04      	blt.n	810bcc8 <__s2b+0x78>
 810bcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bcc2:	340a      	adds	r4, #10
 810bcc4:	2509      	movs	r5, #9
 810bcc6:	e7f6      	b.n	810bcb6 <__s2b+0x66>
 810bcc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 810bccc:	4601      	mov	r1, r0
 810bcce:	3b30      	subs	r3, #48	@ 0x30
 810bcd0:	220a      	movs	r2, #10
 810bcd2:	4630      	mov	r0, r6
 810bcd4:	f7ff ff76 	bl	810bbc4 <__multadd>
 810bcd8:	e7ee      	b.n	810bcb8 <__s2b+0x68>
 810bcda:	bf00      	nop
 810bcdc:	0810eac1 	.word	0x0810eac1
 810bce0:	0810ead2 	.word	0x0810ead2

0810bce4 <__hi0bits>:
 810bce4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810bce8:	4603      	mov	r3, r0
 810bcea:	bf36      	itet	cc
 810bcec:	0403      	lslcc	r3, r0, #16
 810bcee:	2000      	movcs	r0, #0
 810bcf0:	2010      	movcc	r0, #16
 810bcf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810bcf6:	bf3c      	itt	cc
 810bcf8:	021b      	lslcc	r3, r3, #8
 810bcfa:	3008      	addcc	r0, #8
 810bcfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810bd00:	bf3c      	itt	cc
 810bd02:	011b      	lslcc	r3, r3, #4
 810bd04:	3004      	addcc	r0, #4
 810bd06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810bd0a:	bf3c      	itt	cc
 810bd0c:	009b      	lslcc	r3, r3, #2
 810bd0e:	3002      	addcc	r0, #2
 810bd10:	2b00      	cmp	r3, #0
 810bd12:	db05      	blt.n	810bd20 <__hi0bits+0x3c>
 810bd14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810bd18:	f100 0001 	add.w	r0, r0, #1
 810bd1c:	bf08      	it	eq
 810bd1e:	2020      	moveq	r0, #32
 810bd20:	4770      	bx	lr

0810bd22 <__lo0bits>:
 810bd22:	6803      	ldr	r3, [r0, #0]
 810bd24:	4602      	mov	r2, r0
 810bd26:	f013 0007 	ands.w	r0, r3, #7
 810bd2a:	d00b      	beq.n	810bd44 <__lo0bits+0x22>
 810bd2c:	07d9      	lsls	r1, r3, #31
 810bd2e:	d421      	bmi.n	810bd74 <__lo0bits+0x52>
 810bd30:	0798      	lsls	r0, r3, #30
 810bd32:	bf49      	itett	mi
 810bd34:	085b      	lsrmi	r3, r3, #1
 810bd36:	089b      	lsrpl	r3, r3, #2
 810bd38:	2001      	movmi	r0, #1
 810bd3a:	6013      	strmi	r3, [r2, #0]
 810bd3c:	bf5c      	itt	pl
 810bd3e:	6013      	strpl	r3, [r2, #0]
 810bd40:	2002      	movpl	r0, #2
 810bd42:	4770      	bx	lr
 810bd44:	b299      	uxth	r1, r3
 810bd46:	b909      	cbnz	r1, 810bd4c <__lo0bits+0x2a>
 810bd48:	0c1b      	lsrs	r3, r3, #16
 810bd4a:	2010      	movs	r0, #16
 810bd4c:	b2d9      	uxtb	r1, r3
 810bd4e:	b909      	cbnz	r1, 810bd54 <__lo0bits+0x32>
 810bd50:	3008      	adds	r0, #8
 810bd52:	0a1b      	lsrs	r3, r3, #8
 810bd54:	0719      	lsls	r1, r3, #28
 810bd56:	bf04      	itt	eq
 810bd58:	091b      	lsreq	r3, r3, #4
 810bd5a:	3004      	addeq	r0, #4
 810bd5c:	0799      	lsls	r1, r3, #30
 810bd5e:	bf04      	itt	eq
 810bd60:	089b      	lsreq	r3, r3, #2
 810bd62:	3002      	addeq	r0, #2
 810bd64:	07d9      	lsls	r1, r3, #31
 810bd66:	d403      	bmi.n	810bd70 <__lo0bits+0x4e>
 810bd68:	085b      	lsrs	r3, r3, #1
 810bd6a:	f100 0001 	add.w	r0, r0, #1
 810bd6e:	d003      	beq.n	810bd78 <__lo0bits+0x56>
 810bd70:	6013      	str	r3, [r2, #0]
 810bd72:	4770      	bx	lr
 810bd74:	2000      	movs	r0, #0
 810bd76:	4770      	bx	lr
 810bd78:	2020      	movs	r0, #32
 810bd7a:	4770      	bx	lr

0810bd7c <__i2b>:
 810bd7c:	b510      	push	{r4, lr}
 810bd7e:	460c      	mov	r4, r1
 810bd80:	2101      	movs	r1, #1
 810bd82:	f7ff febd 	bl	810bb00 <_Balloc>
 810bd86:	4602      	mov	r2, r0
 810bd88:	b928      	cbnz	r0, 810bd96 <__i2b+0x1a>
 810bd8a:	4b05      	ldr	r3, [pc, #20]	@ (810bda0 <__i2b+0x24>)
 810bd8c:	4805      	ldr	r0, [pc, #20]	@ (810bda4 <__i2b+0x28>)
 810bd8e:	f240 1145 	movw	r1, #325	@ 0x145
 810bd92:	f001 fdf9 	bl	810d988 <__assert_func>
 810bd96:	2301      	movs	r3, #1
 810bd98:	6144      	str	r4, [r0, #20]
 810bd9a:	6103      	str	r3, [r0, #16]
 810bd9c:	bd10      	pop	{r4, pc}
 810bd9e:	bf00      	nop
 810bda0:	0810eac1 	.word	0x0810eac1
 810bda4:	0810ead2 	.word	0x0810ead2

0810bda8 <__multiply>:
 810bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bdac:	4614      	mov	r4, r2
 810bdae:	690a      	ldr	r2, [r1, #16]
 810bdb0:	6923      	ldr	r3, [r4, #16]
 810bdb2:	429a      	cmp	r2, r3
 810bdb4:	bfa8      	it	ge
 810bdb6:	4623      	movge	r3, r4
 810bdb8:	460f      	mov	r7, r1
 810bdba:	bfa4      	itt	ge
 810bdbc:	460c      	movge	r4, r1
 810bdbe:	461f      	movge	r7, r3
 810bdc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 810bdc4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 810bdc8:	68a3      	ldr	r3, [r4, #8]
 810bdca:	6861      	ldr	r1, [r4, #4]
 810bdcc:	eb0a 0609 	add.w	r6, sl, r9
 810bdd0:	42b3      	cmp	r3, r6
 810bdd2:	b085      	sub	sp, #20
 810bdd4:	bfb8      	it	lt
 810bdd6:	3101      	addlt	r1, #1
 810bdd8:	f7ff fe92 	bl	810bb00 <_Balloc>
 810bddc:	b930      	cbnz	r0, 810bdec <__multiply+0x44>
 810bdde:	4602      	mov	r2, r0
 810bde0:	4b44      	ldr	r3, [pc, #272]	@ (810bef4 <__multiply+0x14c>)
 810bde2:	4845      	ldr	r0, [pc, #276]	@ (810bef8 <__multiply+0x150>)
 810bde4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810bde8:	f001 fdce 	bl	810d988 <__assert_func>
 810bdec:	f100 0514 	add.w	r5, r0, #20
 810bdf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bdf4:	462b      	mov	r3, r5
 810bdf6:	2200      	movs	r2, #0
 810bdf8:	4543      	cmp	r3, r8
 810bdfa:	d321      	bcc.n	810be40 <__multiply+0x98>
 810bdfc:	f107 0114 	add.w	r1, r7, #20
 810be00:	f104 0214 	add.w	r2, r4, #20
 810be04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810be08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 810be0c:	9302      	str	r3, [sp, #8]
 810be0e:	1b13      	subs	r3, r2, r4
 810be10:	3b15      	subs	r3, #21
 810be12:	f023 0303 	bic.w	r3, r3, #3
 810be16:	3304      	adds	r3, #4
 810be18:	f104 0715 	add.w	r7, r4, #21
 810be1c:	42ba      	cmp	r2, r7
 810be1e:	bf38      	it	cc
 810be20:	2304      	movcc	r3, #4
 810be22:	9301      	str	r3, [sp, #4]
 810be24:	9b02      	ldr	r3, [sp, #8]
 810be26:	9103      	str	r1, [sp, #12]
 810be28:	428b      	cmp	r3, r1
 810be2a:	d80c      	bhi.n	810be46 <__multiply+0x9e>
 810be2c:	2e00      	cmp	r6, #0
 810be2e:	dd03      	ble.n	810be38 <__multiply+0x90>
 810be30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810be34:	2b00      	cmp	r3, #0
 810be36:	d05b      	beq.n	810bef0 <__multiply+0x148>
 810be38:	6106      	str	r6, [r0, #16]
 810be3a:	b005      	add	sp, #20
 810be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810be40:	f843 2b04 	str.w	r2, [r3], #4
 810be44:	e7d8      	b.n	810bdf8 <__multiply+0x50>
 810be46:	f8b1 a000 	ldrh.w	sl, [r1]
 810be4a:	f1ba 0f00 	cmp.w	sl, #0
 810be4e:	d024      	beq.n	810be9a <__multiply+0xf2>
 810be50:	f104 0e14 	add.w	lr, r4, #20
 810be54:	46a9      	mov	r9, r5
 810be56:	f04f 0c00 	mov.w	ip, #0
 810be5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810be5e:	f8d9 3000 	ldr.w	r3, [r9]
 810be62:	fa1f fb87 	uxth.w	fp, r7
 810be66:	b29b      	uxth	r3, r3
 810be68:	fb0a 330b 	mla	r3, sl, fp, r3
 810be6c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 810be70:	f8d9 7000 	ldr.w	r7, [r9]
 810be74:	4463      	add	r3, ip
 810be76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810be7a:	fb0a c70b 	mla	r7, sl, fp, ip
 810be7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810be82:	b29b      	uxth	r3, r3
 810be84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810be88:	4572      	cmp	r2, lr
 810be8a:	f849 3b04 	str.w	r3, [r9], #4
 810be8e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 810be92:	d8e2      	bhi.n	810be5a <__multiply+0xb2>
 810be94:	9b01      	ldr	r3, [sp, #4]
 810be96:	f845 c003 	str.w	ip, [r5, r3]
 810be9a:	9b03      	ldr	r3, [sp, #12]
 810be9c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 810bea0:	3104      	adds	r1, #4
 810bea2:	f1b9 0f00 	cmp.w	r9, #0
 810bea6:	d021      	beq.n	810beec <__multiply+0x144>
 810bea8:	682b      	ldr	r3, [r5, #0]
 810beaa:	f104 0c14 	add.w	ip, r4, #20
 810beae:	46ae      	mov	lr, r5
 810beb0:	f04f 0a00 	mov.w	sl, #0
 810beb4:	f8bc b000 	ldrh.w	fp, [ip]
 810beb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 810bebc:	fb09 770b 	mla	r7, r9, fp, r7
 810bec0:	4457      	add	r7, sl
 810bec2:	b29b      	uxth	r3, r3
 810bec4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 810bec8:	f84e 3b04 	str.w	r3, [lr], #4
 810becc:	f85c 3b04 	ldr.w	r3, [ip], #4
 810bed0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bed4:	f8be 3000 	ldrh.w	r3, [lr]
 810bed8:	fb09 330a 	mla	r3, r9, sl, r3
 810bedc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 810bee0:	4562      	cmp	r2, ip
 810bee2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810bee6:	d8e5      	bhi.n	810beb4 <__multiply+0x10c>
 810bee8:	9f01      	ldr	r7, [sp, #4]
 810beea:	51eb      	str	r3, [r5, r7]
 810beec:	3504      	adds	r5, #4
 810beee:	e799      	b.n	810be24 <__multiply+0x7c>
 810bef0:	3e01      	subs	r6, #1
 810bef2:	e79b      	b.n	810be2c <__multiply+0x84>
 810bef4:	0810eac1 	.word	0x0810eac1
 810bef8:	0810ead2 	.word	0x0810ead2

0810befc <__pow5mult>:
 810befc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bf00:	4615      	mov	r5, r2
 810bf02:	f012 0203 	ands.w	r2, r2, #3
 810bf06:	4607      	mov	r7, r0
 810bf08:	460e      	mov	r6, r1
 810bf0a:	d007      	beq.n	810bf1c <__pow5mult+0x20>
 810bf0c:	4c25      	ldr	r4, [pc, #148]	@ (810bfa4 <__pow5mult+0xa8>)
 810bf0e:	3a01      	subs	r2, #1
 810bf10:	2300      	movs	r3, #0
 810bf12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810bf16:	f7ff fe55 	bl	810bbc4 <__multadd>
 810bf1a:	4606      	mov	r6, r0
 810bf1c:	10ad      	asrs	r5, r5, #2
 810bf1e:	d03d      	beq.n	810bf9c <__pow5mult+0xa0>
 810bf20:	69fc      	ldr	r4, [r7, #28]
 810bf22:	b97c      	cbnz	r4, 810bf44 <__pow5mult+0x48>
 810bf24:	2010      	movs	r0, #16
 810bf26:	f7ff fd35 	bl	810b994 <malloc>
 810bf2a:	4602      	mov	r2, r0
 810bf2c:	61f8      	str	r0, [r7, #28]
 810bf2e:	b928      	cbnz	r0, 810bf3c <__pow5mult+0x40>
 810bf30:	4b1d      	ldr	r3, [pc, #116]	@ (810bfa8 <__pow5mult+0xac>)
 810bf32:	481e      	ldr	r0, [pc, #120]	@ (810bfac <__pow5mult+0xb0>)
 810bf34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810bf38:	f001 fd26 	bl	810d988 <__assert_func>
 810bf3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810bf40:	6004      	str	r4, [r0, #0]
 810bf42:	60c4      	str	r4, [r0, #12]
 810bf44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810bf48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810bf4c:	b94c      	cbnz	r4, 810bf62 <__pow5mult+0x66>
 810bf4e:	f240 2171 	movw	r1, #625	@ 0x271
 810bf52:	4638      	mov	r0, r7
 810bf54:	f7ff ff12 	bl	810bd7c <__i2b>
 810bf58:	2300      	movs	r3, #0
 810bf5a:	f8c8 0008 	str.w	r0, [r8, #8]
 810bf5e:	4604      	mov	r4, r0
 810bf60:	6003      	str	r3, [r0, #0]
 810bf62:	f04f 0900 	mov.w	r9, #0
 810bf66:	07eb      	lsls	r3, r5, #31
 810bf68:	d50a      	bpl.n	810bf80 <__pow5mult+0x84>
 810bf6a:	4631      	mov	r1, r6
 810bf6c:	4622      	mov	r2, r4
 810bf6e:	4638      	mov	r0, r7
 810bf70:	f7ff ff1a 	bl	810bda8 <__multiply>
 810bf74:	4631      	mov	r1, r6
 810bf76:	4680      	mov	r8, r0
 810bf78:	4638      	mov	r0, r7
 810bf7a:	f7ff fe01 	bl	810bb80 <_Bfree>
 810bf7e:	4646      	mov	r6, r8
 810bf80:	106d      	asrs	r5, r5, #1
 810bf82:	d00b      	beq.n	810bf9c <__pow5mult+0xa0>
 810bf84:	6820      	ldr	r0, [r4, #0]
 810bf86:	b938      	cbnz	r0, 810bf98 <__pow5mult+0x9c>
 810bf88:	4622      	mov	r2, r4
 810bf8a:	4621      	mov	r1, r4
 810bf8c:	4638      	mov	r0, r7
 810bf8e:	f7ff ff0b 	bl	810bda8 <__multiply>
 810bf92:	6020      	str	r0, [r4, #0]
 810bf94:	f8c0 9000 	str.w	r9, [r0]
 810bf98:	4604      	mov	r4, r0
 810bf9a:	e7e4      	b.n	810bf66 <__pow5mult+0x6a>
 810bf9c:	4630      	mov	r0, r6
 810bf9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bfa2:	bf00      	nop
 810bfa4:	0810eb2c 	.word	0x0810eb2c
 810bfa8:	0810ea52 	.word	0x0810ea52
 810bfac:	0810ead2 	.word	0x0810ead2

0810bfb0 <__lshift>:
 810bfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bfb4:	460c      	mov	r4, r1
 810bfb6:	6849      	ldr	r1, [r1, #4]
 810bfb8:	6923      	ldr	r3, [r4, #16]
 810bfba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810bfbe:	68a3      	ldr	r3, [r4, #8]
 810bfc0:	4607      	mov	r7, r0
 810bfc2:	4691      	mov	r9, r2
 810bfc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810bfc8:	f108 0601 	add.w	r6, r8, #1
 810bfcc:	42b3      	cmp	r3, r6
 810bfce:	db0b      	blt.n	810bfe8 <__lshift+0x38>
 810bfd0:	4638      	mov	r0, r7
 810bfd2:	f7ff fd95 	bl	810bb00 <_Balloc>
 810bfd6:	4605      	mov	r5, r0
 810bfd8:	b948      	cbnz	r0, 810bfee <__lshift+0x3e>
 810bfda:	4602      	mov	r2, r0
 810bfdc:	4b28      	ldr	r3, [pc, #160]	@ (810c080 <__lshift+0xd0>)
 810bfde:	4829      	ldr	r0, [pc, #164]	@ (810c084 <__lshift+0xd4>)
 810bfe0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 810bfe4:	f001 fcd0 	bl	810d988 <__assert_func>
 810bfe8:	3101      	adds	r1, #1
 810bfea:	005b      	lsls	r3, r3, #1
 810bfec:	e7ee      	b.n	810bfcc <__lshift+0x1c>
 810bfee:	2300      	movs	r3, #0
 810bff0:	f100 0114 	add.w	r1, r0, #20
 810bff4:	f100 0210 	add.w	r2, r0, #16
 810bff8:	4618      	mov	r0, r3
 810bffa:	4553      	cmp	r3, sl
 810bffc:	db33      	blt.n	810c066 <__lshift+0xb6>
 810bffe:	6920      	ldr	r0, [r4, #16]
 810c000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c004:	f104 0314 	add.w	r3, r4, #20
 810c008:	f019 091f 	ands.w	r9, r9, #31
 810c00c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c010:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c014:	d02b      	beq.n	810c06e <__lshift+0xbe>
 810c016:	f1c9 0e20 	rsb	lr, r9, #32
 810c01a:	468a      	mov	sl, r1
 810c01c:	2200      	movs	r2, #0
 810c01e:	6818      	ldr	r0, [r3, #0]
 810c020:	fa00 f009 	lsl.w	r0, r0, r9
 810c024:	4310      	orrs	r0, r2
 810c026:	f84a 0b04 	str.w	r0, [sl], #4
 810c02a:	f853 2b04 	ldr.w	r2, [r3], #4
 810c02e:	459c      	cmp	ip, r3
 810c030:	fa22 f20e 	lsr.w	r2, r2, lr
 810c034:	d8f3      	bhi.n	810c01e <__lshift+0x6e>
 810c036:	ebac 0304 	sub.w	r3, ip, r4
 810c03a:	3b15      	subs	r3, #21
 810c03c:	f023 0303 	bic.w	r3, r3, #3
 810c040:	3304      	adds	r3, #4
 810c042:	f104 0015 	add.w	r0, r4, #21
 810c046:	4584      	cmp	ip, r0
 810c048:	bf38      	it	cc
 810c04a:	2304      	movcc	r3, #4
 810c04c:	50ca      	str	r2, [r1, r3]
 810c04e:	b10a      	cbz	r2, 810c054 <__lshift+0xa4>
 810c050:	f108 0602 	add.w	r6, r8, #2
 810c054:	3e01      	subs	r6, #1
 810c056:	4638      	mov	r0, r7
 810c058:	612e      	str	r6, [r5, #16]
 810c05a:	4621      	mov	r1, r4
 810c05c:	f7ff fd90 	bl	810bb80 <_Bfree>
 810c060:	4628      	mov	r0, r5
 810c062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c066:	f842 0f04 	str.w	r0, [r2, #4]!
 810c06a:	3301      	adds	r3, #1
 810c06c:	e7c5      	b.n	810bffa <__lshift+0x4a>
 810c06e:	3904      	subs	r1, #4
 810c070:	f853 2b04 	ldr.w	r2, [r3], #4
 810c074:	f841 2f04 	str.w	r2, [r1, #4]!
 810c078:	459c      	cmp	ip, r3
 810c07a:	d8f9      	bhi.n	810c070 <__lshift+0xc0>
 810c07c:	e7ea      	b.n	810c054 <__lshift+0xa4>
 810c07e:	bf00      	nop
 810c080:	0810eac1 	.word	0x0810eac1
 810c084:	0810ead2 	.word	0x0810ead2

0810c088 <__mcmp>:
 810c088:	690a      	ldr	r2, [r1, #16]
 810c08a:	4603      	mov	r3, r0
 810c08c:	6900      	ldr	r0, [r0, #16]
 810c08e:	1a80      	subs	r0, r0, r2
 810c090:	b530      	push	{r4, r5, lr}
 810c092:	d10e      	bne.n	810c0b2 <__mcmp+0x2a>
 810c094:	3314      	adds	r3, #20
 810c096:	3114      	adds	r1, #20
 810c098:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 810c09c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 810c0a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810c0a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810c0a8:	4295      	cmp	r5, r2
 810c0aa:	d003      	beq.n	810c0b4 <__mcmp+0x2c>
 810c0ac:	d205      	bcs.n	810c0ba <__mcmp+0x32>
 810c0ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810c0b2:	bd30      	pop	{r4, r5, pc}
 810c0b4:	42a3      	cmp	r3, r4
 810c0b6:	d3f3      	bcc.n	810c0a0 <__mcmp+0x18>
 810c0b8:	e7fb      	b.n	810c0b2 <__mcmp+0x2a>
 810c0ba:	2001      	movs	r0, #1
 810c0bc:	e7f9      	b.n	810c0b2 <__mcmp+0x2a>
	...

0810c0c0 <__mdiff>:
 810c0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c0c4:	4689      	mov	r9, r1
 810c0c6:	4606      	mov	r6, r0
 810c0c8:	4611      	mov	r1, r2
 810c0ca:	4648      	mov	r0, r9
 810c0cc:	4614      	mov	r4, r2
 810c0ce:	f7ff ffdb 	bl	810c088 <__mcmp>
 810c0d2:	1e05      	subs	r5, r0, #0
 810c0d4:	d112      	bne.n	810c0fc <__mdiff+0x3c>
 810c0d6:	4629      	mov	r1, r5
 810c0d8:	4630      	mov	r0, r6
 810c0da:	f7ff fd11 	bl	810bb00 <_Balloc>
 810c0de:	4602      	mov	r2, r0
 810c0e0:	b928      	cbnz	r0, 810c0ee <__mdiff+0x2e>
 810c0e2:	4b3f      	ldr	r3, [pc, #252]	@ (810c1e0 <__mdiff+0x120>)
 810c0e4:	f240 2137 	movw	r1, #567	@ 0x237
 810c0e8:	483e      	ldr	r0, [pc, #248]	@ (810c1e4 <__mdiff+0x124>)
 810c0ea:	f001 fc4d 	bl	810d988 <__assert_func>
 810c0ee:	2301      	movs	r3, #1
 810c0f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c0f4:	4610      	mov	r0, r2
 810c0f6:	b003      	add	sp, #12
 810c0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c0fc:	bfbc      	itt	lt
 810c0fe:	464b      	movlt	r3, r9
 810c100:	46a1      	movlt	r9, r4
 810c102:	4630      	mov	r0, r6
 810c104:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810c108:	bfba      	itte	lt
 810c10a:	461c      	movlt	r4, r3
 810c10c:	2501      	movlt	r5, #1
 810c10e:	2500      	movge	r5, #0
 810c110:	f7ff fcf6 	bl	810bb00 <_Balloc>
 810c114:	4602      	mov	r2, r0
 810c116:	b918      	cbnz	r0, 810c120 <__mdiff+0x60>
 810c118:	4b31      	ldr	r3, [pc, #196]	@ (810c1e0 <__mdiff+0x120>)
 810c11a:	f240 2145 	movw	r1, #581	@ 0x245
 810c11e:	e7e3      	b.n	810c0e8 <__mdiff+0x28>
 810c120:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810c124:	6926      	ldr	r6, [r4, #16]
 810c126:	60c5      	str	r5, [r0, #12]
 810c128:	f109 0310 	add.w	r3, r9, #16
 810c12c:	f109 0514 	add.w	r5, r9, #20
 810c130:	f104 0e14 	add.w	lr, r4, #20
 810c134:	f100 0b14 	add.w	fp, r0, #20
 810c138:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 810c13c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 810c140:	9301      	str	r3, [sp, #4]
 810c142:	46d9      	mov	r9, fp
 810c144:	f04f 0c00 	mov.w	ip, #0
 810c148:	9b01      	ldr	r3, [sp, #4]
 810c14a:	f85e 0b04 	ldr.w	r0, [lr], #4
 810c14e:	f853 af04 	ldr.w	sl, [r3, #4]!
 810c152:	9301      	str	r3, [sp, #4]
 810c154:	fa1f f38a 	uxth.w	r3, sl
 810c158:	4619      	mov	r1, r3
 810c15a:	b283      	uxth	r3, r0
 810c15c:	1acb      	subs	r3, r1, r3
 810c15e:	0c00      	lsrs	r0, r0, #16
 810c160:	4463      	add	r3, ip
 810c162:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810c166:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810c16a:	b29b      	uxth	r3, r3
 810c16c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 810c170:	4576      	cmp	r6, lr
 810c172:	f849 3b04 	str.w	r3, [r9], #4
 810c176:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810c17a:	d8e5      	bhi.n	810c148 <__mdiff+0x88>
 810c17c:	1b33      	subs	r3, r6, r4
 810c17e:	3b15      	subs	r3, #21
 810c180:	f023 0303 	bic.w	r3, r3, #3
 810c184:	3415      	adds	r4, #21
 810c186:	3304      	adds	r3, #4
 810c188:	42a6      	cmp	r6, r4
 810c18a:	bf38      	it	cc
 810c18c:	2304      	movcc	r3, #4
 810c18e:	441d      	add	r5, r3
 810c190:	445b      	add	r3, fp
 810c192:	461e      	mov	r6, r3
 810c194:	462c      	mov	r4, r5
 810c196:	4544      	cmp	r4, r8
 810c198:	d30e      	bcc.n	810c1b8 <__mdiff+0xf8>
 810c19a:	f108 0103 	add.w	r1, r8, #3
 810c19e:	1b49      	subs	r1, r1, r5
 810c1a0:	f021 0103 	bic.w	r1, r1, #3
 810c1a4:	3d03      	subs	r5, #3
 810c1a6:	45a8      	cmp	r8, r5
 810c1a8:	bf38      	it	cc
 810c1aa:	2100      	movcc	r1, #0
 810c1ac:	440b      	add	r3, r1
 810c1ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c1b2:	b191      	cbz	r1, 810c1da <__mdiff+0x11a>
 810c1b4:	6117      	str	r7, [r2, #16]
 810c1b6:	e79d      	b.n	810c0f4 <__mdiff+0x34>
 810c1b8:	f854 1b04 	ldr.w	r1, [r4], #4
 810c1bc:	46e6      	mov	lr, ip
 810c1be:	0c08      	lsrs	r0, r1, #16
 810c1c0:	fa1c fc81 	uxtah	ip, ip, r1
 810c1c4:	4471      	add	r1, lr
 810c1c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 810c1ca:	b289      	uxth	r1, r1
 810c1cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810c1d0:	f846 1b04 	str.w	r1, [r6], #4
 810c1d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810c1d8:	e7dd      	b.n	810c196 <__mdiff+0xd6>
 810c1da:	3f01      	subs	r7, #1
 810c1dc:	e7e7      	b.n	810c1ae <__mdiff+0xee>
 810c1de:	bf00      	nop
 810c1e0:	0810eac1 	.word	0x0810eac1
 810c1e4:	0810ead2 	.word	0x0810ead2

0810c1e8 <__ulp>:
 810c1e8:	b082      	sub	sp, #8
 810c1ea:	ed8d 0b00 	vstr	d0, [sp]
 810c1ee:	9a01      	ldr	r2, [sp, #4]
 810c1f0:	4b0f      	ldr	r3, [pc, #60]	@ (810c230 <__ulp+0x48>)
 810c1f2:	4013      	ands	r3, r2
 810c1f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 810c1f8:	2b00      	cmp	r3, #0
 810c1fa:	dc08      	bgt.n	810c20e <__ulp+0x26>
 810c1fc:	425b      	negs	r3, r3
 810c1fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810c202:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c206:	da04      	bge.n	810c212 <__ulp+0x2a>
 810c208:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810c20c:	4113      	asrs	r3, r2
 810c20e:	2200      	movs	r2, #0
 810c210:	e008      	b.n	810c224 <__ulp+0x3c>
 810c212:	f1a2 0314 	sub.w	r3, r2, #20
 810c216:	2b1e      	cmp	r3, #30
 810c218:	bfda      	itte	le
 810c21a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 810c21e:	40da      	lsrle	r2, r3
 810c220:	2201      	movgt	r2, #1
 810c222:	2300      	movs	r3, #0
 810c224:	4619      	mov	r1, r3
 810c226:	4610      	mov	r0, r2
 810c228:	ec41 0b10 	vmov	d0, r0, r1
 810c22c:	b002      	add	sp, #8
 810c22e:	4770      	bx	lr
 810c230:	7ff00000 	.word	0x7ff00000

0810c234 <__b2d>:
 810c234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c238:	6906      	ldr	r6, [r0, #16]
 810c23a:	f100 0814 	add.w	r8, r0, #20
 810c23e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810c242:	1f37      	subs	r7, r6, #4
 810c244:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c248:	4610      	mov	r0, r2
 810c24a:	f7ff fd4b 	bl	810bce4 <__hi0bits>
 810c24e:	f1c0 0320 	rsb	r3, r0, #32
 810c252:	280a      	cmp	r0, #10
 810c254:	600b      	str	r3, [r1, #0]
 810c256:	491b      	ldr	r1, [pc, #108]	@ (810c2c4 <__b2d+0x90>)
 810c258:	dc15      	bgt.n	810c286 <__b2d+0x52>
 810c25a:	f1c0 0c0b 	rsb	ip, r0, #11
 810c25e:	fa22 f30c 	lsr.w	r3, r2, ip
 810c262:	45b8      	cmp	r8, r7
 810c264:	ea43 0501 	orr.w	r5, r3, r1
 810c268:	bf34      	ite	cc
 810c26a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c26e:	2300      	movcs	r3, #0
 810c270:	3015      	adds	r0, #21
 810c272:	fa02 f000 	lsl.w	r0, r2, r0
 810c276:	fa23 f30c 	lsr.w	r3, r3, ip
 810c27a:	4303      	orrs	r3, r0
 810c27c:	461c      	mov	r4, r3
 810c27e:	ec45 4b10 	vmov	d0, r4, r5
 810c282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c286:	45b8      	cmp	r8, r7
 810c288:	bf3a      	itte	cc
 810c28a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c28e:	f1a6 0708 	subcc.w	r7, r6, #8
 810c292:	2300      	movcs	r3, #0
 810c294:	380b      	subs	r0, #11
 810c296:	d012      	beq.n	810c2be <__b2d+0x8a>
 810c298:	f1c0 0120 	rsb	r1, r0, #32
 810c29c:	fa23 f401 	lsr.w	r4, r3, r1
 810c2a0:	4082      	lsls	r2, r0
 810c2a2:	4322      	orrs	r2, r4
 810c2a4:	4547      	cmp	r7, r8
 810c2a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 810c2aa:	bf8c      	ite	hi
 810c2ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c2b0:	2200      	movls	r2, #0
 810c2b2:	4083      	lsls	r3, r0
 810c2b4:	40ca      	lsrs	r2, r1
 810c2b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 810c2ba:	4313      	orrs	r3, r2
 810c2bc:	e7de      	b.n	810c27c <__b2d+0x48>
 810c2be:	ea42 0501 	orr.w	r5, r2, r1
 810c2c2:	e7db      	b.n	810c27c <__b2d+0x48>
 810c2c4:	3ff00000 	.word	0x3ff00000

0810c2c8 <__d2b>:
 810c2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c2cc:	460f      	mov	r7, r1
 810c2ce:	2101      	movs	r1, #1
 810c2d0:	ec59 8b10 	vmov	r8, r9, d0
 810c2d4:	4616      	mov	r6, r2
 810c2d6:	f7ff fc13 	bl	810bb00 <_Balloc>
 810c2da:	4604      	mov	r4, r0
 810c2dc:	b930      	cbnz	r0, 810c2ec <__d2b+0x24>
 810c2de:	4602      	mov	r2, r0
 810c2e0:	4b23      	ldr	r3, [pc, #140]	@ (810c370 <__d2b+0xa8>)
 810c2e2:	4824      	ldr	r0, [pc, #144]	@ (810c374 <__d2b+0xac>)
 810c2e4:	f240 310f 	movw	r1, #783	@ 0x30f
 810c2e8:	f001 fb4e 	bl	810d988 <__assert_func>
 810c2ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c2f4:	b10d      	cbz	r5, 810c2fa <__d2b+0x32>
 810c2f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810c2fa:	9301      	str	r3, [sp, #4]
 810c2fc:	f1b8 0300 	subs.w	r3, r8, #0
 810c300:	d023      	beq.n	810c34a <__d2b+0x82>
 810c302:	4668      	mov	r0, sp
 810c304:	9300      	str	r3, [sp, #0]
 810c306:	f7ff fd0c 	bl	810bd22 <__lo0bits>
 810c30a:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c30e:	b1d0      	cbz	r0, 810c346 <__d2b+0x7e>
 810c310:	f1c0 0320 	rsb	r3, r0, #32
 810c314:	fa02 f303 	lsl.w	r3, r2, r3
 810c318:	430b      	orrs	r3, r1
 810c31a:	40c2      	lsrs	r2, r0
 810c31c:	6163      	str	r3, [r4, #20]
 810c31e:	9201      	str	r2, [sp, #4]
 810c320:	9b01      	ldr	r3, [sp, #4]
 810c322:	61a3      	str	r3, [r4, #24]
 810c324:	2b00      	cmp	r3, #0
 810c326:	bf0c      	ite	eq
 810c328:	2201      	moveq	r2, #1
 810c32a:	2202      	movne	r2, #2
 810c32c:	6122      	str	r2, [r4, #16]
 810c32e:	b1a5      	cbz	r5, 810c35a <__d2b+0x92>
 810c330:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810c334:	4405      	add	r5, r0
 810c336:	603d      	str	r5, [r7, #0]
 810c338:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 810c33c:	6030      	str	r0, [r6, #0]
 810c33e:	4620      	mov	r0, r4
 810c340:	b003      	add	sp, #12
 810c342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c346:	6161      	str	r1, [r4, #20]
 810c348:	e7ea      	b.n	810c320 <__d2b+0x58>
 810c34a:	a801      	add	r0, sp, #4
 810c34c:	f7ff fce9 	bl	810bd22 <__lo0bits>
 810c350:	9b01      	ldr	r3, [sp, #4]
 810c352:	6163      	str	r3, [r4, #20]
 810c354:	3020      	adds	r0, #32
 810c356:	2201      	movs	r2, #1
 810c358:	e7e8      	b.n	810c32c <__d2b+0x64>
 810c35a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c35e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810c362:	6038      	str	r0, [r7, #0]
 810c364:	6918      	ldr	r0, [r3, #16]
 810c366:	f7ff fcbd 	bl	810bce4 <__hi0bits>
 810c36a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c36e:	e7e5      	b.n	810c33c <__d2b+0x74>
 810c370:	0810eac1 	.word	0x0810eac1
 810c374:	0810ead2 	.word	0x0810ead2

0810c378 <__ratio>:
 810c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c37c:	b085      	sub	sp, #20
 810c37e:	e9cd 1000 	strd	r1, r0, [sp]
 810c382:	a902      	add	r1, sp, #8
 810c384:	f7ff ff56 	bl	810c234 <__b2d>
 810c388:	9800      	ldr	r0, [sp, #0]
 810c38a:	a903      	add	r1, sp, #12
 810c38c:	ec55 4b10 	vmov	r4, r5, d0
 810c390:	f7ff ff50 	bl	810c234 <__b2d>
 810c394:	9b01      	ldr	r3, [sp, #4]
 810c396:	6919      	ldr	r1, [r3, #16]
 810c398:	9b00      	ldr	r3, [sp, #0]
 810c39a:	691b      	ldr	r3, [r3, #16]
 810c39c:	1ac9      	subs	r1, r1, r3
 810c39e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 810c3a2:	1a9b      	subs	r3, r3, r2
 810c3a4:	ec5b ab10 	vmov	sl, fp, d0
 810c3a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 810c3ac:	2b00      	cmp	r3, #0
 810c3ae:	bfce      	itee	gt
 810c3b0:	462a      	movgt	r2, r5
 810c3b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c3b6:	465a      	movle	r2, fp
 810c3b8:	462f      	mov	r7, r5
 810c3ba:	46d9      	mov	r9, fp
 810c3bc:	bfcc      	ite	gt
 810c3be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c3c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 810c3c6:	464b      	mov	r3, r9
 810c3c8:	4652      	mov	r2, sl
 810c3ca:	4620      	mov	r0, r4
 810c3cc:	4639      	mov	r1, r7
 810c3ce:	f7f4 fac5 	bl	810095c <__aeabi_ddiv>
 810c3d2:	ec41 0b10 	vmov	d0, r0, r1
 810c3d6:	b005      	add	sp, #20
 810c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c3dc <__copybits>:
 810c3dc:	3901      	subs	r1, #1
 810c3de:	b570      	push	{r4, r5, r6, lr}
 810c3e0:	1149      	asrs	r1, r1, #5
 810c3e2:	6914      	ldr	r4, [r2, #16]
 810c3e4:	3101      	adds	r1, #1
 810c3e6:	f102 0314 	add.w	r3, r2, #20
 810c3ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c3ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c3f2:	1f05      	subs	r5, r0, #4
 810c3f4:	42a3      	cmp	r3, r4
 810c3f6:	d30c      	bcc.n	810c412 <__copybits+0x36>
 810c3f8:	1aa3      	subs	r3, r4, r2
 810c3fa:	3b11      	subs	r3, #17
 810c3fc:	f023 0303 	bic.w	r3, r3, #3
 810c400:	3211      	adds	r2, #17
 810c402:	42a2      	cmp	r2, r4
 810c404:	bf88      	it	hi
 810c406:	2300      	movhi	r3, #0
 810c408:	4418      	add	r0, r3
 810c40a:	2300      	movs	r3, #0
 810c40c:	4288      	cmp	r0, r1
 810c40e:	d305      	bcc.n	810c41c <__copybits+0x40>
 810c410:	bd70      	pop	{r4, r5, r6, pc}
 810c412:	f853 6b04 	ldr.w	r6, [r3], #4
 810c416:	f845 6f04 	str.w	r6, [r5, #4]!
 810c41a:	e7eb      	b.n	810c3f4 <__copybits+0x18>
 810c41c:	f840 3b04 	str.w	r3, [r0], #4
 810c420:	e7f4      	b.n	810c40c <__copybits+0x30>

0810c422 <__any_on>:
 810c422:	f100 0214 	add.w	r2, r0, #20
 810c426:	6900      	ldr	r0, [r0, #16]
 810c428:	114b      	asrs	r3, r1, #5
 810c42a:	4298      	cmp	r0, r3
 810c42c:	b510      	push	{r4, lr}
 810c42e:	db11      	blt.n	810c454 <__any_on+0x32>
 810c430:	dd0a      	ble.n	810c448 <__any_on+0x26>
 810c432:	f011 011f 	ands.w	r1, r1, #31
 810c436:	d007      	beq.n	810c448 <__any_on+0x26>
 810c438:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c43c:	fa24 f001 	lsr.w	r0, r4, r1
 810c440:	fa00 f101 	lsl.w	r1, r0, r1
 810c444:	428c      	cmp	r4, r1
 810c446:	d10b      	bne.n	810c460 <__any_on+0x3e>
 810c448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c44c:	4293      	cmp	r3, r2
 810c44e:	d803      	bhi.n	810c458 <__any_on+0x36>
 810c450:	2000      	movs	r0, #0
 810c452:	bd10      	pop	{r4, pc}
 810c454:	4603      	mov	r3, r0
 810c456:	e7f7      	b.n	810c448 <__any_on+0x26>
 810c458:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c45c:	2900      	cmp	r1, #0
 810c45e:	d0f5      	beq.n	810c44c <__any_on+0x2a>
 810c460:	2001      	movs	r0, #1
 810c462:	e7f6      	b.n	810c452 <__any_on+0x30>

0810c464 <sulp>:
 810c464:	b570      	push	{r4, r5, r6, lr}
 810c466:	4604      	mov	r4, r0
 810c468:	460d      	mov	r5, r1
 810c46a:	ec45 4b10 	vmov	d0, r4, r5
 810c46e:	4616      	mov	r6, r2
 810c470:	f7ff feba 	bl	810c1e8 <__ulp>
 810c474:	ec51 0b10 	vmov	r0, r1, d0
 810c478:	b17e      	cbz	r6, 810c49a <sulp+0x36>
 810c47a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810c47e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810c482:	2b00      	cmp	r3, #0
 810c484:	dd09      	ble.n	810c49a <sulp+0x36>
 810c486:	051b      	lsls	r3, r3, #20
 810c488:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810c48c:	2400      	movs	r4, #0
 810c48e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 810c492:	4622      	mov	r2, r4
 810c494:	462b      	mov	r3, r5
 810c496:	f7f4 f937 	bl	8100708 <__aeabi_dmul>
 810c49a:	ec41 0b10 	vmov	d0, r0, r1
 810c49e:	bd70      	pop	{r4, r5, r6, pc}

0810c4a0 <_strtod_l>:
 810c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c4a4:	b09f      	sub	sp, #124	@ 0x7c
 810c4a6:	460c      	mov	r4, r1
 810c4a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 810c4aa:	2200      	movs	r2, #0
 810c4ac:	921a      	str	r2, [sp, #104]	@ 0x68
 810c4ae:	9005      	str	r0, [sp, #20]
 810c4b0:	f04f 0a00 	mov.w	sl, #0
 810c4b4:	f04f 0b00 	mov.w	fp, #0
 810c4b8:	460a      	mov	r2, r1
 810c4ba:	9219      	str	r2, [sp, #100]	@ 0x64
 810c4bc:	7811      	ldrb	r1, [r2, #0]
 810c4be:	292b      	cmp	r1, #43	@ 0x2b
 810c4c0:	d04a      	beq.n	810c558 <_strtod_l+0xb8>
 810c4c2:	d838      	bhi.n	810c536 <_strtod_l+0x96>
 810c4c4:	290d      	cmp	r1, #13
 810c4c6:	d832      	bhi.n	810c52e <_strtod_l+0x8e>
 810c4c8:	2908      	cmp	r1, #8
 810c4ca:	d832      	bhi.n	810c532 <_strtod_l+0x92>
 810c4cc:	2900      	cmp	r1, #0
 810c4ce:	d03b      	beq.n	810c548 <_strtod_l+0xa8>
 810c4d0:	2200      	movs	r2, #0
 810c4d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 810c4d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 810c4d6:	782a      	ldrb	r2, [r5, #0]
 810c4d8:	2a30      	cmp	r2, #48	@ 0x30
 810c4da:	f040 80b3 	bne.w	810c644 <_strtod_l+0x1a4>
 810c4de:	786a      	ldrb	r2, [r5, #1]
 810c4e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810c4e4:	2a58      	cmp	r2, #88	@ 0x58
 810c4e6:	d16e      	bne.n	810c5c6 <_strtod_l+0x126>
 810c4e8:	9302      	str	r3, [sp, #8]
 810c4ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c4ec:	9301      	str	r3, [sp, #4]
 810c4ee:	ab1a      	add	r3, sp, #104	@ 0x68
 810c4f0:	9300      	str	r3, [sp, #0]
 810c4f2:	4a8e      	ldr	r2, [pc, #568]	@ (810c72c <_strtod_l+0x28c>)
 810c4f4:	9805      	ldr	r0, [sp, #20]
 810c4f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 810c4f8:	a919      	add	r1, sp, #100	@ 0x64
 810c4fa:	f001 fadf 	bl	810dabc <__gethex>
 810c4fe:	f010 060f 	ands.w	r6, r0, #15
 810c502:	4604      	mov	r4, r0
 810c504:	d005      	beq.n	810c512 <_strtod_l+0x72>
 810c506:	2e06      	cmp	r6, #6
 810c508:	d128      	bne.n	810c55c <_strtod_l+0xbc>
 810c50a:	3501      	adds	r5, #1
 810c50c:	2300      	movs	r3, #0
 810c50e:	9519      	str	r5, [sp, #100]	@ 0x64
 810c510:	930b      	str	r3, [sp, #44]	@ 0x2c
 810c512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c514:	2b00      	cmp	r3, #0
 810c516:	f040 858e 	bne.w	810d036 <_strtod_l+0xb96>
 810c51a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810c51c:	b1cb      	cbz	r3, 810c552 <_strtod_l+0xb2>
 810c51e:	4652      	mov	r2, sl
 810c520:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 810c524:	ec43 2b10 	vmov	d0, r2, r3
 810c528:	b01f      	add	sp, #124	@ 0x7c
 810c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c52e:	2920      	cmp	r1, #32
 810c530:	d1ce      	bne.n	810c4d0 <_strtod_l+0x30>
 810c532:	3201      	adds	r2, #1
 810c534:	e7c1      	b.n	810c4ba <_strtod_l+0x1a>
 810c536:	292d      	cmp	r1, #45	@ 0x2d
 810c538:	d1ca      	bne.n	810c4d0 <_strtod_l+0x30>
 810c53a:	2101      	movs	r1, #1
 810c53c:	910b      	str	r1, [sp, #44]	@ 0x2c
 810c53e:	1c51      	adds	r1, r2, #1
 810c540:	9119      	str	r1, [sp, #100]	@ 0x64
 810c542:	7852      	ldrb	r2, [r2, #1]
 810c544:	2a00      	cmp	r2, #0
 810c546:	d1c5      	bne.n	810c4d4 <_strtod_l+0x34>
 810c548:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 810c54a:	9419      	str	r4, [sp, #100]	@ 0x64
 810c54c:	2b00      	cmp	r3, #0
 810c54e:	f040 8570 	bne.w	810d032 <_strtod_l+0xb92>
 810c552:	4652      	mov	r2, sl
 810c554:	465b      	mov	r3, fp
 810c556:	e7e5      	b.n	810c524 <_strtod_l+0x84>
 810c558:	2100      	movs	r1, #0
 810c55a:	e7ef      	b.n	810c53c <_strtod_l+0x9c>
 810c55c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810c55e:	b13a      	cbz	r2, 810c570 <_strtod_l+0xd0>
 810c560:	2135      	movs	r1, #53	@ 0x35
 810c562:	a81c      	add	r0, sp, #112	@ 0x70
 810c564:	f7ff ff3a 	bl	810c3dc <__copybits>
 810c568:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c56a:	9805      	ldr	r0, [sp, #20]
 810c56c:	f7ff fb08 	bl	810bb80 <_Bfree>
 810c570:	3e01      	subs	r6, #1
 810c572:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 810c574:	2e04      	cmp	r6, #4
 810c576:	d806      	bhi.n	810c586 <_strtod_l+0xe6>
 810c578:	e8df f006 	tbb	[pc, r6]
 810c57c:	201d0314 	.word	0x201d0314
 810c580:	14          	.byte	0x14
 810c581:	00          	.byte	0x00
 810c582:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 810c586:	05e1      	lsls	r1, r4, #23
 810c588:	bf48      	it	mi
 810c58a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810c58e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810c592:	0d1b      	lsrs	r3, r3, #20
 810c594:	051b      	lsls	r3, r3, #20
 810c596:	2b00      	cmp	r3, #0
 810c598:	d1bb      	bne.n	810c512 <_strtod_l+0x72>
 810c59a:	f7fe fb23 	bl	810abe4 <__errno>
 810c59e:	2322      	movs	r3, #34	@ 0x22
 810c5a0:	6003      	str	r3, [r0, #0]
 810c5a2:	e7b6      	b.n	810c512 <_strtod_l+0x72>
 810c5a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 810c5a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810c5ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810c5b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 810c5b4:	e7e7      	b.n	810c586 <_strtod_l+0xe6>
 810c5b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 810c734 <_strtod_l+0x294>
 810c5ba:	e7e4      	b.n	810c586 <_strtod_l+0xe6>
 810c5bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 810c5c0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810c5c4:	e7df      	b.n	810c586 <_strtod_l+0xe6>
 810c5c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c5c8:	1c5a      	adds	r2, r3, #1
 810c5ca:	9219      	str	r2, [sp, #100]	@ 0x64
 810c5cc:	785b      	ldrb	r3, [r3, #1]
 810c5ce:	2b30      	cmp	r3, #48	@ 0x30
 810c5d0:	d0f9      	beq.n	810c5c6 <_strtod_l+0x126>
 810c5d2:	2b00      	cmp	r3, #0
 810c5d4:	d09d      	beq.n	810c512 <_strtod_l+0x72>
 810c5d6:	2301      	movs	r3, #1
 810c5d8:	9309      	str	r3, [sp, #36]	@ 0x24
 810c5da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c5dc:	930c      	str	r3, [sp, #48]	@ 0x30
 810c5de:	2300      	movs	r3, #0
 810c5e0:	9308      	str	r3, [sp, #32]
 810c5e2:	930a      	str	r3, [sp, #40]	@ 0x28
 810c5e4:	461f      	mov	r7, r3
 810c5e6:	220a      	movs	r2, #10
 810c5e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810c5ea:	7805      	ldrb	r5, [r0, #0]
 810c5ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 810c5f0:	b2d9      	uxtb	r1, r3
 810c5f2:	2909      	cmp	r1, #9
 810c5f4:	d928      	bls.n	810c648 <_strtod_l+0x1a8>
 810c5f6:	494e      	ldr	r1, [pc, #312]	@ (810c730 <_strtod_l+0x290>)
 810c5f8:	2201      	movs	r2, #1
 810c5fa:	f001 f979 	bl	810d8f0 <strncmp>
 810c5fe:	2800      	cmp	r0, #0
 810c600:	d032      	beq.n	810c668 <_strtod_l+0x1c8>
 810c602:	2000      	movs	r0, #0
 810c604:	462a      	mov	r2, r5
 810c606:	4681      	mov	r9, r0
 810c608:	463d      	mov	r5, r7
 810c60a:	4603      	mov	r3, r0
 810c60c:	2a65      	cmp	r2, #101	@ 0x65
 810c60e:	d001      	beq.n	810c614 <_strtod_l+0x174>
 810c610:	2a45      	cmp	r2, #69	@ 0x45
 810c612:	d114      	bne.n	810c63e <_strtod_l+0x19e>
 810c614:	b91d      	cbnz	r5, 810c61e <_strtod_l+0x17e>
 810c616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c618:	4302      	orrs	r2, r0
 810c61a:	d095      	beq.n	810c548 <_strtod_l+0xa8>
 810c61c:	2500      	movs	r5, #0
 810c61e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 810c620:	1c62      	adds	r2, r4, #1
 810c622:	9219      	str	r2, [sp, #100]	@ 0x64
 810c624:	7862      	ldrb	r2, [r4, #1]
 810c626:	2a2b      	cmp	r2, #43	@ 0x2b
 810c628:	d077      	beq.n	810c71a <_strtod_l+0x27a>
 810c62a:	2a2d      	cmp	r2, #45	@ 0x2d
 810c62c:	d07b      	beq.n	810c726 <_strtod_l+0x286>
 810c62e:	f04f 0c00 	mov.w	ip, #0
 810c632:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 810c636:	2909      	cmp	r1, #9
 810c638:	f240 8082 	bls.w	810c740 <_strtod_l+0x2a0>
 810c63c:	9419      	str	r4, [sp, #100]	@ 0x64
 810c63e:	f04f 0800 	mov.w	r8, #0
 810c642:	e0a2      	b.n	810c78a <_strtod_l+0x2ea>
 810c644:	2300      	movs	r3, #0
 810c646:	e7c7      	b.n	810c5d8 <_strtod_l+0x138>
 810c648:	2f08      	cmp	r7, #8
 810c64a:	bfd5      	itete	le
 810c64c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 810c64e:	9908      	ldrgt	r1, [sp, #32]
 810c650:	fb02 3301 	mlale	r3, r2, r1, r3
 810c654:	fb02 3301 	mlagt	r3, r2, r1, r3
 810c658:	f100 0001 	add.w	r0, r0, #1
 810c65c:	bfd4      	ite	le
 810c65e:	930a      	strle	r3, [sp, #40]	@ 0x28
 810c660:	9308      	strgt	r3, [sp, #32]
 810c662:	3701      	adds	r7, #1
 810c664:	9019      	str	r0, [sp, #100]	@ 0x64
 810c666:	e7bf      	b.n	810c5e8 <_strtod_l+0x148>
 810c668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c66a:	1c5a      	adds	r2, r3, #1
 810c66c:	9219      	str	r2, [sp, #100]	@ 0x64
 810c66e:	785a      	ldrb	r2, [r3, #1]
 810c670:	b37f      	cbz	r7, 810c6d2 <_strtod_l+0x232>
 810c672:	4681      	mov	r9, r0
 810c674:	463d      	mov	r5, r7
 810c676:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810c67a:	2b09      	cmp	r3, #9
 810c67c:	d912      	bls.n	810c6a4 <_strtod_l+0x204>
 810c67e:	2301      	movs	r3, #1
 810c680:	e7c4      	b.n	810c60c <_strtod_l+0x16c>
 810c682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c684:	1c5a      	adds	r2, r3, #1
 810c686:	9219      	str	r2, [sp, #100]	@ 0x64
 810c688:	785a      	ldrb	r2, [r3, #1]
 810c68a:	3001      	adds	r0, #1
 810c68c:	2a30      	cmp	r2, #48	@ 0x30
 810c68e:	d0f8      	beq.n	810c682 <_strtod_l+0x1e2>
 810c690:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 810c694:	2b08      	cmp	r3, #8
 810c696:	f200 84d3 	bhi.w	810d040 <_strtod_l+0xba0>
 810c69a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c69c:	930c      	str	r3, [sp, #48]	@ 0x30
 810c69e:	4681      	mov	r9, r0
 810c6a0:	2000      	movs	r0, #0
 810c6a2:	4605      	mov	r5, r0
 810c6a4:	3a30      	subs	r2, #48	@ 0x30
 810c6a6:	f100 0301 	add.w	r3, r0, #1
 810c6aa:	d02a      	beq.n	810c702 <_strtod_l+0x262>
 810c6ac:	4499      	add	r9, r3
 810c6ae:	eb00 0c05 	add.w	ip, r0, r5
 810c6b2:	462b      	mov	r3, r5
 810c6b4:	210a      	movs	r1, #10
 810c6b6:	4563      	cmp	r3, ip
 810c6b8:	d10d      	bne.n	810c6d6 <_strtod_l+0x236>
 810c6ba:	1c69      	adds	r1, r5, #1
 810c6bc:	4401      	add	r1, r0
 810c6be:	4428      	add	r0, r5
 810c6c0:	2808      	cmp	r0, #8
 810c6c2:	dc16      	bgt.n	810c6f2 <_strtod_l+0x252>
 810c6c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c6c6:	230a      	movs	r3, #10
 810c6c8:	fb03 2300 	mla	r3, r3, r0, r2
 810c6cc:	930a      	str	r3, [sp, #40]	@ 0x28
 810c6ce:	2300      	movs	r3, #0
 810c6d0:	e018      	b.n	810c704 <_strtod_l+0x264>
 810c6d2:	4638      	mov	r0, r7
 810c6d4:	e7da      	b.n	810c68c <_strtod_l+0x1ec>
 810c6d6:	2b08      	cmp	r3, #8
 810c6d8:	f103 0301 	add.w	r3, r3, #1
 810c6dc:	dc03      	bgt.n	810c6e6 <_strtod_l+0x246>
 810c6de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 810c6e0:	434e      	muls	r6, r1
 810c6e2:	960a      	str	r6, [sp, #40]	@ 0x28
 810c6e4:	e7e7      	b.n	810c6b6 <_strtod_l+0x216>
 810c6e6:	2b10      	cmp	r3, #16
 810c6e8:	bfde      	ittt	le
 810c6ea:	9e08      	ldrle	r6, [sp, #32]
 810c6ec:	434e      	mulle	r6, r1
 810c6ee:	9608      	strle	r6, [sp, #32]
 810c6f0:	e7e1      	b.n	810c6b6 <_strtod_l+0x216>
 810c6f2:	280f      	cmp	r0, #15
 810c6f4:	dceb      	bgt.n	810c6ce <_strtod_l+0x22e>
 810c6f6:	9808      	ldr	r0, [sp, #32]
 810c6f8:	230a      	movs	r3, #10
 810c6fa:	fb03 2300 	mla	r3, r3, r0, r2
 810c6fe:	9308      	str	r3, [sp, #32]
 810c700:	e7e5      	b.n	810c6ce <_strtod_l+0x22e>
 810c702:	4629      	mov	r1, r5
 810c704:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c706:	1c50      	adds	r0, r2, #1
 810c708:	9019      	str	r0, [sp, #100]	@ 0x64
 810c70a:	7852      	ldrb	r2, [r2, #1]
 810c70c:	4618      	mov	r0, r3
 810c70e:	460d      	mov	r5, r1
 810c710:	e7b1      	b.n	810c676 <_strtod_l+0x1d6>
 810c712:	f04f 0900 	mov.w	r9, #0
 810c716:	2301      	movs	r3, #1
 810c718:	e77d      	b.n	810c616 <_strtod_l+0x176>
 810c71a:	f04f 0c00 	mov.w	ip, #0
 810c71e:	1ca2      	adds	r2, r4, #2
 810c720:	9219      	str	r2, [sp, #100]	@ 0x64
 810c722:	78a2      	ldrb	r2, [r4, #2]
 810c724:	e785      	b.n	810c632 <_strtod_l+0x192>
 810c726:	f04f 0c01 	mov.w	ip, #1
 810c72a:	e7f8      	b.n	810c71e <_strtod_l+0x27e>
 810c72c:	0810ec40 	.word	0x0810ec40
 810c730:	0810ec28 	.word	0x0810ec28
 810c734:	7ff00000 	.word	0x7ff00000
 810c738:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c73a:	1c51      	adds	r1, r2, #1
 810c73c:	9119      	str	r1, [sp, #100]	@ 0x64
 810c73e:	7852      	ldrb	r2, [r2, #1]
 810c740:	2a30      	cmp	r2, #48	@ 0x30
 810c742:	d0f9      	beq.n	810c738 <_strtod_l+0x298>
 810c744:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 810c748:	2908      	cmp	r1, #8
 810c74a:	f63f af78 	bhi.w	810c63e <_strtod_l+0x19e>
 810c74e:	3a30      	subs	r2, #48	@ 0x30
 810c750:	920e      	str	r2, [sp, #56]	@ 0x38
 810c752:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c754:	920f      	str	r2, [sp, #60]	@ 0x3c
 810c756:	f04f 080a 	mov.w	r8, #10
 810c75a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 810c75c:	1c56      	adds	r6, r2, #1
 810c75e:	9619      	str	r6, [sp, #100]	@ 0x64
 810c760:	7852      	ldrb	r2, [r2, #1]
 810c762:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 810c766:	f1be 0f09 	cmp.w	lr, #9
 810c76a:	d939      	bls.n	810c7e0 <_strtod_l+0x340>
 810c76c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810c76e:	1a76      	subs	r6, r6, r1
 810c770:	2e08      	cmp	r6, #8
 810c772:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 810c776:	dc03      	bgt.n	810c780 <_strtod_l+0x2e0>
 810c778:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c77a:	4588      	cmp	r8, r1
 810c77c:	bfa8      	it	ge
 810c77e:	4688      	movge	r8, r1
 810c780:	f1bc 0f00 	cmp.w	ip, #0
 810c784:	d001      	beq.n	810c78a <_strtod_l+0x2ea>
 810c786:	f1c8 0800 	rsb	r8, r8, #0
 810c78a:	2d00      	cmp	r5, #0
 810c78c:	d14e      	bne.n	810c82c <_strtod_l+0x38c>
 810c78e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 810c790:	4308      	orrs	r0, r1
 810c792:	f47f aebe 	bne.w	810c512 <_strtod_l+0x72>
 810c796:	2b00      	cmp	r3, #0
 810c798:	f47f aed6 	bne.w	810c548 <_strtod_l+0xa8>
 810c79c:	2a69      	cmp	r2, #105	@ 0x69
 810c79e:	d028      	beq.n	810c7f2 <_strtod_l+0x352>
 810c7a0:	dc25      	bgt.n	810c7ee <_strtod_l+0x34e>
 810c7a2:	2a49      	cmp	r2, #73	@ 0x49
 810c7a4:	d025      	beq.n	810c7f2 <_strtod_l+0x352>
 810c7a6:	2a4e      	cmp	r2, #78	@ 0x4e
 810c7a8:	f47f aece 	bne.w	810c548 <_strtod_l+0xa8>
 810c7ac:	499b      	ldr	r1, [pc, #620]	@ (810ca1c <_strtod_l+0x57c>)
 810c7ae:	a819      	add	r0, sp, #100	@ 0x64
 810c7b0:	f001 fba6 	bl	810df00 <__match>
 810c7b4:	2800      	cmp	r0, #0
 810c7b6:	f43f aec7 	beq.w	810c548 <_strtod_l+0xa8>
 810c7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c7bc:	781b      	ldrb	r3, [r3, #0]
 810c7be:	2b28      	cmp	r3, #40	@ 0x28
 810c7c0:	d12e      	bne.n	810c820 <_strtod_l+0x380>
 810c7c2:	4997      	ldr	r1, [pc, #604]	@ (810ca20 <_strtod_l+0x580>)
 810c7c4:	aa1c      	add	r2, sp, #112	@ 0x70
 810c7c6:	a819      	add	r0, sp, #100	@ 0x64
 810c7c8:	f001 fbae 	bl	810df28 <__hexnan>
 810c7cc:	2805      	cmp	r0, #5
 810c7ce:	d127      	bne.n	810c820 <_strtod_l+0x380>
 810c7d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 810c7d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 810c7d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810c7da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810c7de:	e698      	b.n	810c512 <_strtod_l+0x72>
 810c7e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810c7e2:	fb08 2101 	mla	r1, r8, r1, r2
 810c7e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810c7ea:	920e      	str	r2, [sp, #56]	@ 0x38
 810c7ec:	e7b5      	b.n	810c75a <_strtod_l+0x2ba>
 810c7ee:	2a6e      	cmp	r2, #110	@ 0x6e
 810c7f0:	e7da      	b.n	810c7a8 <_strtod_l+0x308>
 810c7f2:	498c      	ldr	r1, [pc, #560]	@ (810ca24 <_strtod_l+0x584>)
 810c7f4:	a819      	add	r0, sp, #100	@ 0x64
 810c7f6:	f001 fb83 	bl	810df00 <__match>
 810c7fa:	2800      	cmp	r0, #0
 810c7fc:	f43f aea4 	beq.w	810c548 <_strtod_l+0xa8>
 810c800:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c802:	4989      	ldr	r1, [pc, #548]	@ (810ca28 <_strtod_l+0x588>)
 810c804:	3b01      	subs	r3, #1
 810c806:	a819      	add	r0, sp, #100	@ 0x64
 810c808:	9319      	str	r3, [sp, #100]	@ 0x64
 810c80a:	f001 fb79 	bl	810df00 <__match>
 810c80e:	b910      	cbnz	r0, 810c816 <_strtod_l+0x376>
 810c810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810c812:	3301      	adds	r3, #1
 810c814:	9319      	str	r3, [sp, #100]	@ 0x64
 810c816:	f8df b220 	ldr.w	fp, [pc, #544]	@ 810ca38 <_strtod_l+0x598>
 810c81a:	f04f 0a00 	mov.w	sl, #0
 810c81e:	e678      	b.n	810c512 <_strtod_l+0x72>
 810c820:	4882      	ldr	r0, [pc, #520]	@ (810ca2c <_strtod_l+0x58c>)
 810c822:	f001 f8a9 	bl	810d978 <nan>
 810c826:	ec5b ab10 	vmov	sl, fp, d0
 810c82a:	e672      	b.n	810c512 <_strtod_l+0x72>
 810c82c:	eba8 0309 	sub.w	r3, r8, r9
 810c830:	980a      	ldr	r0, [sp, #40]	@ 0x28
 810c832:	9309      	str	r3, [sp, #36]	@ 0x24
 810c834:	2f00      	cmp	r7, #0
 810c836:	bf08      	it	eq
 810c838:	462f      	moveq	r7, r5
 810c83a:	2d10      	cmp	r5, #16
 810c83c:	462c      	mov	r4, r5
 810c83e:	bfa8      	it	ge
 810c840:	2410      	movge	r4, #16
 810c842:	f7f3 fee7 	bl	8100614 <__aeabi_ui2d>
 810c846:	2d09      	cmp	r5, #9
 810c848:	4682      	mov	sl, r0
 810c84a:	468b      	mov	fp, r1
 810c84c:	dc13      	bgt.n	810c876 <_strtod_l+0x3d6>
 810c84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c850:	2b00      	cmp	r3, #0
 810c852:	f43f ae5e 	beq.w	810c512 <_strtod_l+0x72>
 810c856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c858:	dd78      	ble.n	810c94c <_strtod_l+0x4ac>
 810c85a:	2b16      	cmp	r3, #22
 810c85c:	dc5f      	bgt.n	810c91e <_strtod_l+0x47e>
 810c85e:	4974      	ldr	r1, [pc, #464]	@ (810ca30 <_strtod_l+0x590>)
 810c860:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c864:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c868:	4652      	mov	r2, sl
 810c86a:	465b      	mov	r3, fp
 810c86c:	f7f3 ff4c 	bl	8100708 <__aeabi_dmul>
 810c870:	4682      	mov	sl, r0
 810c872:	468b      	mov	fp, r1
 810c874:	e64d      	b.n	810c512 <_strtod_l+0x72>
 810c876:	4b6e      	ldr	r3, [pc, #440]	@ (810ca30 <_strtod_l+0x590>)
 810c878:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c87c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 810c880:	f7f3 ff42 	bl	8100708 <__aeabi_dmul>
 810c884:	4682      	mov	sl, r0
 810c886:	9808      	ldr	r0, [sp, #32]
 810c888:	468b      	mov	fp, r1
 810c88a:	f7f3 fec3 	bl	8100614 <__aeabi_ui2d>
 810c88e:	4602      	mov	r2, r0
 810c890:	460b      	mov	r3, r1
 810c892:	4650      	mov	r0, sl
 810c894:	4659      	mov	r1, fp
 810c896:	f7f3 fd81 	bl	810039c <__adddf3>
 810c89a:	2d0f      	cmp	r5, #15
 810c89c:	4682      	mov	sl, r0
 810c89e:	468b      	mov	fp, r1
 810c8a0:	ddd5      	ble.n	810c84e <_strtod_l+0x3ae>
 810c8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c8a4:	1b2c      	subs	r4, r5, r4
 810c8a6:	441c      	add	r4, r3
 810c8a8:	2c00      	cmp	r4, #0
 810c8aa:	f340 8096 	ble.w	810c9da <_strtod_l+0x53a>
 810c8ae:	f014 030f 	ands.w	r3, r4, #15
 810c8b2:	d00a      	beq.n	810c8ca <_strtod_l+0x42a>
 810c8b4:	495e      	ldr	r1, [pc, #376]	@ (810ca30 <_strtod_l+0x590>)
 810c8b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c8ba:	4652      	mov	r2, sl
 810c8bc:	465b      	mov	r3, fp
 810c8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c8c2:	f7f3 ff21 	bl	8100708 <__aeabi_dmul>
 810c8c6:	4682      	mov	sl, r0
 810c8c8:	468b      	mov	fp, r1
 810c8ca:	f034 040f 	bics.w	r4, r4, #15
 810c8ce:	d073      	beq.n	810c9b8 <_strtod_l+0x518>
 810c8d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 810c8d4:	dd48      	ble.n	810c968 <_strtod_l+0x4c8>
 810c8d6:	2400      	movs	r4, #0
 810c8d8:	46a0      	mov	r8, r4
 810c8da:	940a      	str	r4, [sp, #40]	@ 0x28
 810c8dc:	46a1      	mov	r9, r4
 810c8de:	9a05      	ldr	r2, [sp, #20]
 810c8e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 810ca38 <_strtod_l+0x598>
 810c8e4:	2322      	movs	r3, #34	@ 0x22
 810c8e6:	6013      	str	r3, [r2, #0]
 810c8e8:	f04f 0a00 	mov.w	sl, #0
 810c8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810c8ee:	2b00      	cmp	r3, #0
 810c8f0:	f43f ae0f 	beq.w	810c512 <_strtod_l+0x72>
 810c8f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810c8f6:	9805      	ldr	r0, [sp, #20]
 810c8f8:	f7ff f942 	bl	810bb80 <_Bfree>
 810c8fc:	9805      	ldr	r0, [sp, #20]
 810c8fe:	4649      	mov	r1, r9
 810c900:	f7ff f93e 	bl	810bb80 <_Bfree>
 810c904:	9805      	ldr	r0, [sp, #20]
 810c906:	4641      	mov	r1, r8
 810c908:	f7ff f93a 	bl	810bb80 <_Bfree>
 810c90c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810c90e:	9805      	ldr	r0, [sp, #20]
 810c910:	f7ff f936 	bl	810bb80 <_Bfree>
 810c914:	9805      	ldr	r0, [sp, #20]
 810c916:	4621      	mov	r1, r4
 810c918:	f7ff f932 	bl	810bb80 <_Bfree>
 810c91c:	e5f9      	b.n	810c512 <_strtod_l+0x72>
 810c91e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810c920:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 810c924:	4293      	cmp	r3, r2
 810c926:	dbbc      	blt.n	810c8a2 <_strtod_l+0x402>
 810c928:	4c41      	ldr	r4, [pc, #260]	@ (810ca30 <_strtod_l+0x590>)
 810c92a:	f1c5 050f 	rsb	r5, r5, #15
 810c92e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 810c932:	4652      	mov	r2, sl
 810c934:	465b      	mov	r3, fp
 810c936:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c93a:	f7f3 fee5 	bl	8100708 <__aeabi_dmul>
 810c93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810c940:	1b5d      	subs	r5, r3, r5
 810c942:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 810c946:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c94a:	e78f      	b.n	810c86c <_strtod_l+0x3cc>
 810c94c:	3316      	adds	r3, #22
 810c94e:	dba8      	blt.n	810c8a2 <_strtod_l+0x402>
 810c950:	4b37      	ldr	r3, [pc, #220]	@ (810ca30 <_strtod_l+0x590>)
 810c952:	eba9 0808 	sub.w	r8, r9, r8
 810c956:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 810c95a:	e9d8 2300 	ldrd	r2, r3, [r8]
 810c95e:	4650      	mov	r0, sl
 810c960:	4659      	mov	r1, fp
 810c962:	f7f3 fffb 	bl	810095c <__aeabi_ddiv>
 810c966:	e783      	b.n	810c870 <_strtod_l+0x3d0>
 810c968:	4b32      	ldr	r3, [pc, #200]	@ (810ca34 <_strtod_l+0x594>)
 810c96a:	9308      	str	r3, [sp, #32]
 810c96c:	2300      	movs	r3, #0
 810c96e:	1124      	asrs	r4, r4, #4
 810c970:	4650      	mov	r0, sl
 810c972:	4659      	mov	r1, fp
 810c974:	461e      	mov	r6, r3
 810c976:	2c01      	cmp	r4, #1
 810c978:	dc21      	bgt.n	810c9be <_strtod_l+0x51e>
 810c97a:	b10b      	cbz	r3, 810c980 <_strtod_l+0x4e0>
 810c97c:	4682      	mov	sl, r0
 810c97e:	468b      	mov	fp, r1
 810c980:	492c      	ldr	r1, [pc, #176]	@ (810ca34 <_strtod_l+0x594>)
 810c982:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 810c986:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810c98a:	4652      	mov	r2, sl
 810c98c:	465b      	mov	r3, fp
 810c98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c992:	f7f3 feb9 	bl	8100708 <__aeabi_dmul>
 810c996:	4b28      	ldr	r3, [pc, #160]	@ (810ca38 <_strtod_l+0x598>)
 810c998:	460a      	mov	r2, r1
 810c99a:	400b      	ands	r3, r1
 810c99c:	4927      	ldr	r1, [pc, #156]	@ (810ca3c <_strtod_l+0x59c>)
 810c99e:	428b      	cmp	r3, r1
 810c9a0:	4682      	mov	sl, r0
 810c9a2:	d898      	bhi.n	810c8d6 <_strtod_l+0x436>
 810c9a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 810c9a8:	428b      	cmp	r3, r1
 810c9aa:	bf86      	itte	hi
 810c9ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 810ca40 <_strtod_l+0x5a0>
 810c9b0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 810c9b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 810c9b8:	2300      	movs	r3, #0
 810c9ba:	9308      	str	r3, [sp, #32]
 810c9bc:	e07a      	b.n	810cab4 <_strtod_l+0x614>
 810c9be:	07e2      	lsls	r2, r4, #31
 810c9c0:	d505      	bpl.n	810c9ce <_strtod_l+0x52e>
 810c9c2:	9b08      	ldr	r3, [sp, #32]
 810c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9c8:	f7f3 fe9e 	bl	8100708 <__aeabi_dmul>
 810c9cc:	2301      	movs	r3, #1
 810c9ce:	9a08      	ldr	r2, [sp, #32]
 810c9d0:	3208      	adds	r2, #8
 810c9d2:	3601      	adds	r6, #1
 810c9d4:	1064      	asrs	r4, r4, #1
 810c9d6:	9208      	str	r2, [sp, #32]
 810c9d8:	e7cd      	b.n	810c976 <_strtod_l+0x4d6>
 810c9da:	d0ed      	beq.n	810c9b8 <_strtod_l+0x518>
 810c9dc:	4264      	negs	r4, r4
 810c9de:	f014 020f 	ands.w	r2, r4, #15
 810c9e2:	d00a      	beq.n	810c9fa <_strtod_l+0x55a>
 810c9e4:	4b12      	ldr	r3, [pc, #72]	@ (810ca30 <_strtod_l+0x590>)
 810c9e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810c9ea:	4650      	mov	r0, sl
 810c9ec:	4659      	mov	r1, fp
 810c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9f2:	f7f3 ffb3 	bl	810095c <__aeabi_ddiv>
 810c9f6:	4682      	mov	sl, r0
 810c9f8:	468b      	mov	fp, r1
 810c9fa:	1124      	asrs	r4, r4, #4
 810c9fc:	d0dc      	beq.n	810c9b8 <_strtod_l+0x518>
 810c9fe:	2c1f      	cmp	r4, #31
 810ca00:	dd20      	ble.n	810ca44 <_strtod_l+0x5a4>
 810ca02:	2400      	movs	r4, #0
 810ca04:	46a0      	mov	r8, r4
 810ca06:	940a      	str	r4, [sp, #40]	@ 0x28
 810ca08:	46a1      	mov	r9, r4
 810ca0a:	9a05      	ldr	r2, [sp, #20]
 810ca0c:	2322      	movs	r3, #34	@ 0x22
 810ca0e:	f04f 0a00 	mov.w	sl, #0
 810ca12:	f04f 0b00 	mov.w	fp, #0
 810ca16:	6013      	str	r3, [r2, #0]
 810ca18:	e768      	b.n	810c8ec <_strtod_l+0x44c>
 810ca1a:	bf00      	nop
 810ca1c:	0810ea19 	.word	0x0810ea19
 810ca20:	0810ec2c 	.word	0x0810ec2c
 810ca24:	0810ea11 	.word	0x0810ea11
 810ca28:	0810ea48 	.word	0x0810ea48
 810ca2c:	0810edd5 	.word	0x0810edd5
 810ca30:	0810eb60 	.word	0x0810eb60
 810ca34:	0810eb38 	.word	0x0810eb38
 810ca38:	7ff00000 	.word	0x7ff00000
 810ca3c:	7ca00000 	.word	0x7ca00000
 810ca40:	7fefffff 	.word	0x7fefffff
 810ca44:	f014 0310 	ands.w	r3, r4, #16
 810ca48:	bf18      	it	ne
 810ca4a:	236a      	movne	r3, #106	@ 0x6a
 810ca4c:	4ea9      	ldr	r6, [pc, #676]	@ (810ccf4 <_strtod_l+0x854>)
 810ca4e:	9308      	str	r3, [sp, #32]
 810ca50:	4650      	mov	r0, sl
 810ca52:	4659      	mov	r1, fp
 810ca54:	2300      	movs	r3, #0
 810ca56:	07e2      	lsls	r2, r4, #31
 810ca58:	d504      	bpl.n	810ca64 <_strtod_l+0x5c4>
 810ca5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 810ca5e:	f7f3 fe53 	bl	8100708 <__aeabi_dmul>
 810ca62:	2301      	movs	r3, #1
 810ca64:	1064      	asrs	r4, r4, #1
 810ca66:	f106 0608 	add.w	r6, r6, #8
 810ca6a:	d1f4      	bne.n	810ca56 <_strtod_l+0x5b6>
 810ca6c:	b10b      	cbz	r3, 810ca72 <_strtod_l+0x5d2>
 810ca6e:	4682      	mov	sl, r0
 810ca70:	468b      	mov	fp, r1
 810ca72:	9b08      	ldr	r3, [sp, #32]
 810ca74:	b1b3      	cbz	r3, 810caa4 <_strtod_l+0x604>
 810ca76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810ca7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810ca7e:	2b00      	cmp	r3, #0
 810ca80:	4659      	mov	r1, fp
 810ca82:	dd0f      	ble.n	810caa4 <_strtod_l+0x604>
 810ca84:	2b1f      	cmp	r3, #31
 810ca86:	dd55      	ble.n	810cb34 <_strtod_l+0x694>
 810ca88:	2b34      	cmp	r3, #52	@ 0x34
 810ca8a:	bfde      	ittt	le
 810ca8c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 810ca90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810ca94:	4093      	lslle	r3, r2
 810ca96:	f04f 0a00 	mov.w	sl, #0
 810ca9a:	bfcc      	ite	gt
 810ca9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 810caa0:	ea03 0b01 	andle.w	fp, r3, r1
 810caa4:	2200      	movs	r2, #0
 810caa6:	2300      	movs	r3, #0
 810caa8:	4650      	mov	r0, sl
 810caaa:	4659      	mov	r1, fp
 810caac:	f7f4 f894 	bl	8100bd8 <__aeabi_dcmpeq>
 810cab0:	2800      	cmp	r0, #0
 810cab2:	d1a6      	bne.n	810ca02 <_strtod_l+0x562>
 810cab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810cab6:	9300      	str	r3, [sp, #0]
 810cab8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810caba:	9805      	ldr	r0, [sp, #20]
 810cabc:	462b      	mov	r3, r5
 810cabe:	463a      	mov	r2, r7
 810cac0:	f7ff f8c6 	bl	810bc50 <__s2b>
 810cac4:	900a      	str	r0, [sp, #40]	@ 0x28
 810cac6:	2800      	cmp	r0, #0
 810cac8:	f43f af05 	beq.w	810c8d6 <_strtod_l+0x436>
 810cacc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810cace:	2a00      	cmp	r2, #0
 810cad0:	eba9 0308 	sub.w	r3, r9, r8
 810cad4:	bfa8      	it	ge
 810cad6:	2300      	movge	r3, #0
 810cad8:	9312      	str	r3, [sp, #72]	@ 0x48
 810cada:	2400      	movs	r4, #0
 810cadc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810cae0:	9316      	str	r3, [sp, #88]	@ 0x58
 810cae2:	46a0      	mov	r8, r4
 810cae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810cae6:	9805      	ldr	r0, [sp, #20]
 810cae8:	6859      	ldr	r1, [r3, #4]
 810caea:	f7ff f809 	bl	810bb00 <_Balloc>
 810caee:	4681      	mov	r9, r0
 810caf0:	2800      	cmp	r0, #0
 810caf2:	f43f aef4 	beq.w	810c8de <_strtod_l+0x43e>
 810caf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810caf8:	691a      	ldr	r2, [r3, #16]
 810cafa:	3202      	adds	r2, #2
 810cafc:	f103 010c 	add.w	r1, r3, #12
 810cb00:	0092      	lsls	r2, r2, #2
 810cb02:	300c      	adds	r0, #12
 810cb04:	f7fe f89b 	bl	810ac3e <memcpy>
 810cb08:	ec4b ab10 	vmov	d0, sl, fp
 810cb0c:	9805      	ldr	r0, [sp, #20]
 810cb0e:	aa1c      	add	r2, sp, #112	@ 0x70
 810cb10:	a91b      	add	r1, sp, #108	@ 0x6c
 810cb12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810cb16:	f7ff fbd7 	bl	810c2c8 <__d2b>
 810cb1a:	901a      	str	r0, [sp, #104]	@ 0x68
 810cb1c:	2800      	cmp	r0, #0
 810cb1e:	f43f aede 	beq.w	810c8de <_strtod_l+0x43e>
 810cb22:	9805      	ldr	r0, [sp, #20]
 810cb24:	2101      	movs	r1, #1
 810cb26:	f7ff f929 	bl	810bd7c <__i2b>
 810cb2a:	4680      	mov	r8, r0
 810cb2c:	b948      	cbnz	r0, 810cb42 <_strtod_l+0x6a2>
 810cb2e:	f04f 0800 	mov.w	r8, #0
 810cb32:	e6d4      	b.n	810c8de <_strtod_l+0x43e>
 810cb34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810cb38:	fa02 f303 	lsl.w	r3, r2, r3
 810cb3c:	ea03 0a0a 	and.w	sl, r3, sl
 810cb40:	e7b0      	b.n	810caa4 <_strtod_l+0x604>
 810cb42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810cb44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810cb46:	2d00      	cmp	r5, #0
 810cb48:	bfab      	itete	ge
 810cb4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 810cb4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 810cb4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 810cb50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810cb52:	bfac      	ite	ge
 810cb54:	18ef      	addge	r7, r5, r3
 810cb56:	1b5e      	sublt	r6, r3, r5
 810cb58:	9b08      	ldr	r3, [sp, #32]
 810cb5a:	1aed      	subs	r5, r5, r3
 810cb5c:	4415      	add	r5, r2
 810cb5e:	4b66      	ldr	r3, [pc, #408]	@ (810ccf8 <_strtod_l+0x858>)
 810cb60:	3d01      	subs	r5, #1
 810cb62:	429d      	cmp	r5, r3
 810cb64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 810cb68:	da50      	bge.n	810cc0c <_strtod_l+0x76c>
 810cb6a:	1b5b      	subs	r3, r3, r5
 810cb6c:	2b1f      	cmp	r3, #31
 810cb6e:	eba2 0203 	sub.w	r2, r2, r3
 810cb72:	f04f 0101 	mov.w	r1, #1
 810cb76:	dc3d      	bgt.n	810cbf4 <_strtod_l+0x754>
 810cb78:	fa01 f303 	lsl.w	r3, r1, r3
 810cb7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810cb7e:	2300      	movs	r3, #0
 810cb80:	9310      	str	r3, [sp, #64]	@ 0x40
 810cb82:	18bd      	adds	r5, r7, r2
 810cb84:	9b08      	ldr	r3, [sp, #32]
 810cb86:	42af      	cmp	r7, r5
 810cb88:	4416      	add	r6, r2
 810cb8a:	441e      	add	r6, r3
 810cb8c:	463b      	mov	r3, r7
 810cb8e:	bfa8      	it	ge
 810cb90:	462b      	movge	r3, r5
 810cb92:	42b3      	cmp	r3, r6
 810cb94:	bfa8      	it	ge
 810cb96:	4633      	movge	r3, r6
 810cb98:	2b00      	cmp	r3, #0
 810cb9a:	bfc2      	ittt	gt
 810cb9c:	1aed      	subgt	r5, r5, r3
 810cb9e:	1af6      	subgt	r6, r6, r3
 810cba0:	1aff      	subgt	r7, r7, r3
 810cba2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810cba4:	2b00      	cmp	r3, #0
 810cba6:	dd16      	ble.n	810cbd6 <_strtod_l+0x736>
 810cba8:	4641      	mov	r1, r8
 810cbaa:	9805      	ldr	r0, [sp, #20]
 810cbac:	461a      	mov	r2, r3
 810cbae:	f7ff f9a5 	bl	810befc <__pow5mult>
 810cbb2:	4680      	mov	r8, r0
 810cbb4:	2800      	cmp	r0, #0
 810cbb6:	d0ba      	beq.n	810cb2e <_strtod_l+0x68e>
 810cbb8:	4601      	mov	r1, r0
 810cbba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810cbbc:	9805      	ldr	r0, [sp, #20]
 810cbbe:	f7ff f8f3 	bl	810bda8 <__multiply>
 810cbc2:	900e      	str	r0, [sp, #56]	@ 0x38
 810cbc4:	2800      	cmp	r0, #0
 810cbc6:	f43f ae8a 	beq.w	810c8de <_strtod_l+0x43e>
 810cbca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810cbcc:	9805      	ldr	r0, [sp, #20]
 810cbce:	f7fe ffd7 	bl	810bb80 <_Bfree>
 810cbd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810cbd4:	931a      	str	r3, [sp, #104]	@ 0x68
 810cbd6:	2d00      	cmp	r5, #0
 810cbd8:	dc1d      	bgt.n	810cc16 <_strtod_l+0x776>
 810cbda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810cbdc:	2b00      	cmp	r3, #0
 810cbde:	dd23      	ble.n	810cc28 <_strtod_l+0x788>
 810cbe0:	4649      	mov	r1, r9
 810cbe2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 810cbe4:	9805      	ldr	r0, [sp, #20]
 810cbe6:	f7ff f989 	bl	810befc <__pow5mult>
 810cbea:	4681      	mov	r9, r0
 810cbec:	b9e0      	cbnz	r0, 810cc28 <_strtod_l+0x788>
 810cbee:	f04f 0900 	mov.w	r9, #0
 810cbf2:	e674      	b.n	810c8de <_strtod_l+0x43e>
 810cbf4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 810cbf8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810cbfc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 810cc00:	35e2      	adds	r5, #226	@ 0xe2
 810cc02:	fa01 f305 	lsl.w	r3, r1, r5
 810cc06:	9310      	str	r3, [sp, #64]	@ 0x40
 810cc08:	9113      	str	r1, [sp, #76]	@ 0x4c
 810cc0a:	e7ba      	b.n	810cb82 <_strtod_l+0x6e2>
 810cc0c:	2300      	movs	r3, #0
 810cc0e:	9310      	str	r3, [sp, #64]	@ 0x40
 810cc10:	2301      	movs	r3, #1
 810cc12:	9313      	str	r3, [sp, #76]	@ 0x4c
 810cc14:	e7b5      	b.n	810cb82 <_strtod_l+0x6e2>
 810cc16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810cc18:	9805      	ldr	r0, [sp, #20]
 810cc1a:	462a      	mov	r2, r5
 810cc1c:	f7ff f9c8 	bl	810bfb0 <__lshift>
 810cc20:	901a      	str	r0, [sp, #104]	@ 0x68
 810cc22:	2800      	cmp	r0, #0
 810cc24:	d1d9      	bne.n	810cbda <_strtod_l+0x73a>
 810cc26:	e65a      	b.n	810c8de <_strtod_l+0x43e>
 810cc28:	2e00      	cmp	r6, #0
 810cc2a:	dd07      	ble.n	810cc3c <_strtod_l+0x79c>
 810cc2c:	4649      	mov	r1, r9
 810cc2e:	9805      	ldr	r0, [sp, #20]
 810cc30:	4632      	mov	r2, r6
 810cc32:	f7ff f9bd 	bl	810bfb0 <__lshift>
 810cc36:	4681      	mov	r9, r0
 810cc38:	2800      	cmp	r0, #0
 810cc3a:	d0d8      	beq.n	810cbee <_strtod_l+0x74e>
 810cc3c:	2f00      	cmp	r7, #0
 810cc3e:	dd08      	ble.n	810cc52 <_strtod_l+0x7b2>
 810cc40:	4641      	mov	r1, r8
 810cc42:	9805      	ldr	r0, [sp, #20]
 810cc44:	463a      	mov	r2, r7
 810cc46:	f7ff f9b3 	bl	810bfb0 <__lshift>
 810cc4a:	4680      	mov	r8, r0
 810cc4c:	2800      	cmp	r0, #0
 810cc4e:	f43f ae46 	beq.w	810c8de <_strtod_l+0x43e>
 810cc52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810cc54:	9805      	ldr	r0, [sp, #20]
 810cc56:	464a      	mov	r2, r9
 810cc58:	f7ff fa32 	bl	810c0c0 <__mdiff>
 810cc5c:	4604      	mov	r4, r0
 810cc5e:	2800      	cmp	r0, #0
 810cc60:	f43f ae3d 	beq.w	810c8de <_strtod_l+0x43e>
 810cc64:	68c3      	ldr	r3, [r0, #12]
 810cc66:	930f      	str	r3, [sp, #60]	@ 0x3c
 810cc68:	2300      	movs	r3, #0
 810cc6a:	60c3      	str	r3, [r0, #12]
 810cc6c:	4641      	mov	r1, r8
 810cc6e:	f7ff fa0b 	bl	810c088 <__mcmp>
 810cc72:	2800      	cmp	r0, #0
 810cc74:	da46      	bge.n	810cd04 <_strtod_l+0x864>
 810cc76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cc78:	ea53 030a 	orrs.w	r3, r3, sl
 810cc7c:	d16c      	bne.n	810cd58 <_strtod_l+0x8b8>
 810cc7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cc82:	2b00      	cmp	r3, #0
 810cc84:	d168      	bne.n	810cd58 <_strtod_l+0x8b8>
 810cc86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cc8a:	0d1b      	lsrs	r3, r3, #20
 810cc8c:	051b      	lsls	r3, r3, #20
 810cc8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810cc92:	d961      	bls.n	810cd58 <_strtod_l+0x8b8>
 810cc94:	6963      	ldr	r3, [r4, #20]
 810cc96:	b913      	cbnz	r3, 810cc9e <_strtod_l+0x7fe>
 810cc98:	6923      	ldr	r3, [r4, #16]
 810cc9a:	2b01      	cmp	r3, #1
 810cc9c:	dd5c      	ble.n	810cd58 <_strtod_l+0x8b8>
 810cc9e:	4621      	mov	r1, r4
 810cca0:	2201      	movs	r2, #1
 810cca2:	9805      	ldr	r0, [sp, #20]
 810cca4:	f7ff f984 	bl	810bfb0 <__lshift>
 810cca8:	4641      	mov	r1, r8
 810ccaa:	4604      	mov	r4, r0
 810ccac:	f7ff f9ec 	bl	810c088 <__mcmp>
 810ccb0:	2800      	cmp	r0, #0
 810ccb2:	dd51      	ble.n	810cd58 <_strtod_l+0x8b8>
 810ccb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810ccb8:	9a08      	ldr	r2, [sp, #32]
 810ccba:	0d1b      	lsrs	r3, r3, #20
 810ccbc:	051b      	lsls	r3, r3, #20
 810ccbe:	2a00      	cmp	r2, #0
 810ccc0:	d06b      	beq.n	810cd9a <_strtod_l+0x8fa>
 810ccc2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810ccc6:	d868      	bhi.n	810cd9a <_strtod_l+0x8fa>
 810ccc8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810cccc:	f67f ae9d 	bls.w	810ca0a <_strtod_l+0x56a>
 810ccd0:	4b0a      	ldr	r3, [pc, #40]	@ (810ccfc <_strtod_l+0x85c>)
 810ccd2:	4650      	mov	r0, sl
 810ccd4:	4659      	mov	r1, fp
 810ccd6:	2200      	movs	r2, #0
 810ccd8:	f7f3 fd16 	bl	8100708 <__aeabi_dmul>
 810ccdc:	4b08      	ldr	r3, [pc, #32]	@ (810cd00 <_strtod_l+0x860>)
 810ccde:	400b      	ands	r3, r1
 810cce0:	4682      	mov	sl, r0
 810cce2:	468b      	mov	fp, r1
 810cce4:	2b00      	cmp	r3, #0
 810cce6:	f47f ae05 	bne.w	810c8f4 <_strtod_l+0x454>
 810ccea:	9a05      	ldr	r2, [sp, #20]
 810ccec:	2322      	movs	r3, #34	@ 0x22
 810ccee:	6013      	str	r3, [r2, #0]
 810ccf0:	e600      	b.n	810c8f4 <_strtod_l+0x454>
 810ccf2:	bf00      	nop
 810ccf4:	0810ec58 	.word	0x0810ec58
 810ccf8:	fffffc02 	.word	0xfffffc02
 810ccfc:	39500000 	.word	0x39500000
 810cd00:	7ff00000 	.word	0x7ff00000
 810cd04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cd08:	d165      	bne.n	810cdd6 <_strtod_l+0x936>
 810cd0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 810cd0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810cd10:	b35a      	cbz	r2, 810cd6a <_strtod_l+0x8ca>
 810cd12:	4a9f      	ldr	r2, [pc, #636]	@ (810cf90 <_strtod_l+0xaf0>)
 810cd14:	4293      	cmp	r3, r2
 810cd16:	d12b      	bne.n	810cd70 <_strtod_l+0x8d0>
 810cd18:	9b08      	ldr	r3, [sp, #32]
 810cd1a:	4651      	mov	r1, sl
 810cd1c:	b303      	cbz	r3, 810cd60 <_strtod_l+0x8c0>
 810cd1e:	4b9d      	ldr	r3, [pc, #628]	@ (810cf94 <_strtod_l+0xaf4>)
 810cd20:	465a      	mov	r2, fp
 810cd22:	4013      	ands	r3, r2
 810cd24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 810cd28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810cd2c:	d81b      	bhi.n	810cd66 <_strtod_l+0x8c6>
 810cd2e:	0d1b      	lsrs	r3, r3, #20
 810cd30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810cd34:	fa02 f303 	lsl.w	r3, r2, r3
 810cd38:	4299      	cmp	r1, r3
 810cd3a:	d119      	bne.n	810cd70 <_strtod_l+0x8d0>
 810cd3c:	4b96      	ldr	r3, [pc, #600]	@ (810cf98 <_strtod_l+0xaf8>)
 810cd3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cd40:	429a      	cmp	r2, r3
 810cd42:	d102      	bne.n	810cd4a <_strtod_l+0x8aa>
 810cd44:	3101      	adds	r1, #1
 810cd46:	f43f adca 	beq.w	810c8de <_strtod_l+0x43e>
 810cd4a:	4b92      	ldr	r3, [pc, #584]	@ (810cf94 <_strtod_l+0xaf4>)
 810cd4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cd4e:	401a      	ands	r2, r3
 810cd50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810cd54:	f04f 0a00 	mov.w	sl, #0
 810cd58:	9b08      	ldr	r3, [sp, #32]
 810cd5a:	2b00      	cmp	r3, #0
 810cd5c:	d1b8      	bne.n	810ccd0 <_strtod_l+0x830>
 810cd5e:	e5c9      	b.n	810c8f4 <_strtod_l+0x454>
 810cd60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810cd64:	e7e8      	b.n	810cd38 <_strtod_l+0x898>
 810cd66:	4613      	mov	r3, r2
 810cd68:	e7e6      	b.n	810cd38 <_strtod_l+0x898>
 810cd6a:	ea53 030a 	orrs.w	r3, r3, sl
 810cd6e:	d0a1      	beq.n	810ccb4 <_strtod_l+0x814>
 810cd70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810cd72:	b1db      	cbz	r3, 810cdac <_strtod_l+0x90c>
 810cd74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810cd76:	4213      	tst	r3, r2
 810cd78:	d0ee      	beq.n	810cd58 <_strtod_l+0x8b8>
 810cd7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cd7c:	9a08      	ldr	r2, [sp, #32]
 810cd7e:	4650      	mov	r0, sl
 810cd80:	4659      	mov	r1, fp
 810cd82:	b1bb      	cbz	r3, 810cdb4 <_strtod_l+0x914>
 810cd84:	f7ff fb6e 	bl	810c464 <sulp>
 810cd88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cd8c:	ec53 2b10 	vmov	r2, r3, d0
 810cd90:	f7f3 fb04 	bl	810039c <__adddf3>
 810cd94:	4682      	mov	sl, r0
 810cd96:	468b      	mov	fp, r1
 810cd98:	e7de      	b.n	810cd58 <_strtod_l+0x8b8>
 810cd9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810cd9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810cda2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810cda6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810cdaa:	e7d5      	b.n	810cd58 <_strtod_l+0x8b8>
 810cdac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810cdae:	ea13 0f0a 	tst.w	r3, sl
 810cdb2:	e7e1      	b.n	810cd78 <_strtod_l+0x8d8>
 810cdb4:	f7ff fb56 	bl	810c464 <sulp>
 810cdb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cdbc:	ec53 2b10 	vmov	r2, r3, d0
 810cdc0:	f7f3 faea 	bl	8100398 <__aeabi_dsub>
 810cdc4:	2200      	movs	r2, #0
 810cdc6:	2300      	movs	r3, #0
 810cdc8:	4682      	mov	sl, r0
 810cdca:	468b      	mov	fp, r1
 810cdcc:	f7f3 ff04 	bl	8100bd8 <__aeabi_dcmpeq>
 810cdd0:	2800      	cmp	r0, #0
 810cdd2:	d0c1      	beq.n	810cd58 <_strtod_l+0x8b8>
 810cdd4:	e619      	b.n	810ca0a <_strtod_l+0x56a>
 810cdd6:	4641      	mov	r1, r8
 810cdd8:	4620      	mov	r0, r4
 810cdda:	f7ff facd 	bl	810c378 <__ratio>
 810cdde:	ec57 6b10 	vmov	r6, r7, d0
 810cde2:	2200      	movs	r2, #0
 810cde4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 810cde8:	4630      	mov	r0, r6
 810cdea:	4639      	mov	r1, r7
 810cdec:	f7f3 ff08 	bl	8100c00 <__aeabi_dcmple>
 810cdf0:	2800      	cmp	r0, #0
 810cdf2:	d06f      	beq.n	810ced4 <_strtod_l+0xa34>
 810cdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cdf6:	2b00      	cmp	r3, #0
 810cdf8:	d17a      	bne.n	810cef0 <_strtod_l+0xa50>
 810cdfa:	f1ba 0f00 	cmp.w	sl, #0
 810cdfe:	d158      	bne.n	810ceb2 <_strtod_l+0xa12>
 810ce00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ce02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810ce06:	2b00      	cmp	r3, #0
 810ce08:	d15a      	bne.n	810cec0 <_strtod_l+0xa20>
 810ce0a:	4b64      	ldr	r3, [pc, #400]	@ (810cf9c <_strtod_l+0xafc>)
 810ce0c:	2200      	movs	r2, #0
 810ce0e:	4630      	mov	r0, r6
 810ce10:	4639      	mov	r1, r7
 810ce12:	f7f3 feeb 	bl	8100bec <__aeabi_dcmplt>
 810ce16:	2800      	cmp	r0, #0
 810ce18:	d159      	bne.n	810cece <_strtod_l+0xa2e>
 810ce1a:	4630      	mov	r0, r6
 810ce1c:	4639      	mov	r1, r7
 810ce1e:	4b60      	ldr	r3, [pc, #384]	@ (810cfa0 <_strtod_l+0xb00>)
 810ce20:	2200      	movs	r2, #0
 810ce22:	f7f3 fc71 	bl	8100708 <__aeabi_dmul>
 810ce26:	4606      	mov	r6, r0
 810ce28:	460f      	mov	r7, r1
 810ce2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 810ce2e:	9606      	str	r6, [sp, #24]
 810ce30:	9307      	str	r3, [sp, #28]
 810ce32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ce36:	4d57      	ldr	r5, [pc, #348]	@ (810cf94 <_strtod_l+0xaf4>)
 810ce38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810ce3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ce3e:	401d      	ands	r5, r3
 810ce40:	4b58      	ldr	r3, [pc, #352]	@ (810cfa4 <_strtod_l+0xb04>)
 810ce42:	429d      	cmp	r5, r3
 810ce44:	f040 80b2 	bne.w	810cfac <_strtod_l+0xb0c>
 810ce48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ce4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 810ce4e:	ec4b ab10 	vmov	d0, sl, fp
 810ce52:	f7ff f9c9 	bl	810c1e8 <__ulp>
 810ce56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ce5a:	ec51 0b10 	vmov	r0, r1, d0
 810ce5e:	f7f3 fc53 	bl	8100708 <__aeabi_dmul>
 810ce62:	4652      	mov	r2, sl
 810ce64:	465b      	mov	r3, fp
 810ce66:	f7f3 fa99 	bl	810039c <__adddf3>
 810ce6a:	460b      	mov	r3, r1
 810ce6c:	4949      	ldr	r1, [pc, #292]	@ (810cf94 <_strtod_l+0xaf4>)
 810ce6e:	4a4e      	ldr	r2, [pc, #312]	@ (810cfa8 <_strtod_l+0xb08>)
 810ce70:	4019      	ands	r1, r3
 810ce72:	4291      	cmp	r1, r2
 810ce74:	4682      	mov	sl, r0
 810ce76:	d942      	bls.n	810cefe <_strtod_l+0xa5e>
 810ce78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 810ce7a:	4b47      	ldr	r3, [pc, #284]	@ (810cf98 <_strtod_l+0xaf8>)
 810ce7c:	429a      	cmp	r2, r3
 810ce7e:	d103      	bne.n	810ce88 <_strtod_l+0x9e8>
 810ce80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810ce82:	3301      	adds	r3, #1
 810ce84:	f43f ad2b 	beq.w	810c8de <_strtod_l+0x43e>
 810ce88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 810cf98 <_strtod_l+0xaf8>
 810ce8c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810ce90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810ce92:	9805      	ldr	r0, [sp, #20]
 810ce94:	f7fe fe74 	bl	810bb80 <_Bfree>
 810ce98:	9805      	ldr	r0, [sp, #20]
 810ce9a:	4649      	mov	r1, r9
 810ce9c:	f7fe fe70 	bl	810bb80 <_Bfree>
 810cea0:	9805      	ldr	r0, [sp, #20]
 810cea2:	4641      	mov	r1, r8
 810cea4:	f7fe fe6c 	bl	810bb80 <_Bfree>
 810cea8:	9805      	ldr	r0, [sp, #20]
 810ceaa:	4621      	mov	r1, r4
 810ceac:	f7fe fe68 	bl	810bb80 <_Bfree>
 810ceb0:	e618      	b.n	810cae4 <_strtod_l+0x644>
 810ceb2:	f1ba 0f01 	cmp.w	sl, #1
 810ceb6:	d103      	bne.n	810cec0 <_strtod_l+0xa20>
 810ceb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810ceba:	2b00      	cmp	r3, #0
 810cebc:	f43f ada5 	beq.w	810ca0a <_strtod_l+0x56a>
 810cec0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 810cf70 <_strtod_l+0xad0>
 810cec4:	4f35      	ldr	r7, [pc, #212]	@ (810cf9c <_strtod_l+0xafc>)
 810cec6:	ed8d 7b06 	vstr	d7, [sp, #24]
 810ceca:	2600      	movs	r6, #0
 810cecc:	e7b1      	b.n	810ce32 <_strtod_l+0x992>
 810cece:	4f34      	ldr	r7, [pc, #208]	@ (810cfa0 <_strtod_l+0xb00>)
 810ced0:	2600      	movs	r6, #0
 810ced2:	e7aa      	b.n	810ce2a <_strtod_l+0x98a>
 810ced4:	4b32      	ldr	r3, [pc, #200]	@ (810cfa0 <_strtod_l+0xb00>)
 810ced6:	4630      	mov	r0, r6
 810ced8:	4639      	mov	r1, r7
 810ceda:	2200      	movs	r2, #0
 810cedc:	f7f3 fc14 	bl	8100708 <__aeabi_dmul>
 810cee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cee2:	4606      	mov	r6, r0
 810cee4:	460f      	mov	r7, r1
 810cee6:	2b00      	cmp	r3, #0
 810cee8:	d09f      	beq.n	810ce2a <_strtod_l+0x98a>
 810ceea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810ceee:	e7a0      	b.n	810ce32 <_strtod_l+0x992>
 810cef0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 810cf78 <_strtod_l+0xad8>
 810cef4:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cef8:	ec57 6b17 	vmov	r6, r7, d7
 810cefc:	e799      	b.n	810ce32 <_strtod_l+0x992>
 810cefe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 810cf02:	9b08      	ldr	r3, [sp, #32]
 810cf04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 810cf08:	2b00      	cmp	r3, #0
 810cf0a:	d1c1      	bne.n	810ce90 <_strtod_l+0x9f0>
 810cf0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810cf10:	0d1b      	lsrs	r3, r3, #20
 810cf12:	051b      	lsls	r3, r3, #20
 810cf14:	429d      	cmp	r5, r3
 810cf16:	d1bb      	bne.n	810ce90 <_strtod_l+0x9f0>
 810cf18:	4630      	mov	r0, r6
 810cf1a:	4639      	mov	r1, r7
 810cf1c:	f7f3 ff54 	bl	8100dc8 <__aeabi_d2lz>
 810cf20:	f7f3 fbc4 	bl	81006ac <__aeabi_l2d>
 810cf24:	4602      	mov	r2, r0
 810cf26:	460b      	mov	r3, r1
 810cf28:	4630      	mov	r0, r6
 810cf2a:	4639      	mov	r1, r7
 810cf2c:	f7f3 fa34 	bl	8100398 <__aeabi_dsub>
 810cf30:	460b      	mov	r3, r1
 810cf32:	4602      	mov	r2, r0
 810cf34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 810cf38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 810cf3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cf3e:	ea46 060a 	orr.w	r6, r6, sl
 810cf42:	431e      	orrs	r6, r3
 810cf44:	d06f      	beq.n	810d026 <_strtod_l+0xb86>
 810cf46:	a30e      	add	r3, pc, #56	@ (adr r3, 810cf80 <_strtod_l+0xae0>)
 810cf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf4c:	f7f3 fe4e 	bl	8100bec <__aeabi_dcmplt>
 810cf50:	2800      	cmp	r0, #0
 810cf52:	f47f accf 	bne.w	810c8f4 <_strtod_l+0x454>
 810cf56:	a30c      	add	r3, pc, #48	@ (adr r3, 810cf88 <_strtod_l+0xae8>)
 810cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810cf60:	f7f3 fe62 	bl	8100c28 <__aeabi_dcmpgt>
 810cf64:	2800      	cmp	r0, #0
 810cf66:	d093      	beq.n	810ce90 <_strtod_l+0x9f0>
 810cf68:	e4c4      	b.n	810c8f4 <_strtod_l+0x454>
 810cf6a:	bf00      	nop
 810cf6c:	f3af 8000 	nop.w
 810cf70:	00000000 	.word	0x00000000
 810cf74:	bff00000 	.word	0xbff00000
 810cf78:	00000000 	.word	0x00000000
 810cf7c:	3ff00000 	.word	0x3ff00000
 810cf80:	94a03595 	.word	0x94a03595
 810cf84:	3fdfffff 	.word	0x3fdfffff
 810cf88:	35afe535 	.word	0x35afe535
 810cf8c:	3fe00000 	.word	0x3fe00000
 810cf90:	000fffff 	.word	0x000fffff
 810cf94:	7ff00000 	.word	0x7ff00000
 810cf98:	7fefffff 	.word	0x7fefffff
 810cf9c:	3ff00000 	.word	0x3ff00000
 810cfa0:	3fe00000 	.word	0x3fe00000
 810cfa4:	7fe00000 	.word	0x7fe00000
 810cfa8:	7c9fffff 	.word	0x7c9fffff
 810cfac:	9b08      	ldr	r3, [sp, #32]
 810cfae:	b323      	cbz	r3, 810cffa <_strtod_l+0xb5a>
 810cfb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 810cfb4:	d821      	bhi.n	810cffa <_strtod_l+0xb5a>
 810cfb6:	a328      	add	r3, pc, #160	@ (adr r3, 810d058 <_strtod_l+0xbb8>)
 810cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfbc:	4630      	mov	r0, r6
 810cfbe:	4639      	mov	r1, r7
 810cfc0:	f7f3 fe1e 	bl	8100c00 <__aeabi_dcmple>
 810cfc4:	b1a0      	cbz	r0, 810cff0 <_strtod_l+0xb50>
 810cfc6:	4639      	mov	r1, r7
 810cfc8:	4630      	mov	r0, r6
 810cfca:	f7f3 fe75 	bl	8100cb8 <__aeabi_d2uiz>
 810cfce:	2801      	cmp	r0, #1
 810cfd0:	bf38      	it	cc
 810cfd2:	2001      	movcc	r0, #1
 810cfd4:	f7f3 fb1e 	bl	8100614 <__aeabi_ui2d>
 810cfd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810cfda:	4606      	mov	r6, r0
 810cfdc:	460f      	mov	r7, r1
 810cfde:	b9fb      	cbnz	r3, 810d020 <_strtod_l+0xb80>
 810cfe0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 810cfe4:	9014      	str	r0, [sp, #80]	@ 0x50
 810cfe6:	9315      	str	r3, [sp, #84]	@ 0x54
 810cfe8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 810cfec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 810cff0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 810cff2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 810cff6:	1b5b      	subs	r3, r3, r5
 810cff8:	9311      	str	r3, [sp, #68]	@ 0x44
 810cffa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 810cffe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 810d002:	f7ff f8f1 	bl	810c1e8 <__ulp>
 810d006:	4650      	mov	r0, sl
 810d008:	ec53 2b10 	vmov	r2, r3, d0
 810d00c:	4659      	mov	r1, fp
 810d00e:	f7f3 fb7b 	bl	8100708 <__aeabi_dmul>
 810d012:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810d016:	f7f3 f9c1 	bl	810039c <__adddf3>
 810d01a:	4682      	mov	sl, r0
 810d01c:	468b      	mov	fp, r1
 810d01e:	e770      	b.n	810cf02 <_strtod_l+0xa62>
 810d020:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810d024:	e7e0      	b.n	810cfe8 <_strtod_l+0xb48>
 810d026:	a30e      	add	r3, pc, #56	@ (adr r3, 810d060 <_strtod_l+0xbc0>)
 810d028:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d02c:	f7f3 fdde 	bl	8100bec <__aeabi_dcmplt>
 810d030:	e798      	b.n	810cf64 <_strtod_l+0xac4>
 810d032:	2300      	movs	r3, #0
 810d034:	930b      	str	r3, [sp, #44]	@ 0x2c
 810d036:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 810d038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810d03a:	6013      	str	r3, [r2, #0]
 810d03c:	f7ff ba6d 	b.w	810c51a <_strtod_l+0x7a>
 810d040:	2a65      	cmp	r2, #101	@ 0x65
 810d042:	f43f ab66 	beq.w	810c712 <_strtod_l+0x272>
 810d046:	2a45      	cmp	r2, #69	@ 0x45
 810d048:	f43f ab63 	beq.w	810c712 <_strtod_l+0x272>
 810d04c:	2301      	movs	r3, #1
 810d04e:	f7ff bb9e 	b.w	810c78e <_strtod_l+0x2ee>
 810d052:	bf00      	nop
 810d054:	f3af 8000 	nop.w
 810d058:	ffc00000 	.word	0xffc00000
 810d05c:	41dfffff 	.word	0x41dfffff
 810d060:	94a03595 	.word	0x94a03595
 810d064:	3fcfffff 	.word	0x3fcfffff

0810d068 <_strtod_r>:
 810d068:	4b01      	ldr	r3, [pc, #4]	@ (810d070 <_strtod_r+0x8>)
 810d06a:	f7ff ba19 	b.w	810c4a0 <_strtod_l>
 810d06e:	bf00      	nop
 810d070:	100000ac 	.word	0x100000ac

0810d074 <_strtol_l.constprop.0>:
 810d074:	2b24      	cmp	r3, #36	@ 0x24
 810d076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d07a:	4686      	mov	lr, r0
 810d07c:	4690      	mov	r8, r2
 810d07e:	d801      	bhi.n	810d084 <_strtol_l.constprop.0+0x10>
 810d080:	2b01      	cmp	r3, #1
 810d082:	d106      	bne.n	810d092 <_strtol_l.constprop.0+0x1e>
 810d084:	f7fd fdae 	bl	810abe4 <__errno>
 810d088:	2316      	movs	r3, #22
 810d08a:	6003      	str	r3, [r0, #0]
 810d08c:	2000      	movs	r0, #0
 810d08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d092:	4834      	ldr	r0, [pc, #208]	@ (810d164 <_strtol_l.constprop.0+0xf0>)
 810d094:	460d      	mov	r5, r1
 810d096:	462a      	mov	r2, r5
 810d098:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d09c:	5d06      	ldrb	r6, [r0, r4]
 810d09e:	f016 0608 	ands.w	r6, r6, #8
 810d0a2:	d1f8      	bne.n	810d096 <_strtol_l.constprop.0+0x22>
 810d0a4:	2c2d      	cmp	r4, #45	@ 0x2d
 810d0a6:	d12d      	bne.n	810d104 <_strtol_l.constprop.0+0x90>
 810d0a8:	782c      	ldrb	r4, [r5, #0]
 810d0aa:	2601      	movs	r6, #1
 810d0ac:	1c95      	adds	r5, r2, #2
 810d0ae:	f033 0210 	bics.w	r2, r3, #16
 810d0b2:	d109      	bne.n	810d0c8 <_strtol_l.constprop.0+0x54>
 810d0b4:	2c30      	cmp	r4, #48	@ 0x30
 810d0b6:	d12a      	bne.n	810d10e <_strtol_l.constprop.0+0x9a>
 810d0b8:	782a      	ldrb	r2, [r5, #0]
 810d0ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 810d0be:	2a58      	cmp	r2, #88	@ 0x58
 810d0c0:	d125      	bne.n	810d10e <_strtol_l.constprop.0+0x9a>
 810d0c2:	786c      	ldrb	r4, [r5, #1]
 810d0c4:	2310      	movs	r3, #16
 810d0c6:	3502      	adds	r5, #2
 810d0c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 810d0cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 810d0d0:	2200      	movs	r2, #0
 810d0d2:	fbbc f9f3 	udiv	r9, ip, r3
 810d0d6:	4610      	mov	r0, r2
 810d0d8:	fb03 ca19 	mls	sl, r3, r9, ip
 810d0dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 810d0e0:	2f09      	cmp	r7, #9
 810d0e2:	d81b      	bhi.n	810d11c <_strtol_l.constprop.0+0xa8>
 810d0e4:	463c      	mov	r4, r7
 810d0e6:	42a3      	cmp	r3, r4
 810d0e8:	dd27      	ble.n	810d13a <_strtol_l.constprop.0+0xc6>
 810d0ea:	1c57      	adds	r7, r2, #1
 810d0ec:	d007      	beq.n	810d0fe <_strtol_l.constprop.0+0x8a>
 810d0ee:	4581      	cmp	r9, r0
 810d0f0:	d320      	bcc.n	810d134 <_strtol_l.constprop.0+0xc0>
 810d0f2:	d101      	bne.n	810d0f8 <_strtol_l.constprop.0+0x84>
 810d0f4:	45a2      	cmp	sl, r4
 810d0f6:	db1d      	blt.n	810d134 <_strtol_l.constprop.0+0xc0>
 810d0f8:	fb00 4003 	mla	r0, r0, r3, r4
 810d0fc:	2201      	movs	r2, #1
 810d0fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d102:	e7eb      	b.n	810d0dc <_strtol_l.constprop.0+0x68>
 810d104:	2c2b      	cmp	r4, #43	@ 0x2b
 810d106:	bf04      	itt	eq
 810d108:	782c      	ldrbeq	r4, [r5, #0]
 810d10a:	1c95      	addeq	r5, r2, #2
 810d10c:	e7cf      	b.n	810d0ae <_strtol_l.constprop.0+0x3a>
 810d10e:	2b00      	cmp	r3, #0
 810d110:	d1da      	bne.n	810d0c8 <_strtol_l.constprop.0+0x54>
 810d112:	2c30      	cmp	r4, #48	@ 0x30
 810d114:	bf0c      	ite	eq
 810d116:	2308      	moveq	r3, #8
 810d118:	230a      	movne	r3, #10
 810d11a:	e7d5      	b.n	810d0c8 <_strtol_l.constprop.0+0x54>
 810d11c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 810d120:	2f19      	cmp	r7, #25
 810d122:	d801      	bhi.n	810d128 <_strtol_l.constprop.0+0xb4>
 810d124:	3c37      	subs	r4, #55	@ 0x37
 810d126:	e7de      	b.n	810d0e6 <_strtol_l.constprop.0+0x72>
 810d128:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 810d12c:	2f19      	cmp	r7, #25
 810d12e:	d804      	bhi.n	810d13a <_strtol_l.constprop.0+0xc6>
 810d130:	3c57      	subs	r4, #87	@ 0x57
 810d132:	e7d8      	b.n	810d0e6 <_strtol_l.constprop.0+0x72>
 810d134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d138:	e7e1      	b.n	810d0fe <_strtol_l.constprop.0+0x8a>
 810d13a:	1c53      	adds	r3, r2, #1
 810d13c:	d108      	bne.n	810d150 <_strtol_l.constprop.0+0xdc>
 810d13e:	2322      	movs	r3, #34	@ 0x22
 810d140:	f8ce 3000 	str.w	r3, [lr]
 810d144:	4660      	mov	r0, ip
 810d146:	f1b8 0f00 	cmp.w	r8, #0
 810d14a:	d0a0      	beq.n	810d08e <_strtol_l.constprop.0+0x1a>
 810d14c:	1e69      	subs	r1, r5, #1
 810d14e:	e006      	b.n	810d15e <_strtol_l.constprop.0+0xea>
 810d150:	b106      	cbz	r6, 810d154 <_strtol_l.constprop.0+0xe0>
 810d152:	4240      	negs	r0, r0
 810d154:	f1b8 0f00 	cmp.w	r8, #0
 810d158:	d099      	beq.n	810d08e <_strtol_l.constprop.0+0x1a>
 810d15a:	2a00      	cmp	r2, #0
 810d15c:	d1f6      	bne.n	810d14c <_strtol_l.constprop.0+0xd8>
 810d15e:	f8c8 1000 	str.w	r1, [r8]
 810d162:	e794      	b.n	810d08e <_strtol_l.constprop.0+0x1a>
 810d164:	0810ec81 	.word	0x0810ec81

0810d168 <_strtol_r>:
 810d168:	f7ff bf84 	b.w	810d074 <_strtol_l.constprop.0>

0810d16c <__ssputs_r>:
 810d16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d170:	688e      	ldr	r6, [r1, #8]
 810d172:	461f      	mov	r7, r3
 810d174:	42be      	cmp	r6, r7
 810d176:	680b      	ldr	r3, [r1, #0]
 810d178:	4682      	mov	sl, r0
 810d17a:	460c      	mov	r4, r1
 810d17c:	4690      	mov	r8, r2
 810d17e:	d82d      	bhi.n	810d1dc <__ssputs_r+0x70>
 810d180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810d184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810d188:	d026      	beq.n	810d1d8 <__ssputs_r+0x6c>
 810d18a:	6965      	ldr	r5, [r4, #20]
 810d18c:	6909      	ldr	r1, [r1, #16]
 810d18e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d192:	eba3 0901 	sub.w	r9, r3, r1
 810d196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d19a:	1c7b      	adds	r3, r7, #1
 810d19c:	444b      	add	r3, r9
 810d19e:	106d      	asrs	r5, r5, #1
 810d1a0:	429d      	cmp	r5, r3
 810d1a2:	bf38      	it	cc
 810d1a4:	461d      	movcc	r5, r3
 810d1a6:	0553      	lsls	r3, r2, #21
 810d1a8:	d527      	bpl.n	810d1fa <__ssputs_r+0x8e>
 810d1aa:	4629      	mov	r1, r5
 810d1ac:	f7fe fc1c 	bl	810b9e8 <_malloc_r>
 810d1b0:	4606      	mov	r6, r0
 810d1b2:	b360      	cbz	r0, 810d20e <__ssputs_r+0xa2>
 810d1b4:	6921      	ldr	r1, [r4, #16]
 810d1b6:	464a      	mov	r2, r9
 810d1b8:	f7fd fd41 	bl	810ac3e <memcpy>
 810d1bc:	89a3      	ldrh	r3, [r4, #12]
 810d1be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810d1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810d1c6:	81a3      	strh	r3, [r4, #12]
 810d1c8:	6126      	str	r6, [r4, #16]
 810d1ca:	6165      	str	r5, [r4, #20]
 810d1cc:	444e      	add	r6, r9
 810d1ce:	eba5 0509 	sub.w	r5, r5, r9
 810d1d2:	6026      	str	r6, [r4, #0]
 810d1d4:	60a5      	str	r5, [r4, #8]
 810d1d6:	463e      	mov	r6, r7
 810d1d8:	42be      	cmp	r6, r7
 810d1da:	d900      	bls.n	810d1de <__ssputs_r+0x72>
 810d1dc:	463e      	mov	r6, r7
 810d1de:	6820      	ldr	r0, [r4, #0]
 810d1e0:	4632      	mov	r2, r6
 810d1e2:	4641      	mov	r1, r8
 810d1e4:	f000 fb6a 	bl	810d8bc <memmove>
 810d1e8:	68a3      	ldr	r3, [r4, #8]
 810d1ea:	1b9b      	subs	r3, r3, r6
 810d1ec:	60a3      	str	r3, [r4, #8]
 810d1ee:	6823      	ldr	r3, [r4, #0]
 810d1f0:	4433      	add	r3, r6
 810d1f2:	6023      	str	r3, [r4, #0]
 810d1f4:	2000      	movs	r0, #0
 810d1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d1fa:	462a      	mov	r2, r5
 810d1fc:	f000 ff41 	bl	810e082 <_realloc_r>
 810d200:	4606      	mov	r6, r0
 810d202:	2800      	cmp	r0, #0
 810d204:	d1e0      	bne.n	810d1c8 <__ssputs_r+0x5c>
 810d206:	6921      	ldr	r1, [r4, #16]
 810d208:	4650      	mov	r0, sl
 810d20a:	f7fe fb79 	bl	810b900 <_free_r>
 810d20e:	230c      	movs	r3, #12
 810d210:	f8ca 3000 	str.w	r3, [sl]
 810d214:	89a3      	ldrh	r3, [r4, #12]
 810d216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d21a:	81a3      	strh	r3, [r4, #12]
 810d21c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d220:	e7e9      	b.n	810d1f6 <__ssputs_r+0x8a>
	...

0810d224 <_svfiprintf_r>:
 810d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d228:	4698      	mov	r8, r3
 810d22a:	898b      	ldrh	r3, [r1, #12]
 810d22c:	061b      	lsls	r3, r3, #24
 810d22e:	b09d      	sub	sp, #116	@ 0x74
 810d230:	4607      	mov	r7, r0
 810d232:	460d      	mov	r5, r1
 810d234:	4614      	mov	r4, r2
 810d236:	d510      	bpl.n	810d25a <_svfiprintf_r+0x36>
 810d238:	690b      	ldr	r3, [r1, #16]
 810d23a:	b973      	cbnz	r3, 810d25a <_svfiprintf_r+0x36>
 810d23c:	2140      	movs	r1, #64	@ 0x40
 810d23e:	f7fe fbd3 	bl	810b9e8 <_malloc_r>
 810d242:	6028      	str	r0, [r5, #0]
 810d244:	6128      	str	r0, [r5, #16]
 810d246:	b930      	cbnz	r0, 810d256 <_svfiprintf_r+0x32>
 810d248:	230c      	movs	r3, #12
 810d24a:	603b      	str	r3, [r7, #0]
 810d24c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d250:	b01d      	add	sp, #116	@ 0x74
 810d252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d256:	2340      	movs	r3, #64	@ 0x40
 810d258:	616b      	str	r3, [r5, #20]
 810d25a:	2300      	movs	r3, #0
 810d25c:	9309      	str	r3, [sp, #36]	@ 0x24
 810d25e:	2320      	movs	r3, #32
 810d260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d264:	f8cd 800c 	str.w	r8, [sp, #12]
 810d268:	2330      	movs	r3, #48	@ 0x30
 810d26a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810d408 <_svfiprintf_r+0x1e4>
 810d26e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d272:	f04f 0901 	mov.w	r9, #1
 810d276:	4623      	mov	r3, r4
 810d278:	469a      	mov	sl, r3
 810d27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d27e:	b10a      	cbz	r2, 810d284 <_svfiprintf_r+0x60>
 810d280:	2a25      	cmp	r2, #37	@ 0x25
 810d282:	d1f9      	bne.n	810d278 <_svfiprintf_r+0x54>
 810d284:	ebba 0b04 	subs.w	fp, sl, r4
 810d288:	d00b      	beq.n	810d2a2 <_svfiprintf_r+0x7e>
 810d28a:	465b      	mov	r3, fp
 810d28c:	4622      	mov	r2, r4
 810d28e:	4629      	mov	r1, r5
 810d290:	4638      	mov	r0, r7
 810d292:	f7ff ff6b 	bl	810d16c <__ssputs_r>
 810d296:	3001      	adds	r0, #1
 810d298:	f000 80a7 	beq.w	810d3ea <_svfiprintf_r+0x1c6>
 810d29c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d29e:	445a      	add	r2, fp
 810d2a0:	9209      	str	r2, [sp, #36]	@ 0x24
 810d2a2:	f89a 3000 	ldrb.w	r3, [sl]
 810d2a6:	2b00      	cmp	r3, #0
 810d2a8:	f000 809f 	beq.w	810d3ea <_svfiprintf_r+0x1c6>
 810d2ac:	2300      	movs	r3, #0
 810d2ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d2b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d2b6:	f10a 0a01 	add.w	sl, sl, #1
 810d2ba:	9304      	str	r3, [sp, #16]
 810d2bc:	9307      	str	r3, [sp, #28]
 810d2be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d2c2:	931a      	str	r3, [sp, #104]	@ 0x68
 810d2c4:	4654      	mov	r4, sl
 810d2c6:	2205      	movs	r2, #5
 810d2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d2cc:	484e      	ldr	r0, [pc, #312]	@ (810d408 <_svfiprintf_r+0x1e4>)
 810d2ce:	f7f3 f807 	bl	81002e0 <memchr>
 810d2d2:	9a04      	ldr	r2, [sp, #16]
 810d2d4:	b9d8      	cbnz	r0, 810d30e <_svfiprintf_r+0xea>
 810d2d6:	06d0      	lsls	r0, r2, #27
 810d2d8:	bf44      	itt	mi
 810d2da:	2320      	movmi	r3, #32
 810d2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d2e0:	0711      	lsls	r1, r2, #28
 810d2e2:	bf44      	itt	mi
 810d2e4:	232b      	movmi	r3, #43	@ 0x2b
 810d2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d2ea:	f89a 3000 	ldrb.w	r3, [sl]
 810d2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 810d2f0:	d015      	beq.n	810d31e <_svfiprintf_r+0xfa>
 810d2f2:	9a07      	ldr	r2, [sp, #28]
 810d2f4:	4654      	mov	r4, sl
 810d2f6:	2000      	movs	r0, #0
 810d2f8:	f04f 0c0a 	mov.w	ip, #10
 810d2fc:	4621      	mov	r1, r4
 810d2fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d302:	3b30      	subs	r3, #48	@ 0x30
 810d304:	2b09      	cmp	r3, #9
 810d306:	d94b      	bls.n	810d3a0 <_svfiprintf_r+0x17c>
 810d308:	b1b0      	cbz	r0, 810d338 <_svfiprintf_r+0x114>
 810d30a:	9207      	str	r2, [sp, #28]
 810d30c:	e014      	b.n	810d338 <_svfiprintf_r+0x114>
 810d30e:	eba0 0308 	sub.w	r3, r0, r8
 810d312:	fa09 f303 	lsl.w	r3, r9, r3
 810d316:	4313      	orrs	r3, r2
 810d318:	9304      	str	r3, [sp, #16]
 810d31a:	46a2      	mov	sl, r4
 810d31c:	e7d2      	b.n	810d2c4 <_svfiprintf_r+0xa0>
 810d31e:	9b03      	ldr	r3, [sp, #12]
 810d320:	1d19      	adds	r1, r3, #4
 810d322:	681b      	ldr	r3, [r3, #0]
 810d324:	9103      	str	r1, [sp, #12]
 810d326:	2b00      	cmp	r3, #0
 810d328:	bfbb      	ittet	lt
 810d32a:	425b      	neglt	r3, r3
 810d32c:	f042 0202 	orrlt.w	r2, r2, #2
 810d330:	9307      	strge	r3, [sp, #28]
 810d332:	9307      	strlt	r3, [sp, #28]
 810d334:	bfb8      	it	lt
 810d336:	9204      	strlt	r2, [sp, #16]
 810d338:	7823      	ldrb	r3, [r4, #0]
 810d33a:	2b2e      	cmp	r3, #46	@ 0x2e
 810d33c:	d10a      	bne.n	810d354 <_svfiprintf_r+0x130>
 810d33e:	7863      	ldrb	r3, [r4, #1]
 810d340:	2b2a      	cmp	r3, #42	@ 0x2a
 810d342:	d132      	bne.n	810d3aa <_svfiprintf_r+0x186>
 810d344:	9b03      	ldr	r3, [sp, #12]
 810d346:	1d1a      	adds	r2, r3, #4
 810d348:	681b      	ldr	r3, [r3, #0]
 810d34a:	9203      	str	r2, [sp, #12]
 810d34c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d350:	3402      	adds	r4, #2
 810d352:	9305      	str	r3, [sp, #20]
 810d354:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810d418 <_svfiprintf_r+0x1f4>
 810d358:	7821      	ldrb	r1, [r4, #0]
 810d35a:	2203      	movs	r2, #3
 810d35c:	4650      	mov	r0, sl
 810d35e:	f7f2 ffbf 	bl	81002e0 <memchr>
 810d362:	b138      	cbz	r0, 810d374 <_svfiprintf_r+0x150>
 810d364:	9b04      	ldr	r3, [sp, #16]
 810d366:	eba0 000a 	sub.w	r0, r0, sl
 810d36a:	2240      	movs	r2, #64	@ 0x40
 810d36c:	4082      	lsls	r2, r0
 810d36e:	4313      	orrs	r3, r2
 810d370:	3401      	adds	r4, #1
 810d372:	9304      	str	r3, [sp, #16]
 810d374:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d378:	4824      	ldr	r0, [pc, #144]	@ (810d40c <_svfiprintf_r+0x1e8>)
 810d37a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d37e:	2206      	movs	r2, #6
 810d380:	f7f2 ffae 	bl	81002e0 <memchr>
 810d384:	2800      	cmp	r0, #0
 810d386:	d036      	beq.n	810d3f6 <_svfiprintf_r+0x1d2>
 810d388:	4b21      	ldr	r3, [pc, #132]	@ (810d410 <_svfiprintf_r+0x1ec>)
 810d38a:	bb1b      	cbnz	r3, 810d3d4 <_svfiprintf_r+0x1b0>
 810d38c:	9b03      	ldr	r3, [sp, #12]
 810d38e:	3307      	adds	r3, #7
 810d390:	f023 0307 	bic.w	r3, r3, #7
 810d394:	3308      	adds	r3, #8
 810d396:	9303      	str	r3, [sp, #12]
 810d398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d39a:	4433      	add	r3, r6
 810d39c:	9309      	str	r3, [sp, #36]	@ 0x24
 810d39e:	e76a      	b.n	810d276 <_svfiprintf_r+0x52>
 810d3a0:	fb0c 3202 	mla	r2, ip, r2, r3
 810d3a4:	460c      	mov	r4, r1
 810d3a6:	2001      	movs	r0, #1
 810d3a8:	e7a8      	b.n	810d2fc <_svfiprintf_r+0xd8>
 810d3aa:	2300      	movs	r3, #0
 810d3ac:	3401      	adds	r4, #1
 810d3ae:	9305      	str	r3, [sp, #20]
 810d3b0:	4619      	mov	r1, r3
 810d3b2:	f04f 0c0a 	mov.w	ip, #10
 810d3b6:	4620      	mov	r0, r4
 810d3b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d3bc:	3a30      	subs	r2, #48	@ 0x30
 810d3be:	2a09      	cmp	r2, #9
 810d3c0:	d903      	bls.n	810d3ca <_svfiprintf_r+0x1a6>
 810d3c2:	2b00      	cmp	r3, #0
 810d3c4:	d0c6      	beq.n	810d354 <_svfiprintf_r+0x130>
 810d3c6:	9105      	str	r1, [sp, #20]
 810d3c8:	e7c4      	b.n	810d354 <_svfiprintf_r+0x130>
 810d3ca:	fb0c 2101 	mla	r1, ip, r1, r2
 810d3ce:	4604      	mov	r4, r0
 810d3d0:	2301      	movs	r3, #1
 810d3d2:	e7f0      	b.n	810d3b6 <_svfiprintf_r+0x192>
 810d3d4:	ab03      	add	r3, sp, #12
 810d3d6:	9300      	str	r3, [sp, #0]
 810d3d8:	462a      	mov	r2, r5
 810d3da:	4b0e      	ldr	r3, [pc, #56]	@ (810d414 <_svfiprintf_r+0x1f0>)
 810d3dc:	a904      	add	r1, sp, #16
 810d3de:	4638      	mov	r0, r7
 810d3e0:	f7fc fbb8 	bl	8109b54 <_printf_float>
 810d3e4:	1c42      	adds	r2, r0, #1
 810d3e6:	4606      	mov	r6, r0
 810d3e8:	d1d6      	bne.n	810d398 <_svfiprintf_r+0x174>
 810d3ea:	89ab      	ldrh	r3, [r5, #12]
 810d3ec:	065b      	lsls	r3, r3, #25
 810d3ee:	f53f af2d 	bmi.w	810d24c <_svfiprintf_r+0x28>
 810d3f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d3f4:	e72c      	b.n	810d250 <_svfiprintf_r+0x2c>
 810d3f6:	ab03      	add	r3, sp, #12
 810d3f8:	9300      	str	r3, [sp, #0]
 810d3fa:	462a      	mov	r2, r5
 810d3fc:	4b05      	ldr	r3, [pc, #20]	@ (810d414 <_svfiprintf_r+0x1f0>)
 810d3fe:	a904      	add	r1, sp, #16
 810d400:	4638      	mov	r0, r7
 810d402:	f7fc fe3f 	bl	810a084 <_printf_i>
 810d406:	e7ed      	b.n	810d3e4 <_svfiprintf_r+0x1c0>
 810d408:	0810ed81 	.word	0x0810ed81
 810d40c:	0810ed8b 	.word	0x0810ed8b
 810d410:	08109b55 	.word	0x08109b55
 810d414:	0810d16d 	.word	0x0810d16d
 810d418:	0810ed87 	.word	0x0810ed87

0810d41c <__sfputc_r>:
 810d41c:	6893      	ldr	r3, [r2, #8]
 810d41e:	3b01      	subs	r3, #1
 810d420:	2b00      	cmp	r3, #0
 810d422:	b410      	push	{r4}
 810d424:	6093      	str	r3, [r2, #8]
 810d426:	da08      	bge.n	810d43a <__sfputc_r+0x1e>
 810d428:	6994      	ldr	r4, [r2, #24]
 810d42a:	42a3      	cmp	r3, r4
 810d42c:	db01      	blt.n	810d432 <__sfputc_r+0x16>
 810d42e:	290a      	cmp	r1, #10
 810d430:	d103      	bne.n	810d43a <__sfputc_r+0x1e>
 810d432:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d436:	f7fd baee 	b.w	810aa16 <__swbuf_r>
 810d43a:	6813      	ldr	r3, [r2, #0]
 810d43c:	1c58      	adds	r0, r3, #1
 810d43e:	6010      	str	r0, [r2, #0]
 810d440:	7019      	strb	r1, [r3, #0]
 810d442:	4608      	mov	r0, r1
 810d444:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d448:	4770      	bx	lr

0810d44a <__sfputs_r>:
 810d44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d44c:	4606      	mov	r6, r0
 810d44e:	460f      	mov	r7, r1
 810d450:	4614      	mov	r4, r2
 810d452:	18d5      	adds	r5, r2, r3
 810d454:	42ac      	cmp	r4, r5
 810d456:	d101      	bne.n	810d45c <__sfputs_r+0x12>
 810d458:	2000      	movs	r0, #0
 810d45a:	e007      	b.n	810d46c <__sfputs_r+0x22>
 810d45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d460:	463a      	mov	r2, r7
 810d462:	4630      	mov	r0, r6
 810d464:	f7ff ffda 	bl	810d41c <__sfputc_r>
 810d468:	1c43      	adds	r3, r0, #1
 810d46a:	d1f3      	bne.n	810d454 <__sfputs_r+0xa>
 810d46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d470 <_vfiprintf_r>:
 810d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d474:	460d      	mov	r5, r1
 810d476:	b09d      	sub	sp, #116	@ 0x74
 810d478:	4614      	mov	r4, r2
 810d47a:	4698      	mov	r8, r3
 810d47c:	4606      	mov	r6, r0
 810d47e:	b118      	cbz	r0, 810d488 <_vfiprintf_r+0x18>
 810d480:	6a03      	ldr	r3, [r0, #32]
 810d482:	b90b      	cbnz	r3, 810d488 <_vfiprintf_r+0x18>
 810d484:	f7fd f9be 	bl	810a804 <__sinit>
 810d488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d48a:	07d9      	lsls	r1, r3, #31
 810d48c:	d405      	bmi.n	810d49a <_vfiprintf_r+0x2a>
 810d48e:	89ab      	ldrh	r3, [r5, #12]
 810d490:	059a      	lsls	r2, r3, #22
 810d492:	d402      	bmi.n	810d49a <_vfiprintf_r+0x2a>
 810d494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d496:	f7fd fbd0 	bl	810ac3a <__retarget_lock_acquire_recursive>
 810d49a:	89ab      	ldrh	r3, [r5, #12]
 810d49c:	071b      	lsls	r3, r3, #28
 810d49e:	d501      	bpl.n	810d4a4 <_vfiprintf_r+0x34>
 810d4a0:	692b      	ldr	r3, [r5, #16]
 810d4a2:	b99b      	cbnz	r3, 810d4cc <_vfiprintf_r+0x5c>
 810d4a4:	4629      	mov	r1, r5
 810d4a6:	4630      	mov	r0, r6
 810d4a8:	f7fd faf4 	bl	810aa94 <__swsetup_r>
 810d4ac:	b170      	cbz	r0, 810d4cc <_vfiprintf_r+0x5c>
 810d4ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d4b0:	07dc      	lsls	r4, r3, #31
 810d4b2:	d504      	bpl.n	810d4be <_vfiprintf_r+0x4e>
 810d4b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d4b8:	b01d      	add	sp, #116	@ 0x74
 810d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d4be:	89ab      	ldrh	r3, [r5, #12]
 810d4c0:	0598      	lsls	r0, r3, #22
 810d4c2:	d4f7      	bmi.n	810d4b4 <_vfiprintf_r+0x44>
 810d4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d4c6:	f7fd fbb9 	bl	810ac3c <__retarget_lock_release_recursive>
 810d4ca:	e7f3      	b.n	810d4b4 <_vfiprintf_r+0x44>
 810d4cc:	2300      	movs	r3, #0
 810d4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 810d4d0:	2320      	movs	r3, #32
 810d4d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810d4d6:	f8cd 800c 	str.w	r8, [sp, #12]
 810d4da:	2330      	movs	r3, #48	@ 0x30
 810d4dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810d68c <_vfiprintf_r+0x21c>
 810d4e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810d4e4:	f04f 0901 	mov.w	r9, #1
 810d4e8:	4623      	mov	r3, r4
 810d4ea:	469a      	mov	sl, r3
 810d4ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d4f0:	b10a      	cbz	r2, 810d4f6 <_vfiprintf_r+0x86>
 810d4f2:	2a25      	cmp	r2, #37	@ 0x25
 810d4f4:	d1f9      	bne.n	810d4ea <_vfiprintf_r+0x7a>
 810d4f6:	ebba 0b04 	subs.w	fp, sl, r4
 810d4fa:	d00b      	beq.n	810d514 <_vfiprintf_r+0xa4>
 810d4fc:	465b      	mov	r3, fp
 810d4fe:	4622      	mov	r2, r4
 810d500:	4629      	mov	r1, r5
 810d502:	4630      	mov	r0, r6
 810d504:	f7ff ffa1 	bl	810d44a <__sfputs_r>
 810d508:	3001      	adds	r0, #1
 810d50a:	f000 80a7 	beq.w	810d65c <_vfiprintf_r+0x1ec>
 810d50e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810d510:	445a      	add	r2, fp
 810d512:	9209      	str	r2, [sp, #36]	@ 0x24
 810d514:	f89a 3000 	ldrb.w	r3, [sl]
 810d518:	2b00      	cmp	r3, #0
 810d51a:	f000 809f 	beq.w	810d65c <_vfiprintf_r+0x1ec>
 810d51e:	2300      	movs	r3, #0
 810d520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810d524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d528:	f10a 0a01 	add.w	sl, sl, #1
 810d52c:	9304      	str	r3, [sp, #16]
 810d52e:	9307      	str	r3, [sp, #28]
 810d530:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810d534:	931a      	str	r3, [sp, #104]	@ 0x68
 810d536:	4654      	mov	r4, sl
 810d538:	2205      	movs	r2, #5
 810d53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d53e:	4853      	ldr	r0, [pc, #332]	@ (810d68c <_vfiprintf_r+0x21c>)
 810d540:	f7f2 fece 	bl	81002e0 <memchr>
 810d544:	9a04      	ldr	r2, [sp, #16]
 810d546:	b9d8      	cbnz	r0, 810d580 <_vfiprintf_r+0x110>
 810d548:	06d1      	lsls	r1, r2, #27
 810d54a:	bf44      	itt	mi
 810d54c:	2320      	movmi	r3, #32
 810d54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d552:	0713      	lsls	r3, r2, #28
 810d554:	bf44      	itt	mi
 810d556:	232b      	movmi	r3, #43	@ 0x2b
 810d558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810d55c:	f89a 3000 	ldrb.w	r3, [sl]
 810d560:	2b2a      	cmp	r3, #42	@ 0x2a
 810d562:	d015      	beq.n	810d590 <_vfiprintf_r+0x120>
 810d564:	9a07      	ldr	r2, [sp, #28]
 810d566:	4654      	mov	r4, sl
 810d568:	2000      	movs	r0, #0
 810d56a:	f04f 0c0a 	mov.w	ip, #10
 810d56e:	4621      	mov	r1, r4
 810d570:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d574:	3b30      	subs	r3, #48	@ 0x30
 810d576:	2b09      	cmp	r3, #9
 810d578:	d94b      	bls.n	810d612 <_vfiprintf_r+0x1a2>
 810d57a:	b1b0      	cbz	r0, 810d5aa <_vfiprintf_r+0x13a>
 810d57c:	9207      	str	r2, [sp, #28]
 810d57e:	e014      	b.n	810d5aa <_vfiprintf_r+0x13a>
 810d580:	eba0 0308 	sub.w	r3, r0, r8
 810d584:	fa09 f303 	lsl.w	r3, r9, r3
 810d588:	4313      	orrs	r3, r2
 810d58a:	9304      	str	r3, [sp, #16]
 810d58c:	46a2      	mov	sl, r4
 810d58e:	e7d2      	b.n	810d536 <_vfiprintf_r+0xc6>
 810d590:	9b03      	ldr	r3, [sp, #12]
 810d592:	1d19      	adds	r1, r3, #4
 810d594:	681b      	ldr	r3, [r3, #0]
 810d596:	9103      	str	r1, [sp, #12]
 810d598:	2b00      	cmp	r3, #0
 810d59a:	bfbb      	ittet	lt
 810d59c:	425b      	neglt	r3, r3
 810d59e:	f042 0202 	orrlt.w	r2, r2, #2
 810d5a2:	9307      	strge	r3, [sp, #28]
 810d5a4:	9307      	strlt	r3, [sp, #28]
 810d5a6:	bfb8      	it	lt
 810d5a8:	9204      	strlt	r2, [sp, #16]
 810d5aa:	7823      	ldrb	r3, [r4, #0]
 810d5ac:	2b2e      	cmp	r3, #46	@ 0x2e
 810d5ae:	d10a      	bne.n	810d5c6 <_vfiprintf_r+0x156>
 810d5b0:	7863      	ldrb	r3, [r4, #1]
 810d5b2:	2b2a      	cmp	r3, #42	@ 0x2a
 810d5b4:	d132      	bne.n	810d61c <_vfiprintf_r+0x1ac>
 810d5b6:	9b03      	ldr	r3, [sp, #12]
 810d5b8:	1d1a      	adds	r2, r3, #4
 810d5ba:	681b      	ldr	r3, [r3, #0]
 810d5bc:	9203      	str	r2, [sp, #12]
 810d5be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810d5c2:	3402      	adds	r4, #2
 810d5c4:	9305      	str	r3, [sp, #20]
 810d5c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810d69c <_vfiprintf_r+0x22c>
 810d5ca:	7821      	ldrb	r1, [r4, #0]
 810d5cc:	2203      	movs	r2, #3
 810d5ce:	4650      	mov	r0, sl
 810d5d0:	f7f2 fe86 	bl	81002e0 <memchr>
 810d5d4:	b138      	cbz	r0, 810d5e6 <_vfiprintf_r+0x176>
 810d5d6:	9b04      	ldr	r3, [sp, #16]
 810d5d8:	eba0 000a 	sub.w	r0, r0, sl
 810d5dc:	2240      	movs	r2, #64	@ 0x40
 810d5de:	4082      	lsls	r2, r0
 810d5e0:	4313      	orrs	r3, r2
 810d5e2:	3401      	adds	r4, #1
 810d5e4:	9304      	str	r3, [sp, #16]
 810d5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d5ea:	4829      	ldr	r0, [pc, #164]	@ (810d690 <_vfiprintf_r+0x220>)
 810d5ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810d5f0:	2206      	movs	r2, #6
 810d5f2:	f7f2 fe75 	bl	81002e0 <memchr>
 810d5f6:	2800      	cmp	r0, #0
 810d5f8:	d03f      	beq.n	810d67a <_vfiprintf_r+0x20a>
 810d5fa:	4b26      	ldr	r3, [pc, #152]	@ (810d694 <_vfiprintf_r+0x224>)
 810d5fc:	bb1b      	cbnz	r3, 810d646 <_vfiprintf_r+0x1d6>
 810d5fe:	9b03      	ldr	r3, [sp, #12]
 810d600:	3307      	adds	r3, #7
 810d602:	f023 0307 	bic.w	r3, r3, #7
 810d606:	3308      	adds	r3, #8
 810d608:	9303      	str	r3, [sp, #12]
 810d60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810d60c:	443b      	add	r3, r7
 810d60e:	9309      	str	r3, [sp, #36]	@ 0x24
 810d610:	e76a      	b.n	810d4e8 <_vfiprintf_r+0x78>
 810d612:	fb0c 3202 	mla	r2, ip, r2, r3
 810d616:	460c      	mov	r4, r1
 810d618:	2001      	movs	r0, #1
 810d61a:	e7a8      	b.n	810d56e <_vfiprintf_r+0xfe>
 810d61c:	2300      	movs	r3, #0
 810d61e:	3401      	adds	r4, #1
 810d620:	9305      	str	r3, [sp, #20]
 810d622:	4619      	mov	r1, r3
 810d624:	f04f 0c0a 	mov.w	ip, #10
 810d628:	4620      	mov	r0, r4
 810d62a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d62e:	3a30      	subs	r2, #48	@ 0x30
 810d630:	2a09      	cmp	r2, #9
 810d632:	d903      	bls.n	810d63c <_vfiprintf_r+0x1cc>
 810d634:	2b00      	cmp	r3, #0
 810d636:	d0c6      	beq.n	810d5c6 <_vfiprintf_r+0x156>
 810d638:	9105      	str	r1, [sp, #20]
 810d63a:	e7c4      	b.n	810d5c6 <_vfiprintf_r+0x156>
 810d63c:	fb0c 2101 	mla	r1, ip, r1, r2
 810d640:	4604      	mov	r4, r0
 810d642:	2301      	movs	r3, #1
 810d644:	e7f0      	b.n	810d628 <_vfiprintf_r+0x1b8>
 810d646:	ab03      	add	r3, sp, #12
 810d648:	9300      	str	r3, [sp, #0]
 810d64a:	462a      	mov	r2, r5
 810d64c:	4b12      	ldr	r3, [pc, #72]	@ (810d698 <_vfiprintf_r+0x228>)
 810d64e:	a904      	add	r1, sp, #16
 810d650:	4630      	mov	r0, r6
 810d652:	f7fc fa7f 	bl	8109b54 <_printf_float>
 810d656:	4607      	mov	r7, r0
 810d658:	1c78      	adds	r0, r7, #1
 810d65a:	d1d6      	bne.n	810d60a <_vfiprintf_r+0x19a>
 810d65c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810d65e:	07d9      	lsls	r1, r3, #31
 810d660:	d405      	bmi.n	810d66e <_vfiprintf_r+0x1fe>
 810d662:	89ab      	ldrh	r3, [r5, #12]
 810d664:	059a      	lsls	r2, r3, #22
 810d666:	d402      	bmi.n	810d66e <_vfiprintf_r+0x1fe>
 810d668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810d66a:	f7fd fae7 	bl	810ac3c <__retarget_lock_release_recursive>
 810d66e:	89ab      	ldrh	r3, [r5, #12]
 810d670:	065b      	lsls	r3, r3, #25
 810d672:	f53f af1f 	bmi.w	810d4b4 <_vfiprintf_r+0x44>
 810d676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810d678:	e71e      	b.n	810d4b8 <_vfiprintf_r+0x48>
 810d67a:	ab03      	add	r3, sp, #12
 810d67c:	9300      	str	r3, [sp, #0]
 810d67e:	462a      	mov	r2, r5
 810d680:	4b05      	ldr	r3, [pc, #20]	@ (810d698 <_vfiprintf_r+0x228>)
 810d682:	a904      	add	r1, sp, #16
 810d684:	4630      	mov	r0, r6
 810d686:	f7fc fcfd 	bl	810a084 <_printf_i>
 810d68a:	e7e4      	b.n	810d656 <_vfiprintf_r+0x1e6>
 810d68c:	0810ed81 	.word	0x0810ed81
 810d690:	0810ed8b 	.word	0x0810ed8b
 810d694:	08109b55 	.word	0x08109b55
 810d698:	0810d44b 	.word	0x0810d44b
 810d69c:	0810ed87 	.word	0x0810ed87

0810d6a0 <__sflush_r>:
 810d6a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810d6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d6a8:	0716      	lsls	r6, r2, #28
 810d6aa:	4605      	mov	r5, r0
 810d6ac:	460c      	mov	r4, r1
 810d6ae:	d454      	bmi.n	810d75a <__sflush_r+0xba>
 810d6b0:	684b      	ldr	r3, [r1, #4]
 810d6b2:	2b00      	cmp	r3, #0
 810d6b4:	dc02      	bgt.n	810d6bc <__sflush_r+0x1c>
 810d6b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810d6b8:	2b00      	cmp	r3, #0
 810d6ba:	dd48      	ble.n	810d74e <__sflush_r+0xae>
 810d6bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d6be:	2e00      	cmp	r6, #0
 810d6c0:	d045      	beq.n	810d74e <__sflush_r+0xae>
 810d6c2:	2300      	movs	r3, #0
 810d6c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810d6c8:	682f      	ldr	r7, [r5, #0]
 810d6ca:	6a21      	ldr	r1, [r4, #32]
 810d6cc:	602b      	str	r3, [r5, #0]
 810d6ce:	d030      	beq.n	810d732 <__sflush_r+0x92>
 810d6d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810d6d2:	89a3      	ldrh	r3, [r4, #12]
 810d6d4:	0759      	lsls	r1, r3, #29
 810d6d6:	d505      	bpl.n	810d6e4 <__sflush_r+0x44>
 810d6d8:	6863      	ldr	r3, [r4, #4]
 810d6da:	1ad2      	subs	r2, r2, r3
 810d6dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810d6de:	b10b      	cbz	r3, 810d6e4 <__sflush_r+0x44>
 810d6e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810d6e2:	1ad2      	subs	r2, r2, r3
 810d6e4:	2300      	movs	r3, #0
 810d6e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810d6e8:	6a21      	ldr	r1, [r4, #32]
 810d6ea:	4628      	mov	r0, r5
 810d6ec:	47b0      	blx	r6
 810d6ee:	1c43      	adds	r3, r0, #1
 810d6f0:	89a3      	ldrh	r3, [r4, #12]
 810d6f2:	d106      	bne.n	810d702 <__sflush_r+0x62>
 810d6f4:	6829      	ldr	r1, [r5, #0]
 810d6f6:	291d      	cmp	r1, #29
 810d6f8:	d82b      	bhi.n	810d752 <__sflush_r+0xb2>
 810d6fa:	4a2a      	ldr	r2, [pc, #168]	@ (810d7a4 <__sflush_r+0x104>)
 810d6fc:	410a      	asrs	r2, r1
 810d6fe:	07d6      	lsls	r6, r2, #31
 810d700:	d427      	bmi.n	810d752 <__sflush_r+0xb2>
 810d702:	2200      	movs	r2, #0
 810d704:	6062      	str	r2, [r4, #4]
 810d706:	04d9      	lsls	r1, r3, #19
 810d708:	6922      	ldr	r2, [r4, #16]
 810d70a:	6022      	str	r2, [r4, #0]
 810d70c:	d504      	bpl.n	810d718 <__sflush_r+0x78>
 810d70e:	1c42      	adds	r2, r0, #1
 810d710:	d101      	bne.n	810d716 <__sflush_r+0x76>
 810d712:	682b      	ldr	r3, [r5, #0]
 810d714:	b903      	cbnz	r3, 810d718 <__sflush_r+0x78>
 810d716:	6560      	str	r0, [r4, #84]	@ 0x54
 810d718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810d71a:	602f      	str	r7, [r5, #0]
 810d71c:	b1b9      	cbz	r1, 810d74e <__sflush_r+0xae>
 810d71e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810d722:	4299      	cmp	r1, r3
 810d724:	d002      	beq.n	810d72c <__sflush_r+0x8c>
 810d726:	4628      	mov	r0, r5
 810d728:	f7fe f8ea 	bl	810b900 <_free_r>
 810d72c:	2300      	movs	r3, #0
 810d72e:	6363      	str	r3, [r4, #52]	@ 0x34
 810d730:	e00d      	b.n	810d74e <__sflush_r+0xae>
 810d732:	2301      	movs	r3, #1
 810d734:	4628      	mov	r0, r5
 810d736:	47b0      	blx	r6
 810d738:	4602      	mov	r2, r0
 810d73a:	1c50      	adds	r0, r2, #1
 810d73c:	d1c9      	bne.n	810d6d2 <__sflush_r+0x32>
 810d73e:	682b      	ldr	r3, [r5, #0]
 810d740:	2b00      	cmp	r3, #0
 810d742:	d0c6      	beq.n	810d6d2 <__sflush_r+0x32>
 810d744:	2b1d      	cmp	r3, #29
 810d746:	d001      	beq.n	810d74c <__sflush_r+0xac>
 810d748:	2b16      	cmp	r3, #22
 810d74a:	d11e      	bne.n	810d78a <__sflush_r+0xea>
 810d74c:	602f      	str	r7, [r5, #0]
 810d74e:	2000      	movs	r0, #0
 810d750:	e022      	b.n	810d798 <__sflush_r+0xf8>
 810d752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d756:	b21b      	sxth	r3, r3
 810d758:	e01b      	b.n	810d792 <__sflush_r+0xf2>
 810d75a:	690f      	ldr	r7, [r1, #16]
 810d75c:	2f00      	cmp	r7, #0
 810d75e:	d0f6      	beq.n	810d74e <__sflush_r+0xae>
 810d760:	0793      	lsls	r3, r2, #30
 810d762:	680e      	ldr	r6, [r1, #0]
 810d764:	bf08      	it	eq
 810d766:	694b      	ldreq	r3, [r1, #20]
 810d768:	600f      	str	r7, [r1, #0]
 810d76a:	bf18      	it	ne
 810d76c:	2300      	movne	r3, #0
 810d76e:	eba6 0807 	sub.w	r8, r6, r7
 810d772:	608b      	str	r3, [r1, #8]
 810d774:	f1b8 0f00 	cmp.w	r8, #0
 810d778:	dde9      	ble.n	810d74e <__sflush_r+0xae>
 810d77a:	6a21      	ldr	r1, [r4, #32]
 810d77c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810d77e:	4643      	mov	r3, r8
 810d780:	463a      	mov	r2, r7
 810d782:	4628      	mov	r0, r5
 810d784:	47b0      	blx	r6
 810d786:	2800      	cmp	r0, #0
 810d788:	dc08      	bgt.n	810d79c <__sflush_r+0xfc>
 810d78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810d792:	81a3      	strh	r3, [r4, #12]
 810d794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810d798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d79c:	4407      	add	r7, r0
 810d79e:	eba8 0800 	sub.w	r8, r8, r0
 810d7a2:	e7e7      	b.n	810d774 <__sflush_r+0xd4>
 810d7a4:	dfbffffe 	.word	0xdfbffffe

0810d7a8 <_fflush_r>:
 810d7a8:	b538      	push	{r3, r4, r5, lr}
 810d7aa:	690b      	ldr	r3, [r1, #16]
 810d7ac:	4605      	mov	r5, r0
 810d7ae:	460c      	mov	r4, r1
 810d7b0:	b913      	cbnz	r3, 810d7b8 <_fflush_r+0x10>
 810d7b2:	2500      	movs	r5, #0
 810d7b4:	4628      	mov	r0, r5
 810d7b6:	bd38      	pop	{r3, r4, r5, pc}
 810d7b8:	b118      	cbz	r0, 810d7c2 <_fflush_r+0x1a>
 810d7ba:	6a03      	ldr	r3, [r0, #32]
 810d7bc:	b90b      	cbnz	r3, 810d7c2 <_fflush_r+0x1a>
 810d7be:	f7fd f821 	bl	810a804 <__sinit>
 810d7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d7c6:	2b00      	cmp	r3, #0
 810d7c8:	d0f3      	beq.n	810d7b2 <_fflush_r+0xa>
 810d7ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810d7cc:	07d0      	lsls	r0, r2, #31
 810d7ce:	d404      	bmi.n	810d7da <_fflush_r+0x32>
 810d7d0:	0599      	lsls	r1, r3, #22
 810d7d2:	d402      	bmi.n	810d7da <_fflush_r+0x32>
 810d7d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d7d6:	f7fd fa30 	bl	810ac3a <__retarget_lock_acquire_recursive>
 810d7da:	4628      	mov	r0, r5
 810d7dc:	4621      	mov	r1, r4
 810d7de:	f7ff ff5f 	bl	810d6a0 <__sflush_r>
 810d7e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810d7e4:	07da      	lsls	r2, r3, #31
 810d7e6:	4605      	mov	r5, r0
 810d7e8:	d4e4      	bmi.n	810d7b4 <_fflush_r+0xc>
 810d7ea:	89a3      	ldrh	r3, [r4, #12]
 810d7ec:	059b      	lsls	r3, r3, #22
 810d7ee:	d4e1      	bmi.n	810d7b4 <_fflush_r+0xc>
 810d7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810d7f2:	f7fd fa23 	bl	810ac3c <__retarget_lock_release_recursive>
 810d7f6:	e7dd      	b.n	810d7b4 <_fflush_r+0xc>

0810d7f8 <__swhatbuf_r>:
 810d7f8:	b570      	push	{r4, r5, r6, lr}
 810d7fa:	460c      	mov	r4, r1
 810d7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810d800:	2900      	cmp	r1, #0
 810d802:	b096      	sub	sp, #88	@ 0x58
 810d804:	4615      	mov	r5, r2
 810d806:	461e      	mov	r6, r3
 810d808:	da0d      	bge.n	810d826 <__swhatbuf_r+0x2e>
 810d80a:	89a3      	ldrh	r3, [r4, #12]
 810d80c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810d810:	f04f 0100 	mov.w	r1, #0
 810d814:	bf14      	ite	ne
 810d816:	2340      	movne	r3, #64	@ 0x40
 810d818:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810d81c:	2000      	movs	r0, #0
 810d81e:	6031      	str	r1, [r6, #0]
 810d820:	602b      	str	r3, [r5, #0]
 810d822:	b016      	add	sp, #88	@ 0x58
 810d824:	bd70      	pop	{r4, r5, r6, pc}
 810d826:	466a      	mov	r2, sp
 810d828:	f000 f874 	bl	810d914 <_fstat_r>
 810d82c:	2800      	cmp	r0, #0
 810d82e:	dbec      	blt.n	810d80a <__swhatbuf_r+0x12>
 810d830:	9901      	ldr	r1, [sp, #4]
 810d832:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810d836:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810d83a:	4259      	negs	r1, r3
 810d83c:	4159      	adcs	r1, r3
 810d83e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810d842:	e7eb      	b.n	810d81c <__swhatbuf_r+0x24>

0810d844 <__smakebuf_r>:
 810d844:	898b      	ldrh	r3, [r1, #12]
 810d846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810d848:	079d      	lsls	r5, r3, #30
 810d84a:	4606      	mov	r6, r0
 810d84c:	460c      	mov	r4, r1
 810d84e:	d507      	bpl.n	810d860 <__smakebuf_r+0x1c>
 810d850:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810d854:	6023      	str	r3, [r4, #0]
 810d856:	6123      	str	r3, [r4, #16]
 810d858:	2301      	movs	r3, #1
 810d85a:	6163      	str	r3, [r4, #20]
 810d85c:	b003      	add	sp, #12
 810d85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810d860:	ab01      	add	r3, sp, #4
 810d862:	466a      	mov	r2, sp
 810d864:	f7ff ffc8 	bl	810d7f8 <__swhatbuf_r>
 810d868:	9f00      	ldr	r7, [sp, #0]
 810d86a:	4605      	mov	r5, r0
 810d86c:	4639      	mov	r1, r7
 810d86e:	4630      	mov	r0, r6
 810d870:	f7fe f8ba 	bl	810b9e8 <_malloc_r>
 810d874:	b948      	cbnz	r0, 810d88a <__smakebuf_r+0x46>
 810d876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d87a:	059a      	lsls	r2, r3, #22
 810d87c:	d4ee      	bmi.n	810d85c <__smakebuf_r+0x18>
 810d87e:	f023 0303 	bic.w	r3, r3, #3
 810d882:	f043 0302 	orr.w	r3, r3, #2
 810d886:	81a3      	strh	r3, [r4, #12]
 810d888:	e7e2      	b.n	810d850 <__smakebuf_r+0xc>
 810d88a:	89a3      	ldrh	r3, [r4, #12]
 810d88c:	6020      	str	r0, [r4, #0]
 810d88e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810d892:	81a3      	strh	r3, [r4, #12]
 810d894:	9b01      	ldr	r3, [sp, #4]
 810d896:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810d89a:	b15b      	cbz	r3, 810d8b4 <__smakebuf_r+0x70>
 810d89c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810d8a0:	4630      	mov	r0, r6
 810d8a2:	f000 f849 	bl	810d938 <_isatty_r>
 810d8a6:	b128      	cbz	r0, 810d8b4 <__smakebuf_r+0x70>
 810d8a8:	89a3      	ldrh	r3, [r4, #12]
 810d8aa:	f023 0303 	bic.w	r3, r3, #3
 810d8ae:	f043 0301 	orr.w	r3, r3, #1
 810d8b2:	81a3      	strh	r3, [r4, #12]
 810d8b4:	89a3      	ldrh	r3, [r4, #12]
 810d8b6:	431d      	orrs	r5, r3
 810d8b8:	81a5      	strh	r5, [r4, #12]
 810d8ba:	e7cf      	b.n	810d85c <__smakebuf_r+0x18>

0810d8bc <memmove>:
 810d8bc:	4288      	cmp	r0, r1
 810d8be:	b510      	push	{r4, lr}
 810d8c0:	eb01 0402 	add.w	r4, r1, r2
 810d8c4:	d902      	bls.n	810d8cc <memmove+0x10>
 810d8c6:	4284      	cmp	r4, r0
 810d8c8:	4623      	mov	r3, r4
 810d8ca:	d807      	bhi.n	810d8dc <memmove+0x20>
 810d8cc:	1e43      	subs	r3, r0, #1
 810d8ce:	42a1      	cmp	r1, r4
 810d8d0:	d008      	beq.n	810d8e4 <memmove+0x28>
 810d8d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810d8d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810d8da:	e7f8      	b.n	810d8ce <memmove+0x12>
 810d8dc:	4402      	add	r2, r0
 810d8de:	4601      	mov	r1, r0
 810d8e0:	428a      	cmp	r2, r1
 810d8e2:	d100      	bne.n	810d8e6 <memmove+0x2a>
 810d8e4:	bd10      	pop	{r4, pc}
 810d8e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810d8ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810d8ee:	e7f7      	b.n	810d8e0 <memmove+0x24>

0810d8f0 <strncmp>:
 810d8f0:	b510      	push	{r4, lr}
 810d8f2:	b16a      	cbz	r2, 810d910 <strncmp+0x20>
 810d8f4:	3901      	subs	r1, #1
 810d8f6:	1884      	adds	r4, r0, r2
 810d8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d8fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810d900:	429a      	cmp	r2, r3
 810d902:	d103      	bne.n	810d90c <strncmp+0x1c>
 810d904:	42a0      	cmp	r0, r4
 810d906:	d001      	beq.n	810d90c <strncmp+0x1c>
 810d908:	2a00      	cmp	r2, #0
 810d90a:	d1f5      	bne.n	810d8f8 <strncmp+0x8>
 810d90c:	1ad0      	subs	r0, r2, r3
 810d90e:	bd10      	pop	{r4, pc}
 810d910:	4610      	mov	r0, r2
 810d912:	e7fc      	b.n	810d90e <strncmp+0x1e>

0810d914 <_fstat_r>:
 810d914:	b538      	push	{r3, r4, r5, lr}
 810d916:	4d07      	ldr	r5, [pc, #28]	@ (810d934 <_fstat_r+0x20>)
 810d918:	2300      	movs	r3, #0
 810d91a:	4604      	mov	r4, r0
 810d91c:	4608      	mov	r0, r1
 810d91e:	4611      	mov	r1, r2
 810d920:	602b      	str	r3, [r5, #0]
 810d922:	f7f5 fbf3 	bl	810310c <_fstat>
 810d926:	1c43      	adds	r3, r0, #1
 810d928:	d102      	bne.n	810d930 <_fstat_r+0x1c>
 810d92a:	682b      	ldr	r3, [r5, #0]
 810d92c:	b103      	cbz	r3, 810d930 <_fstat_r+0x1c>
 810d92e:	6023      	str	r3, [r4, #0]
 810d930:	bd38      	pop	{r3, r4, r5, pc}
 810d932:	bf00      	nop
 810d934:	100005e4 	.word	0x100005e4

0810d938 <_isatty_r>:
 810d938:	b538      	push	{r3, r4, r5, lr}
 810d93a:	4d06      	ldr	r5, [pc, #24]	@ (810d954 <_isatty_r+0x1c>)
 810d93c:	2300      	movs	r3, #0
 810d93e:	4604      	mov	r4, r0
 810d940:	4608      	mov	r0, r1
 810d942:	602b      	str	r3, [r5, #0]
 810d944:	f7f5 fbf2 	bl	810312c <_isatty>
 810d948:	1c43      	adds	r3, r0, #1
 810d94a:	d102      	bne.n	810d952 <_isatty_r+0x1a>
 810d94c:	682b      	ldr	r3, [r5, #0]
 810d94e:	b103      	cbz	r3, 810d952 <_isatty_r+0x1a>
 810d950:	6023      	str	r3, [r4, #0]
 810d952:	bd38      	pop	{r3, r4, r5, pc}
 810d954:	100005e4 	.word	0x100005e4

0810d958 <_sbrk_r>:
 810d958:	b538      	push	{r3, r4, r5, lr}
 810d95a:	4d06      	ldr	r5, [pc, #24]	@ (810d974 <_sbrk_r+0x1c>)
 810d95c:	2300      	movs	r3, #0
 810d95e:	4604      	mov	r4, r0
 810d960:	4608      	mov	r0, r1
 810d962:	602b      	str	r3, [r5, #0]
 810d964:	f7f5 fbfa 	bl	810315c <_sbrk>
 810d968:	1c43      	adds	r3, r0, #1
 810d96a:	d102      	bne.n	810d972 <_sbrk_r+0x1a>
 810d96c:	682b      	ldr	r3, [r5, #0]
 810d96e:	b103      	cbz	r3, 810d972 <_sbrk_r+0x1a>
 810d970:	6023      	str	r3, [r4, #0]
 810d972:	bd38      	pop	{r3, r4, r5, pc}
 810d974:	100005e4 	.word	0x100005e4

0810d978 <nan>:
 810d978:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 810d980 <nan+0x8>
 810d97c:	4770      	bx	lr
 810d97e:	bf00      	nop
 810d980:	00000000 	.word	0x00000000
 810d984:	7ff80000 	.word	0x7ff80000

0810d988 <__assert_func>:
 810d988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810d98a:	4614      	mov	r4, r2
 810d98c:	461a      	mov	r2, r3
 810d98e:	4b09      	ldr	r3, [pc, #36]	@ (810d9b4 <__assert_func+0x2c>)
 810d990:	681b      	ldr	r3, [r3, #0]
 810d992:	4605      	mov	r5, r0
 810d994:	68d8      	ldr	r0, [r3, #12]
 810d996:	b954      	cbnz	r4, 810d9ae <__assert_func+0x26>
 810d998:	4b07      	ldr	r3, [pc, #28]	@ (810d9b8 <__assert_func+0x30>)
 810d99a:	461c      	mov	r4, r3
 810d99c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810d9a0:	9100      	str	r1, [sp, #0]
 810d9a2:	462b      	mov	r3, r5
 810d9a4:	4905      	ldr	r1, [pc, #20]	@ (810d9bc <__assert_func+0x34>)
 810d9a6:	f000 fba7 	bl	810e0f8 <fiprintf>
 810d9aa:	f000 fbb7 	bl	810e11c <abort>
 810d9ae:	4b04      	ldr	r3, [pc, #16]	@ (810d9c0 <__assert_func+0x38>)
 810d9b0:	e7f4      	b.n	810d99c <__assert_func+0x14>
 810d9b2:	bf00      	nop
 810d9b4:	1000005c 	.word	0x1000005c
 810d9b8:	0810edd5 	.word	0x0810edd5
 810d9bc:	0810eda7 	.word	0x0810eda7
 810d9c0:	0810ed9a 	.word	0x0810ed9a

0810d9c4 <_calloc_r>:
 810d9c4:	b570      	push	{r4, r5, r6, lr}
 810d9c6:	fba1 5402 	umull	r5, r4, r1, r2
 810d9ca:	b93c      	cbnz	r4, 810d9dc <_calloc_r+0x18>
 810d9cc:	4629      	mov	r1, r5
 810d9ce:	f7fe f80b 	bl	810b9e8 <_malloc_r>
 810d9d2:	4606      	mov	r6, r0
 810d9d4:	b928      	cbnz	r0, 810d9e2 <_calloc_r+0x1e>
 810d9d6:	2600      	movs	r6, #0
 810d9d8:	4630      	mov	r0, r6
 810d9da:	bd70      	pop	{r4, r5, r6, pc}
 810d9dc:	220c      	movs	r2, #12
 810d9de:	6002      	str	r2, [r0, #0]
 810d9e0:	e7f9      	b.n	810d9d6 <_calloc_r+0x12>
 810d9e2:	462a      	mov	r2, r5
 810d9e4:	4621      	mov	r1, r4
 810d9e6:	f7fd f8ab 	bl	810ab40 <memset>
 810d9ea:	e7f5      	b.n	810d9d8 <_calloc_r+0x14>

0810d9ec <rshift>:
 810d9ec:	6903      	ldr	r3, [r0, #16]
 810d9ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810d9f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810d9f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 810d9fa:	f100 0414 	add.w	r4, r0, #20
 810d9fe:	dd45      	ble.n	810da8c <rshift+0xa0>
 810da00:	f011 011f 	ands.w	r1, r1, #31
 810da04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810da08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810da0c:	d10c      	bne.n	810da28 <rshift+0x3c>
 810da0e:	f100 0710 	add.w	r7, r0, #16
 810da12:	4629      	mov	r1, r5
 810da14:	42b1      	cmp	r1, r6
 810da16:	d334      	bcc.n	810da82 <rshift+0x96>
 810da18:	1a9b      	subs	r3, r3, r2
 810da1a:	009b      	lsls	r3, r3, #2
 810da1c:	1eea      	subs	r2, r5, #3
 810da1e:	4296      	cmp	r6, r2
 810da20:	bf38      	it	cc
 810da22:	2300      	movcc	r3, #0
 810da24:	4423      	add	r3, r4
 810da26:	e015      	b.n	810da54 <rshift+0x68>
 810da28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810da2c:	f1c1 0820 	rsb	r8, r1, #32
 810da30:	40cf      	lsrs	r7, r1
 810da32:	f105 0e04 	add.w	lr, r5, #4
 810da36:	46a1      	mov	r9, r4
 810da38:	4576      	cmp	r6, lr
 810da3a:	46f4      	mov	ip, lr
 810da3c:	d815      	bhi.n	810da6a <rshift+0x7e>
 810da3e:	1a9a      	subs	r2, r3, r2
 810da40:	0092      	lsls	r2, r2, #2
 810da42:	3a04      	subs	r2, #4
 810da44:	3501      	adds	r5, #1
 810da46:	42ae      	cmp	r6, r5
 810da48:	bf38      	it	cc
 810da4a:	2200      	movcc	r2, #0
 810da4c:	18a3      	adds	r3, r4, r2
 810da4e:	50a7      	str	r7, [r4, r2]
 810da50:	b107      	cbz	r7, 810da54 <rshift+0x68>
 810da52:	3304      	adds	r3, #4
 810da54:	1b1a      	subs	r2, r3, r4
 810da56:	42a3      	cmp	r3, r4
 810da58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810da5c:	bf08      	it	eq
 810da5e:	2300      	moveq	r3, #0
 810da60:	6102      	str	r2, [r0, #16]
 810da62:	bf08      	it	eq
 810da64:	6143      	streq	r3, [r0, #20]
 810da66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810da6a:	f8dc c000 	ldr.w	ip, [ip]
 810da6e:	fa0c fc08 	lsl.w	ip, ip, r8
 810da72:	ea4c 0707 	orr.w	r7, ip, r7
 810da76:	f849 7b04 	str.w	r7, [r9], #4
 810da7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 810da7e:	40cf      	lsrs	r7, r1
 810da80:	e7da      	b.n	810da38 <rshift+0x4c>
 810da82:	f851 cb04 	ldr.w	ip, [r1], #4
 810da86:	f847 cf04 	str.w	ip, [r7, #4]!
 810da8a:	e7c3      	b.n	810da14 <rshift+0x28>
 810da8c:	4623      	mov	r3, r4
 810da8e:	e7e1      	b.n	810da54 <rshift+0x68>

0810da90 <__hexdig_fun>:
 810da90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 810da94:	2b09      	cmp	r3, #9
 810da96:	d802      	bhi.n	810da9e <__hexdig_fun+0xe>
 810da98:	3820      	subs	r0, #32
 810da9a:	b2c0      	uxtb	r0, r0
 810da9c:	4770      	bx	lr
 810da9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 810daa2:	2b05      	cmp	r3, #5
 810daa4:	d801      	bhi.n	810daaa <__hexdig_fun+0x1a>
 810daa6:	3847      	subs	r0, #71	@ 0x47
 810daa8:	e7f7      	b.n	810da9a <__hexdig_fun+0xa>
 810daaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 810daae:	2b05      	cmp	r3, #5
 810dab0:	d801      	bhi.n	810dab6 <__hexdig_fun+0x26>
 810dab2:	3827      	subs	r0, #39	@ 0x27
 810dab4:	e7f1      	b.n	810da9a <__hexdig_fun+0xa>
 810dab6:	2000      	movs	r0, #0
 810dab8:	4770      	bx	lr
	...

0810dabc <__gethex>:
 810dabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dac0:	b085      	sub	sp, #20
 810dac2:	468a      	mov	sl, r1
 810dac4:	9302      	str	r3, [sp, #8]
 810dac6:	680b      	ldr	r3, [r1, #0]
 810dac8:	9001      	str	r0, [sp, #4]
 810daca:	4690      	mov	r8, r2
 810dacc:	1c9c      	adds	r4, r3, #2
 810dace:	46a1      	mov	r9, r4
 810dad0:	f814 0b01 	ldrb.w	r0, [r4], #1
 810dad4:	2830      	cmp	r0, #48	@ 0x30
 810dad6:	d0fa      	beq.n	810dace <__gethex+0x12>
 810dad8:	eba9 0303 	sub.w	r3, r9, r3
 810dadc:	f1a3 0b02 	sub.w	fp, r3, #2
 810dae0:	f7ff ffd6 	bl	810da90 <__hexdig_fun>
 810dae4:	4605      	mov	r5, r0
 810dae6:	2800      	cmp	r0, #0
 810dae8:	d168      	bne.n	810dbbc <__gethex+0x100>
 810daea:	49a0      	ldr	r1, [pc, #640]	@ (810dd6c <__gethex+0x2b0>)
 810daec:	2201      	movs	r2, #1
 810daee:	4648      	mov	r0, r9
 810daf0:	f7ff fefe 	bl	810d8f0 <strncmp>
 810daf4:	4607      	mov	r7, r0
 810daf6:	2800      	cmp	r0, #0
 810daf8:	d167      	bne.n	810dbca <__gethex+0x10e>
 810dafa:	f899 0001 	ldrb.w	r0, [r9, #1]
 810dafe:	4626      	mov	r6, r4
 810db00:	f7ff ffc6 	bl	810da90 <__hexdig_fun>
 810db04:	2800      	cmp	r0, #0
 810db06:	d062      	beq.n	810dbce <__gethex+0x112>
 810db08:	4623      	mov	r3, r4
 810db0a:	7818      	ldrb	r0, [r3, #0]
 810db0c:	2830      	cmp	r0, #48	@ 0x30
 810db0e:	4699      	mov	r9, r3
 810db10:	f103 0301 	add.w	r3, r3, #1
 810db14:	d0f9      	beq.n	810db0a <__gethex+0x4e>
 810db16:	f7ff ffbb 	bl	810da90 <__hexdig_fun>
 810db1a:	fab0 f580 	clz	r5, r0
 810db1e:	096d      	lsrs	r5, r5, #5
 810db20:	f04f 0b01 	mov.w	fp, #1
 810db24:	464a      	mov	r2, r9
 810db26:	4616      	mov	r6, r2
 810db28:	3201      	adds	r2, #1
 810db2a:	7830      	ldrb	r0, [r6, #0]
 810db2c:	f7ff ffb0 	bl	810da90 <__hexdig_fun>
 810db30:	2800      	cmp	r0, #0
 810db32:	d1f8      	bne.n	810db26 <__gethex+0x6a>
 810db34:	498d      	ldr	r1, [pc, #564]	@ (810dd6c <__gethex+0x2b0>)
 810db36:	2201      	movs	r2, #1
 810db38:	4630      	mov	r0, r6
 810db3a:	f7ff fed9 	bl	810d8f0 <strncmp>
 810db3e:	2800      	cmp	r0, #0
 810db40:	d13f      	bne.n	810dbc2 <__gethex+0x106>
 810db42:	b944      	cbnz	r4, 810db56 <__gethex+0x9a>
 810db44:	1c74      	adds	r4, r6, #1
 810db46:	4622      	mov	r2, r4
 810db48:	4616      	mov	r6, r2
 810db4a:	3201      	adds	r2, #1
 810db4c:	7830      	ldrb	r0, [r6, #0]
 810db4e:	f7ff ff9f 	bl	810da90 <__hexdig_fun>
 810db52:	2800      	cmp	r0, #0
 810db54:	d1f8      	bne.n	810db48 <__gethex+0x8c>
 810db56:	1ba4      	subs	r4, r4, r6
 810db58:	00a7      	lsls	r7, r4, #2
 810db5a:	7833      	ldrb	r3, [r6, #0]
 810db5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 810db60:	2b50      	cmp	r3, #80	@ 0x50
 810db62:	d13e      	bne.n	810dbe2 <__gethex+0x126>
 810db64:	7873      	ldrb	r3, [r6, #1]
 810db66:	2b2b      	cmp	r3, #43	@ 0x2b
 810db68:	d033      	beq.n	810dbd2 <__gethex+0x116>
 810db6a:	2b2d      	cmp	r3, #45	@ 0x2d
 810db6c:	d034      	beq.n	810dbd8 <__gethex+0x11c>
 810db6e:	1c71      	adds	r1, r6, #1
 810db70:	2400      	movs	r4, #0
 810db72:	7808      	ldrb	r0, [r1, #0]
 810db74:	f7ff ff8c 	bl	810da90 <__hexdig_fun>
 810db78:	1e43      	subs	r3, r0, #1
 810db7a:	b2db      	uxtb	r3, r3
 810db7c:	2b18      	cmp	r3, #24
 810db7e:	d830      	bhi.n	810dbe2 <__gethex+0x126>
 810db80:	f1a0 0210 	sub.w	r2, r0, #16
 810db84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810db88:	f7ff ff82 	bl	810da90 <__hexdig_fun>
 810db8c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 810db90:	fa5f fc8c 	uxtb.w	ip, ip
 810db94:	f1bc 0f18 	cmp.w	ip, #24
 810db98:	f04f 030a 	mov.w	r3, #10
 810db9c:	d91e      	bls.n	810dbdc <__gethex+0x120>
 810db9e:	b104      	cbz	r4, 810dba2 <__gethex+0xe6>
 810dba0:	4252      	negs	r2, r2
 810dba2:	4417      	add	r7, r2
 810dba4:	f8ca 1000 	str.w	r1, [sl]
 810dba8:	b1ed      	cbz	r5, 810dbe6 <__gethex+0x12a>
 810dbaa:	f1bb 0f00 	cmp.w	fp, #0
 810dbae:	bf0c      	ite	eq
 810dbb0:	2506      	moveq	r5, #6
 810dbb2:	2500      	movne	r5, #0
 810dbb4:	4628      	mov	r0, r5
 810dbb6:	b005      	add	sp, #20
 810dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dbbc:	2500      	movs	r5, #0
 810dbbe:	462c      	mov	r4, r5
 810dbc0:	e7b0      	b.n	810db24 <__gethex+0x68>
 810dbc2:	2c00      	cmp	r4, #0
 810dbc4:	d1c7      	bne.n	810db56 <__gethex+0x9a>
 810dbc6:	4627      	mov	r7, r4
 810dbc8:	e7c7      	b.n	810db5a <__gethex+0x9e>
 810dbca:	464e      	mov	r6, r9
 810dbcc:	462f      	mov	r7, r5
 810dbce:	2501      	movs	r5, #1
 810dbd0:	e7c3      	b.n	810db5a <__gethex+0x9e>
 810dbd2:	2400      	movs	r4, #0
 810dbd4:	1cb1      	adds	r1, r6, #2
 810dbd6:	e7cc      	b.n	810db72 <__gethex+0xb6>
 810dbd8:	2401      	movs	r4, #1
 810dbda:	e7fb      	b.n	810dbd4 <__gethex+0x118>
 810dbdc:	fb03 0002 	mla	r0, r3, r2, r0
 810dbe0:	e7ce      	b.n	810db80 <__gethex+0xc4>
 810dbe2:	4631      	mov	r1, r6
 810dbe4:	e7de      	b.n	810dba4 <__gethex+0xe8>
 810dbe6:	eba6 0309 	sub.w	r3, r6, r9
 810dbea:	3b01      	subs	r3, #1
 810dbec:	4629      	mov	r1, r5
 810dbee:	2b07      	cmp	r3, #7
 810dbf0:	dc0a      	bgt.n	810dc08 <__gethex+0x14c>
 810dbf2:	9801      	ldr	r0, [sp, #4]
 810dbf4:	f7fd ff84 	bl	810bb00 <_Balloc>
 810dbf8:	4604      	mov	r4, r0
 810dbfa:	b940      	cbnz	r0, 810dc0e <__gethex+0x152>
 810dbfc:	4b5c      	ldr	r3, [pc, #368]	@ (810dd70 <__gethex+0x2b4>)
 810dbfe:	4602      	mov	r2, r0
 810dc00:	21e4      	movs	r1, #228	@ 0xe4
 810dc02:	485c      	ldr	r0, [pc, #368]	@ (810dd74 <__gethex+0x2b8>)
 810dc04:	f7ff fec0 	bl	810d988 <__assert_func>
 810dc08:	3101      	adds	r1, #1
 810dc0a:	105b      	asrs	r3, r3, #1
 810dc0c:	e7ef      	b.n	810dbee <__gethex+0x132>
 810dc0e:	f100 0a14 	add.w	sl, r0, #20
 810dc12:	2300      	movs	r3, #0
 810dc14:	4655      	mov	r5, sl
 810dc16:	469b      	mov	fp, r3
 810dc18:	45b1      	cmp	r9, r6
 810dc1a:	d337      	bcc.n	810dc8c <__gethex+0x1d0>
 810dc1c:	f845 bb04 	str.w	fp, [r5], #4
 810dc20:	eba5 050a 	sub.w	r5, r5, sl
 810dc24:	10ad      	asrs	r5, r5, #2
 810dc26:	6125      	str	r5, [r4, #16]
 810dc28:	4658      	mov	r0, fp
 810dc2a:	f7fe f85b 	bl	810bce4 <__hi0bits>
 810dc2e:	016d      	lsls	r5, r5, #5
 810dc30:	f8d8 6000 	ldr.w	r6, [r8]
 810dc34:	1a2d      	subs	r5, r5, r0
 810dc36:	42b5      	cmp	r5, r6
 810dc38:	dd54      	ble.n	810dce4 <__gethex+0x228>
 810dc3a:	1bad      	subs	r5, r5, r6
 810dc3c:	4629      	mov	r1, r5
 810dc3e:	4620      	mov	r0, r4
 810dc40:	f7fe fbef 	bl	810c422 <__any_on>
 810dc44:	4681      	mov	r9, r0
 810dc46:	b178      	cbz	r0, 810dc68 <__gethex+0x1ac>
 810dc48:	1e6b      	subs	r3, r5, #1
 810dc4a:	1159      	asrs	r1, r3, #5
 810dc4c:	f003 021f 	and.w	r2, r3, #31
 810dc50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810dc54:	f04f 0901 	mov.w	r9, #1
 810dc58:	fa09 f202 	lsl.w	r2, r9, r2
 810dc5c:	420a      	tst	r2, r1
 810dc5e:	d003      	beq.n	810dc68 <__gethex+0x1ac>
 810dc60:	454b      	cmp	r3, r9
 810dc62:	dc36      	bgt.n	810dcd2 <__gethex+0x216>
 810dc64:	f04f 0902 	mov.w	r9, #2
 810dc68:	4629      	mov	r1, r5
 810dc6a:	4620      	mov	r0, r4
 810dc6c:	f7ff febe 	bl	810d9ec <rshift>
 810dc70:	442f      	add	r7, r5
 810dc72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810dc76:	42bb      	cmp	r3, r7
 810dc78:	da42      	bge.n	810dd00 <__gethex+0x244>
 810dc7a:	9801      	ldr	r0, [sp, #4]
 810dc7c:	4621      	mov	r1, r4
 810dc7e:	f7fd ff7f 	bl	810bb80 <_Bfree>
 810dc82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810dc84:	2300      	movs	r3, #0
 810dc86:	6013      	str	r3, [r2, #0]
 810dc88:	25a3      	movs	r5, #163	@ 0xa3
 810dc8a:	e793      	b.n	810dbb4 <__gethex+0xf8>
 810dc8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 810dc90:	2a2e      	cmp	r2, #46	@ 0x2e
 810dc92:	d012      	beq.n	810dcba <__gethex+0x1fe>
 810dc94:	2b20      	cmp	r3, #32
 810dc96:	d104      	bne.n	810dca2 <__gethex+0x1e6>
 810dc98:	f845 bb04 	str.w	fp, [r5], #4
 810dc9c:	f04f 0b00 	mov.w	fp, #0
 810dca0:	465b      	mov	r3, fp
 810dca2:	7830      	ldrb	r0, [r6, #0]
 810dca4:	9303      	str	r3, [sp, #12]
 810dca6:	f7ff fef3 	bl	810da90 <__hexdig_fun>
 810dcaa:	9b03      	ldr	r3, [sp, #12]
 810dcac:	f000 000f 	and.w	r0, r0, #15
 810dcb0:	4098      	lsls	r0, r3
 810dcb2:	ea4b 0b00 	orr.w	fp, fp, r0
 810dcb6:	3304      	adds	r3, #4
 810dcb8:	e7ae      	b.n	810dc18 <__gethex+0x15c>
 810dcba:	45b1      	cmp	r9, r6
 810dcbc:	d8ea      	bhi.n	810dc94 <__gethex+0x1d8>
 810dcbe:	492b      	ldr	r1, [pc, #172]	@ (810dd6c <__gethex+0x2b0>)
 810dcc0:	9303      	str	r3, [sp, #12]
 810dcc2:	2201      	movs	r2, #1
 810dcc4:	4630      	mov	r0, r6
 810dcc6:	f7ff fe13 	bl	810d8f0 <strncmp>
 810dcca:	9b03      	ldr	r3, [sp, #12]
 810dccc:	2800      	cmp	r0, #0
 810dcce:	d1e1      	bne.n	810dc94 <__gethex+0x1d8>
 810dcd0:	e7a2      	b.n	810dc18 <__gethex+0x15c>
 810dcd2:	1ea9      	subs	r1, r5, #2
 810dcd4:	4620      	mov	r0, r4
 810dcd6:	f7fe fba4 	bl	810c422 <__any_on>
 810dcda:	2800      	cmp	r0, #0
 810dcdc:	d0c2      	beq.n	810dc64 <__gethex+0x1a8>
 810dcde:	f04f 0903 	mov.w	r9, #3
 810dce2:	e7c1      	b.n	810dc68 <__gethex+0x1ac>
 810dce4:	da09      	bge.n	810dcfa <__gethex+0x23e>
 810dce6:	1b75      	subs	r5, r6, r5
 810dce8:	4621      	mov	r1, r4
 810dcea:	9801      	ldr	r0, [sp, #4]
 810dcec:	462a      	mov	r2, r5
 810dcee:	f7fe f95f 	bl	810bfb0 <__lshift>
 810dcf2:	1b7f      	subs	r7, r7, r5
 810dcf4:	4604      	mov	r4, r0
 810dcf6:	f100 0a14 	add.w	sl, r0, #20
 810dcfa:	f04f 0900 	mov.w	r9, #0
 810dcfe:	e7b8      	b.n	810dc72 <__gethex+0x1b6>
 810dd00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810dd04:	42bd      	cmp	r5, r7
 810dd06:	dd6f      	ble.n	810dde8 <__gethex+0x32c>
 810dd08:	1bed      	subs	r5, r5, r7
 810dd0a:	42ae      	cmp	r6, r5
 810dd0c:	dc34      	bgt.n	810dd78 <__gethex+0x2bc>
 810dd0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810dd12:	2b02      	cmp	r3, #2
 810dd14:	d022      	beq.n	810dd5c <__gethex+0x2a0>
 810dd16:	2b03      	cmp	r3, #3
 810dd18:	d024      	beq.n	810dd64 <__gethex+0x2a8>
 810dd1a:	2b01      	cmp	r3, #1
 810dd1c:	d115      	bne.n	810dd4a <__gethex+0x28e>
 810dd1e:	42ae      	cmp	r6, r5
 810dd20:	d113      	bne.n	810dd4a <__gethex+0x28e>
 810dd22:	2e01      	cmp	r6, #1
 810dd24:	d10b      	bne.n	810dd3e <__gethex+0x282>
 810dd26:	9a02      	ldr	r2, [sp, #8]
 810dd28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810dd2c:	6013      	str	r3, [r2, #0]
 810dd2e:	2301      	movs	r3, #1
 810dd30:	6123      	str	r3, [r4, #16]
 810dd32:	f8ca 3000 	str.w	r3, [sl]
 810dd36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810dd38:	2562      	movs	r5, #98	@ 0x62
 810dd3a:	601c      	str	r4, [r3, #0]
 810dd3c:	e73a      	b.n	810dbb4 <__gethex+0xf8>
 810dd3e:	1e71      	subs	r1, r6, #1
 810dd40:	4620      	mov	r0, r4
 810dd42:	f7fe fb6e 	bl	810c422 <__any_on>
 810dd46:	2800      	cmp	r0, #0
 810dd48:	d1ed      	bne.n	810dd26 <__gethex+0x26a>
 810dd4a:	9801      	ldr	r0, [sp, #4]
 810dd4c:	4621      	mov	r1, r4
 810dd4e:	f7fd ff17 	bl	810bb80 <_Bfree>
 810dd52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810dd54:	2300      	movs	r3, #0
 810dd56:	6013      	str	r3, [r2, #0]
 810dd58:	2550      	movs	r5, #80	@ 0x50
 810dd5a:	e72b      	b.n	810dbb4 <__gethex+0xf8>
 810dd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dd5e:	2b00      	cmp	r3, #0
 810dd60:	d1f3      	bne.n	810dd4a <__gethex+0x28e>
 810dd62:	e7e0      	b.n	810dd26 <__gethex+0x26a>
 810dd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810dd66:	2b00      	cmp	r3, #0
 810dd68:	d1dd      	bne.n	810dd26 <__gethex+0x26a>
 810dd6a:	e7ee      	b.n	810dd4a <__gethex+0x28e>
 810dd6c:	0810ec28 	.word	0x0810ec28
 810dd70:	0810eac1 	.word	0x0810eac1
 810dd74:	0810edd6 	.word	0x0810edd6
 810dd78:	1e6f      	subs	r7, r5, #1
 810dd7a:	f1b9 0f00 	cmp.w	r9, #0
 810dd7e:	d130      	bne.n	810dde2 <__gethex+0x326>
 810dd80:	b127      	cbz	r7, 810dd8c <__gethex+0x2d0>
 810dd82:	4639      	mov	r1, r7
 810dd84:	4620      	mov	r0, r4
 810dd86:	f7fe fb4c 	bl	810c422 <__any_on>
 810dd8a:	4681      	mov	r9, r0
 810dd8c:	117a      	asrs	r2, r7, #5
 810dd8e:	2301      	movs	r3, #1
 810dd90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810dd94:	f007 071f 	and.w	r7, r7, #31
 810dd98:	40bb      	lsls	r3, r7
 810dd9a:	4213      	tst	r3, r2
 810dd9c:	4629      	mov	r1, r5
 810dd9e:	4620      	mov	r0, r4
 810dda0:	bf18      	it	ne
 810dda2:	f049 0902 	orrne.w	r9, r9, #2
 810dda6:	f7ff fe21 	bl	810d9ec <rshift>
 810ddaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 810ddae:	1b76      	subs	r6, r6, r5
 810ddb0:	2502      	movs	r5, #2
 810ddb2:	f1b9 0f00 	cmp.w	r9, #0
 810ddb6:	d047      	beq.n	810de48 <__gethex+0x38c>
 810ddb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810ddbc:	2b02      	cmp	r3, #2
 810ddbe:	d015      	beq.n	810ddec <__gethex+0x330>
 810ddc0:	2b03      	cmp	r3, #3
 810ddc2:	d017      	beq.n	810ddf4 <__gethex+0x338>
 810ddc4:	2b01      	cmp	r3, #1
 810ddc6:	d109      	bne.n	810dddc <__gethex+0x320>
 810ddc8:	f019 0f02 	tst.w	r9, #2
 810ddcc:	d006      	beq.n	810dddc <__gethex+0x320>
 810ddce:	f8da 3000 	ldr.w	r3, [sl]
 810ddd2:	ea49 0903 	orr.w	r9, r9, r3
 810ddd6:	f019 0f01 	tst.w	r9, #1
 810ddda:	d10e      	bne.n	810ddfa <__gethex+0x33e>
 810dddc:	f045 0510 	orr.w	r5, r5, #16
 810dde0:	e032      	b.n	810de48 <__gethex+0x38c>
 810dde2:	f04f 0901 	mov.w	r9, #1
 810dde6:	e7d1      	b.n	810dd8c <__gethex+0x2d0>
 810dde8:	2501      	movs	r5, #1
 810ddea:	e7e2      	b.n	810ddb2 <__gethex+0x2f6>
 810ddec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ddee:	f1c3 0301 	rsb	r3, r3, #1
 810ddf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 810ddf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810ddf6:	2b00      	cmp	r3, #0
 810ddf8:	d0f0      	beq.n	810dddc <__gethex+0x320>
 810ddfa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810ddfe:	f104 0314 	add.w	r3, r4, #20
 810de02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810de06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810de0a:	f04f 0c00 	mov.w	ip, #0
 810de0e:	4618      	mov	r0, r3
 810de10:	f853 2b04 	ldr.w	r2, [r3], #4
 810de14:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 810de18:	d01b      	beq.n	810de52 <__gethex+0x396>
 810de1a:	3201      	adds	r2, #1
 810de1c:	6002      	str	r2, [r0, #0]
 810de1e:	2d02      	cmp	r5, #2
 810de20:	f104 0314 	add.w	r3, r4, #20
 810de24:	d13c      	bne.n	810dea0 <__gethex+0x3e4>
 810de26:	f8d8 2000 	ldr.w	r2, [r8]
 810de2a:	3a01      	subs	r2, #1
 810de2c:	42b2      	cmp	r2, r6
 810de2e:	d109      	bne.n	810de44 <__gethex+0x388>
 810de30:	1171      	asrs	r1, r6, #5
 810de32:	2201      	movs	r2, #1
 810de34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810de38:	f006 061f 	and.w	r6, r6, #31
 810de3c:	fa02 f606 	lsl.w	r6, r2, r6
 810de40:	421e      	tst	r6, r3
 810de42:	d13a      	bne.n	810deba <__gethex+0x3fe>
 810de44:	f045 0520 	orr.w	r5, r5, #32
 810de48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810de4a:	601c      	str	r4, [r3, #0]
 810de4c:	9b02      	ldr	r3, [sp, #8]
 810de4e:	601f      	str	r7, [r3, #0]
 810de50:	e6b0      	b.n	810dbb4 <__gethex+0xf8>
 810de52:	4299      	cmp	r1, r3
 810de54:	f843 cc04 	str.w	ip, [r3, #-4]
 810de58:	d8d9      	bhi.n	810de0e <__gethex+0x352>
 810de5a:	68a3      	ldr	r3, [r4, #8]
 810de5c:	459b      	cmp	fp, r3
 810de5e:	db17      	blt.n	810de90 <__gethex+0x3d4>
 810de60:	6861      	ldr	r1, [r4, #4]
 810de62:	9801      	ldr	r0, [sp, #4]
 810de64:	3101      	adds	r1, #1
 810de66:	f7fd fe4b 	bl	810bb00 <_Balloc>
 810de6a:	4681      	mov	r9, r0
 810de6c:	b918      	cbnz	r0, 810de76 <__gethex+0x3ba>
 810de6e:	4b1a      	ldr	r3, [pc, #104]	@ (810ded8 <__gethex+0x41c>)
 810de70:	4602      	mov	r2, r0
 810de72:	2184      	movs	r1, #132	@ 0x84
 810de74:	e6c5      	b.n	810dc02 <__gethex+0x146>
 810de76:	6922      	ldr	r2, [r4, #16]
 810de78:	3202      	adds	r2, #2
 810de7a:	f104 010c 	add.w	r1, r4, #12
 810de7e:	0092      	lsls	r2, r2, #2
 810de80:	300c      	adds	r0, #12
 810de82:	f7fc fedc 	bl	810ac3e <memcpy>
 810de86:	4621      	mov	r1, r4
 810de88:	9801      	ldr	r0, [sp, #4]
 810de8a:	f7fd fe79 	bl	810bb80 <_Bfree>
 810de8e:	464c      	mov	r4, r9
 810de90:	6923      	ldr	r3, [r4, #16]
 810de92:	1c5a      	adds	r2, r3, #1
 810de94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810de98:	6122      	str	r2, [r4, #16]
 810de9a:	2201      	movs	r2, #1
 810de9c:	615a      	str	r2, [r3, #20]
 810de9e:	e7be      	b.n	810de1e <__gethex+0x362>
 810dea0:	6922      	ldr	r2, [r4, #16]
 810dea2:	455a      	cmp	r2, fp
 810dea4:	dd0b      	ble.n	810debe <__gethex+0x402>
 810dea6:	2101      	movs	r1, #1
 810dea8:	4620      	mov	r0, r4
 810deaa:	f7ff fd9f 	bl	810d9ec <rshift>
 810deae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810deb2:	3701      	adds	r7, #1
 810deb4:	42bb      	cmp	r3, r7
 810deb6:	f6ff aee0 	blt.w	810dc7a <__gethex+0x1be>
 810deba:	2501      	movs	r5, #1
 810debc:	e7c2      	b.n	810de44 <__gethex+0x388>
 810debe:	f016 061f 	ands.w	r6, r6, #31
 810dec2:	d0fa      	beq.n	810deba <__gethex+0x3fe>
 810dec4:	4453      	add	r3, sl
 810dec6:	f1c6 0620 	rsb	r6, r6, #32
 810deca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 810dece:	f7fd ff09 	bl	810bce4 <__hi0bits>
 810ded2:	42b0      	cmp	r0, r6
 810ded4:	dbe7      	blt.n	810dea6 <__gethex+0x3ea>
 810ded6:	e7f0      	b.n	810deba <__gethex+0x3fe>
 810ded8:	0810eac1 	.word	0x0810eac1

0810dedc <L_shift>:
 810dedc:	f1c2 0208 	rsb	r2, r2, #8
 810dee0:	0092      	lsls	r2, r2, #2
 810dee2:	b570      	push	{r4, r5, r6, lr}
 810dee4:	f1c2 0620 	rsb	r6, r2, #32
 810dee8:	6843      	ldr	r3, [r0, #4]
 810deea:	6804      	ldr	r4, [r0, #0]
 810deec:	fa03 f506 	lsl.w	r5, r3, r6
 810def0:	432c      	orrs	r4, r5
 810def2:	40d3      	lsrs	r3, r2
 810def4:	6004      	str	r4, [r0, #0]
 810def6:	f840 3f04 	str.w	r3, [r0, #4]!
 810defa:	4288      	cmp	r0, r1
 810defc:	d3f4      	bcc.n	810dee8 <L_shift+0xc>
 810defe:	bd70      	pop	{r4, r5, r6, pc}

0810df00 <__match>:
 810df00:	b530      	push	{r4, r5, lr}
 810df02:	6803      	ldr	r3, [r0, #0]
 810df04:	3301      	adds	r3, #1
 810df06:	f811 4b01 	ldrb.w	r4, [r1], #1
 810df0a:	b914      	cbnz	r4, 810df12 <__match+0x12>
 810df0c:	6003      	str	r3, [r0, #0]
 810df0e:	2001      	movs	r0, #1
 810df10:	bd30      	pop	{r4, r5, pc}
 810df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 810df16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 810df1a:	2d19      	cmp	r5, #25
 810df1c:	bf98      	it	ls
 810df1e:	3220      	addls	r2, #32
 810df20:	42a2      	cmp	r2, r4
 810df22:	d0f0      	beq.n	810df06 <__match+0x6>
 810df24:	2000      	movs	r0, #0
 810df26:	e7f3      	b.n	810df10 <__match+0x10>

0810df28 <__hexnan>:
 810df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810df2c:	680b      	ldr	r3, [r1, #0]
 810df2e:	6801      	ldr	r1, [r0, #0]
 810df30:	115e      	asrs	r6, r3, #5
 810df32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810df36:	f013 031f 	ands.w	r3, r3, #31
 810df3a:	b087      	sub	sp, #28
 810df3c:	bf18      	it	ne
 810df3e:	3604      	addne	r6, #4
 810df40:	2500      	movs	r5, #0
 810df42:	1f37      	subs	r7, r6, #4
 810df44:	4682      	mov	sl, r0
 810df46:	4690      	mov	r8, r2
 810df48:	9301      	str	r3, [sp, #4]
 810df4a:	f846 5c04 	str.w	r5, [r6, #-4]
 810df4e:	46b9      	mov	r9, r7
 810df50:	463c      	mov	r4, r7
 810df52:	9502      	str	r5, [sp, #8]
 810df54:	46ab      	mov	fp, r5
 810df56:	784a      	ldrb	r2, [r1, #1]
 810df58:	1c4b      	adds	r3, r1, #1
 810df5a:	9303      	str	r3, [sp, #12]
 810df5c:	b342      	cbz	r2, 810dfb0 <__hexnan+0x88>
 810df5e:	4610      	mov	r0, r2
 810df60:	9105      	str	r1, [sp, #20]
 810df62:	9204      	str	r2, [sp, #16]
 810df64:	f7ff fd94 	bl	810da90 <__hexdig_fun>
 810df68:	2800      	cmp	r0, #0
 810df6a:	d151      	bne.n	810e010 <__hexnan+0xe8>
 810df6c:	9a04      	ldr	r2, [sp, #16]
 810df6e:	9905      	ldr	r1, [sp, #20]
 810df70:	2a20      	cmp	r2, #32
 810df72:	d818      	bhi.n	810dfa6 <__hexnan+0x7e>
 810df74:	9b02      	ldr	r3, [sp, #8]
 810df76:	459b      	cmp	fp, r3
 810df78:	dd13      	ble.n	810dfa2 <__hexnan+0x7a>
 810df7a:	454c      	cmp	r4, r9
 810df7c:	d206      	bcs.n	810df8c <__hexnan+0x64>
 810df7e:	2d07      	cmp	r5, #7
 810df80:	dc04      	bgt.n	810df8c <__hexnan+0x64>
 810df82:	462a      	mov	r2, r5
 810df84:	4649      	mov	r1, r9
 810df86:	4620      	mov	r0, r4
 810df88:	f7ff ffa8 	bl	810dedc <L_shift>
 810df8c:	4544      	cmp	r4, r8
 810df8e:	d952      	bls.n	810e036 <__hexnan+0x10e>
 810df90:	2300      	movs	r3, #0
 810df92:	f1a4 0904 	sub.w	r9, r4, #4
 810df96:	f844 3c04 	str.w	r3, [r4, #-4]
 810df9a:	f8cd b008 	str.w	fp, [sp, #8]
 810df9e:	464c      	mov	r4, r9
 810dfa0:	461d      	mov	r5, r3
 810dfa2:	9903      	ldr	r1, [sp, #12]
 810dfa4:	e7d7      	b.n	810df56 <__hexnan+0x2e>
 810dfa6:	2a29      	cmp	r2, #41	@ 0x29
 810dfa8:	d157      	bne.n	810e05a <__hexnan+0x132>
 810dfaa:	3102      	adds	r1, #2
 810dfac:	f8ca 1000 	str.w	r1, [sl]
 810dfb0:	f1bb 0f00 	cmp.w	fp, #0
 810dfb4:	d051      	beq.n	810e05a <__hexnan+0x132>
 810dfb6:	454c      	cmp	r4, r9
 810dfb8:	d206      	bcs.n	810dfc8 <__hexnan+0xa0>
 810dfba:	2d07      	cmp	r5, #7
 810dfbc:	dc04      	bgt.n	810dfc8 <__hexnan+0xa0>
 810dfbe:	462a      	mov	r2, r5
 810dfc0:	4649      	mov	r1, r9
 810dfc2:	4620      	mov	r0, r4
 810dfc4:	f7ff ff8a 	bl	810dedc <L_shift>
 810dfc8:	4544      	cmp	r4, r8
 810dfca:	d936      	bls.n	810e03a <__hexnan+0x112>
 810dfcc:	f1a8 0204 	sub.w	r2, r8, #4
 810dfd0:	4623      	mov	r3, r4
 810dfd2:	f853 1b04 	ldr.w	r1, [r3], #4
 810dfd6:	f842 1f04 	str.w	r1, [r2, #4]!
 810dfda:	429f      	cmp	r7, r3
 810dfdc:	d2f9      	bcs.n	810dfd2 <__hexnan+0xaa>
 810dfde:	1b3b      	subs	r3, r7, r4
 810dfe0:	f023 0303 	bic.w	r3, r3, #3
 810dfe4:	3304      	adds	r3, #4
 810dfe6:	3401      	adds	r4, #1
 810dfe8:	3e03      	subs	r6, #3
 810dfea:	42b4      	cmp	r4, r6
 810dfec:	bf88      	it	hi
 810dfee:	2304      	movhi	r3, #4
 810dff0:	4443      	add	r3, r8
 810dff2:	2200      	movs	r2, #0
 810dff4:	f843 2b04 	str.w	r2, [r3], #4
 810dff8:	429f      	cmp	r7, r3
 810dffa:	d2fb      	bcs.n	810dff4 <__hexnan+0xcc>
 810dffc:	683b      	ldr	r3, [r7, #0]
 810dffe:	b91b      	cbnz	r3, 810e008 <__hexnan+0xe0>
 810e000:	4547      	cmp	r7, r8
 810e002:	d128      	bne.n	810e056 <__hexnan+0x12e>
 810e004:	2301      	movs	r3, #1
 810e006:	603b      	str	r3, [r7, #0]
 810e008:	2005      	movs	r0, #5
 810e00a:	b007      	add	sp, #28
 810e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e010:	3501      	adds	r5, #1
 810e012:	2d08      	cmp	r5, #8
 810e014:	f10b 0b01 	add.w	fp, fp, #1
 810e018:	dd06      	ble.n	810e028 <__hexnan+0x100>
 810e01a:	4544      	cmp	r4, r8
 810e01c:	d9c1      	bls.n	810dfa2 <__hexnan+0x7a>
 810e01e:	2300      	movs	r3, #0
 810e020:	f844 3c04 	str.w	r3, [r4, #-4]
 810e024:	2501      	movs	r5, #1
 810e026:	3c04      	subs	r4, #4
 810e028:	6822      	ldr	r2, [r4, #0]
 810e02a:	f000 000f 	and.w	r0, r0, #15
 810e02e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810e032:	6020      	str	r0, [r4, #0]
 810e034:	e7b5      	b.n	810dfa2 <__hexnan+0x7a>
 810e036:	2508      	movs	r5, #8
 810e038:	e7b3      	b.n	810dfa2 <__hexnan+0x7a>
 810e03a:	9b01      	ldr	r3, [sp, #4]
 810e03c:	2b00      	cmp	r3, #0
 810e03e:	d0dd      	beq.n	810dffc <__hexnan+0xd4>
 810e040:	f1c3 0320 	rsb	r3, r3, #32
 810e044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810e048:	40da      	lsrs	r2, r3
 810e04a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810e04e:	4013      	ands	r3, r2
 810e050:	f846 3c04 	str.w	r3, [r6, #-4]
 810e054:	e7d2      	b.n	810dffc <__hexnan+0xd4>
 810e056:	3f04      	subs	r7, #4
 810e058:	e7d0      	b.n	810dffc <__hexnan+0xd4>
 810e05a:	2004      	movs	r0, #4
 810e05c:	e7d5      	b.n	810e00a <__hexnan+0xe2>

0810e05e <__ascii_mbtowc>:
 810e05e:	b082      	sub	sp, #8
 810e060:	b901      	cbnz	r1, 810e064 <__ascii_mbtowc+0x6>
 810e062:	a901      	add	r1, sp, #4
 810e064:	b142      	cbz	r2, 810e078 <__ascii_mbtowc+0x1a>
 810e066:	b14b      	cbz	r3, 810e07c <__ascii_mbtowc+0x1e>
 810e068:	7813      	ldrb	r3, [r2, #0]
 810e06a:	600b      	str	r3, [r1, #0]
 810e06c:	7812      	ldrb	r2, [r2, #0]
 810e06e:	1e10      	subs	r0, r2, #0
 810e070:	bf18      	it	ne
 810e072:	2001      	movne	r0, #1
 810e074:	b002      	add	sp, #8
 810e076:	4770      	bx	lr
 810e078:	4610      	mov	r0, r2
 810e07a:	e7fb      	b.n	810e074 <__ascii_mbtowc+0x16>
 810e07c:	f06f 0001 	mvn.w	r0, #1
 810e080:	e7f8      	b.n	810e074 <__ascii_mbtowc+0x16>

0810e082 <_realloc_r>:
 810e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e086:	4680      	mov	r8, r0
 810e088:	4615      	mov	r5, r2
 810e08a:	460c      	mov	r4, r1
 810e08c:	b921      	cbnz	r1, 810e098 <_realloc_r+0x16>
 810e08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e092:	4611      	mov	r1, r2
 810e094:	f7fd bca8 	b.w	810b9e8 <_malloc_r>
 810e098:	b92a      	cbnz	r2, 810e0a6 <_realloc_r+0x24>
 810e09a:	f7fd fc31 	bl	810b900 <_free_r>
 810e09e:	2400      	movs	r4, #0
 810e0a0:	4620      	mov	r0, r4
 810e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e0a6:	f000 f840 	bl	810e12a <_malloc_usable_size_r>
 810e0aa:	4285      	cmp	r5, r0
 810e0ac:	4606      	mov	r6, r0
 810e0ae:	d802      	bhi.n	810e0b6 <_realloc_r+0x34>
 810e0b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810e0b4:	d8f4      	bhi.n	810e0a0 <_realloc_r+0x1e>
 810e0b6:	4629      	mov	r1, r5
 810e0b8:	4640      	mov	r0, r8
 810e0ba:	f7fd fc95 	bl	810b9e8 <_malloc_r>
 810e0be:	4607      	mov	r7, r0
 810e0c0:	2800      	cmp	r0, #0
 810e0c2:	d0ec      	beq.n	810e09e <_realloc_r+0x1c>
 810e0c4:	42b5      	cmp	r5, r6
 810e0c6:	462a      	mov	r2, r5
 810e0c8:	4621      	mov	r1, r4
 810e0ca:	bf28      	it	cs
 810e0cc:	4632      	movcs	r2, r6
 810e0ce:	f7fc fdb6 	bl	810ac3e <memcpy>
 810e0d2:	4621      	mov	r1, r4
 810e0d4:	4640      	mov	r0, r8
 810e0d6:	f7fd fc13 	bl	810b900 <_free_r>
 810e0da:	463c      	mov	r4, r7
 810e0dc:	e7e0      	b.n	810e0a0 <_realloc_r+0x1e>

0810e0de <__ascii_wctomb>:
 810e0de:	4603      	mov	r3, r0
 810e0e0:	4608      	mov	r0, r1
 810e0e2:	b141      	cbz	r1, 810e0f6 <__ascii_wctomb+0x18>
 810e0e4:	2aff      	cmp	r2, #255	@ 0xff
 810e0e6:	d904      	bls.n	810e0f2 <__ascii_wctomb+0x14>
 810e0e8:	228a      	movs	r2, #138	@ 0x8a
 810e0ea:	601a      	str	r2, [r3, #0]
 810e0ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810e0f0:	4770      	bx	lr
 810e0f2:	700a      	strb	r2, [r1, #0]
 810e0f4:	2001      	movs	r0, #1
 810e0f6:	4770      	bx	lr

0810e0f8 <fiprintf>:
 810e0f8:	b40e      	push	{r1, r2, r3}
 810e0fa:	b503      	push	{r0, r1, lr}
 810e0fc:	4601      	mov	r1, r0
 810e0fe:	ab03      	add	r3, sp, #12
 810e100:	4805      	ldr	r0, [pc, #20]	@ (810e118 <fiprintf+0x20>)
 810e102:	f853 2b04 	ldr.w	r2, [r3], #4
 810e106:	6800      	ldr	r0, [r0, #0]
 810e108:	9301      	str	r3, [sp, #4]
 810e10a:	f7ff f9b1 	bl	810d470 <_vfiprintf_r>
 810e10e:	b002      	add	sp, #8
 810e110:	f85d eb04 	ldr.w	lr, [sp], #4
 810e114:	b003      	add	sp, #12
 810e116:	4770      	bx	lr
 810e118:	1000005c 	.word	0x1000005c

0810e11c <abort>:
 810e11c:	b508      	push	{r3, lr}
 810e11e:	2006      	movs	r0, #6
 810e120:	f000 f834 	bl	810e18c <raise>
 810e124:	2001      	movs	r0, #1
 810e126:	f7f4 ffa1 	bl	810306c <_exit>

0810e12a <_malloc_usable_size_r>:
 810e12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e12e:	1f18      	subs	r0, r3, #4
 810e130:	2b00      	cmp	r3, #0
 810e132:	bfbc      	itt	lt
 810e134:	580b      	ldrlt	r3, [r1, r0]
 810e136:	18c0      	addlt	r0, r0, r3
 810e138:	4770      	bx	lr

0810e13a <_raise_r>:
 810e13a:	291f      	cmp	r1, #31
 810e13c:	b538      	push	{r3, r4, r5, lr}
 810e13e:	4605      	mov	r5, r0
 810e140:	460c      	mov	r4, r1
 810e142:	d904      	bls.n	810e14e <_raise_r+0x14>
 810e144:	2316      	movs	r3, #22
 810e146:	6003      	str	r3, [r0, #0]
 810e148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810e14c:	bd38      	pop	{r3, r4, r5, pc}
 810e14e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810e150:	b112      	cbz	r2, 810e158 <_raise_r+0x1e>
 810e152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e156:	b94b      	cbnz	r3, 810e16c <_raise_r+0x32>
 810e158:	4628      	mov	r0, r5
 810e15a:	f000 f831 	bl	810e1c0 <_getpid_r>
 810e15e:	4622      	mov	r2, r4
 810e160:	4601      	mov	r1, r0
 810e162:	4628      	mov	r0, r5
 810e164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e168:	f000 b818 	b.w	810e19c <_kill_r>
 810e16c:	2b01      	cmp	r3, #1
 810e16e:	d00a      	beq.n	810e186 <_raise_r+0x4c>
 810e170:	1c59      	adds	r1, r3, #1
 810e172:	d103      	bne.n	810e17c <_raise_r+0x42>
 810e174:	2316      	movs	r3, #22
 810e176:	6003      	str	r3, [r0, #0]
 810e178:	2001      	movs	r0, #1
 810e17a:	e7e7      	b.n	810e14c <_raise_r+0x12>
 810e17c:	2100      	movs	r1, #0
 810e17e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810e182:	4620      	mov	r0, r4
 810e184:	4798      	blx	r3
 810e186:	2000      	movs	r0, #0
 810e188:	e7e0      	b.n	810e14c <_raise_r+0x12>
	...

0810e18c <raise>:
 810e18c:	4b02      	ldr	r3, [pc, #8]	@ (810e198 <raise+0xc>)
 810e18e:	4601      	mov	r1, r0
 810e190:	6818      	ldr	r0, [r3, #0]
 810e192:	f7ff bfd2 	b.w	810e13a <_raise_r>
 810e196:	bf00      	nop
 810e198:	1000005c 	.word	0x1000005c

0810e19c <_kill_r>:
 810e19c:	b538      	push	{r3, r4, r5, lr}
 810e19e:	4d07      	ldr	r5, [pc, #28]	@ (810e1bc <_kill_r+0x20>)
 810e1a0:	2300      	movs	r3, #0
 810e1a2:	4604      	mov	r4, r0
 810e1a4:	4608      	mov	r0, r1
 810e1a6:	4611      	mov	r1, r2
 810e1a8:	602b      	str	r3, [r5, #0]
 810e1aa:	f7f4 ff4f 	bl	810304c <_kill>
 810e1ae:	1c43      	adds	r3, r0, #1
 810e1b0:	d102      	bne.n	810e1b8 <_kill_r+0x1c>
 810e1b2:	682b      	ldr	r3, [r5, #0]
 810e1b4:	b103      	cbz	r3, 810e1b8 <_kill_r+0x1c>
 810e1b6:	6023      	str	r3, [r4, #0]
 810e1b8:	bd38      	pop	{r3, r4, r5, pc}
 810e1ba:	bf00      	nop
 810e1bc:	100005e4 	.word	0x100005e4

0810e1c0 <_getpid_r>:
 810e1c0:	f7f4 bf3c 	b.w	810303c <_getpid>

0810e1c4 <sqrt>:
 810e1c4:	b538      	push	{r3, r4, r5, lr}
 810e1c6:	ed2d 8b02 	vpush	{d8}
 810e1ca:	ec55 4b10 	vmov	r4, r5, d0
 810e1ce:	f000 f825 	bl	810e21c <__ieee754_sqrt>
 810e1d2:	4622      	mov	r2, r4
 810e1d4:	462b      	mov	r3, r5
 810e1d6:	4620      	mov	r0, r4
 810e1d8:	4629      	mov	r1, r5
 810e1da:	eeb0 8a40 	vmov.f32	s16, s0
 810e1de:	eef0 8a60 	vmov.f32	s17, s1
 810e1e2:	f7f2 fd2b 	bl	8100c3c <__aeabi_dcmpun>
 810e1e6:	b990      	cbnz	r0, 810e20e <sqrt+0x4a>
 810e1e8:	2200      	movs	r2, #0
 810e1ea:	2300      	movs	r3, #0
 810e1ec:	4620      	mov	r0, r4
 810e1ee:	4629      	mov	r1, r5
 810e1f0:	f7f2 fcfc 	bl	8100bec <__aeabi_dcmplt>
 810e1f4:	b158      	cbz	r0, 810e20e <sqrt+0x4a>
 810e1f6:	f7fc fcf5 	bl	810abe4 <__errno>
 810e1fa:	2321      	movs	r3, #33	@ 0x21
 810e1fc:	6003      	str	r3, [r0, #0]
 810e1fe:	2200      	movs	r2, #0
 810e200:	2300      	movs	r3, #0
 810e202:	4610      	mov	r0, r2
 810e204:	4619      	mov	r1, r3
 810e206:	f7f2 fba9 	bl	810095c <__aeabi_ddiv>
 810e20a:	ec41 0b18 	vmov	d8, r0, r1
 810e20e:	eeb0 0a48 	vmov.f32	s0, s16
 810e212:	eef0 0a68 	vmov.f32	s1, s17
 810e216:	ecbd 8b02 	vpop	{d8}
 810e21a:	bd38      	pop	{r3, r4, r5, pc}

0810e21c <__ieee754_sqrt>:
 810e21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e220:	4a68      	ldr	r2, [pc, #416]	@ (810e3c4 <__ieee754_sqrt+0x1a8>)
 810e222:	ec55 4b10 	vmov	r4, r5, d0
 810e226:	43aa      	bics	r2, r5
 810e228:	462b      	mov	r3, r5
 810e22a:	4621      	mov	r1, r4
 810e22c:	d110      	bne.n	810e250 <__ieee754_sqrt+0x34>
 810e22e:	4622      	mov	r2, r4
 810e230:	4620      	mov	r0, r4
 810e232:	4629      	mov	r1, r5
 810e234:	f7f2 fa68 	bl	8100708 <__aeabi_dmul>
 810e238:	4602      	mov	r2, r0
 810e23a:	460b      	mov	r3, r1
 810e23c:	4620      	mov	r0, r4
 810e23e:	4629      	mov	r1, r5
 810e240:	f7f2 f8ac 	bl	810039c <__adddf3>
 810e244:	4604      	mov	r4, r0
 810e246:	460d      	mov	r5, r1
 810e248:	ec45 4b10 	vmov	d0, r4, r5
 810e24c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e250:	2d00      	cmp	r5, #0
 810e252:	dc0e      	bgt.n	810e272 <__ieee754_sqrt+0x56>
 810e254:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 810e258:	4322      	orrs	r2, r4
 810e25a:	d0f5      	beq.n	810e248 <__ieee754_sqrt+0x2c>
 810e25c:	b19d      	cbz	r5, 810e286 <__ieee754_sqrt+0x6a>
 810e25e:	4622      	mov	r2, r4
 810e260:	4620      	mov	r0, r4
 810e262:	4629      	mov	r1, r5
 810e264:	f7f2 f898 	bl	8100398 <__aeabi_dsub>
 810e268:	4602      	mov	r2, r0
 810e26a:	460b      	mov	r3, r1
 810e26c:	f7f2 fb76 	bl	810095c <__aeabi_ddiv>
 810e270:	e7e8      	b.n	810e244 <__ieee754_sqrt+0x28>
 810e272:	152a      	asrs	r2, r5, #20
 810e274:	d115      	bne.n	810e2a2 <__ieee754_sqrt+0x86>
 810e276:	2000      	movs	r0, #0
 810e278:	e009      	b.n	810e28e <__ieee754_sqrt+0x72>
 810e27a:	0acb      	lsrs	r3, r1, #11
 810e27c:	3a15      	subs	r2, #21
 810e27e:	0549      	lsls	r1, r1, #21
 810e280:	2b00      	cmp	r3, #0
 810e282:	d0fa      	beq.n	810e27a <__ieee754_sqrt+0x5e>
 810e284:	e7f7      	b.n	810e276 <__ieee754_sqrt+0x5a>
 810e286:	462a      	mov	r2, r5
 810e288:	e7fa      	b.n	810e280 <__ieee754_sqrt+0x64>
 810e28a:	005b      	lsls	r3, r3, #1
 810e28c:	3001      	adds	r0, #1
 810e28e:	02dc      	lsls	r4, r3, #11
 810e290:	d5fb      	bpl.n	810e28a <__ieee754_sqrt+0x6e>
 810e292:	1e44      	subs	r4, r0, #1
 810e294:	1b12      	subs	r2, r2, r4
 810e296:	f1c0 0420 	rsb	r4, r0, #32
 810e29a:	fa21 f404 	lsr.w	r4, r1, r4
 810e29e:	4323      	orrs	r3, r4
 810e2a0:	4081      	lsls	r1, r0
 810e2a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e2a6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 810e2aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810e2ae:	07d2      	lsls	r2, r2, #31
 810e2b0:	bf5c      	itt	pl
 810e2b2:	005b      	lslpl	r3, r3, #1
 810e2b4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 810e2b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e2bc:	bf58      	it	pl
 810e2be:	0049      	lslpl	r1, r1, #1
 810e2c0:	2600      	movs	r6, #0
 810e2c2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 810e2c6:	106d      	asrs	r5, r5, #1
 810e2c8:	0049      	lsls	r1, r1, #1
 810e2ca:	2016      	movs	r0, #22
 810e2cc:	4632      	mov	r2, r6
 810e2ce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 810e2d2:	1917      	adds	r7, r2, r4
 810e2d4:	429f      	cmp	r7, r3
 810e2d6:	bfde      	ittt	le
 810e2d8:	193a      	addle	r2, r7, r4
 810e2da:	1bdb      	suble	r3, r3, r7
 810e2dc:	1936      	addle	r6, r6, r4
 810e2de:	0fcf      	lsrs	r7, r1, #31
 810e2e0:	3801      	subs	r0, #1
 810e2e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 810e2e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e2ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810e2ee:	d1f0      	bne.n	810e2d2 <__ieee754_sqrt+0xb6>
 810e2f0:	4604      	mov	r4, r0
 810e2f2:	2720      	movs	r7, #32
 810e2f4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 810e2f8:	429a      	cmp	r2, r3
 810e2fa:	eb00 0e0c 	add.w	lr, r0, ip
 810e2fe:	db02      	blt.n	810e306 <__ieee754_sqrt+0xea>
 810e300:	d113      	bne.n	810e32a <__ieee754_sqrt+0x10e>
 810e302:	458e      	cmp	lr, r1
 810e304:	d811      	bhi.n	810e32a <__ieee754_sqrt+0x10e>
 810e306:	f1be 0f00 	cmp.w	lr, #0
 810e30a:	eb0e 000c 	add.w	r0, lr, ip
 810e30e:	da42      	bge.n	810e396 <__ieee754_sqrt+0x17a>
 810e310:	2800      	cmp	r0, #0
 810e312:	db40      	blt.n	810e396 <__ieee754_sqrt+0x17a>
 810e314:	f102 0801 	add.w	r8, r2, #1
 810e318:	1a9b      	subs	r3, r3, r2
 810e31a:	458e      	cmp	lr, r1
 810e31c:	bf88      	it	hi
 810e31e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 810e322:	eba1 010e 	sub.w	r1, r1, lr
 810e326:	4464      	add	r4, ip
 810e328:	4642      	mov	r2, r8
 810e32a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 810e32e:	3f01      	subs	r7, #1
 810e330:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 810e334:	ea4f 0141 	mov.w	r1, r1, lsl #1
 810e338:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 810e33c:	d1dc      	bne.n	810e2f8 <__ieee754_sqrt+0xdc>
 810e33e:	4319      	orrs	r1, r3
 810e340:	d01b      	beq.n	810e37a <__ieee754_sqrt+0x15e>
 810e342:	f8df a084 	ldr.w	sl, [pc, #132]	@ 810e3c8 <__ieee754_sqrt+0x1ac>
 810e346:	f8df b084 	ldr.w	fp, [pc, #132]	@ 810e3cc <__ieee754_sqrt+0x1b0>
 810e34a:	e9da 0100 	ldrd	r0, r1, [sl]
 810e34e:	e9db 2300 	ldrd	r2, r3, [fp]
 810e352:	f7f2 f821 	bl	8100398 <__aeabi_dsub>
 810e356:	e9da 8900 	ldrd	r8, r9, [sl]
 810e35a:	4602      	mov	r2, r0
 810e35c:	460b      	mov	r3, r1
 810e35e:	4640      	mov	r0, r8
 810e360:	4649      	mov	r1, r9
 810e362:	f7f2 fc4d 	bl	8100c00 <__aeabi_dcmple>
 810e366:	b140      	cbz	r0, 810e37a <__ieee754_sqrt+0x15e>
 810e368:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 810e36c:	e9da 0100 	ldrd	r0, r1, [sl]
 810e370:	e9db 2300 	ldrd	r2, r3, [fp]
 810e374:	d111      	bne.n	810e39a <__ieee754_sqrt+0x17e>
 810e376:	3601      	adds	r6, #1
 810e378:	463c      	mov	r4, r7
 810e37a:	1072      	asrs	r2, r6, #1
 810e37c:	0863      	lsrs	r3, r4, #1
 810e37e:	07f1      	lsls	r1, r6, #31
 810e380:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 810e384:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 810e388:	bf48      	it	mi
 810e38a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 810e38e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 810e392:	4618      	mov	r0, r3
 810e394:	e756      	b.n	810e244 <__ieee754_sqrt+0x28>
 810e396:	4690      	mov	r8, r2
 810e398:	e7be      	b.n	810e318 <__ieee754_sqrt+0xfc>
 810e39a:	f7f1 ffff 	bl	810039c <__adddf3>
 810e39e:	e9da 8900 	ldrd	r8, r9, [sl]
 810e3a2:	4602      	mov	r2, r0
 810e3a4:	460b      	mov	r3, r1
 810e3a6:	4640      	mov	r0, r8
 810e3a8:	4649      	mov	r1, r9
 810e3aa:	f7f2 fc1f 	bl	8100bec <__aeabi_dcmplt>
 810e3ae:	b120      	cbz	r0, 810e3ba <__ieee754_sqrt+0x19e>
 810e3b0:	1ca0      	adds	r0, r4, #2
 810e3b2:	bf08      	it	eq
 810e3b4:	3601      	addeq	r6, #1
 810e3b6:	3402      	adds	r4, #2
 810e3b8:	e7df      	b.n	810e37a <__ieee754_sqrt+0x15e>
 810e3ba:	1c63      	adds	r3, r4, #1
 810e3bc:	f023 0401 	bic.w	r4, r3, #1
 810e3c0:	e7db      	b.n	810e37a <__ieee754_sqrt+0x15e>
 810e3c2:	bf00      	nop
 810e3c4:	7ff00000 	.word	0x7ff00000
 810e3c8:	10000220 	.word	0x10000220
 810e3cc:	10000218 	.word	0x10000218

0810e3d0 <_init>:
 810e3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e3d2:	bf00      	nop
 810e3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e3d6:	bc08      	pop	{r3}
 810e3d8:	469e      	mov	lr, r3
 810e3da:	4770      	bx	lr

0810e3dc <_fini>:
 810e3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e3de:	bf00      	nop
 810e3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e3e2:	bc08      	pop	{r3}
 810e3e4:	469e      	mov	lr, r3
 810e3e6:	4770      	bx	lr
