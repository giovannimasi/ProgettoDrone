
Progetto Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004a8c  08004a8c  00005a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a9c  08004a9c  000060d0  2**0
                  CONTENTS
  4 .ARM          00000000  08004a9c  08004a9c  000060d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a9c  08004a9c  000060d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00005a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08004aa4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08004ab4  00006010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08004b14  00006070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005f4  240000d0  08004b74  000060d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240006c4  08004b74  000066c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012a4b  00000000  00000000  000060fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002471  00000000  00000000  00018b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d58  00000000  00000000  0001afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a16  00000000  00000000  0001bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00039f75  00000000  00000000  0001c72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000100bc  00000000  00000000  000566a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0017eea3  00000000  00000000  0006675f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e5602  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000377c  00000000  00000000  001e5648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  001e8dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004a74 	.word	0x08004a74

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08004a74 	.word	0x08004a74

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800040e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b23      	ldr	r3, [pc, #140]	@ (80004a0 <main+0x9c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f98b 	bl	8000748 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fb5d 	bl	8000af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f835 	bl	80004a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b19      	ldr	r3, [pc, #100]	@ (80004a0 <main+0x9c>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000440:	4a17      	ldr	r2, [pc, #92]	@ (80004a0 <main+0x9c>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800044a:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <main+0x9c>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f001 fae7 	bl	8001a2c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f001 fafd 	bl	8001a60 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800046a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <main+0x9c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 f95d 	bl	8000748 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f905 	bl	800069c <MX_GPIO_Init>
  MX_ETH_Init();
 8000492:	f000 f885 	bl	80005a0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000496:	f000 f8cf 	bl	8000638 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049a:	bf00      	nop
 800049c:	e7fd      	b.n	800049a <main+0x96>
 800049e:	bf00      	nop
 80004a0:	58024400 	.word	0x58024400

080004a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b09c      	sub	sp, #112	@ 0x70
 80004a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ae:	224c      	movs	r2, #76	@ 0x4c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 fab1 	bl	8004a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2220      	movs	r2, #32
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f004 faab 	bl	8004a1a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004c4:	2004      	movs	r0, #4
 80004c6:	f001 fc0f 	bl	8001ce8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004ca:	2300      	movs	r3, #0
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	4b32      	ldr	r3, [pc, #200]	@ (8000598 <SystemClock_Config+0xf4>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	4a31      	ldr	r2, [pc, #196]	@ (8000598 <SystemClock_Config+0xf4>)
 80004d4:	f023 0301 	bic.w	r3, r3, #1
 80004d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004da:	4b2f      	ldr	r3, [pc, #188]	@ (8000598 <SystemClock_Config+0xf4>)
 80004dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4b2d      	ldr	r3, [pc, #180]	@ (800059c <SystemClock_Config+0xf8>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004ec:	4a2b      	ldr	r2, [pc, #172]	@ (800059c <SystemClock_Config+0xf8>)
 80004ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b29      	ldr	r3, [pc, #164]	@ (800059c <SystemClock_Config+0xf8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000500:	bf00      	nop
 8000502:	4b26      	ldr	r3, [pc, #152]	@ (800059c <SystemClock_Config+0xf8>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800050a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800050e:	d1f8      	bne.n	8000502 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000510:	2301      	movs	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000514:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000518:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051e:	2302      	movs	r3, #2
 8000520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000526:	2312      	movs	r3, #18
 8000528:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800052a:	2302      	movs	r3, #2
 800052c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000532:	2302      	movs	r3, #2
 8000534:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000536:	230c      	movs	r3, #12
 8000538:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800053a:	2302      	movs	r3, #2
 800053c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800053e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000542:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fc37 	bl	8001dbc <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000554:	f000 f8f8 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	233f      	movs	r3, #63	@ 0x3f
 800055a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055c:	2303      	movs	r3, #3
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000568:	2340      	movs	r3, #64	@ 0x40
 800056a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800056c:	2340      	movs	r3, #64	@ 0x40
 800056e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000574:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000576:	2340      	movs	r3, #64	@ 0x40
 8000578:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f876 	bl	8002670 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800058a:	f000 f8dd 	bl	8000748 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3770      	adds	r7, #112	@ 0x70
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	58000400 	.word	0x58000400
 800059c:	58024800 	.word	0x58024800

080005a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <MX_ETH_Init+0x80>)
 80005a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000624 <MX_ETH_Init+0x84>)
 80005a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <MX_ETH_Init+0x88>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000628 <MX_ETH_Init+0x88>)
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <MX_ETH_Init+0x88>)
 80005b8:	22e1      	movs	r2, #225	@ 0xe1
 80005ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <MX_ETH_Init+0x88>)
 80005be:	2200      	movs	r2, #0
 80005c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005c2:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_ETH_Init+0x88>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005c8:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_ETH_Init+0x88>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_ETH_Init+0x80>)
 80005d0:	4a15      	ldr	r2, [pc, #84]	@ (8000628 <MX_ETH_Init+0x88>)
 80005d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <MX_ETH_Init+0x80>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_ETH_Init+0x80>)
 80005dc:	4a13      	ldr	r2, [pc, #76]	@ (800062c <MX_ETH_Init+0x8c>)
 80005de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <MX_ETH_Init+0x80>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_ETH_Init+0x90>)
 80005e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <MX_ETH_Init+0x80>)
 80005e8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80005ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005ee:	480c      	ldr	r0, [pc, #48]	@ (8000620 <MX_ETH_Init+0x80>)
 80005f0:	f000 fc38 	bl	8000e64 <HAL_ETH_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80005fa:	f000 f8a5 	bl	8000748 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80005fe:	2238      	movs	r2, #56	@ 0x38
 8000600:	2100      	movs	r1, #0
 8000602:	480c      	ldr	r0, [pc, #48]	@ (8000634 <MX_ETH_Init+0x94>)
 8000604:	f004 fa09 	bl	8004a1a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_ETH_Init+0x94>)
 800060a:	2221      	movs	r2, #33	@ 0x21
 800060c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_ETH_Init+0x94>)
 8000610:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000614:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000616:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_ETH_Init+0x94>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	24000124 	.word	0x24000124
 8000624:	40028000 	.word	0x40028000
 8000628:	240006b8 	.word	0x240006b8
 800062c:	24000070 	.word	0x24000070
 8000630:	24000010 	.word	0x24000010
 8000634:	240000ec 	.word	0x240000ec

08000638 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800063e:	4a16      	ldr	r2, [pc, #88]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000640:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000644:	2209      	movs	r2, #9
 8000646:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800064a:	2202      	movs	r2, #2
 800064c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000650:	2200      	movs	r2, #0
 8000652:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000656:	2202      	movs	r2, #2
 8000658:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800065c:	2201      	movs	r2, #1
 800065e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000662:	2200      	movs	r2, #0
 8000664:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000668:	2200      	movs	r2, #0
 800066a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800066e:	2201      	movs	r2, #1
 8000670:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000674:	2201      	movs	r2, #1
 8000676:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000680:	f001 fa02 	bl	8001a88 <HAL_PCD_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800068a:	f000 f85d 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	240001d4 	.word	0x240001d4
 8000698:	40080000 	.word	0x40080000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b087      	sub	sp, #28
 80006a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b8:	f003 0304 	and.w	r3, r3, #4
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e4:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f4:	f003 0301 	and.w	r3, r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_GPIO_Init+0xa8>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000702:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <MX_GPIO_Init+0xa8>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070c:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <MX_GPIO_Init+0xa8>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_GPIO_Init+0xa8>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <MX_GPIO_Init+0xa8>)
 8000722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_GPIO_Init+0xa8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	bf00      	nop
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	58024400 	.word	0x58024400

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <HAL_MspInit+0x30>)
 800075c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000760:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x30>)
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x30>)
 800076c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	58024400 	.word	0x58024400

08000788 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	@ 0x38
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a59      	ldr	r2, [pc, #356]	@ (800090c <HAL_ETH_MspInit+0x184>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	f040 80ab 	bne.w	8000902 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007ac:	4b58      	ldr	r3, [pc, #352]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007b2:	4a57      	ldr	r2, [pc, #348]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007bc:	4b54      	ldr	r3, [pc, #336]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c6:	623b      	str	r3, [r7, #32]
 80007c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007ca:	4b51      	ldr	r3, [pc, #324]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007d0:	4a4f      	ldr	r2, [pc, #316]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007da:	4b4d      	ldr	r3, [pc, #308]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e4:	61fb      	str	r3, [r7, #28]
 80007e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80007e8:	4b49      	ldr	r3, [pc, #292]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007ee:	4a48      	ldr	r2, [pc, #288]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007f8:	4b45      	ldr	r3, [pc, #276]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 80007fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000802:	61bb      	str	r3, [r7, #24]
 8000804:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b42      	ldr	r3, [pc, #264]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080c:	4a40      	ldr	r2, [pc, #256]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000816:	4b3e      	ldr	r3, [pc, #248]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082a:	4a39      	ldr	r2, [pc, #228]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000834:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b33      	ldr	r3, [pc, #204]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	4a31      	ldr	r2, [pc, #196]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000860:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000866:	4a2a      	ldr	r2, [pc, #168]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <HAL_ETH_MspInit+0x188>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800087e:	2332      	movs	r3, #50	@ 0x32
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	481e      	ldr	r0, [pc, #120]	@ (8000914 <HAL_ETH_MspInit+0x18c>)
 800089a:	f000 ff17 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800089e:	2386      	movs	r3, #134	@ 0x86
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ae:	230b      	movs	r3, #11
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4817      	ldr	r0, [pc, #92]	@ (8000918 <HAL_ETH_MspInit+0x190>)
 80008ba:	f000 ff07 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d0:	230b      	movs	r3, #11
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <HAL_ETH_MspInit+0x194>)
 80008dc:	f000 fef6 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80008e0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f2:	230b      	movs	r3, #11
 80008f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <HAL_ETH_MspInit+0x198>)
 80008fe:	f000 fee5 	bl	80016cc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000902:	bf00      	nop
 8000904:	3738      	adds	r7, #56	@ 0x38
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40028000 	.word	0x40028000
 8000910:	58024400 	.word	0x58024400
 8000914:	58020800 	.word	0x58020800
 8000918:	58020000 	.word	0x58020000
 800091c:	58020400 	.word	0x58020400
 8000920:	58021800 	.word	0x58021800

08000924 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0ba      	sub	sp, #232	@ 0xe8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	22c0      	movs	r2, #192	@ 0xc0
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f004 f868 	bl	8004a1a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a38      	ldr	r2, [pc, #224]	@ (8000a30 <HAL_PCD_MspInit+0x10c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d169      	bne.n	8000a28 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000954:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000964:	2312      	movs	r3, #18
 8000966:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000968:	2302      	movs	r3, #2
 800096a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800096c:	2303      	movs	r3, #3
 800096e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000970:	2302      	movs	r3, #2
 8000972:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000974:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000978:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800097a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800097e:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000980:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4618      	mov	r0, r3
 800098e:	f002 f9cf 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000998:	f7ff fed6 	bl	8000748 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800099c:	f001 f9fe 	bl	8001d9c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <HAL_PCD_MspInit+0x110>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <HAL_PCD_MspInit+0x110>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009b0:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <HAL_PCD_MspInit+0x110>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009be:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80009c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009d8:	230a      	movs	r3, #10
 80009da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4814      	ldr	r0, [pc, #80]	@ (8000a38 <HAL_PCD_MspInit+0x114>)
 80009e6:	f000 fe71 	bl	80016cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <HAL_PCD_MspInit+0x114>)
 8000a06:	f000 fe61 	bl	80016cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_PCD_MspInit+0x110>)
 8000a0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a10:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_PCD_MspInit+0x110>)
 8000a12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_PCD_MspInit+0x110>)
 8000a1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	37e8      	adds	r7, #232	@ 0xe8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40080000 	.word	0x40080000
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020000 	.word	0x58020000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <NMI_Handler+0x4>

08000a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <MemManage_Handler+0x4>

08000a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a92:	f000 f89f 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000aa0:	f7ff fc1a 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f003 ffaf 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fc99 	bl	8000404 <main>
  bx  lr
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ad8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000adc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ae0:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8000ae4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ae8:	240006c4 	.word	0x240006c4

08000aec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC3_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 f982 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000afc:	f001 ff6e 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8000b00:	4602      	mov	r2, r0
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_Init+0x68>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	f003 030f 	and.w	r3, r3, #15
 8000b0c:	4913      	ldr	r1, [pc, #76]	@ (8000b5c <HAL_Init+0x6c>)
 8000b0e:	5ccb      	ldrb	r3, [r1, r3]
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	fa22 f303 	lsr.w	r3, r2, r3
 8000b18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <HAL_Init+0x68>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	4a0e      	ldr	r2, [pc, #56]	@ (8000b5c <HAL_Init+0x6c>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	f003 031f 	and.w	r3, r3, #31
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b30:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_Init+0x70>)
 8000b32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_Init+0x74>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f814 	bl	8000b68 <HAL_InitTick>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e002      	b.n	8000b50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4a:	f7ff fe03 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	08004a8c 	.word	0x08004a8c
 8000b60:	24000004 	.word	0x24000004
 8000b64:	24000000 	.word	0x24000000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b70:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_InitTick+0x60>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e021      	b.n	8000bc0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <HAL_InitTick+0x64>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_InitTick+0x60>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f959 	bl	8000e4a <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb0:	f000 f931 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_InitTick+0x68>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2400000c 	.word	0x2400000c
 8000bcc:	24000000 	.word	0x24000000
 8000bd0:	24000008 	.word	0x24000008

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	2400000c 	.word	0x2400000c
 8000bf8:	240006c0 	.word	0x240006c0

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	240006c0 	.word	0x240006c0

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2400000c 	.word	0x2400000c

08000c5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetREVID+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	0c1b      	lsrs	r3, r3, #16
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	5c001000 	.word	0x5c001000

08000c74 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000c84:	4904      	ldr	r1, [pc, #16]	@ (8000c98 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	58000400 	.word	0x58000400

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x40>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x40>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	05fa0000 	.word	0x05fa0000

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff47 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff90 	bl	8000d54 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5f 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb2 	bl	8000dbc <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0e3      	b.n	800103e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d106      	bne.n	8000e8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2223      	movs	r2, #35	@ 0x23
 8000e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fc7d 	bl	8000788 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001048 <HAL_ETH_Init+0x1e4>)
 8000e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e94:	4a6c      	ldr	r2, [pc, #432]	@ (8001048 <HAL_ETH_Init+0x1e4>)
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001048 <HAL_ETH_Init+0x1e4>)
 8000ea0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7a1b      	ldrb	r3, [r3, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fedd 	bl	8000c74 <HAL_SYSCFG_ETHInterfaceSelect>
 8000eba:	e003      	b.n	8000ec4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000ebc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8000ec0:	f7ff fed8 	bl	8000c74 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8000ec4:	4b61      	ldr	r3, [pc, #388]	@ (800104c <HAL_ETH_Init+0x1e8>)
 8000ec6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000ede:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee0:	f7ff fe8c 	bl	8000bfc <HAL_GetTick>
 8000ee4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000ee6:	e011      	b.n	8000f0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000ee8:	f7ff fe88 	bl	8000bfc <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ef6:	d909      	bls.n	8000f0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2204      	movs	r2, #4
 8000efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	22e0      	movs	r2, #224	@ 0xe0
 8000f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e098      	b.n	800103e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e4      	bne.n	8000ee8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f89e 	bl	8001060 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000f24:	f001 fed4 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a49      	ldr	r2, [pc, #292]	@ (8001050 <HAL_ETH_Init+0x1ec>)
 8000f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f30:	0c9a      	lsrs	r2, r3, #18
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	3a01      	subs	r2, #1
 8000f38:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fa81 	bl	8001444 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f4e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000f5e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d009      	beq.n	8000f82 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	22e0      	movs	r2, #224	@ 0xe0
 8000f7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e05d      	b.n	800103e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <HAL_ETH_Init+0x1f0>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	6952      	ldr	r2, [r2, #20]
 8000f96:	0051      	lsls	r1, r2, #1
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000fa2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fae9 	bl	800157e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fb2f 	bl	8001610 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	3305      	adds	r3, #5
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	021a      	lsls	r2, r3, #8
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	061a      	lsls	r2, r3, #24
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ff0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000ffe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001000:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_ETH_Init+0x1f4>)
 8001012:	430b      	orrs	r3, r1
 8001014:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_ETH_Init+0x1f8>)
 8001026:	430b      	orrs	r3, r1
 8001028:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2210      	movs	r2, #16
 8001038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58024400 	.word	0x58024400
 800104c:	58000400 	.word	0x58000400
 8001050:	431bde83 	.word	0x431bde83
 8001054:	ffff8001 	.word	0xffff8001
 8001058:	0c020060 	.word	0x0c020060
 800105c:	0c20c000 	.word	0x0c20c000

08001060 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001070:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001078:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800107a:	f001 fe29 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 800107e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4a1a      	ldr	r2, [pc, #104]	@ (80010ec <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d804      	bhi.n	8001092 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e022      	b.n	80010d8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d204      	bcs.n	80010a4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e019      	b.n	80010d8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4a13      	ldr	r2, [pc, #76]	@ (80010f4 <HAL_ETH_SetMDIOClockRange+0x94>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d915      	bls.n	80010d8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <HAL_ETH_SetMDIOClockRange+0x98>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d804      	bhi.n	80010be <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	e00c      	b.n	80010d8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d804      	bhi.n	80010d0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e003      	b.n	80010d8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80010d6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	02160ebf 	.word	0x02160ebf
 80010f0:	03938700 	.word	0x03938700
 80010f4:	05f5e0ff 	.word	0x05f5e0ff
 80010f8:	08f0d17f 	.word	0x08f0d17f
 80010fc:	0ee6b27f 	.word	0x0ee6b27f

08001100 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001112:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800111a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	7b1b      	ldrb	r3, [r3, #12]
 8001120:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	7b5b      	ldrb	r3, [r3, #13]
 8001128:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800112a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	7b9b      	ldrb	r3, [r3, #14]
 8001130:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001132:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	7bdb      	ldrb	r3, [r3, #15]
 8001138:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800113a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	7c12      	ldrb	r2, [r2, #16]
 8001140:	2a00      	cmp	r2, #0
 8001142:	d102      	bne.n	800114a <ETH_SetMACConfig+0x4a>
 8001144:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001148:	e000      	b.n	800114c <ETH_SetMACConfig+0x4c>
 800114a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800114c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	7c52      	ldrb	r2, [r2, #17]
 8001152:	2a00      	cmp	r2, #0
 8001154:	d102      	bne.n	800115c <ETH_SetMACConfig+0x5c>
 8001156:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800115a:	e000      	b.n	800115e <ETH_SetMACConfig+0x5e>
 800115c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800115e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	7c9b      	ldrb	r3, [r3, #18]
 8001164:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001166:	431a      	orrs	r2, r3
               macconf->Speed |
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800116c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	7f1b      	ldrb	r3, [r3, #28]
 8001178:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800117a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	7f5b      	ldrb	r3, [r3, #29]
 8001180:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001182:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	7f92      	ldrb	r2, [r2, #30]
 8001188:	2a00      	cmp	r2, #0
 800118a:	d102      	bne.n	8001192 <ETH_SetMACConfig+0x92>
 800118c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001190:	e000      	b.n	8001194 <ETH_SetMACConfig+0x94>
 8001192:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001194:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	7fdb      	ldrb	r3, [r3, #31]
 800119a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800119c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d102      	bne.n	80011ae <ETH_SetMACConfig+0xae>
 80011a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ac:	e000      	b.n	80011b0 <ETH_SetMACConfig+0xb0>
 80011ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80011b0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80011b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80011be:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80011c0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b56      	ldr	r3, [pc, #344]	@ (800132c <ETH_SetMACConfig+0x22c>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	430b      	orrs	r3, r1
 80011dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80011ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80011f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80011fe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001200:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001208:	2a00      	cmp	r2, #0
 800120a:	d102      	bne.n	8001212 <ETH_SetMACConfig+0x112>
 800120c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001210:	e000      	b.n	8001214 <ETH_SetMACConfig+0x114>
 8001212:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001214:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800121a:	4313      	orrs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4b42      	ldr	r3, [pc, #264]	@ (8001330 <ETH_SetMACConfig+0x230>)
 8001226:	4013      	ands	r3, r2
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	430b      	orrs	r3, r1
 8001230:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001238:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <ETH_SetMACConfig+0x234>)
 800124a:	4013      	ands	r3, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	430b      	orrs	r3, r1
 8001254:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800125c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001262:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800126a:	2a00      	cmp	r2, #0
 800126c:	d101      	bne.n	8001272 <ETH_SetMACConfig+0x172>
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	e000      	b.n	8001274 <ETH_SetMACConfig+0x174>
 8001272:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001274:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800127c:	4313      	orrs	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001286:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800128a:	4013      	ands	r3, r2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	68f9      	ldr	r1, [r7, #12]
 8001292:	430b      	orrs	r3, r1
 8001294:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800129c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80012a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012b2:	f023 0103 	bic.w	r1, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	430a      	orrs	r2, r1
 80012be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80012ca:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d101      	bne.n	80012ee <ETH_SetMACConfig+0x1ee>
 80012ea:	2240      	movs	r2, #64	@ 0x40
 80012ec:	e000      	b.n	80012f0 <ETH_SetMACConfig+0x1f0>
 80012ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80012f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80012f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80012fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001302:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001304:	4313      	orrs	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001310:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	430a      	orrs	r2, r1
 800131c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	00048083 	.word	0x00048083
 8001330:	c0f88000 	.word	0xc0f88000
 8001334:	fffffef0 	.word	0xfffffef0

08001338 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b38      	ldr	r3, [pc, #224]	@ (8001430 <ETH_SetDMAConfig+0xf8>)
 800134e:	4013      	ands	r3, r2
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	6811      	ldr	r1, [r2, #0]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	430b      	orrs	r3, r1
 800135a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800135e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	791b      	ldrb	r3, [r3, #4]
 8001364:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800136a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	7b1b      	ldrb	r3, [r3, #12]
 8001370:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4b2c      	ldr	r3, [pc, #176]	@ (8001434 <ETH_SetDMAConfig+0xfc>)
 8001382:	4013      	ands	r3, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	68f9      	ldr	r1, [r7, #12]
 800138a:	430b      	orrs	r3, r1
 800138c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001390:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	7b5b      	ldrb	r3, [r3, #13]
 8001396:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800139c:	4313      	orrs	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <ETH_SetDMAConfig+0x100>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	68f9      	ldr	r1, [r7, #12]
 80013b6:	430b      	orrs	r3, r1
 80013b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013bc:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	7d1b      	ldrb	r3, [r3, #20]
 80013c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80013ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	7f5b      	ldrb	r3, [r3, #29]
 80013d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013de:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <ETH_SetDMAConfig+0x104>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	68f9      	ldr	r1, [r7, #12]
 80013ec:	430b      	orrs	r3, r1
 80013ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	7f1b      	ldrb	r3, [r3, #28]
 80013fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001400:	4313      	orrs	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <ETH_SetDMAConfig+0x108>)
 8001412:	4013      	ands	r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	68f9      	ldr	r1, [r7, #12]
 800141a:	430b      	orrs	r3, r1
 800141c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001420:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	ffff87fd 	.word	0xffff87fd
 8001434:	ffff2ffe 	.word	0xffff2ffe
 8001438:	fffec000 	.word	0xfffec000
 800143c:	ffc0efef 	.word	0xffc0efef
 8001440:	7fc0ffff 	.word	0x7fc0ffff

08001444 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0a4      	sub	sp, #144	@ 0x90
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800144c:	2301      	movs	r3, #1
 800144e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001452:	2300      	movs	r3, #0
 8001454:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800148c:	2300      	movs	r3, #0
 800148e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800149c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80014a0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80014be:	2300      	movs	r3, #0
 80014c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80014c6:	2300      	movs	r3, #0
 80014c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80014dc:	2320      	movs	r3, #32
 80014de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80014ee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80014f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001500:	2302      	movs	r3, #2
 8001502:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800151e:	2300      	movs	r3, #0
 8001520:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001522:	2301      	movs	r3, #1
 8001524:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001528:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800152c:	4619      	mov	r1, r3
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fde6 	bl	8001100 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001534:	2301      	movs	r3, #1
 8001536:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800154e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001552:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001558:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800155c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001564:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	4619      	mov	r1, r3
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fee1 	bl	8001338 <ETH_SetDMAConfig>
}
 8001576:	bf00      	nop
 8001578:	3790      	adds	r7, #144	@ 0x90
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e01d      	b.n	80015c8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68d9      	ldr	r1, [r3, #12]
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	3206      	adds	r2, #6
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3301      	adds	r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d9de      	bls.n	800158c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015dc:	461a      	mov	r2, r3
 80015de:	2303      	movs	r3, #3
 80015e0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001600:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	e023      	b.n	8001666 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	3212      	adds	r2, #18
 800165c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d9d8      	bls.n	800161e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001692:	461a      	mov	r2, r3
 8001694:	2303      	movs	r3, #3
 8001696:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ba:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016da:	4b89      	ldr	r3, [pc, #548]	@ (8001900 <HAL_GPIO_Init+0x234>)
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016de:	e194      	b.n	8001a0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8186 	beq.w	8001a04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x44>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	69b9      	ldr	r1, [r7, #24]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80e0 	beq.w	8001a04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <HAL_GPIO_Init+0x238>)
 8001846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800184a:	4a2e      	ldr	r2, [pc, #184]	@ (8001904 <HAL_GPIO_Init+0x238>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001854:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <HAL_GPIO_Init+0x238>)
 8001856:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a29      	ldr	r2, [pc, #164]	@ (8001908 <HAL_GPIO_Init+0x23c>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_GPIO_Init+0x240>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d052      	beq.n	8001934 <HAL_GPIO_Init+0x268>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a1f      	ldr	r2, [pc, #124]	@ (8001910 <HAL_GPIO_Init+0x244>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d031      	beq.n	80018fa <HAL_GPIO_Init+0x22e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <HAL_GPIO_Init+0x248>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d02b      	beq.n	80018f6 <HAL_GPIO_Init+0x22a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <HAL_GPIO_Init+0x24c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d025      	beq.n	80018f2 <HAL_GPIO_Init+0x226>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1c      	ldr	r2, [pc, #112]	@ (800191c <HAL_GPIO_Init+0x250>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d01f      	beq.n	80018ee <HAL_GPIO_Init+0x222>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <HAL_GPIO_Init+0x254>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d019      	beq.n	80018ea <HAL_GPIO_Init+0x21e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <HAL_GPIO_Init+0x258>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d013      	beq.n	80018e6 <HAL_GPIO_Init+0x21a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <HAL_GPIO_Init+0x25c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <HAL_GPIO_Init+0x216>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a18      	ldr	r2, [pc, #96]	@ (800192c <HAL_GPIO_Init+0x260>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d007      	beq.n	80018de <HAL_GPIO_Init+0x212>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <HAL_GPIO_Init+0x264>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d101      	bne.n	80018da <HAL_GPIO_Init+0x20e>
 80018d6:	2309      	movs	r3, #9
 80018d8:	e02d      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018da:	230a      	movs	r3, #10
 80018dc:	e02b      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018de:	2308      	movs	r3, #8
 80018e0:	e029      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018e2:	2307      	movs	r3, #7
 80018e4:	e027      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018e6:	2306      	movs	r3, #6
 80018e8:	e025      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e023      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e021      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e01f      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e01d      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e01b      	b.n	8001936 <HAL_GPIO_Init+0x26a>
 80018fe:	bf00      	nop
 8001900:	58000080 	.word	0x58000080
 8001904:	58024400 	.word	0x58024400
 8001908:	58000400 	.word	0x58000400
 800190c:	58020000 	.word	0x58020000
 8001910:	58020400 	.word	0x58020400
 8001914:	58020800 	.word	0x58020800
 8001918:	58020c00 	.word	0x58020c00
 800191c:	58021000 	.word	0x58021000
 8001920:	58021400 	.word	0x58021400
 8001924:	58021800 	.word	0x58021800
 8001928:	58021c00 	.word	0x58021c00
 800192c:	58022000 	.word	0x58022000
 8001930:	58022400 	.word	0x58022400
 8001934:	2300      	movs	r3, #0
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001946:	4938      	ldr	r1, [pc, #224]	@ (8001a28 <HAL_GPIO_Init+0x35c>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	3301      	adds	r3, #1
 8001a08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f47f ae63 	bne.w	80016e0 <HAL_GPIO_Init+0x14>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3724      	adds	r7, #36	@ 0x24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	58000400 	.word	0x58000400

08001a2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a34:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <HAL_HSEM_FastTake+0x2c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3320      	adds	r3, #32
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	@ (8001a5c <HAL_HSEM_FastTake+0x30>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	58026400 	.word	0x58026400
 8001a5c:	80000300 	.word	0x80000300

08001a60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a6a:	4906      	ldr	r1, [pc, #24]	@ (8001a84 <HAL_HSEM_Release+0x24>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58026400 	.word	0x58026400

08001a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e0fe      	b.n	8001c98 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe ff38 	bl	8000924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fd15 	bl	80044f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7c1a      	ldrb	r2, [r3, #16]
 8001ace:	f88d 2000 	strb.w	r2, [sp]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad6:	f002 fc99 	bl	800440c <USB_CoreInit>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0d5      	b.n	8001c98 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fd0d 	bl	8004512 <USB_SetCurrentMode>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0c6      	b.n	8001c98 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
 8001b0e:	e04a      	b.n	8001ba6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b10:	7bfa      	ldrb	r2, [r7, #15]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3315      	adds	r3, #21
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3314      	adds	r3, #20
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	b298      	uxth	r0, r3
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	332e      	adds	r3, #46	@ 0x2e
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3318      	adds	r3, #24
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	331c      	adds	r3, #28
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	3320      	adds	r3, #32
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3324      	adds	r3, #36	@ 0x24
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	791b      	ldrb	r3, [r3, #4]
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3af      	bcc.n	8001b10 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e044      	b.n	8001c40 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	791b      	ldrb	r3, [r3, #4]
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3b5      	bcc.n	8001bb6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7c1a      	ldrb	r2, [r3, #16]
 8001c52:	f88d 2000 	strb.w	r2, [sp]
 8001c56:	3304      	adds	r3, #4
 8001c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5a:	f002 fca7 	bl	80045ac <USB_DevInit>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e013      	b.n	8001c98 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7b1b      	ldrb	r3, [r3, #12]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f80a 	bl	8001ca0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fe62 	bl	800495a <USB_DevDisconnect>

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	10000003 	.word	0x10000003

08001ce8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d00a      	beq.n	8001d12 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cfc:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e040      	b.n	8001d90 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e03e      	b.n	8001d90 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d12:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d1a:	491f      	ldr	r1, [pc, #124]	@ (8001d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d22:	f7fe ff6b 	bl	8000bfc <HAL_GetTick>
 8001d26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d28:	e009      	b.n	8001d3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d2a:	f7fe ff67 	bl	8000bfc <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d38:	d901      	bls.n	8001d3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e028      	b.n	8001d90 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d3e:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b1e      	cmp	r3, #30
 8001d50:	d008      	beq.n	8001d64 <HAL_PWREx_ConfigSupply+0x7c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d56:	d005      	beq.n	8001d64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b1d      	cmp	r3, #29
 8001d5c:	d002      	beq.n	8001d64 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d62:	d114      	bne.n	8001d8e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d64:	f7fe ff4a 	bl	8000bfc <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d6a:	e009      	b.n	8001d80 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d6c:	f7fe ff46 	bl	8000bfc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d7a:	d901      	bls.n	8001d80 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e007      	b.n	8001d90 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d80:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8c:	d1ee      	bne.n	8001d6c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58024800 	.word	0x58024800

08001d9c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	58024800 	.word	0x58024800

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	@ 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 bc48 	b.w	8002660 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 8088 	beq.w	8001eee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dde:	4b99      	ldr	r3, [pc, #612]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001de8:	4b96      	ldr	r3, [pc, #600]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d007      	beq.n	8001e04 <HAL_RCC_OscConfig+0x48>
 8001df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df6:	2b18      	cmp	r3, #24
 8001df8:	d111      	bne.n	8001e1e <HAL_RCC_OscConfig+0x62>
 8001dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d10c      	bne.n	8001e1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	4b8f      	ldr	r3, [pc, #572]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d06d      	beq.n	8001eec <HAL_RCC_OscConfig+0x130>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d169      	bne.n	8001eec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	f000 bc21 	b.w	8002660 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x7a>
 8001e28:	4b86      	ldr	r3, [pc, #536]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a85      	ldr	r2, [pc, #532]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e02e      	b.n	8001e94 <HAL_RCC_OscConfig+0xd8>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x9c>
 8001e3e:	4b81      	ldr	r3, [pc, #516]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a80      	ldr	r2, [pc, #512]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b7e      	ldr	r3, [pc, #504]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7d      	ldr	r2, [pc, #500]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e01d      	b.n	8001e94 <HAL_RCC_OscConfig+0xd8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e62:	4b78      	ldr	r3, [pc, #480]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a77      	ldr	r2, [pc, #476]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b75      	ldr	r3, [pc, #468]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a74      	ldr	r2, [pc, #464]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xd8>
 8001e7c:	4b71      	ldr	r3, [pc, #452]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a70      	ldr	r2, [pc, #448]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b6e      	ldr	r3, [pc, #440]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6d      	ldr	r2, [pc, #436]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7fe feae 	bl	8000bfc <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe feaa 	bl	8000bfc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e3d4      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fe9a 	bl	8000bfc <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fe96 	bl	8000bfc <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e3c0      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ede:	4b59      	ldr	r3, [pc, #356]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x110>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80ca 	beq.w	8002090 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efc:	4b51      	ldr	r3, [pc, #324]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f06:	4b4f      	ldr	r3, [pc, #316]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d007      	beq.n	8001f22 <HAL_RCC_OscConfig+0x166>
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2b18      	cmp	r3, #24
 8001f16:	d156      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x20a>
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d151      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f22:	4b48      	ldr	r3, [pc, #288]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_RCC_OscConfig+0x17e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e392      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f3a:	4b42      	ldr	r3, [pc, #264]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0219 	bic.w	r2, r3, #25
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	493f      	ldr	r1, [pc, #252]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fe56 	bl	8000bfc <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f54:	f7fe fe52 	bl	8000bfc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e37c      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f66:	4b37      	ldr	r3, [pc, #220]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	f7fe fe73 	bl	8000c5c <HAL_GetREVID>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d817      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x1f4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	2b40      	cmp	r3, #64	@ 0x40
 8001f86:	d108      	bne.n	8001f9a <HAL_RCC_OscConfig+0x1de>
 8001f88:	4b2e      	ldr	r3, [pc, #184]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f90:	4a2c      	ldr	r2, [pc, #176]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f96:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	e07a      	b.n	8002090 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	031b      	lsls	r3, r3, #12
 8001fa8:	4926      	ldr	r1, [pc, #152]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fae:	e06f      	b.n	8002090 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	4921      	ldr	r1, [pc, #132]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc4:	e064      	b.n	8002090 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d047      	beq.n	800205e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0219 	bic.w	r2, r3, #25
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	491a      	ldr	r1, [pc, #104]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fe0c 	bl	8000bfc <HAL_GetTick>
 8001fe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7fe fe08 	bl	8000bfc <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e332      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	f7fe fe29 	bl	8000c5c <HAL_GetREVID>
 800200a:	4603      	mov	r3, r0
 800200c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002010:	4293      	cmp	r3, r2
 8002012:	d819      	bhi.n	8002048 <HAL_RCC_OscConfig+0x28c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b40      	cmp	r3, #64	@ 0x40
 800201a:	d108      	bne.n	800202e <HAL_RCC_OscConfig+0x272>
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002024:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202a:	6053      	str	r3, [r2, #4]
 800202c:	e030      	b.n	8002090 <HAL_RCC_OscConfig+0x2d4>
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	031b      	lsls	r3, r3, #12
 800203c:	4901      	ldr	r1, [pc, #4]	@ (8002044 <HAL_RCC_OscConfig+0x288>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
 8002042:	e025      	b.n	8002090 <HAL_RCC_OscConfig+0x2d4>
 8002044:	58024400 	.word	0x58024400
 8002048:	4b9a      	ldr	r3, [pc, #616]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	4997      	ldr	r1, [pc, #604]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e018      	b.n	8002090 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205e:	4b95      	ldr	r3, [pc, #596]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a94      	ldr	r2, [pc, #592]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe fdc7 	bl	8000bfc <HAL_GetTick>
 800206e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7fe fdc3 	bl	8000bfc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e2ed      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002084:	4b8b      	ldr	r3, [pc, #556]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f0      	bne.n	8002072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a9 	beq.w	80021f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209e:	4b85      	ldr	r3, [pc, #532]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020a8:	4b82      	ldr	r3, [pc, #520]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d007      	beq.n	80020c4 <HAL_RCC_OscConfig+0x308>
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b18      	cmp	r3, #24
 80020b8:	d13a      	bne.n	8002130 <HAL_RCC_OscConfig+0x374>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d135      	bne.n	8002130 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020c4:	4b7b      	ldr	r3, [pc, #492]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_OscConfig+0x320>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	2b80      	cmp	r3, #128	@ 0x80
 80020d6:	d001      	beq.n	80020dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e2c1      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020dc:	f7fe fdbe 	bl	8000c5c <HAL_GetREVID>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d817      	bhi.n	800211a <HAL_RCC_OscConfig+0x35e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	2b20      	cmp	r3, #32
 80020f0:	d108      	bne.n	8002104 <HAL_RCC_OscConfig+0x348>
 80020f2:	4b70      	ldr	r3, [pc, #448]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020fa:	4a6e      	ldr	r2, [pc, #440]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002100:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002102:	e075      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002104:	4b6b      	ldr	r3, [pc, #428]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	069b      	lsls	r3, r3, #26
 8002112:	4968      	ldr	r1, [pc, #416]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002118:	e06a      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800211a:	4b66      	ldr	r3, [pc, #408]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	061b      	lsls	r3, r3, #24
 8002128:	4962      	ldr	r1, [pc, #392]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800212e:	e05f      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d042      	beq.n	80021be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002138:	4b5e      	ldr	r3, [pc, #376]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a5d      	ldr	r2, [pc, #372]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800213e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fd5a 	bl	8000bfc <HAL_GetTick>
 8002148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800214c:	f7fe fd56 	bl	8000bfc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e280      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800215e:	4b55      	ldr	r3, [pc, #340]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800216a:	f7fe fd77 	bl	8000c5c <HAL_GetREVID>
 800216e:	4603      	mov	r3, r0
 8002170:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002174:	4293      	cmp	r3, r2
 8002176:	d817      	bhi.n	80021a8 <HAL_RCC_OscConfig+0x3ec>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	2b20      	cmp	r3, #32
 800217e:	d108      	bne.n	8002192 <HAL_RCC_OscConfig+0x3d6>
 8002180:	4b4c      	ldr	r3, [pc, #304]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002188:	4a4a      	ldr	r2, [pc, #296]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800218a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800218e:	6053      	str	r3, [r2, #4]
 8002190:	e02e      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
 8002192:	4b48      	ldr	r3, [pc, #288]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	069b      	lsls	r3, r3, #26
 80021a0:	4944      	ldr	r1, [pc, #272]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
 80021a6:	e023      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
 80021a8:	4b42      	ldr	r3, [pc, #264]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	493f      	ldr	r1, [pc, #252]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e018      	b.n	80021f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021be:	4b3d      	ldr	r3, [pc, #244]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a3c      	ldr	r2, [pc, #240]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd17 	bl	8000bfc <HAL_GetTick>
 80021ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021d2:	f7fe fd13 	bl	8000bfc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e23d      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021e4:	4b33      	ldr	r3, [pc, #204]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d036      	beq.n	800226a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d019      	beq.n	8002238 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002204:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002208:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe fcf4 	bl	8000bfc <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7fe fcf0 	bl	8000bfc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e21a      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800222a:	4b22      	ldr	r3, [pc, #136]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x45c>
 8002236:	e018      	b.n	800226a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800223a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223c:	4a1d      	ldr	r2, [pc, #116]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fcda 	bl	8000bfc <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800224c:	f7fe fcd6 	bl	8000bfc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e200      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d039      	beq.n	80022ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d01c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 8002284:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002288:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800228a:	f7fe fcb7 	bl	8000bfc <HAL_GetTick>
 800228e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002292:	f7fe fcb3 	bl	8000bfc <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1dd      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_RCC_OscConfig+0x4f8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x4d6>
 80022b0:	e01b      	b.n	80022ea <HAL_RCC_OscConfig+0x52e>
 80022b2:	bf00      	nop
 80022b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022b8:	4b9b      	ldr	r3, [pc, #620]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a9a      	ldr	r2, [pc, #616]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80022be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fc9a 	bl	8000bfc <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022cc:	f7fe fc96 	bl	8000bfc <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1c0      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022de:	4b92      	ldr	r3, [pc, #584]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8081 	beq.w	80023fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022f8:	4b8c      	ldr	r3, [pc, #560]	@ (800252c <HAL_RCC_OscConfig+0x770>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a8b      	ldr	r2, [pc, #556]	@ (800252c <HAL_RCC_OscConfig+0x770>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002304:	f7fe fc7a 	bl	8000bfc <HAL_GetTick>
 8002308:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7fe fc76 	bl	8000bfc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1a0      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800231e:	4b83      	ldr	r3, [pc, #524]	@ (800252c <HAL_RCC_OscConfig+0x770>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x584>
 8002332:	4b7d      	ldr	r3, [pc, #500]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	4a7c      	ldr	r2, [pc, #496]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	@ 0x70
 800233e:	e02d      	b.n	800239c <HAL_RCC_OscConfig+0x5e0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10c      	bne.n	8002362 <HAL_RCC_OscConfig+0x5a6>
 8002348:	4b77      	ldr	r3, [pc, #476]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234c:	4a76      	ldr	r2, [pc, #472]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	@ 0x70
 8002354:	4b74      	ldr	r3, [pc, #464]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	4a73      	ldr	r2, [pc, #460]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002360:	e01c      	b.n	800239c <HAL_RCC_OscConfig+0x5e0>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x5c8>
 800236a:	4b6f      	ldr	r3, [pc, #444]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	4a6e      	ldr	r2, [pc, #440]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6713      	str	r3, [r2, #112]	@ 0x70
 8002376:	4b6c      	ldr	r3, [pc, #432]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237a:	4a6b      	ldr	r2, [pc, #428]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6713      	str	r3, [r2, #112]	@ 0x70
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0x5e0>
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	4a67      	ldr	r2, [pc, #412]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002390:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002394:	4a64      	ldr	r2, [pc, #400]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002396:	f023 0304 	bic.w	r3, r3, #4
 800239a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d015      	beq.n	80023d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7fe fc2a 	bl	8000bfc <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7fe fc26 	bl	8000bfc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e14e      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c2:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0ee      	beq.n	80023ac <HAL_RCC_OscConfig+0x5f0>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d0:	f7fe fc14 	bl	8000bfc <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fc10 	bl	8000bfc <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e138      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ee      	bne.n	80023d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 812d 	beq.w	800265e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002404:	4b48      	ldr	r3, [pc, #288]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800240c:	2b18      	cmp	r3, #24
 800240e:	f000 80bd 	beq.w	800258c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	2b02      	cmp	r3, #2
 8002418:	f040 809e 	bne.w	8002558 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241c:	4b42      	ldr	r3, [pc, #264]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a41      	ldr	r2, [pc, #260]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002422:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fbe8 	bl	8000bfc <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fbe4 	bl	8000bfc <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e10e      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002442:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244e:	4b36      	ldr	r3, [pc, #216]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002452:	4b37      	ldr	r3, [pc, #220]	@ (8002530 <HAL_RCC_OscConfig+0x774>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	430a      	orrs	r2, r1
 8002462:	4931      	ldr	r1, [pc, #196]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002464:	4313      	orrs	r3, r2
 8002466:	628b      	str	r3, [r1, #40]	@ 0x28
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246c:	3b01      	subs	r3, #1
 800246e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002476:	3b01      	subs	r3, #1
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	b29b      	uxth	r3, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	3b01      	subs	r3, #1
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002498:	4923      	ldr	r1, [pc, #140]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800249a:	4313      	orrs	r3, r2
 800249c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	4a21      	ldr	r2, [pc, #132]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_RCC_OscConfig+0x778>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024b6:	00d2      	lsls	r2, r2, #3
 80024b8:	491b      	ldr	r1, [pc, #108]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024be:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	f023 020c 	bic.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	4917      	ldr	r1, [pc, #92]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024d0:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	f023 0202 	bic.w	r2, r3, #2
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	4912      	ldr	r1, [pc, #72]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	4a10      	ldr	r2, [pc, #64]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002504:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002506:	4b08      	ldr	r3, [pc, #32]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002512:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_RCC_OscConfig+0x76c>)
 8002518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe fb6d 	bl	8000bfc <HAL_GetTick>
 8002522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002524:	e011      	b.n	800254a <HAL_RCC_OscConfig+0x78e>
 8002526:	bf00      	nop
 8002528:	58024400 	.word	0x58024400
 800252c:	58024800 	.word	0x58024800
 8002530:	fffffc0c 	.word	0xfffffc0c
 8002534:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fb60 	bl	8000bfc <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e08a      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x77c>
 8002556:	e082      	b.n	800265e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b43      	ldr	r3, [pc, #268]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a42      	ldr	r2, [pc, #264]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 800255e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fb4a 	bl	8000bfc <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fb46 	bl	8000bfc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e070      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800257e:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x7b0>
 800258a:	e068      	b.n	800265e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800258c:	4b36      	ldr	r3, [pc, #216]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002592:	4b35      	ldr	r3, [pc, #212]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	2b01      	cmp	r3, #1
 800259e:	d031      	beq.n	8002604 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0203 	and.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d12a      	bne.n	8002604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d122      	bne.n	8002604 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d11a      	bne.n	8002604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0a5b      	lsrs	r3, r3, #9
 80025d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d111      	bne.n	8002604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0c1b      	lsrs	r3, r3, #16
 80025e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d108      	bne.n	8002604 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	0e1b      	lsrs	r3, r3, #24
 80025f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e02b      	b.n	8002660 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002608:	4b17      	ldr	r3, [pc, #92]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002612:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d01f      	beq.n	800265e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800262a:	f7fe fae7 	bl	8000bfc <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002630:	bf00      	nop
 8002632:	f7fe fae3 	bl	8000bfc <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	4293      	cmp	r3, r2
 800263c:	d0f9      	beq.n	8002632 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800263e:	4b0a      	ldr	r3, [pc, #40]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002640:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002642:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <HAL_RCC_OscConfig+0x8b0>)
 8002644:	4013      	ands	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800264a:	00d2      	lsls	r2, r2, #3
 800264c:	4906      	ldr	r1, [pc, #24]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 800264e:	4313      	orrs	r3, r2
 8002650:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002652:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	4a04      	ldr	r2, [pc, #16]	@ (8002668 <HAL_RCC_OscConfig+0x8ac>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3730      	adds	r7, #48	@ 0x30
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	58024400 	.word	0x58024400
 800266c:	ffff0007 	.word	0xffff0007

08002670 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e19c      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b8a      	ldr	r3, [pc, #552]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d910      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b87      	ldr	r3, [pc, #540]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 020f 	bic.w	r2, r3, #15
 800269a:	4985      	ldr	r1, [pc, #532]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b83      	ldr	r3, [pc, #524]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e184      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	4b7b      	ldr	r3, [pc, #492]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d908      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026d0:	4b78      	ldr	r3, [pc, #480]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	4975      	ldr	r1, [pc, #468]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	4b70      	ldr	r3, [pc, #448]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d908      	bls.n	8002710 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026fe:	4b6d      	ldr	r3, [pc, #436]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	496a      	ldr	r1, [pc, #424]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800270c:	4313      	orrs	r3, r2
 800270e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	4b64      	ldr	r3, [pc, #400]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002728:	429a      	cmp	r2, r3
 800272a:	d908      	bls.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800272c:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	495e      	ldr	r1, [pc, #376]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800273a:	4313      	orrs	r3, r2
 800273c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	4b59      	ldr	r3, [pc, #356]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002756:	429a      	cmp	r2, r3
 8002758:	d908      	bls.n	800276c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800275a:	4b56      	ldr	r3, [pc, #344]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4953      	ldr	r1, [pc, #332]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002768:	4313      	orrs	r3, r2
 800276a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	4b4d      	ldr	r3, [pc, #308]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	429a      	cmp	r2, r3
 8002786:	d908      	bls.n	800279a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b4a      	ldr	r3, [pc, #296]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f023 020f 	bic.w	r2, r3, #15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4947      	ldr	r1, [pc, #284]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002796:	4313      	orrs	r3, r2
 8002798:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d055      	beq.n	8002852 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027a6:	4b43      	ldr	r3, [pc, #268]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4940      	ldr	r1, [pc, #256]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c0:	4b3c      	ldr	r3, [pc, #240]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d121      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0f6      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d115      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0ea      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027f0:	4b30      	ldr	r3, [pc, #192]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0de      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002800:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0d6      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002810:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f023 0207 	bic.w	r2, r3, #7
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4925      	ldr	r1, [pc, #148]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800281e:	4313      	orrs	r3, r2
 8002820:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002822:	f7fe f9eb 	bl	8000bfc <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002828:	e00a      	b.n	8002840 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fe f9e7 	bl	8000bfc <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0be      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002840:	4b1c      	ldr	r3, [pc, #112]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	429a      	cmp	r2, r3
 8002850:	d1eb      	bne.n	800282a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	4b14      	ldr	r3, [pc, #80]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	429a      	cmp	r2, r3
 800286c:	d208      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f023 020f 	bic.w	r2, r3, #15
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	490e      	ldr	r1, [pc, #56]	@ (80028b4 <HAL_RCC_ClockConfig+0x244>)
 800287c:	4313      	orrs	r3, r2
 800287e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d214      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288e:	4b08      	ldr	r3, [pc, #32]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 020f 	bic.w	r2, r3, #15
 8002896:	4906      	ldr	r1, [pc, #24]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4313      	orrs	r3, r2
 800289c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <HAL_RCC_ClockConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e086      	b.n	80029be <HAL_RCC_ClockConfig+0x34e>
 80028b0:	52002000 	.word	0x52002000
 80028b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b3f      	ldr	r3, [pc, #252]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d208      	bcs.n	80028e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028d4:	4b3c      	ldr	r3, [pc, #240]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	4939      	ldr	r1, [pc, #228]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d010      	beq.n	8002914 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	4b34      	ldr	r3, [pc, #208]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028fe:	429a      	cmp	r2, r3
 8002900:	d208      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002902:	4b31      	ldr	r3, [pc, #196]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	492e      	ldr	r1, [pc, #184]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002910:	4313      	orrs	r3, r2
 8002912:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699a      	ldr	r2, [r3, #24]
 8002924:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800292c:	429a      	cmp	r2, r3
 800292e:	d208      	bcs.n	8002942 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002930:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	4922      	ldr	r1, [pc, #136]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 800293e:	4313      	orrs	r3, r2
 8002940:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d010      	beq.n	8002970 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800295a:	429a      	cmp	r2, r3
 800295c:	d208      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800295e:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	4917      	ldr	r1, [pc, #92]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 800296c:	4313      	orrs	r3, r2
 800296e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002970:	f000 f834 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	4912      	ldr	r1, [pc, #72]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800298e:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_RCC_ClockConfig+0x358>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <HAL_RCC_ClockConfig+0x35c>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
 80029a4:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <HAL_RCC_ClockConfig+0x360>)
 80029a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029a8:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_RCC_ClockConfig+0x364>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_RCC_ClockConfig+0x368>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f8d8 	bl	8000b68 <HAL_InitTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	58024400 	.word	0x58024400
 80029cc:	08004a8c 	.word	0x08004a8c
 80029d0:	24000004 	.word	0x24000004
 80029d4:	24000000 	.word	0x24000000
 80029d8:	24000008 	.word	0x24000008

080029dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	@ 0x24
 80029e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e2:	4bb3      	ldr	r3, [pc, #716]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ea:	2b18      	cmp	r3, #24
 80029ec:	f200 8155 	bhi.w	8002c9a <HAL_RCC_GetSysClockFreq+0x2be>
 80029f0:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a5d 	.word	0x08002a5d
 80029fc:	08002c9b 	.word	0x08002c9b
 8002a00:	08002c9b 	.word	0x08002c9b
 8002a04:	08002c9b 	.word	0x08002c9b
 8002a08:	08002c9b 	.word	0x08002c9b
 8002a0c:	08002c9b 	.word	0x08002c9b
 8002a10:	08002c9b 	.word	0x08002c9b
 8002a14:	08002c9b 	.word	0x08002c9b
 8002a18:	08002a83 	.word	0x08002a83
 8002a1c:	08002c9b 	.word	0x08002c9b
 8002a20:	08002c9b 	.word	0x08002c9b
 8002a24:	08002c9b 	.word	0x08002c9b
 8002a28:	08002c9b 	.word	0x08002c9b
 8002a2c:	08002c9b 	.word	0x08002c9b
 8002a30:	08002c9b 	.word	0x08002c9b
 8002a34:	08002c9b 	.word	0x08002c9b
 8002a38:	08002a89 	.word	0x08002a89
 8002a3c:	08002c9b 	.word	0x08002c9b
 8002a40:	08002c9b 	.word	0x08002c9b
 8002a44:	08002c9b 	.word	0x08002c9b
 8002a48:	08002c9b 	.word	0x08002c9b
 8002a4c:	08002c9b 	.word	0x08002c9b
 8002a50:	08002c9b 	.word	0x08002c9b
 8002a54:	08002c9b 	.word	0x08002c9b
 8002a58:	08002a8f 	.word	0x08002a8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a5c:	4b94      	ldr	r3, [pc, #592]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d009      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a68:	4b91      	ldr	r3, [pc, #580]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	08db      	lsrs	r3, r3, #3
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	4a90      	ldr	r2, [pc, #576]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
 8002a78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a7a:	e111      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a7e:	61bb      	str	r3, [r7, #24]
      break;
 8002a80:	e10e      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a82:	4b8d      	ldr	r3, [pc, #564]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a84:	61bb      	str	r3, [r7, #24]
      break;
 8002a86:	e10b      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a88:	4b8c      	ldr	r3, [pc, #560]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a8a:	61bb      	str	r3, [r7, #24]
      break;
 8002a8c:	e108      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a8e:	4b88      	ldr	r3, [pc, #544]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a98:	4b85      	ldr	r3, [pc, #532]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aa2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002aa4:	4b82      	ldr	r3, [pc, #520]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002aae:	4b80      	ldr	r3, [pc, #512]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab2:	08db      	lsrs	r3, r3, #3
 8002ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80e1 	beq.w	8002c94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	f000 8083 	beq.w	8002be0 <HAL_RCC_GetSysClockFreq+0x204>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	f200 80a1 	bhi.w	8002c24 <HAL_RCC_GetSysClockFreq+0x248>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d056      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aee:	e099      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af0:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02d      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002afc:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	4a6b      	ldr	r2, [pc, #428]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b26:	4b62      	ldr	r3, [pc, #392]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b56:	e087      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002cc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6a:	4b51      	ldr	r3, [pc, #324]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b9a:	e065      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002cc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bae:	4b40      	ldr	r3, [pc, #256]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bde:	e043      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ee07 3a90 	vmov	s15, r3
 8002be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ccc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c22:	e021      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002cc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002cc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	0a5b      	lsrs	r3, r3, #9
 8002c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c72:	3301      	adds	r3, #1
 8002c74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c8c:	ee17 3a90 	vmov	r3, s15
 8002c90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
      break;
 8002c98:	e002      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c9c:	61bb      	str	r3, [r7, #24]
      break;
 8002c9e:	bf00      	nop
  }

  return sysclockfreq;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	@ 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	03d09000 	.word	0x03d09000
 8002cb8:	003d0900 	.word	0x003d0900
 8002cbc:	007a1200 	.word	0x007a1200
 8002cc0:	46000000 	.word	0x46000000
 8002cc4:	4c742400 	.word	0x4c742400
 8002cc8:	4a742400 	.word	0x4a742400
 8002ccc:	4af42400 	.word	0x4af42400

08002cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cd6:	f7ff fe81 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490f      	ldr	r1, [pc, #60]	@ (8002d24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a07      	ldr	r2, [pc, #28]	@ (8002d28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d0e:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	58024400 	.word	0x58024400
 8002d24:	08004a8c 	.word	0x08004a8c
 8002d28:	24000004 	.word	0x24000004
 8002d2c:	24000000 	.word	0x24000000

08002d30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b0ca      	sub	sp, #296	@ 0x128
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d54:	2500      	movs	r5, #0
 8002d56:	ea54 0305 	orrs.w	r3, r4, r5
 8002d5a:	d049      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d66:	d02f      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d6c:	d828      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d72:	d01a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d78:	d822      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d82:	d007      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d84:	e01c      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d86:	4bb8      	ldr	r3, [pc, #736]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4ab7      	ldr	r2, [pc, #732]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d92:	e01a      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d98:	3308      	adds	r3, #8
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 f9d1 	bl	8004144 <RCCEx_PLL2_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002da8:	e00f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dae:	3328      	adds	r3, #40	@ 0x28
 8002db0:	2102      	movs	r1, #2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fa78 	bl	80042a8 <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002dbe:	e004      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002dd2:	4ba5      	ldr	r3, [pc, #660]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002de0:	4aa1      	ldr	r2, [pc, #644]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002de2:	430b      	orrs	r3, r1
 8002de4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002de6:	e003      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002dfc:	f04f 0900 	mov.w	r9, #0
 8002e00:	ea58 0309 	orrs.w	r3, r8, r9
 8002e04:	d047      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d82a      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002e10:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e16:	bf00      	nop
 8002e18:	08002e2d 	.word	0x08002e2d
 8002e1c:	08002e3b 	.word	0x08002e3b
 8002e20:	08002e51 	.word	0x08002e51
 8002e24:	08002e6f 	.word	0x08002e6f
 8002e28:	08002e6f 	.word	0x08002e6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	4a8d      	ldr	r2, [pc, #564]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e38:	e01a      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3e:	3308      	adds	r3, #8
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 f97e 	bl	8004144 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e4e:	e00f      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e54:	3328      	adds	r3, #40	@ 0x28
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 fa25 	bl	80042a8 <RCCEx_PLL3_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e64:	e004      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e6c:	e000      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e78:	4b7b      	ldr	r3, [pc, #492]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e7c:	f023 0107 	bic.w	r1, r3, #7
 8002e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	4a78      	ldr	r2, [pc, #480]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002ea2:	f04f 0b00 	mov.w	fp, #0
 8002ea6:	ea5a 030b 	orrs.w	r3, sl, fp
 8002eaa:	d04c      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb6:	d030      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ebc:	d829      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ec0:	d02d      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ec4:	d825      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ec6:	2b80      	cmp	r3, #128	@ 0x80
 8002ec8:	d018      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002eca:	2b80      	cmp	r3, #128	@ 0x80
 8002ecc:	d821      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d007      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed8:	4b63      	ldr	r3, [pc, #396]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	4a62      	ldr	r2, [pc, #392]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eea:	3308      	adds	r3, #8
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f928 	bl	8004144 <RCCEx_PLL2_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002efa:	e011      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f00:	3328      	adds	r3, #40	@ 0x28
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f9cf 	bl	80042a8 <RCCEx_PLL3_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002f10:	e006      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002f28:	4b4f      	ldr	r3, [pc, #316]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f2c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	4a4c      	ldr	r2, [pc, #304]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f3c:	e003      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002f52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002f60:	460b      	mov	r3, r1
 8002f62:	4313      	orrs	r3, r2
 8002f64:	d053      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f72:	d035      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f78:	d82e      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f7e:	d031      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f84:	d828      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f8a:	d01a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f90:	d822      	bhi.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f9a:	d007      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9e:	4b32      	ldr	r3, [pc, #200]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	4a31      	ldr	r2, [pc, #196]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002faa:	e01c      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 f8c5 	bl	8004144 <RCCEx_PLL2_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002fc0:	e011      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc6:	3328      	adds	r3, #40	@ 0x28
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 f96c 	bl	80042a8 <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fd6:	e006      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fde:	e002      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6593      	str	r3, [r2, #88]	@ 0x58
 8003004:	e003      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800300e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800301a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003024:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003028:	460b      	mov	r3, r1
 800302a:	4313      	orrs	r3, r2
 800302c:	d056      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800302e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003032:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003036:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800303a:	d038      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800303c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003040:	d831      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003042:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003046:	d034      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003048:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800304c:	d82b      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800304e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003052:	d01d      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003054:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003058:	d825      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800305e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003064:	e01f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306c:	4ba2      	ldr	r3, [pc, #648]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	4aa1      	ldr	r2, [pc, #644]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003078:	e01c      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800307a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307e:	3308      	adds	r3, #8
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f85e 	bl	8004144 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800308e:	e011      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003094:	3328      	adds	r3, #40	@ 0x28
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f001 f905 	bl	80042a8 <RCCEx_PLL3_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ac:	e002      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030ae:	bf00      	nop
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80030b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80030bc:	4b8e      	ldr	r3, [pc, #568]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80030cc:	4a8a      	ldr	r2, [pc, #552]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ce:	430b      	orrs	r3, r1
 80030d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80030d2:	e003      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80030dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80030e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030f6:	460b      	mov	r3, r1
 80030f8:	4313      	orrs	r3, r2
 80030fa:	d03a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	2b30      	cmp	r3, #48	@ 0x30
 8003104:	d01f      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003106:	2b30      	cmp	r3, #48	@ 0x30
 8003108:	d819      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800310a:	2b20      	cmp	r3, #32
 800310c:	d00c      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800310e:	2b20      	cmp	r3, #32
 8003110:	d815      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003116:	2b10      	cmp	r3, #16
 8003118:	d111      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311a:	4b77      	ldr	r3, [pc, #476]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	4a76      	ldr	r2, [pc, #472]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003126:	e011      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	3308      	adds	r3, #8
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 f807 	bl	8004144 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800313c:	e006      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003144:	e002      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800314a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003154:	4b68      	ldr	r3, [pc, #416]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003158:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003162:	4a65      	ldr	r2, [pc, #404]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003164:	430b      	orrs	r3, r1
 8003166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800317e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003188:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800318c:	460b      	mov	r3, r1
 800318e:	4313      	orrs	r3, r2
 8003190:	d051      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800319c:	d035      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800319e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a2:	d82e      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031a8:	d031      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80031aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80031ae:	d828      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b4:	d01a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ba:	d822      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c4:	d007      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80031c6:	e01c      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c8:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	4a4a      	ldr	r2, [pc, #296]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031d4:	e01c      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031da:	3308      	adds	r3, #8
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 ffb0 	bl	8004144 <RCCEx_PLL2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031ea:	e011      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	3328      	adds	r3, #40	@ 0x28
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 f857 	bl	80042a8 <RCCEx_PLL3_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003218:	4b37      	ldr	r3, [pc, #220]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800321a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	4a34      	ldr	r2, [pc, #208]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003228:	430b      	orrs	r3, r1
 800322a:	6513      	str	r3, [r2, #80]	@ 0x50
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003232:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003246:	2300      	movs	r3, #0
 8003248:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800324c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003250:	460b      	mov	r3, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	d056      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003260:	d033      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003266:	d82c      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003268:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800326c:	d02f      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800326e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003272:	d826      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003274:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003278:	d02b      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800327a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800327e:	d820      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003280:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003284:	d012      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003286:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800328a:	d81a      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d022      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003294:	d115      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329a:	3308      	adds	r3, #8
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 ff50 	bl	8004144 <RCCEx_PLL2_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032aa:	e015      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	3328      	adds	r3, #40	@ 0x28
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fff7 	bl	80042a8 <RCCEx_PLL3_Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80032c0:	e00a      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032ca:	bf00      	nop
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032ce:	bf00      	nop
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80032d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80032e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ee:	4a02      	ldr	r2, [pc, #8]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f4:	e006      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032f6:	bf00      	nop
 80032f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800331a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800331e:	460b      	mov	r3, r1
 8003320:	4313      	orrs	r3, r2
 8003322:	d055      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800332c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003330:	d033      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003336:	d82c      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333c:	d02f      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003342:	d826      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003348:	d02b      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800334a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800334e:	d820      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003354:	d012      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335a:	d81a      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d022      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003364:	d115      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336a:	3308      	adds	r3, #8
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fee8 	bl	8004144 <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800337a:	e015      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800337c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003380:	3328      	adds	r3, #40	@ 0x28
 8003382:	2101      	movs	r1, #1
 8003384:	4618      	mov	r0, r3
 8003386:	f000 ff8f 	bl	80042a8 <RCCEx_PLL3_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003390:	e00a      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003398:	e006      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800339a:	bf00      	nop
 800339c:	e004      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80033a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80033b0:	4ba3      	ldr	r3, [pc, #652]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80033c0:	4a9f      	ldr	r2, [pc, #636]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c2:	430b      	orrs	r3, r1
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c6:	e003      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80033dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80033e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d037      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80033f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033fa:	d00e      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80033fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003400:	d816      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800340a:	d111      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340c:	4b8c      	ldr	r3, [pc, #560]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800340e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003410:	4a8b      	ldr	r2, [pc, #556]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003416:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003418:	e00f      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	3308      	adds	r3, #8
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fe8e 	bl	8004144 <RCCEx_PLL2_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003442:	4b7f      	ldr	r3, [pc, #508]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003446:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a7b      	ldr	r2, [pc, #492]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6513      	str	r3, [r2, #80]	@ 0x50
 8003456:	e003      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800346c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003476:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d039      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003486:	2b03      	cmp	r3, #3
 8003488:	d81c      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800348a:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034cd 	.word	0x080034cd
 8003494:	080034a1 	.word	0x080034a1
 8003498:	080034af 	.word	0x080034af
 800349c:	080034cd 	.word	0x080034cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a0:	4b67      	ldr	r3, [pc, #412]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	4a66      	ldr	r2, [pc, #408]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034ac:	e00f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	3308      	adds	r3, #8
 80034b4:	2102      	movs	r1, #2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fe44 	bl	8004144 <RCCEx_PLL2_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80034cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80034d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034da:	f023 0103 	bic.w	r1, r3, #3
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e4:	4a56      	ldr	r2, [pc, #344]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e6:	430b      	orrs	r3, r1
 80034e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800350a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	f000 809f 	beq.w	8003654 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003516:	4b4b      	ldr	r3, [pc, #300]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4a      	ldr	r2, [pc, #296]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800351c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003520:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003522:	f7fd fb6b 	bl	8000bfc <HAL_GetTick>
 8003526:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800352a:	e00b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fd fb66 	bl	8000bfc <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b64      	cmp	r3, #100	@ 0x64
 800353a:	d903      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003542:	e005      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0ed      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003554:	2b00      	cmp	r3, #0
 8003556:	d179      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003558:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800355a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003564:	4053      	eors	r3, r2
 8003566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800356a:	2b00      	cmp	r3, #0
 800356c:	d015      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800356e:	4b34      	ldr	r3, [pc, #208]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003576:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800357a:	4b31      	ldr	r3, [pc, #196]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357e:	4a30      	ldr	r2, [pc, #192]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003586:	4b2e      	ldr	r3, [pc, #184]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	4a2d      	ldr	r2, [pc, #180]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800358c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003590:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003592:	4a2b      	ldr	r2, [pc, #172]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003594:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a6:	d118      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fd fb28 	bl	8000bfc <HAL_GetTick>
 80035ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035b0:	e00d      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fd fb23 	bl	8000bfc <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035bc:	1ad2      	subs	r2, r2, r3
 80035be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d903      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80035cc:	e005      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0eb      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80035da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d129      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035f2:	d10e      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003604:	091a      	lsrs	r2, r3, #4
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003608:	4013      	ands	r3, r2
 800360a:	4a0d      	ldr	r2, [pc, #52]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800360c:	430b      	orrs	r3, r1
 800360e:	6113      	str	r3, [r2, #16]
 8003610:	e005      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003612:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003618:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800361c:	6113      	str	r3, [r2, #16]
 800361e:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003620:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800362a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800362e:	4a04      	ldr	r2, [pc, #16]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003630:	430b      	orrs	r3, r1
 8003632:	6713      	str	r3, [r2, #112]	@ 0x70
 8003634:	e00e      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800363e:	e009      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003640:	58024400 	.word	0x58024400
 8003644:	58024800 	.word	0x58024800
 8003648:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f002 0301 	and.w	r3, r2, #1
 8003660:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800366a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	f000 8089 	beq.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800367c:	2b28      	cmp	r3, #40	@ 0x28
 800367e:	d86b      	bhi.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003680:	a201      	add	r2, pc, #4	@ (adr r2, 8003688 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	08003761 	.word	0x08003761
 800368c:	08003759 	.word	0x08003759
 8003690:	08003759 	.word	0x08003759
 8003694:	08003759 	.word	0x08003759
 8003698:	08003759 	.word	0x08003759
 800369c:	08003759 	.word	0x08003759
 80036a0:	08003759 	.word	0x08003759
 80036a4:	08003759 	.word	0x08003759
 80036a8:	0800372d 	.word	0x0800372d
 80036ac:	08003759 	.word	0x08003759
 80036b0:	08003759 	.word	0x08003759
 80036b4:	08003759 	.word	0x08003759
 80036b8:	08003759 	.word	0x08003759
 80036bc:	08003759 	.word	0x08003759
 80036c0:	08003759 	.word	0x08003759
 80036c4:	08003759 	.word	0x08003759
 80036c8:	08003743 	.word	0x08003743
 80036cc:	08003759 	.word	0x08003759
 80036d0:	08003759 	.word	0x08003759
 80036d4:	08003759 	.word	0x08003759
 80036d8:	08003759 	.word	0x08003759
 80036dc:	08003759 	.word	0x08003759
 80036e0:	08003759 	.word	0x08003759
 80036e4:	08003759 	.word	0x08003759
 80036e8:	08003761 	.word	0x08003761
 80036ec:	08003759 	.word	0x08003759
 80036f0:	08003759 	.word	0x08003759
 80036f4:	08003759 	.word	0x08003759
 80036f8:	08003759 	.word	0x08003759
 80036fc:	08003759 	.word	0x08003759
 8003700:	08003759 	.word	0x08003759
 8003704:	08003759 	.word	0x08003759
 8003708:	08003761 	.word	0x08003761
 800370c:	08003759 	.word	0x08003759
 8003710:	08003759 	.word	0x08003759
 8003714:	08003759 	.word	0x08003759
 8003718:	08003759 	.word	0x08003759
 800371c:	08003759 	.word	0x08003759
 8003720:	08003759 	.word	0x08003759
 8003724:	08003759 	.word	0x08003759
 8003728:	08003761 	.word	0x08003761
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	3308      	adds	r3, #8
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fd05 	bl	8004144 <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003740:	e00f      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003746:	3328      	adds	r3, #40	@ 0x28
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fdac 	bl	80042a8 <RCCEx_PLL3_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800376a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800376c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003778:	4abb      	ldr	r2, [pc, #748]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800377a:	430b      	orrs	r3, r1
 800377c:	6553      	str	r3, [r2, #84]	@ 0x54
 800377e:	e003      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f002 0302 	and.w	r3, r2, #2
 8003794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800379e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80037a2:	460b      	mov	r3, r1
 80037a4:	4313      	orrs	r3, r2
 80037a6:	d041      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d824      	bhi.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80037b2:	a201      	add	r2, pc, #4	@ (adr r2, 80037b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	08003805 	.word	0x08003805
 80037bc:	080037d1 	.word	0x080037d1
 80037c0:	080037e7 	.word	0x080037e7
 80037c4:	08003805 	.word	0x08003805
 80037c8:	08003805 	.word	0x08003805
 80037cc:	08003805 	.word	0x08003805
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	3308      	adds	r3, #8
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fcb3 	bl	8004144 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037e4:	e00f      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	3328      	adds	r3, #40	@ 0x28
 80037ec:	2101      	movs	r1, #1
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fd5a 	bl	80042a8 <RCCEx_PLL3_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037fa:	e004      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800380e:	4b96      	ldr	r3, [pc, #600]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003812:	f023 0107 	bic.w	r1, r3, #7
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800381c:	4a92      	ldr	r2, [pc, #584]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800381e:	430b      	orrs	r3, r1
 8003820:	6553      	str	r3, [r2, #84]	@ 0x54
 8003822:	e003      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f002 0304 	and.w	r3, r2, #4
 8003838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003842:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d044      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003854:	2b05      	cmp	r3, #5
 8003856:	d825      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003858:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	080038ad 	.word	0x080038ad
 8003864:	08003879 	.word	0x08003879
 8003868:	0800388f 	.word	0x0800388f
 800386c:	080038ad 	.word	0x080038ad
 8003870:	080038ad 	.word	0x080038ad
 8003874:	080038ad 	.word	0x080038ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	3308      	adds	r3, #8
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fc5f 	bl	8004144 <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800388c:	e00f      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800388e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003892:	3328      	adds	r3, #40	@ 0x28
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fd06 	bl	80042a8 <RCCEx_PLL3_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80038ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ba:	f023 0107 	bic.w	r1, r3, #7
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c6:	4a68      	ldr	r2, [pc, #416]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f002 0320 	and.w	r3, r2, #32
 80038e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d055      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003902:	d033      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003908:	d82c      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390e:	d02f      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003914:	d826      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003916:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800391a:	d02b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800391c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003920:	d820      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003926:	d012      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392c:	d81a      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d022      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003936:	d115      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393c:	3308      	adds	r3, #8
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fbff 	bl	8004144 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800394c:	e015      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	3328      	adds	r3, #40	@ 0x28
 8003954:	2102      	movs	r1, #2
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fca6 	bl	80042a8 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003962:	e00a      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396a:	e006      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800396c:	bf00      	nop
 800396e:	e004      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003970:	bf00      	nop
 8003972:	e002      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003982:	4b39      	ldr	r3, [pc, #228]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	4a35      	ldr	r2, [pc, #212]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003994:	430b      	orrs	r3, r1
 8003996:	6553      	str	r3, [r2, #84]	@ 0x54
 8003998:	e003      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80039b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80039bc:	460b      	mov	r3, r1
 80039be:	4313      	orrs	r3, r2
 80039c0:	d058      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80039c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039ce:	d033      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80039d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80039d4:	d82c      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039da:	d02f      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e0:	d826      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039e6:	d02b      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80039e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ec:	d820      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f2:	d012      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80039f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039f8:	d81a      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d022      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80039fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a02:	d115      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	3308      	adds	r3, #8
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fb99 	bl	8004144 <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a18:	e015      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	3328      	adds	r3, #40	@ 0x28
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fc40 	bl	80042a8 <RCCEx_PLL3_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a36:	e006      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e004      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e002      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10e      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a5e:	4a02      	ldr	r2, [pc, #8]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003a66:	bf00      	nop
 8003a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d055      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003aa0:	d033      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003aa2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003aa6:	d82c      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aac:	d02f      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	d826      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ab4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ab8:	d02b      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003aba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003abe:	d820      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ac0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac4:	d012      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003ac6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aca:	d81a      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad4:	d115      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	3308      	adds	r3, #8
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fb30 	bl	8004144 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003aea:	e015      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	3328      	adds	r3, #40	@ 0x28
 8003af2:	2102      	movs	r1, #2
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fbd7 	bl	80042a8 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b00:	e00a      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b0a:	bf00      	nop
 8003b0c:	e004      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b20:	4ba1      	ldr	r3, [pc, #644]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003b30:	4a9d      	ldr	r2, [pc, #628]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b36:	e003      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f002 0308 	and.w	r3, r2, #8
 8003b4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d01e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b72:	3328      	adds	r3, #40	@ 0x28
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb96 	bl	80042a8 <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b88:	4b87      	ldr	r3, [pc, #540]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b98:	4a83      	ldr	r2, [pc, #524]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba6:	f002 0310 	and.w	r3, r2, #16
 8003baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003bb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	d01e      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	3328      	adds	r3, #40	@ 0x28
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fb67 	bl	80042a8 <RCCEx_PLL3_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003be6:	4b70      	ldr	r3, [pc, #448]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf6:	4a6c      	ldr	r2, [pc, #432]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d03e      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c28:	d022      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003c2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c2e:	d81b      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c38:	d00b      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003c3a:	e015      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c40:	3308      	adds	r3, #8
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fa7d 	bl	8004144 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c50:	e00f      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	3328      	adds	r3, #40	@ 0x28
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fb24 	bl	80042a8 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c8a:	4a47      	ldr	r2, [pc, #284]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ca8:	2300      	movs	r3, #0
 8003caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	d03b      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cc2:	d01f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003cc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003cc8:	d818      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cce:	d003      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cd4:	d007      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003cd6:	e011      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd8:	4b33      	ldr	r3, [pc, #204]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	4a32      	ldr	r2, [pc, #200]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cea:	3328      	adds	r3, #40	@ 0x28
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fada 	bl	80042a8 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cfa:	e004      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d02:	e000      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10b      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d0e:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1e:	4a22      	ldr	r2, [pc, #136]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d034      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d58:	d007      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d5a:	e011      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5c:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4a11      	ldr	r2, [pc, #68]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d68:	e00e      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3308      	adds	r3, #8
 8003d70:	2102      	movs	r1, #2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f9e6 	bl	8004144 <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d7e:	e003      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10d      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d90:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dc6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	d00c      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd4:	3328      	adds	r3, #40	@ 0x28
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fa65 	bl	80042a8 <RCCEx_PLL3_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003df8:	2300      	movs	r3, #0
 8003dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dfc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d038      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e12:	d018      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e18:	d811      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1e:	d014      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e24:	d80b      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d011      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003e2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e30:	4bc3      	ldr	r3, [pc, #780]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e34:	4ac2      	ldr	r2, [pc, #776]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003e3c:	e008      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e44:	e004      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e46:	bf00      	nop
 8003e48:	e002      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10b      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e58:	4bb9      	ldr	r3, [pc, #740]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e68:	4ab5      	ldr	r2, [pc, #724]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e6e:	e003      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e86:	2300      	movs	r3, #0
 8003e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e94:	4baa      	ldr	r3, [pc, #680]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea2:	4aa7      	ldr	r2, [pc, #668]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003eb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003eba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ec4:	4b9e      	ldr	r3, [pc, #632]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ed4:	4a9a      	ldr	r2, [pc, #616]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ee8:	2300      	movs	r3, #0
 8003eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ef6:	4b92      	ldr	r3, [pc, #584]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003efa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f04:	4a8e      	ldr	r2, [pc, #568]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f18:	2300      	movs	r3, #0
 8003f1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f20:	460b      	mov	r3, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f26:	4b86      	ldr	r3, [pc, #536]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	4a85      	ldr	r2, [pc, #532]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f30:	6113      	str	r3, [r2, #16]
 8003f32:	4b83      	ldr	r3, [pc, #524]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f34:	6919      	ldr	r1, [r3, #16]
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003f3e:	4a80      	ldr	r2, [pc, #512]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f40:	430b      	orrs	r3, r1
 8003f42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f52:	2300      	movs	r3, #0
 8003f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f60:	4b77      	ldr	r3, [pc, #476]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f64:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6e:	4a74      	ldr	r2, [pc, #464]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f82:	2300      	movs	r3, #0
 8003f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f90:	4b6b      	ldr	r3, [pc, #428]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f94:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa0:	4a67      	ldr	r2, [pc, #412]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	2100      	movs	r1, #0
 8003fb0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d011      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f8ba 	bl	8004144 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	6239      	str	r1, [r7, #32]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3308      	adds	r3, #8
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f89a 	bl	8004144 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	2100      	movs	r1, #0
 8004030:	61b9      	str	r1, [r7, #24]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800403c:	460b      	mov	r3, r1
 800403e:	4313      	orrs	r3, r2
 8004040:	d011      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004046:	3308      	adds	r3, #8
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f87a 	bl	8004144 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	2100      	movs	r1, #0
 8004070:	6139      	str	r1, [r7, #16]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800407c:	460b      	mov	r3, r1
 800407e:	4313      	orrs	r3, r2
 8004080:	d011      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	3328      	adds	r3, #40	@ 0x28
 8004088:	2100      	movs	r1, #0
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f90c 	bl	80042a8 <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	2100      	movs	r1, #0
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d011      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	3328      	adds	r3, #40	@ 0x28
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f8ec 	bl	80042a8 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	2100      	movs	r1, #0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d011      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	3328      	adds	r3, #40	@ 0x28
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f8cc 	bl	80042a8 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004126:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
}
 8004134:	4618      	mov	r0, r3
 8004136:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004140:	58024400 	.word	0x58024400

08004144 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004152:	4b53      	ldr	r3, [pc, #332]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b03      	cmp	r3, #3
 800415c:	d101      	bne.n	8004162 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e099      	b.n	8004296 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004162:	4b4f      	ldr	r3, [pc, #316]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4e      	ldr	r2, [pc, #312]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004168:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416e:	f7fc fd45 	bl	8000bfc <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004174:	e008      	b.n	8004188 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004176:	f7fc fd41 	bl	8000bfc <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e086      	b.n	8004296 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004188:	4b45      	ldr	r3, [pc, #276]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004194:	4b42      	ldr	r3, [pc, #264]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	493f      	ldr	r1, [pc, #252]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	025b      	lsls	r3, r3, #9
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	061b      	lsls	r3, r3, #24
 80041d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041d8:	4931      	ldr	r1, [pc, #196]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041de:	4b30      	ldr	r3, [pc, #192]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	492d      	ldr	r1, [pc, #180]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041f0:	4b2b      	ldr	r3, [pc, #172]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	f023 0220 	bic.w	r2, r3, #32
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	4928      	ldr	r1, [pc, #160]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004202:	4b27      	ldr	r3, [pc, #156]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	4a26      	ldr	r2, [pc, #152]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004208:	f023 0310 	bic.w	r3, r3, #16
 800420c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800420e:	4b24      	ldr	r3, [pc, #144]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004212:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <RCCEx_PLL2_Config+0x160>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	69d2      	ldr	r2, [r2, #28]
 800421a:	00d2      	lsls	r2, r2, #3
 800421c:	4920      	ldr	r1, [pc, #128]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800421e:	4313      	orrs	r3, r2
 8004220:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004222:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004226:	4a1e      	ldr	r2, [pc, #120]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004228:	f043 0310 	orr.w	r3, r3, #16
 800422c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004234:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800423a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800423e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004240:	e00f      	b.n	8004262 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d106      	bne.n	8004256 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004248:	4b15      	ldr	r3, [pc, #84]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004254:	e005      	b.n	8004262 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004256:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800425c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004260:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004262:	4b0f      	ldr	r3, [pc, #60]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a0e      	ldr	r2, [pc, #56]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 8004268:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800426c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426e:	f7fc fcc5 	bl	8000bfc <HAL_GetTick>
 8004272:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004274:	e008      	b.n	8004288 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004276:	f7fc fcc1 	bl	8000bfc <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e006      	b.n	8004296 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <RCCEx_PLL2_Config+0x15c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004294:	7bfb      	ldrb	r3, [r7, #15]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400
 80042a4:	ffff0007 	.word	0xffff0007

080042a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042b6:	4b53      	ldr	r3, [pc, #332]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d101      	bne.n	80042c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e099      	b.n	80043fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a4e      	ldr	r2, [pc, #312]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fc fc93 	bl	8000bfc <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042d8:	e008      	b.n	80042ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042da:	f7fc fc8f 	bl	8000bfc <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e086      	b.n	80043fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042ec:	4b45      	ldr	r3, [pc, #276]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042f8:	4b42      	ldr	r3, [pc, #264]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	051b      	lsls	r3, r3, #20
 8004306:	493f      	ldr	r1, [pc, #252]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	628b      	str	r3, [r1, #40]	@ 0x28
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	3b01      	subs	r3, #1
 8004312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	3b01      	subs	r3, #1
 800431c:	025b      	lsls	r3, r3, #9
 800431e:	b29b      	uxth	r3, r3
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	3b01      	subs	r3, #1
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800433c:	4931      	ldr	r1, [pc, #196]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 800433e:	4313      	orrs	r3, r2
 8004340:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004342:	4b30      	ldr	r3, [pc, #192]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004346:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	492d      	ldr	r1, [pc, #180]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004350:	4313      	orrs	r3, r2
 8004352:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004354:	4b2b      	ldr	r3, [pc, #172]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4928      	ldr	r1, [pc, #160]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004362:	4313      	orrs	r3, r2
 8004364:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004366:	4b27      	ldr	r3, [pc, #156]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	4a26      	ldr	r2, [pc, #152]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 800436c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004372:	4b24      	ldr	r3, [pc, #144]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004376:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <RCCEx_PLL3_Config+0x160>)
 8004378:	4013      	ands	r3, r2
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	69d2      	ldr	r2, [r2, #28]
 800437e:	00d2      	lsls	r2, r2, #3
 8004380:	4920      	ldr	r1, [pc, #128]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004386:	4b1f      	ldr	r3, [pc, #124]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	4a1e      	ldr	r2, [pc, #120]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004398:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	4a19      	ldr	r2, [pc, #100]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 800439e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043a4:	e00f      	b.n	80043c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d106      	bne.n	80043ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043ac:	4b15      	ldr	r3, [pc, #84]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80043b8:	e005      	b.n	80043c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043ba:	4b12      	ldr	r3, [pc, #72]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	4a11      	ldr	r2, [pc, #68]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d2:	f7fc fc13 	bl	8000bfc <HAL_GetTick>
 80043d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043d8:	e008      	b.n	80043ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043da:	f7fc fc0f 	bl	8000bfc <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <RCCEx_PLL3_Config+0x15c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	58024400 	.word	0x58024400
 8004408:	ffff0007 	.word	0xffff0007

0800440c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800440c:	b084      	sub	sp, #16
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	f107 001c 	add.w	r0, r7, #28
 800441a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800441e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004422:	2b01      	cmp	r3, #1
 8004424:	d121      	bne.n	800446a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	4b2c      	ldr	r3, [pc, #176]	@ (80044e8 <USB_CoreInit+0xdc>)
 8004438:	4013      	ands	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800444a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 faaa 	bl	80049b8 <USB_CoreReset>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e01b      	b.n	80044a2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa9e 	bl	80049b8 <USB_CoreReset>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004480:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
 8004494:	e005      	b.n	80044a2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044a2:	7fbb      	ldrb	r3, [r7, #30]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d116      	bne.n	80044d6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80044b6:	4b0d      	ldr	r3, [pc, #52]	@ (80044ec <USB_CoreInit+0xe0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f043 0206 	orr.w	r2, r3, #6
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e2:	b004      	add	sp, #16
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	ffbdffbf 	.word	0xffbdffbf
 80044ec:	03ee0000 	.word	0x03ee0000

080044f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 0201 	bic.w	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	460b      	mov	r3, r1
 800451c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d115      	bne.n	8004560 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004540:	200a      	movs	r0, #10
 8004542:	f7fc fb67 	bl	8000c14 <HAL_Delay>
      ms += 10U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	330a      	adds	r3, #10
 800454a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fa25 	bl	800499c <USB_GetMode>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d01e      	beq.n	8004596 <USB_SetCurrentMode+0x84>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2bc7      	cmp	r3, #199	@ 0xc7
 800455c:	d9f0      	bls.n	8004540 <USB_SetCurrentMode+0x2e>
 800455e:	e01a      	b.n	8004596 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d115      	bne.n	8004592 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004572:	200a      	movs	r0, #10
 8004574:	f7fc fb4e 	bl	8000c14 <HAL_Delay>
      ms += 10U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	330a      	adds	r3, #10
 800457c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa0c 	bl	800499c <USB_GetMode>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <USB_SetCurrentMode+0x84>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2bc7      	cmp	r3, #199	@ 0xc7
 800458e:	d9f0      	bls.n	8004572 <USB_SetCurrentMode+0x60>
 8004590:	e001      	b.n	8004596 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e005      	b.n	80045a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2bc8      	cmp	r3, #200	@ 0xc8
 800459a:	d101      	bne.n	80045a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045ac:	b084      	sub	sp, #16
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80045ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	e009      	b.n	80045e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	3340      	adds	r3, #64	@ 0x40
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	3301      	adds	r3, #1
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b0e      	cmp	r3, #14
 80045e4:	d9f2      	bls.n	80045cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d11c      	bne.n	8004628 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e005      	b.n	8004634 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004640:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10d      	bne.n	8004664 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004650:	2100      	movs	r1, #0
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f968 	bl	8004928 <USB_SetDevSpeed>
 8004658:	e008      	b.n	800466c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800465a:	2101      	movs	r1, #1
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f963 	bl	8004928 <USB_SetDevSpeed>
 8004662:	e003      	b.n	800466c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004664:	2103      	movs	r1, #3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f95e 	bl	8004928 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800466c:	2110      	movs	r1, #16
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8fa 	bl	8004868 <USB_FlushTxFifo>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f924 	bl	80048cc <USB_FlushRxFifo>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ac:	461a      	mov	r2, r3
 80046ae:	2300      	movs	r3, #0
 80046b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	e043      	b.n	8004740 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ce:	d118      	bne.n	8004702 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e013      	b.n	8004714 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f8:	461a      	mov	r2, r3
 80046fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e008      	b.n	8004714 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470e:	461a      	mov	r2, r3
 8004710:	2300      	movs	r3, #0
 8004712:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004732:	461a      	mov	r2, r3
 8004734:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	3301      	adds	r3, #1
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004744:	461a      	mov	r2, r3
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4293      	cmp	r3, r2
 800474a:	d3b5      	bcc.n	80046b8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e043      	b.n	80047da <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004768:	d118      	bne.n	800479c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477c:	461a      	mov	r2, r3
 800477e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e013      	b.n	80047ae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e008      	b.n	80047ae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a8:	461a      	mov	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ba:	461a      	mov	r2, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047cc:	461a      	mov	r2, r3
 80047ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	3301      	adds	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047de:	461a      	mov	r2, r3
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d3b5      	bcc.n	8004752 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004806:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800480c:	2b00      	cmp	r3, #0
 800480e:	d105      	bne.n	800481c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f043 0210 	orr.w	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	4b0f      	ldr	r3, [pc, #60]	@ (8004860 <USB_DevInit+0x2b4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004828:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f043 0208 	orr.w	r2, r3, #8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800483c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <USB_DevInit+0x2b8>)
 800484a:	4313      	orrs	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800485c:	b004      	add	sp, #16
 800485e:	4770      	bx	lr
 8004860:	803c3800 	.word	0x803c3800
 8004864:	40000004 	.word	0x40000004

08004868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004882:	d901      	bls.n	8004888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e01b      	b.n	80048c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	daf2      	bge.n	8004876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	019b      	lsls	r3, r3, #6
 8004898:	f043 0220 	orr.w	r2, r3, #32
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048ac:	d901      	bls.n	80048b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e006      	b.n	80048c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d0f0      	beq.n	80048a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048e4:	d901      	bls.n	80048ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e018      	b.n	800491c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	daf2      	bge.n	80048d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2210      	movs	r2, #16
 80048fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3301      	adds	r3, #1
 8004900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004908:	d901      	bls.n	800490e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e006      	b.n	800491c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b10      	cmp	r3, #16
 8004918:	d0f0      	beq.n	80048fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004974:	f023 0303 	bic.w	r3, r3, #3
 8004978:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0301 	and.w	r3, r3, #1
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	3301      	adds	r3, #1
 80049c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049d0:	d901      	bls.n	80049d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e01b      	b.n	8004a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	daf2      	bge.n	80049c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f043 0201 	orr.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3301      	adds	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049fa:	d901      	bls.n	8004a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e006      	b.n	8004a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d0f0      	beq.n	80049ee <USB_CoreReset+0x36>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <memset>:
 8004a1a:	4402      	add	r2, r0
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d100      	bne.n	8004a24 <memset+0xa>
 8004a22:	4770      	bx	lr
 8004a24:	f803 1b01 	strb.w	r1, [r3], #1
 8004a28:	e7f9      	b.n	8004a1e <memset+0x4>
	...

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004a64 <__libc_init_array+0x38>)
 8004a30:	4c0d      	ldr	r4, [pc, #52]	@ (8004a68 <__libc_init_array+0x3c>)
 8004a32:	1b64      	subs	r4, r4, r5
 8004a34:	10a4      	asrs	r4, r4, #2
 8004a36:	2600      	movs	r6, #0
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a6c <__libc_init_array+0x40>)
 8004a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a70 <__libc_init_array+0x44>)
 8004a40:	f000 f818 	bl	8004a74 <_init>
 8004a44:	1b64      	subs	r4, r4, r5
 8004a46:	10a4      	asrs	r4, r4, #2
 8004a48:	2600      	movs	r6, #0
 8004a4a:	42a6      	cmp	r6, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a54:	4798      	blx	r3
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5e:	4798      	blx	r3
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	08004a9c 	.word	0x08004a9c
 8004a68:	08004a9c 	.word	0x08004a9c
 8004a6c:	08004a9c 	.word	0x08004a9c
 8004a70:	08004aa0 	.word	0x08004aa0

08004a74 <_init>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	bf00      	nop
 8004a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7a:	bc08      	pop	{r3}
 8004a7c:	469e      	mov	lr, r3
 8004a7e:	4770      	bx	lr

08004a80 <_fini>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr
