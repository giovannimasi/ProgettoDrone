
Progetto Drone_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006364  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080065fc  080065fc  000075fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006634  08006634  000080d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006634  08006634  00007634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800663c  0800663c  000080d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800663c  0800663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08006644  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006654  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080066b4  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000688  240000d0  08006714  000080d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000758  08006714  00008758  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018519  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a69  00000000  00000000  00020617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001048  00000000  00000000  00023080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c8f  00000000  00000000  000240c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a544  00000000  00000000  00024d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014f16  00000000  00000000  0005f29b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0017fbe7  00000000  00000000  000741b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001f3d98  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004530  00000000  00000000  001f3ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  001f830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080065e4 	.word	0x080065e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080065e4 	.word	0x080065e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
#ifdef DEBUG
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET));
 80006fa:	bf00      	nop
 80006fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000778 <main+0x84>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f9      	bne.n	80006fc <main+0x8>
#endif
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fbe4 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f836 	bl	800077c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000710:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <main+0x84>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <main+0x84>)
 8000718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <main+0x84>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800072e:	2000      	movs	r0, #0
 8000730:	f001 fb6e 	bl	8001e10 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000734:	2100      	movs	r1, #0
 8000736:	2000      	movs	r0, #0
 8000738:	f001 fb84 	bl	8001e44 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800073c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000740:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000742:	bf00      	nop
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <main+0x84>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800074c:	2b00      	cmp	r3, #0
 800074e:	d104      	bne.n	800075a <main+0x66>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dcf4      	bgt.n	8000744 <main+0x50>
if ( timeout < 0 )
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	da01      	bge.n	8000764 <main+0x70>
{
Error_Handler();
 8000760:	f000 f9aa 	bl	8000ab8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000764:	f000 f952 	bl	8000a0c <MX_GPIO_Init>
  MX_ETH_Init();
 8000768:	f000 f886 	bl	8000878 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800076c:	f000 f8d0 	bl	8000910 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000770:	f000 f91a 	bl	80009a8 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <main+0x80>
 8000778:	58024400 	.word	0x58024400

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	@ 0x70
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fefd 	bl	800658a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f005 fef7 	bl	800658a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800079c:	2004      	movs	r0, #4
 800079e:	f001 fc95 	bl	80020cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <SystemClock_Config+0xf4>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007aa:	4a31      	ldr	r2, [pc, #196]	@ (8000870 <SystemClock_Config+0xf4>)
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <SystemClock_Config+0xf4>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <SystemClock_Config+0xf8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000874 <SystemClock_Config+0xf8>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <SystemClock_Config+0xf8>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d8:	bf00      	nop
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <SystemClock_Config+0xf8>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007e6:	d1f8      	bne.n	80007da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80007fe:	2312      	movs	r3, #18
 8000800:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800080e:	230c      	movs	r3, #12
 8000810:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000812:	2302      	movs	r3, #2
 8000814:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000816:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800081a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fcbd 	bl	80021a0 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800082c:	f000 f944 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	233f      	movs	r3, #63	@ 0x3f
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2303      	movs	r3, #3
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000840:	2340      	movs	r3, #64	@ 0x40
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000844:	2340      	movs	r3, #64	@ 0x40
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800084e:	2340      	movs	r3, #64	@ 0x40
 8000850:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f8fc 	bl	8002a54 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000862:	f000 f929 	bl	8000ab8 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3770      	adds	r7, #112	@ 0x70
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	58000400 	.word	0x58000400
 8000874:	58024800 	.word	0x58024800

08000878 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800087c:	4b1e      	ldr	r3, [pc, #120]	@ (80008f8 <MX_ETH_Init+0x80>)
 800087e:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <MX_ETH_Init+0x84>)
 8000880:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_ETH_Init+0x88>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_ETH_Init+0x88>)
 800088a:	2280      	movs	r2, #128	@ 0x80
 800088c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_ETH_Init+0x88>)
 8000890:	22e1      	movs	r2, #225	@ 0xe1
 8000892:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_ETH_Init+0x88>)
 8000896:	2200      	movs	r2, #0
 8000898:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_ETH_Init+0x88>)
 800089c:	2200      	movs	r2, #0
 800089e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_ETH_Init+0x88>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_ETH_Init+0x80>)
 80008a8:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <MX_ETH_Init+0x88>)
 80008aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_ETH_Init+0x80>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_ETH_Init+0x80>)
 80008b4:	4a13      	ldr	r2, [pc, #76]	@ (8000904 <MX_ETH_Init+0x8c>)
 80008b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_ETH_Init+0x80>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	@ (8000908 <MX_ETH_Init+0x90>)
 80008bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_ETH_Init+0x80>)
 80008c0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008c6:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_ETH_Init+0x80>)
 80008c8:	f000 fcbe 	bl	8001248 <HAL_ETH_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008d2:	f000 f8f1 	bl	8000ab8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008d6:	2238      	movs	r2, #56	@ 0x38
 80008d8:	2100      	movs	r1, #0
 80008da:	480c      	ldr	r0, [pc, #48]	@ (800090c <MX_ETH_Init+0x94>)
 80008dc:	f005 fe55 	bl	800658a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <MX_ETH_Init+0x94>)
 80008e2:	2221      	movs	r2, #33	@ 0x21
 80008e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <MX_ETH_Init+0x94>)
 80008e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <MX_ETH_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	24000124 	.word	0x24000124
 80008fc:	40028000 	.word	0x40028000
 8000900:	2400074c 	.word	0x2400074c
 8000904:	24000070 	.word	0x24000070
 8000908:	24000010 	.word	0x24000010
 800090c:	240000ec 	.word	0x240000ec

08000910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <MX_USART3_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800094c:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800095a:	f004 fa33 	bl	8004dc4 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 f8a8 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800096c:	f005 fa3b 	bl	8005de6 <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 f89f 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800097e:	f005 fa70 	bl	8005e62 <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 f896 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 f9f1 	bl	8005d74 <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 f88e 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	240001d4 	.word	0x240001d4
 80009a4:	40004800 	.word	0x40004800

080009a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ae:	4a16      	ldr	r2, [pc, #88]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b4:	2209      	movs	r2, #9
 80009b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f0:	f001 fa3c 	bl	8001e6c <HAL_PCD_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009fa:	f000 f85d 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24000268 	.word	0x24000268
 8000a08:	40080000 	.word	0x40080000

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a18:	4a26      	ldr	r2, [pc, #152]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a30:	4b20      	ldr	r3, [pc, #128]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a40:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a54:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_GPIO_Init+0xa8>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa8:	bf00      	nop
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <Error_Handler+0x8>

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <HAL_MspInit+0x30>)
 8000acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad0:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x30>)
 8000ad2:	f043 0302 	orr.w	r3, r3, #2
 8000ad6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x30>)
 8000adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	58024400 	.word	0x58024400

08000af8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	@ 0x38
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a59      	ldr	r2, [pc, #356]	@ (8000c7c <HAL_ETH_MspInit+0x184>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	f040 80ab 	bne.w	8000c72 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b1c:	4b58      	ldr	r3, [pc, #352]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b22:	4a57      	ldr	r2, [pc, #348]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b28:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b2c:	4b54      	ldr	r3, [pc, #336]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b3a:	4b51      	ldr	r3, [pc, #324]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b40:	4a4f      	ldr	r2, [pc, #316]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b58:	4b49      	ldr	r3, [pc, #292]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b5e:	4a48      	ldr	r2, [pc, #288]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b68:	4b45      	ldr	r3, [pc, #276]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a40      	ldr	r2, [pc, #256]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b86:	4b3e      	ldr	r3, [pc, #248]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b3a      	ldr	r3, [pc, #232]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	4a39      	ldr	r2, [pc, #228]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba4:	4b36      	ldr	r3, [pc, #216]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	4a31      	ldr	r2, [pc, #196]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be0:	4b27      	ldr	r3, [pc, #156]	@ (8000c80 <HAL_ETH_MspInit+0x188>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bee:	2332      	movs	r3, #50	@ 0x32
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	481e      	ldr	r0, [pc, #120]	@ (8000c84 <HAL_ETH_MspInit+0x18c>)
 8000c0a:	f000 ff51 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c0e:	2386      	movs	r3, #134	@ 0x86
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4817      	ldr	r0, [pc, #92]	@ (8000c88 <HAL_ETH_MspInit+0x190>)
 8000c2a:	f000 ff41 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	230b      	movs	r3, #11
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <HAL_ETH_MspInit+0x194>)
 8000c4c:	f000 ff30 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c50:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c62:	230b      	movs	r3, #11
 8000c64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <HAL_ETH_MspInit+0x198>)
 8000c6e:	f000 ff1f 	bl	8001ab0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3738      	adds	r7, #56	@ 0x38
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40028000 	.word	0x40028000
 8000c80:	58024400 	.word	0x58024400
 8000c84:	58020800 	.word	0x58020800
 8000c88:	58020000 	.word	0x58020000
 8000c8c:	58020400 	.word	0x58020400
 8000c90:	58021800 	.word	0x58021800

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0b4      	sub	sp, #208	@ 0xd0
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	22c0      	movs	r2, #192	@ 0xc0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 fc70 	bl	800658a <memset>
  if(huart->Instance==USART3)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <HAL_UART_MspInit+0x6c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d121      	bne.n	8000cf8 <HAL_UART_MspInit+0x64>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cb4:	f04f 0202 	mov.w	r2, #2
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fa4e 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x46>
    {
      Error_Handler();
 8000cd6:	f7ff feef 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_UART_MspInit+0x70>)
 8000cdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_UART_MspInit+0x70>)
 8000ce2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_UART_MspInit+0x70>)
 8000cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cf8:	bf00      	nop
 8000cfa:	37d0      	adds	r7, #208	@ 0xd0
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40004800 	.word	0x40004800
 8000d04:	58024400 	.word	0x58024400

08000d08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	22c0      	movs	r2, #192	@ 0xc0
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fc2e 	bl	800658a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a38      	ldr	r2, [pc, #224]	@ (8000e14 <HAL_PCD_MspInit+0x10c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d169      	bne.n	8000e0c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d38:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000d48:	2312      	movs	r3, #18
 8000d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000d50:	2303      	movs	r3, #3
 8000d52:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000d5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000d62:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000d64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 f9fb 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000d7c:	f7ff fe9c 	bl	8000ab8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d80:	f001 f9fe 	bl	8002180 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <HAL_PCD_MspInit+0x110>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <HAL_PCD_MspInit+0x110>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_PCD_MspInit+0x110>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000da2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4814      	ldr	r0, [pc, #80]	@ (8000e1c <HAL_PCD_MspInit+0x114>)
 8000dca:	f000 fe71 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <HAL_PCD_MspInit+0x114>)
 8000dea:	f000 fe61 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_PCD_MspInit+0x110>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_PCD_MspInit+0x110>)
 8000df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_PCD_MspInit+0x110>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e0c:	bf00      	nop
 8000e0e:	37e8      	adds	r7, #232	@ 0xe8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40080000 	.word	0x40080000
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58020000 	.word	0x58020000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 f89f 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e84:	f7ff fba0 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eae:	f005 fb75 	bl	800659c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fc1f 	bl	80006f4 <main>
  bx  lr
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ebc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ec4:	08006644 	.word	0x08006644
  ldr r2, =_sbss
 8000ec8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000ecc:	24000758 	.word	0x24000758

08000ed0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC3_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 f982 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee0:	f001 ff6e 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <HAL_Init+0x68>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	0a1b      	lsrs	r3, r3, #8
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	4913      	ldr	r1, [pc, #76]	@ (8000f40 <HAL_Init+0x6c>)
 8000ef2:	5ccb      	ldrb	r3, [r1, r3]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8000efc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_Init+0x68>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a0e      	ldr	r2, [pc, #56]	@ (8000f40 <HAL_Init+0x6c>)
 8000f08:	5cd3      	ldrb	r3, [r2, r3]
 8000f0a:	f003 031f 	and.w	r3, r3, #31
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_Init+0x70>)
 8000f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_Init+0x74>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f814 	bl	8000f4c <HAL_InitTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e002      	b.n	8000f34 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2e:	f7ff fdc9 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	080065fc 	.word	0x080065fc
 8000f44:	24000004 	.word	0x24000004
 8000f48:	24000000 	.word	0x24000000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_InitTick+0x60>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e021      	b.n	8000fa4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <HAL_InitTick+0x64>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_InitTick+0x60>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f959 	bl	800122e <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00e      	b.n	8000fa4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d80a      	bhi.n	8000fa2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f94:	f000 f931 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4a06      	ldr	r2, [pc, #24]	@ (8000fb4 <HAL_InitTick+0x68>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	2400000c 	.word	0x2400000c
 8000fb0:	24000000 	.word	0x24000000
 8000fb4:	24000008 	.word	0x24000008

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2400000c 	.word	0x2400000c
 8000fdc:	24000754 	.word	0x24000754

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	24000754 	.word	0x24000754

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2400000c 	.word	0x2400000c

08001040 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetREVID+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0c1b      	lsrs	r3, r3, #16
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	5c001000 	.word	0x5c001000

08001058 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001068:	4904      	ldr	r1, [pc, #16]	@ (800107c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	58000400 	.word	0x58000400

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	05fa0000 	.word	0x05fa0000

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	@ (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	@ (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	@ 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	@ 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff47 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff5e 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff90 	bl	8001138 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5f 	bl	80010e4 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb2 	bl	80011a0 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0e3      	b.n	8001422 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001260:	2b00      	cmp	r3, #0
 8001262:	d106      	bne.n	8001272 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2223      	movs	r2, #35	@ 0x23
 8001268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fc43 	bl	8000af8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b6e      	ldr	r3, [pc, #440]	@ (800142c <HAL_ETH_Init+0x1e4>)
 8001274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001278:	4a6c      	ldr	r2, [pc, #432]	@ (800142c <HAL_ETH_Init+0x1e4>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001282:	4b6a      	ldr	r3, [pc, #424]	@ (800142c <HAL_ETH_Init+0x1e4>)
 8001284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7a1b      	ldrb	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d103      	bne.n	80012a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fedd 	bl	8001058 <HAL_SYSCFG_ETHInterfaceSelect>
 800129e:	e003      	b.n	80012a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80012a0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80012a4:	f7ff fed8 	bl	8001058 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80012a8:	4b61      	ldr	r3, [pc, #388]	@ (8001430 <HAL_ETH_Init+0x1e8>)
 80012aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c4:	f7ff fe8c 	bl	8000fe0 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012ca:	e011      	b.n	80012f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012cc:	f7ff fe88 	bl	8000fe0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012da:	d909      	bls.n	80012f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	22e0      	movs	r2, #224	@ 0xe0
 80012e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e098      	b.n	8001422 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e4      	bne.n	80012cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f89e 	bl	8001444 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001308:	f001 fed4 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 800130c:	4603      	mov	r3, r0
 800130e:	4a49      	ldr	r2, [pc, #292]	@ (8001434 <HAL_ETH_Init+0x1ec>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	0c9a      	lsrs	r2, r3, #18
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3a01      	subs	r2, #1
 800131c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fa81 	bl	8001828 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001332:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800133e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001342:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	22e0      	movs	r2, #224	@ 0xe0
 800135e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e05d      	b.n	8001422 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001372:	4b31      	ldr	r3, [pc, #196]	@ (8001438 <HAL_ETH_Init+0x1f0>)
 8001374:	4013      	ands	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6952      	ldr	r2, [r2, #20]
 800137a:	0051      	lsls	r1, r2, #1
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	430b      	orrs	r3, r1
 8001382:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001386:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fae9 	bl	8001962 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 fb2f 	bl	80019f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	3305      	adds	r3, #5
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021a      	lsls	r2, r3, #8
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	3304      	adds	r3, #4
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	3303      	adds	r3, #3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	061a      	lsls	r2, r3, #24
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	3302      	adds	r3, #2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	041b      	lsls	r3, r3, #16
 80013c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	3301      	adds	r3, #1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013e4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_ETH_Init+0x1f4>)
 80013f6:	430b      	orrs	r3, r1
 80013f8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <HAL_ETH_Init+0x1f8>)
 800140a:	430b      	orrs	r3, r1
 800140c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2210      	movs	r2, #16
 800141c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	58024400 	.word	0x58024400
 8001430:	58000400 	.word	0x58000400
 8001434:	431bde83 	.word	0x431bde83
 8001438:	ffff8001 	.word	0xffff8001
 800143c:	0c020060 	.word	0x0c020060
 8001440:	0c20c000 	.word	0x0c20c000

08001444 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001454:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800145c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800145e:	f001 fe29 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8001462:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4a1a      	ldr	r2, [pc, #104]	@ (80014d0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d804      	bhi.n	8001476 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e022      	b.n	80014bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4a16      	ldr	r2, [pc, #88]	@ (80014d4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d204      	bcs.n	8001488 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e019      	b.n	80014bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d915      	bls.n	80014bc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d804      	bhi.n	80014a2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e00c      	b.n	80014bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d804      	bhi.n	80014b4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e003      	b.n	80014bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80014ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	02160ebf 	.word	0x02160ebf
 80014d4:	03938700 	.word	0x03938700
 80014d8:	05f5e0ff 	.word	0x05f5e0ff
 80014dc:	08f0d17f 	.word	0x08f0d17f
 80014e0:	0ee6b27f 	.word	0x0ee6b27f

080014e4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80014f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80014fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7b1b      	ldrb	r3, [r3, #12]
 8001504:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001506:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	7b5b      	ldrb	r3, [r3, #13]
 800150c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800150e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	7b9b      	ldrb	r3, [r3, #14]
 8001514:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	7bdb      	ldrb	r3, [r3, #15]
 800151c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800151e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	7c12      	ldrb	r2, [r2, #16]
 8001524:	2a00      	cmp	r2, #0
 8001526:	d102      	bne.n	800152e <ETH_SetMACConfig+0x4a>
 8001528:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800152c:	e000      	b.n	8001530 <ETH_SetMACConfig+0x4c>
 800152e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001530:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	7c52      	ldrb	r2, [r2, #17]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d102      	bne.n	8001540 <ETH_SetMACConfig+0x5c>
 800153a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800153e:	e000      	b.n	8001542 <ETH_SetMACConfig+0x5e>
 8001540:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	7c9b      	ldrb	r3, [r3, #18]
 8001548:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800154a:	431a      	orrs	r2, r3
               macconf->Speed |
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001550:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	7f1b      	ldrb	r3, [r3, #28]
 800155c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800155e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	7f5b      	ldrb	r3, [r3, #29]
 8001564:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001566:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	7f92      	ldrb	r2, [r2, #30]
 800156c:	2a00      	cmp	r2, #0
 800156e:	d102      	bne.n	8001576 <ETH_SetMACConfig+0x92>
 8001570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001574:	e000      	b.n	8001578 <ETH_SetMACConfig+0x94>
 8001576:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001578:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7fdb      	ldrb	r3, [r3, #31]
 800157e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001580:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001588:	2a00      	cmp	r2, #0
 800158a:	d102      	bne.n	8001592 <ETH_SetMACConfig+0xae>
 800158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001590:	e000      	b.n	8001594 <ETH_SetMACConfig+0xb0>
 8001592:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001594:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800159a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80015a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b56      	ldr	r3, [pc, #344]	@ (8001710 <ETH_SetMACConfig+0x22c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	68f9      	ldr	r1, [r7, #12]
 80015be:	430b      	orrs	r3, r1
 80015c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80015e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d102      	bne.n	80015f6 <ETH_SetMACConfig+0x112>
 80015f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015f4:	e000      	b.n	80015f8 <ETH_SetMACConfig+0x114>
 80015f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80015f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <ETH_SetMACConfig+0x230>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	430b      	orrs	r3, r1
 8001614:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800161c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4b3a      	ldr	r3, [pc, #232]	@ (8001718 <ETH_SetMACConfig+0x234>)
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	68f9      	ldr	r1, [r7, #12]
 8001636:	430b      	orrs	r3, r1
 8001638:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001640:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001646:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800164e:	2a00      	cmp	r2, #0
 8001650:	d101      	bne.n	8001656 <ETH_SetMACConfig+0x172>
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	e000      	b.n	8001658 <ETH_SetMACConfig+0x174>
 8001656:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001658:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800166a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	430b      	orrs	r3, r1
 8001678:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001680:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001688:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001696:	f023 0103 	bic.w	r1, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80016ae:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d101      	bne.n	80016d2 <ETH_SetMACConfig+0x1ee>
 80016ce:	2240      	movs	r2, #64	@ 0x40
 80016d0:	e000      	b.n	80016d4 <ETH_SetMACConfig+0x1f0>
 80016d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80016d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80016dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80016e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80016e8:	4313      	orrs	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80016f4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	430a      	orrs	r2, r1
 8001700:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	00048083 	.word	0x00048083
 8001714:	c0f88000 	.word	0xc0f88000
 8001718:	fffffef0 	.word	0xfffffef0

0800171c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <ETH_SetDMAConfig+0xf8>)
 8001732:	4013      	ands	r3, r2
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	6811      	ldr	r1, [r2, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001742:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	791b      	ldrb	r3, [r3, #4]
 8001748:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800174e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	7b1b      	ldrb	r3, [r3, #12]
 8001754:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <ETH_SetDMAConfig+0xfc>)
 8001766:	4013      	ands	r3, r2
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	430b      	orrs	r3, r1
 8001770:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001774:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	7b5b      	ldrb	r3, [r3, #13]
 800177a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001780:	4313      	orrs	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800178c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <ETH_SetDMAConfig+0x100>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	430b      	orrs	r3, r1
 800179c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017a0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	7d1b      	ldrb	r3, [r3, #20]
 80017ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80017ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7f5b      	ldrb	r3, [r3, #29]
 80017b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <ETH_SetDMAConfig+0x104>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017d6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	7f1b      	ldrb	r3, [r3, #28]
 80017de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <ETH_SetDMAConfig+0x108>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	430b      	orrs	r3, r1
 8001800:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001804:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	ffff87fd 	.word	0xffff87fd
 8001818:	ffff2ffe 	.word	0xffff2ffe
 800181c:	fffec000 	.word	0xfffec000
 8001820:	ffc0efef 	.word	0xffc0efef
 8001824:	7fc0ffff 	.word	0x7fc0ffff

08001828 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a4      	sub	sp, #144	@ 0x90
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001836:	2300      	movs	r3, #0
 8001838:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001870:	2300      	movs	r3, #0
 8001872:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001880:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001884:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001890:	2301      	movs	r3, #1
 8001892:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80018a2:	2300      	movs	r3, #0
 80018a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80018aa:	2300      	movs	r3, #0
 80018ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80018ba:	2301      	movs	r3, #1
 80018bc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80018c0:	2320      	movs	r3, #32
 80018c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80018d2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018dc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001902:	2300      	movs	r3, #0
 8001904:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800190c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fde6 	bl	80014e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001918:	2301      	movs	r3, #1
 800191a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800191c:	2301      	movs	r3, #1
 800191e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001932:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001936:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800193c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001940:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001948:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fee1 	bl	800171c <ETH_SetDMAConfig>
}
 800195a:	bf00      	nop
 800195c:	3790      	adds	r7, #144	@ 0x90
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e01d      	b.n	80019ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68d9      	ldr	r1, [r3, #12]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	3206      	adds	r2, #6
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d9de      	bls.n	8001970 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c0:	461a      	mov	r2, r3
 80019c2:	2303      	movs	r3, #3
 80019c4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019d4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019e4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e023      	b.n	8001a4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6919      	ldr	r1, [r3, #16]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	440b      	add	r3, r1
 8001a12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	3212      	adds	r2, #18
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d9d8      	bls.n	8001a02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a76:	461a      	mov	r2, r3
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a8a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001abe:	4b89      	ldr	r3, [pc, #548]	@ (8001ce4 <HAL_GPIO_Init+0x234>)
 8001ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ac2:	e194      	b.n	8001dee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8186 	beq.w	8001de8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_Init+0x44>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d130      	bne.n	8001b56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	091b      	lsrs	r3, r3, #4
 8001b40:	f003 0201 	and.w	r2, r3, #1
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d017      	beq.n	8001b92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d123      	bne.n	8001be6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	08da      	lsrs	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3208      	adds	r2, #8
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0203 	and.w	r2, r3, #3
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80e0 	beq.w	8001de8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce8 <HAL_GPIO_Init+0x238>)
 8001c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ce8 <HAL_GPIO_Init+0x238>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <HAL_GPIO_Init+0x238>)
 8001c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a29      	ldr	r2, [pc, #164]	@ (8001cec <HAL_GPIO_Init+0x23c>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a20      	ldr	r2, [pc, #128]	@ (8001cf0 <HAL_GPIO_Init+0x240>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d052      	beq.n	8001d18 <HAL_GPIO_Init+0x268>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf4 <HAL_GPIO_Init+0x244>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d031      	beq.n	8001cde <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf8 <HAL_GPIO_Init+0x248>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d02b      	beq.n	8001cda <HAL_GPIO_Init+0x22a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <HAL_GPIO_Init+0x24c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d025      	beq.n	8001cd6 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <HAL_GPIO_Init+0x250>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <HAL_GPIO_Init+0x254>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <HAL_GPIO_Init+0x258>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x21a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_GPIO_Init+0x25c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x216>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <HAL_GPIO_Init+0x260>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_GPIO_Init+0x264>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x20e>
 8001cba:	2309      	movs	r3, #9
 8001cbc:	e02d      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	e02b      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	e029      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e027      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e025      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cce:	2305      	movs	r3, #5
 8001cd0:	e023      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	e021      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e01f      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e01d      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01b      	b.n	8001d1a <HAL_GPIO_Init+0x26a>
 8001ce2:	bf00      	nop
 8001ce4:	58000080 	.word	0x58000080
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	58000400 	.word	0x58000400
 8001cf0:	58020000 	.word	0x58020000
 8001cf4:	58020400 	.word	0x58020400
 8001cf8:	58020800 	.word	0x58020800
 8001cfc:	58020c00 	.word	0x58020c00
 8001d00:	58021000 	.word	0x58021000
 8001d04:	58021400 	.word	0x58021400
 8001d08:	58021800 	.word	0x58021800
 8001d0c:	58021c00 	.word	0x58021c00
 8001d10:	58022000 	.word	0x58022000
 8001d14:	58022400 	.word	0x58022400
 8001d18:	2300      	movs	r3, #0
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2a:	4938      	ldr	r1, [pc, #224]	@ (8001e0c <HAL_GPIO_Init+0x35c>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f47f ae63 	bne.w	8001ac4 <HAL_GPIO_Init+0x14>
  }
}
 8001dfe:	bf00      	nop
 8001e00:	bf00      	nop
 8001e02:	3724      	adds	r7, #36	@ 0x24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	58000400 	.word	0x58000400

08001e10 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e18:	4a08      	ldr	r2, [pc, #32]	@ (8001e3c <HAL_HSEM_FastTake+0x2c>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3320      	adds	r3, #32
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_HSEM_FastTake+0x30>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58026400 	.word	0x58026400
 8001e40:	80000300 	.word	0x80000300

08001e44 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001e4e:	4906      	ldr	r1, [pc, #24]	@ (8001e68 <HAL_HSEM_Release+0x24>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	58026400 	.word	0x58026400

08001e6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0fe      	b.n	800207c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe ff38 	bl	8000d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f004 f8db 	bl	8006060 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7c1a      	ldrb	r2, [r3, #16]
 8001eb2:	f88d 2000 	strb.w	r2, [sp]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eba:	f004 f85f 	bl	8005f7c <USB_CoreInit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0d5      	b.n	800207c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 f8d3 	bl	8006082 <USB_SetCurrentMode>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0c6      	b.n	800207c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e04a      	b.n	8001f8a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3315      	adds	r3, #21
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	3314      	adds	r3, #20
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	b298      	uxth	r0, r3
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	332e      	adds	r3, #46	@ 0x2e
 8001f30:	4602      	mov	r2, r0
 8001f32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3318      	adds	r3, #24
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	331c      	adds	r3, #28
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	3320      	adds	r3, #32
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3324      	adds	r3, #36	@ 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	3301      	adds	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	791b      	ldrb	r3, [r3, #4]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d3af      	bcc.n	8001ef4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e044      	b.n	8002024 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	791b      	ldrb	r3, [r3, #4]
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3b5      	bcc.n	8001f9a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7c1a      	ldrb	r2, [r3, #16]
 8002036:	f88d 2000 	strb.w	r2, [sp]
 800203a:	3304      	adds	r3, #4
 800203c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203e:	f004 f86d 	bl	800611c <USB_DevInit>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e013      	b.n	800207c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	7b1b      	ldrb	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f80a 	bl	8002084 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fa28 	bl	80064ca <USB_DevDisconnect>

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	10000003 	.word	0x10000003

080020cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020d4:	4b29      	ldr	r3, [pc, #164]	@ (800217c <HAL_PWREx_ConfigSupply+0xb0>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d00a      	beq.n	80020f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020e0:	4b26      	ldr	r3, [pc, #152]	@ (800217c <HAL_PWREx_ConfigSupply+0xb0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e040      	b.n	8002174 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e03e      	b.n	8002174 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020f6:	4b21      	ldr	r3, [pc, #132]	@ (800217c <HAL_PWREx_ConfigSupply+0xb0>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80020fe:	491f      	ldr	r1, [pc, #124]	@ (800217c <HAL_PWREx_ConfigSupply+0xb0>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002106:	f7fe ff6b 	bl	8000fe0 <HAL_GetTick>
 800210a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800210c:	e009      	b.n	8002122 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800210e:	f7fe ff67 	bl	8000fe0 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800211c:	d901      	bls.n	8002122 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e028      	b.n	8002174 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_PWREx_ConfigSupply+0xb0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800212a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800212e:	d1ee      	bne.n	800210e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b1e      	cmp	r3, #30
 8002134:	d008      	beq.n	8002148 <HAL_PWREx_ConfigSupply+0x7c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b2e      	cmp	r3, #46	@ 0x2e
 800213a:	d005      	beq.n	8002148 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b1d      	cmp	r3, #29
 8002140:	d002      	beq.n	8002148 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b2d      	cmp	r3, #45	@ 0x2d
 8002146:	d114      	bne.n	8002172 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002148:	f7fe ff4a 	bl	8000fe0 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800214e:	e009      	b.n	8002164 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002150:	f7fe ff46 	bl	8000fe0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800215e:	d901      	bls.n	8002164 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e007      	b.n	8002174 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002164:	4b05      	ldr	r3, [pc, #20]	@ (800217c <HAL_PWREx_ConfigSupply+0xb0>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002170:	d1ee      	bne.n	8002150 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	58024800 	.word	0x58024800

08002180 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58024800 	.word	0x58024800

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	@ 0x30
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	f000 bc48 	b.w	8002a44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8088 	beq.w	80022d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	4b99      	ldr	r3, [pc, #612]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021cc:	4b96      	ldr	r3, [pc, #600]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d007      	beq.n	80021e8 <HAL_RCC_OscConfig+0x48>
 80021d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021da:	2b18      	cmp	r3, #24
 80021dc:	d111      	bne.n	8002202 <HAL_RCC_OscConfig+0x62>
 80021de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d06d      	beq.n	80022d0 <HAL_RCC_OscConfig+0x130>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d169      	bne.n	80022d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f000 bc21 	b.w	8002a44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x7a>
 800220c:	4b86      	ldr	r3, [pc, #536]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a85      	ldr	r2, [pc, #532]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e02e      	b.n	8002278 <HAL_RCC_OscConfig+0xd8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x9c>
 8002222:	4b81      	ldr	r3, [pc, #516]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a80      	ldr	r2, [pc, #512]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002228:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b7e      	ldr	r3, [pc, #504]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7d      	ldr	r2, [pc, #500]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0xd8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0xc0>
 8002246:	4b78      	ldr	r3, [pc, #480]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b75      	ldr	r3, [pc, #468]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a74      	ldr	r2, [pc, #464]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e00b      	b.n	8002278 <HAL_RCC_OscConfig+0xd8>
 8002260:	4b71      	ldr	r3, [pc, #452]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a70      	ldr	r2, [pc, #448]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	4b6e      	ldr	r3, [pc, #440]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6d      	ldr	r2, [pc, #436]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe feae 	bl	8000fe0 <HAL_GetTick>
 8002284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe feaa 	bl	8000fe0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e3d4      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800229a:	4b63      	ldr	r3, [pc, #396]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0xe8>
 80022a6:	e014      	b.n	80022d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fe9a 	bl	8000fe0 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fe96 	bl	8000fe0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e3c0      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022c2:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x110>
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 80ca 	beq.w	8002474 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e0:	4b51      	ldr	r3, [pc, #324]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80022ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <HAL_RCC_OscConfig+0x166>
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	2b18      	cmp	r3, #24
 80022fa:	d156      	bne.n	80023aa <HAL_RCC_OscConfig+0x20a>
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d151      	bne.n	80023aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002306:	4b48      	ldr	r3, [pc, #288]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x17e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e392      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800231e:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0219 	bic.w	r2, r3, #25
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	493f      	ldr	r1, [pc, #252]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fe56 	bl	8000fe0 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe fe52 	bl	8000fe0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e37c      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	f7fe fe73 	bl	8001040 <HAL_GetREVID>
 800235a:	4603      	mov	r3, r0
 800235c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002360:	4293      	cmp	r3, r2
 8002362:	d817      	bhi.n	8002394 <HAL_RCC_OscConfig+0x1f4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b40      	cmp	r3, #64	@ 0x40
 800236a:	d108      	bne.n	800237e <HAL_RCC_OscConfig+0x1de>
 800236c:	4b2e      	ldr	r3, [pc, #184]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002374:	4a2c      	ldr	r2, [pc, #176]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800237a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237c:	e07a      	b.n	8002474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	4b2a      	ldr	r3, [pc, #168]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	031b      	lsls	r3, r3, #12
 800238c:	4926      	ldr	r1, [pc, #152]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002392:	e06f      	b.n	8002474 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b24      	ldr	r3, [pc, #144]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	4921      	ldr	r1, [pc, #132]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a8:	e064      	b.n	8002474 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d047      	beq.n	8002442 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 0219 	bic.w	r2, r3, #25
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	491a      	ldr	r1, [pc, #104]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe0c 	bl	8000fe0 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023cc:	f7fe fe08 	bl	8000fe0 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e332      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	f7fe fe29 	bl	8001040 <HAL_GetREVID>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d819      	bhi.n	800242c <HAL_RCC_OscConfig+0x28c>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b40      	cmp	r3, #64	@ 0x40
 80023fe:	d108      	bne.n	8002412 <HAL_RCC_OscConfig+0x272>
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002408:	4a07      	ldr	r2, [pc, #28]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 800240a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800240e:	6053      	str	r3, [r2, #4]
 8002410:	e030      	b.n	8002474 <HAL_RCC_OscConfig+0x2d4>
 8002412:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	031b      	lsls	r3, r3, #12
 8002420:	4901      	ldr	r1, [pc, #4]	@ (8002428 <HAL_RCC_OscConfig+0x288>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
 8002426:	e025      	b.n	8002474 <HAL_RCC_OscConfig+0x2d4>
 8002428:	58024400 	.word	0x58024400
 800242c:	4b9a      	ldr	r3, [pc, #616]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	4997      	ldr	r1, [pc, #604]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
 8002440:	e018      	b.n	8002474 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002442:	4b95      	ldr	r3, [pc, #596]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a94      	ldr	r2, [pc, #592]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fdc7 	bl	8000fe0 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7fe fdc3 	bl	8000fe0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e2ed      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002468:	4b8b      	ldr	r3, [pc, #556]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a9 	beq.w	80025d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002482:	4b85      	ldr	r3, [pc, #532]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800248a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800248c:	4b82      	ldr	r3, [pc, #520]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b08      	cmp	r3, #8
 8002496:	d007      	beq.n	80024a8 <HAL_RCC_OscConfig+0x308>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b18      	cmp	r3, #24
 800249c:	d13a      	bne.n	8002514 <HAL_RCC_OscConfig+0x374>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d135      	bne.n	8002514 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x320>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b80      	cmp	r3, #128	@ 0x80
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e2c1      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024c0:	f7fe fdbe 	bl	8001040 <HAL_GetREVID>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d817      	bhi.n	80024fe <HAL_RCC_OscConfig+0x35e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_OscConfig+0x348>
 80024d6:	4b70      	ldr	r3, [pc, #448]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024de:	4a6e      	ldr	r2, [pc, #440]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024e6:	e075      	b.n	80025d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	069b      	lsls	r3, r3, #26
 80024f6:	4968      	ldr	r1, [pc, #416]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024fc:	e06a      	b.n	80025d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024fe:	4b66      	ldr	r3, [pc, #408]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	061b      	lsls	r3, r3, #24
 800250c:	4962      	ldr	r1, [pc, #392]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800250e:	4313      	orrs	r3, r2
 8002510:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002512:	e05f      	b.n	80025d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d042      	beq.n	80025a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800251c:	4b5e      	ldr	r3, [pc, #376]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a5d      	ldr	r2, [pc, #372]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fd5a 	bl	8000fe0 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002530:	f7fe fd56 	bl	8000fe0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e280      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002542:	4b55      	ldr	r3, [pc, #340]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800254e:	f7fe fd77 	bl	8001040 <HAL_GetREVID>
 8002552:	4603      	mov	r3, r0
 8002554:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002558:	4293      	cmp	r3, r2
 800255a:	d817      	bhi.n	800258c <HAL_RCC_OscConfig+0x3ec>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	2b20      	cmp	r3, #32
 8002562:	d108      	bne.n	8002576 <HAL_RCC_OscConfig+0x3d6>
 8002564:	4b4c      	ldr	r3, [pc, #304]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800256c:	4a4a      	ldr	r2, [pc, #296]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002572:	6053      	str	r3, [r2, #4]
 8002574:	e02e      	b.n	80025d4 <HAL_RCC_OscConfig+0x434>
 8002576:	4b48      	ldr	r3, [pc, #288]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	4944      	ldr	r1, [pc, #272]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
 800258a:	e023      	b.n	80025d4 <HAL_RCC_OscConfig+0x434>
 800258c:	4b42      	ldr	r3, [pc, #264]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	493f      	ldr	r1, [pc, #252]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800259c:	4313      	orrs	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
 80025a0:	e018      	b.n	80025d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fd17 	bl	8000fe0 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025b6:	f7fe fd13 	bl	8000fe0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e23d      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025c8:	4b33      	ldr	r3, [pc, #204]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d036      	beq.n	800264e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d019      	beq.n	800261c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fcf4 	bl	8000fe0 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe fcf0 	bl	8000fe0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e21a      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800260e:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x45c>
 800261a:	e018      	b.n	800264e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261c:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fcda 	bl	8000fe0 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fcd6 	bl	8000fe0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e200      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d039      	beq.n	80026ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01c      	beq.n	800269c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002662:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a0c      	ldr	r2, [pc, #48]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800266c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800266e:	f7fe fcb7 	bl	8000fe0 <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002676:	f7fe fcb3 	bl	8000fe0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e1dd      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x4d6>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x52e>
 8002696:	bf00      	nop
 8002698:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800269c:	4b9b      	ldr	r3, [pc, #620]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a9a      	ldr	r2, [pc, #616]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80026a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026a8:	f7fe fc9a 	bl	8000fe0 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b0:	f7fe fc96 	bl	8000fe0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1c0      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026c2:	4b92      	ldr	r3, [pc, #584]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8081 	beq.w	80027de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002910 <HAL_RCC_OscConfig+0x770>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a8b      	ldr	r2, [pc, #556]	@ (8002910 <HAL_RCC_OscConfig+0x770>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fc7a 	bl	8000fe0 <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fc76 	bl	8000fe0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	@ 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1a0      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002702:	4b83      	ldr	r3, [pc, #524]	@ (8002910 <HAL_RCC_OscConfig+0x770>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_RCC_OscConfig+0x584>
 8002716:	4b7d      	ldr	r3, [pc, #500]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271a:	4a7c      	ldr	r2, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	@ 0x70
 8002722:	e02d      	b.n	8002780 <HAL_RCC_OscConfig+0x5e0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x5a6>
 800272c:	4b77      	ldr	r3, [pc, #476]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a76      	ldr	r2, [pc, #472]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	4b74      	ldr	r3, [pc, #464]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a73      	ldr	r2, [pc, #460]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x5e0>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x5c8>
 800274e:	4b6f      	ldr	r3, [pc, #444]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a6e      	ldr	r2, [pc, #440]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	4b6c      	ldr	r3, [pc, #432]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a6b      	ldr	r2, [pc, #428]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x5e0>
 8002768:	4b68      	ldr	r3, [pc, #416]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a67      	ldr	r2, [pc, #412]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
 8002774:	4b65      	ldr	r3, [pc, #404]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a64      	ldr	r2, [pc, #400]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fc2a 	bl	8000fe0 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fc26 	bl	8000fe0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e14e      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a6:	4b59      	ldr	r3, [pc, #356]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCC_OscConfig+0x5f0>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fc14 	bl	8000fe0 <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe fc10 	bl	8000fe0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e138      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027d2:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ee      	bne.n	80027bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 812d 	beq.w	8002a42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027e8:	4b48      	ldr	r3, [pc, #288]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027f0:	2b18      	cmp	r3, #24
 80027f2:	f000 80bd 	beq.w	8002970 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	f040 809e 	bne.w	800293c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	4b42      	ldr	r3, [pc, #264]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a41      	ldr	r2, [pc, #260]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800280a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fbe8 	bl	8000fe0 <HAL_GetTick>
 8002810:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fbe4 	bl	8000fe0 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e10e      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002826:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002832:	4b36      	ldr	r3, [pc, #216]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002834:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x774>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002842:	0112      	lsls	r2, r2, #4
 8002844:	430a      	orrs	r2, r1
 8002846:	4931      	ldr	r1, [pc, #196]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002848:	4313      	orrs	r3, r2
 800284a:	628b      	str	r3, [r1, #40]	@ 0x28
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002850:	3b01      	subs	r3, #1
 8002852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285a:	3b01      	subs	r3, #1
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	b29b      	uxth	r3, r3
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
 800286a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	3b01      	subs	r3, #1
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800287c:	4923      	ldr	r1, [pc, #140]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002882:	4b22      	ldr	r3, [pc, #136]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	4a21      	ldr	r2, [pc, #132]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002888:	f023 0301 	bic.w	r3, r3, #1
 800288c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800288e:	4b1f      	ldr	r3, [pc, #124]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 8002890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002892:	4b21      	ldr	r3, [pc, #132]	@ (8002918 <HAL_RCC_OscConfig+0x778>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800289a:	00d2      	lsls	r2, r2, #3
 800289c:	491b      	ldr	r1, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	f023 020c 	bic.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	4917      	ldr	r1, [pc, #92]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028b4:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	f023 0202 	bic.w	r2, r3, #2
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	4912      	ldr	r1, [pc, #72]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028c6:	4b11      	ldr	r3, [pc, #68]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	4a10      	ldr	r2, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d2:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028de:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	4a07      	ldr	r2, [pc, #28]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <HAL_RCC_OscConfig+0x76c>)
 80028fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fb6d 	bl	8000fe0 <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002908:	e011      	b.n	800292e <HAL_RCC_OscConfig+0x78e>
 800290a:	bf00      	nop
 800290c:	58024400 	.word	0x58024400
 8002910:	58024800 	.word	0x58024800
 8002914:	fffffc0c 	.word	0xfffffc0c
 8002918:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fb60 	bl	8000fe0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e08a      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x77c>
 800293a:	e082      	b.n	8002a42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b43      	ldr	r3, [pc, #268]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a42      	ldr	r2, [pc, #264]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fb4a 	bl	8000fe0 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fb46 	bl	8000fe0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e070      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002962:	4b3a      	ldr	r3, [pc, #232]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x7b0>
 800296e:	e068      	b.n	8002a42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002970:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002976:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	2b01      	cmp	r3, #1
 8002982:	d031      	beq.n	80029e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f003 0203 	and.w	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d12a      	bne.n	80029e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d122      	bne.n	80029e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11a      	bne.n	80029e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	0a5b      	lsrs	r3, r3, #9
 80029b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d111      	bne.n	80029e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	0e1b      	lsrs	r3, r3, #24
 80029da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e02b      	b.n	8002a44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029ec:	4b17      	ldr	r3, [pc, #92]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d01f      	beq.n	8002a42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a0e:	f7fe fae7 	bl	8000fe0 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a14:	bf00      	nop
 8002a16:	f7fe fae3 	bl	8000fe0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d0f9      	beq.n	8002a16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a26:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <HAL_RCC_OscConfig+0x8b0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a2e:	00d2      	lsls	r2, r2, #3
 8002a30:	4906      	ldr	r1, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a36:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_RCC_OscConfig+0x8ac>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3730      	adds	r7, #48	@ 0x30
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	ffff0007 	.word	0xffff0007

08002a54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e19c      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b8a      	ldr	r3, [pc, #552]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d910      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b87      	ldr	r3, [pc, #540]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 020f 	bic.w	r2, r3, #15
 8002a7e:	4985      	ldr	r1, [pc, #532]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b83      	ldr	r3, [pc, #524]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e184      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d010      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d908      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ab4:	4b78      	ldr	r3, [pc, #480]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	4975      	ldr	r1, [pc, #468]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	4b70      	ldr	r3, [pc, #448]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d908      	bls.n	8002af4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ae2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	496a      	ldr	r1, [pc, #424]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d010      	beq.n	8002b22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	4b64      	ldr	r3, [pc, #400]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d908      	bls.n	8002b22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b10:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	495e      	ldr	r1, [pc, #376]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d010      	beq.n	8002b50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	4b59      	ldr	r3, [pc, #356]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d908      	bls.n	8002b50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b3e:	4b56      	ldr	r3, [pc, #344]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	4953      	ldr	r1, [pc, #332]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d010      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	4b4d      	ldr	r3, [pc, #308]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d908      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f023 020f 	bic.w	r2, r3, #15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4947      	ldr	r1, [pc, #284]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d055      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b8a:	4b43      	ldr	r3, [pc, #268]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4940      	ldr	r1, [pc, #256]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d121      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0f6      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bbc:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d115      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0ea      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bd4:	4b30      	ldr	r3, [pc, #192]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d109      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0de      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d6      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf4:	4b28      	ldr	r3, [pc, #160]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f023 0207 	bic.w	r2, r3, #7
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4925      	ldr	r1, [pc, #148]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c06:	f7fe f9eb 	bl	8000fe0 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0e:	f7fe f9e7 	bl	8000fe0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0be      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c24:	4b1c      	ldr	r3, [pc, #112]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d1eb      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d208      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f023 020f 	bic.w	r2, r3, #15
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	490e      	ldr	r1, [pc, #56]	@ (8002c98 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d214      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	4906      	ldr	r1, [pc, #24]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <HAL_RCC_ClockConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e086      	b.n	8002da2 <HAL_RCC_ClockConfig+0x34e>
 8002c94:	52002000 	.word	0x52002000
 8002c98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	4b3f      	ldr	r3, [pc, #252]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d208      	bcs.n	8002cca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	4939      	ldr	r1, [pc, #228]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d208      	bcs.n	8002cf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ce6:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	492e      	ldr	r1, [pc, #184]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d208      	bcs.n	8002d26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d14:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4922      	ldr	r1, [pc, #136]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d208      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d42:	4b1a      	ldr	r3, [pc, #104]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4917      	ldr	r1, [pc, #92]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d54:	f000 f834 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	4912      	ldr	r1, [pc, #72]	@ (8002db0 <HAL_RCC_ClockConfig+0x35c>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <HAL_RCC_ClockConfig+0x358>)
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <HAL_RCC_ClockConfig+0x35c>)
 8002d7c:	5cd3      	ldrb	r3, [r2, r3]
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <HAL_RCC_ClockConfig+0x360>)
 8002d8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <HAL_RCC_ClockConfig+0x364>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_RCC_ClockConfig+0x368>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f8d8 	bl	8000f4c <HAL_InitTick>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	58024400 	.word	0x58024400
 8002db0:	080065fc 	.word	0x080065fc
 8002db4:	24000004 	.word	0x24000004
 8002db8:	24000000 	.word	0x24000000
 8002dbc:	24000008 	.word	0x24000008

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	@ 0x24
 8002dc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc6:	4bb3      	ldr	r3, [pc, #716]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dce:	2b18      	cmp	r3, #24
 8002dd0:	f200 8155 	bhi.w	800307e <HAL_RCC_GetSysClockFreq+0x2be>
 8002dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ddc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002e41 	.word	0x08002e41
 8002de0:	0800307f 	.word	0x0800307f
 8002de4:	0800307f 	.word	0x0800307f
 8002de8:	0800307f 	.word	0x0800307f
 8002dec:	0800307f 	.word	0x0800307f
 8002df0:	0800307f 	.word	0x0800307f
 8002df4:	0800307f 	.word	0x0800307f
 8002df8:	0800307f 	.word	0x0800307f
 8002dfc:	08002e67 	.word	0x08002e67
 8002e00:	0800307f 	.word	0x0800307f
 8002e04:	0800307f 	.word	0x0800307f
 8002e08:	0800307f 	.word	0x0800307f
 8002e0c:	0800307f 	.word	0x0800307f
 8002e10:	0800307f 	.word	0x0800307f
 8002e14:	0800307f 	.word	0x0800307f
 8002e18:	0800307f 	.word	0x0800307f
 8002e1c:	08002e6d 	.word	0x08002e6d
 8002e20:	0800307f 	.word	0x0800307f
 8002e24:	0800307f 	.word	0x0800307f
 8002e28:	0800307f 	.word	0x0800307f
 8002e2c:	0800307f 	.word	0x0800307f
 8002e30:	0800307f 	.word	0x0800307f
 8002e34:	0800307f 	.word	0x0800307f
 8002e38:	0800307f 	.word	0x0800307f
 8002e3c:	08002e73 	.word	0x08002e73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e40:	4b94      	ldr	r3, [pc, #592]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e4c:	4b91      	ldr	r3, [pc, #580]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	08db      	lsrs	r3, r3, #3
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	4a90      	ldr	r2, [pc, #576]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e58:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e5e:	e111      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e60:	4b8d      	ldr	r3, [pc, #564]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e62:	61bb      	str	r3, [r7, #24]
      break;
 8002e64:	e10e      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e66:	4b8d      	ldr	r3, [pc, #564]	@ (800309c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e68:	61bb      	str	r3, [r7, #24]
      break;
 8002e6a:	e10b      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e6e:	61bb      	str	r3, [r7, #24]
      break;
 8002e70:	e108      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e72:	4b88      	ldr	r3, [pc, #544]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e7c:	4b85      	ldr	r3, [pc, #532]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e88:	4b82      	ldr	r3, [pc, #520]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e92:	4b80      	ldr	r3, [pc, #512]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	08db      	lsrs	r3, r3, #3
 8002e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80e1 	beq.w	8003078 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f000 8083 	beq.w	8002fc4 <HAL_RCC_GetSysClockFreq+0x204>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	f200 80a1 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x248>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x114>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d056      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ed2:	e099      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02d      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	08db      	lsrs	r3, r3, #3
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	4a6b      	ldr	r2, [pc, #428]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0a:	4b62      	ldr	r3, [pc, #392]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f3a:	e087      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b51      	ldr	r3, [pc, #324]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f7e:	e065      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b40      	ldr	r3, [pc, #256]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc2:	e043      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80030b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003006:	e021      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	ee07 3a90 	vmov	s15, r3
 800300e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003012:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302a:	ed97 6a02 	vldr	s12, [r7, #8]
 800302e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800303e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800304a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	0a5b      	lsrs	r3, r3, #9
 8003052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003056:	3301      	adds	r3, #1
 8003058:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	ee07 3a90 	vmov	s15, r3
 8003060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003064:	edd7 6a07 	vldr	s13, [r7, #28]
 8003068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003070:	ee17 3a90 	vmov	r3, s15
 8003074:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	61bb      	str	r3, [r7, #24]
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800307e:	4b07      	ldr	r3, [pc, #28]	@ (800309c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003080:	61bb      	str	r3, [r7, #24]
      break;
 8003082:	bf00      	nop
  }

  return sysclockfreq;
 8003084:	69bb      	ldr	r3, [r7, #24]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	@ 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	58024400 	.word	0x58024400
 8003098:	03d09000 	.word	0x03d09000
 800309c:	003d0900 	.word	0x003d0900
 80030a0:	007a1200 	.word	0x007a1200
 80030a4:	46000000 	.word	0x46000000
 80030a8:	4c742400 	.word	0x4c742400
 80030ac:	4a742400 	.word	0x4a742400
 80030b0:	4af42400 	.word	0x4af42400

080030b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80030ba:	f7ff fe81 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_RCC_GetHCLKFreq+0x50>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490f      	ldr	r1, [pc, #60]	@ (8003108 <HAL_RCC_GetHCLKFreq+0x54>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_RCC_GetHCLKFreq+0x50>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	4a09      	ldr	r2, [pc, #36]	@ (8003108 <HAL_RCC_GetHCLKFreq+0x54>)
 80030e2:	5cd3      	ldrb	r3, [r2, r3]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a07      	ldr	r2, [pc, #28]	@ (800310c <HAL_RCC_GetHCLKFreq+0x58>)
 80030f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030f2:	4a07      	ldr	r2, [pc, #28]	@ (8003110 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030f8:	4b04      	ldr	r3, [pc, #16]	@ (800310c <HAL_RCC_GetHCLKFreq+0x58>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	58024400 	.word	0x58024400
 8003108:	080065fc 	.word	0x080065fc
 800310c:	24000004 	.word	0x24000004
 8003110:	24000000 	.word	0x24000000

08003114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003118:	f7ff ffcc 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4904      	ldr	r1, [pc, #16]	@ (800313c <HAL_RCC_GetPCLK1Freq+0x28>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	58024400 	.word	0x58024400
 800313c:	080065fc 	.word	0x080065fc

08003140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003144:	f7ff ffb6 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	0a1b      	lsrs	r3, r3, #8
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4904      	ldr	r1, [pc, #16]	@ (8003168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	58024400 	.word	0x58024400
 8003168:	080065fc 	.word	0x080065fc

0800316c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b0ca      	sub	sp, #296	@ 0x128
 8003172:	af00      	add	r7, sp, #0
 8003174:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003190:	2500      	movs	r5, #0
 8003192:	ea54 0305 	orrs.w	r3, r4, r5
 8003196:	d049      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800319e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031a2:	d02f      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031a8:	d828      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031ae:	d01a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031b4:	d822      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031be:	d007      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031c0:	e01c      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c2:	4bb8      	ldr	r3, [pc, #736]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	4ab7      	ldr	r2, [pc, #732]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031ce:	e01a      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	3308      	adds	r3, #8
 80031d6:	2102      	movs	r1, #2
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fc8f 	bl	8004afc <RCCEx_PLL2_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031e4:	e00f      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	3328      	adds	r3, #40	@ 0x28
 80031ec:	2102      	movs	r1, #2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f001 fd36 	bl	8004c60 <RCCEx_PLL3_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031fa:	e004      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003202:	e000      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10a      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800320e:	4ba5      	ldr	r3, [pc, #660]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003212:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800321c:	4aa1      	ldr	r2, [pc, #644]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800321e:	430b      	orrs	r3, r1
 8003220:	6513      	str	r3, [r2, #80]	@ 0x50
 8003222:	e003      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003228:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800322c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003238:	f04f 0900 	mov.w	r9, #0
 800323c:	ea58 0309 	orrs.w	r3, r8, r9
 8003240:	d047      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003248:	2b04      	cmp	r3, #4
 800324a:	d82a      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800324c:	a201      	add	r2, pc, #4	@ (adr r2, 8003254 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003269 	.word	0x08003269
 8003258:	08003277 	.word	0x08003277
 800325c:	0800328d 	.word	0x0800328d
 8003260:	080032ab 	.word	0x080032ab
 8003264:	080032ab 	.word	0x080032ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b8e      	ldr	r3, [pc, #568]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4a8d      	ldr	r2, [pc, #564]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003274:	e01a      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	3308      	adds	r3, #8
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fc3c 	bl	8004afc <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800328a:	e00f      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003290:	3328      	adds	r3, #40	@ 0x28
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fce3 	bl	8004c60 <RCCEx_PLL3_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032a0:	e004      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032b4:	4b7b      	ldr	r3, [pc, #492]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b8:	f023 0107 	bic.w	r1, r3, #7
 80032bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	4a78      	ldr	r2, [pc, #480]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80032c8:	e003      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80032de:	f04f 0b00 	mov.w	fp, #0
 80032e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80032e6:	d04c      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80032e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f2:	d030      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f8:	d829      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80032fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80032fc:	d02d      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003300:	d825      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	d018      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003306:	2b80      	cmp	r3, #128	@ 0x80
 8003308:	d821      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800330e:	2b40      	cmp	r3, #64	@ 0x40
 8003310:	d007      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003312:	e01c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003314:	4b63      	ldr	r3, [pc, #396]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	4a62      	ldr	r2, [pc, #392]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800331e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003320:	e01c      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003326:	3308      	adds	r3, #8
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f001 fbe6 	bl	8004afc <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003336:	e011      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333c:	3328      	adds	r3, #40	@ 0x28
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fc8d 	bl	8004c60 <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800335a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003364:	4b4f      	ldr	r3, [pc, #316]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003368:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003372:	4a4c      	ldr	r2, [pc, #304]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003374:	430b      	orrs	r3, r1
 8003376:	6513      	str	r3, [r2, #80]	@ 0x50
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800337e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800338e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003392:	2300      	movs	r3, #0
 8003394:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003398:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800339c:	460b      	mov	r3, r1
 800339e:	4313      	orrs	r3, r2
 80033a0:	d053      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033ae:	d035      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80033b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033b4:	d82e      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033ba:	d031      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80033bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033c0:	d828      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c6:	d01a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033cc:	d822      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80033d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d6:	d007      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80033d8:	e01c      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033da:	4b32      	ldr	r3, [pc, #200]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	4a31      	ldr	r2, [pc, #196]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e6:	e01c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	3308      	adds	r3, #8
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f001 fb83 	bl	8004afc <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033fc:	e011      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	3328      	adds	r3, #40	@ 0x28
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f001 fc2a 	bl	8004c60 <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003412:	e006      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341a:	e002      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800342a:	4b1e      	ldr	r3, [pc, #120]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800343a:	4a1a      	ldr	r2, [pc, #104]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343c:	430b      	orrs	r3, r1
 800343e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003440:	e003      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003456:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003460:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d056      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800346a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003476:	d038      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003478:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800347c:	d831      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800347e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003482:	d034      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003484:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003488:	d82b      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800348a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800348e:	d01d      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003494:	d825      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800349a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80034a0:	e01f      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a8:	4ba2      	ldr	r3, [pc, #648]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	4aa1      	ldr	r2, [pc, #644]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b4:	e01c      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ba:	3308      	adds	r3, #8
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fb1c 	bl	8004afc <RCCEx_PLL2_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034ca:	e011      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d0:	3328      	adds	r3, #40	@ 0x28
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 fbc3 	bl	8004c60 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e0:	e006      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80034ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003504:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003508:	4a8a      	ldr	r2, [pc, #552]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350a:	430b      	orrs	r3, r1
 800350c:	6593      	str	r3, [r2, #88]	@ 0x58
 800350e:	e003      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800352e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003532:	460b      	mov	r3, r1
 8003534:	4313      	orrs	r3, r2
 8003536:	d03a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	2b30      	cmp	r3, #48	@ 0x30
 8003540:	d01f      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003542:	2b30      	cmp	r3, #48	@ 0x30
 8003544:	d819      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003546:	2b20      	cmp	r3, #32
 8003548:	d00c      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800354a:	2b20      	cmp	r3, #32
 800354c:	d815      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d019      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003552:	2b10      	cmp	r3, #16
 8003554:	d111      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4b77      	ldr	r3, [pc, #476]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	4a76      	ldr	r2, [pc, #472]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003560:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3308      	adds	r3, #8
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fac5 	bl	8004afc <RCCEx_PLL2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003580:	e002      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003590:	4b68      	ldr	r3, [pc, #416]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003594:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	4a65      	ldr	r2, [pc, #404]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a0:	430b      	orrs	r3, r1
 80035a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035a4:	e003      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80035c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	d051      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035d8:	d035      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80035da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035de:	d82e      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80035e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035e4:	d031      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80035e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80035ea:	d828      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f0:	d01a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f6:	d822      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003600:	d007      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003602:	e01c      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003610:	e01c      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	3308      	adds	r3, #8
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fa6e 	bl	8004afc <RCCEx_PLL2_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003626:	e011      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	3328      	adds	r3, #40	@ 0x28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fb15 	bl	8004c60 <RCCEx_PLL3_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800363c:	e006      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003644:	e002      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003646:	bf00      	nop
 8003648:	e000      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800364a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003654:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003658:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003662:	4a34      	ldr	r2, [pc, #208]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003664:	430b      	orrs	r3, r1
 8003666:	6513      	str	r3, [r2, #80]	@ 0x50
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800367e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003688:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d056      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800369c:	d033      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800369e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036a2:	d82c      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036a8:	d02f      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80036aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036ae:	d826      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036b4:	d02b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80036b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036ba:	d820      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036c0:	d012      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80036c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036c6:	d81a      	bhi.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d0:	d115      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	3308      	adds	r3, #8
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 fa0e 	bl	8004afc <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036e6:	e015      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	3328      	adds	r3, #40	@ 0x28
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fab5 	bl	8004c60 <RCCEx_PLL3_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036fc:	e00a      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003706:	bf00      	nop
 8003708:	e004      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800370a:	bf00      	nop
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372a:	4a02      	ldr	r2, [pc, #8]	@ (8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372c:	430b      	orrs	r3, r1
 800372e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003730:	e006      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003732:	bf00      	nop
 8003734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800374c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003750:	2300      	movs	r3, #0
 8003752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003756:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800375a:	460b      	mov	r3, r1
 800375c:	4313      	orrs	r3, r2
 800375e:	d055      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376c:	d033      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800376e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003772:	d82c      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d02f      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377e:	d826      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003780:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003784:	d02b      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003786:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800378a:	d820      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800378c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003790:	d012      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003796:	d81a      	bhi.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d022      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800379c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a0:	d115      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	3308      	adds	r3, #8
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 f9a6 	bl	8004afc <RCCEx_PLL2_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037b6:	e015      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	3328      	adds	r3, #40	@ 0x28
 80037be:	2101      	movs	r1, #1
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 fa4d 	bl	8004c60 <RCCEx_PLL3_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037cc:	e00a      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d4:	e006      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80037d6:	bf00      	nop
 80037d8:	e004      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80037da:	bf00      	nop
 80037dc:	e002      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80037e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80037ec:	4ba3      	ldr	r3, [pc, #652]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037fc:	4a9f      	ldr	r2, [pc, #636]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	6593      	str	r3, [r2, #88]	@ 0x58
 8003802:	e003      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003826:	460b      	mov	r3, r1
 8003828:	4313      	orrs	r3, r2
 800382a:	d037      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003836:	d00e      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800383c:	d816      	bhi.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003846:	d111      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003848:	4b8c      	ldr	r3, [pc, #560]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384c:	4a8b      	ldr	r2, [pc, #556]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003854:	e00f      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	3308      	adds	r3, #8
 800385c:	2101      	movs	r1, #1
 800385e:	4618      	mov	r0, r3
 8003860:	f001 f94c 	bl	8004afc <RCCEx_PLL2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800386a:	e004      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003872:	e000      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800387e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003882:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a7b      	ldr	r2, [pc, #492]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388e:	430b      	orrs	r3, r1
 8003890:	6513      	str	r3, [r2, #80]	@ 0x50
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003898:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80038a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80038b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4313      	orrs	r3, r2
 80038ba:	d039      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d81c      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80038c6:	a201      	add	r2, pc, #4	@ (adr r2, 80038cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	08003909 	.word	0x08003909
 80038d0:	080038dd 	.word	0x080038dd
 80038d4:	080038eb 	.word	0x080038eb
 80038d8:	08003909 	.word	0x08003909
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038dc:	4b67      	ldr	r3, [pc, #412]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	4a66      	ldr	r2, [pc, #408]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038e8:	e00f      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	3308      	adds	r3, #8
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 f902 	bl	8004afc <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038fe:	e004      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003912:	4b5a      	ldr	r3, [pc, #360]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	f023 0103 	bic.w	r1, r3, #3
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003922:	430b      	orrs	r3, r1
 8003924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003926:	e003      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800393c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003946:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800394a:	460b      	mov	r3, r1
 800394c:	4313      	orrs	r3, r2
 800394e:	f000 809f 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003952:	4b4b      	ldr	r3, [pc, #300]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a4a      	ldr	r2, [pc, #296]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800395c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800395e:	f7fd fb3f 	bl	8000fe0 <HAL_GetTick>
 8003962:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003966:	e00b      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003968:	f7fd fb3a 	bl	8000fe0 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b64      	cmp	r3, #100	@ 0x64
 8003976:	d903      	bls.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397e:	e005      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003980:	4b3f      	ldr	r3, [pc, #252]	@ (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ed      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	2b00      	cmp	r3, #0
 8003992:	d179      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003994:	4b39      	ldr	r3, [pc, #228]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003996:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039a0:	4053      	eors	r3, r2
 80039a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d015      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039aa:	4b34      	ldr	r3, [pc, #208]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b6:	4b31      	ldr	r3, [pc, #196]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ba:	4a30      	ldr	r2, [pc, #192]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c2:	4b2e      	ldr	r3, [pc, #184]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039ce:	4a2b      	ldr	r2, [pc, #172]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e2:	d118      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fd fafc 	bl	8000fe0 <HAL_GetTick>
 80039e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039ec:	e00d      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fd faf7 	bl	8000fe0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80039f8:	1ad2      	subs	r2, r2, r3
 80039fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d903      	bls.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003a08:	e005      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0eb      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d129      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a2e:	d10e      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003a30:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a40:	091a      	lsrs	r2, r3, #4
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	4a0d      	ldr	r2, [pc, #52]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6113      	str	r3, [r2, #16]
 8003a4c:	e005      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a58:	6113      	str	r3, [r2, #16]
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6a:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a70:	e00e      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003a7a:	e009      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	58024800 	.word	0x58024800
 8003a84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 0301 	and.w	r3, r2, #1
 8003a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f000 8089 	beq.w	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ab8:	2b28      	cmp	r3, #40	@ 0x28
 8003aba:	d86b      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003abc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003b9d 	.word	0x08003b9d
 8003ac8:	08003b95 	.word	0x08003b95
 8003acc:	08003b95 	.word	0x08003b95
 8003ad0:	08003b95 	.word	0x08003b95
 8003ad4:	08003b95 	.word	0x08003b95
 8003ad8:	08003b95 	.word	0x08003b95
 8003adc:	08003b95 	.word	0x08003b95
 8003ae0:	08003b95 	.word	0x08003b95
 8003ae4:	08003b69 	.word	0x08003b69
 8003ae8:	08003b95 	.word	0x08003b95
 8003aec:	08003b95 	.word	0x08003b95
 8003af0:	08003b95 	.word	0x08003b95
 8003af4:	08003b95 	.word	0x08003b95
 8003af8:	08003b95 	.word	0x08003b95
 8003afc:	08003b95 	.word	0x08003b95
 8003b00:	08003b95 	.word	0x08003b95
 8003b04:	08003b7f 	.word	0x08003b7f
 8003b08:	08003b95 	.word	0x08003b95
 8003b0c:	08003b95 	.word	0x08003b95
 8003b10:	08003b95 	.word	0x08003b95
 8003b14:	08003b95 	.word	0x08003b95
 8003b18:	08003b95 	.word	0x08003b95
 8003b1c:	08003b95 	.word	0x08003b95
 8003b20:	08003b95 	.word	0x08003b95
 8003b24:	08003b9d 	.word	0x08003b9d
 8003b28:	08003b95 	.word	0x08003b95
 8003b2c:	08003b95 	.word	0x08003b95
 8003b30:	08003b95 	.word	0x08003b95
 8003b34:	08003b95 	.word	0x08003b95
 8003b38:	08003b95 	.word	0x08003b95
 8003b3c:	08003b95 	.word	0x08003b95
 8003b40:	08003b95 	.word	0x08003b95
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	08003b95 	.word	0x08003b95
 8003b4c:	08003b95 	.word	0x08003b95
 8003b50:	08003b95 	.word	0x08003b95
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003b95 	.word	0x08003b95
 8003b5c:	08003b95 	.word	0x08003b95
 8003b60:	08003b95 	.word	0x08003b95
 8003b64:	08003b9d 	.word	0x08003b9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 ffc3 	bl	8004afc <RCCEx_PLL2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b7c:	e00f      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	3328      	adds	r3, #40	@ 0x28
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f86a 	bl	8004c60 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ba6:	4bbf      	ldr	r3, [pc, #764]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003baa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb4:	4abb      	ldr	r2, [pc, #748]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f002 0302 	and.w	r3, r2, #2
 8003bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003bda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d041      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d824      	bhi.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003c23 	.word	0x08003c23
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c10:	3308      	adds	r3, #8
 8003c12:	2101      	movs	r1, #1
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 ff71 	bl	8004afc <RCCEx_PLL2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c20:	e00f      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	3328      	adds	r3, #40	@ 0x28
 8003c28:	2101      	movs	r1, #1
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 f818 	bl	8004c60 <RCCEx_PLL3_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c36:	e004      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3e:	e000      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c4a:	4b96      	ldr	r3, [pc, #600]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	f023 0107 	bic.w	r1, r3, #7
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c58:	4a92      	ldr	r2, [pc, #584]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c5e:	e003      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f002 0304 	and.w	r3, r2, #4
 8003c74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4313      	orrs	r3, r2
 8003c86:	d044      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d825      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003c94:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003ce9 	.word	0x08003ce9
 8003ca0:	08003cb5 	.word	0x08003cb5
 8003ca4:	08003ccb 	.word	0x08003ccb
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003ce9 	.word	0x08003ce9
 8003cb0:	08003ce9 	.word	0x08003ce9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	3308      	adds	r3, #8
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 ff1d 	bl	8004afc <RCCEx_PLL2_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cc8:	e00f      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	3328      	adds	r3, #40	@ 0x28
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ffc4 	bl	8004c60 <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cde:	e004      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ce6:	e000      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf6:	f023 0107 	bic.w	r1, r3, #7
 8003cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d02:	4a68      	ldr	r2, [pc, #416]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d08:	e003      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f002 0320 	and.w	r3, r2, #32
 8003d1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	d055      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d3e:	d033      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d44:	d82c      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4a:	d02f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d50:	d826      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d56:	d02b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003d58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d5c:	d820      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d62:	d012      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003d64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d68:	d81a      	bhi.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d022      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003d6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d72:	d115      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	3308      	adds	r3, #8
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 febd 	bl	8004afc <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d88:	e015      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	3328      	adds	r3, #40	@ 0x28
 8003d90:	2102      	movs	r1, #2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 ff64 	bl	8004c60 <RCCEx_PLL3_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da6:	e006      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003da8:	bf00      	nop
 8003daa:	e004      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003dac:	bf00      	nop
 8003dae:	e002      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003db0:	bf00      	nop
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	4a35      	ldr	r2, [pc, #212]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dd4:	e003      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003df4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	d058      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e0a:	d033      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003e0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e10:	d82c      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e16:	d02f      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e1c:	d826      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e22:	d02b      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003e24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e28:	d820      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e2e:	d012      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e34:	d81a      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d022      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3e:	d115      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	3308      	adds	r3, #8
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fe57 	bl	8004afc <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e54:	e015      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3328      	adds	r3, #40	@ 0x28
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fefe 	bl	8004c60 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e72:	e006      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e74:	bf00      	nop
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e78:	bf00      	nop
 8003e7a:	e002      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10e      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e9a:	4a02      	ldr	r2, [pc, #8]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ea2:	bf00      	nop
 8003ea4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ec6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	d055      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ed8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003edc:	d033      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003ede:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003ee2:	d82c      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee8:	d02f      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eee:	d826      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ef0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ef4:	d02b      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003ef6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003efa:	d820      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f00:	d012      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f06:	d81a      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d022      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f10:	d115      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	3308      	adds	r3, #8
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fdee 	bl	8004afc <RCCEx_PLL2_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f26:	e015      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	3328      	adds	r3, #40	@ 0x28
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fe95 	bl	8004c60 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f3c:	e00a      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f46:	bf00      	nop
 8003f48:	e004      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f6c:	4a9d      	ldr	r2, [pc, #628]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f72:	e003      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f002 0308 	and.w	r3, r2, #8
 8003f88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f96:	460b      	mov	r3, r1
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	d01e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	3328      	adds	r3, #40	@ 0x28
 8003fb0:	2102      	movs	r1, #2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fe54 	bl	8004c60 <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003fc4:	4b87      	ldr	r3, [pc, #540]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fd4:	4a83      	ldr	r2, [pc, #524]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f002 0310 	and.w	r3, r2, #16
 8003fe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ff0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d01e      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	d10c      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	3328      	adds	r3, #40	@ 0x28
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fe25 	bl	8004c60 <RCCEx_PLL3_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004022:	4b70      	ldr	r3, [pc, #448]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004026:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800402a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004032:	4a6c      	ldr	r2, [pc, #432]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004034:	430b      	orrs	r3, r1
 8004036:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800404e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	d03e      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004064:	d022      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004066:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800406a:	d81b      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004074:	d00b      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004076:	e015      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	3308      	adds	r3, #8
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd3b 	bl	8004afc <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800408c:	e00f      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	3328      	adds	r3, #40	@ 0x28
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fde2 	bl	8004c60 <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80040ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b6:	4b4b      	ldr	r3, [pc, #300]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040c6:	4a47      	ldr	r2, [pc, #284]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	e003      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80040e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040e4:	2300      	movs	r3, #0
 80040e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80040ec:	460b      	mov	r3, r1
 80040ee:	4313      	orrs	r3, r2
 80040f0:	d03b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040fe:	d01f      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004100:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004104:	d818      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800410c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004110:	d007      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004112:	e011      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004114:	4b33      	ldr	r3, [pc, #204]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	4a32      	ldr	r2, [pc, #200]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	3328      	adds	r3, #40	@ 0x28
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fd98 	bl	8004c60 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10b      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	4a22      	ldr	r2, [pc, #136]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004176:	673b      	str	r3, [r7, #112]	@ 0x70
 8004178:	2300      	movs	r3, #0
 800417a:	677b      	str	r3, [r7, #116]	@ 0x74
 800417c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d034      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004194:	d007      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004196:	e011      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004198:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a11      	ldr	r2, [pc, #68]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041a4:	e00e      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	3308      	adds	r3, #8
 80041ac:	2102      	movs	r1, #2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fca4 	bl	8004afc <RCCEx_PLL2_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041ba:	e003      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10d      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	4a02      	ldr	r2, [pc, #8]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80041e2:	bf00      	nop
 80041e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80041fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041fe:	2300      	movs	r3, #0
 8004200:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004202:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004206:	460b      	mov	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	d00c      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	3328      	adds	r3, #40	@ 0x28
 8004212:	2102      	movs	r1, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fd23 	bl	8004c60 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004232:	663b      	str	r3, [r7, #96]	@ 0x60
 8004234:	2300      	movs	r3, #0
 8004236:	667b      	str	r3, [r7, #100]	@ 0x64
 8004238:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d038      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800424a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424e:	d018      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004254:	d811      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800425a:	d014      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800425c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004260:	d80b      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800426a:	d106      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426c:	4bc3      	ldr	r3, [pc, #780]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4ac2      	ldr	r2, [pc, #776]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004280:	e004      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800428a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004294:	4bb9      	ldr	r3, [pc, #740]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042a4:	4ab5      	ldr	r2, [pc, #724]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042a6:	430b      	orrs	r3, r1
 80042a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042c2:	2300      	movs	r3, #0
 80042c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042d0:	4baa      	ldr	r3, [pc, #680]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042de:	4aa7      	ldr	r2, [pc, #668]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80042f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f2:	2300      	movs	r3, #0
 80042f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80042f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d00a      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004300:	4b9e      	ldr	r3, [pc, #632]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004310:	4a9a      	ldr	r2, [pc, #616]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004312:	430b      	orrs	r3, r1
 8004314:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004324:	2300      	movs	r3, #0
 8004326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004328:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800432c:	460b      	mov	r3, r1
 800432e:	4313      	orrs	r3, r2
 8004330:	d009      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004332:	4b92      	ldr	r3, [pc, #584]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004336:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800433a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004340:	4a8e      	ldr	r2, [pc, #568]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004342:	430b      	orrs	r3, r1
 8004344:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004352:	643b      	str	r3, [r7, #64]	@ 0x40
 8004354:	2300      	movs	r3, #0
 8004356:	647b      	str	r3, [r7, #68]	@ 0x44
 8004358:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800435c:	460b      	mov	r3, r1
 800435e:	4313      	orrs	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004362:	4b86      	ldr	r3, [pc, #536]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	4a85      	ldr	r2, [pc, #532]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004368:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800436c:	6113      	str	r3, [r2, #16]
 800436e:	4b83      	ldr	r3, [pc, #524]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004370:	6919      	ldr	r1, [r3, #16]
 8004372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004376:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800437a:	4a80      	ldr	r2, [pc, #512]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437c:	430b      	orrs	r3, r1
 800437e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800438c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800438e:	2300      	movs	r3, #0
 8004390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004392:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004396:	460b      	mov	r3, r1
 8004398:	4313      	orrs	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800439c:	4b77      	ldr	r3, [pc, #476]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	4a74      	ldr	r2, [pc, #464]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ac:	430b      	orrs	r3, r1
 80043ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80043bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043cc:	4b6b      	ldr	r3, [pc, #428]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043dc:	4a67      	ldr	r2, [pc, #412]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043de:	430b      	orrs	r3, r1
 80043e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	2100      	movs	r1, #0
 80043ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d011      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	3308      	adds	r3, #8
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fb78 	bl	8004afc <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	2100      	movs	r1, #0
 800442c:	6239      	str	r1, [r7, #32]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
 8004434:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d011      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	3308      	adds	r3, #8
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fb58 	bl	8004afc <RCCEx_PLL2_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	2100      	movs	r1, #0
 800446c:	61b9      	str	r1, [r7, #24]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d011      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004482:	3308      	adds	r3, #8
 8004484:	2102      	movs	r1, #2
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fb38 	bl	8004afc <RCCEx_PLL2_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	2100      	movs	r1, #0
 80044ac:	6139      	str	r1, [r7, #16]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044b8:	460b      	mov	r3, r1
 80044ba:	4313      	orrs	r3, r2
 80044bc:	d011      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	3328      	adds	r3, #40	@ 0x28
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fbca 	bl	8004c60 <RCCEx_PLL3_Config>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80044d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	2100      	movs	r1, #0
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044f8:	460b      	mov	r3, r1
 80044fa:	4313      	orrs	r3, r2
 80044fc:	d011      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	3328      	adds	r3, #40	@ 0x28
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fbaa 	bl	8004c60 <RCCEx_PLL3_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	2100      	movs	r1, #0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d011      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	3328      	adds	r3, #40	@ 0x28
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fb8a 	bl	8004c60 <RCCEx_PLL3_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004562:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004576:	46bd      	mov	sp, r7
 8004578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457c:	58024400 	.word	0x58024400

08004580 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004584:	f7fe fd96 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4904      	ldr	r1, [pc, #16]	@ (80045a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400
 80045a8:	080065fc 	.word	0x080065fc

080045ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b089      	sub	sp, #36	@ 0x24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045b4:	4ba1      	ldr	r3, [pc, #644]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80045be:	4b9f      	ldr	r3, [pc, #636]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	0b1b      	lsrs	r3, r3, #12
 80045c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045ca:	4b9c      	ldr	r3, [pc, #624]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80045d6:	4b99      	ldr	r3, [pc, #612]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045da:	08db      	lsrs	r3, r3, #3
 80045dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8111 	beq.w	800481c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f000 8083 	beq.w	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b02      	cmp	r3, #2
 8004606:	f200 80a1 	bhi.w	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d056      	beq.n	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004616:	e099      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004618:	4b88      	ldr	r3, [pc, #544]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d02d      	beq.n	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004624:	4b85      	ldr	r3, [pc, #532]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	08db      	lsrs	r3, r3, #3
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	4a84      	ldr	r2, [pc, #528]	@ (8004840 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
 8004634:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b7b      	ldr	r3, [pc, #492]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800467e:	e087      	b.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b6a      	ldr	r3, [pc, #424]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c2:	e065      	b.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800484c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b59      	ldr	r3, [pc, #356]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004706:	e043      	b.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004850 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b48      	ldr	r3, [pc, #288]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800474a:	e021      	b.n	8004790 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800484c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800475a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475e:	4b37      	ldr	r3, [pc, #220]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004772:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004844 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800478e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004790:	4b2a      	ldr	r3, [pc, #168]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	0a5b      	lsrs	r3, r3, #9
 8004796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b6:	ee17 2a90 	vmov	r2, s15
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80047be:	4b1f      	ldr	r3, [pc, #124]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e4:	ee17 2a90 	vmov	r2, s15
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047ec:	4b13      	ldr	r3, [pc, #76]	@ (800483c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	0e1b      	lsrs	r3, r3, #24
 80047f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004806:	edd7 6a07 	vldr	s13, [r7, #28]
 800480a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800480e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004812:	ee17 2a90 	vmov	r2, s15
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800481a:	e008      	b.n	800482e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
}
 800482e:	bf00      	nop
 8004830:	3724      	adds	r7, #36	@ 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	58024400 	.word	0x58024400
 8004840:	03d09000 	.word	0x03d09000
 8004844:	46000000 	.word	0x46000000
 8004848:	4c742400 	.word	0x4c742400
 800484c:	4a742400 	.word	0x4a742400
 8004850:	4af42400 	.word	0x4af42400

08004854 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	@ 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800485c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004866:	4b9f      	ldr	r3, [pc, #636]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	0d1b      	lsrs	r3, r3, #20
 800486c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004870:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004872:	4b9c      	ldr	r3, [pc, #624]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800487e:	4b99      	ldr	r3, [pc, #612]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	08db      	lsrs	r3, r3, #3
 8004884:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	fb02 f303 	mul.w	r3, r2, r3
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8111 	beq.w	8004ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	f000 8083 	beq.w	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	f200 80a1 	bhi.w	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d056      	beq.n	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048be:	e099      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048c0:	4b88      	ldr	r3, [pc, #544]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02d      	beq.n	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048cc:	4b85      	ldr	r3, [pc, #532]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	08db      	lsrs	r3, r3, #3
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	4a84      	ldr	r2, [pc, #528]	@ (8004ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
 80048dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	ee07 3a90 	vmov	s15, r3
 80048e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004926:	e087      	b.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496a:	e065      	b.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b59      	ldr	r3, [pc, #356]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ae:	e043      	b.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b48      	ldr	r3, [pc, #288]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049f2:	e021      	b.n	8004a38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a06:	4b37      	ldr	r3, [pc, #220]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	0a5b      	lsrs	r3, r3, #9
 8004a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5e:	ee17 2a90 	vmov	r2, s15
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8c:	ee17 2a90 	vmov	r2, s15
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a94:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a98:	0e1b      	lsrs	r3, r3, #24
 8004a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aba:	ee17 2a90 	vmov	r2, s15
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]
}
 8004ad6:	bf00      	nop
 8004ad8:	3724      	adds	r7, #36	@ 0x24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
 8004ae8:	03d09000 	.word	0x03d09000
 8004aec:	46000000 	.word	0x46000000
 8004af0:	4c742400 	.word	0x4c742400
 8004af4:	4a742400 	.word	0x4a742400
 8004af8:	4af42400 	.word	0x4af42400

08004afc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b0a:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d101      	bne.n	8004b1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e099      	b.n	8004c4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b26:	f7fc fa5b 	bl	8000fe0 <HAL_GetTick>
 8004b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b2c:	e008      	b.n	8004b40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b2e:	f7fc fa57 	bl	8000fe0 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e086      	b.n	8004c4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b40:	4b45      	ldr	r3, [pc, #276]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b4c:	4b42      	ldr	r3, [pc, #264]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	493f      	ldr	r1, [pc, #252]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	025b      	lsls	r3, r3, #9
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b90:	4931      	ldr	r1, [pc, #196]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b96:	4b30      	ldr	r3, [pc, #192]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	492d      	ldr	r1, [pc, #180]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	f023 0220 	bic.w	r2, r3, #32
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	4928      	ldr	r1, [pc, #160]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bba:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	4a26      	ldr	r2, [pc, #152]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	f023 0310 	bic.w	r3, r3, #16
 8004bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bc6:	4b24      	ldr	r3, [pc, #144]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bca:	4b24      	ldr	r3, [pc, #144]	@ (8004c5c <RCCEx_PLL2_Config+0x160>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	69d2      	ldr	r2, [r2, #28]
 8004bd2:	00d2      	lsls	r2, r2, #3
 8004bd4:	4920      	ldr	r1, [pc, #128]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004bda:	4b1f      	ldr	r3, [pc, #124]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	4a1e      	ldr	r2, [pc, #120]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004be0:	f043 0310 	orr.w	r3, r3, #16
 8004be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bec:	4b1a      	ldr	r3, [pc, #104]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004bf2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bf8:	e00f      	b.n	8004c1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d106      	bne.n	8004c0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c00:	4b15      	ldr	r3, [pc, #84]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	4a14      	ldr	r2, [pc, #80]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c0c:	e005      	b.n	8004c1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c0e:	4b12      	ldr	r3, [pc, #72]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c12:	4a11      	ldr	r2, [pc, #68]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c26:	f7fc f9db 	bl	8000fe0 <HAL_GetTick>
 8004c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c2c:	e008      	b.n	8004c40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c2e:	f7fc f9d7 	bl	8000fe0 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e006      	b.n	8004c4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	ffff0007 	.word	0xffff0007

08004c60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c6e:	4b53      	ldr	r3, [pc, #332]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d101      	bne.n	8004c7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e099      	b.n	8004db2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a4e      	ldr	r2, [pc, #312]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8a:	f7fc f9a9 	bl	8000fe0 <HAL_GetTick>
 8004c8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c90:	e008      	b.n	8004ca4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c92:	f7fc f9a5 	bl	8000fe0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e086      	b.n	8004db2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ca4:	4b45      	ldr	r3, [pc, #276]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f0      	bne.n	8004c92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cb0:	4b42      	ldr	r3, [pc, #264]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	051b      	lsls	r3, r3, #20
 8004cbe:	493f      	ldr	r1, [pc, #252]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	025b      	lsls	r3, r3, #9
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cf4:	4931      	ldr	r1, [pc, #196]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cfa:	4b30      	ldr	r3, [pc, #192]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	492d      	ldr	r1, [pc, #180]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	4928      	ldr	r1, [pc, #160]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d1e:	4b27      	ldr	r3, [pc, #156]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	4a26      	ldr	r2, [pc, #152]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d2a:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <RCCEx_PLL3_Config+0x160>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	69d2      	ldr	r2, [r2, #28]
 8004d36:	00d2      	lsls	r2, r2, #3
 8004d38:	4920      	ldr	r1, [pc, #128]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	4a1e      	ldr	r2, [pc, #120]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d50:	4b1a      	ldr	r3, [pc, #104]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	4a19      	ldr	r2, [pc, #100]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d5c:	e00f      	b.n	8004d7e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d64:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d70:	e005      	b.n	8004d7e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d72:	4b12      	ldr	r3, [pc, #72]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a11      	ldr	r2, [pc, #68]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a0e      	ldr	r2, [pc, #56]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8a:	f7fc f929 	bl	8000fe0 <HAL_GetTick>
 8004d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d90:	e008      	b.n	8004da4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d92:	f7fc f925 	bl	8000fe0 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e006      	b.n	8004db2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004da4:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <RCCEx_PLL3_Config+0x15c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	ffff0007 	.word	0xffff0007

08004dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e042      	b.n	8004e5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7fb ff53 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2224      	movs	r2, #36	@ 0x24
 8004df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fd90 	bl	8005934 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f825 	bl	8004e64 <UART_SetConfig>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e01b      	b.n	8004e5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fe0f 	bl	8005a78 <UART_CheckIdleState>
 8004e5a:	4603      	mov	r3, r0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b092      	sub	sp, #72	@ 0x48
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4bbe      	ldr	r3, [pc, #760]	@ (800518c <UART_SetConfig+0x328>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4ab3      	ldr	r2, [pc, #716]	@ (8005190 <UART_SetConfig+0x32c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d004      	beq.n	8004ed0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	4baf      	ldr	r3, [pc, #700]	@ (8005194 <UART_SetConfig+0x330>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	f023 010f 	bic.w	r1, r3, #15
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4aa6      	ldr	r2, [pc, #664]	@ (8005198 <UART_SetConfig+0x334>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d177      	bne.n	8004ff4 <UART_SetConfig+0x190>
 8004f04:	4ba5      	ldr	r3, [pc, #660]	@ (800519c <UART_SetConfig+0x338>)
 8004f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f0c:	2b28      	cmp	r3, #40	@ 0x28
 8004f0e:	d86d      	bhi.n	8004fec <UART_SetConfig+0x188>
 8004f10:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <UART_SetConfig+0xb4>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004fbd 	.word	0x08004fbd
 8004f1c:	08004fed 	.word	0x08004fed
 8004f20:	08004fed 	.word	0x08004fed
 8004f24:	08004fed 	.word	0x08004fed
 8004f28:	08004fed 	.word	0x08004fed
 8004f2c:	08004fed 	.word	0x08004fed
 8004f30:	08004fed 	.word	0x08004fed
 8004f34:	08004fed 	.word	0x08004fed
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fed 	.word	0x08004fed
 8004f40:	08004fed 	.word	0x08004fed
 8004f44:	08004fed 	.word	0x08004fed
 8004f48:	08004fed 	.word	0x08004fed
 8004f4c:	08004fed 	.word	0x08004fed
 8004f50:	08004fed 	.word	0x08004fed
 8004f54:	08004fed 	.word	0x08004fed
 8004f58:	08004fcd 	.word	0x08004fcd
 8004f5c:	08004fed 	.word	0x08004fed
 8004f60:	08004fed 	.word	0x08004fed
 8004f64:	08004fed 	.word	0x08004fed
 8004f68:	08004fed 	.word	0x08004fed
 8004f6c:	08004fed 	.word	0x08004fed
 8004f70:	08004fed 	.word	0x08004fed
 8004f74:	08004fed 	.word	0x08004fed
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08004fed 	.word	0x08004fed
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004fed 	.word	0x08004fed
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fdd 	.word	0x08004fdd
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e222      	b.n	800540a <UART_SetConfig+0x5a6>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e21e      	b.n	800540a <UART_SetConfig+0x5a6>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	e21a      	b.n	800540a <UART_SetConfig+0x5a6>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e216      	b.n	800540a <UART_SetConfig+0x5a6>
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e212      	b.n	800540a <UART_SetConfig+0x5a6>
 8004fe4:	2340      	movs	r3, #64	@ 0x40
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e20e      	b.n	800540a <UART_SetConfig+0x5a6>
 8004fec:	2380      	movs	r3, #128	@ 0x80
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e20a      	b.n	800540a <UART_SetConfig+0x5a6>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a69      	ldr	r2, [pc, #420]	@ (80051a0 <UART_SetConfig+0x33c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d130      	bne.n	8005060 <UART_SetConfig+0x1fc>
 8004ffe:	4b67      	ldr	r3, [pc, #412]	@ (800519c <UART_SetConfig+0x338>)
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	2b05      	cmp	r3, #5
 8005008:	d826      	bhi.n	8005058 <UART_SetConfig+0x1f4>
 800500a:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <UART_SetConfig+0x1ac>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005029 	.word	0x08005029
 8005014:	08005031 	.word	0x08005031
 8005018:	08005039 	.word	0x08005039
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	2300      	movs	r3, #0
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e1ec      	b.n	800540a <UART_SetConfig+0x5a6>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e1e8      	b.n	800540a <UART_SetConfig+0x5a6>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e1e4      	b.n	800540a <UART_SetConfig+0x5a6>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e1e0      	b.n	800540a <UART_SetConfig+0x5a6>
 8005048:	2320      	movs	r3, #32
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e1dc      	b.n	800540a <UART_SetConfig+0x5a6>
 8005050:	2340      	movs	r3, #64	@ 0x40
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e1d8      	b.n	800540a <UART_SetConfig+0x5a6>
 8005058:	2380      	movs	r3, #128	@ 0x80
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e1d4      	b.n	800540a <UART_SetConfig+0x5a6>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a4f      	ldr	r2, [pc, #316]	@ (80051a4 <UART_SetConfig+0x340>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d130      	bne.n	80050cc <UART_SetConfig+0x268>
 800506a:	4b4c      	ldr	r3, [pc, #304]	@ (800519c <UART_SetConfig+0x338>)
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	2b05      	cmp	r3, #5
 8005074:	d826      	bhi.n	80050c4 <UART_SetConfig+0x260>
 8005076:	a201      	add	r2, pc, #4	@ (adr r2, 800507c <UART_SetConfig+0x218>)
 8005078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507c:	08005095 	.word	0x08005095
 8005080:	0800509d 	.word	0x0800509d
 8005084:	080050a5 	.word	0x080050a5
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	2300      	movs	r3, #0
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e1b6      	b.n	800540a <UART_SetConfig+0x5a6>
 800509c:	2304      	movs	r3, #4
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e1b2      	b.n	800540a <UART_SetConfig+0x5a6>
 80050a4:	2308      	movs	r3, #8
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e1ae      	b.n	800540a <UART_SetConfig+0x5a6>
 80050ac:	2310      	movs	r3, #16
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e1aa      	b.n	800540a <UART_SetConfig+0x5a6>
 80050b4:	2320      	movs	r3, #32
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e1a6      	b.n	800540a <UART_SetConfig+0x5a6>
 80050bc:	2340      	movs	r3, #64	@ 0x40
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e1a2      	b.n	800540a <UART_SetConfig+0x5a6>
 80050c4:	2380      	movs	r3, #128	@ 0x80
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e19e      	b.n	800540a <UART_SetConfig+0x5a6>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a35      	ldr	r2, [pc, #212]	@ (80051a8 <UART_SetConfig+0x344>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d130      	bne.n	8005138 <UART_SetConfig+0x2d4>
 80050d6:	4b31      	ldr	r3, [pc, #196]	@ (800519c <UART_SetConfig+0x338>)
 80050d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	2b05      	cmp	r3, #5
 80050e0:	d826      	bhi.n	8005130 <UART_SetConfig+0x2cc>
 80050e2:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <UART_SetConfig+0x284>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	08005101 	.word	0x08005101
 80050ec:	08005109 	.word	0x08005109
 80050f0:	08005111 	.word	0x08005111
 80050f4:	08005119 	.word	0x08005119
 80050f8:	08005121 	.word	0x08005121
 80050fc:	08005129 	.word	0x08005129
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e180      	b.n	800540a <UART_SetConfig+0x5a6>
 8005108:	2304      	movs	r3, #4
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e17c      	b.n	800540a <UART_SetConfig+0x5a6>
 8005110:	2308      	movs	r3, #8
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e178      	b.n	800540a <UART_SetConfig+0x5a6>
 8005118:	2310      	movs	r3, #16
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e174      	b.n	800540a <UART_SetConfig+0x5a6>
 8005120:	2320      	movs	r3, #32
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e170      	b.n	800540a <UART_SetConfig+0x5a6>
 8005128:	2340      	movs	r3, #64	@ 0x40
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e16c      	b.n	800540a <UART_SetConfig+0x5a6>
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005136:	e168      	b.n	800540a <UART_SetConfig+0x5a6>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1b      	ldr	r2, [pc, #108]	@ (80051ac <UART_SetConfig+0x348>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d142      	bne.n	80051c8 <UART_SetConfig+0x364>
 8005142:	4b16      	ldr	r3, [pc, #88]	@ (800519c <UART_SetConfig+0x338>)
 8005144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b05      	cmp	r3, #5
 800514c:	d838      	bhi.n	80051c0 <UART_SetConfig+0x35c>
 800514e:	a201      	add	r2, pc, #4	@ (adr r2, 8005154 <UART_SetConfig+0x2f0>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	0800516d 	.word	0x0800516d
 8005158:	08005175 	.word	0x08005175
 800515c:	0800517d 	.word	0x0800517d
 8005160:	08005185 	.word	0x08005185
 8005164:	080051b1 	.word	0x080051b1
 8005168:	080051b9 	.word	0x080051b9
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e14a      	b.n	800540a <UART_SetConfig+0x5a6>
 8005174:	2304      	movs	r3, #4
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e146      	b.n	800540a <UART_SetConfig+0x5a6>
 800517c:	2308      	movs	r3, #8
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e142      	b.n	800540a <UART_SetConfig+0x5a6>
 8005184:	2310      	movs	r3, #16
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518a:	e13e      	b.n	800540a <UART_SetConfig+0x5a6>
 800518c:	cfff69f3 	.word	0xcfff69f3
 8005190:	58000c00 	.word	0x58000c00
 8005194:	11fff4ff 	.word	0x11fff4ff
 8005198:	40011000 	.word	0x40011000
 800519c:	58024400 	.word	0x58024400
 80051a0:	40004400 	.word	0x40004400
 80051a4:	40004800 	.word	0x40004800
 80051a8:	40004c00 	.word	0x40004c00
 80051ac:	40005000 	.word	0x40005000
 80051b0:	2320      	movs	r3, #32
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e128      	b.n	800540a <UART_SetConfig+0x5a6>
 80051b8:	2340      	movs	r3, #64	@ 0x40
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e124      	b.n	800540a <UART_SetConfig+0x5a6>
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e120      	b.n	800540a <UART_SetConfig+0x5a6>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4acb      	ldr	r2, [pc, #812]	@ (80054fc <UART_SetConfig+0x698>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d176      	bne.n	80052c0 <UART_SetConfig+0x45c>
 80051d2:	4bcb      	ldr	r3, [pc, #812]	@ (8005500 <UART_SetConfig+0x69c>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051da:	2b28      	cmp	r3, #40	@ 0x28
 80051dc:	d86c      	bhi.n	80052b8 <UART_SetConfig+0x454>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0x380>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005289 	.word	0x08005289
 80051e8:	080052b9 	.word	0x080052b9
 80051ec:	080052b9 	.word	0x080052b9
 80051f0:	080052b9 	.word	0x080052b9
 80051f4:	080052b9 	.word	0x080052b9
 80051f8:	080052b9 	.word	0x080052b9
 80051fc:	080052b9 	.word	0x080052b9
 8005200:	080052b9 	.word	0x080052b9
 8005204:	08005291 	.word	0x08005291
 8005208:	080052b9 	.word	0x080052b9
 800520c:	080052b9 	.word	0x080052b9
 8005210:	080052b9 	.word	0x080052b9
 8005214:	080052b9 	.word	0x080052b9
 8005218:	080052b9 	.word	0x080052b9
 800521c:	080052b9 	.word	0x080052b9
 8005220:	080052b9 	.word	0x080052b9
 8005224:	08005299 	.word	0x08005299
 8005228:	080052b9 	.word	0x080052b9
 800522c:	080052b9 	.word	0x080052b9
 8005230:	080052b9 	.word	0x080052b9
 8005234:	080052b9 	.word	0x080052b9
 8005238:	080052b9 	.word	0x080052b9
 800523c:	080052b9 	.word	0x080052b9
 8005240:	080052b9 	.word	0x080052b9
 8005244:	080052a1 	.word	0x080052a1
 8005248:	080052b9 	.word	0x080052b9
 800524c:	080052b9 	.word	0x080052b9
 8005250:	080052b9 	.word	0x080052b9
 8005254:	080052b9 	.word	0x080052b9
 8005258:	080052b9 	.word	0x080052b9
 800525c:	080052b9 	.word	0x080052b9
 8005260:	080052b9 	.word	0x080052b9
 8005264:	080052a9 	.word	0x080052a9
 8005268:	080052b9 	.word	0x080052b9
 800526c:	080052b9 	.word	0x080052b9
 8005270:	080052b9 	.word	0x080052b9
 8005274:	080052b9 	.word	0x080052b9
 8005278:	080052b9 	.word	0x080052b9
 800527c:	080052b9 	.word	0x080052b9
 8005280:	080052b9 	.word	0x080052b9
 8005284:	080052b1 	.word	0x080052b1
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800528e:	e0bc      	b.n	800540a <UART_SetConfig+0x5a6>
 8005290:	2304      	movs	r3, #4
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e0b8      	b.n	800540a <UART_SetConfig+0x5a6>
 8005298:	2308      	movs	r3, #8
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529e:	e0b4      	b.n	800540a <UART_SetConfig+0x5a6>
 80052a0:	2310      	movs	r3, #16
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e0b0      	b.n	800540a <UART_SetConfig+0x5a6>
 80052a8:	2320      	movs	r3, #32
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e0ac      	b.n	800540a <UART_SetConfig+0x5a6>
 80052b0:	2340      	movs	r3, #64	@ 0x40
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e0a8      	b.n	800540a <UART_SetConfig+0x5a6>
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e0a4      	b.n	800540a <UART_SetConfig+0x5a6>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a8f      	ldr	r2, [pc, #572]	@ (8005504 <UART_SetConfig+0x6a0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d130      	bne.n	800532c <UART_SetConfig+0x4c8>
 80052ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005500 <UART_SetConfig+0x69c>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d826      	bhi.n	8005324 <UART_SetConfig+0x4c0>
 80052d6:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <UART_SetConfig+0x478>)
 80052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052dc:	080052f5 	.word	0x080052f5
 80052e0:	080052fd 	.word	0x080052fd
 80052e4:	08005305 	.word	0x08005305
 80052e8:	0800530d 	.word	0x0800530d
 80052ec:	08005315 	.word	0x08005315
 80052f0:	0800531d 	.word	0x0800531d
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e086      	b.n	800540a <UART_SetConfig+0x5a6>
 80052fc:	2304      	movs	r3, #4
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e082      	b.n	800540a <UART_SetConfig+0x5a6>
 8005304:	2308      	movs	r3, #8
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e07e      	b.n	800540a <UART_SetConfig+0x5a6>
 800530c:	2310      	movs	r3, #16
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e07a      	b.n	800540a <UART_SetConfig+0x5a6>
 8005314:	2320      	movs	r3, #32
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e076      	b.n	800540a <UART_SetConfig+0x5a6>
 800531c:	2340      	movs	r3, #64	@ 0x40
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e072      	b.n	800540a <UART_SetConfig+0x5a6>
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e06e      	b.n	800540a <UART_SetConfig+0x5a6>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a75      	ldr	r2, [pc, #468]	@ (8005508 <UART_SetConfig+0x6a4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d130      	bne.n	8005398 <UART_SetConfig+0x534>
 8005336:	4b72      	ldr	r3, [pc, #456]	@ (8005500 <UART_SetConfig+0x69c>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b05      	cmp	r3, #5
 8005340:	d826      	bhi.n	8005390 <UART_SetConfig+0x52c>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <UART_SetConfig+0x4e4>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	08005361 	.word	0x08005361
 800534c:	08005369 	.word	0x08005369
 8005350:	08005371 	.word	0x08005371
 8005354:	08005379 	.word	0x08005379
 8005358:	08005381 	.word	0x08005381
 800535c:	08005389 	.word	0x08005389
 8005360:	2300      	movs	r3, #0
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e050      	b.n	800540a <UART_SetConfig+0x5a6>
 8005368:	2304      	movs	r3, #4
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e04c      	b.n	800540a <UART_SetConfig+0x5a6>
 8005370:	2308      	movs	r3, #8
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e048      	b.n	800540a <UART_SetConfig+0x5a6>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e044      	b.n	800540a <UART_SetConfig+0x5a6>
 8005380:	2320      	movs	r3, #32
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e040      	b.n	800540a <UART_SetConfig+0x5a6>
 8005388:	2340      	movs	r3, #64	@ 0x40
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e03c      	b.n	800540a <UART_SetConfig+0x5a6>
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e038      	b.n	800540a <UART_SetConfig+0x5a6>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5b      	ldr	r2, [pc, #364]	@ (800550c <UART_SetConfig+0x6a8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d130      	bne.n	8005404 <UART_SetConfig+0x5a0>
 80053a2:	4b57      	ldr	r3, [pc, #348]	@ (8005500 <UART_SetConfig+0x69c>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d826      	bhi.n	80053fc <UART_SetConfig+0x598>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <UART_SetConfig+0x550>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053cd 	.word	0x080053cd
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	080053dd 	.word	0x080053dd
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053ed 	.word	0x080053ed
 80053c8:	080053f5 	.word	0x080053f5
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e01a      	b.n	800540a <UART_SetConfig+0x5a6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e016      	b.n	800540a <UART_SetConfig+0x5a6>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e012      	b.n	800540a <UART_SetConfig+0x5a6>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e00e      	b.n	800540a <UART_SetConfig+0x5a6>
 80053ec:	2320      	movs	r3, #32
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e00a      	b.n	800540a <UART_SetConfig+0x5a6>
 80053f4:	2340      	movs	r3, #64	@ 0x40
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e006      	b.n	800540a <UART_SetConfig+0x5a6>
 80053fc:	2380      	movs	r3, #128	@ 0x80
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e002      	b.n	800540a <UART_SetConfig+0x5a6>
 8005404:	2380      	movs	r3, #128	@ 0x80
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a3f      	ldr	r2, [pc, #252]	@ (800550c <UART_SetConfig+0x6a8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	f040 80f8 	bne.w	8005606 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005416:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800541a:	2b20      	cmp	r3, #32
 800541c:	dc46      	bgt.n	80054ac <UART_SetConfig+0x648>
 800541e:	2b02      	cmp	r3, #2
 8005420:	f2c0 8082 	blt.w	8005528 <UART_SetConfig+0x6c4>
 8005424:	3b02      	subs	r3, #2
 8005426:	2b1e      	cmp	r3, #30
 8005428:	d87e      	bhi.n	8005528 <UART_SetConfig+0x6c4>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <UART_SetConfig+0x5cc>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	080054b3 	.word	0x080054b3
 8005434:	08005529 	.word	0x08005529
 8005438:	080054bb 	.word	0x080054bb
 800543c:	08005529 	.word	0x08005529
 8005440:	08005529 	.word	0x08005529
 8005444:	08005529 	.word	0x08005529
 8005448:	080054cb 	.word	0x080054cb
 800544c:	08005529 	.word	0x08005529
 8005450:	08005529 	.word	0x08005529
 8005454:	08005529 	.word	0x08005529
 8005458:	08005529 	.word	0x08005529
 800545c:	08005529 	.word	0x08005529
 8005460:	08005529 	.word	0x08005529
 8005464:	08005529 	.word	0x08005529
 8005468:	080054db 	.word	0x080054db
 800546c:	08005529 	.word	0x08005529
 8005470:	08005529 	.word	0x08005529
 8005474:	08005529 	.word	0x08005529
 8005478:	08005529 	.word	0x08005529
 800547c:	08005529 	.word	0x08005529
 8005480:	08005529 	.word	0x08005529
 8005484:	08005529 	.word	0x08005529
 8005488:	08005529 	.word	0x08005529
 800548c:	08005529 	.word	0x08005529
 8005490:	08005529 	.word	0x08005529
 8005494:	08005529 	.word	0x08005529
 8005498:	08005529 	.word	0x08005529
 800549c:	08005529 	.word	0x08005529
 80054a0:	08005529 	.word	0x08005529
 80054a4:	08005529 	.word	0x08005529
 80054a8:	0800551b 	.word	0x0800551b
 80054ac:	2b40      	cmp	r3, #64	@ 0x40
 80054ae:	d037      	beq.n	8005520 <UART_SetConfig+0x6bc>
 80054b0:	e03a      	b.n	8005528 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80054b2:	f7ff f865 	bl	8004580 <HAL_RCCEx_GetD3PCLK1Freq>
 80054b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054b8:	e03c      	b.n	8005534 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff f874 	bl	80045ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054c8:	e034      	b.n	8005534 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ca:	f107 0318 	add.w	r3, r7, #24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff f9c0 	bl	8004854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054d8:	e02c      	b.n	8005534 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054da:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <UART_SetConfig+0x69c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d016      	beq.n	8005514 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054e6:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <UART_SetConfig+0x69c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	4a07      	ldr	r2, [pc, #28]	@ (8005510 <UART_SetConfig+0x6ac>)
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054f8:	e01c      	b.n	8005534 <UART_SetConfig+0x6d0>
 80054fa:	bf00      	nop
 80054fc:	40011400 	.word	0x40011400
 8005500:	58024400 	.word	0x58024400
 8005504:	40007800 	.word	0x40007800
 8005508:	40007c00 	.word	0x40007c00
 800550c:	58000c00 	.word	0x58000c00
 8005510:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005514:	4b9d      	ldr	r3, [pc, #628]	@ (800578c <UART_SetConfig+0x928>)
 8005516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005518:	e00c      	b.n	8005534 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800551a:	4b9d      	ldr	r3, [pc, #628]	@ (8005790 <UART_SetConfig+0x92c>)
 800551c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800551e:	e009      	b.n	8005534 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005520:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005526:	e005      	b.n	8005534 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005532:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 81de 	beq.w	80058f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	4a94      	ldr	r2, [pc, #592]	@ (8005794 <UART_SetConfig+0x930>)
 8005542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005546:	461a      	mov	r2, r3
 8005548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800554a:	fbb3 f3f2 	udiv	r3, r3, r2
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4413      	add	r3, r2
 800555a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800555c:	429a      	cmp	r2, r3
 800555e:	d305      	bcc.n	800556c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005568:	429a      	cmp	r2, r3
 800556a:	d903      	bls.n	8005574 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005572:	e1c1      	b.n	80058f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005576:	2200      	movs	r2, #0
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	60fa      	str	r2, [r7, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	4a84      	ldr	r2, [pc, #528]	@ (8005794 <UART_SetConfig+0x930>)
 8005582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005586:	b29b      	uxth	r3, r3
 8005588:	2200      	movs	r2, #0
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	607a      	str	r2, [r7, #4]
 800558e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005596:	f7fa fe9f 	bl	80002d8 <__aeabi_uldivmod>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	020b      	lsls	r3, r1, #8
 80055ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055b0:	0202      	lsls	r2, r0, #8
 80055b2:	6979      	ldr	r1, [r7, #20]
 80055b4:	6849      	ldr	r1, [r1, #4]
 80055b6:	0849      	lsrs	r1, r1, #1
 80055b8:	2000      	movs	r0, #0
 80055ba:	460c      	mov	r4, r1
 80055bc:	4605      	mov	r5, r0
 80055be:	eb12 0804 	adds.w	r8, r2, r4
 80055c2:	eb43 0905 	adc.w	r9, r3, r5
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	469a      	mov	sl, r3
 80055ce:	4693      	mov	fp, r2
 80055d0:	4652      	mov	r2, sl
 80055d2:	465b      	mov	r3, fp
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fa fe7e 	bl	80002d8 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ea:	d308      	bcc.n	80055fe <UART_SetConfig+0x79a>
 80055ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f2:	d204      	bcs.n	80055fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e17c      	b.n	80058f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005604:	e178      	b.n	80058f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800560e:	f040 80c5 	bne.w	800579c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005612:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005616:	2b20      	cmp	r3, #32
 8005618:	dc48      	bgt.n	80056ac <UART_SetConfig+0x848>
 800561a:	2b00      	cmp	r3, #0
 800561c:	db7b      	blt.n	8005716 <UART_SetConfig+0x8b2>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d879      	bhi.n	8005716 <UART_SetConfig+0x8b2>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <UART_SetConfig+0x7c4>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	080056b3 	.word	0x080056b3
 800562c:	080056bb 	.word	0x080056bb
 8005630:	08005717 	.word	0x08005717
 8005634:	08005717 	.word	0x08005717
 8005638:	080056c3 	.word	0x080056c3
 800563c:	08005717 	.word	0x08005717
 8005640:	08005717 	.word	0x08005717
 8005644:	08005717 	.word	0x08005717
 8005648:	080056d3 	.word	0x080056d3
 800564c:	08005717 	.word	0x08005717
 8005650:	08005717 	.word	0x08005717
 8005654:	08005717 	.word	0x08005717
 8005658:	08005717 	.word	0x08005717
 800565c:	08005717 	.word	0x08005717
 8005660:	08005717 	.word	0x08005717
 8005664:	08005717 	.word	0x08005717
 8005668:	080056e3 	.word	0x080056e3
 800566c:	08005717 	.word	0x08005717
 8005670:	08005717 	.word	0x08005717
 8005674:	08005717 	.word	0x08005717
 8005678:	08005717 	.word	0x08005717
 800567c:	08005717 	.word	0x08005717
 8005680:	08005717 	.word	0x08005717
 8005684:	08005717 	.word	0x08005717
 8005688:	08005717 	.word	0x08005717
 800568c:	08005717 	.word	0x08005717
 8005690:	08005717 	.word	0x08005717
 8005694:	08005717 	.word	0x08005717
 8005698:	08005717 	.word	0x08005717
 800569c:	08005717 	.word	0x08005717
 80056a0:	08005717 	.word	0x08005717
 80056a4:	08005717 	.word	0x08005717
 80056a8:	08005709 	.word	0x08005709
 80056ac:	2b40      	cmp	r3, #64	@ 0x40
 80056ae:	d02e      	beq.n	800570e <UART_SetConfig+0x8aa>
 80056b0:	e031      	b.n	8005716 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7fd fd2f 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 80056b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056b8:	e033      	b.n	8005722 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ba:	f7fd fd41 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 80056be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80056c0:	e02f      	b.n	8005722 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe ff70 	bl	80045ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d0:	e027      	b.n	8005722 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056d2:	f107 0318 	add.w	r3, r7, #24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff f8bc 	bl	8004854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056e0:	e01f      	b.n	8005722 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005798 <UART_SetConfig+0x934>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005798 <UART_SetConfig+0x934>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	4a24      	ldr	r2, [pc, #144]	@ (800578c <UART_SetConfig+0x928>)
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005700:	e00f      	b.n	8005722 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005702:	4b22      	ldr	r3, [pc, #136]	@ (800578c <UART_SetConfig+0x928>)
 8005704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005706:	e00c      	b.n	8005722 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005708:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <UART_SetConfig+0x92c>)
 800570a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800570c:	e009      	b.n	8005722 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800570e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005714:	e005      	b.n	8005722 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80e7 	beq.w	80058f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <UART_SetConfig+0x930>)
 8005730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005734:	461a      	mov	r2, r3
 8005736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005738:	fbb3 f3f2 	udiv	r3, r3, r2
 800573c:	005a      	lsls	r2, r3, #1
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	441a      	add	r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d916      	bls.n	8005784 <UART_SetConfig+0x920>
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800575c:	d212      	bcs.n	8005784 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800575e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005760:	b29b      	uxth	r3, r3
 8005762:	f023 030f 	bic.w	r3, r3, #15
 8005766:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	b29b      	uxth	r3, r3
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	b29a      	uxth	r2, r3
 8005774:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005776:	4313      	orrs	r3, r2
 8005778:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	e0b9      	b.n	80058f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800578a:	e0b5      	b.n	80058f8 <UART_SetConfig+0xa94>
 800578c:	03d09000 	.word	0x03d09000
 8005790:	003d0900 	.word	0x003d0900
 8005794:	0800660c 	.word	0x0800660c
 8005798:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800579c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	dc49      	bgt.n	8005838 <UART_SetConfig+0x9d4>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	db7c      	blt.n	80058a2 <UART_SetConfig+0xa3e>
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d87a      	bhi.n	80058a2 <UART_SetConfig+0xa3e>
 80057ac:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <UART_SetConfig+0x950>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	0800583f 	.word	0x0800583f
 80057b8:	08005847 	.word	0x08005847
 80057bc:	080058a3 	.word	0x080058a3
 80057c0:	080058a3 	.word	0x080058a3
 80057c4:	0800584f 	.word	0x0800584f
 80057c8:	080058a3 	.word	0x080058a3
 80057cc:	080058a3 	.word	0x080058a3
 80057d0:	080058a3 	.word	0x080058a3
 80057d4:	0800585f 	.word	0x0800585f
 80057d8:	080058a3 	.word	0x080058a3
 80057dc:	080058a3 	.word	0x080058a3
 80057e0:	080058a3 	.word	0x080058a3
 80057e4:	080058a3 	.word	0x080058a3
 80057e8:	080058a3 	.word	0x080058a3
 80057ec:	080058a3 	.word	0x080058a3
 80057f0:	080058a3 	.word	0x080058a3
 80057f4:	0800586f 	.word	0x0800586f
 80057f8:	080058a3 	.word	0x080058a3
 80057fc:	080058a3 	.word	0x080058a3
 8005800:	080058a3 	.word	0x080058a3
 8005804:	080058a3 	.word	0x080058a3
 8005808:	080058a3 	.word	0x080058a3
 800580c:	080058a3 	.word	0x080058a3
 8005810:	080058a3 	.word	0x080058a3
 8005814:	080058a3 	.word	0x080058a3
 8005818:	080058a3 	.word	0x080058a3
 800581c:	080058a3 	.word	0x080058a3
 8005820:	080058a3 	.word	0x080058a3
 8005824:	080058a3 	.word	0x080058a3
 8005828:	080058a3 	.word	0x080058a3
 800582c:	080058a3 	.word	0x080058a3
 8005830:	080058a3 	.word	0x080058a3
 8005834:	08005895 	.word	0x08005895
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d02e      	beq.n	800589a <UART_SetConfig+0xa36>
 800583c:	e031      	b.n	80058a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800583e:	f7fd fc69 	bl	8003114 <HAL_RCC_GetPCLK1Freq>
 8005842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005844:	e033      	b.n	80058ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005846:	f7fd fc7b 	bl	8003140 <HAL_RCC_GetPCLK2Freq>
 800584a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800584c:	e02f      	b.n	80058ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800584e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe feaa 	bl	80045ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800585c:	e027      	b.n	80058ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800585e:	f107 0318 	add.w	r3, r7, #24
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fff6 	bl	8004854 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800586c:	e01f      	b.n	80058ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800586e:	4b2d      	ldr	r3, [pc, #180]	@ (8005924 <UART_SetConfig+0xac0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800587a:	4b2a      	ldr	r3, [pc, #168]	@ (8005924 <UART_SetConfig+0xac0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	4a28      	ldr	r2, [pc, #160]	@ (8005928 <UART_SetConfig+0xac4>)
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800588c:	e00f      	b.n	80058ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800588e:	4b26      	ldr	r3, [pc, #152]	@ (8005928 <UART_SetConfig+0xac4>)
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005892:	e00c      	b.n	80058ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005894:	4b25      	ldr	r3, [pc, #148]	@ (800592c <UART_SetConfig+0xac8>)
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a0:	e005      	b.n	80058ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058ac:	bf00      	nop
    }

    if (pclk != 0U)
 80058ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d021      	beq.n	80058f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <UART_SetConfig+0xacc>)
 80058ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058be:	461a      	mov	r2, r3
 80058c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	441a      	add	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d909      	bls.n	80058f2 <UART_SetConfig+0xa8e>
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e4:	d205      	bcs.n	80058f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e002      	b.n	80058f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2201      	movs	r2, #1
 8005904:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2200      	movs	r2, #0
 800590c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005914:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005918:	4618      	mov	r0, r3
 800591a:	3748      	adds	r7, #72	@ 0x48
 800591c:	46bd      	mov	sp, r7
 800591e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005922:	bf00      	nop
 8005924:	58024400 	.word	0x58024400
 8005928:	03d09000 	.word	0x03d09000
 800592c:	003d0900 	.word	0x003d0900
 8005930:	0800660c 	.word	0x0800660c

08005934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00a      	beq.n	80059a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01a      	beq.n	8005a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a32:	d10a      	bne.n	8005a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b098      	sub	sp, #96	@ 0x60
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a88:	f7fb faaa 	bl	8000fe0 <HAL_GetTick>
 8005a8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d12f      	bne.n	8005afc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f88e 	bl	8005bcc <UART_WaitOnFlagUntilTimeout>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d022      	beq.n	8005afc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e6      	bne.n	8005ab6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e063      	b.n	8005bc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d149      	bne.n	8005b9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b12:	2200      	movs	r2, #0
 8005b14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f857 	bl	8005bcc <UART_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d03c      	beq.n	8005b9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	623b      	str	r3, [r7, #32]
   return(result);
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e6      	bne.n	8005b24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b76:	61fa      	str	r2, [r7, #28]
 8005b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	69b9      	ldr	r1, [r7, #24]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	617b      	str	r3, [r7, #20]
   return(result);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e012      	b.n	8005bc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3758      	adds	r7, #88	@ 0x58
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bdc:	e04f      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005be4:	d04b      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fb f9fb 	bl	8000fe0 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e04e      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d037      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b80      	cmp	r3, #128	@ 0x80
 8005c12:	d034      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b40      	cmp	r3, #64	@ 0x40
 8005c18:	d031      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d110      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f839 	bl	8005ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e029      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c58:	d111      	bne.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 f81f 	bl	8005ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e00f      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4013      	ands	r3, r2
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	bf0c      	ite	eq
 8005c8e:	2301      	moveq	r3, #1
 8005c90:	2300      	movne	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d0a0      	beq.n	8005bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b095      	sub	sp, #84	@ 0x54
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005cd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e6      	bne.n	8005cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8005d70 <UART_EndRxTransfer+0xc8>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3308      	adds	r3, #8
 8005d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e5      	bne.n	8005ce2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d118      	bne.n	8005d50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f023 0310 	bic.w	r3, r3, #16
 8005d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6979      	ldr	r1, [r7, #20]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	613b      	str	r3, [r7, #16]
   return(result);
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e6      	bne.n	8005d1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d64:	bf00      	nop
 8005d66:	3754      	adds	r7, #84	@ 0x54
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	effffffe 	.word	0xeffffffe

08005d74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_UARTEx_DisableFifoMode+0x16>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e027      	b.n	8005dda <HAL_UARTEx_DisableFifoMode+0x66>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2224      	movs	r2, #36	@ 0x24
 8005d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005db8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e02d      	b.n	8005e5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2224      	movs	r2, #36	@ 0x24
 8005e0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f850 	bl	8005ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e02d      	b.n	8005ed6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2224      	movs	r2, #36	@ 0x24
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f812 	bl	8005ee0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f00:	e031      	b.n	8005f66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f02:	2310      	movs	r3, #16
 8005f04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f06:	2310      	movs	r3, #16
 8005f08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	0e5b      	lsrs	r3, r3, #25
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	0f5b      	lsrs	r3, r3, #29
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	7b3a      	ldrb	r2, [r7, #12]
 8005f2e:	4911      	ldr	r1, [pc, #68]	@ (8005f74 <UARTEx_SetNbDataToProcess+0x94>)
 8005f30:	5c8a      	ldrb	r2, [r1, r2]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f36:	7b3a      	ldrb	r2, [r7, #12]
 8005f38:	490f      	ldr	r1, [pc, #60]	@ (8005f78 <UARTEx_SetNbDataToProcess+0x98>)
 8005f3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	7b7a      	ldrb	r2, [r7, #13]
 8005f4c:	4909      	ldr	r1, [pc, #36]	@ (8005f74 <UARTEx_SetNbDataToProcess+0x94>)
 8005f4e:	5c8a      	ldrb	r2, [r1, r2]
 8005f50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f54:	7b7a      	ldrb	r2, [r7, #13]
 8005f56:	4908      	ldr	r1, [pc, #32]	@ (8005f78 <UARTEx_SetNbDataToProcess+0x98>)
 8005f58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	08006624 	.word	0x08006624
 8005f78:	0800662c 	.word	0x0800662c

08005f7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	f107 001c 	add.w	r0, r7, #28
 8005f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d121      	bne.n	8005fda <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8006058 <USB_CoreInit+0xdc>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 faaa 	bl	8006528 <USB_CoreReset>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]
 8005fd8:	e01b      	b.n	8006012 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa9e 	bl	8006528 <USB_CoreReset>
 8005fec:	4603      	mov	r3, r0
 8005fee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ff0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	639a      	str	r2, [r3, #56]	@ 0x38
 8006004:	e005      	b.n	8006012 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006012:	7fbb      	ldrb	r3, [r7, #30]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d116      	bne.n	8006046 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <USB_CoreInit+0xe0>)
 8006028:	4313      	orrs	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f043 0206 	orr.w	r2, r3, #6
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006046:	7bfb      	ldrb	r3, [r7, #15]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006052:	b004      	add	sp, #16
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	ffbdffbf 	.word	0xffbdffbf
 800605c:	03ee0000 	.word	0x03ee0000

08006060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f023 0201 	bic.w	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d115      	bne.n	80060d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060b0:	200a      	movs	r0, #10
 80060b2:	f7fa ffa1 	bl	8000ff8 <HAL_Delay>
      ms += 10U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	330a      	adds	r3, #10
 80060ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa25 	bl	800650c <USB_GetMode>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d01e      	beq.n	8006106 <USB_SetCurrentMode+0x84>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80060cc:	d9f0      	bls.n	80060b0 <USB_SetCurrentMode+0x2e>
 80060ce:	e01a      	b.n	8006106 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d115      	bne.n	8006102 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060e2:	200a      	movs	r0, #10
 80060e4:	f7fa ff88 	bl	8000ff8 <HAL_Delay>
      ms += 10U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	330a      	adds	r3, #10
 80060ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa0c 	bl	800650c <USB_GetMode>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <USB_SetCurrentMode+0x84>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80060fe:	d9f0      	bls.n	80060e2 <USB_SetCurrentMode+0x60>
 8006100:	e001      	b.n	8006106 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e005      	b.n	8006112 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2bc8      	cmp	r3, #200	@ 0xc8
 800610a:	d101      	bne.n	8006110 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800611c:	b084      	sub	sp, #16
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800612a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	e009      	b.n	8006150 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3340      	adds	r3, #64	@ 0x40
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	3301      	adds	r3, #1
 800614e:	613b      	str	r3, [r7, #16]
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b0e      	cmp	r3, #14
 8006154:	d9f2      	bls.n	800613c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006156:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11c      	bne.n	8006198 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800616c:	f043 0302 	orr.w	r3, r3, #2
 8006170:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006176:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e005      	b.n	80061a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061aa:	461a      	mov	r2, r3
 80061ac:	2300      	movs	r3, #0
 80061ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d10d      	bne.n	80061d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f968 	bl	8006498 <USB_SetDevSpeed>
 80061c8:	e008      	b.n	80061dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061ca:	2101      	movs	r1, #1
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f963 	bl	8006498 <USB_SetDevSpeed>
 80061d2:	e003      	b.n	80061dc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061d4:	2103      	movs	r1, #3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f95e 	bl	8006498 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061dc:	2110      	movs	r1, #16
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8fa 	bl	80063d8 <USB_FlushTxFifo>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f924 	bl	800643c <USB_FlushRxFifo>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006204:	461a      	mov	r2, r3
 8006206:	2300      	movs	r3, #0
 8006208:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800621c:	461a      	mov	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	e043      	b.n	80062b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800623a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623e:	d118      	bne.n	8006272 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006252:	461a      	mov	r2, r3
 8006254:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e013      	b.n	8006284 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006268:	461a      	mov	r2, r3
 800626a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e008      	b.n	8006284 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627e:	461a      	mov	r2, r3
 8006280:	2300      	movs	r3, #0
 8006282:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a2:	461a      	mov	r2, r3
 80062a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3301      	adds	r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062b4:	461a      	mov	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d3b5      	bcc.n	8006228 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	e043      	b.n	800634a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d8:	d118      	bne.n	800630c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ec:	461a      	mov	r2, r3
 80062ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	e013      	b.n	800631e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006302:	461a      	mov	r2, r3
 8006304:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e008      	b.n	800631e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006318:	461a      	mov	r2, r3
 800631a:	2300      	movs	r3, #0
 800631c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	461a      	mov	r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006342:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	3301      	adds	r3, #1
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800634e:	461a      	mov	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	4293      	cmp	r3, r2
 8006354:	d3b5      	bcc.n	80062c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006376:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006378:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800637c:	2b00      	cmp	r3, #0
 800637e:	d105      	bne.n	800638c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f043 0210 	orr.w	r2, r3, #16
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	4b0f      	ldr	r3, [pc, #60]	@ (80063d0 <USB_DevInit+0x2b4>)
 8006392:	4313      	orrs	r3, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006398:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f043 0208 	orr.w	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d105      	bne.n	80063c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <USB_DevInit+0x2b8>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063cc:	b004      	add	sp, #16
 80063ce:	4770      	bx	lr
 80063d0:	803c3800 	.word	0x803c3800
 80063d4:	40000004 	.word	0x40000004

080063d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f2:	d901      	bls.n	80063f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e01b      	b.n	8006430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	daf2      	bge.n	80063e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	019b      	lsls	r3, r3, #6
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800641c:	d901      	bls.n	8006422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e006      	b.n	8006430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b20      	cmp	r3, #32
 800642c:	d0f0      	beq.n	8006410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3301      	adds	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006454:	d901      	bls.n	800645a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e018      	b.n	800648c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	daf2      	bge.n	8006448 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2210      	movs	r2, #16
 800646a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006478:	d901      	bls.n	800647e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e006      	b.n	800648c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b10      	cmp	r3, #16
 8006488:	d0f0      	beq.n	800646c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064b8:	4313      	orrs	r3, r2
 80064ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064e4:	f023 0303 	bic.w	r3, r3, #3
 80064e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064f8:	f043 0302 	orr.w	r3, r3, #2
 80064fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0301 	and.w	r3, r3, #1
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006540:	d901      	bls.n	8006546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e01b      	b.n	800657e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	daf2      	bge.n	8006534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f043 0201 	orr.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800656a:	d901      	bls.n	8006570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e006      	b.n	800657e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	d0f0      	beq.n	800655e <USB_CoreReset+0x36>

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <memset>:
 800658a:	4402      	add	r2, r0
 800658c:	4603      	mov	r3, r0
 800658e:	4293      	cmp	r3, r2
 8006590:	d100      	bne.n	8006594 <memset+0xa>
 8006592:	4770      	bx	lr
 8006594:	f803 1b01 	strb.w	r1, [r3], #1
 8006598:	e7f9      	b.n	800658e <memset+0x4>
	...

0800659c <__libc_init_array>:
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4d0d      	ldr	r5, [pc, #52]	@ (80065d4 <__libc_init_array+0x38>)
 80065a0:	4c0d      	ldr	r4, [pc, #52]	@ (80065d8 <__libc_init_array+0x3c>)
 80065a2:	1b64      	subs	r4, r4, r5
 80065a4:	10a4      	asrs	r4, r4, #2
 80065a6:	2600      	movs	r6, #0
 80065a8:	42a6      	cmp	r6, r4
 80065aa:	d109      	bne.n	80065c0 <__libc_init_array+0x24>
 80065ac:	4d0b      	ldr	r5, [pc, #44]	@ (80065dc <__libc_init_array+0x40>)
 80065ae:	4c0c      	ldr	r4, [pc, #48]	@ (80065e0 <__libc_init_array+0x44>)
 80065b0:	f000 f818 	bl	80065e4 <_init>
 80065b4:	1b64      	subs	r4, r4, r5
 80065b6:	10a4      	asrs	r4, r4, #2
 80065b8:	2600      	movs	r6, #0
 80065ba:	42a6      	cmp	r6, r4
 80065bc:	d105      	bne.n	80065ca <__libc_init_array+0x2e>
 80065be:	bd70      	pop	{r4, r5, r6, pc}
 80065c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c4:	4798      	blx	r3
 80065c6:	3601      	adds	r6, #1
 80065c8:	e7ee      	b.n	80065a8 <__libc_init_array+0xc>
 80065ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ce:	4798      	blx	r3
 80065d0:	3601      	adds	r6, #1
 80065d2:	e7f2      	b.n	80065ba <__libc_init_array+0x1e>
 80065d4:	0800663c 	.word	0x0800663c
 80065d8:	0800663c 	.word	0x0800663c
 80065dc:	0800663c 	.word	0x0800663c
 80065e0:	08006640 	.word	0x08006640

080065e4 <_init>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr

080065f0 <_fini>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	bf00      	nop
 80065f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065f6:	bc08      	pop	{r3}
 80065f8:	469e      	mov	lr, r3
 80065fa:	4770      	bx	lr
